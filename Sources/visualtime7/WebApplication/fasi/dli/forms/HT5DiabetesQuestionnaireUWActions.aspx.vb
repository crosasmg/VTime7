'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.3.34.1 at 2020-01-17 11:24:08 a. m. model release 2, Form Generator v1.0.37.30
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class HT5DiabetesQuestionnaireUWActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            
            Dim HT5DiabetesQuestionnaireUWParametersInstance As HT5DiabetesQuestionnaireUWParameters = Nothing

            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                    
                    With instance

                    End With                
                    
                    HT5DiabetesQuestionnaireUWParametersInstance = EntryDataToClass(HT5DiabetesQuestionnaireUWParametersInstance, instance)
                    SetDefaultValuesFromQueryString(HT5DiabetesQuestionnaireUWParametersInstance)
                    
                    If fromid.IsNotEmpty Then
                        GetTransferParameters(HT5DiabetesQuestionnaireUWParametersInstance, fromid)
                        ValidateParametersInstance(HT5DiabetesQuestionnaireUWParametersInstance)
                    End If
                Else       
                    instance.InstanceFormId = id.IfEmpty(urlid)
                    HT5DiabetesQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
    
                    If IsNothing(HT5DiabetesQuestionnaireUWParametersInstance) then
                        HT5DiabetesQuestionnaireUWParametersInstance = EntryDataToClass(HT5DiabetesQuestionnaireUWParametersInstance, instance)                        
                    End If
                    
                    SetDefaultValuesFromQueryString(HT5DiabetesQuestionnaireUWParametersInstance)
                End If

                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = String.Empty

                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    Form_Initialization(currentAction, HT5DiabetesQuestionnaireUWParametersInstance, resultData)
                Else
                    Form_Load(currentAction, HT5DiabetesQuestionnaireUWParametersInstance, resultData)
                End If


                instance = ClassToEntryData(instance, HT5DiabetesQuestionnaireUWParametersInstance) 
		        
                StoreFormInformation(HT5DiabetesQuestionnaireUWParametersInstance)
                                
                With resultData
                    .Success = True
                    .Data = New With {.Instance = instance, .LookUps = Nothing}
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "HT5DiabetesQuestionnaireUW", "Initialization", currentAction)
            End Try
            
            Return resultData
        End Function
  

        <WebMethod(EnableSession:=True)>
        Public Shared Function saveClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5DiabetesQuestionnaireUWParametersInstance As HT5DiabetesQuestionnaireUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                HT5DiabetesQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("saveClick")
                HT5DiabetesQuestionnaireUWParametersInstance = EntryDataToClass(HT5DiabetesQuestionnaireUWParametersInstance, instance)
                currentAction = SessionTrace("1. The message 'El cuestionario será...' will displayed as 'Splash'")
                ParametersToDictionary(HT5DiabetesQuestionnaireUWParametersInstance, parametersDictionary)
                messageAction = "El cuestionario será almacenado temporalmente. Recuerde que debe ser llenado para que su solicitud sea procesada. Muchas gracias."
                messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                resultData.AddNotifySplash(messageAction)

                instance = ClassToEntryData(instance, HT5DiabetesQuestionnaireUWParametersInstance)
                
                StoreFormInformation(HT5DiabetesQuestionnaireUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "HT5DiabetesQuestionnaireUW", "saveClick", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function submitClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5DiabetesQuestionnaireUWParametersInstance As HT5DiabetesQuestionnaireUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                HT5DiabetesQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("submitClick")
                HT5DiabetesQuestionnaireUWParametersInstance = EntryDataToClass(HT5DiabetesQuestionnaireUWParametersInstance, instance)
                currentAction = SessionTrace("1. HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5DiabetesQuestionnaireUWParametersInstance.uwcaseid)...")
                currentAction = SessionTrace("1.1. HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5DiabetesQuestionnaireUWParametersInstance.uwcaseid)...")

                HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5DiabetesQuestionnaireUWParametersInstance.uwcaseid)

                currentAction = SessionTrace("2. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64)
                .Add("uwreqid", HT5DiabetesQuestionnaireUWParametersInstance.uwreqid)
                .Add("ClientName", HT5DiabetesQuestionnaireUWParametersInstance.ClientName)
                .Add("StatusCase", HT5DiabetesQuestionnaireUWParametersInstance.StatusCase)
                .Add("StatusRequirement", HT5DiabetesQuestionnaireUWParametersInstance.StatusRequirement)
                .Add("RiskInformation", HT5DiabetesQuestionnaireUWParametersInstance.RiskInformation)
                .Add("Identifier", "'Diabetes'")
                .Add("context", formContext)
                .Add("caseLocked", HT5DiabetesQuestionnaireUWParametersInstance.caseLocked)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5DiabetesQuestionnaireUWParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                HT5DiabetesQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                HT5DiabetesQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
                HT5DiabetesQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                HT5DiabetesQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                HT5DiabetesQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("3. If HT5DiabetesQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then")
                If HT5DiabetesQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then

                    currentAction = SessionTrace("4. The message 'El estado del cuesti...' will displayed as 'Splash'")
                    ParametersToDictionary(HT5DiabetesQuestionnaireUWParametersInstance, parametersDictionary)
                    messageAction = "El estado del cuestionario no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros."
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifySplash(messageAction)
                    Else
                    currentAction = SessionTrace("5. Call Shared Function 'User Profile' without parameters")
                    Dim _ClientUser_634177e603464ad4a7fe1b989c2574f5 As InMotionGIT.Client.Entity.Contracts.Client
                    

      If Not IsNothing(UserInfo) AndAlso Not IsNothing(UserInfo.User) then
         _ClientUser_634177e603464ad4a7fe1b989c2574f5 = New InMotionGIT.Client.Entity.Contracts.Client

         With _ClientUser_634177e603464ad4a7fe1b989c2574f5
             .ClientID = UserInfo.User.ClientID
             .FirstName = UserInfo.User.FirstName
             .LastName = UserInfo.User.LastName
             .LastName2 = UserInfo.User.SecondLastName
             .BirthDate = UserInfo.User.DateOfBirth
             .LegalName = UserInfo.User.CompanyName
             .GenderEnum = IIf(UserInfo.User.Gender = "Male", InMotionGIT.Common.Contracts.Enumerations.EnumGender.Male, InMotionGIT.Common.Contracts.Enumerations.EnumGender.Female)
             .eMailAddressDefault = UserInfo.User.Email
             .CompleteClientName = .CompleteClientNameValid
         End With

	isNullResult = (IsNothing(_ClientUser_634177e603464ad4a7fe1b989c2574f5))
	isFoundData  = Not isNullResult
      End If
    
                    HT5DiabetesQuestionnaireUWParametersInstance.ClientUser = _ClientUser_634177e603464ad4a7fe1b989c2574f5

                    currentAction = SessionTrace("6. HT5DiabetesQuestionnaireUWParametersInstance.UsercodeFASI = UserInfo.UserId...")
                    currentAction = SessionTrace("6.1. HT5DiabetesQuestionnaireUWParametersInstance.UsercodeFASI = UserInfo.UserId...")

                    HT5DiabetesQuestionnaireUWParametersInstance.UsercodeFASI = UserInfo.UserId
                    currentAction = SessionTrace("6.2. HT5DiabetesQuestionnaireUWParametersInstance.IsAnonymous = UserInfo.IsAnonymous()...")

                    HT5DiabetesQuestionnaireUWParametersInstance.IsAnonymous = UserInfo.IsAnonymous()

                    currentAction = SessionTrace("7. If HT5DiabetesQuestionnaireUWParametersInstance.IsAnonymous = true Then")
                    If HT5DiabetesQuestionnaireUWParametersInstance.IsAnonymous = true Then

                        currentAction = SessionTrace("8. HT5DiabetesQuestionnaireUWParametersInstance.UsercodeFASI = 9998...")
                        currentAction = SessionTrace("8.1. HT5DiabetesQuestionnaireUWParametersInstance.UsercodeFASI = 9998...")

                        HT5DiabetesQuestionnaireUWParametersInstance.UsercodeFASI = 9998

                                End If
                    currentAction = SessionTrace("9. If HT5DiabetesQuestionnaireUWParametersInstance.caseLocked = true Then")
                    If HT5DiabetesQuestionnaireUWParametersInstance.caseLocked = true Then

                        currentAction = SessionTrace("10. Call 'Main Process Questionnaire Diabetes' workflow in Synchronous mode with tracking")
                        WorkflowInArguments = New Dictionary(Of String, Object)

                        With WorkflowInArguments
                        .Add("Diabetes", HT5DiabetesQuestionnaireUWParametersInstance.Diabetes)
                        .Add("uwcaseid", HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64)
                        .Add("uwreqid", HT5DiabetesQuestionnaireUWParametersInstance.uwreqid)
                        .Add("context", formContext)
                        .Add("ConnectedUserCode", HT5DiabetesQuestionnaireUWParametersInstance.UsercodeFASI)
                        .Add("caseLocked", HT5DiabetesQuestionnaireUWParametersInstance.caseLocked)
                        End With

                        WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireRulesDiabetes", "7bb9dccb-b421-48fd-911d-4dd35cc15c1d", 8, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5DiabetesQuestionnaireUWParametersInstance.InternalId)

                        currentAction += "'Mapping Outputs'"
                        HT5DiabetesQuestionnaireUWParametersInstance.Diabetes = WorkflowOutArguments("Diabetes")
                        HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                        HT5DiabetesQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")

                        currentAction = SessionTrace("11. Url: '#setting.Url.WebApplication#/Underwriting/UnderwritingPanel.aspx'")
                            
                With resultData
                    .AddRedirect(String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") +"/Underwriting/UnderwritingPanel.aspx"+"?closeWindow={0}","1"))
                End With
                                    Else
                        currentAction = SessionTrace("12. The message 'El cuestionario será...' will displayed as 'Splash'")
                        ParametersToDictionary(HT5DiabetesQuestionnaireUWParametersInstance, parametersDictionary)
                        messageAction = "El cuestionario será procesado. Muchas gracias."
                        messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                        resultData.AddNotifySplash(messageAction)
                        currentAction = SessionTrace("13. Call 'Main Process Questionnaire Diabetes' workflow in Asynchronous mode with tracking")
                        WorkflowInArguments = New Dictionary(Of String, Object)

                        With WorkflowInArguments
                        .Add("Diabetes", HT5DiabetesQuestionnaireUWParametersInstance.Diabetes)
                        .Add("uwcaseid", HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64)
                        .Add("uwreqid", HT5DiabetesQuestionnaireUWParametersInstance.uwreqid)
                        .Add("context", formContext)
                        .Add("ConnectedUserCode", HT5DiabetesQuestionnaireUWParametersInstance.UsercodeFASI)
                        .Add("caseLocked", HT5DiabetesQuestionnaireUWParametersInstance.caseLocked)
                        End With

                        WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireRulesDiabetes", "7bb9dccb-b421-48fd-911d-4dd35cc15c1d", 6, WorkflowInArguments, True, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5DiabetesQuestionnaireUWParametersInstance.InternalId)


                                        End If
                                    End If

                instance = ClassToEntryData(instance, HT5DiabetesQuestionnaireUWParametersInstance)
                
                StoreFormInformation(HT5DiabetesQuestionnaireUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "HT5DiabetesQuestionnaireUW", "submitClick", currentAction)
            End Try
            
            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


#End Region

#Region "Form Actions"

        Private Shared Sub Form_Initialization(ByRef currentAction As String, ByRef HT5DiabetesQuestionnaireUWParametersInstance As HT5DiabetesQuestionnaireUWParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            
            Dim formContext As New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                        HT5DiabetesQuestionnaireUWParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                                     .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                                     .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                                     .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Initialization")

            currentAction = SessionTrace("1. HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5DiabetesQuestionnaireUWParametersInstance.uwcaseid)...")
            currentAction = SessionTrace("1.1. HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5DiabetesQuestionnaireUWParametersInstance.uwcaseid)...")

            HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5DiabetesQuestionnaireUWParametersInstance.uwcaseid)

            currentAction = SessionTrace("2. If HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 <> 0 Then")
            If HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 <> 0 Then

                currentAction = SessionTrace("3. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64)
                .Add("uwreqid", HT5DiabetesQuestionnaireUWParametersInstance.uwreqid)
                .Add("ClientName", HT5DiabetesQuestionnaireUWParametersInstance.ClientName)
                .Add("StatusCase", HT5DiabetesQuestionnaireUWParametersInstance.StatusCase)
                .Add("StatusRequirement", HT5DiabetesQuestionnaireUWParametersInstance.StatusRequirement)
                .Add("RiskInformation", HT5DiabetesQuestionnaireUWParametersInstance.RiskInformation)
                .Add("Identifier", "'Diabetes'")
                .Add("context", formContext)
                .Add("caseLocked", HT5DiabetesQuestionnaireUWParametersInstance.caseLocked)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5DiabetesQuestionnaireUWParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                HT5DiabetesQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                HT5DiabetesQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
                HT5DiabetesQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                HT5DiabetesQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                HT5DiabetesQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("4. HT5DiabetesQuestionnaireUWParametersInstance.Diabetes.DateReceived = Date.Today...")
                currentAction = SessionTrace("4.1. HT5DiabetesQuestionnaireUWParametersInstance.Diabetes.DateReceived = Date.Today...")
                                If IsNothing(HT5DiabetesQuestionnaireUWParametersInstance.Diabetes) Then
                    HT5DiabetesQuestionnaireUWParametersInstance.Diabetes = New InMotionGIT.Questionnaires.Diabetes
                End If

                HT5DiabetesQuestionnaireUWParametersInstance.Diabetes.DateReceived = Date.Today

                End If

            
        End Sub
	
        Private Shared Sub Form_Load(ByRef currentAction As String, ByRef HT5DiabetesQuestionnaireUWParametersInstance As HT5DiabetesQuestionnaireUWParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                        HT5DiabetesQuestionnaireUWParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                                     .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                                     .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                                     .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Load")

            currentAction = SessionTrace("1. HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5DiabetesQuestionnaireUWParametersInstance.uwcaseid)...")
            currentAction = SessionTrace("1.1. HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5DiabetesQuestionnaireUWParametersInstance.uwcaseid)...")

            HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5DiabetesQuestionnaireUWParametersInstance.uwcaseid)

            currentAction = SessionTrace("2. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
            WorkflowInArguments = New Dictionary(Of String, Object)

            With WorkflowInArguments
            .Add("uwcaseid", HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64)
            .Add("uwreqid", HT5DiabetesQuestionnaireUWParametersInstance.uwreqid)
            .Add("ClientName", HT5DiabetesQuestionnaireUWParametersInstance.ClientName)
            .Add("StatusCase", HT5DiabetesQuestionnaireUWParametersInstance.StatusCase)
            .Add("StatusRequirement", HT5DiabetesQuestionnaireUWParametersInstance.StatusRequirement)
            .Add("RiskInformation", HT5DiabetesQuestionnaireUWParametersInstance.RiskInformation)
            .Add("Identifier", "'Diabetes'")
            .Add("context", formContext)
            .Add("caseLocked", HT5DiabetesQuestionnaireUWParametersInstance.caseLocked)
            End With

            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5DiabetesQuestionnaireUWParametersInstance.InternalId)

            currentAction += "'Mapping Outputs'"
            HT5DiabetesQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
            HT5DiabetesQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
            HT5DiabetesQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
            HT5DiabetesQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
            HT5DiabetesQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
            HT5DiabetesQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

            currentAction = SessionTrace("3. If HT5DiabetesQuestionnaireUWParametersInstance.fromPanel = true Then")
            If HT5DiabetesQuestionnaireUWParametersInstance.fromPanel = true Then

                currentAction = SessionTrace("4. part1d.Enabled = false, zonedia.Enabled = false, firmadia.Visible = false")
                currentAction = SessionTrace("4.1. part1d.Enabled = false...")
                resultData.AddControlBehavior("part1d", "disabled")
                currentAction = SessionTrace("4.2. zonedia.Enabled = false...")
                resultData.AddControlBehavior("zonedia", "disabled")
                currentAction = SessionTrace("4.3. firmadia.Visible = false...")
                resultData.AddControlBehavior("firmadia", "hide")

                End If

        End Sub
#End Region
#Region "Utilities"

        Private Shared Sub ParametersToDictionary(formData As HT5DiabetesQuestionnaireUWParameters, ByRef target As Dictionary(Of String, Object))
            If IsNothing(target) Then
                target = New Dictionary(Of String, Object)

                target.Add("Diabetes", formData.Diabetes)
                target.Add("uwcaseid", formData.uwcaseid)
                target.Add("uwreqid", formData.uwreqid)
                target.Add("ClientName", formData.ClientName)
                target.Add("StatusCase", formData.StatusCase)
                target.Add("StatusRequirement", formData.StatusRequirement)
                target.Add("RiskInformation", formData.RiskInformation)
                target.Add("fromPanel", formData.fromPanel)
                target.Add("uwCaseIdInt64", formData.uwCaseIdInt64)
                target.Add("caseLocked", formData.caseLocked)
                target.Add("ClientUser", formData.ClientUser)
                target.Add("UsercodeFASI", formData.UsercodeFASI)
                target.Add("IsAnonymous", formData.IsAnonymous)
            Else
                target("Diabetes") = formData.Diabetes
                target("uwcaseid") = formData.uwcaseid
                target("uwreqid") = formData.uwreqid
                target("ClientName") = formData.ClientName
                target("StatusCase") = formData.StatusCase
                target("StatusRequirement") = formData.StatusRequirement
                target("RiskInformation") = formData.RiskInformation
                target("fromPanel") = formData.fromPanel
                target("uwCaseIdInt64") = formData.uwCaseIdInt64
                target("caseLocked") = formData.caseLocked
                target("ClientUser") = formData.ClientUser
                target("UsercodeFASI") = formData.UsercodeFASI
                target("IsAnonymous") = formData.IsAnonymous
            End If
        End Sub

        Private Shared Sub GetTransferParameters(parametersData As HT5DiabetesQuestionnaireUWParameters, fromid As String)
            Dim fromDocumentCache As Object = Nothing

            If Not String.IsNullOrEmpty(fromid) Then
                fromDocumentCache = HttpContext.Current.Session(fromid)
                HttpContext.Current.Session.Remove(fromid)

            Else
                fromDocumentCache = HttpContext.Current.Session(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove("fromid")
            End If

            If Not IsNothing(fromDocumentCache) Then
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Diabetes", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientName", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusCase", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRequirement", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("fromPanel", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwCaseIdInt64", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("caseLocked", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientUser", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeFASI", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsAnonymous", fromDocumentCache, parametersData)
            End If
        End Sub

        Private Shared Function SessionTrace(message As String) As String

            If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                Dim tracelog As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath")))

                tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = tracelog
            End If

            Return message
        End Function

#End Region


#Region "Storage Database Methods"

      Private Shared Sub StoreFormInformation(formData As HT5DiabetesQuestionnaireUWParameters)
            If Not IsNothing(formData) Then
                Dim foundData As Boolean

                If formData.InternalId.IsEmpty Then
                    formData.InternalId = Guid.NewGuid.ToString
                Else
                    With New DataManagerFactory("SELECT COUNT(FormId) FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                 "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                        .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                        foundData = .QueryExecuteScalarToInteger > 0
                    End With
                End If

                If foundData Then
                    UpdateStorageData(formData)
                Else
                    InsertStorageData(formData)
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso
                    HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                    HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.HT5DiabetesQuestionnaireUW", formData.InternalId)) = formData
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track.Parameters")) AndAlso
                    HttpContext.Current.Session("Form.Track.Parameters").ToString.ToLower = "true" Then

                    If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                        InMotionGIT.Common.Helpers.FileHandler.SaveContent(String.Format(CultureInfo.InvariantCulture, 
                                                                                         "{0}\{1}.HT5DiabetesQuestionnaireUW.txt", ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), 
                                                                                         HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", 
                                                                                                                                   IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))))
                    End If

                    InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of HT5DiabetesQuestionnaireUWParameters)(formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.HT5DiabetesQuestionnaireUW.xml", 
                                                                                                                        ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
                End If
            End If
        End Sub

        Private Shared Function RetrieveFormInformationFromDatabase(instanceFormId As String) As HT5DiabetesQuestionnaireUWParameters
            Dim result As HT5DiabetesQuestionnaireUWParameters = Nothing
            Dim records As DataTable = Nothing

            With New DataManagerFactory("SELECT Content FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, instanceFormId)
                records = .QueryExecuteToTable(True)
            End With

            If records.Rows.Count > 0 Then
                result = Serialize.Deserialize(Of HT5DiabetesQuestionnaireUWParameters)(records.FirstRow.Item("Content"))
            End If

            Return result
        End Function

        Private Shared Sub InsertStorageData(formData As HT5DiabetesQuestionnaireUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("INSERT INTO FrontOffice.DocumentCache (FormId, ModelId, UserId, Page, Content, CreationDate, UpdateDate) VALUES(@:FormId, @:ModelId, @:UserId, @:Page, @:Content, @:CreationDate, @:UpdateDate)",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "18843733-c180-4ef3-88bd-b7d34304fd0f")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HT5DiabetesQuestionnaireUWParameters)(formData))
            .AddParameter("CreationDate", DbType.DateTime, 20, False, Now)
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)

                .CommandExecute()
            End With
        End Sub

        Private Shared Sub UpdateStorageData(formData As HT5DiabetesQuestionnaireUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("UPDATE FrontOffice.DocumentCache SET ModelId = @:ModelId, UserId = @:UserId, Page = @:Page, Content = @:Content, UpdateDate = @:UpdateDate WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "18843733-c180-4ef3-88bd-b7d34304fd0f")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HT5DiabetesQuestionnaireUWParameters)(formData))
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)

                .CommandExecute()
            End With
        End Sub

#End Region


#Region "Contracts Mappers"

        Private Shared Function EntryDataToClass(parametersData As HT5DiabetesQuestionnaireUWParameters, formData As EntryData) As HT5DiabetesQuestionnaireUWParameters
            If IsNothing(parametersData) Then
                parametersData = New HT5DiabetesQuestionnaireUWParameters
            End If

            If IsNothing(parametersData.Diabetes) Then
                parametersData.Diabetes = New InMotionGIT.Questionnaires.Diabetes
            End If
            If IsNothing(parametersData.Diabetes.DetailsPhysicians) Then
                parametersData.Diabetes.DetailsPhysicians = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitionersCollection
            End If

            With parametersData
                .InternalId = formData.InstanceFormId
                .ClientName = formData.ClientName
                .uwcaseid = formData.uwcaseid
                .Diabetes.AgeOnSetDiabetes = formData.DiabetesAgeOnSetDiabetes
                .Diabetes.DietMethod = formData.DiabetesDietMethod
                .Diabetes.ExerciseMethod = formData.DiabetesExerciseMethod
                .Diabetes.InsulinInjections = formData.DiabetesInsulinInjections
                .Diabetes.InsulinPump = formData.DiabetesInsulinPump
                .Diabetes.OtherMethod = formData.DiabetesOtherMethod
                .Diabetes.EKGAbnormality = formData.DiabetesEKGAbnormality
                .Diabetes.DiabeticComa = formData.DiabetesDiabeticComa
                .Diabetes.EyeTrouble = formData.DiabetesEyeTrouble
                .Diabetes.ProteinInUrine = formData.DiabetesProteinInUrine
                .Diabetes.SkinUlceration = formData.DiabetesSkinUlceration
                .Diabetes.Amputation = formData.DiabetesAmputation
                .Diabetes.Neuropathy = formData.DiabetesNeuropathy
                .Diabetes.InsulinReaction = formData.DiabetesInsulinReaction
                .Diabetes.Other = formData.DiabetesOther
                .Diabetes.FrenquencyMonitorBloodSugerLevel = formData.DiabetesFrenquencyMonitorBloodSugerLevel
                .Diabetes.MostRecentReadingSugarLevel = formData.DiabetesMostRecentReadingSugarLevel
                .Diabetes.MostRecentReadingBloodPressureDiastolic = formData.DiabetesMostRecentReadingBloodPressureDiastolic
                .Diabetes.DateLastVisitPhysician = formData.DiabetesDateLastVisitPhysician
                 If formData.DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners.IsNotEmpty Then
                    Dim temporalDetailsPhysicians As New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitionersCollection
                    Dim currentItem As InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitioners

	            For Each itemData As DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem In formData.DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners
                        currentItem = (From _x In parametersData.Diabetes.DetailsPhysicians Where _x.IdDetails = itemData.IdDetails Select _x).FirstOrDefault()
                     
	                If currentItem.IsEmpty Then
                            currentItem = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitioners
                  
                            With currentItem

                                .PractitionerName = itemData.PractitionerName
                                .PhonePractitioner = itemData.PhonePractitioner
                                .eMailPractitioner = itemData.eMailPractitioner
                                .AddresPractitioner = itemData.AddresPractitioner
                                .IdDetails = itemData.IdDetails
                            End With                      
                                              
	                Else
                            With currentItem

                                .PractitionerName = itemData.PractitionerName
                                .PhonePractitioner = itemData.PhonePractitioner
                                .eMailPractitioner = itemData.eMailPractitioner
                                .AddresPractitioner = itemData.AddresPractitioner
                                .IdDetails = itemData.IdDetails
                            End With
                        End If
                        
                        temporalDetailsPhysicians.Add(currentItem)
                    Next
                    
                    parametersData.Diabetes.DetailsPhysicians = temporalDetailsPhysicians
                 End If
                .Diabetes.CholesterolBelow200 = formData.DiabetesCholesterolBelow200
                .Diabetes.AdditionalInformation = formData.DiabetesAdditionalInformation
                .Diabetes.DateReceived = formData.DiabetesDateReceived
            End With

            Return parametersData
        End Function

        Private Shared Function ClassToEntryData(formData As EntryData, parametersData As HT5DiabetesQuestionnaireUWParameters) As EntryData
            formData = New EntryData

            With formData
                .InstanceFormId = parametersData.InternalId
                .ClientName = parametersData.ClientName
                .uwcaseid = parametersData.uwcaseid
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesAgeOnSetDiabetes = parametersData.Diabetes.AgeOnSetDiabetes
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesDietMethod = parametersData.Diabetes.DietMethod
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesExerciseMethod = parametersData.Diabetes.ExerciseMethod
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesInsulinInjections = parametersData.Diabetes.InsulinInjections
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesInsulinPump = parametersData.Diabetes.InsulinPump
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesOtherMethod = parametersData.Diabetes.OtherMethod
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesEKGAbnormality = parametersData.Diabetes.EKGAbnormality
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesDiabeticComa = parametersData.Diabetes.DiabeticComa
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesEyeTrouble = parametersData.Diabetes.EyeTrouble
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesProteinInUrine = parametersData.Diabetes.ProteinInUrine
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesSkinUlceration = parametersData.Diabetes.SkinUlceration
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesAmputation = parametersData.Diabetes.Amputation
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesNeuropathy = parametersData.Diabetes.Neuropathy
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesInsulinReaction = parametersData.Diabetes.InsulinReaction
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesOther = parametersData.Diabetes.Other
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesFrenquencyMonitorBloodSugerLevel = parametersData.Diabetes.FrenquencyMonitorBloodSugerLevel
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesMostRecentReadingSugarLevel = parametersData.Diabetes.MostRecentReadingSugarLevel
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesMostRecentReadingBloodPressureDiastolic = parametersData.Diabetes.MostRecentReadingBloodPressureDiastolic
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesDateLastVisitPhysician = parametersData.Diabetes.DateLastVisitPhysician
                End If
                .DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners = New List(Of DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem)

                If Not IsNothing(parametersData.Diabetes) AndAlso Not IsNothing(parametersData.Diabetes.DetailsPhysicians) Then
                    Dim newItem As DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem
                    
                    For Each itemData As InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitioners In parametersData.Diabetes.DetailsPhysicians
                        newItem = New DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem
                        
                        With newItem
                            .PractitionerName = itemData.PractitionerName
                            .PhonePractitioner = itemData.PhonePractitioner
                            .eMailPractitioner = itemData.eMailPractitioner
                            .AddresPractitioner = itemData.AddresPractitioner
                            .IdDetails = itemData.IdDetails                        
                        End With

                        .DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners.Add(newItem)
                    Next

                    If .DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners.Count <> 0 Then

                    End If
                End If


                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesCholesterolBelow200 = parametersData.Diabetes.CholesterolBelow200
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesAdditionalInformation = parametersData.Diabetes.AdditionalInformation
                End If
                If Not IsNothing(parametersData.Diabetes) Then
                    .DiabetesDateReceived = parametersData.Diabetes.DateReceived
                End If
            End With

            Return formData
        End Function

#End Region

#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As HT5DiabetesQuestionnaireUWParameters)
            If HttpContext.Current.Request.QueryString("uwcaseid").IsNotEmpty Then
                formData.uwcaseid = HttpContext.Current.Request.QueryString("uwcaseid")
            End If
            If HttpContext.Current.Request.QueryString("uwreqid").IsNotEmpty Then
                formData.uwreqid = HttpContext.Current.Request.QueryString("uwreqid")
            End If
            If HttpContext.Current.Request.QueryString("ClientName").IsNotEmpty Then
                formData.ClientName = HttpContext.Current.Request.QueryString("ClientName")
            End If
            If HttpContext.Current.Request.QueryString("StatusCase").IsNotEmpty Then
                formData.StatusCase = HttpContext.Current.Request.QueryString("StatusCase")
            End If
            If HttpContext.Current.Request.QueryString("StatusRequirement").IsNotEmpty Then
                formData.StatusRequirement = HttpContext.Current.Request.QueryString("StatusRequirement")
            End If
            If HttpContext.Current.Request.QueryString("fromPanel").IsNotEmpty Then
                formData.fromPanel = HttpContext.Current.Request.QueryString("fromPanel")
            End If
            If HttpContext.Current.Request.QueryString("uwCaseIdInt64").IsNotEmpty Then
                formData.uwCaseIdInt64 = HttpContext.Current.Request.QueryString("uwCaseIdInt64")
            End If
            If HttpContext.Current.Request.QueryString("caseLocked").IsNotEmpty Then
                formData.caseLocked = HttpContext.Current.Request.QueryString("caseLocked")
            End If
            If HttpContext.Current.Request.QueryString("UsercodeFASI").IsNotEmpty Then
                formData.UsercodeFASI = HttpContext.Current.Request.QueryString("UsercodeFASI")
            End If
            If HttpContext.Current.Request.QueryString("IsAnonymous").IsNotEmpty Then
                formData.IsAnonymous = HttpContext.Current.Request.QueryString("IsAnonymous")
            End If
        End Sub	

        Private Shared Sub ValidateParametersInstance(ByRef formData As HT5DiabetesQuestionnaireUWParameters)
            If IsNothing(formData.Diabetes) Then
                formData.Diabetes = New InMotionGIT.Questionnaires.Diabetes
            End If
            If IsNothing(formData.Diabetes.DetailsPhysicians) Then
                formData.Diabetes.DetailsPhysicians = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitionersCollection
            End If

        End Sub

#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property ClientName As String
            <DataMember()> Public Property uwcaseid As Int64
            <DataMember()> Public Property DiabetesAgeOnSetDiabetes As System.Int32
            <DataMember()> Public Property DiabetesDietMethod As System.Boolean
            <DataMember()> Public Property DiabetesExerciseMethod As System.Boolean
            <DataMember()> Public Property DiabetesInsulinInjections As System.Boolean
            <DataMember()> Public Property DiabetesInsulinPump As System.Boolean
            <DataMember()> Public Property DiabetesOtherMethod As System.String
            <DataMember()> Public Property DiabetesEKGAbnormality As System.Boolean
            <DataMember()> Public Property DiabetesDiabeticComa As System.Boolean
            <DataMember()> Public Property DiabetesEyeTrouble As System.Boolean
            <DataMember()> Public Property DiabetesProteinInUrine As System.Boolean
            <DataMember()> Public Property DiabetesSkinUlceration As System.Boolean
            <DataMember()> Public Property DiabetesAmputation As System.Boolean
            <DataMember()> Public Property DiabetesNeuropathy As System.Boolean
            <DataMember()> Public Property DiabetesInsulinReaction As System.Boolean
            <DataMember()> Public Property DiabetesOther As System.String
            <DataMember()> Public Property DiabetesFrenquencyMonitorBloodSugerLevel As System.Int32
            <DataMember()> Public Property DiabetesMostRecentReadingSugarLevel As System.String
            <DataMember()> Public Property DiabetesMostRecentReadingBloodPressureDiastolic As System.String
            <DataMember()> Public Property DiabetesDateLastVisitPhysician As System.DateTime
            <DataMember()> Public Property DiabetesDetailsPhysiciansPractitionerName As System.String
            <DataMember()> Public Property DiabetesDetailsPhysiciansPhonePractitioner As System.String
            <DataMember()> Public Property DiabetesDetailsPhysicianseMailPractitioner As System.String
            <DataMember()> Public Property DiabetesDetailsPhysiciansAddresPractitioner As System.String
            <DataMember()> Public Property DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners As List(Of DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem)
            <DataMember()> Public Property DiabetesCholesterolBelow200 As System.Boolean
            <DataMember()> Public Property DiabetesAdditionalInformation As System.String
            <DataMember()> Public Property DiabetesDateReceived As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem

            <DataMember()> Public Property PractitionerName As System.String
            <DataMember()> Public Property PhonePractitioner As System.String
            <DataMember()> Public Property eMailPractitioner As System.String
            <DataMember()> Public Property AddresPractitioner As System.String
            <DataMember()> Public Property IdDetails As System.Int32

        End Class

        <Serializable()>
        Public Class HT5DiabetesQuestionnaireUWParameters
            Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of HT5DiabetesQuestionnaireUWParameters)

            Public Property Diabetes As InMotionGIT.Questionnaires.Diabetes
            Public Property uwcaseid As Int64
            Public Property uwreqid As Int64
            Public Property ClientName As String
            Public Property StatusCase As Int32
            Public Property StatusRequirement As Int32
            Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
            Public Property fromPanel As Boolean
            Public Property uwCaseIdInt64 As Int64
            Public Property caseLocked As Boolean
            Public Property ClientUser As InMotionGIT.Client.Entity.Contracts.Client
            Public Property UsercodeFASI As Int32
            Public Property IsAnonymous As Boolean

        End Class
#End Region

    End Class

End Namespace

