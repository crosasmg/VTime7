'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.3.36.1 at 2020-03-18 09:46:09 AM model release 4, Form Generator v1.0.37.37
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Net
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class LookupDetailActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            
            
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                  
                
                Else
                    instance.InstanceFormId = id.IfEmpty(urlid)
                End If             
             
                With resultData
                    .Success = True
                    .Data = New With {.Instance = instance, .LookUps = LoadLookupsList()}
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "LookupDetail", "Initialization", currentAction)
            End Try
            
            Return resultData
        End Function
  

        Public Shared Function LoadLookupsList() As List(Of InMotionGIT.Common.DataType.LookUpPackage)
            Dim result As New List(Of InMotionGIT.Common.DataType.LookUpPackage)
            
            Dim dataFactory As New DataManagerFactory("PackageExecuteToLookUp", "LOOKUPS", "")
            Dim dataCommand As InMotionGIT.Common.Services.Contracts.DataCommand = Nothing
            
            dataCommand = dataFactory.AddCommand(String.Format(CultureInfo.CurrentCulture, "SELECT  LOOKUP.CODE, LOOKUP.DESCRIPTION FROM LOOKUP LOOKUP  WHERE LOOKUP.LOOKUPID = {0} AND LOOKUP.LANGUAGEID = {1} AND LOOKUP.RECORDSTATUS = {2}  AND NOT LOOKUP.DESCRIPTION IS NULL ORDER BY DESCRIPTION", 2, InMotionGIT.FASI.Support.Handlers.LanguageHandler.ContextLanguageId(), 1), New InMotionGIT.Common.DataType.LookUpValue With {.Code = "CODE", .Description = "DESCRIPTION"}, "RECORDSTATUS", "LOOKUP", "Linked.FrontOffice")

            dataCommand = dataFactory.AddCommand(String.Format(CultureInfo.CurrentCulture, "SELECT  LOOKUPMASTER.LOOKUPID, LOOKUPMASTER.DESCRIPTION FROM LOOKUPMASTER LOOKUPMASTER  WHERE LOOKUPMASTER.RECORDSTATUS = {0}  AND NOT LOOKUPMASTER.DESCRIPTION IS NULL ORDER BY DESCRIPTION", 1), New InMotionGIT.Common.DataType.LookUpValue With {.Code = "LOOKUPID", .Description = "DESCRIPTION"}, "filter", "LOOKUPMASTER", "Linked.FrontOffice")

            dataCommand = dataFactory.AddCommand(String.Format(CultureInfo.CurrentCulture, "SELECT  TRANSLANGUAGE.LANGUAGECODEID, TRANSLANGUAGE.DESCRIPTION FROM TRANSLANGUAGE TRANSLANGUAGE  WHERE TRANSLANGUAGE.LANGUAGEID = {0}  ORDER BY TransLanguage.Description", InMotionGIT.FASI.Support.Handlers.LanguageHandler.ContextLanguageId()), New InMotionGIT.Common.DataType.LookUpValue With {.Code = "LanguageCodeID", .Description = "Description"}, "dropdownlist3", "TransLanguage", "Linked.Common")
            
            result = dataFactory.PackageExecuteToLookUp()
	
            Return result
        End Function


        <WebMethod()>
        Public Shared Function LOOKUP_GridTblDataLoad(filter As String, LOOKUPLOOKUPID1 As Integer, LOOKUPLANGUAGEID2 As Integer) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.LOOKUPID = 0, .LANGUAGEID = 0, .CODE = 0, .DESCRIPTION = String.Empty, .QUERYORDER = 0, .RECORDSTATUS = 0, .LASTUPDATEBY = String.Empty, .LASTUPDATEDON = Date.MinValue}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)
            
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")

                With New DataManagerFactory("SELECT LOOKUP.LOOKUPID, LOOKUP.LANGUAGEID, LOOKUP.CODE, LOOKUP.DESCRIPTION, LOOKUP.QUERYORDER, LOOKUP.RECORDSTATUS, LOOKUP.LASTUPDATEBY, LOOKUP.LASTUPDATEDON FROM LOOKUP LOOKUP  WHERE LOOKUP.LOOKUPID = @:LOOKUPID1 AND LOOKUP.LANGUAGEID = @:LANGUAGEID2 ORDER BY LOOKUP.CODE", "LOOKUP", "Linked.FrontOffice")
                    .AddParameter("LOOKUPID1", DbType.Int32, 5, False, LOOKUPLOOKUPID1)
                    .AddParameter("LANGUAGEID2", DbType.Int32, 5, False, LOOKUPLANGUAGEID2)

                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.LOOKUPID = itemData.NumericValue("LOOKUPID"), .LANGUAGEID = itemData.NumericValue("LANGUAGEID"), .CODE = itemData.NumericValue("CODE"), .DESCRIPTION = itemData.StringValue("DESCRIPTION"), .QUERYORDER = itemData.NumericValue("QUERYORDER"), .RECORDSTATUS = itemData.NumericValue("RECORDSTATUS"), .LASTUPDATEBY = itemData.StringValue("LASTUPDATEBY"), .LASTUPDATEDON = itemData.DateTimeValue("LASTUPDATEDON")}
                            
                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With
            
            If responseList.Count <> 0 Then          
		    
            End If
                
            Catch ex As Exception            
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "LookupDetail", "LOOKUP_GridTblDataLoad", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function LOOKUP_Grid1InsertCommandActionLOOKUP(LOOKUPID1 As Decimal, LANGUAGEID2 As Decimal, CODE3 As Decimal, DESCRIPTION4 As String, QUERYORDER5 As Decimal, RECORDSTATUS6 As Decimal, LASTUPDATEBY6 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                With New DataManagerFactory("INSERT INTO FRONTOFFICE.LOOKUP (LOOKUPID, LANGUAGEID, CODE, DESCRIPTION, QUERYORDER, RECORDSTATUS, LASTUPDATEBY, LASTUPDATEDON) VALUES (@:LOOKUPID1, @:LANGUAGEID2, @:CODE3, @:DESCRIPTION4, @:QUERYORDER5, @:RECORDSTATUS6, @:LASTUPDATEBY6, @:LASTUPDATEDON7)", "LOOKUP", "Linked.FrontOffice")
                    .AddParameter("LOOKUPID1", DbType.Decimal, 5, False, LOOKUPID1)
                    .AddParameter("LANGUAGEID2", DbType.Decimal, 5, False, LANGUAGEID2)
                    .AddParameter("CODE3", DbType.Decimal, 5, False, CODE3)
                    .AddParameter("DESCRIPTION4", DbType.AnsiString, 255, (DESCRIPTION4 = String.Empty), DESCRIPTION4)
                    .AddParameter("QUERYORDER5", DbType.Decimal, 8, False, QUERYORDER5)
                    .AddParameter("RECORDSTATUS6", DbType.Decimal, 5, False, RECORDSTATUS6)
                    .AddParameter("LASTUPDATEBY6", DbType.AnsiString, 255, (LASTUPDATEBY6 = String.Empty), LASTUPDATEBY6)
                    .AddParameter("LASTUPDATEDON7", DbType.DateTime, 7, False, Date.Now)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "LookupDetail", "LOOKUP_Grid1InsertCommandActionLOOKUP", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function LOOKUP_Grid1UpdateCommandActionLOOKUP(DESCRIPTION1 As String, QUERYORDER2 As Decimal, RECORDSTATUS3 As Decimal, LASTUPDATEBY3 As String, LOOKUPLOOKUPID6 As Decimal, LOOKUPLANGUAGEID7 As Decimal, LOOKUPCODE8 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                With New DataManagerFactory("UPDATE FRONTOFFICE.LOOKUP SET DESCRIPTION = @:DESCRIPTION1, QUERYORDER = @:QUERYORDER2, RECORDSTATUS = @:RECORDSTATUS3, LASTUPDATEBY = @:LASTUPDATEBY3, LASTUPDATEDON = @:LASTUPDATEDON4 WHERE LOOKUP.LOOKUPID = @:LOOKUPID6 AND LOOKUP.LANGUAGEID = @:LANGUAGEID7 AND LOOKUP.CODE = @:CODE8", "LOOKUP", "Linked.FrontOffice")
                    .AddParameter("DESCRIPTION1", DbType.AnsiString, 255, (DESCRIPTION1 = String.Empty), DESCRIPTION1)
                    .AddParameter("QUERYORDER2", DbType.Decimal, 8, False, QUERYORDER2)
                    .AddParameter("RECORDSTATUS3", DbType.Decimal, 5, False, RECORDSTATUS3)
                    .AddParameter("LASTUPDATEBY3", DbType.AnsiString, 255, (LASTUPDATEBY3 = String.Empty), LASTUPDATEBY3)
                    .AddParameter("LASTUPDATEDON4", DbType.DateTime, 7, False, Date.Now)
                    .AddParameter("LOOKUPID6", DbType.Decimal, 0, False, LOOKUPLOOKUPID6)
                    .AddParameter("LANGUAGEID7", DbType.Decimal, 0, False, LOOKUPLANGUAGEID7)
                    .AddParameter("CODE8", DbType.Decimal, 0, False, LOOKUPCODE8)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "LookupDetail", "LOOKUP_Grid1UpdateCommandActionLOOKUP", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function LOOKUP_Grid1DeleteCommandActionLOOKUP(LOOKUPLOOKUPID1 As Decimal, LOOKUPCODE2 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                With New DataManagerFactory("DELETE FROM FRONTOFFICE.LOOKUP WHERE LOOKUP.LOOKUPID = @:LOOKUPID1 AND LOOKUP.CODE = @:CODE2", "LOOKUP", "Linked.FrontOffice")
                    .AddParameter("LOOKUPID1", DbType.Decimal, 0, False, LOOKUPLOOKUPID1)
                    .AddParameter("CODE2", DbType.Decimal, 0, False, LOOKUPCODE2)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "LookupDetail", "LOOKUP_Grid1DeleteCommandActionLOOKUP", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function LOOKUP_Grid2SelectCommandActionLOOKUP() As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}
            Dim responseList As New List(Of Object)
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")

                With New DataManagerFactory("Select MAX(LOOKUP.CODE) CODE FROM LOOKUP LOOKUP ", "LOOKUP", "Linked.FrontOffice")

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With
            
            If responseList.Count <> 0 Then          
		    
            End If
                
            Catch ex As Exception            
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "LookupDetail", "LOOKUP_Grid2SelectCommandActionLOOKUP", String.Empty)
            End Try
            
            Return resultData
        End Function


#End Region

#Region "Lookups Web Methods"


        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForRECORDSTATUS(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)                       
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                 
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  LOOKUP.CODE, LOOKUP.DESCRIPTION FROM LOOKUP LOOKUP  WHERE LOOKUP.LOOKUPID = {0} AND LOOKUP.LANGUAGEID = {1} AND LOOKUP.RECORDSTATUS = {2}  AND NOT LOOKUP.DESCRIPTION IS NULL ORDER BY DESCRIPTION", 2, InMotionGIT.FASI.Support.Handlers.LanguageHandler.ContextLanguageId(), 1), 
                                            "LOOKUP", "Linked.FrontOffice")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("CODE"),
                                                                                            .Description = item.StringValue("DESCRIPTION")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "LookupDetail", "LookUpForRECORDSTATUS", String.Empty)
            End Try
                        
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForfilter(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)                       
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                 
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  LOOKUPMASTER.LOOKUPID, LOOKUPMASTER.DESCRIPTION FROM LOOKUPMASTER LOOKUPMASTER  WHERE LOOKUPMASTER.RECORDSTATUS = {0}  AND NOT LOOKUPMASTER.DESCRIPTION IS NULL ORDER BY DESCRIPTION", 1), 
                                            "LOOKUPMASTER", "Linked.FrontOffice")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("LOOKUPID"),
                                                                                            .Description = item.StringValue("DESCRIPTION")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "LookupDetail", "LookUpForfilter", String.Empty)
            End Try
                        
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpFordropdownlist3(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)                       
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                 
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TRANSLANGUAGE.LANGUAGECODEID, TRANSLANGUAGE.DESCRIPTION FROM TRANSLANGUAGE TRANSLANGUAGE  WHERE TRANSLANGUAGE.LANGUAGEID = {0}  ORDER BY TransLanguage.Description", InMotionGIT.FASI.Support.Handlers.LanguageHandler.ContextLanguageId()), 
                                            "TransLanguage", "Linked.Common")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("LanguageCodeID"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "LookupDetail", "LookUpFordropdownlist3", String.Empty)
            End Try
                        
            Return result
        End Function

#End Region

#Region "Form Actions"


#End Region





#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As EntryData)
            If HttpContext.Current.Request.QueryString("filter").IsNotEmpty Then
                formData.filter = HttpContext.Current.Request.QueryString("filter")
            End If
            If HttpContext.Current.Request.QueryString("filterLng").IsNotEmpty Then
                formData.filterLng = HttpContext.Current.Request.QueryString("filterLng")
            End If
        End Sub	


#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property LOOKUPCollectionLOOKUPID As System.Int32
            <DataMember()> Public Property LOOKUPCollectionLANGUAGEID As System.Int32
            <DataMember()> Public Property LOOKUPCollectionCODE As System.Int32
            <DataMember()> Public Property LOOKUPCollectionDESCRIPTION As System.String
            <DataMember()> Public Property LOOKUPCollectionQUERYORDER As System.Int32
            <DataMember()> Public Property LOOKUPCollectionRECORDSTATUS As System.Int32
            <DataMember()> Public Property LOOKUPCollectionLASTUPDATEBY As System.String
            <DataMember()> Public Property LOOKUPCollectionLASTUPDATEDON As System.DateTime
            <DataMember()> Public Property LOOKUP_Grid_LOOKUP_Item As List(Of LOOKUP_Grid_LOOKUP_ItemItem)
            <DataMember()> Public Property filter As Int32
            <DataMember()> Public Property filterLng As Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class LOOKUP_Grid_LOOKUP_ItemItem

            <DataMember()> Public Property LOOKUPID As System.Int32
            <DataMember()> Public Property LANGUAGEID As System.Int32
            <DataMember()> Public Property CODE As System.Int32
            <DataMember()> Public Property DESCRIPTION As System.String
            <DataMember()> Public Property QUERYORDER As System.Int32
            <DataMember()> Public Property RECORDSTATUS As System.Int32
            <DataMember()> Public Property LASTUPDATEBY As System.String
            <DataMember()> Public Property LASTUPDATEDON As System.DateTime

        End Class


#End Region

    End Class

End Namespace

