'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.1.220.1 at 2019/02/21 04:19:31 p.m. model release 1, Form Generator v1.0.34.20
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class HT5CompleteStudyOfClientIndicatedSummaryActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            Dim HT5CompleteStudyOfClientIndicatedSummaryParametersInstance As HT5CompleteStudyOfClientIndicatedSummaryParameters = Nothing

            Try
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                    
                    With instance

                    End With                
                    
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance = EntryDataToClass(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance, instance)
                    SetDefaultValuesFromQueryString(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance)
                    
                    If fromid.IsNotEmpty Then
                        GetTransferParameters(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance, fromid)
                        ValidateParametersInstance(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance)
                    End If
                Else       
                    instance.InstanceFormId = id.IfEmpty(urlid)
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance = RetrieveFormInformationFromSession(instance.InstanceFormId)
         
                    If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance) then
                        HT5CompleteStudyOfClientIndicatedSummaryParametersInstance = EntryDataToClass(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance, instance)
                        SetDefaultValuesFromQueryString(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance)
                    End If
                End If

                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = String.Empty

                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    Form_Initialization(currentAction, HT5CompleteStudyOfClientIndicatedSummaryParametersInstance, resultData)
                End If


                instance = ClassToEntryData(instance, HT5CompleteStudyOfClientIndicatedSummaryParametersInstance) 
		        StoreFormInformationOnSession(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance)
                
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CompleteStudyOfClientIndicatedSummary", "Initialization", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
   
        <WebMethod()>
        Public Shared Function ClientID(filter As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                resultData = InMotionGIT.BackOffice.Support.Connection.Client.Lookup(filter, 1, 20)
            Catch ex As Exception
                LogHandler.ErrorLog("HT5CompleteStudyOfClientIndicatedSummary", "ClientID", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ClientID)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function button1Click(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5CompleteStudyOfClientIndicatedSummaryParametersInstance As HT5CompleteStudyOfClientIndicatedSummaryParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5CompleteStudyOfClientIndicatedSummaryParametersInstance = RetrieveFormInformationFromSession(instance.InstanceFormId)
         
                    If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance) then
                        HT5CompleteStudyOfClientIndicatedSummaryParametersInstance = EntryDataToClass(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance, instance)
                        SetDefaultValuesFromQueryString(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance)
                    End If
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("button1Click")
                HT5CompleteStudyOfClientIndicatedSummaryParametersInstance = EntryDataToClass(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance, instance)
                currentAction = SessionTrace("1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false...")
                currentAction = SessionTrace("1.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false...")

                HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false

                currentAction = SessionTrace("2. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.IsProducer = true Then")
                If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.IsProducer = true Then

                    currentAction = SessionTrace("3. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClienteSelIntermediario...")
                    currentAction = SessionTrace("3.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClienteSelIntermediario...")
                                    If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation) Then
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                    If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClienteSelIntermediario

                    End If
                currentAction = SessionTrace("4. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID Not Is Null Or Not Empty '' Then")
                If Not String.IsNullOrEmpty(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID) Then

                    currentAction = SessionTrace("5. Call Shared Function 'Retrieve Client' with parameters (Client Identification)")
                If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation) Then
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If

                If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If

                    Dim _Client_a88250ce157c4c65818f7efdb4eba2a6 As InMotionGIT.Client.Entity.Contracts.Client
                    
      _Client_a88250ce157c4c65818f7efdb4eba2a6 = (New InMotionGIT.Client.Services.ClientManager).Retrieve(clientId:=HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID, atDate:=Date.Today, childFilter:= "All")
      isNullResult = (IsNothing(_Client_a88250ce157c4c65818f7efdb4eba2a6))
      isFoundData  = Not isNullResult
    
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client = _Client_a88250ce157c4c65818f7efdb4eba2a6

                        Else
                    currentAction = SessionTrace("6. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = true...")
                    currentAction = SessionTrace("6.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = true...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = true

                    currentAction = SessionTrace("7. The message 'Debe seleccionar el ...' will displayed as 'Popup'")
                    ParametersToDictionary(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance, parametersDictionary)
                    messageAction = "Debe seleccionar el cliente a consultar"
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifyPopup(messageAction)
                            End If
                currentAction = SessionTrace("8. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false Then")
                If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("9. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ProcessDate = Date.Today...")
                    currentAction = SessionTrace("9.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ProcessDate = Date.Today...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ProcessDate = Date.Today

                    currentAction = SessionTrace("10. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Currency = 1...")
                    currentAction = SessionTrace("10.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Currency = 1...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Currency = 1

                    currentAction = SessionTrace("11. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.MarketingUserIndicator = False...")
                    currentAction = SessionTrace("11.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.MarketingUserIndicator = False...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.MarketingUserIndicator = False

                    currentAction = SessionTrace("12. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TipoDeBusqueda = 0...")
                    currentAction = SessionTrace("12.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TipoDeBusqueda = 0...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TipoDeBusqueda = 0

                    currentAction = SessionTrace("13. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection = Nothing...")
                    currentAction = SessionTrace("13.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection = Nothing...")
                                    If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection) Then
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection
                End If

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection = Nothing

                    currentAction = SessionTrace("14. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Estadodelacotización = 0...")
                    currentAction = SessionTrace("14.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Estadodelacotización = 0...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Estadodelacotización = 0

                    currentAction = SessionTrace("15. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TotalQuantity = 0...")
                    currentAction = SessionTrace("15.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TotalQuantity = 0...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TotalQuantity = 0

                    currentAction = SessionTrace("16. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ProductsFoundIndicator = False...")
                    currentAction = SessionTrace("16.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ProductsFoundIndicator = False...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ProductsFoundIndicator = False

                    currentAction = SessionTrace("17. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.EffectiveDate = Date.Today...")
                    currentAction = SessionTrace("17.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.EffectiveDate = Date.Today...")
                                    If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation) Then
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.EffectiveDate = Date.Today

                    currentAction = SessionTrace("18. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Edad = year(Date.Today)-year(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Ris...")
                    currentAction = SessionTrace("18.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Edad = year(Date.Today)-year(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Ris...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Edad = year(Date.Today)-year(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate)
                    currentAction = SessionTrace("18.2. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Genero = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryIn...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Genero = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.Gender
                    currentAction = SessionTrace("18.3. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.EstadoCivil = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryIn...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.EstadoCivil = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.CivilStatus
                    currentAction = SessionTrace("18.4. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.NumeroHijos = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryIn...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.NumeroHijos = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.NumberOfChildren

                    currentAction = SessionTrace("19. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.eMail = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryIn...")
                    currentAction = SessionTrace("19.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.eMail = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryIn...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.eMail = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.eMailAddressDefault

                    currentAction = SessionTrace("20. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection = Nothing...")
                    currentAction = SessionTrace("20.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection = Nothing...")
                                    If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection) Then
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection
                End If

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection = Nothing

                    currentAction = SessionTrace("21. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClientExistInDB = true...")
                    currentAction = SessionTrace("21.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClientExistInDB = true...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClientExistInDB = true

                    currentAction = SessionTrace("22. zone5.Visible = true, zone12.Visible = true, zone4.Visible = true...")
                    currentAction = SessionTrace("22.1. zone5.Visible = true...")
                    resultData.AddControlBehavior("zone5", "show")
                    currentAction = SessionTrace("22.2. zone12.Visible = true...")
                    resultData.AddControlBehavior("zone12", "show")
                    currentAction = SessionTrace("22.3. zone4.Visible = true...")
                    resultData.AddControlBehavior("zone4", "show")
                    currentAction = SessionTrace("22.4. zone3.Visible = true...")
                    resultData.AddControlBehavior("zone3", "show")

                    currentAction = SessionTrace("23. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = 0...")
                    currentAction = SessionTrace("23.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = 0...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = 0

                    currentAction = SessionTrace("24. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CurrentPolicyCollection = Nothing...")
                    currentAction = SessionTrace("24.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CurrentPolicyCollection = Nothing...")
                                    If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CurrentPolicyCollection) Then
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CurrentPolicyCollection = New InMotionGIT.Policy.Entity.Contracts.PolicyCollection
                End If

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CurrentPolicyCollection = Nothing

                    currentAction = SessionTrace("25. SELECT ROLES.SCERTYPE, ROLES.NPOLICY, ROLES.NROLE FROM ROLES... WHERE ROLES.SCLIENT = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID AND ROLES.NROLE = 2 AND ROLES.SCERTYPE = 2 AND )")
                    isFoundData = False
                                               With New DataManagerFactory("SELECT COUNT(ROLES.NPOLICY) NPOLICY FROM ROLES ROLES JOIN CERTIFICAT CERTIFICAT ON CERTIFICAT.SCERTYPE = ROLES.SCERTYPE  AND CERTIFICAT.NBRANCH = ROLES.NBRANCH  AND CERTIFICAT.NPRODUCT = ROLES.NPRODUCT  AND CERTIFICAT.NPOLICY = ROLES.NPOLICY  AND CERTIFICAT.NCERTIF = ROLES.NCERTIF  WHERE ROLES.SCLIENT = @:ROLESSCLIENT0 AND ROLES.NROLE = 2 AND ROLES.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND CERTIFICAT.DNULLDATE IS NULL", "ROLES", "Linked.LatCombined")
.AddParameter("ROLESSCLIENT0", DbType.AnsiStringFixedLength, 14, (HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID)
 
            HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = .QueryExecuteScalarToInteger()  
        End With

                    currentAction = SessionTrace("26. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies <> 0 Then")
                    If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies <> 0 Then

                        currentAction = SessionTrace("27. SELECT ROLES.SCERTYPE, ROLES.NBRANCH, ROLES.NPRODUCT FROM ROLES... WHERE ROLES.SCLIENT = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID AND ROLES.NROLE = 2 AND ROLES.SCERTYPE = 2 AND )")
                        isFoundData = False
                               With New DataManagerFactory("SELECT ROLES.SCERTYPE, ROLES.NBRANCH, ROLES.NPRODUCT, ROLES.NPOLICY, ROLES.NCERTIF, ROLES.NROLE, ROLES.SCLIENT, CERTIFICAT.NBRANCH, CERTIFICAT.NPRODUCT, CERTIFICAT.NPOLICY, CERTIFICAT.NCERTIF, CERTIFICAT.DDATE_ORIGI, CERTIFICAT.DEXPIRDAT, CERTIFICAT.NCAPITAL, CERTIFICAT.SSTATUSVA, CERTIFICAT.DNULLDATE FROM ROLES ROLES JOIN CERTIFICAT CERTIFICAT ON CERTIFICAT.SCERTYPE = ROLES.SCERTYPE  AND CERTIFICAT.NBRANCH = ROLES.NBRANCH  AND CERTIFICAT.NPRODUCT = ROLES.NPRODUCT  AND CERTIFICAT.NPOLICY = ROLES.NPOLICY  AND CERTIFICAT.NCERTIF = ROLES.NCERTIF  WHERE ROLES.SCLIENT = @:ROLESSCLIENT0 AND ROLES.NROLE = 2 AND ROLES.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND CERTIFICAT.DNULLDATE IS NULL", "ROLES", "Linked.LatCombined")
.AddParameter("ROLESSCLIENT0", DbType.AnsiStringFixedLength, 14, (HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID)
 
            selectDataTableItem = .QueryExecuteToTable(True)  
        End With
                        With selectDataTableItem
                                If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                                    isFoundData = True 
                                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CurrentPolicyCollection = New InMotionGIT.Policy.Entity.Contracts.PolicyCollection 
                                    Dim newItem As InMotionGIT.Policy.Entity.Contracts.Policy 
                                    For Each itemData As DataRow In .Rows
                                         newItem = New InMotionGIT.Policy.Entity.Contracts.Policy
                        newItem.LineOfBusiness = itemData.NumericValue("NBRANCH") 
                        newItem.ProductCode = itemData.NumericValue("NPRODUCT") 
                        newItem.PolicyID = itemData.NumericValue("NPOLICY") 
                        newItem.EffectiveDate = itemData.DateTimeValue("DDATE_ORIGI") 
                        newItem.EndingDate = itemData.DateTimeValue("DEXPIRDAT") 
                        newItem.InsuredAmount = itemData.NumericValue("NCAPITAL") 

                                          HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CurrentPolicyCollection.Add(newItem)
                                    Next
                                End If
                        End With

                        currentAction = SessionTrace("28. CurrentPolicyCollection.Visible = true, zone25.Visible = False")
                        currentAction = SessionTrace("28.1. CurrentPolicyCollection.Visible = true...")
                        resultData.AddControlBehavior("CurrentPolicyCollectionContainer", "show")
                        currentAction = SessionTrace("28.2. zone25.Visible = False...")
                        resultData.AddControlBehavior("zone25", "hide")

                                        Else
                        currentAction = SessionTrace("29. zone25.Visible = True, CurrentPolicyCollection.Visible = false")
                        currentAction = SessionTrace("29.1. zone25.Visible = True...")
                        resultData.AddControlBehavior("zone25", "show")
                        currentAction = SessionTrace("29.2. CurrentPolicyCollection.Visible = false...")
                        resultData.AddControlBehavior("CurrentPolicyCollectionContainer", "hide")

                                            End If
                                        End If
                currentAction = SessionTrace("30. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false Then")
                If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("31. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = 0...")
                    currentAction = SessionTrace("31.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = 0...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = 0

                    currentAction = SessionTrace("32. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CancelledPolicyCollection = Nothing...")
                    currentAction = SessionTrace("32.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CancelledPolicyCollection = Nothing...")
                                    If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CancelledPolicyCollection) Then
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CancelledPolicyCollection = New InMotionGIT.Policy.Entity.Contracts.PolicyCollection
                End If

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CancelledPolicyCollection = Nothing

                    currentAction = SessionTrace("33. SELECT ROLES.SCERTYPE, ROLES.NPOLICY, ROLES.NROLE FROM ROLES... WHERE ROLES.SCLIENT = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID AND ROLES.NROLE = 2 AND ROLES.SCERTYPE = 2 AND )")
                    isFoundData = False
                                               With New DataManagerFactory("SELECT COUNT(ROLES.NPOLICY) NPOLICY FROM ROLES ROLES JOIN CERTIFICAT CERTIFICAT ON CERTIFICAT.SCERTYPE = ROLES.SCERTYPE  AND CERTIFICAT.NBRANCH = ROLES.NBRANCH  AND CERTIFICAT.NPRODUCT = ROLES.NPRODUCT  AND CERTIFICAT.NPOLICY = ROLES.NPOLICY  AND CERTIFICAT.NCERTIF = ROLES.NCERTIF  WHERE ROLES.SCLIENT = @:ROLESSCLIENT0 AND ROLES.NROLE = 2 AND ROLES.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND CERTIFICAT.DNULLDATE IS NOT NULL", "ROLES", "Linked.LatCombined")
.AddParameter("ROLESSCLIENT0", DbType.AnsiStringFixedLength, 14, (HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID)
 
            HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = .QueryExecuteScalarToInteger()  
        End With

                    currentAction = SessionTrace("34. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies <> 0 Then")
                    If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies <> 0 Then

                        currentAction = SessionTrace("35. SELECT ROLES.SCERTYPE, ROLES.NBRANCH, ROLES.NPRODUCT FROM ROLES... WHERE ROLES.SCLIENT = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID AND ROLES.NROLE = 2 AND ROLES.SCERTYPE = 2 AND )")
                        isFoundData = False
                               With New DataManagerFactory("SELECT ROLES.SCERTYPE, ROLES.NBRANCH, ROLES.NPRODUCT, ROLES.NPOLICY, ROLES.NCERTIF, ROLES.NROLE, ROLES.SCLIENT, CERTIFICAT.NBRANCH, CERTIFICAT.NPRODUCT, CERTIFICAT.NPOLICY, CERTIFICAT.NCERTIF, CERTIFICAT.DDATE_ORIGI, CERTIFICAT.DEXPIRDAT, CERTIFICAT.SSTATUSVA, CERTIFICAT.DNULLDATE, CERTIFICAT.NNULLCODE FROM ROLES ROLES JOIN CERTIFICAT CERTIFICAT ON CERTIFICAT.SCERTYPE = ROLES.SCERTYPE  AND CERTIFICAT.NBRANCH = ROLES.NBRANCH  AND CERTIFICAT.NPRODUCT = ROLES.NPRODUCT  AND CERTIFICAT.NPOLICY = ROLES.NPOLICY  AND CERTIFICAT.NCERTIF = ROLES.NCERTIF  WHERE ROLES.SCLIENT = @:ROLESSCLIENT0 AND ROLES.NROLE = 2 AND ROLES.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND CERTIFICAT.DNULLDATE IS NULL", "ROLES", "Linked.LatCombined")
.AddParameter("ROLESSCLIENT0", DbType.AnsiStringFixedLength, 14, (HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID)
 
            selectDataTableItem = .QueryExecuteToTable(True)  
        End With
                        With selectDataTableItem
                                If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                                    isFoundData = True 
                                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CancelledPolicyCollection = New InMotionGIT.Policy.Entity.Contracts.PolicyCollection 
                                    Dim newItem As InMotionGIT.Policy.Entity.Contracts.Policy 
                                    For Each itemData As DataRow In .Rows
                                         newItem = New InMotionGIT.Policy.Entity.Contracts.Policy
                        newItem.LineOfBusiness = itemData.NumericValue("NBRANCH") 
                        newItem.ProductCode = itemData.NumericValue("NPRODUCT") 
                        newItem.PolicyID = itemData.NumericValue("NPOLICY") 
                        newItem.EffectiveDate = itemData.DateTimeValue("DDATE_ORIGI") 
                        newItem.EndingDate = itemData.DateTimeValue("DEXPIRDAT") 
                        newItem.CancellationDate = itemData.DateTimeValue("DNULLDATE") 
                        newItem.CancellationCode = itemData.NumericValue("NNULLCODE") 

                                          HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.CancelledPolicyCollection.Add(newItem)
                                    Next
                                End If
                        End With

                        currentAction = SessionTrace("36. CancelledPolicyCollection.Visible = true, zone27.Visible = False")
                        currentAction = SessionTrace("36.1. CancelledPolicyCollection.Visible = true...")
                        resultData.AddControlBehavior("CancelledPolicyCollectionContainer", "show")
                        currentAction = SessionTrace("36.2. zone27.Visible = False...")
                        resultData.AddControlBehavior("zone27", "hide")

                                                    Else
                        currentAction = SessionTrace("37. CancelledPolicyCollection.Visible = false, zone27.Visible = True")
                        currentAction = SessionTrace("37.1. CancelledPolicyCollection.Visible = false...")
                        resultData.AddControlBehavior("CancelledPolicyCollectionContainer", "hide")
                        currentAction = SessionTrace("37.2. zone27.Visible = True...")
                        resultData.AddControlBehavior("zone27", "show")

                                                        End If
                                                    End If
                currentAction = SessionTrace("38. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false Then")
                If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("39. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = 0...")
                    currentAction = SessionTrace("39.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = 0...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = 0

                    currentAction = SessionTrace("40. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.OutstandingPremiumCollection = Nothing...")
                    currentAction = SessionTrace("40.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.OutstandingPremiumCollection = Nothing...")
                                    If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.OutstandingPremiumCollection) Then
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.OutstandingPremiumCollection = New InMotionGIT.Policy.Entity.Contracts.PolicyCollection
                End If

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.OutstandingPremiumCollection = Nothing

                    currentAction = SessionTrace("41. SELECT PREMIUM.SCERTYPE, PREMIUM.NDIGIT, PREMIUM.NRECEIPT FROM PREMIUM... WHERE PREMIUM.SCERTYPE = 2 AND PREMIUM.NDIGIT = 0 AND PREMIUM.SSTATUSVA <> 3 AND )")
                    isFoundData = False
                                               With New DataManagerFactory("SELECT DISTINCT COUNT(PREMIUM.NRECEIPT) NRECEIPT FROM PREMIUM PREMIUM  WHERE PREMIUM.SCERTYPE = '2' AND PREMIUM.NDIGIT = 0 AND PREMIUM.SSTATUSVA <> '3' AND PREMIUM.SCLIENT = @:PREMIUMSCLIENT3 AND PREMIUM.NBALANCE <> 0", "PREMIUM", "Linked.LatCombined")
.AddParameter("PREMIUMSCLIENT3", DbType.AnsiStringFixedLength, 14, (HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID)
 
            HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = .QueryExecuteScalarToInteger()  
        End With

                    currentAction = SessionTrace("42. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies <> 0 Then")
                    If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies <> 0 Then

                        currentAction = SessionTrace("43. SELECT PREMIUM.SCERTYPE, PREMIUM.NDIGIT, PREMIUM.NRECEIPT FROM PREMIUM... WHERE PREMIUM.SCERTYPE = 2 AND PREMIUM.NDIGIT = 0 AND PREMIUM.SSTATUSVA <> 3 AND )")
                        isFoundData = False
                               With New DataManagerFactory("SELECT PREMIUM.SCERTYPE, PREMIUM.NDIGIT, PREMIUM.NRECEIPT, PREMIUM.SCLIENT, PREMIUM.NBALANCE, PREMIUM.SSTATUSVA, PREMIUM.DEFFECDATE, PREMIUM.DEXPIRDAT, PREMIUM.NCURRENCY FROM PREMIUM PREMIUM  WHERE PREMIUM.SCERTYPE = '2' AND PREMIUM.NDIGIT = 0 AND PREMIUM.SSTATUSVA <> '3' AND PREMIUM.SCLIENT = @:PREMIUMSCLIENT3 AND PREMIUM.NBALANCE <> 0", "PREMIUM", "Linked.LatCombined")
.AddParameter("PREMIUMSCLIENT3", DbType.AnsiStringFixedLength, 14, (HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID)
 
            selectDataTableItem = .QueryExecuteToTable(True)  
        End With
                        With selectDataTableItem
                                If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                                    isFoundData = True 
                                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.OutstandingPremiumCollection = New InMotionGIT.Policy.Entity.Contracts.PolicyCollection 
                                    Dim newItem As InMotionGIT.Policy.Entity.Contracts.Policy 
                                    For Each itemData As DataRow In .Rows
                                         newItem = New InMotionGIT.Policy.Entity.Contracts.Policy
                        newItem.PolicyID = itemData.NumericValue("NRECEIPT") 
                        newItem.AnnualPremium = itemData.NumericValue("NBALANCE") 
                        newItem.EffectiveDate = itemData.DateTimeValue("DEFFECDATE") 
                        newItem.EndingDate = itemData.DateTimeValue("DEXPIRDAT") 
                        newItem.ProductCode = itemData.NumericValue("NCURRENCY") 

                                          HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.OutstandingPremiumCollection.Add(newItem)
                                    Next
                                End If
                        End With

                        currentAction = SessionTrace("44. OutstandingPremium.Visible = true, zone14.Visible = false")
                        currentAction = SessionTrace("44.1. OutstandingPremium.Visible = true...")
                        resultData.AddControlBehavior("OutstandingPremiumContainer", "show")
                        currentAction = SessionTrace("44.2. zone14.Visible = false...")
                        resultData.AddControlBehavior("zone14", "hide")

                                                                Else
                        currentAction = SessionTrace("45. OutstandingPremium.Visible = false, zone14.Visible = true")
                        currentAction = SessionTrace("45.1. OutstandingPremium.Visible = false...")
                        resultData.AddControlBehavior("OutstandingPremiumContainer", "hide")
                        currentAction = SessionTrace("45.2. zone14.Visible = true...")
                        resultData.AddControlBehavior("zone14", "show")

                                                                    End If
                                                                End If
                currentAction = SessionTrace("46. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false Then")
                If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("47. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TotalQuantity = 0...")
                    currentAction = SessionTrace("47.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TotalQuantity = 0...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TotalQuantity = 0

                    currentAction = SessionTrace("48. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection = Nothing...")
                    currentAction = SessionTrace("48.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection = Nothing...")
                                    If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection) Then
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection
                End If

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection = Nothing

                    currentAction = SessionTrace("49. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfRecord = 0...")
                    currentAction = SessionTrace("49.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfRecord = 0...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfRecord = 0

                    currentAction = SessionTrace("50. SELECT RoleInCase.Role, RoleInCase.ClientID, RoleInCase.UnderwritingCaseID FROM RoleInCase... WHERE RoleInCase.ClientID = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID AND RoleInCase.Role = 2 )")
                    isFoundData = False
                                               With New DataManagerFactory("SELECT COUNT(ROLEINCASE.UNDERWRITINGCASEID) UNDERWRITINGCASEID FROM ROLEINCASE ROLEINCASE  WHERE ROLEINCASE.CLIENTID = @:ROLEINCASECLIENTID0 AND ROLEINCASE.ROLE = 2", "RoleInCase", "Linked.Underwriting")
.AddParameter("ROLEINCASECLIENTID0", DbType.AnsiStringFixedLength, 14, (HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID)
 
            HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfRecord = .QueryExecuteScalarToInteger()  
        End With

                    currentAction = SessionTrace("51. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfRecord <> 0 AND HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfRecord Not Is Null Or Not Empty  Then")
                    If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfRecord <> 0 AndAlso Not IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfRecord) Then

                        currentAction = SessionTrace("52. SELECT RoleInCase.Role, RoleInCase.ClientID, RoleInCase.UnderwritingCaseID FROM RoleInCase... WHERE RoleInCase.ClientID = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID AND RoleInCase.Role = 2 )")
                        isFoundData = False
                               With New DataManagerFactory("SELECT ROLEINCASE.ROLE, ROLEINCASE.CLIENTID, ROLEINCASE.UNDERWRITINGCASEID, UNDERWRITINGCASE.STATUS, UNDERWRITINGCASE.DECISION, UNDERWRITINGCASE.OPENDATE, UNDERWRITINGCASE.POLICYID FROM ROLEINCASE ROLEINCASE JOIN UNDERWRITINGCASE UNDERWRITINGCASE ON UNDERWRITINGCASE.UNDERWRITINGCASEID = ROLEINCASE.UNDERWRITINGCASEID  WHERE ROLEINCASE.CLIENTID = @:ROLEINCASECLIENTID0 AND ROLEINCASE.ROLE = 2", "RoleInCase", "Linked.Underwriting")
.AddParameter("ROLEINCASECLIENTID0", DbType.AnsiStringFixedLength, 14, (HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID)
 
            selectDataTableItem = .QueryExecuteToTable(True)  
        End With
                        With selectDataTableItem
                                If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                                    isFoundData = True 
                                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection 
                                    Dim newItem As InMotionGIT.Underwriting.Contracts.UnderwritingCase 
                                    For Each itemData As DataRow In .Rows
                                         newItem = New InMotionGIT.Underwriting.Contracts.UnderwritingCase
                        newItem.UnderwritingCaseID = itemData.NumericValue("UNDERWRITINGCASEID") 
                        newItem.Status = itemData.NumericValue("STATUS") 
                        newItem.Decision = itemData.NumericValue("DECISION") 
                        newItem.OpenDate = itemData.DateTimeValue("OPENDATE") 
                        newItem.PolicyID = itemData.NumericValue("POLICYID") 

                                          HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.PendingUnderwritingCaseCollection.Add(newItem)
                                    Next
                                End If
                        End With

                        currentAction = SessionTrace("53. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TotalQuantity = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TotalQuantity+HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Q...")
                        currentAction = SessionTrace("53.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TotalQuantity = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TotalQuantity+HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.Q...")

                        HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TotalQuantity = HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.TotalQuantity+HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfRecord

                                                                            End If
                                                                        End If
                currentAction = SessionTrace("54. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false Then")
                If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("55. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfRecord <> 0 AND HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfRecord Not Is Null Or Not Empty  Then")
                    If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfRecord <> 0 AndAlso Not IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfRecord) Then

                        currentAction = SessionTrace("56. zone1.Visible = True, zone29.Visible = False")
                        currentAction = SessionTrace("56.1. zone1.Visible = True...")
                        resultData.AddControlBehavior("zone1", "show")
                        currentAction = SessionTrace("56.2. zone29.Visible = False...")
                        resultData.AddControlBehavior("zone29", "hide")

                                                                                    Else
                        currentAction = SessionTrace("57. zone1.Visible = False, zone29.Visible = True")
                        currentAction = SessionTrace("57.1. zone1.Visible = False...")
                        resultData.AddControlBehavior("zone1", "hide")
                        currentAction = SessionTrace("57.2. zone29.Visible = True...")
                        resultData.AddControlBehavior("zone29", "show")

                                                                                        End If
                                                                                    End If
                currentAction = SessionTrace("58. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false Then")
                If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("59. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ProductsFoundIndicator = False...")
                    currentAction = SessionTrace("59.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ProductsFoundIndicator = False...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ProductsFoundIndicator = False

                    currentAction = SessionTrace("60. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = 0...")
                    currentAction = SessionTrace("60.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = 0...")

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = 0

                    currentAction = SessionTrace("61. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClaimCollection = Nothing...")
                    currentAction = SessionTrace("61.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClaimCollection = Nothing...")
                                    If IsNothing(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClaimCollection) Then
                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClaimCollection = New InMotionGIT.Claim.Entity.Contracts.ClaimCollection
                End If

                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClaimCollection = Nothing

                    currentAction = SessionTrace("62. SELECT CLAIM.NCLAIM, CLAIM.SCLIENT, CLAIM.DDECLADAT FROM CLAIM... WHERE CLAIM.SSTACLAIM <> 6 AND CLAIM.NLOC_OUT_AM Not Empty  OR CLAIM.NLOC_OUT_AM <> 0 AND )")
                    isFoundData = False
                                               With New DataManagerFactory("SELECT CLAIM.NCLAIM, CLAIM.SCLIENT, CLAIM.DDECLADAT, CLAIM.NLOC_OUT_AM, CLAIM.NLOC_RESERV, CLAIM.SSTACLAIM, CLAIM.SCLIENT2 FROM CLAIM CLAIM  WHERE CLAIM.SSTACLAIM <> '6' AND (CLAIM.NLOC_OUT_AM IS NOT NULL OR CLAIM.NLOC_OUT_AM <> 0) AND (CLAIM.SCLIENT = @:CLAIMSCLIENT3 OR CLAIM.SCLIENT2 = @:CLAIMSCLIENT24)", "CLAIM", "Linked.LatCombined")
.AddParameter("CLAIMSCLIENT3", DbType.AnsiStringFixedLength, 14, (HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID)
.AddParameter("CLAIMSCLIENT24", DbType.AnsiStringFixedLength, 14, (HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID)
 
            HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies = .QueryExecuteScalarToInteger()  
        End With

                    currentAction = SessionTrace("63. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies <> 0 Then")
                    If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.QuantityOfPolicies <> 0 Then

                        currentAction = SessionTrace("64. SELECT CLAIM.NCLAIM, CLAIM.SCLIENT, CLAIM.DDECLADAT FROM CLAIM... WHERE CLAIM.SSTACLAIM <> 6 AND CLAIM.NLOC_OUT_AM Not Empty  OR CLAIM.NLOC_OUT_AM <> 0 AND )")
                        isFoundData = False
                               With New DataManagerFactory("SELECT CLAIM.NCLAIM, CLAIM.SCLIENT, CLAIM.DDECLADAT, CLAIM.NLOC_OUT_AM, CLAIM.NLOC_RESERV, CLAIM.SSTACLAIM, CLAIM.SCLIENT2 FROM CLAIM CLAIM  WHERE CLAIM.SSTACLAIM <> '6' AND (CLAIM.NLOC_OUT_AM IS NOT NULL OR CLAIM.NLOC_OUT_AM <> 0) AND (CLAIM.SCLIENT = @:CLAIMSCLIENT3 OR CLAIM.SCLIENT2 = @:CLAIMSCLIENT24)", "CLAIM", "Linked.LatCombined")
.AddParameter("CLAIMSCLIENT3", DbType.AnsiStringFixedLength, 14, (HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID)
.AddParameter("CLAIMSCLIENT24", DbType.AnsiStringFixedLength, 14, (HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID)
 
            selectDataTableItem = .QueryExecuteToTable(True)  
        End With
                        With selectDataTableItem
                                If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                                    isFoundData = True 
                                    HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClaimCollection = New InMotionGIT.Claim.Entity.Contracts.ClaimCollection 
                                    Dim newItem As InMotionGIT.Claim.Entity.Contracts.Claim 
                                    For Each itemData As DataRow In .Rows
                                         newItem = New InMotionGIT.Claim.Entity.Contracts.Claim
                        newItem.ClaimID = itemData.NumericValue("NCLAIM") 
                        newItem.ClaimDate = itemData.DateTimeValue("DDECLADAT") 
                        newItem.OutstandingReserveAmount = itemData.NumericValue("NLOC_OUT_AM") 
                        newItem.CurrentReserveAmount = itemData.NumericValue("NLOC_RESERV") 

                                          HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClaimCollection.Add(newItem)
                                    Next
                                End If
                        End With

                        currentAction = SessionTrace("65. Claim.Visible = true, zone6.Visible = false")
                        currentAction = SessionTrace("65.1. Claim.Visible = true...")
                        resultData.AddControlBehavior("ClaimContainer", "show")
                        currentAction = SessionTrace("65.2. zone6.Visible = false...")
                        resultData.AddControlBehavior("zone6", "hide")

                                                                                                Else
                        currentAction = SessionTrace("66. Claim.Visible = false, zone6.Visible = true")
                        currentAction = SessionTrace("66.1. Claim.Visible = false...")
                        resultData.AddControlBehavior("ClaimContainer", "hide")
                        currentAction = SessionTrace("66.2. zone6.Visible = true...")
                        resultData.AddControlBehavior("zone6", "show")

                                                                                                    End If
                                                                                                End If

                instance = ClassToEntryData(instance, HT5CompleteStudyOfClientIndicatedSummaryParametersInstance)
                StoreFormInformationOnSession(HT5CompleteStudyOfClientIndicatedSummaryParametersInstance)
                
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CompleteStudyOfClientIndicatedSummary", "button1Click", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


        <WebMethod()>
        Public Shared Function LookUpForClienteSelIntermediario(id As String, ProducerID As Int32) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT DISTINCT COMMISSION.NINTERMED, TRIM(ROLES.SCLIENT) SCLIENT, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM COMMISSION COMMISSION JOIN ROLES ROLES ON ROLES.SCERTYPE = COMMISSION.SCERTYPE  AND ROLES.NBRANCH = COMMISSION.NBRANCH  AND ROLES.NPRODUCT = COMMISSION.NPRODUCT  AND ROLES.NPOLICY = COMMISSION.NPOLICY  AND ROLES.NCERTIF = COMMISSION.NCERTIF JOIN CLIENT CLIENT ON CLIENT.SCLIENT = ROLES.SCLIENT  WHERE ROLES.NROLE <> {0}  AND (COMMISSION.NINTERMED = @:COMMISSIONNINTERMEDDepend AND NOT SCLIENAME IS NULL) ORDER BY SCLIENAME ", 13), 
                                            "COMMISSION", "Linked.LatCombined")
                    .AddParameter("COMMISSIONNINTERMEDDepend", DbType.AnsiString, 0, False, ProducerID)

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.StringValue("SCLIENT"),
                                                                                            .Description = item.StringValue("SCLIENAME")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CompleteStudyOfClientIndicatedSummary", "LookUpForClienteSelIntermediario", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForClienteSelIntermediario")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForLineOfBusinessa(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE10.NBRANCH, TABLE10.SDESCRIPT, TABLE10.SSTATREGT, TABLE10.SSHORT_DES FROM TABLE10 TABLE10  WHERE TABLE10.SSTATREGT = 1  AND NOT SSHORT_DES IS NULL ORDER BY SSHORT_DES", "1"), 
                                            "TABLE10", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NBRANCH"),
                                                                                            .Description = item.StringValue("SSHORT_DES")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CompleteStudyOfClientIndicatedSummary", "LookUpForLineOfBusinessa", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForLineOfBusinessa")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForLineOfBusinessc(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE10.NBRANCH, TABLE10.SDESCRIPT, TABLE10.SSTATREGT, TABLE10.SSHORT_DES FROM TABLE10 TABLE10  WHERE TABLE10.SSTATREGT = 1  AND NOT SSHORT_DES IS NULL ORDER BY SSHORT_DES", "1"), 
                                            "TABLE10", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NBRANCH"),
                                                                                            .Description = item.StringValue("SSHORT_DES")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CompleteStudyOfClientIndicatedSummary", "LookUpForLineOfBusinessc", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForLineOfBusinessc")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCancellationCodec(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE13.NNULLCODE, TABLE13.SDESCRIPT, TABLE13.SSTATREGT, TABLE13.SSHORT_DES FROM TABLE13 TABLE13    WHERE NOT SSHORT_DES IS NULL ORDER BY SSHORT_DES", ""), 
                                            "TABLE13", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NNULLCODE"),
                                                                                            .Description = item.StringValue("SSHORT_DES")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CompleteStudyOfClientIndicatedSummary", "LookUpForCancellationCodec", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCancellationCodec")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForProductCodep(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE11.NCODIGINT, TABLE11.SDESCRIPT, TABLE11.SSTATREGT FROM TABLE11 TABLE11  WHERE TABLE11.SSTATREGT = 1  AND NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", "1"), 
                                            "TABLE11", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NCODIGINT"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CompleteStudyOfClientIndicatedSummary", "LookUpForProductCodep", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForProductCodep")
                End With
            End Try
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForStatus0(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
{0}' AND TRANSUNDERWRITINGCASESTYPE.LANGUAGEID = '{1}' AND TRANSUNDERWRITINGCASESTYPE.LANGUAGEID = {2}  AND NOT DESCRIPTION IS NULL ORDER BY DESCRIPTION", 1, InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), "1", InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId()), 
                                            "TabUnderwritingCaseSType", "Linked.Underwriting")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("UnderwritingCaseStatus"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CompleteStudyOfClientIndicatedSummary", "LookUpForStatus0", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForStatus0")
                End With
            End Try
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForStatus1(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
{0}' AND TRANSUNDERWRITINGCASESTYPE.LANGUAGEID = '{1}' AND TRANSUNDERWRITINGCASESTYPE.LANGUAGEID = {2}  AND NOT DESCRIPTION IS NULL ORDER BY DESCRIPTION", 1, InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), "1", InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId()), 
                                            "TabUnderwritingCaseSType", "Linked.Underwriting")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("UnderwritingCaseStatus"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CompleteStudyOfClientIndicatedSummary", "LookUpForStatus1", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForStatus1")
                End With
            End Try
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForStatus2(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
{0}' AND TRANSUNDERWRITINGCASESTYPE.LANGUAGEID = '{1}' AND TRANSUNDERWRITINGCASESTYPE.LANGUAGEID = {2}  AND NOT DESCRIPTION IS NULL ORDER BY DESCRIPTION", 1, InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), "1", InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId()), 
                                            "TabUnderwritingCaseSType", "Linked.Underwriting")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("UnderwritingCaseStatus"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CompleteStudyOfClientIndicatedSummary", "LookUpForStatus2", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForStatus2")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForProducerID(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  INTERMEDIA.NINTERMED, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM INTERMEDIA INTERMEDIA JOIN CLIENT CLIENT ON CLIENT.SCLIENT = INTERMEDIA.SCLIENT    WHERE NOT SCLIENAME IS NULL ORDER BY SCLIENAME", ""), 
                                            "INTERMEDIA", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NINTERMED"),
                                                                                            .Description = item.StringValue("SCLIENAME")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CompleteStudyOfClientIndicatedSummary", "LookUpForProducerID", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForProducerID")
                End With
            End Try
            Return result
        End Function

#End Region

#Region "Form Actions"

        Private Shared Sub Form_Initialization(ByRef currentAction As String, ByRef HT5CompleteStudyOfClientIndicatedSummaryParametersInstance As HT5CompleteStudyOfClientIndicatedSummaryParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                        HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                                     .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                                     .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                                     .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Initialization")

            currentAction = SessionTrace("1. Call Shared Function 'User Profile' without parameters")
            Dim _ClientUser_831b2e7aa0034be9920c31a600b704bc As InMotionGIT.Client.Entity.Contracts.Client
            

      If Not IsNothing(UserInfo) AndAlso Not IsNothing(UserInfo.User) then
         _ClientUser_831b2e7aa0034be9920c31a600b704bc = New InMotionGIT.Client.Entity.Contracts.Client

         With _ClientUser_831b2e7aa0034be9920c31a600b704bc
             .ClientID = UserInfo.User.ClientID
             .FirstName = UserInfo.User.FirstName
             .LastName = UserInfo.User.LastName
             .LastName2 = UserInfo.User.SecondLastName
             .BirthDate = UserInfo.User.DateOfBirth
             .LegalName = UserInfo.User.CompanyName
             .GenderEnum = IIf(UserInfo.User.Gender = "Male", InMotionGIT.Common.Contracts.Enumerations.EnumGender.Male, InMotionGIT.Common.Contracts.Enumerations.EnumGender.Female)
             .eMailAddressDefault = UserInfo.User.Email
             .CompleteClientName = .CompleteClientNameValid
         End With

	isNullResult = (IsNothing(_ClientUser_831b2e7aa0034be9920c31a600b704bc))
	isFoundData  = Not isNullResult
      End If
    
            HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ClientUser = _ClientUser_831b2e7aa0034be9920c31a600b704bc

            currentAction = SessionTrace("2. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.IsProducer = UserInfo.IsProducer()...")
            currentAction = SessionTrace("2.1. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.IsProducer = UserInfo.IsProducer()...")

            HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.IsProducer = UserInfo.IsProducer()
            currentAction = SessionTrace("2.2. HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ProducerID = UserInfo.ProducerID...")

            HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.ProducerID = UserInfo.ProducerID

            currentAction = SessionTrace("3. If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.IsProducer = true Then")
            If HT5CompleteStudyOfClientIndicatedSummaryParametersInstance.IsProducer = true Then

                currentAction = SessionTrace("4. zone23agen.Visible = true, zone22empl.Visible = false")
                currentAction = SessionTrace("4.1. zone23agen.Visible = true...")
                resultData.AddControlBehavior("zone23agen", "show")
                currentAction = SessionTrace("4.2. zone22empl.Visible = false...")
                resultData.AddControlBehavior("zone22empl", "hide")

                Else
                currentAction = SessionTrace("5. zone23agen.Visible = false, zone22empl.Visible = true")
                currentAction = SessionTrace("5.1. zone23agen.Visible = false...")
                resultData.AddControlBehavior("zone23agen", "hide")
                currentAction = SessionTrace("5.2. zone22empl.Visible = true...")
                resultData.AddControlBehavior("zone22empl", "show")

                    End If

        End Sub

#End Region
#Region "Utilities"

        Private Shared Sub ParametersToDictionary(formData As HT5CompleteStudyOfClientIndicatedSummaryParameters, ByRef target As Dictionary(Of String, Object))
            If IsNothing(target) Then
                target = New Dictionary(Of String, Object)

                target.Add("PlanType", formData.PlanType)
                target.Add("ClientExistInDB", formData.ClientExistInDB)
                target.Add("Currency", formData.Currency)
                target.Add("Reclamo", formData.Reclamo)
                target.Add("QueryType", formData.QueryType)
                target.Add("eMail", formData.eMail)
                target.Add("TipoModificacion", formData.TipoModificacion)
                target.Add("UserClientID", formData.UserClientID)
                target.Add("IsProducer", formData.IsProducer)
                target.Add("ProducerCode", formData.ProducerCode)
                target.Add("IsEmployee", formData.IsEmployee)
                target.Add("ControlService", formData.ControlService)
                target.Add("ProducerID", formData.ProducerID)
                target.Add("ProducerClientID", formData.ProducerClientID)
                target.Add("ProcessDate", formData.ProcessDate)
                target.Add("TotalClient", formData.TotalClient)
                target.Add("IntermedClient", formData.IntermedClient)
                target.Add("Company", formData.Company)
                target.Add("UserIsClient", formData.UserIsClient)
                target.Add("MarketingUserIndicator", formData.MarketingUserIndicator)
                target.Add("eMailToFind", formData.eMailToFind)
                target.Add("ClientID", formData.ClientID)
                target.Add("TipoDeBusqueda", formData.TipoDeBusqueda)
                target.Add("NombreDelClienteConsultar", formData.NombreDelClienteConsultar)
                target.Add("QuantityOfRecord", formData.QuantityOfRecord)
                target.Add("Edad", formData.Edad)
                target.Add("Genero", formData.Genero)
                target.Add("EstadoCivil", formData.EstadoCivil)
                target.Add("NumeroHijos", formData.NumeroHijos)
                target.Add("IngresosPersonales", formData.IngresosPersonales)
                target.Add("ProductsFoundIndicator", formData.ProductsFoundIndicator)
                target.Add("CurrentPolicyCollection", formData.CurrentPolicyCollection)
                target.Add("CancelledPolicyCollection", formData.CancelledPolicyCollection)
                target.Add("QuantityOfPolicies", formData.QuantityOfPolicies)
                target.Add("Estadodelacotización", formData.Estadodelacotización)
                target.Add("PendingUnderwritingCaseCollection", formData.PendingUnderwritingCaseCollection)
                target.Add("TotalQuantity", formData.TotalQuantity)
                target.Add("OutstandingPremiumCollection", formData.OutstandingPremiumCollection)
                target.Add("RiskInformation", formData.RiskInformation)
                target.Add("ClaimCollection", formData.ClaimCollection)
                target.Add("ConsumerInformation", formData.ConsumerInformation)
                target.Add("ErrorsFound", formData.ErrorsFound)
                target.Add("ClienteSelIntermediario", formData.ClienteSelIntermediario)
                target.Add("ClientUser", formData.ClientUser)
            Else
                target("PlanType") = formData.PlanType
                target("ClientExistInDB") = formData.ClientExistInDB
                target("Currency") = formData.Currency
                target("Reclamo") = formData.Reclamo
                target("QueryType") = formData.QueryType
                target("eMail") = formData.eMail
                target("TipoModificacion") = formData.TipoModificacion
                target("UserClientID") = formData.UserClientID
                target("IsProducer") = formData.IsProducer
                target("ProducerCode") = formData.ProducerCode
                target("IsEmployee") = formData.IsEmployee
                target("ControlService") = formData.ControlService
                target("ProducerID") = formData.ProducerID
                target("ProducerClientID") = formData.ProducerClientID
                target("ProcessDate") = formData.ProcessDate
                target("TotalClient") = formData.TotalClient
                target("IntermedClient") = formData.IntermedClient
                target("Company") = formData.Company
                target("UserIsClient") = formData.UserIsClient
                target("MarketingUserIndicator") = formData.MarketingUserIndicator
                target("eMailToFind") = formData.eMailToFind
                target("ClientID") = formData.ClientID
                target("TipoDeBusqueda") = formData.TipoDeBusqueda
                target("NombreDelClienteConsultar") = formData.NombreDelClienteConsultar
                target("QuantityOfRecord") = formData.QuantityOfRecord
                target("Edad") = formData.Edad
                target("Genero") = formData.Genero
                target("EstadoCivil") = formData.EstadoCivil
                target("NumeroHijos") = formData.NumeroHijos
                target("IngresosPersonales") = formData.IngresosPersonales
                target("ProductsFoundIndicator") = formData.ProductsFoundIndicator
                target("CurrentPolicyCollection") = formData.CurrentPolicyCollection
                target("CancelledPolicyCollection") = formData.CancelledPolicyCollection
                target("QuantityOfPolicies") = formData.QuantityOfPolicies
                target("Estadodelacotización") = formData.Estadodelacotización
                target("PendingUnderwritingCaseCollection") = formData.PendingUnderwritingCaseCollection
                target("TotalQuantity") = formData.TotalQuantity
                target("OutstandingPremiumCollection") = formData.OutstandingPremiumCollection
                target("RiskInformation") = formData.RiskInformation
                target("ClaimCollection") = formData.ClaimCollection
                target("ConsumerInformation") = formData.ConsumerInformation
                target("ErrorsFound") = formData.ErrorsFound
                target("ClienteSelIntermediario") = formData.ClienteSelIntermediario
                target("ClientUser") = formData.ClientUser
            End If
        End Sub

        Private Shared Sub GetTransferParameters(parametersData As HT5CompleteStudyOfClientIndicatedSummaryParameters, fromid As String)
            Dim fromDocumentCache As Object = Nothing

            If Not String.IsNullOrEmpty(fromid) Then
                fromDocumentCache = HttpContext.Current.Session(fromid)
                HttpContext.Current.Session.Remove(fromid)

            Else
                fromDocumentCache = HttpContext.Current.Session(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove("fromid")
            End If

            If Not IsNothing(fromDocumentCache) Then
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PlanType", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientExistInDB", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Currency", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Reclamo", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QueryType", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("eMail", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("TipoModificacion", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UserClientID", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsProducer", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProducerCode", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsEmployee", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ControlService", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProducerID", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProducerClientID", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProcessDate", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("TotalClient", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IntermedClient", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Company", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UserIsClient", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MarketingUserIndicator", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("eMailToFind", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientID", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("TipoDeBusqueda", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("NombreDelClienteConsultar", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QuantityOfRecord", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Edad", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Genero", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("EstadoCivil", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("NumeroHijos", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IngresosPersonales", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProductsFoundIndicator", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CurrentPolicyCollection", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CancelledPolicyCollection", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QuantityOfPolicies", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Estadodelacotización", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PendingUnderwritingCaseCollection", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("TotalQuantity", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OutstandingPremiumCollection", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClaimCollection", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ConsumerInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ErrorsFound", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClienteSelIntermediario", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientUser", fromDocumentCache, parametersData)
            End If
        End Sub

        Private Shared Function SessionTrace(message As String) As String

            If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                Dim tracelog As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath")))

                tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = tracelog
            End If

            Return message
        End Function

#End Region
#Region "Storage Session Methods"

        Private Shared Function RetrieveFormInformationFromSession(id As String) As HT5CompleteStudyOfClientIndicatedSummaryParameters
            Dim source As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.Storage.{0}", id))
            Dim instance As HT5CompleteStudyOfClientIndicatedSummaryParameters = Nothing

            If Not String.IsNullOrEmpty(source) Then
                instance = Serialize.Deserialize(Of HT5CompleteStudyOfClientIndicatedSummaryParameters)(source)
            End If

            Return instance
        End Function

        Private Shared Sub StoreFormInformationOnSession(instance As HT5CompleteStudyOfClientIndicatedSummaryParameters)
            If Not IsNothing(instance) Then
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.Storage.{0}", instance.InternalId)) = Serialize.Serialize(Of HT5CompleteStudyOfClientIndicatedSummaryParameters)(instance)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.Title.{0}", instance.InternalId)) = "HT5 Resumen del cliente"
              
                If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso
                   HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then

                    HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.HT5CompleteStudyOfClientIndicatedSummary", instance.InternalId)) = instance
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track.Parameters")) AndAlso
                   HttpContext.Current.Session("Form.Track.Parameters").ToString.ToLower = "true" Then

                    If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                        InMotionGIT.Common.Helpers.FileHandler.SaveContent(String.Format(CultureInfo.InvariantCulture, "{0}\{1}.HT5CompleteStudyOfClientIndicatedSummary.txt",
                                                                                         ConfigurationManager.AppSettings("Path.Logs"), instance.InternalId),
                                                                                          HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture,
                                                                                                                     "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))))
                    End If

                    InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of HT5CompleteStudyOfClientIndicatedSummaryParameters)(instance,
                                                                                                String.Format(CultureInfo.InvariantCulture,
                                                                                                              "{0}\{1}.HT5CompleteStudyOfClientIndicatedSummary.xml", ConfigurationManager.AppSettings("Path.Logs"), instance.InternalId), True)
                End If			
            End If
        End Sub

#End Region


#Region "Contracts Mappers"

        Private Shared Function EntryDataToClass(parametersData As HT5CompleteStudyOfClientIndicatedSummaryParameters, formData As EntryData) As HT5CompleteStudyOfClientIndicatedSummaryParameters
            If IsNothing(parametersData) Then
                parametersData = New HT5CompleteStudyOfClientIndicatedSummaryParameters
            End If

            If IsNothing(parametersData.RiskInformation) Then
                parametersData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
            End If
            If IsNothing(parametersData.RiskInformation.PrimaryInsured) Then
                parametersData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
            End If
            If IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                parametersData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
            End If
            If IsNothing(parametersData.CurrentPolicyCollection) Then
                parametersData.CurrentPolicyCollection = New InMotionGIT.Policy.Entity.Contracts.PolicyCollection
            End If
            If IsNothing(parametersData.CancelledPolicyCollection) Then
                parametersData.CancelledPolicyCollection = New InMotionGIT.Policy.Entity.Contracts.PolicyCollection
            End If
            If IsNothing(parametersData.OutstandingPremiumCollection) Then
                parametersData.OutstandingPremiumCollection = New InMotionGIT.Policy.Entity.Contracts.PolicyCollection
            End If
            If IsNothing(parametersData.ClaimCollection) Then
                parametersData.ClaimCollection = New InMotionGIT.Claim.Entity.Contracts.ClaimCollection
            End If
            If IsNothing(parametersData.PendingUnderwritingCaseCollection) Then
                parametersData.PendingUnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection
            End If

            With parametersData
                .InternalId = formData.InstanceFormId
                .RiskInformation.PrimaryInsured.Client.ClientID = formData.RiskInformationPrimaryInsuredClientClientID
                .ClienteSelIntermediario = formData.ClienteSelIntermediario








                .ProducerID = formData.ProducerID
            End With

            Return parametersData
        End Function

        Private Shared Function ClassToEntryData(formData As EntryData, parametersData As HT5CompleteStudyOfClientIndicatedSummaryParameters) As EntryData
            formData = New EntryData

            With formData
                .InstanceFormId = parametersData.InternalId
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                    .RiskInformationPrimaryInsuredClientClientID = parametersData.RiskInformation.PrimaryInsured.Client.ClientID
                End If
                .ClienteSelIntermediario = parametersData.ClienteSelIntermediario
                .CurrentPolicyCollection_Policy = New List(Of CurrentPolicyCollection_PolicyItem)

                If Not IsNothing(parametersData.CurrentPolicyCollection) Then
                    Dim newItem as CurrentPolicyCollection_PolicyItem
                    
                    For Each itemData As InMotionGIT.Policy.Entity.Contracts.Policy In parametersData.CurrentPolicyCollection
                        newItem = New CurrentPolicyCollection_PolicyItem
                        
                        With newItem
                            .LineOfBusiness = itemData.LineOfBusiness
                            .PolicyID = itemData.PolicyID
                            .EffectiveDate = itemData.EffectiveDate
                            .EndingDate = itemData.EndingDate
                            .InsuredAmount = itemData.InsuredAmount                        
                        End With
                        
                        .CurrentPolicyCollection_Policy.Add(newItem)
                    Next
                End If


                .CancelledPolicyCollection_Policy = New List(Of CancelledPolicyCollection_PolicyItem)

                If Not IsNothing(parametersData.CancelledPolicyCollection) Then
                    Dim newItem as CancelledPolicyCollection_PolicyItem
                    
                    For Each itemData As InMotionGIT.Policy.Entity.Contracts.Policy In parametersData.CancelledPolicyCollection
                        newItem = New CancelledPolicyCollection_PolicyItem
                        
                        With newItem
                            .LineOfBusiness = itemData.LineOfBusiness
                            .PolicyID = itemData.PolicyID
                            .EffectiveDate = itemData.EffectiveDate
                            .EndingDate = itemData.EndingDate
                            .CancellationCode = itemData.CancellationCode
                            .CancellationDate = itemData.CancellationDate                        
                        End With
                        
                        .CancelledPolicyCollection_Policy.Add(newItem)
                    Next
                End If


                .OutstandingPremium_Policy = New List(Of OutstandingPremium_PolicyItem)

                If Not IsNothing(parametersData.OutstandingPremiumCollection) Then
                    Dim newItem as OutstandingPremium_PolicyItem
                    
                    For Each itemData As InMotionGIT.Policy.Entity.Contracts.Policy In parametersData.OutstandingPremiumCollection
                        newItem = New OutstandingPremium_PolicyItem
                        
                        With newItem
                            .PolicyID = itemData.PolicyID
                            .EffectiveDate = itemData.EffectiveDate
                            .EndingDate = itemData.EndingDate
                            .AnnualPremium = itemData.AnnualPremium
                            .ProductCode = itemData.ProductCode                        
                        End With
                        
                        .OutstandingPremium_Policy.Add(newItem)
                    Next
                End If


                .Claim_Claim = New List(Of Claim_ClaimItem)

                If Not IsNothing(parametersData.ClaimCollection) Then
                    Dim newItem as Claim_ClaimItem
                    
                    For Each itemData As InMotionGIT.Claim.Entity.Contracts.Claim In parametersData.ClaimCollection
                        newItem = New Claim_ClaimItem
                        
                        With newItem
                            .ClaimID = itemData.ClaimID
                            .ClaimDate = itemData.ClaimDate
                            .CurrentReserveAmount = itemData.CurrentReserveAmount
                            .OutstandingReserveAmount = itemData.OutstandingReserveAmount                        
                        End With
                        
                        .Claim_Claim.Add(newItem)
                    Next
                End If


                .PendingUnderwritingCase_UnderwritingCase = New List(Of PendingUnderwritingCase_UnderwritingCaseItem)

                If Not IsNothing(parametersData.PendingUnderwritingCaseCollection) Then
                    Dim newItem as PendingUnderwritingCase_UnderwritingCaseItem
                    
                    For Each itemData As InMotionGIT.Underwriting.Contracts.UnderwritingCase In parametersData.PendingUnderwritingCaseCollection
                        newItem = New PendingUnderwritingCase_UnderwritingCaseItem
                        
                        With newItem
                            .UnderwritingCaseID = itemData.UnderwritingCaseID
                            .Status = itemData.Status
                            .OpenDate = itemData.OpenDate
                            .Decision = itemData.Decision                        
                        End With
                        
                        .PendingUnderwritingCase_UnderwritingCase.Add(newItem)
                    Next
                End If


                .ApprovedUnderwritingCase_UnderwritingCase = New List(Of ApprovedUnderwritingCase_UnderwritingCaseItem)

                If Not IsNothing(parametersData.PendingUnderwritingCaseCollection) Then
                    Dim newItem as ApprovedUnderwritingCase_UnderwritingCaseItem
                    
                    For Each itemData As InMotionGIT.Underwriting.Contracts.UnderwritingCase In parametersData.PendingUnderwritingCaseCollection
                        newItem = New ApprovedUnderwritingCase_UnderwritingCaseItem
                        
                        With newItem
                            .UnderwritingCaseID = itemData.UnderwritingCaseID
                            .Status = itemData.Status
                            .OpenDate = itemData.OpenDate
                            .PolicyID = itemData.PolicyID
                            .Decision = itemData.Decision                        
                        End With
                        
                        .ApprovedUnderwritingCase_UnderwritingCase.Add(newItem)
                    Next
                End If


                .ReviewUnderwritingCase_UnderwritingCase = New List(Of ReviewUnderwritingCase_UnderwritingCaseItem)

                If Not IsNothing(parametersData.PendingUnderwritingCaseCollection) Then
                    Dim newItem as ReviewUnderwritingCase_UnderwritingCaseItem
                    
                    For Each itemData As InMotionGIT.Underwriting.Contracts.UnderwritingCase In parametersData.PendingUnderwritingCaseCollection
                        newItem = New ReviewUnderwritingCase_UnderwritingCaseItem
                        
                        With newItem
                            .UnderwritingCaseID = itemData.UnderwritingCaseID
                            .Status = itemData.Status
                            .OpenDate = itemData.OpenDate
                            .Decision = itemData.Decision                        
                        End With
                        
                        .ReviewUnderwritingCase_UnderwritingCase.Add(newItem)
                    Next
                End If


                .DeclinedUnderwritingCase_UnderwritingCase = New List(Of DeclinedUnderwritingCase_UnderwritingCaseItem)

                If Not IsNothing(parametersData.PendingUnderwritingCaseCollection) Then
                    Dim newItem as DeclinedUnderwritingCase_UnderwritingCaseItem
                    
                    For Each itemData As InMotionGIT.Underwriting.Contracts.UnderwritingCase In parametersData.PendingUnderwritingCaseCollection
                        newItem = New DeclinedUnderwritingCase_UnderwritingCaseItem
                        
                        With newItem
                            .UnderwritingCaseID = itemData.UnderwritingCaseID
                            .OpenDate = itemData.OpenDate
                            .Decision = itemData.Decision                        
                        End With
                        
                        .DeclinedUnderwritingCase_UnderwritingCase.Add(newItem)
                    Next
                End If


                .ProducerID = parametersData.ProducerID
            End With

            Return formData
        End Function

#End Region

#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As HT5CompleteStudyOfClientIndicatedSummaryParameters)
            If HttpContext.Current.Request.QueryString("PlanType").IsNotEmpty Then
                formData.PlanType = HttpContext.Current.Request.QueryString("PlanType")
            End If
            If HttpContext.Current.Request.QueryString("ClientExistInDB").IsNotEmpty Then
                formData.ClientExistInDB = HttpContext.Current.Request.QueryString("ClientExistInDB")
            End If
            If HttpContext.Current.Request.QueryString("Currency").IsNotEmpty Then
                formData.Currency = HttpContext.Current.Request.QueryString("Currency")
            End If
            If HttpContext.Current.Request.QueryString("Reclamo").IsNotEmpty Then
                formData.Reclamo = HttpContext.Current.Request.QueryString("Reclamo")
            End If
            If HttpContext.Current.Request.QueryString("QueryType").IsNotEmpty Then
                formData.QueryType = HttpContext.Current.Request.QueryString("QueryType")
            End If
            If HttpContext.Current.Request.QueryString("eMail").IsNotEmpty Then
                formData.eMail = HttpContext.Current.Request.QueryString("eMail")
            End If
            If HttpContext.Current.Request.QueryString("TipoModificacion").IsNotEmpty Then
                formData.TipoModificacion = HttpContext.Current.Request.QueryString("TipoModificacion")
            End If
            If HttpContext.Current.Request.QueryString("UserClientID").IsNotEmpty Then
                formData.UserClientID = HttpContext.Current.Request.QueryString("UserClientID")
            End If
            If HttpContext.Current.Request.QueryString("IsProducer").IsNotEmpty Then
                formData.IsProducer = HttpContext.Current.Request.QueryString("IsProducer")
            End If
            If HttpContext.Current.Request.QueryString("ProducerCode").IsNotEmpty Then
                formData.ProducerCode = HttpContext.Current.Request.QueryString("ProducerCode")
            End If
            If HttpContext.Current.Request.QueryString("IsEmployee").IsNotEmpty Then
                formData.IsEmployee = HttpContext.Current.Request.QueryString("IsEmployee")
            End If
            If HttpContext.Current.Request.QueryString("ControlService").IsNotEmpty Then
                formData.ControlService = HttpContext.Current.Request.QueryString("ControlService")
            End If
            If HttpContext.Current.Request.QueryString("ProducerID").IsNotEmpty Then
                formData.ProducerID = HttpContext.Current.Request.QueryString("ProducerID")
            End If
            If HttpContext.Current.Request.QueryString("ProducerClientID").IsNotEmpty Then
                formData.ProducerClientID = HttpContext.Current.Request.QueryString("ProducerClientID")
            End If
            If HttpContext.Current.Request.QueryString("ProcessDate").IsNotEmpty Then
                formData.ProcessDate = HttpContext.Current.Request.QueryString("ProcessDate")
            End If
            If HttpContext.Current.Request.QueryString("TotalClient").IsNotEmpty Then
                formData.TotalClient = HttpContext.Current.Request.QueryString("TotalClient")
            End If
            If HttpContext.Current.Request.QueryString("IntermedClient").IsNotEmpty Then
                formData.IntermedClient = HttpContext.Current.Request.QueryString("IntermedClient")
            End If
            If HttpContext.Current.Request.QueryString("Company").IsNotEmpty Then
                formData.Company = HttpContext.Current.Request.QueryString("Company")
            End If
            If HttpContext.Current.Request.QueryString("UserIsClient").IsNotEmpty Then
                formData.UserIsClient = HttpContext.Current.Request.QueryString("UserIsClient")
            End If
            If HttpContext.Current.Request.QueryString("MarketingUserIndicator").IsNotEmpty Then
                formData.MarketingUserIndicator = HttpContext.Current.Request.QueryString("MarketingUserIndicator")
            End If
            If HttpContext.Current.Request.QueryString("eMailToFind").IsNotEmpty Then
                formData.eMailToFind = HttpContext.Current.Request.QueryString("eMailToFind")
            End If
            If HttpContext.Current.Request.QueryString("ClientID").IsNotEmpty Then
                formData.ClientID = HttpContext.Current.Request.QueryString("ClientID")
            End If
            If HttpContext.Current.Request.QueryString("TipoDeBusqueda").IsNotEmpty Then
                formData.TipoDeBusqueda = HttpContext.Current.Request.QueryString("TipoDeBusqueda")
            End If
            If HttpContext.Current.Request.QueryString("NombreDelClienteConsultar").IsNotEmpty Then
                formData.NombreDelClienteConsultar = HttpContext.Current.Request.QueryString("NombreDelClienteConsultar")
            End If
            If HttpContext.Current.Request.QueryString("QuantityOfRecord").IsNotEmpty Then
                formData.QuantityOfRecord = HttpContext.Current.Request.QueryString("QuantityOfRecord")
            End If
            If HttpContext.Current.Request.QueryString("Edad").IsNotEmpty Then
                formData.Edad = HttpContext.Current.Request.QueryString("Edad")
            End If
            If HttpContext.Current.Request.QueryString("Genero").IsNotEmpty Then
                formData.Genero = HttpContext.Current.Request.QueryString("Genero")
            End If
            If HttpContext.Current.Request.QueryString("EstadoCivil").IsNotEmpty Then
                formData.EstadoCivil = HttpContext.Current.Request.QueryString("EstadoCivil")
            End If
            If HttpContext.Current.Request.QueryString("NumeroHijos").IsNotEmpty Then
                formData.NumeroHijos = HttpContext.Current.Request.QueryString("NumeroHijos")
            End If
            If HttpContext.Current.Request.QueryString("IngresosPersonales").IsNotEmpty Then
                formData.IngresosPersonales = HttpContext.Current.Request.QueryString("IngresosPersonales")
            End If
            If HttpContext.Current.Request.QueryString("ProductsFoundIndicator").IsNotEmpty Then
                formData.ProductsFoundIndicator = HttpContext.Current.Request.QueryString("ProductsFoundIndicator")
            End If
            If HttpContext.Current.Request.QueryString("QuantityOfPolicies").IsNotEmpty Then
                formData.QuantityOfPolicies = HttpContext.Current.Request.QueryString("QuantityOfPolicies")
            End If
            If HttpContext.Current.Request.QueryString("Estadodelacotización").IsNotEmpty Then
                formData.Estadodelacotización = HttpContext.Current.Request.QueryString("Estadodelacotización")
            End If
            If HttpContext.Current.Request.QueryString("TotalQuantity").IsNotEmpty Then
                formData.TotalQuantity = HttpContext.Current.Request.QueryString("TotalQuantity")
            End If
            If HttpContext.Current.Request.QueryString("ErrorsFound").IsNotEmpty Then
                formData.ErrorsFound = HttpContext.Current.Request.QueryString("ErrorsFound")
            End If
            If HttpContext.Current.Request.QueryString("ClienteSelIntermediario").IsNotEmpty Then
                formData.ClienteSelIntermediario = HttpContext.Current.Request.QueryString("ClienteSelIntermediario")
            End If
        End Sub	

        Private Shared Sub ValidateParametersInstance(ByRef formData As HT5CompleteStudyOfClientIndicatedSummaryParameters)
            If IsNothing(formData.RiskInformation) Then
                formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
            End If
            If IsNothing(formData.RiskInformation.PrimaryInsured) Then
                formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
            End If
            If IsNothing(formData.RiskInformation.PrimaryInsured.Client) Then
                formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
            End If
            If IsNothing(formData.CurrentPolicyCollection) Then
                formData.CurrentPolicyCollection = New InMotionGIT.Policy.Entity.Contracts.PolicyCollection
            End If
            If IsNothing(formData.CancelledPolicyCollection) Then
                formData.CancelledPolicyCollection = New InMotionGIT.Policy.Entity.Contracts.PolicyCollection
            End If
            If IsNothing(formData.OutstandingPremiumCollection) Then
                formData.OutstandingPremiumCollection = New InMotionGIT.Policy.Entity.Contracts.PolicyCollection
            End If
            If IsNothing(formData.ClaimCollection) Then
                formData.ClaimCollection = New InMotionGIT.Claim.Entity.Contracts.ClaimCollection
            End If
            If IsNothing(formData.PendingUnderwritingCaseCollection) Then
                formData.PendingUnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection
            End If

        End Sub

#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property RiskInformationPrimaryInsuredClientClientID As System.String
            <DataMember()> Public Property ClienteSelIntermediario As String
            <DataMember()> Public Property CurrentPolicyCollectionLineOfBusiness As System.Int32
            <DataMember()> Public Property CurrentPolicyCollectionPolicyID As System.Int64
            <DataMember()> Public Property CurrentPolicyCollectionEffectiveDate As System.DateTime
            <DataMember()> Public Property CurrentPolicyCollectionEndingDate As System.DateTime
            <DataMember()> Public Property CurrentPolicyCollectionInsuredAmount As System.Decimal
            <DataMember()> Public Property CurrentPolicyCollection_Policy As List(Of CurrentPolicyCollection_PolicyItem)
            <DataMember()> Public Property CancelledPolicyCollectionLineOfBusiness As System.Int32
            <DataMember()> Public Property CancelledPolicyCollectionPolicyID As System.Int64
            <DataMember()> Public Property CancelledPolicyCollectionEffectiveDate As System.DateTime
            <DataMember()> Public Property CancelledPolicyCollectionEndingDate As System.DateTime
            <DataMember()> Public Property CancelledPolicyCollectionCancellationCode As System.Int32
            <DataMember()> Public Property CancelledPolicyCollectionCancellationDate As System.DateTime
            <DataMember()> Public Property CancelledPolicyCollection_Policy As List(Of CancelledPolicyCollection_PolicyItem)
            <DataMember()> Public Property OutstandingPremiumCollectionPolicyID As System.Int64
            <DataMember()> Public Property OutstandingPremiumCollectionEffectiveDate As System.DateTime
            <DataMember()> Public Property OutstandingPremiumCollectionEndingDate As System.DateTime
            <DataMember()> Public Property OutstandingPremiumCollectionAnnualPremium As System.Decimal
            <DataMember()> Public Property OutstandingPremiumCollectionProductCode As System.Int32
            <DataMember()> Public Property OutstandingPremium_Policy As List(Of OutstandingPremium_PolicyItem)
            <DataMember()> Public Property ClaimCollectionClaimID As System.Int64
            <DataMember()> Public Property ClaimCollectionClaimDate As System.DateTime
            <DataMember()> Public Property ClaimCollectionCurrentReserveAmount As System.Decimal
            <DataMember()> Public Property ClaimCollectionOutstandingReserveAmount As System.Decimal
            <DataMember()> Public Property Claim_Claim As List(Of Claim_ClaimItem)
            <DataMember()> Public Property PendingUnderwritingCaseCollectionUnderwritingCaseID As System.Int64
            <DataMember()> Public Property PendingUnderwritingCaseCollectionStatus As System.Int32
            <DataMember()> Public Property PendingUnderwritingCaseCollectionOpenDate As System.DateTime
            <DataMember()> Public Property PendingUnderwritingCase_UnderwritingCase As List(Of PendingUnderwritingCase_UnderwritingCaseItem)
            <DataMember()> Public Property PendingUnderwritingCaseCollectionPolicyID As System.Int64
            <DataMember()> Public Property ApprovedUnderwritingCase_UnderwritingCase As List(Of ApprovedUnderwritingCase_UnderwritingCaseItem)
            <DataMember()> Public Property ReviewUnderwritingCase_UnderwritingCase As List(Of ReviewUnderwritingCase_UnderwritingCaseItem)
            <DataMember()> Public Property DeclinedUnderwritingCase_UnderwritingCase As List(Of DeclinedUnderwritingCase_UnderwritingCaseItem)
            <DataMember()> Public Property ProducerID As Int64

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CurrentPolicyCollection_PolicyItem

            <DataMember()> Public Property LineOfBusiness As System.Int32
            <DataMember()> Public Property PolicyID As System.Int64
            <DataMember()> Public Property EffectiveDate As System.DateTime
            <DataMember()> Public Property EndingDate As System.DateTime
            <DataMember()> Public Property InsuredAmount As System.Decimal

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CancelledPolicyCollection_PolicyItem

            <DataMember()> Public Property LineOfBusiness As System.Int32
            <DataMember()> Public Property PolicyID As System.Int64
            <DataMember()> Public Property EffectiveDate As System.DateTime
            <DataMember()> Public Property EndingDate As System.DateTime
            <DataMember()> Public Property CancellationCode As System.Int32
            <DataMember()> Public Property CancellationDate As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class OutstandingPremium_PolicyItem

            <DataMember()> Public Property PolicyID As System.Int64
            <DataMember()> Public Property EffectiveDate As System.DateTime
            <DataMember()> Public Property EndingDate As System.DateTime
            <DataMember()> Public Property AnnualPremium As System.Decimal
            <DataMember()> Public Property ProductCode As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Claim_ClaimItem

            <DataMember()> Public Property ClaimID As System.Int64
            <DataMember()> Public Property ClaimDate As System.DateTime
            <DataMember()> Public Property CurrentReserveAmount As System.Decimal
            <DataMember()> Public Property OutstandingReserveAmount As System.Decimal

        End Class

        <Serializable()>
        <DataContract()>
        Public Class PendingUnderwritingCase_UnderwritingCaseItem

            <DataMember()> Public Property UnderwritingCaseID As System.Int64
            <DataMember()> Public Property Status As System.Int32
            <DataMember()> Public Property OpenDate As System.DateTime
            <DataMember()> Public Property Decision As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class ApprovedUnderwritingCase_UnderwritingCaseItem

            <DataMember()> Public Property UnderwritingCaseID As System.Int64
            <DataMember()> Public Property Status As System.Int32
            <DataMember()> Public Property OpenDate As System.DateTime
            <DataMember()> Public Property PolicyID As System.Int64
            <DataMember()> Public Property Decision As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class ReviewUnderwritingCase_UnderwritingCaseItem

            <DataMember()> Public Property UnderwritingCaseID As System.Int64
            <DataMember()> Public Property Status As System.Int32
            <DataMember()> Public Property OpenDate As System.DateTime
            <DataMember()> Public Property Decision As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class DeclinedUnderwritingCase_UnderwritingCaseItem

            <DataMember()> Public Property UnderwritingCaseID As System.Int64
            <DataMember()> Public Property OpenDate As System.DateTime
            <DataMember()> Public Property Decision As System.Int32

        End Class

        <Serializable()>
        Public Class HT5CompleteStudyOfClientIndicatedSummaryParameters
            Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of HT5CompleteStudyOfClientIndicatedSummaryParameters)

            Public Property PlanType As Int32
            Public Property ClientExistInDB As Boolean
            Public Property Currency As Int32
            Public Property Reclamo As Int32
            Public Property QueryType As Int32
            Public Property eMail As String
            Public Property TipoModificacion As Int32
            Public Property UserClientID As String
            Public Property IsProducer As Boolean
            Public Property ProducerCode As Int32
            Public Property IsEmployee As Boolean
            Public Property ControlService As Int32
            Public Property ProducerID As Int64
            Public Property ProducerClientID As String
            Public Property ProcessDate As DateTime
            Public Property TotalClient As String
            Public Property IntermedClient As String
            Public Property Company As Int32
            Public Property UserIsClient As Boolean
            Public Property MarketingUserIndicator As Boolean
            Public Property eMailToFind As String
            Public Property ClientID As String
            Public Property TipoDeBusqueda As Int32
            Public Property NombreDelClienteConsultar As String
            Public Property QuantityOfRecord As Int32
            Public Property Edad As Int32
            Public Property Genero As Int32
            Public Property EstadoCivil As Int32
            Public Property NumeroHijos As Int32
            Public Property IngresosPersonales As Int32
            Public Property ProductsFoundIndicator As Boolean
            Public Property CurrentPolicyCollection As InMotionGIT.Policy.Entity.Contracts.PolicyCollection
            Public Property CancelledPolicyCollection As InMotionGIT.Policy.Entity.Contracts.PolicyCollection
            Public Property QuantityOfPolicies As Int32
            Public Property Estadodelacotización As Int32
            Public Property PendingUnderwritingCaseCollection As InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection
            Public Property TotalQuantity As Int32
            Public Property OutstandingPremiumCollection As InMotionGIT.Policy.Entity.Contracts.PolicyCollection
            Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
            Public Property ClaimCollection As InMotionGIT.Claim.Entity.Contracts.ClaimCollection
            Public Property ConsumerInformation As InMotionGIT.Common.Contracts.Process.ConsumerInformation
            Public Property ErrorsFound As Boolean
            Public Property ClienteSelIntermediario As String
            Public Property ClientUser As InMotionGIT.Client.Entity.Contracts.Client

        End Class
#End Region

    End Class

End Namespace