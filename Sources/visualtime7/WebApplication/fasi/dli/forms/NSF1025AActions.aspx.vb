'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.1.211.1 at 2018/10/25 04:00:03 PM model release 1, Form Generator v1.0.32.17
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class NSF1025AActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            Dim NSF1025AParametersInstance As NSF1025AParameters = Nothing

            Try
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                    
                    With instance

                    End With                
                    
                    NSF1025AParametersInstance = EntryDataToClass(NSF1025AParametersInstance, instance)
                    SetDefaultValuesFromQueryString(NSF1025AParametersInstance)
                    
                    If fromid.IsNotEmpty Then
                        GetTransferParameters(NSF1025AParametersInstance, fromid)
                    End If
                Else          
                    instance.InstanceFormId = id.IfEmpty(urlid)
                    NSF1025AParametersInstance = RetrieveFormInformationFromSession(instance.InstanceFormId)
                End If

                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = String.Empty



                instance = ClassToEntryData(instance, NSF1025AParametersInstance) 
		        StoreFormInformationOnSession(NSF1025AParametersInstance)
                
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("NSF1025A", "Initialization", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
   

#End Region

#Region "Lookups Web Methods"


        <WebMethod()>
        Public Shared Function LookUpForParameter1ByFilter(id As String, filter As String, pageLength As Integer, currentPage As Integer) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                Dim query As String = String.Format(CultureInfo.CurrentCulture, "SELECT  SCLIENT, SCLIENAME FROM (SELECT  TRIM(CLIENT.SCLIENT) SCLIENT, TRIM(CLIENT.SCLIENAME) SCLIENAME, ROW_NUMBER() OVER (ORDER BY SCLIENAME) ROW_NUM FROM CLIENT CLIENT  WHERE %FILTER% ) Result WHERE Row_Num BETWEEN {0} AND {1}", pageLength * currentPage, (pageLength * currentPage) + pageLength)
                

                If String.IsNullOrEmpty(filter) Then
                    query = query.Replace("%FILTER%", "SCLIENAME IS NOT NULL")
                Else
                    query = query.Replace("%FILTER%", String.Format(CultureInfo.CurrentCulture, "(UPPER(SCLIENAME) LIKE UPPER('%{0}%'))", filter))
                End If

                With New DataManagerFactory(query, "CLIENT", "Linked.LatCombined")

                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.StringValue("SCLIENT"),
                                                                                            .Description = item.StringValue("SCLIENAME")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("NSF1025A", "LookUpForParameter1ByFilter", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForParameter1ByFilter")
                End With
             End Try
	    
            Return result
        End Function

        <WebMethod()>
        <ScriptMethod(UseHttpGet:=True, ResponseFormat:=ResponseFormat.Json)>
        Public Shared Function LookUpForParameter1ByValue(id As String, value As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                Dim query As String = "SELECT  TRIM(CLIENT.SCLIENT) SCLIENT, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM CLIENT CLIENT WHERE %FILTER%"
                

                query = query.Replace("%FILTER%", String.Format(CultureInfo.CurrentCulture, "(SCLIENT LIKE '%{0}%')", value))
              		
                With New DataManagerFactory(query, "CLIENT", "Linked.LatCombined")

                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.StringValue("SCLIENT"),
                                                                                            .Description = item.StringValue("SCLIENAME")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("FormSelect2", "LookUpForParameter1ByValue", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForParameter1ByValue")
                End With
            End Try
            
            Return result
        End Function

#End Region

#Region "Form Actions"


#End Region
#Region "Utilities"


        Private Shared Sub GetTransferParameters(parametersData As NSF1025AParameters, fromid As String)
            Dim fromDocumentCache As Object = Nothing

            If Not String.IsNullOrEmpty(fromid) Then
                fromDocumentCache = HttpContext.Current.Session(fromid)
                HttpContext.Current.Session.Remove(fromid)

            Else
                fromDocumentCache = HttpContext.Current.Session(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove("fromid")
            End If

            If Not IsNothing(fromDocumentCache) Then
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Parameter1", fromDocumentCache, parametersData)
            End If
        End Sub

        Private Shared Function SessionTrace(message As String) As String

            If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                Dim tracelog As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath")))

                tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = tracelog
            End If

            Return message
        End Function

#End Region
#Region "Storage Session Methods"

        Private Shared Function RetrieveFormInformationFromSession(id As String) As NSF1025AParameters
            Dim source As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.Storage.{0}", id))
            Dim instance As NSF1025AParameters = Nothing

            If Not String.IsNullOrEmpty(source) Then
                instance = Serialize.Deserialize(Of NSF1025AParameters)(source)
            End If

            Return instance
        End Function

        Private Shared Sub StoreFormInformationOnSession(instance As NSF1025AParameters)
            If Not IsNothing(instance) Then
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.Storage.{0}", instance.InternalId)) = Serialize.Serialize(Of NSF1025AParameters)(instance)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.Title.{0}", instance.InternalId)) = "Combo con BigData"
              
                If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso
                   HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then

                    HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.NSF1025A", instance.InternalId)) = instance
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track.Parameters")) AndAlso
                   HttpContext.Current.Session("Form.Track.Parameters").ToString.ToLower = "true" Then

                    If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                        InMotionGIT.Common.Helpers.FileHandler.SaveContent(String.Format(CultureInfo.InvariantCulture, "{0}\{1}.NSF1025A.txt",
                                                                                         ConfigurationManager.AppSettings("Path.Logs"), instance.InternalId),
                                                                                          HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture,
                                                                                                                     "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))))
                    End If

                    InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of NSF1025AParameters)(instance,
                                                                                                String.Format(CultureInfo.InvariantCulture,
                                                                                                              "{0}\{1}.NSF1025A.xml", ConfigurationManager.AppSettings("Path.Logs"), instance.InternalId), True)
                End If			
            End If
        End Sub

#End Region


#Region "Contracts Mappers"

        Private Shared Function EntryDataToClass(parametersData As NSF1025AParameters, formData As EntryData) As NSF1025AParameters
            If IsNothing(parametersData) Then
                parametersData = New NSF1025AParameters
            End If


            With parametersData
                .InternalId = formData.InstanceFormId
                .Parameter1 = formData.Parameter1
            End With

            Return parametersData
        End Function

        Private Shared Function ClassToEntryData(formData As EntryData, parametersData As NSF1025AParameters) As EntryData
            formData = New EntryData

            With formData
                .InstanceFormId = parametersData.InternalId
                .Parameter1 = parametersData.Parameter1
            End With

            Return formData
        End Function

#End Region

#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As NSF1025AParameters)
            If HttpContext.Current.Request.QueryString("Parameter1").IsNotEmpty Then
                formData.Parameter1 = HttpContext.Current.Request.QueryString("Parameter1")
            End If
        End Sub	

        Private Sub ValidateParametersInstance(ByRef formData As NSF1025AParameters)

        End Sub

#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property Parameter1 As String

        End Class

        <Serializable()>
        Public Class NSF1025AParameters
            Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of NSF1025AParameters)

            Public Property Parameter1 As String

        End Class
#End Region

    End Class

End Namespace