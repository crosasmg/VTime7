'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.3.42.1 at 2020-05-20 04:11:48 PM model release 17, Form Generator v1.0.37.65
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Net
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class WorkflowMonitorActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            
            
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                  
                
                Else
                    instance.InstanceFormId = id.IfEmpty(urlid)
                End If             
             
                With resultData
                    .Success = True
                    .Data = New With {.Instance = instance, .LookUps = Nothing}
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "WorkflowMonitor", "Initialization", currentAction)
            End Try
            
            Return resultData
        End Function
  

        <WebMethod()>
        Public Shared Function ClientTblDataLoad(filter As String, WorkflowInstanceTIMECREATED1 As DateTime, WorkflowInstanceTIMECREATED2 As DateTime) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Unique_Key = 0, .FirstName = String.Empty, .LastName = String.Empty, .LastName2 = String.Empty, .CustomString = String.Empty, .CustomDate = Date.MinValue, .CustomDateEx = Date.MinValue, .CustomNumeric = 0}
            Dim index as integer = 1
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)
            
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")

                With New DataManagerFactory("SELECT WORKFLOWINSTANCEID, TIMECREATED, NVL (IDENTIFY, NAME) AS IDENTIFY, NVL(WORKFLOWSTATE, 'Terminated') WORKFLOWSTATE, REASON, STARTDATE, FINISHDATE, NVL (EXTRACT (SECOND FROM (FINISHDATE - STARTDATE)), 0) AS DURATION FROM WorkflowInstance  WHERE WORKFLOWINSTANCE.TIMECREATED >= @:TIMECREATED1 AND WORKFLOWINSTANCE.TIMECREATED < @:TIMECREATED2  ORDER BY TIMECREATED DESC", "WorkflowInstance", "Linked.FrontOffice")
                    .AddParameter("TIMECREATED1", DbType.DateTime, 10, (WorkflowInstanceTIMECREATED1 = Date.MinValue), WorkflowInstanceTIMECREATED1)
                    .AddParameter("TIMECREATED2", DbType.DateTime, 10, (WorkflowInstanceTIMECREATED2 = Date.MinValue), WorkflowInstanceTIMECREATED2)

                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.Unique_Key = index, .FirstName = itemData.StringValue("WORKFLOWINSTANCEID"), .LastName = itemData.StringValue("IDENTIFY"), .LastName2 = itemData.StringValue("WORKFLOWSTATE"), .CustomString = itemData.StringValue("REASON"), .CustomDate = itemData.DateTimeValue("STARTDATE"), .CustomDateEx = itemData.DateTimeValue("FINISHDATE"), .CustomNumeric = itemData.NumericValue("DURATION")}
                            index += 1

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With
            
            If responseList.Count <> 0 Then          
		    
            End If
                
            Catch ex As Exception            
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "WorkflowMonitor", "ClientTblDataLoad", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function DetailTblDataLoad(WORKFLOWTRACKINGWORKFLOWINSTANCEID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Unique_Key = 0, .UserCode = 0, .ClientID = String.Empty, .ConceptDescription = String.Empty, .ConceptStatusDescription = String.Empty, .DateOfTheInformation = Date.MinValue, .UpdateTimeStamp = Date.MinValue, .Units = 0}
            Dim index as integer = 1
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)
            
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")

                With New DataManagerFactory("  SELECT WORKFLOWINSTANCEID,RECORDNUMBER, ACTIVITYNAME, ACTIVITYTYPE,ACTIVITYSTATE AS State, STARTDATE AS TIMESTART, FINISHDATE AS TIMEFINISH, NVL (EXTRACT (SECOND FROM (FINISHDATE - STARTDATE)), 0) AS DURATION    FROM WORKFLOWTRACKING WHERE RECORDNUMBER > 4  AND WORKFLOWTRACKING.WORKFLOWINSTANCEID = @:WORKFLOWINSTANCEID1  ORDER BY RECORDNUMBER ASC", "WORKFLOWTRACKING", "Linked.FrontOffice")
                    .AddParameter("WORKFLOWINSTANCEID1", DbType.AnsiString, 36, (WORKFLOWTRACKINGWORKFLOWINSTANCEID1 = String.Empty), WORKFLOWTRACKINGWORKFLOWINSTANCEID1)

                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.Unique_Key = index, .UserCode = itemData.IntegerValue("RECORDNUMBER"), .ClientID = itemData.StringValue("ACTIVITYNAME"), .ConceptDescription = itemData.StringValue("ACTIVITYTYPE"), .ConceptStatusDescription = itemData.StringValue("STATE"), .DateOfTheInformation = itemData.DateTimeValue("TIMESTART"), .UpdateTimeStamp = itemData.DateTimeValue("TIMEFINISH"), .Units = itemData.NumericValue("DURATION")}
                            index += 1

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With
            
            If responseList.Count <> 0 Then          
		    
            End If
                
            Catch ex As Exception            
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "WorkflowMonitor", "DetailTblDataLoad", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function DetailTblDataCount(WORKFLOWTRACKINGWORKFLOWINSTANCEID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (  SELECT WORKFLOWINSTANCEID,RECORDNUMBER, ACTIVITYNAME, ACTIVITYTYPE,ACTIVITYSTATE AS State, STARTDATE AS TIMESTART, FINISHDATE AS TIMEFINISH, NVL (EXTRACT (SECOND FROM (FINISHDATE - STARTDATE)), 0) AS DURATION    FROM WORKFLOWTRACKING WHERE RECORDNUMBER > 4  AND WORKFLOWTRACKING.WORKFLOWINSTANCEID = @:WORKFLOWINSTANCEID1  ORDER BY RECORDNUMBER ASC)", "WORKFLOWTRACKING", "Linked.FrontOffice")
                    .AddParameter("WORKFLOWINSTANCEID1", DbType.AnsiString, 36, (WORKFLOWTRACKINGWORKFLOWINSTANCEID1 = String.Empty), WORKFLOWTRACKINGWORKFLOWINSTANCEID1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "WorkflowMonitor", "DetailTblDataCount", String.Empty)
            End Try
            
            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Detail1SelectCommandActionWORKFLOWTRACKING(WORKFLOWTRACKINGWORKFLOWINSTANCEID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}
            Dim responseList As New List(Of Object)
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")

                With New DataManagerFactory("Select COUNT(WORKFLOWTRACKING.RECORDNUMBER) COUNTDATA FROM WORKFLOWTRACKING WORKFLOWTRACKING  WHERE WORKFLOWTRACKING.WORKFLOWINSTANCEID = @:WORKFLOWINSTANCEID1", "WORKFLOWTRACKING", "Linked.FrontOffice")
                    .AddParameter("WORKFLOWINSTANCEID1", DbType.AnsiStringFixedLength, 36, (WORKFLOWTRACKINGWORKFLOWINSTANCEID1 = String.Empty), WORKFLOWTRACKINGWORKFLOWINSTANCEID1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With
            
            If responseList.Count <> 0 Then          
		    
            End If
                
            Catch ex As Exception            
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "WorkflowMonitor", "Detail1SelectCommandActionWORKFLOWTRACKING", String.Empty)
            End Try
            
            Return resultData
        End Function


#End Region

#Region "Lookups Web Methods"


#End Region

#Region "Form Actions"


#End Region





#Region "Common Utilities"


#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property Start As DateTime
            <DataMember()> Public Property Finish As DateTime
            <DataMember()> Public Property ClientListFirstName As System.String
            <DataMember()> Public Property ClientListLastName As System.String
            <DataMember()> Public Property ClientListLastName2 As System.String
            <DataMember()> Public Property ClientListCustomDate As System.DateTime
            <DataMember()> Public Property ClientListCustomDateEx As System.DateTime
            <DataMember()> Public Property ClientListCustomNumeric As System.Decimal
            <DataMember()> Public Property ClientListCustomString As System.String
            <DataMember()> Public Property ClientListClientFinantialInformationsUserCode As System.Int32
            <DataMember()> Public Property ClientListClientFinantialInformationsClientID As System.String
            <DataMember()> Public Property ClientListClientFinantialInformationsConceptDescription As System.String
            <DataMember()> Public Property ClientListClientFinantialInformationsConceptStatusDescription As System.String
            <DataMember()> Public Property ClientListClientFinantialInformationsDateOfTheInformation As System.DateTime
            <DataMember()> Public Property ClientListClientFinantialInformationsUpdateTimeStamp As System.DateTime
            <DataMember()> Public Property ClientListClientFinantialInformationsUnits As System.Decimal
            <DataMember()> Public Property Detail_ClientFinantialInformation As List(Of Detail_ClientFinantialInformationItem)
            <DataMember()> Public Property Client_Client As List(Of Client_ClientItem)

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Detail_ClientFinantialInformationItem

            <DataMember()> Public Property Unique_Key As System.Int32
            <DataMember()> Public Property UserCode As System.Int32
            <DataMember()> Public Property ClientID As System.String
            <DataMember()> Public Property ConceptDescription As System.String
            <DataMember()> Public Property ConceptStatusDescription As System.String
            <DataMember()> Public Property DateOfTheInformation As System.DateTime
            <DataMember()> Public Property UpdateTimeStamp As System.DateTime
            <DataMember()> Public Property Units As System.Decimal

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Client_ClientItem

            <DataMember()> Public Property Unique_Key As System.Int32
            <DataMember()> Public Property FirstName As System.String
            <DataMember()> Public Property LastName As System.String
            <DataMember()> Public Property LastName2 As System.String
            <DataMember()> Public Property CustomDate As System.DateTime
            <DataMember()> Public Property CustomDateEx As System.DateTime
            <DataMember()> Public Property CustomNumeric As System.Decimal
            <DataMember()> Public Property CustomString As System.String

        End Class


#End Region

    End Class

End Namespace

