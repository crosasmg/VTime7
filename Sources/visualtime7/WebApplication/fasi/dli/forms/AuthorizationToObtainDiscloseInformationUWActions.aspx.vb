'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.3.34.1 at 2020-01-17 02:21:14 p. m. model release 9, Form Generator v1.0.37.30
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class AuthorizationToObtainDiscloseInformationUWActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            
            Dim AuthorizationToObtainDiscloseInformationUWParametersInstance As AuthorizationToObtainDiscloseInformationUWParameters = Nothing

            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                    
                    With instance

                    End With                
                    
                    AuthorizationToObtainDiscloseInformationUWParametersInstance = EntryDataToClass(AuthorizationToObtainDiscloseInformationUWParametersInstance, instance)
                    SetDefaultValuesFromQueryString(AuthorizationToObtainDiscloseInformationUWParametersInstance)
                    
                    If fromid.IsNotEmpty Then
                        GetTransferParameters(AuthorizationToObtainDiscloseInformationUWParametersInstance, fromid)
                        ValidateParametersInstance(AuthorizationToObtainDiscloseInformationUWParametersInstance)
                    End If
                Else       
                    instance.InstanceFormId = id.IfEmpty(urlid)
                    AuthorizationToObtainDiscloseInformationUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
    
                    If IsNothing(AuthorizationToObtainDiscloseInformationUWParametersInstance) then
                        AuthorizationToObtainDiscloseInformationUWParametersInstance = EntryDataToClass(AuthorizationToObtainDiscloseInformationUWParametersInstance, instance)                        
                    End If
                    
                    SetDefaultValuesFromQueryString(AuthorizationToObtainDiscloseInformationUWParametersInstance)
                End If

                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = String.Empty

                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    Form_Initialization(currentAction, AuthorizationToObtainDiscloseInformationUWParametersInstance, resultData)
                Else
                    Form_Load(currentAction, AuthorizationToObtainDiscloseInformationUWParametersInstance, resultData)
                End If


                instance = ClassToEntryData(instance, AuthorizationToObtainDiscloseInformationUWParametersInstance) 
		        
                StoreFormInformation(AuthorizationToObtainDiscloseInformationUWParametersInstance)
                                
                With resultData
                    .Success = True
                    .Data = New With {.Instance = instance, .LookUps = Nothing}
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "AuthorizationToObtainDiscloseInformationUW", "Initialization", currentAction)
            End Try
            
            Return resultData
        End Function
  

        <WebMethod(EnableSession:=True)>
        Public Shared Function saveClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim AuthorizationToObtainDiscloseInformationUWParametersInstance As AuthorizationToObtainDiscloseInformationUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                AuthorizationToObtainDiscloseInformationUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("saveClick")
                AuthorizationToObtainDiscloseInformationUWParametersInstance = EntryDataToClass(AuthorizationToObtainDiscloseInformationUWParametersInstance, instance)
                currentAction = SessionTrace("1. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint)
                .Add("uwreqid", AuthorizationToObtainDiscloseInformationUWParametersInstance.uwreqid)
                .Add("ClientName", AuthorizationToObtainDiscloseInformationUWParametersInstance.ClientName)
                .Add("StatusCase", AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusCase)
                .Add("StatusRequirement", AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusRequirement)
                .Add("RiskInformation", AuthorizationToObtainDiscloseInformationUWParametersInstance.RiskInformation)
                .Add("Identifier", "Authorization")
                .Add("context", formContext)
                .Add("caseLocked", AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 11, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, AuthorizationToObtainDiscloseInformationUWParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint = WorkflowOutArguments("uwcaseid")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("2. If AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusRequirement <> 1 Then")
                If AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusRequirement <> 1 Then

                    currentAction = SessionTrace("3. The message 'El estado del requer...' will displayed as 'Splash'")
                    ParametersToDictionary(AuthorizationToObtainDiscloseInformationUWParametersInstance, parametersDictionary)
                    messageAction = "El estado del requerimiento no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros."
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifySplash(messageAction)
                    Else
                    currentAction = SessionTrace("4. AuthorizationToObtainDiscloseInformationUWParametersInstance.UsercodeFASI = UserInfo.UserId...")
                    currentAction = SessionTrace("4.1. AuthorizationToObtainDiscloseInformationUWParametersInstance.UsercodeFASI = UserInfo.UserId...")

                    AuthorizationToObtainDiscloseInformationUWParametersInstance.UsercodeFASI = UserInfo.UserId
                    currentAction = SessionTrace("4.2. AuthorizationToObtainDiscloseInformationUWParametersInstance.IsAnonymous = UserInfo.IsAnonymous()...")

                    AuthorizationToObtainDiscloseInformationUWParametersInstance.IsAnonymous = UserInfo.IsAnonymous()

                    currentAction = SessionTrace("5. If AuthorizationToObtainDiscloseInformationUWParametersInstance.IsAnonymous = true Then")
                    If AuthorizationToObtainDiscloseInformationUWParametersInstance.IsAnonymous = true Then

                        currentAction = SessionTrace("6. AuthorizationToObtainDiscloseInformationUWParametersInstance.UsercodeFASI = 9998...")
                        currentAction = SessionTrace("6.1. AuthorizationToObtainDiscloseInformationUWParametersInstance.UsercodeFASI = 9998...")

                        AuthorizationToObtainDiscloseInformationUWParametersInstance.UsercodeFASI = 9998

                                End If
                    currentAction = SessionTrace("7. If AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked = true Then")
                    If AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked = true Then

                        currentAction = SessionTrace("8. Call 'Main Process Questionnaire Authorization To Obtain Disclose Information' workflow in Synchronous mode with tracking")
                        WorkflowInArguments = New Dictionary(Of String, Object)

                        With WorkflowInArguments
                        .Add("context", formContext)
                        .Add("uwcaseid", AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint)
                        .Add("uwreqid", AuthorizationToObtainDiscloseInformationUWParametersInstance.uwreqid)
                        .Add("AuthorizationObtainDiscloseInformation", AuthorizationToObtainDiscloseInformationUWParametersInstance.AuthorizationObtainDiscloseInformation)
                        .Add("locked", AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked)
                        .Add("ConnectedUserCode", AuthorizationToObtainDiscloseInformationUWParametersInstance.UsercodeFASI)
                        End With

                        WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireRuleAuthorizationToObtainDiscloseInfo", "92ad1197-a1af-4b31-b4f5-f90ed356ae37", 1, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, AuthorizationToObtainDiscloseInformationUWParametersInstance.InternalId)

                        currentAction += "'Mapping Outputs'"
                        AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint = WorkflowOutArguments("uwcaseid")
                        AuthorizationToObtainDiscloseInformationUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                        AuthorizationToObtainDiscloseInformationUWParametersInstance.AuthorizationObtainDiscloseInformation = WorkflowOutArguments("AuthorizationObtainDiscloseInformation")

                        currentAction = SessionTrace("9. Url: '#setting.Url.WebApplication#/Underwriting/UnderwritingPanel.aspx'")
                            
                With resultData
                    .AddRedirect(String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") +"/Underwriting/UnderwritingPanel.aspx"+"?closeWindow={0}","1"))
                End With
                                    Else
                        currentAction = SessionTrace("10. The message 'Muchas gracias por s...' will displayed as 'Splash'")
                        ParametersToDictionary(AuthorizationToObtainDiscloseInformationUWParametersInstance, parametersDictionary)
                        messageAction = "Muchas gracias por su autorización. Nuestro personal médico se pondrá en contacto con usted y/o con su médico."
                        messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                        resultData.AddNotifySplash(messageAction)
                        currentAction = SessionTrace("11. Call 'Main Process Questionnaire Authorization To Obtain Disclose Information' workflow in Asynchronous mode with tracking")
                        WorkflowInArguments = New Dictionary(Of String, Object)

                        With WorkflowInArguments
                        .Add("context", formContext)
                        .Add("uwcaseid", AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint)
                        .Add("uwreqid", AuthorizationToObtainDiscloseInformationUWParametersInstance.uwreqid)
                        .Add("AuthorizationObtainDiscloseInformation", AuthorizationToObtainDiscloseInformationUWParametersInstance.AuthorizationObtainDiscloseInformation)
                        .Add("locked", AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked)
                        .Add("ConnectedUserCode", AuthorizationToObtainDiscloseInformationUWParametersInstance.UsercodeFASI)
                        End With

                        WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireRuleAuthorizationToObtainDiscloseInfo", "92ad1197-a1af-4b31-b4f5-f90ed356ae37", 1, WorkflowInArguments, True, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath, AuthorizationToObtainDiscloseInformationUWParametersInstance.InternalId)


                                        End If
                                    End If

                instance = ClassToEntryData(instance, AuthorizationToObtainDiscloseInformationUWParametersInstance)
                
                StoreFormInformation(AuthorizationToObtainDiscloseInformationUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "AuthorizationToObtainDiscloseInformationUW", "saveClick", currentAction)
            End Try
            
            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


#End Region

#Region "Form Actions"

        Private Shared Sub Form_Initialization(ByRef currentAction As String, ByRef AuthorizationToObtainDiscloseInformationUWParametersInstance As AuthorizationToObtainDiscloseInformationUWParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            
            Dim formContext As New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                        AuthorizationToObtainDiscloseInformationUWParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                                     .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                                     .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                                     .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Initialization")

            currentAction = SessionTrace("1. If AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseid Not Is Null Or Not Empty '' Then")
            If Not String.IsNullOrEmpty(AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseid) Then

                currentAction = SessionTrace("2. If AuthorizationToObtainDiscloseInformationUWParametersInstance.frompanel = True Then")
                If AuthorizationToObtainDiscloseInformationUWParametersInstance.frompanel = True Then

                    currentAction = SessionTrace("3. ClientName.Enabled = false, uwcaseid.Enabled = false, AcceptanceIndicator.Enabled = false...")
                    currentAction = SessionTrace("3.1. ClientName.Enabled = false...")
                    resultData.AddControlBehavior("ClientName", "disabled")
                    currentAction = SessionTrace("3.2. uwcaseid.Enabled = false...")
                    resultData.AddControlBehavior("uwcaseid", "disabled")
                    currentAction = SessionTrace("3.3. AcceptanceIndicator.Enabled = false...")
                    resultData.AddControlBehavior("AcceptanceIndicatorWrap", "disabled")
                    currentAction = SessionTrace("3.4. DateReceived.Enabled = false...")
                    resultData.AddControlBehavior("DateReceived", "disabled")

                        End If
                currentAction = SessionTrace("4. AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint = AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseid...")
                currentAction = SessionTrace("4.1. AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint = AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseid...")

                AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint = AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseid

                currentAction = SessionTrace("5. AuthorizationToObtainDiscloseInformationUWParametersInstance.AuthorizationObtainDiscloseInformation.DateSignatureProposed = Date.Today...")
                currentAction = SessionTrace("5.1. AuthorizationToObtainDiscloseInformationUWParametersInstance.AuthorizationObtainDiscloseInformation.DateSignatureProposed = Date.Today...")
                                If IsNothing(AuthorizationToObtainDiscloseInformationUWParametersInstance.AuthorizationObtainDiscloseInformation) Then
                    AuthorizationToObtainDiscloseInformationUWParametersInstance.AuthorizationObtainDiscloseInformation = New InMotionGIT.Questionnaires.AuthorizationObtainDiscloseInformation
                End If

                AuthorizationToObtainDiscloseInformationUWParametersInstance.AuthorizationObtainDiscloseInformation.DateSignatureProposed = Date.Today

                currentAction = SessionTrace("6. If AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked Is Null Or Empty  Then")
                If IsNothing(AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked) Then

                    currentAction = SessionTrace("7. AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked = False...")
                    currentAction = SessionTrace("7.1. AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked = False...")

                    AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked = False

                            End If
                currentAction = SessionTrace("8. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint)
                .Add("uwreqid", AuthorizationToObtainDiscloseInformationUWParametersInstance.uwreqid)
                .Add("ClientName", AuthorizationToObtainDiscloseInformationUWParametersInstance.ClientName)
                .Add("StatusCase", AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusCase)
                .Add("StatusRequirement", AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusRequirement)
                .Add("RiskInformation", AuthorizationToObtainDiscloseInformationUWParametersInstance.RiskInformation)
                .Add("Identifier", "Authorization")
                .Add("context", formContext)
                .Add("caseLocked", AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 11, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, AuthorizationToObtainDiscloseInformationUWParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint = WorkflowOutArguments("uwcaseid")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("9. If AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusRequirement <> 1 Then")
                If AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusRequirement <> 1 Then

                    currentAction = SessionTrace("10. The message 'El estado del requer...' will displayed as 'Splash'")
                    ParametersToDictionary(AuthorizationToObtainDiscloseInformationUWParametersInstance, parametersDictionary)
                    messageAction = "El estado del requerimiento no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros."
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifySplash(messageAction)
                                End If
                            End If

            
        End Sub
	
        Private Shared Sub Form_Load(ByRef currentAction As String, ByRef AuthorizationToObtainDiscloseInformationUWParametersInstance As AuthorizationToObtainDiscloseInformationUWParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                        AuthorizationToObtainDiscloseInformationUWParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                                     .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                                     .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                                     .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Load")

            currentAction = SessionTrace("1. If AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseid Not Is Null Or Not Empty '' Then")
            If Not String.IsNullOrEmpty(AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseid) Then

                currentAction = SessionTrace("2. If AuthorizationToObtainDiscloseInformationUWParametersInstance.frompanel = True Then")
                If AuthorizationToObtainDiscloseInformationUWParametersInstance.frompanel = True Then

                    currentAction = SessionTrace("3. ClientName.Enabled = false, uwcaseid.Enabled = false, AcceptanceIndicator.Enabled = false...")
                    currentAction = SessionTrace("3.1. ClientName.Enabled = false...")
                    resultData.AddControlBehavior("ClientName", "disabled")
                    currentAction = SessionTrace("3.2. uwcaseid.Enabled = false...")
                    resultData.AddControlBehavior("uwcaseid", "disabled")
                    currentAction = SessionTrace("3.3. AcceptanceIndicator.Enabled = false...")
                    resultData.AddControlBehavior("AcceptanceIndicatorWrap", "disabled")
                    currentAction = SessionTrace("3.4. DateReceived.Enabled = false...")
                    resultData.AddControlBehavior("DateReceived", "disabled")

                        End If
                currentAction = SessionTrace("4. AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint = AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseid...")
                currentAction = SessionTrace("4.1. AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint = AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseid...")

                AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint = AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseid

                currentAction = SessionTrace("5. AuthorizationToObtainDiscloseInformationUWParametersInstance.AuthorizationObtainDiscloseInformation.DateSignatureProposed = Date.Today...")
                currentAction = SessionTrace("5.1. AuthorizationToObtainDiscloseInformationUWParametersInstance.AuthorizationObtainDiscloseInformation.DateSignatureProposed = Date.Today...")
                                If IsNothing(AuthorizationToObtainDiscloseInformationUWParametersInstance.AuthorizationObtainDiscloseInformation) Then
                    AuthorizationToObtainDiscloseInformationUWParametersInstance.AuthorizationObtainDiscloseInformation = New InMotionGIT.Questionnaires.AuthorizationObtainDiscloseInformation
                End If

                AuthorizationToObtainDiscloseInformationUWParametersInstance.AuthorizationObtainDiscloseInformation.DateSignatureProposed = Date.Today

                currentAction = SessionTrace("6. If AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked Is Null Or Empty  Then")
                If IsNothing(AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked) Then

                    currentAction = SessionTrace("7. AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked = False...")
                    currentAction = SessionTrace("7.1. AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked = False...")

                    AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked = False

                            End If
                currentAction = SessionTrace("8. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint)
                .Add("uwreqid", AuthorizationToObtainDiscloseInformationUWParametersInstance.uwreqid)
                .Add("ClientName", AuthorizationToObtainDiscloseInformationUWParametersInstance.ClientName)
                .Add("StatusCase", AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusCase)
                .Add("StatusRequirement", AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusRequirement)
                .Add("RiskInformation", AuthorizationToObtainDiscloseInformationUWParametersInstance.RiskInformation)
                .Add("Identifier", "Authorization")
                .Add("context", formContext)
                .Add("caseLocked", AuthorizationToObtainDiscloseInformationUWParametersInstance.caselocked)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 11, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, AuthorizationToObtainDiscloseInformationUWParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                AuthorizationToObtainDiscloseInformationUWParametersInstance.uwcaseidint = WorkflowOutArguments("uwcaseid")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                AuthorizationToObtainDiscloseInformationUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("9. If AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusRequirement <> 1 Then")
                If AuthorizationToObtainDiscloseInformationUWParametersInstance.StatusRequirement <> 1 Then

                    currentAction = SessionTrace("10. The message 'El estado del requer...' will displayed as 'Splash'")
                    ParametersToDictionary(AuthorizationToObtainDiscloseInformationUWParametersInstance, parametersDictionary)
                    messageAction = "El estado del requerimiento no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros."
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifySplash(messageAction)
                                End If
                            End If

        End Sub
#End Region
#Region "Utilities"

        Private Shared Sub ParametersToDictionary(formData As AuthorizationToObtainDiscloseInformationUWParameters, ByRef target As Dictionary(Of String, Object))
            If IsNothing(target) Then
                target = New Dictionary(Of String, Object)

                target.Add("AuthorizationObtainDiscloseInformation", formData.AuthorizationObtainDiscloseInformation)
                target.Add("ClientName", formData.ClientName)
                target.Add("uwcaseid", formData.uwcaseid)
                target.Add("uwreqid", formData.uwreqid)
                target.Add("StatusCase", formData.StatusCase)
                target.Add("StatusRequirement", formData.StatusRequirement)
                target.Add("RiskInformation", formData.RiskInformation)
                target.Add("uwcaseidint", formData.uwcaseidint)
                target.Add("caselocked", formData.caselocked)
                target.Add("IsAnonymous", formData.IsAnonymous)
                target.Add("UsercodeFASI", formData.UsercodeFASI)
                target.Add("frompanel", formData.frompanel)
            Else
                target("AuthorizationObtainDiscloseInformation") = formData.AuthorizationObtainDiscloseInformation
                target("ClientName") = formData.ClientName
                target("uwcaseid") = formData.uwcaseid
                target("uwreqid") = formData.uwreqid
                target("StatusCase") = formData.StatusCase
                target("StatusRequirement") = formData.StatusRequirement
                target("RiskInformation") = formData.RiskInformation
                target("uwcaseidint") = formData.uwcaseidint
                target("caselocked") = formData.caselocked
                target("IsAnonymous") = formData.IsAnonymous
                target("UsercodeFASI") = formData.UsercodeFASI
                target("frompanel") = formData.frompanel
            End If
        End Sub

        Private Shared Sub GetTransferParameters(parametersData As AuthorizationToObtainDiscloseInformationUWParameters, fromid As String)
            Dim fromDocumentCache As Object = Nothing

            If Not String.IsNullOrEmpty(fromid) Then
                fromDocumentCache = HttpContext.Current.Session(fromid)
                HttpContext.Current.Session.Remove(fromid)

            Else
                fromDocumentCache = HttpContext.Current.Session(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove("fromid")
            End If

            If Not IsNothing(fromDocumentCache) Then
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AuthorizationObtainDiscloseInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientName", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusCase", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRequirement", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseidint", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("caselocked", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsAnonymous", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeFASI", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("frompanel", fromDocumentCache, parametersData)
            End If
        End Sub

        Private Shared Function SessionTrace(message As String) As String

            If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                Dim tracelog As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath")))

                tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = tracelog
            End If

            Return message
        End Function

#End Region


#Region "Storage Database Methods"

      Private Shared Sub StoreFormInformation(formData As AuthorizationToObtainDiscloseInformationUWParameters)
            If Not IsNothing(formData) Then
                Dim foundData As Boolean

                If formData.InternalId.IsEmpty Then
                    formData.InternalId = Guid.NewGuid.ToString
                Else
                    With New DataManagerFactory("SELECT COUNT(FormId) FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                 "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                        .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                        foundData = .QueryExecuteScalarToInteger > 0
                    End With
                End If

                If foundData Then
                    UpdateStorageData(formData)
                Else
                    InsertStorageData(formData)
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso
                    HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                    HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.AuthorizationToObtainDiscloseInformationUW", formData.InternalId)) = formData
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track.Parameters")) AndAlso
                    HttpContext.Current.Session("Form.Track.Parameters").ToString.ToLower = "true" Then

                    If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                        InMotionGIT.Common.Helpers.FileHandler.SaveContent(String.Format(CultureInfo.InvariantCulture, 
                                                                                         "{0}\{1}.AuthorizationToObtainDiscloseInformationUW.txt", ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), 
                                                                                         HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", 
                                                                                                                                   IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))))
                    End If

                    InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of AuthorizationToObtainDiscloseInformationUWParameters)(formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.AuthorizationToObtainDiscloseInformationUW.xml", 
                                                                                                                        ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
                End If
            End If
        End Sub

        Private Shared Function RetrieveFormInformationFromDatabase(instanceFormId As String) As AuthorizationToObtainDiscloseInformationUWParameters
            Dim result As AuthorizationToObtainDiscloseInformationUWParameters = Nothing
            Dim records As DataTable = Nothing

            With New DataManagerFactory("SELECT Content FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, instanceFormId)
                records = .QueryExecuteToTable(True)
            End With

            If records.Rows.Count > 0 Then
                result = Serialize.Deserialize(Of AuthorizationToObtainDiscloseInformationUWParameters)(records.FirstRow.Item("Content"))
            End If

            Return result
        End Function

        Private Shared Sub InsertStorageData(formData As AuthorizationToObtainDiscloseInformationUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("INSERT INTO FrontOffice.DocumentCache (FormId, ModelId, UserId, Page, Content, CreationDate, UpdateDate) VALUES(@:FormId, @:ModelId, @:UserId, @:Page, @:Content, @:CreationDate, @:UpdateDate)",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "80AAC4EF-51BF-4202-9EB5-91B3B8FC8D57")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of AuthorizationToObtainDiscloseInformationUWParameters)(formData))
            .AddParameter("CreationDate", DbType.DateTime, 20, False, Now)
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)

                .CommandExecute()
            End With
        End Sub

        Private Shared Sub UpdateStorageData(formData As AuthorizationToObtainDiscloseInformationUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("UPDATE FrontOffice.DocumentCache SET ModelId = @:ModelId, UserId = @:UserId, Page = @:Page, Content = @:Content, UpdateDate = @:UpdateDate WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "80AAC4EF-51BF-4202-9EB5-91B3B8FC8D57")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of AuthorizationToObtainDiscloseInformationUWParameters)(formData))
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)

                .CommandExecute()
            End With
        End Sub

#End Region


#Region "Contracts Mappers"

        Private Shared Function EntryDataToClass(parametersData As AuthorizationToObtainDiscloseInformationUWParameters, formData As EntryData) As AuthorizationToObtainDiscloseInformationUWParameters
            If IsNothing(parametersData) Then
                parametersData = New AuthorizationToObtainDiscloseInformationUWParameters
            End If

            If IsNothing(parametersData.AuthorizationObtainDiscloseInformation) Then
                parametersData.AuthorizationObtainDiscloseInformation = New InMotionGIT.Questionnaires.AuthorizationObtainDiscloseInformation
            End If

            With parametersData
                .InternalId = formData.InstanceFormId
                .ClientName = formData.ClientName
                .uwcaseid = formData.uwcaseid
                .AuthorizationObtainDiscloseInformation.AcceptanceIndicator = formData.AuthorizationObtainDiscloseInformationAcceptanceIndicator
                .AuthorizationObtainDiscloseInformation.DateReceived = formData.AuthorizationObtainDiscloseInformationDateReceived
            End With

            Return parametersData
        End Function

        Private Shared Function ClassToEntryData(formData As EntryData, parametersData As AuthorizationToObtainDiscloseInformationUWParameters) As EntryData
            formData = New EntryData

            With formData
                .InstanceFormId = parametersData.InternalId
                .ClientName = parametersData.ClientName
                .uwcaseid = parametersData.uwcaseid
                If Not IsNothing(parametersData.AuthorizationObtainDiscloseInformation) Then
                    .AuthorizationObtainDiscloseInformationAcceptanceIndicator = parametersData.AuthorizationObtainDiscloseInformation.AcceptanceIndicator
                End If
                If Not IsNothing(parametersData.AuthorizationObtainDiscloseInformation) Then
                    .AuthorizationObtainDiscloseInformationDateReceived = parametersData.AuthorizationObtainDiscloseInformation.DateReceived
                End If
            End With

            Return formData
        End Function

#End Region

#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As AuthorizationToObtainDiscloseInformationUWParameters)
            If HttpContext.Current.Request.QueryString("ClientName").IsNotEmpty Then
                formData.ClientName = HttpContext.Current.Request.QueryString("ClientName")
            End If
            If HttpContext.Current.Request.QueryString("uwcaseid").IsNotEmpty Then
                formData.uwcaseid = HttpContext.Current.Request.QueryString("uwcaseid")
            End If
            If HttpContext.Current.Request.QueryString("uwreqid").IsNotEmpty Then
                formData.uwreqid = HttpContext.Current.Request.QueryString("uwreqid")
            End If
            If HttpContext.Current.Request.QueryString("StatusCase").IsNotEmpty Then
                formData.StatusCase = HttpContext.Current.Request.QueryString("StatusCase")
            End If
            If HttpContext.Current.Request.QueryString("StatusRequirement").IsNotEmpty Then
                formData.StatusRequirement = HttpContext.Current.Request.QueryString("StatusRequirement")
            End If
            If HttpContext.Current.Request.QueryString("uwcaseidint").IsNotEmpty Then
                formData.uwcaseidint = HttpContext.Current.Request.QueryString("uwcaseidint")
            End If
            If HttpContext.Current.Request.QueryString("caselocked").IsNotEmpty Then
                formData.caselocked = HttpContext.Current.Request.QueryString("caselocked")
            End If
            If HttpContext.Current.Request.QueryString("IsAnonymous").IsNotEmpty Then
                formData.IsAnonymous = HttpContext.Current.Request.QueryString("IsAnonymous")
            End If
            If HttpContext.Current.Request.QueryString("UsercodeFASI").IsNotEmpty Then
                formData.UsercodeFASI = HttpContext.Current.Request.QueryString("UsercodeFASI")
            End If
            If HttpContext.Current.Request.QueryString("frompanel").IsNotEmpty Then
                formData.frompanel = HttpContext.Current.Request.QueryString("frompanel")
            End If
        End Sub	

        Private Shared Sub ValidateParametersInstance(ByRef formData As AuthorizationToObtainDiscloseInformationUWParameters)
            If IsNothing(formData.AuthorizationObtainDiscloseInformation) Then
                formData.AuthorizationObtainDiscloseInformation = New InMotionGIT.Questionnaires.AuthorizationObtainDiscloseInformation
            End If

        End Sub

#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property ClientName As String
            <DataMember()> Public Property uwcaseid As String
            <DataMember()> Public Property AuthorizationObtainDiscloseInformationAcceptanceIndicator As System.Boolean
            <DataMember()> Public Property AuthorizationObtainDiscloseInformationDateReceived As System.DateTime

        End Class

        <Serializable()>
        Public Class AuthorizationToObtainDiscloseInformationUWParameters
            Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of AuthorizationToObtainDiscloseInformationUWParameters)

            Public Property AuthorizationObtainDiscloseInformation As InMotionGIT.Questionnaires.AuthorizationObtainDiscloseInformation
            Public Property ClientName As String
            Public Property uwcaseid As String
            Public Property uwreqid As Int64
            Public Property StatusCase As Int32
            Public Property StatusRequirement As Int32
            Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
            Public Property uwcaseidint As Int64
            Public Property caselocked As Boolean
            Public Property IsAnonymous As Boolean
            Public Property UsercodeFASI As Int32
            Public Property frompanel As Boolean

        End Class
#End Region

    End Class

End Namespace

