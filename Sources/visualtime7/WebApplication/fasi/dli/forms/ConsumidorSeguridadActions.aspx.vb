'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.3.39.1 at 2020/04/20 01:49:45 PM model release 6, Form Generator v1.0.37.52
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Net
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class ConsumidorSeguridadActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            
            
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                  
                
                Else
                    instance.InstanceFormId = id.IfEmpty(urlid)
                End If             
             
                With resultData
                    .Success = True
                    .Data = New With {.Instance = instance, .LookUps = LoadLookupsList()}
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "ConsumidorSeguridad", "Initialization", currentAction)
            End Try
            
            Return resultData
        End Function
  

        Public Shared Function LoadLookupsList() As List(Of InMotionGIT.Common.DataType.LookUpPackage)
            Dim result As New List(Of InMotionGIT.Common.DataType.LookUpPackage)
            
            Dim dataFactory As New DataManagerFactory("PackageExecuteToLookUp", "LOOKUPS", "")
            Dim dataCommand As InMotionGIT.Common.Services.Contracts.DataCommand = Nothing
            
            dataCommand = dataFactory.AddCommand(String.Format(CultureInfo.CurrentCulture, "SELECT TRIM(ENUMRECORDSTATUS.RECORDSTATUS) RECORDSTATUS, ETRANRECORDSTATUS.DESCRIPTION FROM ENUMRECORDSTATUS ENUMRECORDSTATUS JOIN ETRANRECORDSTATUS ETRANRECORDSTATUS ON ETRANRECORDSTATUS.RECORDSTATUS = ENUMRECORDSTATUS.RECORDSTATUS WHERE ENUMRECORDSTATUS.RECORDSTATUSCODE = '{0}' AND ETRANRECORDSTATUS.LANGUAGEID = {1} ORDER BY ETranRecordStatus.Description ASC", "1", InMotionGIT.FASI.Support.Handlers.LanguageHandler.ContextLanguageId()), New InMotionGIT.Common.DataType.LookUpValue With {.Code = "RecordStatus", .Description = "Description"}, "Estado_Registro", "EnumRecordStatus", "Linked.Common")
            
            result = dataFactory.PackageExecuteToLookUp()
	
            Return result
        End Function



        <WebMethod()>
        Public Shared Function Consumidor_GridTblDataLoad(filter As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Id_Consumidor = 0, .Id_Compania = 0, .Codigo_Secreto = String.Empty, .Nombre_Consumidor = String.Empty, .Identificador_Consumidor = String.Empty, .Vida_Token_Acceso = 0, .Estado_Registro = String.Empty, .CreationDate = Date.MinValue, .CreatorUserCode = 0, .UpdateDate = Date.MinValue, .UpdateUserCode = 0}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)
            
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")

                With New DataManagerFactory("SELECT CONSUMIDOR.ID_CONSUMIDOR, CONSUMIDOR.ID_COMPANIA, CONSUMIDOR.CODIGO_SECRETO, CONSUMIDOR.NOMBRE_CONSUMIDOR, CONSUMIDOR.IDENTIFICADOR_CONSUMIDOR, CONSUMIDOR.VIDA_TOKEN_ACCESO, CONSUMIDOR.ESTADO_REGISTRO, CONSUMIDOR.CREATIONDATE, CONSUMIDOR.CREATORUSERCODE, CONSUMIDOR.UPDATEDATE, CONSUMIDOR.UPDATEUSERCODE FROM CONSUMIDOR CONSUMIDOR ", "Consumidor", "Linked.Seguridad")

                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.Id_Consumidor = itemData.NumericValue("ID_CONSUMIDOR"), .Id_Compania = itemData.NumericValue("ID_COMPANIA"), .Codigo_Secreto = itemData.StringValue("CODIGO_SECRETO"), .Nombre_Consumidor = itemData.StringValue("NOMBRE_CONSUMIDOR"), .Identificador_Consumidor = itemData.StringValue("IDENTIFICADOR_CONSUMIDOR"), .Vida_Token_Acceso = itemData.NumericValue("VIDA_TOKEN_ACCESO"), .Estado_Registro = itemData.StringValue("ESTADO_REGISTRO"), .CreationDate = itemData.DateTimeValue("CREATIONDATE"), .CreatorUserCode = itemData.NumericValue("CREATORUSERCODE"), .UpdateDate = itemData.DateTimeValue("UPDATEDATE"), .UpdateUserCode = itemData.NumericValue("UPDATEUSERCODE")}
                            
                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With
            
            If responseList.Count <> 0 Then          
		    
            End If
                
            Catch ex As Exception            
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "ConsumidorSeguridad", "Consumidor_GridTblDataLoad", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Consumidor_Grid1InsertCommandActionConsumidor(ID_CONSUMIDOR1 As Decimal, ID_COMPANIA2 As Decimal, CODIGO_SECRETO3 As String, NOMBRE_CONSUMIDOR4 As String, IDENTIFICADOR_CONSUMIDOR5 As String, VIDA_TOKEN_ACCESO6 As Decimal, ESTADO_REGISTRO7 As String, CREATORUSERCODE8 As Decimal, UPDATEUSERCODE10 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                With New DataManagerFactory("INSERT INTO Consumidor (ID_CONSUMIDOR, ID_COMPANIA, CODIGO_SECRETO, NOMBRE_CONSUMIDOR, IDENTIFICADOR_CONSUMIDOR, VIDA_TOKEN_ACCESO, ESTADO_REGISTRO, CREATIONDATE, CREATORUSERCODE, UPDATEDATE, UPDATEUSERCODE) VALUES (@:ID_CONSUMIDOR1, @:ID_COMPANIA2, @:CODIGO_SECRETO3, @:NOMBRE_CONSUMIDOR4, @:IDENTIFICADOR_CONSUMIDOR5, @:VIDA_TOKEN_ACCESO6, @:ESTADO_REGISTRO7, @:CREATIONDATE7, @:CREATORUSERCODE8, @:UPDATEDATE9, @:UPDATEUSERCODE10)", "Consumidor", "Linked.Seguridad")
                    .AddParameter("ID_CONSUMIDOR1", DbType.Decimal, 0, False, ID_CONSUMIDOR1)
                    .AddParameter("ID_COMPANIA2", DbType.Decimal, 0, False, ID_COMPANIA2)
                    .AddParameter("CODIGO_SECRETO3", DbType.AnsiString, 0, (CODIGO_SECRETO3 = String.Empty), CODIGO_SECRETO3)
                    .AddParameter("NOMBRE_CONSUMIDOR4", DbType.AnsiString, 0, (NOMBRE_CONSUMIDOR4 = String.Empty), NOMBRE_CONSUMIDOR4)
                    .AddParameter("IDENTIFICADOR_CONSUMIDOR5", DbType.AnsiString, 0, (IDENTIFICADOR_CONSUMIDOR5 = String.Empty), IDENTIFICADOR_CONSUMIDOR5)
                    .AddParameter("VIDA_TOKEN_ACCESO6", DbType.Decimal, 0, False, VIDA_TOKEN_ACCESO6)
                    .AddParameter("ESTADO_REGISTRO7", DbType.AnsiStringFixedLength, 0, (ESTADO_REGISTRO7 = String.Empty), ESTADO_REGISTRO7)
                    .AddParameter("CREATIONDATE7", DbType.DateTime, 0, False, Date.Now)
                    .AddParameter("CREATORUSERCODE8", DbType.Decimal, 0, False, CREATORUSERCODE8)
                    .AddParameter("UPDATEDATE9", DbType.DateTime, 0, False, Date.Now)
                    .AddParameter("UPDATEUSERCODE10", DbType.Decimal, 0, False, UPDATEUSERCODE10)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "ConsumidorSeguridad", "Consumidor_Grid1InsertCommandActionConsumidor", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Consumidor_Grid1UpdateCommandActionConsumidor(CODIGO_SECRETO1 As String, NOMBRE_CONSUMIDOR2 As String, IDENTIFICADOR_CONSUMIDOR3 As String, VIDA_TOKEN_ACCESO4 As Decimal, ESTADO_REGISTRO5 As String, UPDATEUSERCODE6 As Decimal, ConsumidorIdConsumidor8 As Decimal, ConsumidorIdCompania9 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                With New DataManagerFactory("UPDATE Consumidor SET CODIGO_SECRETO = @:CODIGO_SECRETO1, NOMBRE_CONSUMIDOR = @:NOMBRE_CONSUMIDOR2, IDENTIFICADOR_CONSUMIDOR = @:IDENTIFICADOR_CONSUMIDOR3, VIDA_TOKEN_ACCESO = @:VIDA_TOKEN_ACCESO4, ESTADO_REGISTRO = @:ESTADO_REGISTRO5, UPDATEDATE = @:UPDATEDATE5, UPDATEUSERCODE = @:UPDATEUSERCODE6 WHERE CONSUMIDOR.ID_CONSUMIDOR = @:ID_CONSUMIDOR8 AND CONSUMIDOR.ID_COMPANIA = @:ID_COMPANIA9", "Consumidor", "Linked.Seguridad")
                    .AddParameter("CODIGO_SECRETO1", DbType.AnsiString, 0, (CODIGO_SECRETO1 = String.Empty), CODIGO_SECRETO1)
                    .AddParameter("NOMBRE_CONSUMIDOR2", DbType.AnsiString, 0, (NOMBRE_CONSUMIDOR2 = String.Empty), NOMBRE_CONSUMIDOR2)
                    .AddParameter("IDENTIFICADOR_CONSUMIDOR3", DbType.AnsiString, 0, (IDENTIFICADOR_CONSUMIDOR3 = String.Empty), IDENTIFICADOR_CONSUMIDOR3)
                    .AddParameter("VIDA_TOKEN_ACCESO4", DbType.Decimal, 0, False, VIDA_TOKEN_ACCESO4)
                    .AddParameter("ESTADO_REGISTRO5", DbType.AnsiStringFixedLength, 0, (ESTADO_REGISTRO5 = String.Empty), ESTADO_REGISTRO5)
                    .AddParameter("UPDATEDATE5", DbType.DateTime, 0, False, Date.Now)
                    .AddParameter("UPDATEUSERCODE6", DbType.Decimal, 0, False, UPDATEUSERCODE6)
                    .AddParameter("ID_CONSUMIDOR8", DbType.Decimal, 0, False, ConsumidorIdConsumidor8)
                    .AddParameter("ID_COMPANIA9", DbType.Decimal, 0, False, ConsumidorIdCompania9)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "ConsumidorSeguridad", "Consumidor_Grid1UpdateCommandActionConsumidor", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Consumidor_Grid1DeleteCommandActionConsumidor(ConsumidorIdConsumidor1 As Decimal, ConsumidorIdCompania2 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                With New DataManagerFactory("DELETE FROM Consumidor WHERE CONSUMIDOR.ID_CONSUMIDOR = @:ID_CONSUMIDOR1 AND CONSUMIDOR.ID_COMPANIA = @:ID_COMPANIA2", "Consumidor", "Linked.Seguridad")
                    .AddParameter("ID_CONSUMIDOR1", DbType.Decimal, 0, False, ConsumidorIdConsumidor1)
                    .AddParameter("ID_COMPANIA2", DbType.Decimal, 0, False, ConsumidorIdCompania2)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "ConsumidorSeguridad", "Consumidor_Grid1DeleteCommandActionConsumidor", String.Empty)
            End Try
            
            Return resultData
        End Function


#End Region

#Region "Lookups Web Methods"


        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForEstado_Registro(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)                       
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                 
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT TRIM(ENUMRECORDSTATUS.RECORDSTATUS) RECORDSTATUS, ETRANRECORDSTATUS.DESCRIPTION FROM ENUMRECORDSTATUS ENUMRECORDSTATUS JOIN ETRANRECORDSTATUS ETRANRECORDSTATUS ON ETRANRECORDSTATUS.RECORDSTATUS = ENUMRECORDSTATUS.RECORDSTATUS WHERE ENUMRECORDSTATUS.RECORDSTATUSCODE = '{0}' AND ETRANRECORDSTATUS.LANGUAGEID = {1} ORDER BY ETranRecordStatus.Description ASC", "1", InMotionGIT.FASI.Support.Handlers.LanguageHandler.ContextLanguageId()), 
                                            "EnumRecordStatus", "Linked.Common")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.StringValue("RecordStatus"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "ConsumidorSeguridad", "LookUpForEstado_Registro", String.Empty)
            End Try
                        
            Return result
        End Function

#End Region

#Region "Form Actions"


#End Region





#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As EntryData)

        End Sub	


#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property ConsumidorCollectionId_Consumidor As System.Double
            <DataMember()> Public Property ConsumidorCollectionId_Compania As System.Double
            <DataMember()> Public Property ConsumidorCollectionCodigo_Secreto As System.String
            <DataMember()> Public Property ConsumidorCollectionNombre_Consumidor As System.String
            <DataMember()> Public Property ConsumidorCollectionIdentificador_Consumidor As System.String
            <DataMember()> Public Property ConsumidorCollectionVida_Token_Acceso As System.Double
            <DataMember()> Public Property ConsumidorCollectionEstado_Registro As System.String
            <DataMember()> Public Property ConsumidorCollectionCreationDate As System.DateTime
            <DataMember()> Public Property ConsumidorCollectionCreatorUserCode As System.Double
            <DataMember()> Public Property ConsumidorCollectionUpdateDate As System.DateTime
            <DataMember()> Public Property ConsumidorCollectionUpdateUserCode As System.Double
            <DataMember()> Public Property Consumidor_Grid_Consumidor_Item As List(Of Consumidor_Grid_Consumidor_ItemItem)

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Consumidor_Grid_Consumidor_ItemItem

            <DataMember()> Public Property Id_Consumidor As System.Double
            <DataMember()> Public Property Id_Compania As System.Double
            <DataMember()> Public Property Codigo_Secreto As System.String
            <DataMember()> Public Property Nombre_Consumidor As System.String
            <DataMember()> Public Property Identificador_Consumidor As System.String
            <DataMember()> Public Property Vida_Token_Acceso As System.Double
            <DataMember()> Public Property Estado_Registro As System.String
            <DataMember()> Public Property CreationDate As System.DateTime
            <DataMember()> Public Property CreatorUserCode As System.Double
            <DataMember()> Public Property UpdateDate As System.DateTime
            <DataMember()> Public Property UpdateUserCode As System.Double

        End Class


#End Region

    End Class

End Namespace

