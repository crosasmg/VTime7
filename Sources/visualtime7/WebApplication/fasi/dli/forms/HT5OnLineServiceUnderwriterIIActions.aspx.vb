'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.1.224.2 at 2019/04/04 01:21:22 PM model release 2, Form Generator v1.0.34.31
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class HT5OnLineServiceUnderwriterIIActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            
            Dim HT5OnLineServiceUnderwriterIIParametersInstance As HT5OnLineServiceUnderwriterIIParameters = Nothing

            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Suscriptor")
                
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                    
                    With instance

                    End With                
                    
                    HT5OnLineServiceUnderwriterIIParametersInstance = EntryDataToClass(HT5OnLineServiceUnderwriterIIParametersInstance, instance)
                    SetDefaultValuesFromQueryString(HT5OnLineServiceUnderwriterIIParametersInstance)
                    
                    If fromid.IsNotEmpty Then
                        GetTransferParameters(HT5OnLineServiceUnderwriterIIParametersInstance, fromid)
                        ValidateParametersInstance(HT5OnLineServiceUnderwriterIIParametersInstance)
                    End If
                Else       
                    instance.InstanceFormId = id.IfEmpty(urlid)
                    HT5OnLineServiceUnderwriterIIParametersInstance = RetrieveFormInformationFromSession(instance.InstanceFormId)
         
                    If IsNothing(HT5OnLineServiceUnderwriterIIParametersInstance) then
                        HT5OnLineServiceUnderwriterIIParametersInstance = EntryDataToClass(HT5OnLineServiceUnderwriterIIParametersInstance, instance)
                        SetDefaultValuesFromQueryString(HT5OnLineServiceUnderwriterIIParametersInstance)
                    End If
                End If

                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = String.Empty

                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    Form_Initialization(currentAction, HT5OnLineServiceUnderwriterIIParametersInstance, resultData)
                End If


                instance = ClassToEntryData(instance, HT5OnLineServiceUnderwriterIIParametersInstance) 
		        StoreFormInformationOnSession(HT5OnLineServiceUnderwriterIIParametersInstance)
                
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "HT5OnLineServiceUnderwriterII", "Initialization", currentAction)
            End Try
            
            Return resultData
        End Function
   
        <WebMethod(EnableSession:=True)>
        Public Shared Function ActionTypeChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5OnLineServiceUnderwriterIIParametersInstance As HT5OnLineServiceUnderwriterIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Suscriptor")
                HT5OnLineServiceUnderwriterIIParametersInstance = RetrieveFormInformationFromSession(instance.InstanceFormId)
         
                    If IsNothing(HT5OnLineServiceUnderwriterIIParametersInstance) then
                        HT5OnLineServiceUnderwriterIIParametersInstance = EntryDataToClass(HT5OnLineServiceUnderwriterIIParametersInstance, instance)
                        SetDefaultValuesFromQueryString(HT5OnLineServiceUnderwriterIIParametersInstance)
                    End If
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("ActionTypeClick")
                HT5OnLineServiceUnderwriterIIParametersInstance = EntryDataToClass(HT5OnLineServiceUnderwriterIIParametersInstance, instance)
                currentAction = SessionTrace("1. If HT5OnLineServiceUnderwriterIIParametersInstance.ActionType = 1 Then")
                If HT5OnLineServiceUnderwriterIIParametersInstance.ActionType = 1 Then

                    currentAction = SessionTrace("3. Call 'Cotizaciones' form with transferring parameters")
                                        HttpContext.Current.Session(HT5OnLineServiceUnderwriterIIParametersInstance.InternalId) = HT5OnLineServiceUnderwriterIIParametersInstance
                    HttpContext.Current.Session("fromid") = HT5OnLineServiceUnderwriterIIParametersInstance.InternalId
    
                With resultData
                    .AddRedirect(String.Format(CultureInfo.InvariantCulture, "{0}/H5CotizacionesTodosLosRamosIconos.aspx?fromid={1}", "/fasi/dli/forms", HT5OnLineServiceUnderwriterIIParametersInstance.InternalId, ""))
                End With
                    End If
                currentAction = SessionTrace("4. If HT5OnLineServiceUnderwriterIIParametersInstance.ActionType = 2 Then")
                If HT5OnLineServiceUnderwriterIIParametersInstance.ActionType = 2 Then

                    currentAction = SessionTrace("6. Url: '#setting.Url.WebApplication#/Underwriting/UnderwritingPanel.aspx'")
                        
                With resultData
                    .AddRedirect(String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") +"/Underwriting/UnderwritingPanel.aspx", ""))
                End With
                        End If
                currentAction = SessionTrace("7. If HT5OnLineServiceUnderwriterIIParametersInstance.ActionType = 3 Then")
                If HT5OnLineServiceUnderwriterIIParametersInstance.ActionType = 3 Then

                    currentAction = SessionTrace("8. zone0.Visible = true, button7.Visible = true, button0.Visible = false")
                    currentAction = SessionTrace("8.1. zone0.Visible = true...")
                    resultData.AddControlBehavior("zone0", "show")
                    currentAction = SessionTrace("8.2. button7.Visible = true...")
                    resultData.AddControlBehavior("button7", "show")
                    currentAction = SessionTrace("8.3. button0.Visible = false...")
                    resultData.AddControlBehavior("button0", "hide")

                            End If

                instance = ClassToEntryData(instance, HT5OnLineServiceUnderwriterIIParametersInstance)
                StoreFormInformationOnSession(HT5OnLineServiceUnderwriterIIParametersInstance)
                
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "HT5OnLineServiceUnderwriterII", "ActionTypeChange", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function button4Click(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5OnLineServiceUnderwriterIIParametersInstance As HT5OnLineServiceUnderwriterIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Suscriptor")
                HT5OnLineServiceUnderwriterIIParametersInstance = RetrieveFormInformationFromSession(instance.InstanceFormId)
         
                    If IsNothing(HT5OnLineServiceUnderwriterIIParametersInstance) then
                        HT5OnLineServiceUnderwriterIIParametersInstance = EntryDataToClass(HT5OnLineServiceUnderwriterIIParametersInstance, instance)
                        SetDefaultValuesFromQueryString(HT5OnLineServiceUnderwriterIIParametersInstance)
                    End If
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("button4Click")
                HT5OnLineServiceUnderwriterIIParametersInstance = EntryDataToClass(HT5OnLineServiceUnderwriterIIParametersInstance, instance)
                currentAction = SessionTrace("1. UnderwritingCaseCollection.Visible = true")
                currentAction = SessionTrace("1.1. UnderwritingCaseCollection.Visible = true...")
                resultData.AddControlBehavior("UnderwritingCaseCollection", "show")

                currentAction = SessionTrace("2. HT5OnLineServiceUnderwriterIIParametersInstance.QuantityOfRecords = 0...")
                currentAction = SessionTrace("2.1. HT5OnLineServiceUnderwriterIIParametersInstance.QuantityOfRecords = 0...")

                HT5OnLineServiceUnderwriterIIParametersInstance.QuantityOfRecords = 0

                currentAction = SessionTrace("3. HT5OnLineServiceUnderwriterIIParametersInstance.FechaFinalBusqueda = DateAdd('d',1,HT5OnLineServiceUnderwriterIIParametersInstance.EndDate)...")
                currentAction = SessionTrace("3.1. HT5OnLineServiceUnderwriterIIParametersInstance.FechaFinalBusqueda = DateAdd('d',1,HT5OnLineServiceUnderwriterIIParametersInstance.EndDate)...")

                HT5OnLineServiceUnderwriterIIParametersInstance.FechaFinalBusqueda = DateAdd("d",1,HT5OnLineServiceUnderwriterIIParametersInstance.EndDate)

                currentAction = SessionTrace("4. 'HT5OnLineServiceUnderwriterIIParametersInstance.UnderwritingCaseCollection' = New 'InMotionGIT.Underwriting.'...'")
                HT5OnLineServiceUnderwriterIIParametersInstance.UnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection

                currentAction = SessionTrace("5. SELECT UnderwritingCase.UnderwritingCaseID, UnderwritingCase.OpenDate, UnderwritingCase.LineOfBusiness FROM UnderwritingCase... WHERE UnderwritingCase.OpenDate >= HT5OnLineServiceUnderwriterIIParametersInstance.StartDate AND UnderwritingCase.OpenDate <= HT5OnLineServiceUnderwriterIIParametersInstance.FechaFinalBusqueda AND UnderwritingCase.Status = 1 OR )")
                isFoundData = False
                       With New DataManagerFactory("SELECT UNDERWRITINGCASE.UNDERWRITINGCASEID, UNDERWRITINGCASE.OPENDATE, UNDERWRITINGCASE.LINEOFBUSINESS, UNDERWRITINGCASE.PRODUCT, UNDERWRITINGCASE.DECISION, UNDERWRITINGCASE.STATUS, ROLEINCASE.ROLE, ROLEINCASE.CLIENTNAME FROM UNDERWRITINGCASE UNDERWRITINGCASE  JOIN ROLEINCASE ROLEINCASE ON ROLEINCASE.UNDERWRITINGCASEID = UNDERWRITINGCASE.UNDERWRITINGCASEID WHERE UNDERWRITINGCASE.OPENDATE >= @:UNDERWRITINGCASEOPENDATE0 AND UNDERWRITINGCASE.OPENDATE <= @:UNDERWRITINGCASEOPENDATE1 AND (UNDERWRITINGCASE.STATUS = 1 OR UNDERWRITINGCASE.STATUS = 2 OR UNDERWRITINGCASE.STATUS = 4 OR UNDERWRITINGCASE.STATUS = 6 OR UNDERWRITINGCASE.STATUS = 7 OR UNDERWRITINGCASE.STATUS = 9) AND (UNDERWRITINGCASE.DECISION = 1 OR UNDERWRITINGCASE.DECISION = 5) AND (ROLEINCASE.ROLE = 1 OR ROLEINCASE.ROLE = 2)", "UnderwritingCase", "Linked.Underwriting")
.AddParameter("UNDERWRITINGCASEOPENDATE0", DbType.DateTime, 7, (HT5OnLineServiceUnderwriterIIParametersInstance.StartDate = Date.MinValue), HT5OnLineServiceUnderwriterIIParametersInstance.StartDate)
.AddParameter("UNDERWRITINGCASEOPENDATE1", DbType.DateTime, 7, (HT5OnLineServiceUnderwriterIIParametersInstance.FechaFinalBusqueda = Date.MinValue), HT5OnLineServiceUnderwriterIIParametersInstance.FechaFinalBusqueda)
 
            selectDataTableItem = .QueryExecuteToTable(True)  
        End With
                With selectDataTableItem
                        If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                            isFoundData = True 
                            HT5OnLineServiceUnderwriterIIParametersInstance.UnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection 
                            Dim newItem As InMotionGIT.Underwriting.Contracts.UnderwritingCase 
                            For Each itemData As DataRow In .Rows
                                 newItem = New InMotionGIT.Underwriting.Contracts.UnderwritingCase
                        newItem.UnderwritingCaseID = itemData.NumericValue("UNDERWRITINGCASEID") 
                        newItem.OpenDate = itemData.DateTimeValue("OPENDATE") 
                        newItem.LineOfBusiness = itemData.NumericValue("LINEOFBUSINESS") 
                        newItem.Product = itemData.NumericValue("PRODUCT") 
                        newItem.Decision = itemData.NumericValue("DECISION") 
                        newItem.Status = itemData.NumericValue("STATUS") 
                        newItem.ReasonDescription = itemData.StringValue("CLIENTNAME") 

                                  HT5OnLineServiceUnderwriterIIParametersInstance.UnderwritingCaseCollection.Add(newItem)
                            Next
                        End If
                End With

                currentAction = SessionTrace("6. If HT5OnLineServiceUnderwriterIIParametersInstance.UnderwritingCaseCollection Is Null Or Empty  Then")
                If IsNothing(HT5OnLineServiceUnderwriterIIParametersInstance.UnderwritingCaseCollection) Then

                    currentAction = SessionTrace("7. label4.Visible = true, UnderwritingCase.Visible = false, zone6.Visible = false")
                    currentAction = SessionTrace("7.1. label4.Visible = true...")
                    resultData.AddControlBehavior("label4", "show")
                    currentAction = SessionTrace("7.2. UnderwritingCase.Visible = false...")
                    resultData.AddControlBehavior("UnderwritingCaseContainer", "hide")
                    currentAction = SessionTrace("7.3. zone6.Visible = false...")
                    resultData.AddControlBehavior("zone6", "hide")

                    Else
                    currentAction = SessionTrace("8. label4.Visible = false, UnderwritingCase.Visible = true, zone6.Visible = true")
                    currentAction = SessionTrace("8.1. label4.Visible = false...")
                    resultData.AddControlBehavior("label4", "hide")
                    currentAction = SessionTrace("8.2. UnderwritingCase.Visible = true...")
                    resultData.AddControlBehavior("UnderwritingCaseContainer", "show")
                    currentAction = SessionTrace("8.3. zone6.Visible = true...")
                    resultData.AddControlBehavior("zone6", "show")

                        End If

                instance = ClassToEntryData(instance, HT5OnLineServiceUnderwriterIIParametersInstance)
                StoreFormInformationOnSession(HT5OnLineServiceUnderwriterIIParametersInstance)
                
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "HT5OnLineServiceUnderwriterII", "button4Click", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function button7Click(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5OnLineServiceUnderwriterIIParametersInstance As HT5OnLineServiceUnderwriterIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Suscriptor")
                HT5OnLineServiceUnderwriterIIParametersInstance = RetrieveFormInformationFromSession(instance.InstanceFormId)
         
                    If IsNothing(HT5OnLineServiceUnderwriterIIParametersInstance) then
                        HT5OnLineServiceUnderwriterIIParametersInstance = EntryDataToClass(HT5OnLineServiceUnderwriterIIParametersInstance, instance)
                        SetDefaultValuesFromQueryString(HT5OnLineServiceUnderwriterIIParametersInstance)
                    End If
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("button7Click")
                HT5OnLineServiceUnderwriterIIParametersInstance = EntryDataToClass(HT5OnLineServiceUnderwriterIIParametersInstance, instance)
                currentAction = SessionTrace("1. If HT5OnLineServiceUnderwriterIIParametersInstance.ActionType = 5 Then")
                If HT5OnLineServiceUnderwriterIIParametersInstance.ActionType = 5 Then

                    currentAction = SessionTrace("2. Call 'Mi Vida vale' form with transferring parameters")
                                        HttpContext.Current.Session(HT5OnLineServiceUnderwriterIIParametersInstance.InternalId) = HT5OnLineServiceUnderwriterIIParametersInstance
                    HttpContext.Current.Session("fromid") = HT5OnLineServiceUnderwriterIIParametersInstance.InternalId
    
                With resultData
                    .AddRedirect(String.Format(CultureInfo.InvariantCulture, "{0}/NNCotizacionMiVidaValeII.aspx?fromid={1}&uwcaseid={2}", "/fasi/dli/forms", HT5OnLineServiceUnderwriterIIParametersInstance.InternalId,HT5OnLineServiceUnderwriterIIParametersInstance.CaseToQuery))
                End With
                    Else
                    currentAction = SessionTrace("3. Url: '#setting.Url.WebApplication#/Underwriting/UnderwritingPanel.aspx' with transferring parameters")
                                        HttpContext.Current.Session(HT5OnLineServiceUnderwriterIIParametersInstance.InternalId) = HT5OnLineServiceUnderwriterIIParametersInstance
                    HttpContext.Current.Session("fromid") = HT5OnLineServiceUnderwriterIIParametersInstance.InternalId
    
                With resultData
                    .AddRedirect(String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") +"/Underwriting/UnderwritingPanel.aspx"+"?uwcaseid={0}",HT5OnLineServiceUnderwriterIIParametersInstance.CaseToQuery))
                End With
                        End If

                instance = ClassToEntryData(instance, HT5OnLineServiceUnderwriterIIParametersInstance)
                StoreFormInformationOnSession(HT5OnLineServiceUnderwriterIIParametersInstance)
                
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "HT5OnLineServiceUnderwriterII", "button7Click", currentAction)
            End Try
            
            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForLineOfBusiness(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
                        
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Suscriptor")
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE10.NBRANCH, TABLE10.SDESCRIPT FROM TABLE10 TABLE10  WHERE  ( TABLE10.SSTATREGT = '{0}' )   AND NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", "1"), 
                                            "TABLE10", "Linked.LatCombined")

                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NBRANCH"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "HT5OnLineServiceUnderwriterII", "LookUpForLineOfBusiness", String.Empty)
            End Try
                        
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForProduct(id As String, UnderwritingCaseCollectionLineOfBusiness As System.Int32) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
                        
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Suscriptor")
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  PRODMASTER.NPRODUCT, PRODMASTER.NBRANCH, PRODMASTER.SDESCRIPT FROM PRODMASTER PRODMASTER  WHERE PRODMASTER.SSTATREGT = '{0}'  AND (PRODMASTER.NBRANCH = @:PRODMASTERNBRANCHDependen)  ORDER BY PRODMASTER.SDESCRIPT ASC", "1"), 
                                            "PRODMASTER", "Linked.LatCombined")
                    .AddParameter("PRODMASTERNBRANCHDependen", DbType.Int32, 0, False, UnderwritingCaseCollectionLineOfBusiness)

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NPRODUCT"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "HT5OnLineServiceUnderwriterII", "LookUpForProduct", String.Empty)
            End Try
                        
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForDecision(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
                        
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Suscriptor")
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TRANSDECISIONTYPE.DECISION, TRANSDECISIONTYPE.LANGUAGEID, TRANSDECISIONTYPE.DESCRIPTION FROM TRANSDECISIONTYPE TRANSDECISIONTYPE  WHERE  TRANSDECISIONTYPE.LANGUAGEID = {0}  ORDER BY TransDecisionType.Description ASC", InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId()), 
                                            "TransDecisionType", "Linked.Underwriting")

                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("Decision"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "HT5OnLineServiceUnderwriterII", "LookUpForDecision", String.Empty)
            End Try
                        
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForStatus(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
                        
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Suscriptor")
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TRANSUNDERWRITINGCASESTYPE.UNDERWRITINGCASESTATUS, TRANSUNDERWRITINGCASESTYPE.LANGUAGEID, TRANSUNDERWRITINGCASESTYPE.DESCRIPTION FROM TRANSUNDERWRITINGCASESTYPE TRANSUNDERWRITINGCASESTYPE    ORDER BY TransUnderwritingCaseSType.Description ASC", ""), 
                                            "TransUnderwritingCaseSType", "Linked.Underwriting")

                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("UnderwritingCaseStatus"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "HT5OnLineServiceUnderwriterII", "LookUpForStatus", String.Empty)
            End Try
                        
            Return result
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForCaseToQuery(formId As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            Dim HT5OnLineServiceUnderwriterIIParametersInstance As HT5OnLineServiceUnderwriterIIParameters = RetrieveFormInformationFromSession(formId)
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Suscriptor")
                
                If Not IsNothing(HT5OnLineServiceUnderwriterIIParametersInstance.UnderwritingCaseCollection) Then
                    For Each item As InMotionGIT.Underwriting.Contracts.UnderwritingCase In HT5OnLineServiceUnderwriterIIParametersInstance.UnderwritingCaseCollection
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.UnderwritingCaseID,
                                                                                            .Description = item.UnderwritingCaseID})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "HT5OnLineServiceUnderwriterII", "LookUpForCaseToQuery", String.Empty)
            End Try
            
            Return result
        End Function

#End Region

#Region "Form Actions"

        Private Shared Sub Form_Initialization(ByRef currentAction As String, ByRef HT5OnLineServiceUnderwriterIIParametersInstance As HT5OnLineServiceUnderwriterIIParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                        HT5OnLineServiceUnderwriterIIParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                                     .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                                     .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                                     .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Initialization")

            currentAction = SessionTrace("1. HT5OnLineServiceUnderwriterIIParametersInstance.DaysToSubstract = -5...")
            currentAction = SessionTrace("1.1. HT5OnLineServiceUnderwriterIIParametersInstance.DaysToSubstract = -5...")

            HT5OnLineServiceUnderwriterIIParametersInstance.DaysToSubstract = -5

            currentAction = SessionTrace("2. HT5OnLineServiceUnderwriterIIParametersInstance.EndDate = Date.Today...")
            currentAction = SessionTrace("2.1. HT5OnLineServiceUnderwriterIIParametersInstance.EndDate = Date.Today...")

            HT5OnLineServiceUnderwriterIIParametersInstance.EndDate = Date.Today

            currentAction = SessionTrace("3. HT5OnLineServiceUnderwriterIIParametersInstance.StartDate = DateAdd('d',HT5OnLineServiceUnderwriterIIParametersInstance.DaysToSubstra...")
            currentAction = SessionTrace("3.1. HT5OnLineServiceUnderwriterIIParametersInstance.StartDate = DateAdd('d',HT5OnLineServiceUnderwriterIIParametersInstance.DaysToSubstra...")

            HT5OnLineServiceUnderwriterIIParametersInstance.StartDate = DateAdd("d",HT5OnLineServiceUnderwriterIIParametersInstance.DaysToSubstract,HT5OnLineServiceUnderwriterIIParametersInstance.EndDate)

            currentAction = SessionTrace("4. HT5OnLineServiceUnderwriterIIParametersInstance.ActionType = 0...")
            currentAction = SessionTrace("4.1. HT5OnLineServiceUnderwriterIIParametersInstance.ActionType = 0...")

            HT5OnLineServiceUnderwriterIIParametersInstance.ActionType = 0

            currentAction = SessionTrace("5. Call Shared Function 'User Profile' without parameters")
            Dim _Client_5579ef4ebe69465ba9d37eb969bc5640 As InMotionGIT.Client.Entity.Contracts.Client
            

      If Not IsNothing(UserInfo) AndAlso Not IsNothing(UserInfo.User) then
         _Client_5579ef4ebe69465ba9d37eb969bc5640 = New InMotionGIT.Client.Entity.Contracts.Client

         With _Client_5579ef4ebe69465ba9d37eb969bc5640
             .ClientID = UserInfo.User.ClientID
             .FirstName = UserInfo.User.FirstName
             .LastName = UserInfo.User.LastName
             .LastName2 = UserInfo.User.SecondLastName
             .BirthDate = UserInfo.User.DateOfBirth
             .LegalName = UserInfo.User.CompanyName
             .GenderEnum = IIf(UserInfo.User.Gender = "Male", InMotionGIT.Common.Contracts.Enumerations.EnumGender.Male, InMotionGIT.Common.Contracts.Enumerations.EnumGender.Female)
             .eMailAddressDefault = UserInfo.User.Email
             .CompleteClientName = .CompleteClientNameValid
         End With

	isNullResult = (IsNothing(_Client_5579ef4ebe69465ba9d37eb969bc5640))
	isFoundData  = Not isNullResult
      End If
    
            HT5OnLineServiceUnderwriterIIParametersInstance.Client = _Client_5579ef4ebe69465ba9d37eb969bc5640

            currentAction = SessionTrace("6. HT5OnLineServiceUnderwriterIIParametersInstance.IsEmployee =UserInfo.IsEmployee()...")
            currentAction = SessionTrace("6.1. HT5OnLineServiceUnderwriterIIParametersInstance.IsEmployee =UserInfo.IsEmployee()...")

            HT5OnLineServiceUnderwriterIIParametersInstance.IsEmployee =UserInfo.IsEmployee()

            currentAction = SessionTrace("7. If HT5OnLineServiceUnderwriterIIParametersInstance.IsEmployee = false Then")
            If HT5OnLineServiceUnderwriterIIParametersInstance.IsEmployee = false Then

                currentAction = SessionTrace("8. The message 'Usted no está autori...' will displayed as 'Splash'")
                ParametersToDictionary(HT5OnLineServiceUnderwriterIIParametersInstance, parametersDictionary)
                messageAction = "Usted no está autorizado para utilizar esta transacción..."
                messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                resultData.AddNotifySplash(messageAction)
                End If

        End Sub

#End Region
#Region "Utilities"

        Private Shared Sub ParametersToDictionary(formData As HT5OnLineServiceUnderwriterIIParameters, ByRef target As Dictionary(Of String, Object))
            If IsNothing(target) Then
                target = New Dictionary(Of String, Object)

                target.Add("UnderwritingCaseCollection", formData.UnderwritingCaseCollection)
                target.Add("StartDate", formData.StartDate)
                target.Add("EndDate", formData.EndDate)
                target.Add("CaseToQuery", formData.CaseToQuery)
                target.Add("ActionType", formData.ActionType)
                target.Add("QuantityOfRecords", formData.QuantityOfRecords)
                target.Add("Client", formData.Client)
                target.Add("IsEmployee", formData.IsEmployee)
                target.Add("DaysToSubstract", formData.DaysToSubstract)
                target.Add("FechaFinalBusqueda", formData.FechaFinalBusqueda)
            Else
                target("UnderwritingCaseCollection") = formData.UnderwritingCaseCollection
                target("StartDate") = formData.StartDate
                target("EndDate") = formData.EndDate
                target("CaseToQuery") = formData.CaseToQuery
                target("ActionType") = formData.ActionType
                target("QuantityOfRecords") = formData.QuantityOfRecords
                target("Client") = formData.Client
                target("IsEmployee") = formData.IsEmployee
                target("DaysToSubstract") = formData.DaysToSubstract
                target("FechaFinalBusqueda") = formData.FechaFinalBusqueda
            End If
        End Sub

        Private Shared Sub GetTransferParameters(parametersData As HT5OnLineServiceUnderwriterIIParameters, fromid As String)
            Dim fromDocumentCache As Object = Nothing

            If Not String.IsNullOrEmpty(fromid) Then
                fromDocumentCache = HttpContext.Current.Session(fromid)
                HttpContext.Current.Session.Remove(fromid)

            Else
                fromDocumentCache = HttpContext.Current.Session(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove("fromid")
            End If

            If Not IsNothing(fromDocumentCache) Then
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UnderwritingCaseCollection", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StartDate", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("EndDate", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CaseToQuery", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ActionType", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QuantityOfRecords", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Client", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsEmployee", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("DaysToSubstract", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FechaFinalBusqueda", fromDocumentCache, parametersData)
            End If
        End Sub

        Private Shared Function SessionTrace(message As String) As String

            If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                Dim tracelog As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath")))

                tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = tracelog
            End If

            Return message
        End Function

#End Region
#Region "Storage Session Methods"

        Private Shared Function RetrieveFormInformationFromSession(id As String) As HT5OnLineServiceUnderwriterIIParameters
            
            Dim source As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.Storage.{0}", id))
            Dim instance As HT5OnLineServiceUnderwriterIIParameters = Nothing

            If Not String.IsNullOrEmpty(source) Then
                instance = Serialize.Deserialize(Of HT5OnLineServiceUnderwriterIIParameters)(source)
            End If
            
            Return instance
        End Function

        Private Shared Sub StoreFormInformationOnSession(instance As HT5OnLineServiceUnderwriterIIParameters)
            
            If Not IsNothing(instance) Then
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.Storage.{0}", instance.InternalId)) = Serialize.Serialize(Of HT5OnLineServiceUnderwriterIIParameters)(instance)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.Title.{0}", instance.InternalId)) = "Auto servicio para suscriptores"
              
                If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso
                   HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then

                    HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.HT5OnLineServiceUnderwriterII", instance.InternalId)) = instance
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track.Parameters")) AndAlso
                   HttpContext.Current.Session("Form.Track.Parameters").ToString.ToLower = "true" Then

                    If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                        InMotionGIT.Common.Helpers.FileHandler.SaveContent(String.Format(CultureInfo.InvariantCulture, "{0}\{1}.HT5OnLineServiceUnderwriterII.txt",
                                                                                         ConfigurationManager.AppSettings("Path.Logs"), instance.InternalId),
                                                                                          HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture,
                                                                                                                     "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))))
                    End If

                    InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of HT5OnLineServiceUnderwriterIIParameters)(instance,
                                                                                                String.Format(CultureInfo.InvariantCulture,
                                                                                                              "{0}\{1}.HT5OnLineServiceUnderwriterII.xml", ConfigurationManager.AppSettings("Path.Logs"), instance.InternalId), True)
                End If			
            End If
            
        End Sub

#End Region


#Region "Contracts Mappers"

        Private Shared Function EntryDataToClass(parametersData As HT5OnLineServiceUnderwriterIIParameters, formData As EntryData) As HT5OnLineServiceUnderwriterIIParameters
            If IsNothing(parametersData) Then
                parametersData = New HT5OnLineServiceUnderwriterIIParameters
            End If

            If IsNothing(parametersData.UnderwritingCaseCollection) Then
                parametersData.UnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection
            End If

            With parametersData
                .InternalId = formData.InstanceFormId
                .ActionType = formData.ActionType
                .StartDate = formData.StartDate
                .EndDate = formData.EndDate

                .CaseToQuery = formData.CaseToQuery
            End With

            Return parametersData
        End Function

        Private Shared Function ClassToEntryData(formData As EntryData, parametersData As HT5OnLineServiceUnderwriterIIParameters) As EntryData
            formData = New EntryData

            With formData
                .InstanceFormId = parametersData.InternalId
                .ActionType = parametersData.ActionType
                .StartDate = parametersData.StartDate
                .EndDate = parametersData.EndDate
                .UnderwritingCase_UnderwritingCase = New List(Of UnderwritingCase_UnderwritingCaseItem)

                If Not IsNothing(parametersData.UnderwritingCaseCollection) Then
                    Dim newItem as UnderwritingCase_UnderwritingCaseItem
                    
                    For Each itemData As InMotionGIT.Underwriting.Contracts.UnderwritingCase In parametersData.UnderwritingCaseCollection
                        newItem = New UnderwritingCase_UnderwritingCaseItem
                        
                        With newItem
                            .UnderwritingCaseID = itemData.UnderwritingCaseID
                            .ReasonDescription = itemData.ReasonDescription
                            .OpenDate = itemData.OpenDate
                            .LineOfBusiness = itemData.LineOfBusiness
                            .Product = itemData.Product
                            .Decision = itemData.Decision
                            .Status = itemData.Status
                            .OpenDate = itemData.OpenDate                        
                        End With
                        
                        .UnderwritingCase_UnderwritingCase.Add(newItem)
                    Next
                End If


                .CaseToQuery = parametersData.CaseToQuery
            End With

            Return formData
        End Function

#End Region

#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As HT5OnLineServiceUnderwriterIIParameters)
            If HttpContext.Current.Request.QueryString("StartDate").IsNotEmpty Then
                formData.StartDate = HttpContext.Current.Request.QueryString("StartDate")
            End If
            If HttpContext.Current.Request.QueryString("EndDate").IsNotEmpty Then
                formData.EndDate = HttpContext.Current.Request.QueryString("EndDate")
            End If
            If HttpContext.Current.Request.QueryString("CaseToQuery").IsNotEmpty Then
                formData.CaseToQuery = HttpContext.Current.Request.QueryString("CaseToQuery")
            End If
            If HttpContext.Current.Request.QueryString("ActionType").IsNotEmpty Then
                formData.ActionType = HttpContext.Current.Request.QueryString("ActionType")
            End If
            If HttpContext.Current.Request.QueryString("QuantityOfRecords").IsNotEmpty Then
                formData.QuantityOfRecords = HttpContext.Current.Request.QueryString("QuantityOfRecords")
            End If
            If HttpContext.Current.Request.QueryString("IsEmployee").IsNotEmpty Then
                formData.IsEmployee = HttpContext.Current.Request.QueryString("IsEmployee")
            End If
            If HttpContext.Current.Request.QueryString("DaysToSubstract").IsNotEmpty Then
                formData.DaysToSubstract = HttpContext.Current.Request.QueryString("DaysToSubstract")
            End If
            If HttpContext.Current.Request.QueryString("FechaFinalBusqueda").IsNotEmpty Then
                formData.FechaFinalBusqueda = HttpContext.Current.Request.QueryString("FechaFinalBusqueda")
            End If
        End Sub	

        Private Shared Sub ValidateParametersInstance(ByRef formData As HT5OnLineServiceUnderwriterIIParameters)
            If IsNothing(formData.UnderwritingCaseCollection) Then
                formData.UnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection
            End If

        End Sub

#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property ActionType As Int32
            <DataMember()> Public Property StartDate As DateTime
            <DataMember()> Public Property EndDate As DateTime
            <DataMember()> Public Property UnderwritingCaseCollectionUnderwritingCaseID As System.Int64
            <DataMember()> Public Property UnderwritingCaseCollectionReasonDescription As System.String
            <DataMember()> Public Property UnderwritingCaseCollectionOpenDate As System.DateTime
            <DataMember()> Public Property UnderwritingCaseCollectionLineOfBusiness As System.Int32
            <DataMember()> Public Property UnderwritingCaseCollectionProduct As System.Int32
            <DataMember()> Public Property UnderwritingCaseCollectionDecision As System.Int32
            <DataMember()> Public Property UnderwritingCaseCollectionStatus As System.Int32
            <DataMember()> Public Property UnderwritingCase_UnderwritingCase As List(Of UnderwritingCase_UnderwritingCaseItem)
            <DataMember()> Public Property CaseToQuery As Int64

        End Class

        <Serializable()>
        <DataContract()>
        Public Class UnderwritingCase_UnderwritingCaseItem

            <DataMember()> Public Property UnderwritingCaseID As System.Int64
            <DataMember()> Public Property ReasonDescription As System.String
            <DataMember()> Public Property OpenDate As System.DateTime
            <DataMember()> Public Property LineOfBusiness As System.Int32
            <DataMember()> Public Property Product As System.Int32
            <DataMember()> Public Property Decision As System.Int32
            <DataMember()> Public Property Status As System.Int32

        End Class

        <Serializable()>
        Public Class HT5OnLineServiceUnderwriterIIParameters
            Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of HT5OnLineServiceUnderwriterIIParameters)

            Public Property UnderwritingCaseCollection As InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection
            Public Property StartDate As DateTime
            Public Property EndDate As DateTime
            Public Property CaseToQuery As Int64
            Public Property ActionType As Int32
            Public Property QuantityOfRecords As Int32
            Public Property Client As InMotionGIT.Client.Entity.Contracts.Client
            Public Property IsEmployee As Boolean
            Public Property DaysToSubstract As Int32
            Public Property FechaFinalBusqueda As DateTime

        End Class
#End Region

    End Class

End Namespace