'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.3.34.1 at 2020-01-17 02:46:14 p. m. model release 8, Form Generator v1.0.37.30
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class MedicalHistoryUWActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing

            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                    
                    With instance
                        .MedicalHistoryMilitaryService = "True"
                        .MedicalHistoryNeverUsed = True
                    End With                
                    
                    MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                    SetDefaultValuesFromQueryString(MedicalHistoryUWParametersInstance)
                    
                    If fromid.IsNotEmpty Then
                        GetTransferParameters(MedicalHistoryUWParametersInstance, fromid)
                        ValidateParametersInstance(MedicalHistoryUWParametersInstance)
                    End If
                Else       
                    instance.InstanceFormId = id.IfEmpty(urlid)
                    MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
    
                    If IsNothing(MedicalHistoryUWParametersInstance) then
                        MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)                        
                    End If
                    
                    SetDefaultValuesFromQueryString(MedicalHistoryUWParametersInstance)
                End If

                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = String.Empty

                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    Form_Initialization(currentAction, MedicalHistoryUWParametersInstance, resultData)
                End If


                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance) 
		        
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                                
                With resultData
                    .Success = True
                    .Data = New With {.Instance = instance, .LookUps = Nothing}
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "Initialization", currentAction)
            End Try
            
            Return resultData
        End Function
  

        <WebMethod(EnableSession:=True)>
        Public Shared Function HaveAPersonalPhysicianChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("HaveAPersonalPhysicianClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. If MedicalHistoryUWParametersInstance.MedicalHistory.HaveAPersonalPhysician = true Then")
                If MedicalHistoryUWParametersInstance.MedicalHistory.HaveAPersonalPhysician = true Then

                    currentAction = SessionTrace("2. Enable 'zone' control")
                    resultData.AddControlBehavior("zone6", "enabled")

                    currentAction = SessionTrace("3. Enable 'Phone Number' control")
                    resultData.AddControlBehavior("PhoneNumber", "enabled")

                    Else
                    currentAction = SessionTrace("4. Disable 'zone' control")
                    resultData.AddControlBehavior("zone6", "disabled")

                    currentAction = SessionTrace("5. MedicalHistoryUWParametersInstance.MedicalHistory.PhysicianFirstName = ''...")
                    currentAction = SessionTrace("5.1. MedicalHistoryUWParametersInstance.MedicalHistory.PhysicianFirstName = ''...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.PhysicianFirstName = ""
                    currentAction = SessionTrace("5.2. MedicalHistoryUWParametersInstance.MedicalHistory.PhysicianLastName = ''...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.PhysicianLastName = ""
                    currentAction = SessionTrace("5.3. MedicalHistoryUWParametersInstance.MedicalHistory.Address = ''...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.Address = ""
                    currentAction = SessionTrace("5.4. MedicalHistoryUWParametersInstance.MedicalHistory.City = ''...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.City = ""
                    currentAction = SessionTrace("5.5. MedicalHistoryUWParametersInstance.MedicalHistory.State = ''...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.State = ""
                    currentAction = SessionTrace("5.6. MedicalHistoryUWParametersInstance.MedicalHistory.Zip = ''...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.Zip = ""

                    currentAction = SessionTrace("6. Disable 'Phone Number' control")
                    resultData.AddControlBehavior("PhoneNumber", "disabled")

                        End If

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "HaveAPersonalPhysicianChange", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function CurrentlyPregnantChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("CurrentlyPregnantClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. If MedicalHistoryUWParametersInstance.MedicalHistory.CurrentlyPregnant = true Then")
                If MedicalHistoryUWParametersInstance.MedicalHistory.CurrentlyPregnant = true Then

                    currentAction = SessionTrace("2. Enable 'Fecha programada para el parto' control")
                    resultData.AddControlBehavior("DatePregnant", "enabled")

                    Else
                    currentAction = SessionTrace("3. Disable 'Fecha programada para el parto' control")
                    resultData.AddControlBehavior("DatePregnant", "disabled")

                    currentAction = SessionTrace("4. MedicalHistoryUWParametersInstance.MedicalHistory.DatePregnant = date.minvalue...")
                    currentAction = SessionTrace("4.1. MedicalHistoryUWParametersInstance.MedicalHistory.DatePregnant = date.minvalue...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.DatePregnant = date.minvalue

                        End If

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "CurrentlyPregnantChange", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function HaveBeenWightChangeChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("HaveBeenWightChangeClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. If MedicalHistoryUWParametersInstance.MedicalHistory.HaveBeenWightChange = True Then")
                If MedicalHistoryUWParametersInstance.MedicalHistory.HaveBeenWightChange = True Then

                    currentAction = SessionTrace("2. Enable 'If Yes, what was your weight 12 months ago?' control")
                    resultData.AddControlBehavior("WeightTwelveMonthsAgo", "enabled")

                    currentAction = SessionTrace("3. Enable 'Peso actual' control")
                    resultData.AddControlBehavior("PresentWeight", "enabled")

                    currentAction = SessionTrace("4. Enable 'Causa del cambio de peso' control")
                    resultData.AddControlBehavior("ReasonForWeightChange", "enabled")

                    Else
                    currentAction = SessionTrace("5. Disable 'If Yes, what was your weight 12 months ago?' control")
                    resultData.AddControlBehavior("WeightTwelveMonthsAgo", "disabled")

                    currentAction = SessionTrace("6. Disable 'Peso actual' control")
                    resultData.AddControlBehavior("PresentWeight", "disabled")

                    currentAction = SessionTrace("7. Disable 'Causa del cambio de peso' control")
                    resultData.AddControlBehavior("ReasonForWeightChange", "disabled")

                    currentAction = SessionTrace("8. MedicalHistoryUWParametersInstance.MedicalHistory.WeightTwelveMonthsAgo = 0...")
                    currentAction = SessionTrace("8.1. MedicalHistoryUWParametersInstance.MedicalHistory.WeightTwelveMonthsAgo = 0...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.WeightTwelveMonthsAgo = 0
                    currentAction = SessionTrace("8.2. MedicalHistoryUWParametersInstance.MedicalHistory.PresentWeight = 0...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.PresentWeight = 0
                    currentAction = SessionTrace("8.3. MedicalHistoryUWParametersInstance.MedicalHistory.ReasonForWeightChange = 0...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.ReasonForWeightChange = 0

                        End If

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "HaveBeenWightChangeChange", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function UsedPrescriptionDrugsChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("UsedPrescriptionDrugsClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. If MedicalHistoryUWParametersInstance.MedicalHistory.UsedPrescriptionDrugs = true Then")
                If MedicalHistoryUWParametersInstance.MedicalHistory.UsedPrescriptionDrugs = true Then

                    currentAction = SessionTrace("2. Enable 'If Yes, give name, form, amount, frequency and length of use, and date last used,' control")
                    resultData.AddControlBehavior("DetailsUsePrescriptionDrugs", "enabled")

                    Else
                    currentAction = SessionTrace("3. Disable 'If Yes, give name, form, amount, frequency and length of use, and date last used,' control")
                    resultData.AddControlBehavior("DetailsUsePrescriptionDrugs", "disabled")

                        End If

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "UsedPrescriptionDrugsChange", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function NeverUsedChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("NeverUsedClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. If MedicalHistoryUWParametersInstance.MedicalHistory.NeverUsed = true Then")
                If MedicalHistoryUWParametersInstance.MedicalHistory.NeverUsed = true Then

                    currentAction = SessionTrace("2. MedicalHistoryUWParametersInstance.MedicalHistory.Cigarettes = False...")
                    currentAction = SessionTrace("2.1. MedicalHistoryUWParametersInstance.MedicalHistory.Cigarettes = False...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.Cigarettes = False
                    currentAction = SessionTrace("2.2. MedicalHistoryUWParametersInstance.MedicalHistory.DateCigarettes = date.minvalue...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.DateCigarettes = date.minvalue
                    currentAction = SessionTrace("2.3. MedicalHistoryUWParametersInstance.MedicalHistory.NumberPacksDaily = 0...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.NumberPacksDaily = 0

                    currentAction = SessionTrace("3. Disable 'Cigarrillos' control")
                    resultData.AddControlBehavior("Cigarettes", "disabled")

                    currentAction = SessionTrace("4. Disable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateCigarettes", "disabled")

                    currentAction = SessionTrace("5. Disable 'Cantidad de paquetes diarios' control")
                    resultData.AddControlBehavior("NumberPacksDaily", "disabled")

                    currentAction = SessionTrace("6. MedicalHistoryUWParametersInstance.MedicalHistory.Pipe = False...")
                    currentAction = SessionTrace("6.1. MedicalHistoryUWParametersInstance.MedicalHistory.Pipe = False...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.Pipe = False
                    currentAction = SessionTrace("6.2. MedicalHistoryUWParametersInstance.MedicalHistory.DatePipe = Date.Minvalue...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.DatePipe = Date.Minvalue

                    currentAction = SessionTrace("7. Disable 'Pipa' control")
                    resultData.AddControlBehavior("Pipe", "disabled")

                    currentAction = SessionTrace("8. Disable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DatePipe", "disabled")

                    currentAction = SessionTrace("9. MedicalHistoryUWParametersInstance.MedicalHistory.Cigar = False...")
                    currentAction = SessionTrace("9.1. MedicalHistoryUWParametersInstance.MedicalHistory.Cigar = False...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.Cigar = False
                    currentAction = SessionTrace("9.2. MedicalHistoryUWParametersInstance.MedicalHistory.DateCigar = date.minvalue...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.DateCigar = date.minvalue

                    currentAction = SessionTrace("10. Disable 'Puro' control")
                    resultData.AddControlBehavior("Cigar", "disabled")

                    currentAction = SessionTrace("11. Disable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateCigar", "disabled")

                    currentAction = SessionTrace("12. MedicalHistoryUWParametersInstance.MedicalHistory.NicotinePatch = False...")
                    currentAction = SessionTrace("12.1. MedicalHistoryUWParametersInstance.MedicalHistory.NicotinePatch = False...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.NicotinePatch = False
                    currentAction = SessionTrace("12.2. MedicalHistoryUWParametersInstance.MedicalHistory.DateNicotinePatch = date.minvalue...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.DateNicotinePatch = date.minvalue

                    currentAction = SessionTrace("13. Disable 'Parche de nicotina' control")
                    resultData.AddControlBehavior("NicotinePatch", "disabled")

                    currentAction = SessionTrace("14. Disable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateNicotineGum", "disabled")

                    currentAction = SessionTrace("15. MedicalHistoryUWParametersInstance.MedicalHistory.NicotineGum = False...")
                    currentAction = SessionTrace("15.1. MedicalHistoryUWParametersInstance.MedicalHistory.NicotineGum = False...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.NicotineGum = False
                    currentAction = SessionTrace("15.2. MedicalHistoryUWParametersInstance.MedicalHistory.DateNicotineGum = date.minvalue...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.DateNicotineGum = date.minvalue

                    currentAction = SessionTrace("16. Disable 'Chicle de nicotina' control")
                    resultData.AddControlBehavior("NicotineGum", "disabled")

                    currentAction = SessionTrace("17. Disable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateNicotineGum", "disabled")

                    currentAction = SessionTrace("18. MedicalHistoryUWParametersInstance.MedicalHistory.ChewingTobacco = False...")
                    currentAction = SessionTrace("18.1. MedicalHistoryUWParametersInstance.MedicalHistory.ChewingTobacco = False...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.ChewingTobacco = False
                    currentAction = SessionTrace("18.2. MedicalHistoryUWParametersInstance.MedicalHistory.DateChewingTobacco = date.minvalue...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.DateChewingTobacco = date.minvalue

                    currentAction = SessionTrace("19. Disable 'Tabaco de mascar' control")
                    resultData.AddControlBehavior("ChewingTobacco", "disabled")

                    currentAction = SessionTrace("20. Disable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateChewingTobacco", "disabled")

                    currentAction = SessionTrace("21. MedicalHistoryUWParametersInstance.MedicalHistory.OtherTobacco = False...")
                    currentAction = SessionTrace("21.1. MedicalHistoryUWParametersInstance.MedicalHistory.OtherTobacco = False...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.OtherTobacco = False
                    currentAction = SessionTrace("21.2. MedicalHistoryUWParametersInstance.MedicalHistory.DateOtherTobacco = date.minvalue...")
                                    If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

                    MedicalHistoryUWParametersInstance.MedicalHistory.DateOtherTobacco = date.minvalue

                    currentAction = SessionTrace("22. Disable 'Otro' control")
                    resultData.AddControlBehavior("OtherTobacco", "disabled")

                    currentAction = SessionTrace("23. Disable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateOtherTobacco", "disabled")

                    Else
                    currentAction = SessionTrace("24. Enable 'Cigarrillos' control")
                    resultData.AddControlBehavior("Cigarettes", "enabled")

                    currentAction = SessionTrace("25. Enable 'Pipa' control")
                    resultData.AddControlBehavior("Pipe", "enabled")

                    currentAction = SessionTrace("26. Enable 'Puro' control")
                    resultData.AddControlBehavior("Cigar", "enabled")

                    currentAction = SessionTrace("27. Enable 'Parche de nicotina' control")
                    resultData.AddControlBehavior("NicotinePatch", "enabled")

                    currentAction = SessionTrace("28. Enable 'Chicle de nicotina' control")
                    resultData.AddControlBehavior("NicotineGum", "enabled")

                    currentAction = SessionTrace("29. Enable 'Tabaco de mascar' control")
                    resultData.AddControlBehavior("ChewingTobacco", "enabled")

                    currentAction = SessionTrace("30. Enable 'Otro' control")
                    resultData.AddControlBehavior("OtherTobacco", "enabled")

                        End If

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "NeverUsedChange", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function CigarettesChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("CigarettesClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. If MedicalHistoryUWParametersInstance.MedicalHistory.Cigarettes = True Then")
                If MedicalHistoryUWParametersInstance.MedicalHistory.Cigarettes = True Then

                    currentAction = SessionTrace("2. Enable 'Date Cigarettes' control")
                    resultData.AddControlBehavior("DateCigarettes", "enabled")

                    currentAction = SessionTrace("3. Enable 'Number of packs per day' control")
                    resultData.AddControlBehavior("NumberPacksDaily", "enabled")

                    Else
                    currentAction = SessionTrace("4. Disable 'Date Cigar' control")
                    resultData.AddControlBehavior("DateCigar", "disabled")

                    currentAction = SessionTrace("5. Disable 'Number of packs per day' control")
                    resultData.AddControlBehavior("NumberPacksDaily", "disabled")

                        End If

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "CigarettesChange", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function PipeChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("PipeClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. If MedicalHistoryUWParametersInstance.MedicalHistory.Pipe = true Then")
                If MedicalHistoryUWParametersInstance.MedicalHistory.Pipe = true Then

                    currentAction = SessionTrace("2. Enable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DatePipe", "enabled")

                    Else
                    currentAction = SessionTrace("3. Disable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DatePipe", "disabled")

                        End If

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "PipeChange", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function CigarChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("CigarClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. If MedicalHistoryUWParametersInstance.MedicalHistory.Cigar = True Then")
                If MedicalHistoryUWParametersInstance.MedicalHistory.Cigar = True Then

                    currentAction = SessionTrace("2. Enable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateCigar", "enabled")

                    Else
                    currentAction = SessionTrace("3. Disable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DatePipe", "disabled")

                        End If

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "CigarChange", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function NicotinePatchChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("NicotinePatchClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. If MedicalHistoryUWParametersInstance.MedicalHistory.NicotinePatch = true Then")
                If MedicalHistoryUWParametersInstance.MedicalHistory.NicotinePatch = true Then

                    currentAction = SessionTrace("2. Enable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateNicotinePatch", "enabled")

                    Else
                    currentAction = SessionTrace("3. Disable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateNicotinePatch", "disabled")

                        End If

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "NicotinePatchChange", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function NicotineGumChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("NicotineGumClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. If MedicalHistoryUWParametersInstance.MedicalHistory.NicotineGum = true Then")
                If MedicalHistoryUWParametersInstance.MedicalHistory.NicotineGum = true Then

                    currentAction = SessionTrace("2. Enable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateNicotineGum", "enabled")

                    Else
                    currentAction = SessionTrace("3. Disable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateNicotineGum", "disabled")

                        End If

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "NicotineGumChange", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function ChewingTobaccoChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("ChewingTobaccoClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. If MedicalHistoryUWParametersInstance.MedicalHistory.ChewingTobacco = True Then")
                If MedicalHistoryUWParametersInstance.MedicalHistory.ChewingTobacco = True Then

                    currentAction = SessionTrace("2. Enable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateChewingTobacco", "enabled")

                    Else
                    currentAction = SessionTrace("3. Disable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateChewingTobacco", "disabled")

                        End If

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "ChewingTobaccoChange", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function OtherTobaccoChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("OtherTobaccoClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. If MedicalHistoryUWParametersInstance.MedicalHistory.OtherTobacco = true Then")
                If MedicalHistoryUWParametersInstance.MedicalHistory.OtherTobacco = true Then

                    currentAction = SessionTrace("2. Enable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateOtherTobacco", "enabled")

                    Else
                    currentAction = SessionTrace("3. Disable 'Fecha de último consumo' control")
                    resultData.AddControlBehavior("DateOtherTobacco", "disabled")

                        End If

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "OtherTobaccoChange", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function SaveDraftClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("SaveDraftClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. The message 'El cuestionario será...' will displayed as 'Splash'")
                ParametersToDictionary(MedicalHistoryUWParametersInstance, parametersDictionary)
                messageAction = "El cuestionario será almacenado temporalmente. Recuerde que debe ser llenado para que su solicitud sea procesada. Muchas gracias."
                messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                resultData.AddNotifySplash(messageAction)

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "SaveDraftClick", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function SubmitClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                MedicalHistoryUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("SubmitClick")
                MedicalHistoryUWParametersInstance = EntryDataToClass(MedicalHistoryUWParametersInstance, instance)
                currentAction = SessionTrace("1. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", MedicalHistoryUWParametersInstance.uwcaseid)
                .Add("uwreqid", MedicalHistoryUWParametersInstance.uwreqid)
                .Add("ClientName", MedicalHistoryUWParametersInstance.ClientName)
                .Add("StatusCase", MedicalHistoryUWParametersInstance.StatusCase)
                .Add("StatusRequirement", MedicalHistoryUWParametersInstance.StatusRequirement)
                .Add("RiskInformation", MedicalHistoryUWParametersInstance.RiskInformation)
                .Add("Identifier", "Medical")
                .Add("context", formContext)
                .Add("caseLocked", MedicalHistoryUWParametersInstance.caseLocked)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 11, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, MedicalHistoryUWParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                MedicalHistoryUWParametersInstance.uwcaseid = WorkflowOutArguments("uwcaseid")
                MedicalHistoryUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                MedicalHistoryUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
                MedicalHistoryUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                MedicalHistoryUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                MedicalHistoryUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("2. If MedicalHistoryUWParametersInstance.StatusRequirement <> 1 OR MedicalHistoryUWParametersInstance.StatusCase > 2 Then")
                If MedicalHistoryUWParametersInstance.StatusRequirement <> 1 OrElse MedicalHistoryUWParametersInstance.StatusCase > 2 Then

                    currentAction = SessionTrace("3. The message 'El estado del requer...' will displayed as 'Splash'")
                    ParametersToDictionary(MedicalHistoryUWParametersInstance, parametersDictionary)
                    messageAction = "El estado del requerimiento no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros."
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifySplash(messageAction)
                    Else
                    currentAction = SessionTrace("4. MedicalHistoryUWParametersInstance.UsercodeFASI = UserInfo.UserId...")
                    currentAction = SessionTrace("4.1. MedicalHistoryUWParametersInstance.UsercodeFASI = UserInfo.UserId...")

                    MedicalHistoryUWParametersInstance.UsercodeFASI = UserInfo.UserId
                    currentAction = SessionTrace("4.2. MedicalHistoryUWParametersInstance.IsAnonymous = UserInfo.IsAnonymous()...")

                    MedicalHistoryUWParametersInstance.IsAnonymous = UserInfo.IsAnonymous()

                    currentAction = SessionTrace("5. If MedicalHistoryUWParametersInstance.IsAnonymous = true Then")
                    If MedicalHistoryUWParametersInstance.IsAnonymous = true Then

                        currentAction = SessionTrace("6. MedicalHistoryUWParametersInstance.UsercodeFASI = 9998...")
                        currentAction = SessionTrace("6.1. MedicalHistoryUWParametersInstance.UsercodeFASI = 9998...")

                        MedicalHistoryUWParametersInstance.UsercodeFASI = 9998

                                End If
                    currentAction = SessionTrace("7. If MedicalHistoryUWParametersInstance.caseLocked = true Then")
                    If MedicalHistoryUWParametersInstance.caseLocked = true Then

                        currentAction = SessionTrace("8. Call 'Main Process Questionnaire Medical History' workflow in Synchronous mode with tracking")
                        WorkflowInArguments = New Dictionary(Of String, Object)

                        With WorkflowInArguments
                        .Add("uwcaseid", MedicalHistoryUWParametersInstance.uwcaseid)
                        .Add("uwreqid", MedicalHistoryUWParametersInstance.uwreqid)
                        .Add("context", formContext)
                        .Add("caseLocked", MedicalHistoryUWParametersInstance.caseLocked)
                        .Add("UsercodeFASI", MedicalHistoryUWParametersInstance.UsercodeFASI)
                        End With

                        WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireMedicalHistoryUW", "86DF3496-C99D-4A24-ACED-09418B795908", 8, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, MedicalHistoryUWParametersInstance.InternalId)

                        currentAction += "'Mapping Outputs'"
                        MedicalHistoryUWParametersInstance.uwcaseid = WorkflowOutArguments("uwcaseid")
                        MedicalHistoryUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")

                        currentAction = SessionTrace("9. Url: '#setting.Url.WebApplication#/Underwriting/UnderwritingPanel.aspx'")
                            
                With resultData
                    .AddRedirect(String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") +"/Underwriting/UnderwritingPanel.aspx"+"?closeWindow={0}","1"))
                End With
                                    Else
                        currentAction = SessionTrace("10. The message 'Muchas gracias....' will displayed as 'Splash'")
                        ParametersToDictionary(MedicalHistoryUWParametersInstance, parametersDictionary)
                        messageAction = "Muchas gracias."
                        messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                        resultData.AddNotifySplash(messageAction)
                        currentAction = SessionTrace("11. Call 'Main Process Questionnaire Medical History' workflow in Asynchronous mode with tracking")
                        WorkflowInArguments = New Dictionary(Of String, Object)

                        With WorkflowInArguments
                        .Add("uwcaseid", MedicalHistoryUWParametersInstance.uwcaseid)
                        .Add("uwreqid", MedicalHistoryUWParametersInstance.uwreqid)
                        .Add("context", formContext)
                        .Add("caseLocked", MedicalHistoryUWParametersInstance.caseLocked)
                        .Add("UsercodeFASI", MedicalHistoryUWParametersInstance.UsercodeFASI)
                        End With

                        WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireMedicalHistoryUW", "86DF3496-C99D-4A24-ACED-09418B795908", 8, WorkflowInArguments, True, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath, MedicalHistoryUWParametersInstance.InternalId)


                                        End If
                                    End If

                instance = ClassToEntryData(instance, MedicalHistoryUWParametersInstance)
                
                StoreFormInformation(MedicalHistoryUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "MedicalHistoryUW", "SubmitClick", currentAction)
            End Try
            
            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


#End Region

#Region "Form Actions"

        Private Shared Sub Form_Initialization(ByRef currentAction As String, ByRef MedicalHistoryUWParametersInstance As MedicalHistoryUWParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            
            Dim formContext As New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                        MedicalHistoryUWParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                                     .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                                     .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                                     .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Initialization")

            currentAction = SessionTrace("1. MedicalHistoryUWParametersInstance.MedicalHistory.DateQuestionnaire = Date.Today...")
            currentAction = SessionTrace("1.1. MedicalHistoryUWParametersInstance.MedicalHistory.DateQuestionnaire = Date.Today...")
                            If IsNothing(MedicalHistoryUWParametersInstance.MedicalHistory) Then
                    MedicalHistoryUWParametersInstance.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
                End If

            MedicalHistoryUWParametersInstance.MedicalHistory.DateQuestionnaire = Date.Today

            currentAction = SessionTrace("2. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
            WorkflowInArguments = New Dictionary(Of String, Object)

            With WorkflowInArguments
            .Add("uwcaseid", MedicalHistoryUWParametersInstance.uwcaseid)
            .Add("uwreqid", MedicalHistoryUWParametersInstance.uwreqid)
            .Add("ClientName", MedicalHistoryUWParametersInstance.ClientName)
            .Add("StatusCase", MedicalHistoryUWParametersInstance.StatusCase)
            .Add("StatusRequirement", MedicalHistoryUWParametersInstance.StatusRequirement)
            .Add("RiskInformation", MedicalHistoryUWParametersInstance.RiskInformation)
            .Add("Identifier", "Medical")
            .Add("context", formContext)
            .Add("caseLocked", MedicalHistoryUWParametersInstance.caseLocked)
            End With

            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 11, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, MedicalHistoryUWParametersInstance.InternalId)

            currentAction += "'Mapping Outputs'"
            MedicalHistoryUWParametersInstance.uwcaseid = WorkflowOutArguments("uwcaseid")
            MedicalHistoryUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
            MedicalHistoryUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
            MedicalHistoryUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
            MedicalHistoryUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
            MedicalHistoryUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

            currentAction = SessionTrace("3. If MedicalHistoryUWParametersInstance.StatusRequirement <> 1 OR MedicalHistoryUWParametersInstance.StatusCase > 2 Then")
            If MedicalHistoryUWParametersInstance.StatusRequirement <> 1 OrElse MedicalHistoryUWParametersInstance.StatusCase > 2 Then

                currentAction = SessionTrace("4. The message 'El estado del requer...' will displayed as 'Splash'")
                ParametersToDictionary(MedicalHistoryUWParametersInstance, parametersDictionary)
                messageAction = "El estado del requerimiento no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros."
                messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                resultData.AddNotifySplash(messageAction)
                End If

            
        End Sub

#End Region
#Region "Utilities"

        Private Shared Sub ParametersToDictionary(formData As MedicalHistoryUWParameters, ByRef target As Dictionary(Of String, Object))
            If IsNothing(target) Then
                target = New Dictionary(Of String, Object)

                target.Add("MedicalHistory", formData.MedicalHistory)
                target.Add("ClientName", formData.ClientName)
                target.Add("uwcaseid", formData.uwcaseid)
                target.Add("uwreqid", formData.uwreqid)
                target.Add("StatusCase", formData.StatusCase)
                target.Add("StatusRequirement", formData.StatusRequirement)
                target.Add("RiskInformation", formData.RiskInformation)
                target.Add("caseLocked", formData.caseLocked)
                target.Add("IsAnonymous", formData.IsAnonymous)
                target.Add("UsercodeFASI", formData.UsercodeFASI)
            Else
                target("MedicalHistory") = formData.MedicalHistory
                target("ClientName") = formData.ClientName
                target("uwcaseid") = formData.uwcaseid
                target("uwreqid") = formData.uwreqid
                target("StatusCase") = formData.StatusCase
                target("StatusRequirement") = formData.StatusRequirement
                target("RiskInformation") = formData.RiskInformation
                target("caseLocked") = formData.caseLocked
                target("IsAnonymous") = formData.IsAnonymous
                target("UsercodeFASI") = formData.UsercodeFASI
            End If
        End Sub

        Private Shared Sub GetTransferParameters(parametersData As MedicalHistoryUWParameters, fromid As String)
            Dim fromDocumentCache As Object = Nothing

            If Not String.IsNullOrEmpty(fromid) Then
                fromDocumentCache = HttpContext.Current.Session(fromid)
                HttpContext.Current.Session.Remove(fromid)

            Else
                fromDocumentCache = HttpContext.Current.Session(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove("fromid")
            End If

            If Not IsNothing(fromDocumentCache) Then
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MedicalHistory", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientName", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusCase", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRequirement", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("caseLocked", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsAnonymous", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeFASI", fromDocumentCache, parametersData)
            End If
        End Sub

        Private Shared Function SessionTrace(message As String) As String

            If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                Dim tracelog As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath")))

                tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = tracelog
            End If

            Return message
        End Function

#End Region


#Region "Storage Database Methods"

      Private Shared Sub StoreFormInformation(formData As MedicalHistoryUWParameters)
            If Not IsNothing(formData) Then
                Dim foundData As Boolean

                If formData.InternalId.IsEmpty Then
                    formData.InternalId = Guid.NewGuid.ToString
                Else
                    With New DataManagerFactory("SELECT COUNT(FormId) FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                 "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                        .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                        foundData = .QueryExecuteScalarToInteger > 0
                    End With
                End If

                If foundData Then
                    UpdateStorageData(formData)
                Else
                    InsertStorageData(formData)
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso
                    HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                    HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.MedicalHistoryUW", formData.InternalId)) = formData
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track.Parameters")) AndAlso
                    HttpContext.Current.Session("Form.Track.Parameters").ToString.ToLower = "true" Then

                    If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                        InMotionGIT.Common.Helpers.FileHandler.SaveContent(String.Format(CultureInfo.InvariantCulture, 
                                                                                         "{0}\{1}.MedicalHistoryUW.txt", ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), 
                                                                                         HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", 
                                                                                                                                   IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))))
                    End If

                    InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of MedicalHistoryUWParameters)(formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.MedicalHistoryUW.xml", 
                                                                                                                        ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
                End If
            End If
        End Sub

        Private Shared Function RetrieveFormInformationFromDatabase(instanceFormId As String) As MedicalHistoryUWParameters
            Dim result As MedicalHistoryUWParameters = Nothing
            Dim records As DataTable = Nothing

            With New DataManagerFactory("SELECT Content FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, instanceFormId)
                records = .QueryExecuteToTable(True)
            End With

            If records.Rows.Count > 0 Then
                result = Serialize.Deserialize(Of MedicalHistoryUWParameters)(records.FirstRow.Item("Content"))
            End If

            Return result
        End Function

        Private Shared Sub InsertStorageData(formData As MedicalHistoryUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("INSERT INTO FrontOffice.DocumentCache (FormId, ModelId, UserId, Page, Content, CreationDate, UpdateDate) VALUES(@:FormId, @:ModelId, @:UserId, @:Page, @:Content, @:CreationDate, @:UpdateDate)",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "4A65EA6E-47D2-4D40-85AF-C69C647B0E6E")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of MedicalHistoryUWParameters)(formData))
            .AddParameter("CreationDate", DbType.DateTime, 20, False, Now)
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)

                .CommandExecute()
            End With
        End Sub

        Private Shared Sub UpdateStorageData(formData As MedicalHistoryUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("UPDATE FrontOffice.DocumentCache SET ModelId = @:ModelId, UserId = @:UserId, Page = @:Page, Content = @:Content, UpdateDate = @:UpdateDate WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "4A65EA6E-47D2-4D40-85AF-C69C647B0E6E")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of MedicalHistoryUWParameters)(formData))
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)

                .CommandExecute()
            End With
        End Sub

#End Region


#Region "Contracts Mappers"

        Private Shared Function EntryDataToClass(parametersData As MedicalHistoryUWParameters, formData As EntryData) As MedicalHistoryUWParameters
            If IsNothing(parametersData) Then
                parametersData = New MedicalHistoryUWParameters
            End If

            If IsNothing(parametersData.MedicalHistory) Then
                parametersData.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
            End If
            If IsNothing(parametersData.MedicalHistory.PhoneNumber) Then
                parametersData.MedicalHistory.PhoneNumber = New InMotionGIT.Questionnaires.Complements.TelephoneCollection
            End If
            If IsNothing(parametersData.MedicalHistory.MedicationDosageTreatment) Then
                parametersData.MedicalHistory.MedicationDosageTreatment = New InMotionGIT.Questionnaires.Complements.MedicalTreatmentMedicalHistoryCollection
            End If
            If IsNothing(parametersData.MedicalHistory.MedicalConditionsDetails) Then
                parametersData.MedicalHistory.MedicalConditionsDetails = New InMotionGIT.Questionnaires.Complements.MedicalConditionsDetailsCollection
            End If
            If IsNothing(parametersData.MedicalHistory.DetailsUsePrescriptionDrugs) Then
                parametersData.MedicalHistory.DetailsUsePrescriptionDrugs = New InMotionGIT.Questionnaires.Complements.DetailsPrescriptionDrugsCollection
            End If
            If IsNothing(parametersData.MedicalHistory.BiologicalFamilyCensus) Then
                parametersData.MedicalHistory.BiologicalFamilyCensus = New InMotionGIT.Questionnaires.Complements.BiologicalFamilyCensusCollection
            End If

            With parametersData
                .InternalId = formData.InstanceFormId
                .ClientName = formData.ClientName
                .uwcaseid = formData.uwcaseid
                .MedicalHistory.HaveAPersonalPhysician = formData.MedicalHistoryHaveAPersonalPhysician
                .MedicalHistory.PhysicianFirstName = formData.MedicalHistoryPhysicianFirstName
                .MedicalHistory.PhysicianLastName = formData.MedicalHistoryPhysicianLastName
                .MedicalHistory.Address = formData.MedicalHistoryAddress
                .MedicalHistory.State = formData.MedicalHistoryState
                .MedicalHistory.City = formData.MedicalHistoryCity
                .MedicalHistory.Zip = formData.MedicalHistoryZip
                 If formData.Telephone_Telephone.IsNotEmpty Then
                    Dim temporalPhoneNumber As New InMotionGIT.Questionnaires.Complements.TelephoneCollection
                    Dim currentItem As InMotionGIT.Questionnaires.Complements.Telephone

	            For Each itemData As Telephone_TelephoneItem In formData.Telephone_Telephone
                        currentItem = (From _x In parametersData.MedicalHistory.PhoneNumber Where _x.Sequence = itemData.Sequence Select _x).FirstOrDefault()
                     
	                If currentItem.IsEmpty Then
                            currentItem = New InMotionGIT.Questionnaires.Complements.Telephone
                  
                            With currentItem

                                .CountryCode = itemData.CountryCode
                                .AreaCode = itemData.AreaCode
                                .Number = itemData.Number
                                .BestTimeToCall = itemData.BestTimeToCall
                                .Extension = itemData.Extension
                                .Sequence = itemData.Sequence
                            End With                      
                                              
	                Else
                            With currentItem

                                .CountryCode = itemData.CountryCode
                                .AreaCode = itemData.AreaCode
                                .Number = itemData.Number
                                .BestTimeToCall = itemData.BestTimeToCall
                                .Extension = itemData.Extension
                                .Sequence = itemData.Sequence
                            End With
                        End If
                        
                        temporalPhoneNumber.Add(currentItem)
                    Next
                    
                    parametersData.MedicalHistory.PhoneNumber = temporalPhoneNumber
                 End If
                .MedicalHistory.DateLastSeenAPhysician = formData.MedicalHistoryDateLastSeenAPhysician
                .MedicalHistory.ReasonLastSeen = formData.MedicalHistoryReasonLastSeen
                 If formData.MedicalTreatmentMedicalHistory_MedicalTreatmentMedicalHistory.IsNotEmpty Then
                    Dim temporalMedicationDosageTreatment As New InMotionGIT.Questionnaires.Complements.MedicalTreatmentMedicalHistoryCollection
                    Dim currentItem As InMotionGIT.Questionnaires.Complements.MedicalTreatmentMedicalHistory

	            For Each itemData As MedicalTreatmentMedicalHistory_MedicalTreatmentMedicalHistoryItem In formData.MedicalTreatmentMedicalHistory_MedicalTreatmentMedicalHistory
                        currentItem = (From _x In parametersData.MedicalHistory.MedicationDosageTreatment Where _x.id = itemData.id Select _x).FirstOrDefault()
                     
	                If currentItem.IsEmpty Then
                            currentItem = New InMotionGIT.Questionnaires.Complements.MedicalTreatmentMedicalHistory
                  
                            With currentItem

                                .NameOfMedication = itemData.NameOfMedication
                                .Dosage = itemData.Dosage
                                .DatePeriod = itemData.DatePeriod
                                .Type = itemData.Type
                                .ExplainTreatment = itemData.ExplainTreatment
                                .id = itemData.id
                            End With                      
                                              
	                Else
                            With currentItem

                                .NameOfMedication = itemData.NameOfMedication
                                .Dosage = itemData.Dosage
                                .DatePeriod = itemData.DatePeriod
                                .Type = itemData.Type
                                .ExplainTreatment = itemData.ExplainTreatment
                                .id = itemData.id
                            End With
                        End If
                        
                        temporalMedicationDosageTreatment.Add(currentItem)
                    Next
                    
                    parametersData.MedicalHistory.MedicationDosageTreatment = temporalMedicationDosageTreatment
                 End If
                .MedicalHistory.DisorderEyesEarsNoseThroat = formData.MedicalHistoryDisorderEyesEarsNoseThroat
                .MedicalHistory.Headaches = formData.MedicalHistoryHeadaches
                .MedicalHistory.Dizziness = formData.MedicalHistoryDizziness
                .MedicalHistory.ElevatedBloodPressure = formData.MedicalHistoryElevatedBloodPressure
                .MedicalHistory.ChestDiscomfort = formData.MedicalHistoryChestDiscomfort
                .MedicalHistory.IrregularHeartbeat = formData.MedicalHistoryIrregularHeartbeat
                .MedicalHistory.HeartAttack = formData.MedicalHistoryHeartAttack
                .MedicalHistory.HeartMurmur = formData.MedicalHistoryHeartMurmur
                .MedicalHistory.DisorderHeartOrBlood = formData.MedicalHistoryDisorderHeartOrBlood
                .MedicalHistory.StrokeTransientIschemicAttack = formData.MedicalHistoryStrokeTransientIschemicAttack
                .MedicalHistory.ShortnessBreath = formData.MedicalHistoryShortnessBreath
                .MedicalHistory.Asthma = formData.MedicalHistoryAsthma
                .MedicalHistory.SleepApnea = formData.MedicalHistorySleepApnea
                .MedicalHistory.EmphysemaChronicBronchitis = formData.MedicalHistoryEmphysemaChronicBronchitis
                .MedicalHistory.Allergies = formData.MedicalHistoryAllergies
                .MedicalHistory.RespiratoryDisorder = formData.MedicalHistoryRespiratoryDisorder
                .MedicalHistory.DisorderEsophagus = formData.MedicalHistoryDisorderEsophagus
                .MedicalHistory.DigestiveDisorder = formData.MedicalHistoryDigestiveDisorder
                .MedicalHistory.DisorderIntestinesColonRectum = formData.MedicalHistoryDisorderIntestinesColonRectum
                .MedicalHistory.CrohnsDisease = formData.MedicalHistoryCrohnsDisease
                .MedicalHistory.Hepatitis = formData.MedicalHistoryHepatitis
                .MedicalHistory.OtherLiverDisorder = formData.MedicalHistoryOtherLiverDisorder
                .MedicalHistory.KidneyDisorder = formData.MedicalHistoryKidneyDisorder
                .MedicalHistory.UrineAbnormality = formData.MedicalHistoryUrineAbnormality
                .MedicalHistory.BladderDisorder = formData.MedicalHistoryBladderDisorder
                .MedicalHistory.PregnacyComplications = formData.MedicalHistoryPregnacyComplications
                .MedicalHistory.DisorderREproductiveOrgans = formData.MedicalHistoryDisorderREproductiveOrgans
                .MedicalHistory.SexuallyTransmittedDisease = formData.MedicalHistorySexuallyTransmittedDisease
                .MedicalHistory.DiabetesGlucoseIntolerance = formData.MedicalHistoryDiabetesGlucoseIntolerance
                .MedicalHistory.DisorderPancreas = formData.MedicalHistoryDisorderPancreas
                .MedicalHistory.OtherEndocrineDisorders = formData.MedicalHistoryOtherEndocrineDisorders
                .MedicalHistory.BloodTransfusion = formData.MedicalHistoryBloodTransfusion
                .MedicalHistory.AnemiaBloodAbnormality = formData.MedicalHistoryAnemiaBloodAbnormality
                .MedicalHistory.CancerMalignatTumor = formData.MedicalHistoryCancerMalignatTumor
                .MedicalHistory.Leukemia = formData.MedicalHistoryLeukemia
                .MedicalHistory.BenignTumor = formData.MedicalHistoryBenignTumor
                .MedicalHistory.ConnectiveTissueDisorder = formData.MedicalHistoryConnectiveTissueDisorder
                .MedicalHistory.Paralysis = formData.MedicalHistoryParalysis
                .MedicalHistory.RheumatoidArthritis = formData.MedicalHistoryRheumatoidArthritis
                .MedicalHistory.BackSpineNeckDisorder = formData.MedicalHistoryBackSpineNeckDisorder
                .MedicalHistory.MuscleDisorder = formData.MedicalHistoryMuscleDisorder
                .MedicalHistory.SciaticaNeuritis = formData.MedicalHistorySciaticaNeuritis
                .MedicalHistory.OtherBoneDisorder = formData.MedicalHistoryOtherBoneDisorder
                .MedicalHistory.AlcoholCounselingTreatment = formData.MedicalHistoryAlcoholCounselingTreatment
                .MedicalHistory.Alcoholism = formData.MedicalHistoryAlcoholism
                .MedicalHistory.DrugCounselingTreatment = formData.MedicalHistoryDrugCounselingTreatment
                .MedicalHistory.SuicideAttempt = formData.MedicalHistorySuicideAttempt
                .MedicalHistory.PanicAttack = formData.MedicalHistoryPanicAttack
                .MedicalHistory.Depression = formData.MedicalHistoryDepression
                .MedicalHistory.SeizuresNeurologicalDisorder = formData.MedicalHistorySeizuresNeurologicalDisorder
                .MedicalHistory.OtherMentalDisorders = formData.MedicalHistoryOtherMentalDisorders
                .MedicalHistory.AnyOtherDeseaseDisorderCondition = formData.MedicalHistoryAnyOtherDeseaseDisorderCondition
                 If formData.MedicalConditionsDetailsGrid_MedicalConditionsDetails.IsNotEmpty Then
                    Dim temporalMedicalConditionsDetails As New InMotionGIT.Questionnaires.Complements.MedicalConditionsDetailsCollection
                    Dim currentItem As InMotionGIT.Questionnaires.Complements.MedicalConditionsDetails

	            For Each itemData As MedicalConditionsDetailsGrid_MedicalConditionsDetailsItem In formData.MedicalConditionsDetailsGrid_MedicalConditionsDetails
                        currentItem = (From _x In parametersData.MedicalHistory.MedicalConditionsDetails Where _x.Id = itemData.Id Select _x).FirstOrDefault()
                     
	                If currentItem.IsEmpty Then
                            currentItem = New InMotionGIT.Questionnaires.Complements.MedicalConditionsDetails
                  
                            With currentItem

                                .MedicalTest = itemData.MedicalTest
                                .PhysicianName = itemData.PhysicianName
                                .StillTreatment = itemData.StillTreatment
                                .LastTreated = itemData.LastTreated
                                .LastEpisode = itemData.LastEpisode
                                .ReasonLastSeen = itemData.ReasonLastSeen
                                .MedicationTreatmentTherapy = itemData.MedicationTreatmentTherapy
                                .TestsTypeDateResults = itemData.TestsTypeDateResults
                                .AdditionalInformation = itemData.AdditionalInformation
                                .Id = itemData.Id
                            End With                      
                                              
	                Else
                            With currentItem

                                .MedicalTest = itemData.MedicalTest
                                .PhysicianName = itemData.PhysicianName
                                .StillTreatment = itemData.StillTreatment
                                .LastTreated = itemData.LastTreated
                                .LastEpisode = itemData.LastEpisode
                                .ReasonLastSeen = itemData.ReasonLastSeen
                                .MedicationTreatmentTherapy = itemData.MedicationTreatmentTherapy
                                .TestsTypeDateResults = itemData.TestsTypeDateResults
                                .AdditionalInformation = itemData.AdditionalInformation
                                .Id = itemData.Id
                            End With
                        End If
                        
                        temporalMedicalConditionsDetails.Add(currentItem)
                    Next
                    
                    parametersData.MedicalHistory.MedicalConditionsDetails = temporalMedicalConditionsDetails
                 End If
                .MedicalHistory.CurrentlyPregnant = formData.MedicalHistoryCurrentlyPregnant
                .MedicalHistory.DatePregnant = formData.MedicalHistoryDatePregnant
                .MedicalHistory.HaveSurgeriesDiagnosticsTestNotCompleted = formData.MedicalHistoryHaveSurgeriesDiagnosticsTestNotCompleted
                .MedicalHistory.HaveBeenWightChange = formData.MedicalHistoryHaveBeenWightChange
                .MedicalHistory.WeightTwelveMonthsAgo = formData.MedicalHistoryWeightTwelveMonthsAgo
                .MedicalHistory.PresentWeight = formData.MedicalHistoryPresentWeight
                .MedicalHistory.ReasonForWeightChange = formData.MedicalHistoryReasonForWeightChange
                .MedicalHistory.TreatedByAidsArcHIV = formData.MedicalHistoryTreatedByAidsArcHIV
                .MedicalHistory.ParticipateRegularExerciseProgram = formData.MedicalHistoryParticipateRegularExerciseProgram
                .MedicalHistory.MilitaryService = formData.MedicalHistoryMilitaryService
                .MedicalHistory.UsedPrescriptionDrugs = formData.MedicalHistoryUsedPrescriptionDrugs
                 If formData.DetailsPrescriptionDrugs_DetailsPrescriptionDrugs.IsNotEmpty Then
                    Dim temporalDetailsUsePrescriptionDrugs As New InMotionGIT.Questionnaires.Complements.DetailsPrescriptionDrugsCollection
                    Dim currentItem As InMotionGIT.Questionnaires.Complements.DetailsPrescriptionDrugs

	            For Each itemData As DetailsPrescriptionDrugs_DetailsPrescriptionDrugsItem In formData.DetailsPrescriptionDrugs_DetailsPrescriptionDrugs
                        currentItem = (From _x In parametersData.MedicalHistory.DetailsUsePrescriptionDrugs Where _x.Id = itemData.Id Select _x).FirstOrDefault()
                     
	                If currentItem.IsEmpty Then
                            currentItem = New InMotionGIT.Questionnaires.Complements.DetailsPrescriptionDrugs
                  
                            With currentItem

                                .DrugName = itemData.DrugName
                                .Form = itemData.Form
                                .Amount = itemData.Amount
                                .Frequency = itemData.Frequency
                                .LengthUse = itemData.LengthUse
                                .DateLastUse = itemData.DateLastUse
                                .Id = itemData.Id
                            End With                      
                                              
	                Else
                            With currentItem

                                .DrugName = itemData.DrugName
                                .Form = itemData.Form
                                .Amount = itemData.Amount
                                .Frequency = itemData.Frequency
                                .LengthUse = itemData.LengthUse
                                .DateLastUse = itemData.DateLastUse
                                .Id = itemData.Id
                            End With
                        End If
                        
                        temporalDetailsUsePrescriptionDrugs.Add(currentItem)
                    Next
                    
                    parametersData.MedicalHistory.DetailsUsePrescriptionDrugs = temporalDetailsUsePrescriptionDrugs
                 End If
                .MedicalHistory.NeverUsed = formData.MedicalHistoryNeverUsed
                .MedicalHistory.Cigarettes = formData.MedicalHistoryCigarettes
                .MedicalHistory.DateCigarettes = formData.MedicalHistoryDateCigarettes
                .MedicalHistory.NumberPacksDaily = formData.MedicalHistoryNumberPacksDaily
                .MedicalHistory.Pipe = formData.MedicalHistoryPipe
                .MedicalHistory.DatePipe = formData.MedicalHistoryDatePipe
                .MedicalHistory.Cigar = formData.MedicalHistoryCigar
                .MedicalHistory.DateCigar = formData.MedicalHistoryDateCigar
                .MedicalHistory.NicotinePatch = formData.MedicalHistoryNicotinePatch
                .MedicalHistory.DateNicotinePatch = formData.MedicalHistoryDateNicotinePatch
                .MedicalHistory.NicotineGum = formData.MedicalHistoryNicotineGum
                .MedicalHistory.DateNicotineGum = formData.MedicalHistoryDateNicotineGum
                .MedicalHistory.ChewingTobacco = formData.MedicalHistoryChewingTobacco
                .MedicalHistory.DateChewingTobacco = formData.MedicalHistoryDateChewingTobacco
                .MedicalHistory.OtherTobacco = formData.MedicalHistoryOtherTobacco
                .MedicalHistory.DateOtherTobacco = formData.MedicalHistoryDateOtherTobacco
                 If formData.BiologicalFamilyCensusGrid_BiologicalFamilyCensus.IsNotEmpty Then
                    Dim temporalBiologicalFamilyCensus As New InMotionGIT.Questionnaires.Complements.BiologicalFamilyCensusCollection
                    Dim currentItem As InMotionGIT.Questionnaires.Complements.BiologicalFamilyCensus

	            For Each itemData As BiologicalFamilyCensusGrid_BiologicalFamilyCensusItem In formData.BiologicalFamilyCensusGrid_BiologicalFamilyCensus
                        currentItem = (From _x In parametersData.MedicalHistory.BiologicalFamilyCensus Where _x.Id = itemData.Id Select _x).FirstOrDefault()
                     
	                If currentItem.IsEmpty Then
                            currentItem = New InMotionGIT.Questionnaires.Complements.BiologicalFamilyCensus
                  
                            With currentItem

                                .Relation = itemData.Relation
                                .Gender = itemData.Gender
                                .AgeLiving = itemData.AgeLiving
                                .AgeDeath = itemData.AgeDeath
                                .CauseDeath = itemData.CauseDeath
                                .OnsetAgeHeartDisease = itemData.OnsetAgeHeartDisease
                                .OnsetAgeKidneyDisease = itemData.OnsetAgeKidneyDisease
                                .OnsetAgeHighBloodPressure = itemData.OnsetAgeHighBloodPressure
                                .OnsetAgeDiabetes = itemData.OnsetAgeDiabetes
                                .OnsetAgeMentalIllness = itemData.OnsetAgeMentalIllness
                                .OnsetAgeCancer = itemData.OnsetAgeCancer
                                .Id = itemData.Id
                            End With                      
                                              
	                Else
                            With currentItem

                                .Relation = itemData.Relation
                                .Gender = itemData.Gender
                                .AgeLiving = itemData.AgeLiving
                                .AgeDeath = itemData.AgeDeath
                                .CauseDeath = itemData.CauseDeath
                                .OnsetAgeHeartDisease = itemData.OnsetAgeHeartDisease
                                .OnsetAgeKidneyDisease = itemData.OnsetAgeKidneyDisease
                                .OnsetAgeHighBloodPressure = itemData.OnsetAgeHighBloodPressure
                                .OnsetAgeDiabetes = itemData.OnsetAgeDiabetes
                                .OnsetAgeMentalIllness = itemData.OnsetAgeMentalIllness
                                .OnsetAgeCancer = itemData.OnsetAgeCancer
                                .Id = itemData.Id
                            End With
                        End If
                        
                        temporalBiologicalFamilyCensus.Add(currentItem)
                    Next
                    
                    parametersData.MedicalHistory.BiologicalFamilyCensus = temporalBiologicalFamilyCensus
                 End If
                .MedicalHistory.AdditionalInformation = formData.MedicalHistoryAdditionalInformation
                .MedicalHistory.DateQuestionnaire = formData.MedicalHistoryDateQuestionnaire
            End With

            Return parametersData
        End Function

        Private Shared Function ClassToEntryData(formData As EntryData, parametersData As MedicalHistoryUWParameters) As EntryData
            formData = New EntryData

            With formData
                .InstanceFormId = parametersData.InternalId
                .ClientName = parametersData.ClientName
                .uwcaseid = parametersData.uwcaseid
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryHaveAPersonalPhysician = parametersData.MedicalHistory.HaveAPersonalPhysician
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryPhysicianFirstName = parametersData.MedicalHistory.PhysicianFirstName
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryPhysicianLastName = parametersData.MedicalHistory.PhysicianLastName
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryAddress = parametersData.MedicalHistory.Address
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryState = parametersData.MedicalHistory.State
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryCity = parametersData.MedicalHistory.City
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryZip = parametersData.MedicalHistory.Zip
                End If
                .Telephone_Telephone = New List(Of Telephone_TelephoneItem)

                If Not IsNothing(parametersData.MedicalHistory) AndAlso Not IsNothing(parametersData.MedicalHistory.PhoneNumber) Then
                    Dim newItem As Telephone_TelephoneItem
                    
                    For Each itemData As InMotionGIT.Questionnaires.Complements.Telephone In parametersData.MedicalHistory.PhoneNumber
                        newItem = New Telephone_TelephoneItem
                        
                        With newItem
                            .CountryCode = itemData.CountryCode
                            .AreaCode = itemData.AreaCode
                            .Number = itemData.Number
                            .BestTimeToCall = itemData.BestTimeToCall
                            .Extension = itemData.Extension
                            .Sequence = itemData.Sequence                        
                        End With

                        .Telephone_Telephone.Add(newItem)
                    Next

                    If .Telephone_Telephone.Count <> 0 Then

                    End If
                End If


                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDateLastSeenAPhysician = parametersData.MedicalHistory.DateLastSeenAPhysician
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryReasonLastSeen = parametersData.MedicalHistory.ReasonLastSeen
                End If
                .MedicalTreatmentMedicalHistory_MedicalTreatmentMedicalHistory = New List(Of MedicalTreatmentMedicalHistory_MedicalTreatmentMedicalHistoryItem)

                If Not IsNothing(parametersData.MedicalHistory) AndAlso Not IsNothing(parametersData.MedicalHistory.MedicationDosageTreatment) Then
                    Dim newItem As MedicalTreatmentMedicalHistory_MedicalTreatmentMedicalHistoryItem
                    
                    For Each itemData As InMotionGIT.Questionnaires.Complements.MedicalTreatmentMedicalHistory In parametersData.MedicalHistory.MedicationDosageTreatment
                        newItem = New MedicalTreatmentMedicalHistory_MedicalTreatmentMedicalHistoryItem
                        
                        With newItem
                            .NameOfMedication = itemData.NameOfMedication
                            .Dosage = itemData.Dosage
                            .DatePeriod = itemData.DatePeriod
                            .Type = itemData.Type
                            .ExplainTreatment = itemData.ExplainTreatment
                            .id = itemData.id                        
                        End With

                        .MedicalTreatmentMedicalHistory_MedicalTreatmentMedicalHistory.Add(newItem)
                    Next

                    If .MedicalTreatmentMedicalHistory_MedicalTreatmentMedicalHistory.Count <> 0 Then

                    End If
                End If


                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDisorderEyesEarsNoseThroat = parametersData.MedicalHistory.DisorderEyesEarsNoseThroat
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryHeadaches = parametersData.MedicalHistory.Headaches
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDizziness = parametersData.MedicalHistory.Dizziness
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryElevatedBloodPressure = parametersData.MedicalHistory.ElevatedBloodPressure
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryChestDiscomfort = parametersData.MedicalHistory.ChestDiscomfort
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryIrregularHeartbeat = parametersData.MedicalHistory.IrregularHeartbeat
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryHeartAttack = parametersData.MedicalHistory.HeartAttack
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryHeartMurmur = parametersData.MedicalHistory.HeartMurmur
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDisorderHeartOrBlood = parametersData.MedicalHistory.DisorderHeartOrBlood
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryStrokeTransientIschemicAttack = parametersData.MedicalHistory.StrokeTransientIschemicAttack
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryShortnessBreath = parametersData.MedicalHistory.ShortnessBreath
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryAsthma = parametersData.MedicalHistory.Asthma
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistorySleepApnea = parametersData.MedicalHistory.SleepApnea
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryEmphysemaChronicBronchitis = parametersData.MedicalHistory.EmphysemaChronicBronchitis
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryAllergies = parametersData.MedicalHistory.Allergies
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryRespiratoryDisorder = parametersData.MedicalHistory.RespiratoryDisorder
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDisorderEsophagus = parametersData.MedicalHistory.DisorderEsophagus
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDigestiveDisorder = parametersData.MedicalHistory.DigestiveDisorder
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDisorderIntestinesColonRectum = parametersData.MedicalHistory.DisorderIntestinesColonRectum
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryCrohnsDisease = parametersData.MedicalHistory.CrohnsDisease
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryHepatitis = parametersData.MedicalHistory.Hepatitis
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryOtherLiverDisorder = parametersData.MedicalHistory.OtherLiverDisorder
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryKidneyDisorder = parametersData.MedicalHistory.KidneyDisorder
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryUrineAbnormality = parametersData.MedicalHistory.UrineAbnormality
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryBladderDisorder = parametersData.MedicalHistory.BladderDisorder
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryPregnacyComplications = parametersData.MedicalHistory.PregnacyComplications
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDisorderREproductiveOrgans = parametersData.MedicalHistory.DisorderREproductiveOrgans
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistorySexuallyTransmittedDisease = parametersData.MedicalHistory.SexuallyTransmittedDisease
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDiabetesGlucoseIntolerance = parametersData.MedicalHistory.DiabetesGlucoseIntolerance
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDisorderPancreas = parametersData.MedicalHistory.DisorderPancreas
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryOtherEndocrineDisorders = parametersData.MedicalHistory.OtherEndocrineDisorders
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryBloodTransfusion = parametersData.MedicalHistory.BloodTransfusion
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryAnemiaBloodAbnormality = parametersData.MedicalHistory.AnemiaBloodAbnormality
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryCancerMalignatTumor = parametersData.MedicalHistory.CancerMalignatTumor
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryLeukemia = parametersData.MedicalHistory.Leukemia
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryBenignTumor = parametersData.MedicalHistory.BenignTumor
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryConnectiveTissueDisorder = parametersData.MedicalHistory.ConnectiveTissueDisorder
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryParalysis = parametersData.MedicalHistory.Paralysis
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryRheumatoidArthritis = parametersData.MedicalHistory.RheumatoidArthritis
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryBackSpineNeckDisorder = parametersData.MedicalHistory.BackSpineNeckDisorder
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryMuscleDisorder = parametersData.MedicalHistory.MuscleDisorder
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistorySciaticaNeuritis = parametersData.MedicalHistory.SciaticaNeuritis
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryOtherBoneDisorder = parametersData.MedicalHistory.OtherBoneDisorder
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryAlcoholCounselingTreatment = parametersData.MedicalHistory.AlcoholCounselingTreatment
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryAlcoholism = parametersData.MedicalHistory.Alcoholism
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDrugCounselingTreatment = parametersData.MedicalHistory.DrugCounselingTreatment
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistorySuicideAttempt = parametersData.MedicalHistory.SuicideAttempt
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryPanicAttack = parametersData.MedicalHistory.PanicAttack
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDepression = parametersData.MedicalHistory.Depression
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistorySeizuresNeurologicalDisorder = parametersData.MedicalHistory.SeizuresNeurologicalDisorder
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryOtherMentalDisorders = parametersData.MedicalHistory.OtherMentalDisorders
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryAnyOtherDeseaseDisorderCondition = parametersData.MedicalHistory.AnyOtherDeseaseDisorderCondition
                End If
                .MedicalConditionsDetailsGrid_MedicalConditionsDetails = New List(Of MedicalConditionsDetailsGrid_MedicalConditionsDetailsItem)

                If Not IsNothing(parametersData.MedicalHistory) AndAlso Not IsNothing(parametersData.MedicalHistory.MedicalConditionsDetails) Then
                    Dim newItem As MedicalConditionsDetailsGrid_MedicalConditionsDetailsItem
                    
                    For Each itemData As InMotionGIT.Questionnaires.Complements.MedicalConditionsDetails In parametersData.MedicalHistory.MedicalConditionsDetails
                        newItem = New MedicalConditionsDetailsGrid_MedicalConditionsDetailsItem
                        
                        With newItem
                            .MedicalTest = itemData.MedicalTest
                            .PhysicianName = itemData.PhysicianName
                            .StillTreatment = itemData.StillTreatment
                            .LastTreated = itemData.LastTreated
                            .LastEpisode = itemData.LastEpisode
                            .ReasonLastSeen = itemData.ReasonLastSeen
                            .MedicationTreatmentTherapy = itemData.MedicationTreatmentTherapy
                            .TestsTypeDateResults = itemData.TestsTypeDateResults
                            .AdditionalInformation = itemData.AdditionalInformation
                            .Id = itemData.Id                        
                        End With

                        .MedicalConditionsDetailsGrid_MedicalConditionsDetails.Add(newItem)
                    Next

                    If .MedicalConditionsDetailsGrid_MedicalConditionsDetails.Count <> 0 Then

                    End If
                End If


                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryCurrentlyPregnant = parametersData.MedicalHistory.CurrentlyPregnant
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDatePregnant = parametersData.MedicalHistory.DatePregnant
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryHaveSurgeriesDiagnosticsTestNotCompleted = parametersData.MedicalHistory.HaveSurgeriesDiagnosticsTestNotCompleted
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryHaveBeenWightChange = parametersData.MedicalHistory.HaveBeenWightChange
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryWeightTwelveMonthsAgo = parametersData.MedicalHistory.WeightTwelveMonthsAgo
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryPresentWeight = parametersData.MedicalHistory.PresentWeight
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryReasonForWeightChange = parametersData.MedicalHistory.ReasonForWeightChange
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryTreatedByAidsArcHIV = parametersData.MedicalHistory.TreatedByAidsArcHIV
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryParticipateRegularExerciseProgram = parametersData.MedicalHistory.ParticipateRegularExerciseProgram
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryMilitaryService = parametersData.MedicalHistory.MilitaryService
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryUsedPrescriptionDrugs = parametersData.MedicalHistory.UsedPrescriptionDrugs
                End If
                .DetailsPrescriptionDrugs_DetailsPrescriptionDrugs = New List(Of DetailsPrescriptionDrugs_DetailsPrescriptionDrugsItem)

                If Not IsNothing(parametersData.MedicalHistory) AndAlso Not IsNothing(parametersData.MedicalHistory.DetailsUsePrescriptionDrugs) Then
                    Dim newItem As DetailsPrescriptionDrugs_DetailsPrescriptionDrugsItem
                    
                    For Each itemData As InMotionGIT.Questionnaires.Complements.DetailsPrescriptionDrugs In parametersData.MedicalHistory.DetailsUsePrescriptionDrugs
                        newItem = New DetailsPrescriptionDrugs_DetailsPrescriptionDrugsItem
                        
                        With newItem
                            .DrugName = itemData.DrugName
                            .Form = itemData.Form
                            .Amount = itemData.Amount
                            .Frequency = itemData.Frequency
                            .LengthUse = itemData.LengthUse
                            .DateLastUse = itemData.DateLastUse
                            .Id = itemData.Id                        
                        End With

                        .DetailsPrescriptionDrugs_DetailsPrescriptionDrugs.Add(newItem)
                    Next

                    If .DetailsPrescriptionDrugs_DetailsPrescriptionDrugs.Count <> 0 Then

                    End If
                End If


                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryNeverUsed = parametersData.MedicalHistory.NeverUsed
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryCigarettes = parametersData.MedicalHistory.Cigarettes
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDateCigarettes = parametersData.MedicalHistory.DateCigarettes
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryNumberPacksDaily = parametersData.MedicalHistory.NumberPacksDaily
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryPipe = parametersData.MedicalHistory.Pipe
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDatePipe = parametersData.MedicalHistory.DatePipe
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryCigar = parametersData.MedicalHistory.Cigar
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDateCigar = parametersData.MedicalHistory.DateCigar
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryNicotinePatch = parametersData.MedicalHistory.NicotinePatch
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDateNicotinePatch = parametersData.MedicalHistory.DateNicotinePatch
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryNicotineGum = parametersData.MedicalHistory.NicotineGum
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDateNicotineGum = parametersData.MedicalHistory.DateNicotineGum
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryChewingTobacco = parametersData.MedicalHistory.ChewingTobacco
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDateChewingTobacco = parametersData.MedicalHistory.DateChewingTobacco
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryOtherTobacco = parametersData.MedicalHistory.OtherTobacco
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDateOtherTobacco = parametersData.MedicalHistory.DateOtherTobacco
                End If
                .BiologicalFamilyCensusGrid_BiologicalFamilyCensus = New List(Of BiologicalFamilyCensusGrid_BiologicalFamilyCensusItem)

                If Not IsNothing(parametersData.MedicalHistory) AndAlso Not IsNothing(parametersData.MedicalHistory.BiologicalFamilyCensus) Then
                    Dim newItem As BiologicalFamilyCensusGrid_BiologicalFamilyCensusItem
                    
                    For Each itemData As InMotionGIT.Questionnaires.Complements.BiologicalFamilyCensus In parametersData.MedicalHistory.BiologicalFamilyCensus
                        newItem = New BiologicalFamilyCensusGrid_BiologicalFamilyCensusItem
                        
                        With newItem
                            .Relation = itemData.Relation
                            .Gender = itemData.Gender
                            .AgeLiving = itemData.AgeLiving
                            .AgeDeath = itemData.AgeDeath
                            .CauseDeath = itemData.CauseDeath
                            .OnsetAgeHeartDisease = itemData.OnsetAgeHeartDisease
                            .OnsetAgeKidneyDisease = itemData.OnsetAgeKidneyDisease
                            .OnsetAgeHighBloodPressure = itemData.OnsetAgeHighBloodPressure
                            .OnsetAgeDiabetes = itemData.OnsetAgeDiabetes
                            .OnsetAgeMentalIllness = itemData.OnsetAgeMentalIllness
                            .OnsetAgeCancer = itemData.OnsetAgeCancer
                            .Id = itemData.Id                        
                        End With

                        .BiologicalFamilyCensusGrid_BiologicalFamilyCensus.Add(newItem)
                    Next

                    If .BiologicalFamilyCensusGrid_BiologicalFamilyCensus.Count <> 0 Then

                    End If
                End If


                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryAdditionalInformation = parametersData.MedicalHistory.AdditionalInformation
                End If
                If Not IsNothing(parametersData.MedicalHistory) Then
                    .MedicalHistoryDateQuestionnaire = parametersData.MedicalHistory.DateQuestionnaire
                End If
            End With

            Return formData
        End Function

#End Region

#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As MedicalHistoryUWParameters)
            If HttpContext.Current.Request.QueryString("ClientName").IsNotEmpty Then
                formData.ClientName = HttpContext.Current.Request.QueryString("ClientName")
            End If
            If HttpContext.Current.Request.QueryString("uwcaseid").IsNotEmpty Then
                formData.uwcaseid = HttpContext.Current.Request.QueryString("uwcaseid")
            End If
            If HttpContext.Current.Request.QueryString("uwreqid").IsNotEmpty Then
                formData.uwreqid = HttpContext.Current.Request.QueryString("uwreqid")
            End If
            If HttpContext.Current.Request.QueryString("StatusCase").IsNotEmpty Then
                formData.StatusCase = HttpContext.Current.Request.QueryString("StatusCase")
            End If
            If HttpContext.Current.Request.QueryString("StatusRequirement").IsNotEmpty Then
                formData.StatusRequirement = HttpContext.Current.Request.QueryString("StatusRequirement")
            End If
            If HttpContext.Current.Request.QueryString("caseLocked").IsNotEmpty Then
                formData.caseLocked = HttpContext.Current.Request.QueryString("caseLocked")
            End If
            If HttpContext.Current.Request.QueryString("IsAnonymous").IsNotEmpty Then
                formData.IsAnonymous = HttpContext.Current.Request.QueryString("IsAnonymous")
            End If
            If HttpContext.Current.Request.QueryString("UsercodeFASI").IsNotEmpty Then
                formData.UsercodeFASI = HttpContext.Current.Request.QueryString("UsercodeFASI")
            End If
        End Sub	

        Private Shared Sub ValidateParametersInstance(ByRef formData As MedicalHistoryUWParameters)
            If IsNothing(formData.MedicalHistory) Then
                formData.MedicalHistory = New InMotionGIT.Questionnaires.MedicalHistory
            End If
            If IsNothing(formData.MedicalHistory.PhoneNumber) Then
                formData.MedicalHistory.PhoneNumber = New InMotionGIT.Questionnaires.Complements.TelephoneCollection
            End If
            If IsNothing(formData.MedicalHistory.MedicationDosageTreatment) Then
                formData.MedicalHistory.MedicationDosageTreatment = New InMotionGIT.Questionnaires.Complements.MedicalTreatmentMedicalHistoryCollection
            End If
            If IsNothing(formData.MedicalHistory.MedicalConditionsDetails) Then
                formData.MedicalHistory.MedicalConditionsDetails = New InMotionGIT.Questionnaires.Complements.MedicalConditionsDetailsCollection
            End If
            If IsNothing(formData.MedicalHistory.DetailsUsePrescriptionDrugs) Then
                formData.MedicalHistory.DetailsUsePrescriptionDrugs = New InMotionGIT.Questionnaires.Complements.DetailsPrescriptionDrugsCollection
            End If
            If IsNothing(formData.MedicalHistory.BiologicalFamilyCensus) Then
                formData.MedicalHistory.BiologicalFamilyCensus = New InMotionGIT.Questionnaires.Complements.BiologicalFamilyCensusCollection
            End If

        End Sub

#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property ClientName As String
            <DataMember()> Public Property uwcaseid As Int64
            <DataMember()> Public Property MedicalHistoryHaveAPersonalPhysician As System.Boolean
            <DataMember()> Public Property MedicalHistoryPhysicianFirstName As System.String
            <DataMember()> Public Property MedicalHistoryPhysicianLastName As System.String
            <DataMember()> Public Property MedicalHistoryAddress As System.String
            <DataMember()> Public Property MedicalHistoryState As System.String
            <DataMember()> Public Property MedicalHistoryCity As System.String
            <DataMember()> Public Property MedicalHistoryZip As System.String
            <DataMember()> Public Property MedicalHistoryPhoneNumberCountryCode As System.Int32
            <DataMember()> Public Property MedicalHistoryPhoneNumberAreaCode As System.Int32
            <DataMember()> Public Property MedicalHistoryPhoneNumberNumber As System.Int32
            <DataMember()> Public Property MedicalHistoryPhoneNumberBestTimeToCall As System.Int32
            <DataMember()> Public Property MedicalHistoryPhoneNumberExtension As System.Int32
            <DataMember()> Public Property MedicalHistoryPhoneNumberSequence As System.Int32
            <DataMember()> Public Property Telephone_Telephone As List(Of Telephone_TelephoneItem)
            <DataMember()> Public Property MedicalHistoryDateLastSeenAPhysician As System.DateTime
            <DataMember()> Public Property MedicalHistoryReasonLastSeen As System.String
            <DataMember()> Public Property MedicalHistoryMedicationDosageTreatmentNameOfMedication As System.String
            <DataMember()> Public Property MedicalHistoryMedicationDosageTreatmentDosage As System.String
            <DataMember()> Public Property MedicalHistoryMedicationDosageTreatmentDatePeriod As System.String
            <DataMember()> Public Property MedicalHistoryMedicationDosageTreatmentType As System.Int32
            <DataMember()> Public Property MedicalHistoryMedicationDosageTreatmentExplainTreatment As System.String
            <DataMember()> Public Property MedicalHistoryMedicationDosageTreatmentid As System.Int32
            <DataMember()> Public Property MedicalTreatmentMedicalHistory_MedicalTreatmentMedicalHistory As List(Of MedicalTreatmentMedicalHistory_MedicalTreatmentMedicalHistoryItem)
            <DataMember()> Public Property MedicalHistoryDisorderEyesEarsNoseThroat As System.Boolean
            <DataMember()> Public Property MedicalHistoryHeadaches As System.Boolean
            <DataMember()> Public Property MedicalHistoryDizziness As System.Boolean
            <DataMember()> Public Property MedicalHistoryElevatedBloodPressure As System.Boolean
            <DataMember()> Public Property MedicalHistoryChestDiscomfort As System.Boolean
            <DataMember()> Public Property MedicalHistoryIrregularHeartbeat As System.Boolean
            <DataMember()> Public Property MedicalHistoryHeartAttack As System.Boolean
            <DataMember()> Public Property MedicalHistoryHeartMurmur As System.Boolean
            <DataMember()> Public Property MedicalHistoryDisorderHeartOrBlood As System.Boolean
            <DataMember()> Public Property MedicalHistoryStrokeTransientIschemicAttack As System.Boolean
            <DataMember()> Public Property MedicalHistoryShortnessBreath As System.Boolean
            <DataMember()> Public Property MedicalHistoryAsthma As System.Boolean
            <DataMember()> Public Property MedicalHistorySleepApnea As System.Boolean
            <DataMember()> Public Property MedicalHistoryEmphysemaChronicBronchitis As System.Boolean
            <DataMember()> Public Property MedicalHistoryAllergies As System.Boolean
            <DataMember()> Public Property MedicalHistoryRespiratoryDisorder As System.Boolean
            <DataMember()> Public Property MedicalHistoryDisorderEsophagus As System.Boolean
            <DataMember()> Public Property MedicalHistoryDigestiveDisorder As System.Boolean
            <DataMember()> Public Property MedicalHistoryDisorderIntestinesColonRectum As System.Boolean
            <DataMember()> Public Property MedicalHistoryCrohnsDisease As System.Boolean
            <DataMember()> Public Property MedicalHistoryHepatitis As System.Boolean
            <DataMember()> Public Property MedicalHistoryOtherLiverDisorder As System.Boolean
            <DataMember()> Public Property MedicalHistoryKidneyDisorder As System.Boolean
            <DataMember()> Public Property MedicalHistoryUrineAbnormality As System.Boolean
            <DataMember()> Public Property MedicalHistoryBladderDisorder As System.Boolean
            <DataMember()> Public Property MedicalHistoryPregnacyComplications As System.Boolean
            <DataMember()> Public Property MedicalHistoryDisorderREproductiveOrgans As System.Boolean
            <DataMember()> Public Property MedicalHistorySexuallyTransmittedDisease As System.Boolean
            <DataMember()> Public Property MedicalHistoryDiabetesGlucoseIntolerance As System.Boolean
            <DataMember()> Public Property MedicalHistoryDisorderPancreas As System.Boolean
            <DataMember()> Public Property MedicalHistoryOtherEndocrineDisorders As System.Boolean
            <DataMember()> Public Property MedicalHistoryBloodTransfusion As System.Boolean
            <DataMember()> Public Property MedicalHistoryAnemiaBloodAbnormality As System.Boolean
            <DataMember()> Public Property MedicalHistoryCancerMalignatTumor As System.Boolean
            <DataMember()> Public Property MedicalHistoryLeukemia As System.Boolean
            <DataMember()> Public Property MedicalHistoryBenignTumor As System.Boolean
            <DataMember()> Public Property MedicalHistoryConnectiveTissueDisorder As System.Boolean
            <DataMember()> Public Property MedicalHistoryParalysis As System.Boolean
            <DataMember()> Public Property MedicalHistoryRheumatoidArthritis As System.Boolean
            <DataMember()> Public Property MedicalHistoryBackSpineNeckDisorder As System.Boolean
            <DataMember()> Public Property MedicalHistoryMuscleDisorder As System.Boolean
            <DataMember()> Public Property MedicalHistorySciaticaNeuritis As System.Boolean
            <DataMember()> Public Property MedicalHistoryOtherBoneDisorder As System.Boolean
            <DataMember()> Public Property MedicalHistoryAlcoholCounselingTreatment As System.Boolean
            <DataMember()> Public Property MedicalHistoryAlcoholism As System.Boolean
            <DataMember()> Public Property MedicalHistoryDrugCounselingTreatment As System.Boolean
            <DataMember()> Public Property MedicalHistorySuicideAttempt As System.Boolean
            <DataMember()> Public Property MedicalHistoryPanicAttack As System.Boolean
            <DataMember()> Public Property MedicalHistoryDepression As System.Boolean
            <DataMember()> Public Property MedicalHistorySeizuresNeurologicalDisorder As System.Boolean
            <DataMember()> Public Property MedicalHistoryOtherMentalDisorders As System.Boolean
            <DataMember()> Public Property MedicalHistoryAnyOtherDeseaseDisorderCondition As System.Boolean
            <DataMember()> Public Property MedicalHistoryMedicalConditionsDetailsMedicalTest As System.Int32
            <DataMember()> Public Property MedicalHistoryMedicalConditionsDetailsPhysicianName As System.String
            <DataMember()> Public Property MedicalHistoryMedicalConditionsDetailsStillTreatment As System.Boolean
            <DataMember()> Public Property MedicalHistoryMedicalConditionsDetailsLastTreated As System.DateTime
            <DataMember()> Public Property MedicalHistoryMedicalConditionsDetailsLastEpisode As System.DateTime
            <DataMember()> Public Property MedicalHistoryMedicalConditionsDetailsReasonLastSeen As System.String
            <DataMember()> Public Property MedicalHistoryMedicalConditionsDetailsMedicationTreatmentTherapy As System.String
            <DataMember()> Public Property MedicalHistoryMedicalConditionsDetailsTestsTypeDateResults As System.String
            <DataMember()> Public Property MedicalHistoryMedicalConditionsDetailsAdditionalInformation As System.String
            <DataMember()> Public Property MedicalHistoryMedicalConditionsDetailsId As System.Int32
            <DataMember()> Public Property MedicalConditionsDetailsGrid_MedicalConditionsDetails As List(Of MedicalConditionsDetailsGrid_MedicalConditionsDetailsItem)
            <DataMember()> Public Property MedicalHistoryCurrentlyPregnant As System.Boolean
            <DataMember()> Public Property MedicalHistoryDatePregnant As System.DateTime
            <DataMember()> Public Property MedicalHistoryHaveSurgeriesDiagnosticsTestNotCompleted As System.Boolean
            <DataMember()> Public Property MedicalHistoryHaveBeenWightChange As System.Boolean
            <DataMember()> Public Property MedicalHistoryWeightTwelveMonthsAgo As System.Double
            <DataMember()> Public Property MedicalHistoryPresentWeight As System.Double
            <DataMember()> Public Property MedicalHistoryReasonForWeightChange As System.String
            <DataMember()> Public Property MedicalHistoryTreatedByAidsArcHIV As System.Boolean
            <DataMember()> Public Property MedicalHistoryParticipateRegularExerciseProgram As System.Boolean
            <DataMember()> Public Property MedicalHistoryMilitaryService As System.Boolean
            <DataMember()> Public Property MedicalHistoryUsedPrescriptionDrugs As System.Boolean
            <DataMember()> Public Property MedicalHistoryDetailsUsePrescriptionDrugsDrugName As System.String
            <DataMember()> Public Property MedicalHistoryDetailsUsePrescriptionDrugsForm As System.String
            <DataMember()> Public Property MedicalHistoryDetailsUsePrescriptionDrugsAmount As System.String
            <DataMember()> Public Property MedicalHistoryDetailsUsePrescriptionDrugsFrequency As System.Int32
            <DataMember()> Public Property MedicalHistoryDetailsUsePrescriptionDrugsLengthUse As System.String
            <DataMember()> Public Property MedicalHistoryDetailsUsePrescriptionDrugsDateLastUse As System.DateTime
            <DataMember()> Public Property MedicalHistoryDetailsUsePrescriptionDrugsId As System.Int32
            <DataMember()> Public Property DetailsPrescriptionDrugs_DetailsPrescriptionDrugs As List(Of DetailsPrescriptionDrugs_DetailsPrescriptionDrugsItem)
            <DataMember()> Public Property MedicalHistoryNeverUsed As System.Boolean
            <DataMember()> Public Property MedicalHistoryCigarettes As System.Boolean
            <DataMember()> Public Property MedicalHistoryDateCigarettes As System.DateTime
            <DataMember()> Public Property MedicalHistoryNumberPacksDaily As System.Int32
            <DataMember()> Public Property MedicalHistoryPipe As System.Boolean
            <DataMember()> Public Property MedicalHistoryDatePipe As System.DateTime
            <DataMember()> Public Property MedicalHistoryCigar As System.Boolean
            <DataMember()> Public Property MedicalHistoryDateCigar As System.DateTime
            <DataMember()> Public Property MedicalHistoryNicotinePatch As System.Boolean
            <DataMember()> Public Property MedicalHistoryDateNicotinePatch As System.DateTime
            <DataMember()> Public Property MedicalHistoryNicotineGum As System.Boolean
            <DataMember()> Public Property MedicalHistoryDateNicotineGum As System.DateTime
            <DataMember()> Public Property MedicalHistoryChewingTobacco As System.Boolean
            <DataMember()> Public Property MedicalHistoryDateChewingTobacco As System.DateTime
            <DataMember()> Public Property MedicalHistoryOtherTobacco As System.Boolean
            <DataMember()> Public Property MedicalHistoryDateOtherTobacco As System.DateTime
            <DataMember()> Public Property MedicalHistoryBiologicalFamilyCensusRelation As System.Int32
            <DataMember()> Public Property MedicalHistoryBiologicalFamilyCensusGender As System.Int32
            <DataMember()> Public Property MedicalHistoryBiologicalFamilyCensusAgeLiving As System.Int32
            <DataMember()> Public Property MedicalHistoryBiologicalFamilyCensusAgeDeath As System.Int32
            <DataMember()> Public Property MedicalHistoryBiologicalFamilyCensusCauseDeath As System.String
            <DataMember()> Public Property MedicalHistoryBiologicalFamilyCensusOnsetAgeHeartDisease As System.Int32
            <DataMember()> Public Property MedicalHistoryBiologicalFamilyCensusOnsetAgeKidneyDisease As System.Int32
            <DataMember()> Public Property MedicalHistoryBiologicalFamilyCensusOnsetAgeHighBloodPressure As System.Int32
            <DataMember()> Public Property MedicalHistoryBiologicalFamilyCensusOnsetAgeDiabetes As System.Int32
            <DataMember()> Public Property MedicalHistoryBiologicalFamilyCensusOnsetAgeMentalIllness As System.Int32
            <DataMember()> Public Property MedicalHistoryBiologicalFamilyCensusOnsetAgeCancer As System.Int32
            <DataMember()> Public Property MedicalHistoryBiologicalFamilyCensusId As System.Int32
            <DataMember()> Public Property BiologicalFamilyCensusGrid_BiologicalFamilyCensus As List(Of BiologicalFamilyCensusGrid_BiologicalFamilyCensusItem)
            <DataMember()> Public Property MedicalHistoryAdditionalInformation As System.String
            <DataMember()> Public Property MedicalHistoryDateQuestionnaire As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Telephone_TelephoneItem

            <DataMember()> Public Property CountryCode As System.Int32
            <DataMember()> Public Property AreaCode As System.Int32
            <DataMember()> Public Property Number As System.Int32
            <DataMember()> Public Property BestTimeToCall As System.Int32
            <DataMember()> Public Property Extension As System.Int32
            <DataMember()> Public Property Sequence As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class MedicalTreatmentMedicalHistory_MedicalTreatmentMedicalHistoryItem

            <DataMember()> Public Property NameOfMedication As System.String
            <DataMember()> Public Property Dosage As System.String
            <DataMember()> Public Property DatePeriod As System.String
            <DataMember()> Public Property Type As System.Int32
            <DataMember()> Public Property ExplainTreatment As System.String
            <DataMember()> Public Property id As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class MedicalConditionsDetailsGrid_MedicalConditionsDetailsItem

            <DataMember()> Public Property MedicalTest As System.Int32
            <DataMember()> Public Property PhysicianName As System.String
            <DataMember()> Public Property StillTreatment As System.Boolean
            <DataMember()> Public Property LastTreated As System.DateTime
            <DataMember()> Public Property LastEpisode As System.DateTime
            <DataMember()> Public Property ReasonLastSeen As System.String
            <DataMember()> Public Property MedicationTreatmentTherapy As System.String
            <DataMember()> Public Property TestsTypeDateResults As System.String
            <DataMember()> Public Property AdditionalInformation As System.String
            <DataMember()> Public Property Id As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class DetailsPrescriptionDrugs_DetailsPrescriptionDrugsItem

            <DataMember()> Public Property DrugName As System.String
            <DataMember()> Public Property Form As System.String
            <DataMember()> Public Property Amount As System.String
            <DataMember()> Public Property Frequency As System.Int32
            <DataMember()> Public Property LengthUse As System.String
            <DataMember()> Public Property DateLastUse As System.DateTime
            <DataMember()> Public Property Id As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class BiologicalFamilyCensusGrid_BiologicalFamilyCensusItem

            <DataMember()> Public Property Relation As System.Int32
            <DataMember()> Public Property Gender As System.Int32
            <DataMember()> Public Property AgeLiving As System.Int32
            <DataMember()> Public Property AgeDeath As System.Int32
            <DataMember()> Public Property CauseDeath As System.String
            <DataMember()> Public Property OnsetAgeHeartDisease As System.Int32
            <DataMember()> Public Property OnsetAgeKidneyDisease As System.Int32
            <DataMember()> Public Property OnsetAgeHighBloodPressure As System.Int32
            <DataMember()> Public Property OnsetAgeDiabetes As System.Int32
            <DataMember()> Public Property OnsetAgeMentalIllness As System.Int32
            <DataMember()> Public Property OnsetAgeCancer As System.Int32
            <DataMember()> Public Property Id As System.Int32

        End Class

        <Serializable()>
        Public Class MedicalHistoryUWParameters
            Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of MedicalHistoryUWParameters)

            Public Property MedicalHistory As InMotionGIT.Questionnaires.MedicalHistory
            Public Property ClientName As String
            Public Property uwcaseid As Int64
            Public Property uwreqid As Int64
            Public Property StatusCase As Int32
            Public Property StatusRequirement As Int32
            Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
            Public Property caseLocked As Boolean
            Public Property IsAnonymous As Boolean
            Public Property UsercodeFASI As Int32

        End Class
#End Region

    End Class

End Namespace

