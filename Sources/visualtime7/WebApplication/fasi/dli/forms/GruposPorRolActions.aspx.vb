'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.3.39.1 at 2020-05-05 04:15:52 PM model release 8, Form Generator v1.0.37.52
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Net
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class GruposPorRolActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            
            
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                  
                
                Else
                    instance.InstanceFormId = id.IfEmpty(urlid)
                End If             
             
                With resultData
                    .Success = True
                    .Data = New With {.Instance = instance, .LookUps = LoadLookupsList()}
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "GruposPorRol", "Initialization", currentAction)
            End Try
            
            Return resultData
        End Function
  

        Public Shared Function LoadLookupsList() As List(Of InMotionGIT.Common.DataType.LookUpPackage)
            Dim result As New List(Of InMotionGIT.Common.DataType.LookUpPackage)
            
            Dim dataFactory As New DataManagerFactory("PackageExecuteToLookUp", "LOOKUPS", "")
            Dim dataCommand As InMotionGIT.Common.Services.Contracts.DataCommand = Nothing
            
            dataCommand = dataFactory.AddCommand(String.Format(CultureInfo.CurrentCulture, "SELECT  ROLE.ROLEID, ROLE.ROLENAME FROM ROLE ROLE    WHERE NOT ROLE.ROLENAME IS NULL ORDER BY ROLENAME", ""), New InMotionGIT.Common.DataType.LookUpValue With {.Code = "ROLEID", .Description = "ROLENAME"}, "Id_Rol", "ROLE", "Linked.FrontOffice")

            dataCommand = dataFactory.AddCommand(String.Format(CultureInfo.CurrentCulture, "SELECT  TRIM(GRUPO_ACCESO.DESCRIPCION) DESCRIPCION, GRUPO_ACCESO.ID_GRUPO_ACCESO FROM GRUPO_ACCESO GRUPO_ACCESO    WHERE NOT GRUPO_ACCESO.DESCRIPCION IS NULL ORDER BY DESCRIPCION", ""), New InMotionGIT.Common.DataType.LookUpValue With {.Code = "Id_Grupo_Acceso", .Description = "Descripcion"}, "Id_Grupo_Acceso", "Grupo_Acceso", "Linked.Seguridad")
            
            result = dataFactory.PackageExecuteToLookUp()
	
            Return result
        End Function



        <WebMethod()>
        Public Shared Function GrupoXRol_GridTblDataLoad(filter As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Unique_Key = 0, .Id_Rol = 0, .Id_Grupo_Acceso = 0, .Id_Compania = 0, .ExternalUser = String.Empty}
            Dim index as integer = 1
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)
            
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")

                With New DataManagerFactory("SELECT GRUPOXROL.ID_ROL, GRUPOXROL.ID_GRUPO_ACCESO, GRUPOXROL.ID_COMPANIA, GRUPOXROL.EXTERNALUSER FROM GRUPOXROL GRUPOXROL ", "GrupoXRol", "Linked.Seguridad")

                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.Unique_Key = index, .Id_Rol = itemData.NumericValue("ID_ROL"), .Id_Grupo_Acceso = itemData.NumericValue("ID_GRUPO_ACCESO"), .Id_Compania = itemData.NumericValue("ID_COMPANIA"), .ExternalUser = itemData.StringValue("EXTERNALUSER")}
                            index += 1
                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With
            
            If responseList.Count <> 0 Then          
		    
            End If
                
            Catch ex As Exception            
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "GruposPorRol", "GrupoXRol_GridTblDataLoad", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function GrupoXRol_Grid1InsertCommandActionGrupoXRol(ID_ROL1 As Decimal, ID_GRUPO_ACCESO2 As Decimal, ID_COMPANIA3 As Decimal, EXTERNALUSER4 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                With New DataManagerFactory("INSERT INTO GrupoXRol (ID_ROL, ID_GRUPO_ACCESO, ID_COMPANIA, EXTERNALUSER) VALUES (@:ID_ROL1, @:ID_GRUPO_ACCESO2, @:ID_COMPANIA3, @:EXTERNALUSER4)", "GrupoXRol", "Linked.Seguridad")
                    .AddParameter("ID_ROL1", DbType.Decimal, 0, False, ID_ROL1)
                    .AddParameter("ID_GRUPO_ACCESO2", DbType.Decimal, 0, False, ID_GRUPO_ACCESO2)
                    .AddParameter("ID_COMPANIA3", DbType.Decimal, 0, False, ID_COMPANIA3)
                    .AddParameter("EXTERNALUSER4", DbType.AnsiString, 0, (EXTERNALUSER4 = String.Empty), EXTERNALUSER4)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "GruposPorRol", "GrupoXRol_Grid1InsertCommandActionGrupoXRol", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function GrupoXRol_Grid1UpdateCommandActionGrupoXRol(EXTERNALUSER1 As String, GrupoXRolIdRol2 As Decimal, GrupoXRolIdGrupoAcceso3 As Decimal, GrupoXRolIdCompania4 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                With New DataManagerFactory("UPDATE Seguridad.GrupoXRol SET EXTERNALUSER = @:EXTERNALUSER1 WHERE GRUPOXROL.ID_ROL = @:ID_ROL2 AND GRUPOXROL.ID_GRUPO_ACCESO = @:ID_GRUPO_ACCESO3 AND GRUPOXROL.ID_COMPANIA = @:ID_COMPANIA4", "GrupoXRol", "Linked.Seguridad")
                    .AddParameter("EXTERNALUSER1", DbType.AnsiString, 5, (EXTERNALUSER1 = String.Empty), EXTERNALUSER1)
                    .AddParameter("ID_ROL2", DbType.Decimal, 0, False, GrupoXRolIdRol2)
                    .AddParameter("ID_GRUPO_ACCESO3", DbType.Decimal, 0, False, GrupoXRolIdGrupoAcceso3)
                    .AddParameter("ID_COMPANIA4", DbType.Decimal, 0, False, GrupoXRolIdCompania4)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "GruposPorRol", "GrupoXRol_Grid1UpdateCommandActionGrupoXRol", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function GrupoXRol_Grid1DeleteCommandActionGrupoXRol(GrupoXRolIdRol1 As Decimal, GrupoXRolIdGrupoAcceso2 As Decimal, GrupoXRolIdCompania3 As Decimal, GrupoXRolExternalUser4 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                With New DataManagerFactory("DELETE FROM GrupoXRol WHERE GRUPOXROL.ID_ROL = @:ID_ROL1 AND GRUPOXROL.ID_GRUPO_ACCESO = @:ID_GRUPO_ACCESO2 AND GRUPOXROL.ID_COMPANIA = @:ID_COMPANIA3 AND GRUPOXROL.EXTERNALUSER = @:EXTERNALUSER4", "GrupoXRol", "Linked.Seguridad")
                    .AddParameter("ID_ROL1", DbType.Decimal, 0, False, GrupoXRolIdRol1)
                    .AddParameter("ID_GRUPO_ACCESO2", DbType.Decimal, 0, False, GrupoXRolIdGrupoAcceso2)
                    .AddParameter("ID_COMPANIA3", DbType.Decimal, 0, False, GrupoXRolIdCompania3)
                    .AddParameter("EXTERNALUSER4", DbType.AnsiString, 0, (GrupoXRolExternalUser4 = String.Empty), GrupoXRolExternalUser4)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "GruposPorRol", "GrupoXRol_Grid1DeleteCommandActionGrupoXRol", String.Empty)
            End Try
            
            Return resultData
        End Function


#End Region

#Region "Lookups Web Methods"


        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForId_Rol(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)                       
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                 
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  ROLE.ROLEID, ROLE.ROLENAME FROM ROLE ROLE    WHERE NOT ROLE.ROLENAME IS NULL ORDER BY ROLENAME", ""), 
                                            "ROLE", "Linked.FrontOffice")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("ROLEID"),
                                                                                            .Description = item.StringValue("ROLENAME")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "GruposPorRol", "LookUpForId_Rol", String.Empty)
            End Try
                        
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForId_Grupo_Acceso(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)                       
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("Administrador")
                 
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TRIM(GRUPO_ACCESO.DESCRIPCION) DESCRIPCION, GRUPO_ACCESO.ID_GRUPO_ACCESO FROM GRUPO_ACCESO GRUPO_ACCESO    WHERE NOT GRUPO_ACCESO.DESCRIPCION IS NULL ORDER BY DESCRIPCION", ""), 
                                            "Grupo_Acceso", "Linked.Seguridad")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("Id_Grupo_Acceso"),
                                                                                            .Description = item.StringValue("Descripcion")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "GruposPorRol", "LookUpForId_Grupo_Acceso", String.Empty)
            End Try
                        
            Return result
        End Function

#End Region

#Region "Form Actions"


#End Region





#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As EntryData)

        End Sub	


#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property GrupoXRolCollectionId_Rol As System.Double
            <DataMember()> Public Property GrupoXRolCollectionId_Grupo_Acceso As System.Double
            <DataMember()> Public Property GrupoXRolCollectionId_Compania As System.Double
            <DataMember()> Public Property GrupoXRolCollectionExternalUser As System.String
            <DataMember()> Public Property GrupoXRol_Grid_GrupoXRol_Item As List(Of GrupoXRol_Grid_GrupoXRol_ItemItem)

        End Class

        <Serializable()>
        <DataContract()>
        Public Class GrupoXRol_Grid_GrupoXRol_ItemItem

            <DataMember()> Public Property Unique_Key As System.Int32
            <DataMember()> Public Property Id_Rol As System.Double
            <DataMember()> Public Property Id_Grupo_Acceso As System.Double
            <DataMember()> Public Property Id_Compania As System.Double
            <DataMember()> Public Property ExternalUser As System.String

        End Class


#End Region

    End Class

End Namespace

