'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.1.214.1 at 2018/11/28 02:28:27 p.m. model release 1, Form Generator v1.0.33.9
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class HT5HeartDiseaseQuestionnaireUWActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            Dim HT5HeartDiseaseQuestionnaireUWParametersInstance As HT5HeartDiseaseQuestionnaireUWParameters = Nothing

            Try
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                    
                    With instance
                        .HeartDiseaseQuestionnaireFrequencyOfTheSymptoms = 4
                    End With                
                    
                    HT5HeartDiseaseQuestionnaireUWParametersInstance = EntryDataToClass(HT5HeartDiseaseQuestionnaireUWParametersInstance, instance)
                    SetDefaultValuesFromQueryString(HT5HeartDiseaseQuestionnaireUWParametersInstance)
                    
                    If fromid.IsNotEmpty Then
                        GetTransferParameters(HT5HeartDiseaseQuestionnaireUWParametersInstance, fromid)
                    End If
                Else       
                    instance.InstanceFormId = id.IfEmpty(urlid)
                    HT5HeartDiseaseQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
    
                    If IsNothing(HT5HeartDiseaseQuestionnaireUWParametersInstance) then
                        HT5HeartDiseaseQuestionnaireUWParametersInstance = EntryDataToClass(HT5HeartDiseaseQuestionnaireUWParametersInstance, instance)
                        SetDefaultValuesFromQueryString(HT5HeartDiseaseQuestionnaireUWParametersInstance)
                    End If
                End If

                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = String.Empty

                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    Form_Initialization(currentAction, HT5HeartDiseaseQuestionnaireUWParametersInstance, resultData)
                Else
                    Form_Load(currentAction, HT5HeartDiseaseQuestionnaireUWParametersInstance, resultData)
                End If


                instance = ClassToEntryData(instance, HT5HeartDiseaseQuestionnaireUWParametersInstance) 
		        
                StoreFormInformation(HT5HeartDiseaseQuestionnaireUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5HeartDiseaseQuestionnaireUW", "Initialization", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
   
        <WebMethod(EnableSession:=True)>
        Public Shared Function button8Click(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5HeartDiseaseQuestionnaireUWParametersInstance As HT5HeartDiseaseQuestionnaireUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5HeartDiseaseQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
    
                    If IsNothing(HT5HeartDiseaseQuestionnaireUWParametersInstance) then
                        HT5HeartDiseaseQuestionnaireUWParametersInstance = EntryDataToClass(HT5HeartDiseaseQuestionnaireUWParametersInstance, instance)
                        SetDefaultValuesFromQueryString(HT5HeartDiseaseQuestionnaireUWParametersInstance)
                    End If
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("button8Click")
                HT5HeartDiseaseQuestionnaireUWParametersInstance = EntryDataToClass(HT5HeartDiseaseQuestionnaireUWParametersInstance, instance)
                currentAction = SessionTrace("1. The message 'El cuestionario será...' will displayed as 'Splash'")
                ParametersToDictionary(HT5HeartDiseaseQuestionnaireUWParametersInstance, parametersDictionary)
                messageAction = "El cuestionario será almacenado temporalmente. Recuerde que debe ser llenado para que su solicitud sea procesada. Muchas gracias."
                messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                resultData.AddNotifySplash(messageAction)

                instance = ClassToEntryData(instance, HT5HeartDiseaseQuestionnaireUWParametersInstance)
                
                StoreFormInformation(HT5HeartDiseaseQuestionnaireUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5HeartDiseaseQuestionnaireUW", "button8Click", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function button7Click(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5HeartDiseaseQuestionnaireUWParametersInstance As HT5HeartDiseaseQuestionnaireUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5HeartDiseaseQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
    
                    If IsNothing(HT5HeartDiseaseQuestionnaireUWParametersInstance) then
                        HT5HeartDiseaseQuestionnaireUWParametersInstance = EntryDataToClass(HT5HeartDiseaseQuestionnaireUWParametersInstance, instance)
                        SetDefaultValuesFromQueryString(HT5HeartDiseaseQuestionnaireUWParametersInstance)
                    End If
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("button7Click")
                HT5HeartDiseaseQuestionnaireUWParametersInstance = EntryDataToClass(HT5HeartDiseaseQuestionnaireUWParametersInstance, instance)
                currentAction = SessionTrace("1. HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5HeartDiseaseQuestionnaireUWParametersInstance.uwcaseid)...")
                currentAction = SessionTrace("1.1. HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5HeartDiseaseQuestionnaireUWParametersInstance.uwcaseid)...")

                HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5HeartDiseaseQuestionnaireUWParametersInstance.uwcaseid)

                currentAction = SessionTrace("2. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64)
                .Add("uwreqid", HT5HeartDiseaseQuestionnaireUWParametersInstance.uwreqid)
                .Add("ClientName", HT5HeartDiseaseQuestionnaireUWParametersInstance.ClientName)
                .Add("StatusCase", HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusCase)
                .Add("StatusRequirement", HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusRequirement)
                .Add("RiskInformation", HT5HeartDiseaseQuestionnaireUWParametersInstance.RiskInformation)
                .Add("Identifier", "Heart")
                .Add("context", formContext)
                .Add("caseLocked", HT5HeartDiseaseQuestionnaireUWParametersInstance.caseLocked)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5HeartDiseaseQuestionnaireUWParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                HT5HeartDiseaseQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                HT5HeartDiseaseQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
                HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                HT5HeartDiseaseQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("3. If HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then")
                If HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then

                    currentAction = SessionTrace("4. The message 'El estado del cuesti...' will displayed as 'Splash'")
                    ParametersToDictionary(HT5HeartDiseaseQuestionnaireUWParametersInstance, parametersDictionary)
                    messageAction = "El estado del cuestionario no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros."
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifySplash(messageAction)
                    Else
                    currentAction = SessionTrace("5. Call Shared Function 'User Profile' without parameters")
                    Dim _ClientUser_35b7f22eae074129a4230b9850bf782e As InMotionGIT.Client.Entity.Contracts.Client
                    

      If Not IsNothing(UserInfo) AndAlso Not IsNothing(UserInfo.User) then
         _ClientUser_35b7f22eae074129a4230b9850bf782e = New InMotionGIT.Client.Entity.Contracts.Client

         With _ClientUser_35b7f22eae074129a4230b9850bf782e
             .ClientID = UserInfo.User.ClientID
             .FirstName = UserInfo.User.FirstName
             .LastName = UserInfo.User.LastName
             .LastName2 = UserInfo.User.SecondLastName
             .BirthDate = UserInfo.User.DateOfBirth
             .LegalName = UserInfo.User.CompanyName
             .GenderEnum = IIf(UserInfo.User.Gender = "Male", InMotionGIT.Common.Contracts.Enumerations.EnumGender.Male, InMotionGIT.Common.Contracts.Enumerations.EnumGender.Female)
             .eMailAddressDefault = UserInfo.User.Email
             .CompleteClientName = .CompleteClientNameValid
         End With

	isNullResult = (IsNothing(_ClientUser_35b7f22eae074129a4230b9850bf782e))
	isFoundData  = Not isNullResult
      End If
    
                    HT5HeartDiseaseQuestionnaireUWParametersInstance.ClientUser = _ClientUser_35b7f22eae074129a4230b9850bf782e

                    currentAction = SessionTrace("6. HT5HeartDiseaseQuestionnaireUWParametersInstance.UsercodeFASI = UserInfo.UserId...")
                    currentAction = SessionTrace("6.1. HT5HeartDiseaseQuestionnaireUWParametersInstance.UsercodeFASI = UserInfo.UserId...")

                    HT5HeartDiseaseQuestionnaireUWParametersInstance.UsercodeFASI = UserInfo.UserId
                    currentAction = SessionTrace("6.2. HT5HeartDiseaseQuestionnaireUWParametersInstance.IsAnonymous = UserInfo.IsAnonymous()...")

                    HT5HeartDiseaseQuestionnaireUWParametersInstance.IsAnonymous = UserInfo.IsAnonymous()

                    currentAction = SessionTrace("7. If HT5HeartDiseaseQuestionnaireUWParametersInstance.IsAnonymous = true Then")
                    If HT5HeartDiseaseQuestionnaireUWParametersInstance.IsAnonymous = true Then

                        currentAction = SessionTrace("8. HT5HeartDiseaseQuestionnaireUWParametersInstance.UsercodeFASI = 9998...")
                        currentAction = SessionTrace("8.1. HT5HeartDiseaseQuestionnaireUWParametersInstance.UsercodeFASI = 9998...")

                        HT5HeartDiseaseQuestionnaireUWParametersInstance.UsercodeFASI = 9998

                                End If
                    currentAction = SessionTrace("9. If HT5HeartDiseaseQuestionnaireUWParametersInstance.caseLocked = true Then")
                    If HT5HeartDiseaseQuestionnaireUWParametersInstance.caseLocked = true Then

                        currentAction = SessionTrace("10. Call 'Main Process Questionnaire Heart' workflow in Synchronous mode with tracking")
                        WorkflowInArguments = New Dictionary(Of String, Object)

                        With WorkflowInArguments
                        .Add("uwcaseid", HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64)
                        .Add("uwreqid", HT5HeartDiseaseQuestionnaireUWParametersInstance.uwreqid)
                        .Add("HeartDiseaseQuestionnaire", HT5HeartDiseaseQuestionnaireUWParametersInstance.HeartDiseaseQuestionnaire)
                        .Add("context", formContext)
                        .Add("ConnectedUserCode", HT5HeartDiseaseQuestionnaireUWParametersInstance.UsercodeFASI)
                        .Add("caseLocked", HT5HeartDiseaseQuestionnaireUWParametersInstance.caseLocked)
                        End With

                        WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireRulesHeartUW", "ABC47974-1915-43E8-8A6C-4D0E7FD8B606", 14, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5HeartDiseaseQuestionnaireUWParametersInstance.InternalId)

                        currentAction += "'Mapping Outputs'"
                        HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                        HT5HeartDiseaseQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                        HT5HeartDiseaseQuestionnaireUWParametersInstance.HeartDiseaseQuestionnaire = WorkflowOutArguments("HeartDiseaseQuestionnaire")

                        currentAction = SessionTrace("11. Url: '#setting.Url.WebApplication#/Underwriting/UnderwritingPanel.aspx'")
                            
                With resultData
                    .AddRedirect(String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") +"/Underwriting/UnderwritingPanel.aspx"+"?closeWindow={0}","1"))
                End With
                                    Else
                        currentAction = SessionTrace("12. The message 'El cuestionario será...' will displayed as 'Splash'")
                        ParametersToDictionary(HT5HeartDiseaseQuestionnaireUWParametersInstance, parametersDictionary)
                        messageAction = "El cuestionario será procesado. Muchas gracias."
                        messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                        resultData.AddNotifySplash(messageAction)
                        currentAction = SessionTrace("13. Call 'Main Process Questionnaire Heart' workflow in Asynchronous mode with tracking")
                        WorkflowInArguments = New Dictionary(Of String, Object)

                        With WorkflowInArguments
                        .Add("uwcaseid", HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64)
                        .Add("uwreqid", HT5HeartDiseaseQuestionnaireUWParametersInstance.uwreqid)
                        .Add("HeartDiseaseQuestionnaire", HT5HeartDiseaseQuestionnaireUWParametersInstance.HeartDiseaseQuestionnaire)
                        .Add("context", formContext)
                        .Add("ConnectedUserCode", HT5HeartDiseaseQuestionnaireUWParametersInstance.UsercodeFASI)
                        .Add("caseLocked", HT5HeartDiseaseQuestionnaireUWParametersInstance.caseLocked)
                        End With

                        WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireRulesHeartUW", "ABC47974-1915-43E8-8A6C-4D0E7FD8B606", 12, WorkflowInArguments, True, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5HeartDiseaseQuestionnaireUWParametersInstance.InternalId)


                                        End If
                                    End If

                instance = ClassToEntryData(instance, HT5HeartDiseaseQuestionnaireUWParametersInstance)
                
                StoreFormInformation(HT5HeartDiseaseQuestionnaireUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5HeartDiseaseQuestionnaireUW", "button7Click", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


#End Region

#Region "Form Actions"

        Private Shared Sub Form_Initialization(ByRef currentAction As String, ByRef HT5HeartDiseaseQuestionnaireUWParametersInstance As HT5HeartDiseaseQuestionnaireUWParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, HT5HeartDiseaseQuestionnaireUWParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Initialization")

            currentAction = SessionTrace("1. HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5HeartDiseaseQuestionnaireUWParametersInstance.uwcaseid)...")
            currentAction = SessionTrace("1.1. HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5HeartDiseaseQuestionnaireUWParametersInstance.uwcaseid)...")

            HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5HeartDiseaseQuestionnaireUWParametersInstance.uwcaseid)

            currentAction = SessionTrace("2. If HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 <> 0 Then")
            If HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 <> 0 Then

                currentAction = SessionTrace("3. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64)
                .Add("uwreqid", HT5HeartDiseaseQuestionnaireUWParametersInstance.uwreqid)
                .Add("ClientName", HT5HeartDiseaseQuestionnaireUWParametersInstance.ClientName)
                .Add("StatusCase", HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusCase)
                .Add("StatusRequirement", HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusRequirement)
                .Add("RiskInformation", HT5HeartDiseaseQuestionnaireUWParametersInstance.RiskInformation)
                .Add("Identifier", "HeartInitialization")
                .Add("context", formContext)
                .Add("caseLocked", HT5HeartDiseaseQuestionnaireUWParametersInstance.caseLocked)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5HeartDiseaseQuestionnaireUWParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                HT5HeartDiseaseQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                HT5HeartDiseaseQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
                HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                HT5HeartDiseaseQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("4. HT5HeartDiseaseQuestionnaireUWParametersInstance.HeartDiseaseQuestionnaire.DateReceived = Date.Today...")
                currentAction = SessionTrace("4.1. HT5HeartDiseaseQuestionnaireUWParametersInstance.HeartDiseaseQuestionnaire.DateReceived = Date.Today...")
                                If IsNothing(HT5HeartDiseaseQuestionnaireUWParametersInstance.HeartDiseaseQuestionnaire) Then
                    HT5HeartDiseaseQuestionnaireUWParametersInstance.HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire
                End If

                HT5HeartDiseaseQuestionnaireUWParametersInstance.HeartDiseaseQuestionnaire.DateReceived = Date.Today

                currentAction = SessionTrace("5. If HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then")
                If HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then

                    currentAction = SessionTrace("6. The message 'El estado del cuesti...' will displayed as 'Splash'")
                    ParametersToDictionary(HT5HeartDiseaseQuestionnaireUWParametersInstance, parametersDictionary)
                    messageAction = "El estado del cuestionario no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros."
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifySplash(messageAction)
                        End If
                    End If

        End Sub
	
        Private Shared Sub Form_Load(ByRef currentAction As String, ByRef HT5HeartDiseaseQuestionnaireUWParametersInstance As HT5HeartDiseaseQuestionnaireUWParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, HT5HeartDiseaseQuestionnaireUWParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Load")

            currentAction = SessionTrace("1. HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5HeartDiseaseQuestionnaireUWParametersInstance.uwcaseid)...")
            currentAction = SessionTrace("1.1. HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5HeartDiseaseQuestionnaireUWParametersInstance.uwcaseid)...")

            HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5HeartDiseaseQuestionnaireUWParametersInstance.uwcaseid)

            currentAction = SessionTrace("2. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
            WorkflowInArguments = New Dictionary(Of String, Object)

            With WorkflowInArguments
            .Add("uwcaseid", HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64)
            .Add("uwreqid", HT5HeartDiseaseQuestionnaireUWParametersInstance.uwreqid)
            .Add("ClientName", HT5HeartDiseaseQuestionnaireUWParametersInstance.ClientName)
            .Add("StatusCase", HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusCase)
            .Add("StatusRequirement", HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusRequirement)
            .Add("RiskInformation", HT5HeartDiseaseQuestionnaireUWParametersInstance.RiskInformation)
            .Add("Identifier", "Heart")
            .Add("context", formContext)
            .Add("caseLocked", HT5HeartDiseaseQuestionnaireUWParametersInstance.caseLocked)
            End With

            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5HeartDiseaseQuestionnaireUWParametersInstance.InternalId)

            currentAction += "'Mapping Outputs'"
            HT5HeartDiseaseQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
            HT5HeartDiseaseQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
            HT5HeartDiseaseQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
            HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
            HT5HeartDiseaseQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
            HT5HeartDiseaseQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

            currentAction = SessionTrace("3. If HT5HeartDiseaseQuestionnaireUWParametersInstance.fromPanel = true Then")
            If HT5HeartDiseaseQuestionnaireUWParametersInstance.fromPanel = true Then

                currentAction = SessionTrace("4. Questions.Enabled = false, zoned.Enabled = false, firma.Visible = false")
                currentAction = SessionTrace("4.1. Questions.Enabled = false...")
                resultData.AddControlBehavior("Questions", "disabled")
                currentAction = SessionTrace("4.2. zoned.Enabled = false...")
                resultData.AddControlBehavior("zoned", "disabled")
                currentAction = SessionTrace("4.3. firma.Visible = false...")
                resultData.AddControlBehavior("firma", "hide")

                End If

        End Sub
#End Region
#Region "Utilities"

        Private Shared Sub ParametersToDictionary(formData As HT5HeartDiseaseQuestionnaireUWParameters, ByRef target As Dictionary(Of String, Object))
            If IsNothing(target) Then
                target = New Dictionary(Of String, Object)

                target.Add("HeartDiseaseQuestionnaire", formData.HeartDiseaseQuestionnaire)
                target.Add("uwcaseid", formData.uwcaseid)
                target.Add("uwreqid", formData.uwreqid)
                target.Add("ClientName", formData.ClientName)
                target.Add("StatusCase", formData.StatusCase)
                target.Add("StatusRequirement", formData.StatusRequirement)
                target.Add("RiskInformation", formData.RiskInformation)
                target.Add("fromPanel", formData.fromPanel)
                target.Add("caseLocked", formData.caseLocked)
                target.Add("IsAnonymous", formData.IsAnonymous)
                target.Add("UsercodeFASI", formData.UsercodeFASI)
                target.Add("uwCaseIdInt64", formData.uwCaseIdInt64)
                target.Add("ClientUser", formData.ClientUser)
            Else
                target("HeartDiseaseQuestionnaire") = formData.HeartDiseaseQuestionnaire
                target("uwcaseid") = formData.uwcaseid
                target("uwreqid") = formData.uwreqid
                target("ClientName") = formData.ClientName
                target("StatusCase") = formData.StatusCase
                target("StatusRequirement") = formData.StatusRequirement
                target("RiskInformation") = formData.RiskInformation
                target("fromPanel") = formData.fromPanel
                target("caseLocked") = formData.caseLocked
                target("IsAnonymous") = formData.IsAnonymous
                target("UsercodeFASI") = formData.UsercodeFASI
                target("uwCaseIdInt64") = formData.uwCaseIdInt64
                target("ClientUser") = formData.ClientUser
            End If
        End Sub

        Private Shared Sub GetTransferParameters(parametersData As HT5HeartDiseaseQuestionnaireUWParameters, fromid As String)
            Dim fromDocumentCache As Object = Nothing

            If Not String.IsNullOrEmpty(fromid) Then
                fromDocumentCache = HttpContext.Current.Session(fromid)
                HttpContext.Current.Session.Remove(fromid)

            Else
                fromDocumentCache = HttpContext.Current.Session(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove("fromid")
            End If

            If Not IsNothing(fromDocumentCache) Then
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("HeartDiseaseQuestionnaire", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientName", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusCase", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRequirement", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("fromPanel", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("caseLocked", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsAnonymous", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeFASI", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwCaseIdInt64", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientUser", fromDocumentCache, parametersData)
            End If
        End Sub

        Private Shared Function SessionTrace(message As String) As String

            If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                Dim tracelog As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath")))

                tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = tracelog
            End If

            Return message
        End Function

#End Region


#Region "Storage Database Methods"

      Private Shared Sub StoreFormInformation(formData As HT5HeartDiseaseQuestionnaireUWParameters)
            If Not IsNothing(formData) Then
                Dim foundData As Boolean

                If formData.InternalId.IsEmpty Then
                    formData.InternalId = Guid.NewGuid.ToString
                Else
                    With New DataManagerFactory("SELECT COUNT(FormId) FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                 "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                        .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                        foundData = .QueryExecuteScalarToInteger > 0
                    End With
                End If

                If foundData Then
                    UpdateStorageData(formData)
                Else
                    InsertStorageData(formData)
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso
                    HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                    HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.HT5HeartDiseaseQuestionnaireUW", formData.InternalId)) = formData
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track.Parameters")) AndAlso
                    HttpContext.Current.Session("Form.Track.Parameters").ToString.ToLower = "true" Then

                    If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                        InMotionGIT.Common.Helpers.FileHandler.SaveContent(String.Format(CultureInfo.InvariantCulture, 
                                                                                         "{0}\{1}.HT5HeartDiseaseQuestionnaireUW.txt", ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), 
                                                                                         HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", 
                                                                                                                                   IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))))
                    End If

                    InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of HT5HeartDiseaseQuestionnaireUWParameters)(formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.HT5HeartDiseaseQuestionnaireUW.xml", 
                                                                                                                        ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
                End If
            End If
        End Sub

        Private Shared Function RetrieveFormInformationFromDatabase(instanceFormId As String) As HT5HeartDiseaseQuestionnaireUWParameters
            Dim result As HT5HeartDiseaseQuestionnaireUWParameters = Nothing
            Dim records As DataTable = Nothing

            With New DataManagerFactory("SELECT Content FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, instanceFormId)
                records = .QueryExecuteToTable(True)
            End With

            If records.Rows.Count > 0 Then
                result = Serialize.Deserialize(Of HT5HeartDiseaseQuestionnaireUWParameters)(records.FirstRow.Item("Content"))
            End If

            Return result
        End Function

        Private Shared Sub InsertStorageData(formData As HT5HeartDiseaseQuestionnaireUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("INSERT INTO FrontOffice.DocumentCache (FormId, ModelId, UserId, Page, Content, CreationDate, UpdateDate) VALUES(@:FormId, @:ModelId, @:UserId, @:Page, @:Content, @:CreationDate, @:UpdateDate)",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "d54710f4-220a-4245-8f0c-2ba70096d247")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HT5HeartDiseaseQuestionnaireUWParameters)(formData))
            .AddParameter("CreationDate", DbType.DateTime, 20, False, Now)
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)

                .CommandExecute()
            End With
        End Sub

        Private Shared Sub UpdateStorageData(formData As HT5HeartDiseaseQuestionnaireUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("UPDATE FrontOffice.DocumentCache SET ModelId = @:ModelId, UserId = @:UserId, Page = @:Page, Content = @:Content, UpdateDate = @:UpdateDate WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "d54710f4-220a-4245-8f0c-2ba70096d247")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HT5HeartDiseaseQuestionnaireUWParameters)(formData))
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)

                .CommandExecute()
            End With
        End Sub

#End Region


#Region "Contracts Mappers"

        Private Shared Function EntryDataToClass(parametersData As HT5HeartDiseaseQuestionnaireUWParameters, formData As EntryData) As HT5HeartDiseaseQuestionnaireUWParameters
            If IsNothing(parametersData) Then
                parametersData = New HT5HeartDiseaseQuestionnaireUWParameters
            End If

            If IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                parametersData.HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire
            End If
            If IsNothing(parametersData.HeartDiseaseQuestionnaire.DetailsOfSpecialists) Then
                parametersData.HeartDiseaseQuestionnaire.DetailsOfSpecialists = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitionersCollection
            End If
            If IsNothing(parametersData.HeartDiseaseQuestionnaire.DetailsMedicationsTaking) Then
                parametersData.HeartDiseaseQuestionnaire.DetailsMedicationsTaking = New InMotionGIT.Questionnaires.Complements.TreatmentPrescribedCollection
            End If
            If IsNothing(parametersData.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle) Then
                parametersData.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle = New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWorkCollection
            End If

            With parametersData
                .InternalId = formData.InstanceFormId
                .ClientName = formData.ClientName
                .uwcaseid = formData.uwcaseid
                .HeartDiseaseQuestionnaire.Cardiomyopathy = formData.HeartDiseaseQuestionnaireCardiomyopathy
                .HeartDiseaseQuestionnaire.IschaemicHeartDisease = formData.HeartDiseaseQuestionnaireIschaemicHeartDisease
                .HeartDiseaseQuestionnaire.MitralOrOtherValve = formData.HeartDiseaseQuestionnaireMitralOrOtherValve
                .HeartDiseaseQuestionnaire.OtherDiagnosis = formData.HeartDiseaseQuestionnaireOtherDiagnosis
                .HeartDiseaseQuestionnaire.DetailsSpecificDiagnosis = formData.HeartDiseaseQuestionnaireDetailsSpecificDiagnosis
                .HeartDiseaseQuestionnaire.SymptomsAccompaniedByOther = formData.HeartDiseaseQuestionnaireSymptomsAccompaniedByOther
                .HeartDiseaseQuestionnaire.DescribeBodySymptoms = formData.HeartDiseaseQuestionnaireDescribeBodySymptoms
                .HeartDiseaseQuestionnaire.DateSymptomsInitiallyOccur = formData.HeartDiseaseQuestionnaireDateSymptomsInitiallyOccur
                .HeartDiseaseQuestionnaire.SymptomsRelatedWithEvent = formData.HeartDiseaseQuestionnaireSymptomsRelatedWithEvent
                .HeartDiseaseQuestionnaire.FrequencyOfTheSymptoms = formData.HeartDiseaseQuestionnaireFrequencyOfTheSymptoms
                .HeartDiseaseQuestionnaire.DetailsEventRelated = formData.HeartDiseaseQuestionnaireDetailsEventRelated
                .HeartDiseaseQuestionnaire.DuringOfTheSymptoms = formData.HeartDiseaseQuestionnaireDuringOfTheSymptoms
                .HeartDiseaseQuestionnaire.DateOfLastOccurrence = formData.HeartDiseaseQuestionnaireDateOfLastOccurrence
                .HeartDiseaseQuestionnaire.Suddenly = formData.HeartDiseaseQuestionnaireSuddenly
                .HeartDiseaseQuestionnaire.Gradually = formData.HeartDiseaseQuestionnaireGradually
                .HeartDiseaseQuestionnaire.AtRest = formData.HeartDiseaseQuestionnaireAtRest
                .HeartDiseaseQuestionnaire.OnlyOnPhysicalActivity = formData.HeartDiseaseQuestionnaireOnlyOnPhysicalActivity
                .HeartDiseaseQuestionnaire.SymptomsBetter = formData.HeartDiseaseQuestionnaireSymptomsBetter
                .HeartDiseaseQuestionnaire.SymptomsWorse = formData.HeartDiseaseQuestionnaireSymptomsWorse
                .HeartDiseaseQuestionnaire.YesConsultedSpecialist = formData.HeartDiseaseQuestionnaireYesConsultedSpecialist
                If formData.DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners.IsNotEmpty Then
                    Dim currentItem As InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitioners
                  
	            For Each itemData As DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem In formData.DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners
                        currentItem = (From _x In parametersData.HeartDiseaseQuestionnaire.DetailsOfSpecialists Where _x.IdDetails = itemData.IdDetails Select _x).FirstOrDefault()
                     
	                If currentItem.IsEmpty Then
                            currentItem = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitioners
                  
                            With currentItem

                                .PractitionerName = itemData.PractitionerName
                                .PhonePractitioner = itemData.PhonePractitioner
                                .eMailPractitioner = itemData.eMailPractitioner
                                .AddresPractitioner = itemData.AddresPractitioner
                                .IdDetails = itemData.IdDetails
                            End With
                        
                            parametersData.HeartDiseaseQuestionnaire.DetailsOfSpecialists.Add(currentItem)
                     
	                Else
                            With currentItem

                                .PractitionerName = itemData.PractitionerName
                                .PhonePractitioner = itemData.PhonePractitioner
                                .eMailPractitioner = itemData.eMailPractitioner
                                .AddresPractitioner = itemData.AddresPractitioner
                                .IdDetails = itemData.IdDetails
                            End With
                        End If
                    Next
                End If
                .HeartDiseaseQuestionnaire.TypeTreatmentHad = formData.HeartDiseaseQuestionnaireTypeTreatmentHad
                .HeartDiseaseQuestionnaire.StillReceivingTreatment = formData.HeartDiseaseQuestionnaireStillReceivingTreatment
                .HeartDiseaseQuestionnaire.DetailsStillRecievingTreatment = formData.HeartDiseaseQuestionnaireDetailsStillRecievingTreatment
                .HeartDiseaseQuestionnaire.SurgeryOrInvestigationContemplated = formData.HeartDiseaseQuestionnaireSurgeryOrInvestigationContemplated
                If formData.TreatmentPrescribed_TreatmentPrescribed.IsNotEmpty Then
                    Dim currentItem As InMotionGIT.Questionnaires.Complements.TreatmentPrescribed
                  
	            For Each itemData As TreatmentPrescribed_TreatmentPrescribedItem In formData.TreatmentPrescribed_TreatmentPrescribed
                        currentItem = (From _x In parametersData.HeartDiseaseQuestionnaire.DetailsMedicationsTaking Where _x.id = itemData.id Select _x).FirstOrDefault()
                     
	                If currentItem.IsEmpty Then
                            currentItem = New InMotionGIT.Questionnaires.Complements.TreatmentPrescribed
                  
                            With currentItem

                                .DatePeriod = itemData.DatePeriod
                                .Dosage = itemData.Dosage
                                .NameOfMedication = itemData.NameOfMedication
                                .id = itemData.id
                            End With
                        
                            parametersData.HeartDiseaseQuestionnaire.DetailsMedicationsTaking.Add(currentItem)
                     
	                Else
                            With currentItem

                                .DatePeriod = itemData.DatePeriod
                                .Dosage = itemData.Dosage
                                .NameOfMedication = itemData.NameOfMedication
                                .id = itemData.id
                            End With
                        End If
                    Next
                End If
                .HeartDiseaseQuestionnaire.CoronaryAngiogram = formData.HeartDiseaseQuestionnaireCoronaryAngiogram
                .HeartDiseaseQuestionnaire.ThalliumPerfusionScan = formData.HeartDiseaseQuestionnaireThalliumPerfusionScan
                .HeartDiseaseQuestionnaire.Resting = formData.HeartDiseaseQuestionnaireResting
                .HeartDiseaseQuestionnaire.Exercise = formData.HeartDiseaseQuestionnaireExercise
                .HeartDiseaseQuestionnaire.Endoscopy = formData.HeartDiseaseQuestionnaireEndoscopy
                .HeartDiseaseQuestionnaire.Echocardiogram = formData.HeartDiseaseQuestionnaireEchocardiogram
                .HeartDiseaseQuestionnaire.SestamibiStress = formData.HeartDiseaseQuestionnaireSestamibiStress
                .HeartDiseaseQuestionnaire.Other = formData.HeartDiseaseQuestionnaireOther
                .HeartDiseaseQuestionnaire.SpecifyOther = formData.HeartDiseaseQuestionnaireSpecifyOther
                .HeartDiseaseQuestionnaire.YesRestrictedInLifeStyle = formData.HeartDiseaseQuestionnaireYesRestrictedInLifeStyle
                If formData.DetailsAbsensesFromWork_DetailsAbsensesFromWork.IsNotEmpty Then
                    Dim currentItem As InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWork
                  
	            For Each itemData As DetailsAbsensesFromWork_DetailsAbsensesFromWorkItem In formData.DetailsAbsensesFromWork_DetailsAbsensesFromWork
                        currentItem = (From _x In parametersData.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle Where _x.id = itemData.id Select _x).FirstOrDefault()
                     
	                If currentItem.IsEmpty Then
                            currentItem = New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWork
                  
                            With currentItem

                                .DateFrom = itemData.DateFrom
                                .DateTo = itemData.DateTo
                                .Details = itemData.Details
                                .id = itemData.id
                            End With
                        
                            parametersData.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle.Add(currentItem)
                     
	                Else
                            With currentItem

                                .DateFrom = itemData.DateFrom
                                .DateTo = itemData.DateTo
                                .Details = itemData.Details
                                .id = itemData.id
                            End With
                        End If
                    Next
                End If
                .HeartDiseaseQuestionnaire.AdditionalInformation = formData.HeartDiseaseQuestionnaireAdditionalInformation
                .HeartDiseaseQuestionnaire.DateReceived = formData.HeartDiseaseQuestionnaireDateReceived
            End With

            Return parametersData
        End Function

        Private Shared Function ClassToEntryData(formData As EntryData, parametersData As HT5HeartDiseaseQuestionnaireUWParameters) As EntryData
            formData = New EntryData

            With formData
                .InstanceFormId = parametersData.InternalId
                .ClientName = parametersData.ClientName
                .uwcaseid = parametersData.uwcaseid
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireCardiomyopathy = parametersData.HeartDiseaseQuestionnaire.Cardiomyopathy
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireIschaemicHeartDisease = parametersData.HeartDiseaseQuestionnaire.IschaemicHeartDisease
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireMitralOrOtherValve = parametersData.HeartDiseaseQuestionnaire.MitralOrOtherValve
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireOtherDiagnosis = parametersData.HeartDiseaseQuestionnaire.OtherDiagnosis
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireDetailsSpecificDiagnosis = parametersData.HeartDiseaseQuestionnaire.DetailsSpecificDiagnosis
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireSymptomsAccompaniedByOther = parametersData.HeartDiseaseQuestionnaire.SymptomsAccompaniedByOther
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireDescribeBodySymptoms = parametersData.HeartDiseaseQuestionnaire.DescribeBodySymptoms
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireDateSymptomsInitiallyOccur = parametersData.HeartDiseaseQuestionnaire.DateSymptomsInitiallyOccur
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireSymptomsRelatedWithEvent = parametersData.HeartDiseaseQuestionnaire.SymptomsRelatedWithEvent
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireFrequencyOfTheSymptoms = parametersData.HeartDiseaseQuestionnaire.FrequencyOfTheSymptoms
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireDetailsEventRelated = parametersData.HeartDiseaseQuestionnaire.DetailsEventRelated
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireDuringOfTheSymptoms = parametersData.HeartDiseaseQuestionnaire.DuringOfTheSymptoms
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireDateOfLastOccurrence = parametersData.HeartDiseaseQuestionnaire.DateOfLastOccurrence
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireSuddenly = parametersData.HeartDiseaseQuestionnaire.Suddenly
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireGradually = parametersData.HeartDiseaseQuestionnaire.Gradually
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireAtRest = parametersData.HeartDiseaseQuestionnaire.AtRest
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireOnlyOnPhysicalActivity = parametersData.HeartDiseaseQuestionnaire.OnlyOnPhysicalActivity
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireSymptomsBetter = parametersData.HeartDiseaseQuestionnaire.SymptomsBetter
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireSymptomsWorse = parametersData.HeartDiseaseQuestionnaire.SymptomsWorse
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireYesConsultedSpecialist = parametersData.HeartDiseaseQuestionnaire.YesConsultedSpecialist
                End If
                .DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners = New List(Of DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem)

                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) AndAlso Not IsNothing(parametersData.HeartDiseaseQuestionnaire.DetailsOfSpecialists) Then
                    Dim newItem as DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem
                    
                    For Each itemData As InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitioners In parametersData.HeartDiseaseQuestionnaire.DetailsOfSpecialists
                        newItem = New DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem
                        
                        With newItem
                            .PractitionerName = itemData.PractitionerName
                            .PhonePractitioner = itemData.PhonePractitioner
                            .eMailPractitioner = itemData.eMailPractitioner
                            .AddresPractitioner = itemData.AddresPractitioner
                            .IdDetails = itemData.IdDetails                        
                        End With
                        
                        .DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners.Add(newItem)
                    Next
                End If


                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireTypeTreatmentHad = parametersData.HeartDiseaseQuestionnaire.TypeTreatmentHad
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireStillReceivingTreatment = parametersData.HeartDiseaseQuestionnaire.StillReceivingTreatment
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireDetailsStillRecievingTreatment = parametersData.HeartDiseaseQuestionnaire.DetailsStillRecievingTreatment
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireSurgeryOrInvestigationContemplated = parametersData.HeartDiseaseQuestionnaire.SurgeryOrInvestigationContemplated
                End If
                .TreatmentPrescribed_TreatmentPrescribed = New List(Of TreatmentPrescribed_TreatmentPrescribedItem)

                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) AndAlso Not IsNothing(parametersData.HeartDiseaseQuestionnaire.DetailsMedicationsTaking) Then
                    Dim newItem as TreatmentPrescribed_TreatmentPrescribedItem
                    
                    For Each itemData As InMotionGIT.Questionnaires.Complements.TreatmentPrescribed In parametersData.HeartDiseaseQuestionnaire.DetailsMedicationsTaking
                        newItem = New TreatmentPrescribed_TreatmentPrescribedItem
                        
                        With newItem
                            .DatePeriod = itemData.DatePeriod
                            .Dosage = itemData.Dosage
                            .NameOfMedication = itemData.NameOfMedication
                            .id = itemData.id                        
                        End With
                        
                        .TreatmentPrescribed_TreatmentPrescribed.Add(newItem)
                    Next
                End If


                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireCoronaryAngiogram = parametersData.HeartDiseaseQuestionnaire.CoronaryAngiogram
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireThalliumPerfusionScan = parametersData.HeartDiseaseQuestionnaire.ThalliumPerfusionScan
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireResting = parametersData.HeartDiseaseQuestionnaire.Resting
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireExercise = parametersData.HeartDiseaseQuestionnaire.Exercise
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireEndoscopy = parametersData.HeartDiseaseQuestionnaire.Endoscopy
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireEchocardiogram = parametersData.HeartDiseaseQuestionnaire.Echocardiogram
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireSestamibiStress = parametersData.HeartDiseaseQuestionnaire.SestamibiStress
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireOther = parametersData.HeartDiseaseQuestionnaire.Other
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireSpecifyOther = parametersData.HeartDiseaseQuestionnaire.SpecifyOther
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireYesRestrictedInLifeStyle = parametersData.HeartDiseaseQuestionnaire.YesRestrictedInLifeStyle
                End If
                .DetailsAbsensesFromWork_DetailsAbsensesFromWork = New List(Of DetailsAbsensesFromWork_DetailsAbsensesFromWorkItem)

                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) AndAlso Not IsNothing(parametersData.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle) Then
                    Dim newItem as DetailsAbsensesFromWork_DetailsAbsensesFromWorkItem
                    
                    For Each itemData As InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWork In parametersData.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle
                        newItem = New DetailsAbsensesFromWork_DetailsAbsensesFromWorkItem
                        
                        With newItem
                            .DateFrom = itemData.DateFrom
                            .DateTo = itemData.DateTo
                            .Details = itemData.Details
                            .id = itemData.id                        
                        End With
                        
                        .DetailsAbsensesFromWork_DetailsAbsensesFromWork.Add(newItem)
                    Next
                End If


                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireAdditionalInformation = parametersData.HeartDiseaseQuestionnaire.AdditionalInformation
                End If
                If Not IsNothing(parametersData.HeartDiseaseQuestionnaire) Then
                    .HeartDiseaseQuestionnaireDateReceived = parametersData.HeartDiseaseQuestionnaire.DateReceived
                End If
            End With

            Return formData
        End Function

#End Region

#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As HT5HeartDiseaseQuestionnaireUWParameters)
            If HttpContext.Current.Request.QueryString("uwcaseid").IsNotEmpty Then
                formData.uwcaseid = HttpContext.Current.Request.QueryString("uwcaseid")
            End If
            If HttpContext.Current.Request.QueryString("uwreqid").IsNotEmpty Then
                formData.uwreqid = HttpContext.Current.Request.QueryString("uwreqid")
            End If
            If HttpContext.Current.Request.QueryString("ClientName").IsNotEmpty Then
                formData.ClientName = HttpContext.Current.Request.QueryString("ClientName")
            End If
            If HttpContext.Current.Request.QueryString("StatusCase").IsNotEmpty Then
                formData.StatusCase = HttpContext.Current.Request.QueryString("StatusCase")
            End If
            If HttpContext.Current.Request.QueryString("StatusRequirement").IsNotEmpty Then
                formData.StatusRequirement = HttpContext.Current.Request.QueryString("StatusRequirement")
            End If
            If HttpContext.Current.Request.QueryString("fromPanel").IsNotEmpty Then
                formData.fromPanel = HttpContext.Current.Request.QueryString("fromPanel")
            End If
            If HttpContext.Current.Request.QueryString("caseLocked").IsNotEmpty Then
                formData.caseLocked = HttpContext.Current.Request.QueryString("caseLocked")
            End If
            If HttpContext.Current.Request.QueryString("IsAnonymous").IsNotEmpty Then
                formData.IsAnonymous = HttpContext.Current.Request.QueryString("IsAnonymous")
            End If
            If HttpContext.Current.Request.QueryString("UsercodeFASI").IsNotEmpty Then
                formData.UsercodeFASI = HttpContext.Current.Request.QueryString("UsercodeFASI")
            End If
            If HttpContext.Current.Request.QueryString("uwCaseIdInt64").IsNotEmpty Then
                formData.uwCaseIdInt64 = HttpContext.Current.Request.QueryString("uwCaseIdInt64")
            End If
        End Sub	

        Private Sub ValidateParametersInstance(ByRef formData As HT5HeartDiseaseQuestionnaireUWParameters)
            If IsNothing(formData.HeartDiseaseQuestionnaire) Then
                formData.HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire
            End If
            If IsNothing(formData.HeartDiseaseQuestionnaire.DetailsOfSpecialists) Then
                formData.HeartDiseaseQuestionnaire.DetailsOfSpecialists = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitionersCollection
            End If
            If IsNothing(formData.HeartDiseaseQuestionnaire.DetailsMedicationsTaking) Then
                formData.HeartDiseaseQuestionnaire.DetailsMedicationsTaking = New InMotionGIT.Questionnaires.Complements.TreatmentPrescribedCollection
            End If
            If IsNothing(formData.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle) Then
                formData.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle = New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWorkCollection
            End If

        End Sub

#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property ClientName As String
            <DataMember()> Public Property uwcaseid As Int64
            <DataMember()> Public Property HeartDiseaseQuestionnaireCardiomyopathy As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireIschaemicHeartDisease As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireMitralOrOtherValve As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireOtherDiagnosis As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireDetailsSpecificDiagnosis As System.String
            <DataMember()> Public Property HeartDiseaseQuestionnaireSymptomsAccompaniedByOther As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireDescribeBodySymptoms As System.String
            <DataMember()> Public Property HeartDiseaseQuestionnaireDateSymptomsInitiallyOccur As System.DateTime
            <DataMember()> Public Property HeartDiseaseQuestionnaireSymptomsRelatedWithEvent As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireFrequencyOfTheSymptoms As System.Int32
            <DataMember()> Public Property HeartDiseaseQuestionnaireDetailsEventRelated As System.String
            <DataMember()> Public Property HeartDiseaseQuestionnaireDuringOfTheSymptoms As System.String
            <DataMember()> Public Property HeartDiseaseQuestionnaireDateOfLastOccurrence As System.DateTime
            <DataMember()> Public Property HeartDiseaseQuestionnaireSuddenly As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireGradually As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireAtRest As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireOnlyOnPhysicalActivity As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireSymptomsBetter As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireSymptomsWorse As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireYesConsultedSpecialist As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireDetailsOfSpecialistsPractitionerName As System.String
            <DataMember()> Public Property HeartDiseaseQuestionnaireDetailsOfSpecialistsPhonePractitioner As System.String
            <DataMember()> Public Property HeartDiseaseQuestionnaireDetailsOfSpecialistseMailPractitioner As System.String
            <DataMember()> Public Property HeartDiseaseQuestionnaireDetailsOfSpecialistsAddresPractitioner As System.String
            <DataMember()> Public Property DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners As List(Of DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem)
            <DataMember()> Public Property HeartDiseaseQuestionnaireTypeTreatmentHad As System.Int32
            <DataMember()> Public Property HeartDiseaseQuestionnaireStillReceivingTreatment As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireDetailsStillRecievingTreatment As System.String
            <DataMember()> Public Property HeartDiseaseQuestionnaireSurgeryOrInvestigationContemplated As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireDetailsMedicationsTakingDatePeriod As System.String
            <DataMember()> Public Property HeartDiseaseQuestionnaireDetailsMedicationsTakingDosage As System.String
            <DataMember()> Public Property HeartDiseaseQuestionnaireDetailsMedicationsTakingNameOfMedication As System.String
            <DataMember()> Public Property TreatmentPrescribed_TreatmentPrescribed As List(Of TreatmentPrescribed_TreatmentPrescribedItem)
            <DataMember()> Public Property HeartDiseaseQuestionnaireCoronaryAngiogram As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireThalliumPerfusionScan As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireResting As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireExercise As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireEndoscopy As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireEchocardiogram As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireSestamibiStress As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireOther As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireSpecifyOther As System.String
            <DataMember()> Public Property HeartDiseaseQuestionnaireYesRestrictedInLifeStyle As System.Boolean
            <DataMember()> Public Property HeartDiseaseQuestionnaireDetailsRestrictedInLifeStyleDateFrom As System.DateTime
            <DataMember()> Public Property HeartDiseaseQuestionnaireDetailsRestrictedInLifeStyleDateTo As System.DateTime
            <DataMember()> Public Property HeartDiseaseQuestionnaireDetailsRestrictedInLifeStyleDetails As System.String
            <DataMember()> Public Property DetailsAbsensesFromWork_DetailsAbsensesFromWork As List(Of DetailsAbsensesFromWork_DetailsAbsensesFromWorkItem)
            <DataMember()> Public Property HeartDiseaseQuestionnaireAdditionalInformation As System.String
            <DataMember()> Public Property HeartDiseaseQuestionnaireDateReceived As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem

            <DataMember()> Public Property PractitionerName As System.String
            <DataMember()> Public Property PhonePractitioner As System.String
            <DataMember()> Public Property eMailPractitioner As System.String
            <DataMember()> Public Property AddresPractitioner As System.String
            <DataMember()> Public Property IdDetails As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class TreatmentPrescribed_TreatmentPrescribedItem

            <DataMember()> Public Property DatePeriod As System.String
            <DataMember()> Public Property Dosage As System.String
            <DataMember()> Public Property NameOfMedication As System.String
            <DataMember()> Public Property id As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class DetailsAbsensesFromWork_DetailsAbsensesFromWorkItem

            <DataMember()> Public Property DateFrom As System.DateTime
            <DataMember()> Public Property DateTo As System.DateTime
            <DataMember()> Public Property Details As System.String
            <DataMember()> Public Property id As System.Int32

        End Class

        <Serializable()>
        Public Class HT5HeartDiseaseQuestionnaireUWParameters
            Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of HT5HeartDiseaseQuestionnaireUWParameters)

            Public Property HeartDiseaseQuestionnaire As InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire
            Public Property uwcaseid As Int64
            Public Property uwreqid As Int64
            Public Property ClientName As String
            Public Property StatusCase As Int32
            Public Property StatusRequirement As Int32
            Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
            Public Property fromPanel As Boolean
            Public Property caseLocked As Boolean
            Public Property IsAnonymous As Boolean
            Public Property UsercodeFASI As Int32
            Public Property uwCaseIdInt64 As Int64
            Public Property ClientUser As InMotionGIT.Client.Entity.Contracts.Client

        End Class
#End Region

    End Class

End Namespace