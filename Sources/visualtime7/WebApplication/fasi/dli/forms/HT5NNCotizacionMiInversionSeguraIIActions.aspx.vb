'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.1.211.1 at 2018-11-02 12:23:55 PM model release 2, Form Generator v1.0.32.17
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class HT5NNCotizacionMiInversionSeguraIIActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing

            Try
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                    
                    With instance

                    End With                
                    
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                    SetDefaultValuesFromQueryString(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                    
                    If fromid.IsNotEmpty Then
                        GetTransferParameters(HT5NNCotizacionMiInversionSeguraIIParametersInstance, fromid)
                    End If
                Else          
                    instance.InstanceFormId = id.IfEmpty(urlid)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                End If

                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = String.Empty

                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    Form_Initialization(currentAction, HT5NNCotizacionMiInversionSeguraIIParametersInstance, resultData)
                Else
                    Form_Load(currentAction, HT5NNCotizacionMiInversionSeguraIIParametersInstance, resultData)
                End If


                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance) 
		        
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "Initialization", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
   
        <WebMethod(EnableSession:=True)>
        Public Shared Function ProfileBotonClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("ProfileBotonClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. Call 'Busca fondos con base al perfilador del cliente' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("context", formContext)
                .Add("ClientAge", HT5NNCotizacionMiInversionSeguraIIParametersInstance.RangeAge)
                .Add("ProcessDate", Date.Today)
                .Add("Parametro2", HT5NNCotizacionMiInversionSeguraIIParametersInstance.Parametro2)
                .Add("Parametro3", 1)
                .Add("Parametro4", HT5NNCotizacionMiInversionSeguraIIParametersInstance.Parametro3)
                .Add("FundsCollectionToOffer", HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicyProfileCollection)
                .Add("ProductFunds", HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToProductCollection)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("MainProcessClientProfileFunds", "d2117bdf-6db7-40f2-86c1-6932e7183aca", 2, WorkflowInArguments, True, True, "Me.AppRelativeVirtualPath", HT5NNCotizacionMiInversionSeguraIIParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicyProfileCollection = WorkflowOutArguments("FundsCollectionToOffer")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.FundsFound = WorkflowOutArguments("FundsFound")

                currentAction = SessionTrace("2. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.FundsFound = false Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.FundsFound = false Then

                    currentAction = SessionTrace("3. The message 'No se encontraron fo...' will displayed as 'Popup'")
                    ParametersToDictionary(HT5NNCotizacionMiInversionSeguraIIParametersInstance, parametersDictionary)
                    messageAction = "No se encontraron fondos para recomendar"
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifyPopup(messageAction)
                    currentAction = SessionTrace("4. button16.Visible = false, InvestmentFundRelatedToPolicyPerfilado.Visible = false")
                    currentAction = SessionTrace("4.1. button16.Visible = false...")
                    resultData.AddControlBehavior("button16", "hide")
                    currentAction = SessionTrace("4.2. InvestmentFundRelatedToPolicyPerfilado.Visible = false...")
                    resultData.AddControlBehavior("InvestmentFundRelatedToPolicyPerfiladoContainer", "hide")

                    Else
                    currentAction = SessionTrace("5. button16.Visible = true, button0.Visible = false, zone11.Visible = true")
                    currentAction = SessionTrace("5.1. button16.Visible = true...")
                    resultData.AddControlBehavior("button16", "show")
                    currentAction = SessionTrace("5.2. button0.Visible = false...")
                    resultData.AddControlBehavior("button0", "hide")
                    currentAction = SessionTrace("5.3. zone11.Visible = true...")
                    resultData.AddControlBehavior("zone11", "show")

                    currentAction = SessionTrace("6. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies' = New 'InMotionGIT.Policy.Entity'...'")
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicyCollection

                    currentAction = SessionTrace("7. For Each invfundpolicyItem2 As 'InMotionGIT.Policy.Entity...' In 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundR...'")
                    For Each invfundpolicyItem2 As InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy In HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicyProfileCollection

                        currentAction = SessionTrace("8. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies'.Add('invfundpolicyItem2')")
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies.Add(invfundpolicyItem2)

                                Next
                            End If

                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "ProfileBotonClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function button0Click(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("button0Click")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. Perfilar.Visible = false")
                currentAction = SessionTrace("1.1. Perfilar.Visible = false...")
                resultData.AddControlBehavior("Perfilar", "hide")

                currentAction = SessionTrace("2. EndZone.Visible = true")
                currentAction = SessionTrace("2.1. EndZone.Visible = true...")
                resultData.AddControlBehavior("EndZone", "show")

                currentAction = SessionTrace("3. GeneralInf.Visible = true, tabcontainer7.ActiveTab = GeneralInf")
                currentAction = SessionTrace("3.1. GeneralInf.Visible = true...")
                resultData.AddControlBehavior("GeneralInf", "show")
                currentAction = SessionTrace("3.2. tabcontainer7.ActiveTab = GeneralInf...")
                resultData.AddControlBehavior("GeneralInf", "active")


                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "button0Click", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function button16Click(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("button16Click")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies' = New 'InMotionGIT.Policy.Entity'...'")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicyCollection

                currentAction = SessionTrace("2. For Each investmentfundrelatedtopolicyItem As 'InMotionGIT.Policy.Entity...' In 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundR...'")
                For Each investmentfundrelatedtopolicyItem As InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy In HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicyProfileCollection

                    currentAction = SessionTrace("3. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies'.Add('investmentfundrelatedtopolicyItem')")
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies.Add(investmentfundrelatedtopolicyItem)

                    Next
                currentAction = SessionTrace("4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0...")
                currentAction = SessionTrace("4.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0

                currentAction = SessionTrace("5. For Each investmentfundrelatedtopolicyItem2 As 'InMotionGIT.Policy.Entity...' In 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation...'")
                For Each investmentfundrelatedtopolicyItem2 As InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy In HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies

                    currentAction = SessionTrace("6. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+(inv...")
                    currentAction = SessionTrace("6.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+(inv...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+(investmentfundrelatedtopolicyItem2.ProjectedProfitability/100)

                        Next
                currentAction = SessionTrace("7. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.GuaranteedInterestInInvestment = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds...")
                currentAction = SessionTrace("7.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.GuaranteedInterestInInvestment = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.GuaranteedInterestInInvestment = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds

                currentAction = SessionTrace("8. Perfilar.Visible = false")
                currentAction = SessionTrace("8.1. Perfilar.Visible = false...")
                resultData.AddControlBehavior("Perfilar", "hide")

                currentAction = SessionTrace("9. EndZone.Visible = true")
                currentAction = SessionTrace("9.1. EndZone.Visible = true...")
                resultData.AddControlBehavior("EndZone", "show")

                currentAction = SessionTrace("10. GeneralInf.Visible = true, tabcontainer7.ActiveTab = GeneralInf")
                currentAction = SessionTrace("10.1. GeneralInf.Visible = true...")
                resultData.AddControlBehavior("GeneralInf", "show")
                currentAction = SessionTrace("10.2. tabcontainer7.ActiveTab = GeneralInf...")
                resultData.AddControlBehavior("GeneralInf", "active")


                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "button16Click", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function CotizarClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("CotizarClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false...")
                currentAction = SessionTrace("1.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false

                currentAction = SessionTrace("2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effe...")
                currentAction = SessionTrace("2.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effe...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate)-year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate)

                currentAction = SessionTrace("3. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age < 18 Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age < 18 Then

                    currentAction = SessionTrace("4. The message 'No está permitido qu...' will displayed as 'Splash'")
                    ParametersToDictionary(HT5NNCotizacionMiInversionSeguraIIParametersInstance, parametersDictionary)
                    messageAction = "No está permitido que un menor de edad realice una solicitud de póliza via Internet. Por favor diríjase con su representante legal a nuestras oficinas para realizar la solicitud correspondiente."
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifySplash(messageAction)
                    currentAction = SessionTrace("5. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")
                    currentAction = SessionTrace("5.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true

                    End If
                currentAction = SessionTrace("6. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("7. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0...")
                    currentAction = SessionTrace("7.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0

                    currentAction = SessionTrace("8. For Each investmentfundrelatedtopolicyItem As 'InMotionGIT.Policy.Entity...' In 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation...'")
                    For Each investmentfundrelatedtopolicyItem As InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy In HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies

                        currentAction = SessionTrace("9. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+inve...")
                        currentAction = SessionTrace("9.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+inve...")

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+investmentfundrelatedtopolicyItem.PercentageShare

                                Next
                            End If
                currentAction = SessionTrace("10. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("11. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds <> 100 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds <> 100 Then

                        currentAction = SessionTrace("12. The message 'El total invertido e...' will displayed as 'Popup'")
                        ParametersToDictionary(HT5NNCotizacionMiInversionSeguraIIParametersInstance, parametersDictionary)
                        messageAction = "El total invertido en los fondos debe ser el 100%"
                        messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                        resultData.AddNotifyPopup(messageAction)
                        currentAction = SessionTrace("13. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")
                        currentAction = SessionTrace("13.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true

                                        End If
                                    End If
                currentAction = SessionTrace("14. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("15. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0...")
                    currentAction = SessionTrace("15.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0

                    currentAction = SessionTrace("16. For Each investmentfundrelatedtopolicyItem2 As 'InMotionGIT.Policy.Entity...' In 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation...'")
                    For Each investmentfundrelatedtopolicyItem2 As InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy In HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies

                        currentAction = SessionTrace("17. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+(inv...")
                        currentAction = SessionTrace("17.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+(inv...")

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+(investmentfundrelatedtopolicyItem2.PercentageShare*investmentfundrelatedtopolicyItem2.ProjectedProfitability/100)

                                                Next
                    currentAction = SessionTrace("18. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.GuaranteedInterestInInvestment = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds...")
                    currentAction = SessionTrace("18.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.GuaranteedInterestInInvestment = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.GuaranteedInterestInInvestment = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds

                    currentAction = SessionTrace("19. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected...")
                    currentAction = SessionTrace("19.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected

                    currentAction = SessionTrace("20. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.AnnualPremium = 0...")
                    currentAction = SessionTrace("20.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.AnnualPremium = 0...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.AnnualPremium = 0
                    currentAction = SessionTrace("20.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Currency = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Currency...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Currency = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Currency

                    currentAction = SessionTrace("21. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.InsuredAmount = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineO...")
                    currentAction = SessionTrace("21.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.InsuredAmount = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineO...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.InsuredAmount = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation

                    currentAction = SessionTrace("25. Call 'Asigna módulos seleccionados por defecto' workflow in Synchronous mode with tracking")
                    WorkflowInArguments = New Dictionary(Of String, Object)

                    With WorkflowInArguments
                    .Add("context", formContext)
                    .Add("ModulosRiskInformation", HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Modules)
                    .Add("ProcessDate", HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate)
                    .Add("LineOfBusiness", HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LineOfBusiness)
                    .Add("ProductCode", HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.ProductCode)
                    .Add("Currency", HT5NNCotizacionMiInversionSeguraIIParametersInstance.Currency)
                    End With

                    WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("AsignaModulosPorDefecto", "f7b4e740-4915-411e-bc5b-a5027c73d125", 0, WorkflowInArguments, True, True, "Me.AppRelativeVirtualPath", HT5NNCotizacionMiInversionSeguraIIParametersInstance.InternalId)

                    currentAction += "'Mapping Outputs'"
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Modules = WorkflowOutArguments("ModulosRiskInformation")

                    currentAction = SessionTrace("26. Call Shared Sub 'Coverage Rating' with parameters (RiskInformation Object, Error List)")
InMotionGIT.PolicyManager.Services.Rating.Calculate.Process(riskInformation:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation, errors:=formContext.Errors)

                    currentAction = SessionTrace("27. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.AnnualPremium = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.TotalOrig...")
                    currentAction = SessionTrace("27.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.AnnualPremium = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.TotalOrig...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.AnnualPremium = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.TotalOriginalAnnualPremium

                    currentAction = SessionTrace("28. TcoverCollection.Visible = true, label8.Visible = true, label5.Visible = false")
                    currentAction = SessionTrace("28.1. TcoverCollection.Visible = true...")
                    resultData.AddControlBehavior("TcoverCollection", "show")
                    currentAction = SessionTrace("28.2. label8.Visible = true...")
                    resultData.AddControlBehavior("label8", "show")
                    currentAction = SessionTrace("28.3. label5.Visible = false...")
                    resultData.AddControlBehavior("label5", "hide")

                    currentAction = SessionTrace("29. Proyectar.Visible = true, label8.Visible = true, label6.Visible = true...")
                    currentAction = SessionTrace("29.1. Proyectar.Visible = true...")
                    resultData.AddControlBehavior("Proyectar", "show")
                    currentAction = SessionTrace("29.2. label8.Visible = true...")
                    resultData.AddControlBehavior("label8", "show")
                    currentAction = SessionTrace("29.3. label6.Visible = true...")
                    resultData.AddControlBehavior("label6", "show")
                    currentAction = SessionTrace("29.4. zone2.Visible = true...")
                    resultData.AddControlBehavior("zone2", "show")

                    currentAction = SessionTrace("30. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments Is Null Or Empty  OR HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments = 0 Then")
                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments) OrElse HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments = 0 Then

                        currentAction = SessionTrace("31. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.AnnualPre...")
                        currentAction = SessionTrace("31.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.AnnualPre...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.AnnualPremium

                                                    End If
                    currentAction = SessionTrace("32. ProyeccionInf.Visible = true")
                    currentAction = SessionTrace("32.1. ProyeccionInf.Visible = true...")
                    resultData.AddControlBehavior("ProyeccionInf", "show")

                    currentAction = SessionTrace("33. EndZone.Visible = true, Acepto.Visible = true")
                    currentAction = SessionTrace("33.1. EndZone.Visible = true...")
                    resultData.AddControlBehavior("EndZone", "show")
                    currentAction = SessionTrace("33.2. Acepto.Visible = true...")
                    resultData.AddControlBehavior("Acepto", "show")

                                                End If

                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "CotizarClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function AceptoClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("AceptoClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. EndZone.Visible = false")
                currentAction = SessionTrace("1.1. EndZone.Visible = false...")
                resultData.AddControlBehavior("EndZone", "hide")

                currentAction = SessionTrace("2. tab3.Visible = true, tabcontainer7.ActiveTab = tab3")
                currentAction = SessionTrace("2.1. tab3.Visible = true...")
                resultData.AddControlBehavior("tab3", "show")
                currentAction = SessionTrace("2.2. tabcontainer7.ActiveTab = tab3...")
                resultData.AddControlBehavior("tab3", "active")

                currentAction = SessionTrace("3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1...")
                currentAction = SessionTrace("3.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1
                currentAction = SessionTrace("3.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Country = 58...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Country = 58
                currentAction = SessionTrace("3.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = 9998...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = 9998

                currentAction = SessionTrace("4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
                currentAction = SessionTrace("4.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                currentAction = SessionTrace("4.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
                currentAction = SessionTrace("4.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address

                currentAction = SessionTrace("5. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                currentAction = SessionTrace("5.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1

                currentAction = SessionTrace("6. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                currentAction = SessionTrace("6.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1

                currentAction = SessionTrace("7. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                currentAction = SessionTrace("7.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1
                currentAction = SessionTrace("7.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = 3...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = 3
                currentAction = SessionTrace("7.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany.Code = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany.Code = 1
                currentAction = SessionTrace("7.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6

                currentAction = SessionTrace("8. HT5NNCotizacionMiInversionSeguraIIParametersInstance.CurrentYear = year(Date.Today)...")
                currentAction = SessionTrace("8.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.CurrentYear = year(Date.Today)...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.CurrentYear = year(Date.Today)

                currentAction = SessionTrace("9. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1...")
                currentAction = SessionTrace("9.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1
                currentAction = SessionTrace("9.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Country = 58...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Country = 58
                currentAction = SessionTrace("9.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = 9998...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = 9998

                currentAction = SessionTrace("10. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
                currentAction = SessionTrace("10.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                currentAction = SessionTrace("10.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
                currentAction = SessionTrace("10.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address

                currentAction = SessionTrace("11. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                currentAction = SessionTrace("11.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID
                currentAction = SessionTrace("11.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1
                currentAction = SessionTrace("11.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID

                currentAction = SessionTrace("12. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                currentAction = SessionTrace("12.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID
                currentAction = SessionTrace("12.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1
                currentAction = SessionTrace("12.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID

                currentAction = SessionTrace("13. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                currentAction = SessionTrace("13.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1
                currentAction = SessionTrace("13.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = 3...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = 3
                currentAction = SessionTrace("13.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany.Code = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany.Code = 1
                currentAction = SessionTrace("13.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6

                currentAction = SessionTrace("14. If (HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID Is Null Or Empty  OR HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) Then")
                If (IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID) OrElse HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) Then

                    currentAction = SessionTrace("15. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_966270e78d804bd882cf8764df48897f As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_966270e78d804bd882cf8764df48897f = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany, recordOwnerType:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType, recordOwnerId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_966270e78d804bd882cf8764df48897f
                    isNullResult = (IsNothing(_AddressDLICollection_966270e78d804bd882cf8764df48897f))

                    currentAction = SessionTrace("16. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                        currentAction = SessionTrace("17. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                        currentAction = SessionTrace("17.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).AddressID
                        currentAction = SessionTrace("17.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("18. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddresseMailDLI_6f7af0c1f13e4f07bae9c950e2f826c6 As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                        _AddresseMailDLI_6f7af0c1f13e4f07bae9c950e2f826c6 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = _AddresseMailDLI_6f7af0c1f13e4f07bae9c950e2f826c6
                        isNullResult = (IsNothing(_AddresseMailDLI_6f7af0c1f13e4f07bae9c950e2f826c6))

                            End If
                    currentAction = SessionTrace("19. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                    currentAction = SessionTrace("19.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1
                    currentAction = SessionTrace("19.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                    currentAction = SessionTrace("19.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1
                    currentAction = SessionTrace("19.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1

                    currentAction = SessionTrace("20. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_6c44e64a103b454994b03076d5df4c7e As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_6c44e64a103b454994b03076d5df4c7e = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_6c44e64a103b454994b03076d5df4c7e
                    isNullResult = (IsNothing(_AddressDLICollection_6c44e64a103b454994b03076d5df4c7e))

                    currentAction = SessionTrace("21. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                        currentAction = SessionTrace("22. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                        currentAction = SessionTrace("22.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).AddressID
                        currentAction = SessionTrace("22.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("23. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddressPhysicalAddressDLI_da61238ef5bb44aca5af60b87c7f37f3 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                        _AddressPhysicalAddressDLI_da61238ef5bb44aca5af60b87c7f37f3 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_da61238ef5bb44aca5af60b87c7f37f3
                        isNullResult = (IsNothing(_AddressPhysicalAddressDLI_da61238ef5bb44aca5af60b87c7f37f3))

                                Else
                        currentAction = SessionTrace("24. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                        currentAction = SessionTrace("24.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2

                        currentAction = SessionTrace("25. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                        Dim _AddressDLICollection_8b4a0a07a6884eb39eb3030e41e99cac As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                        _AddressDLICollection_8b4a0a07a6884eb39eb3030e41e99cac = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_8b4a0a07a6884eb39eb3030e41e99cac
                        isNullResult = (IsNothing(_AddressDLICollection_8b4a0a07a6884eb39eb3030e41e99cac))

                        currentAction = SessionTrace("26. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                        If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                            currentAction = SessionTrace("27. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                            currentAction = SessionTrace("27.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).AddressID
                            currentAction = SessionTrace("27.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                            currentAction = SessionTrace("28. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                            Dim _AddressPhysicalAddressDLI_7663b0f16a0f4cc0a74ff71312d5cbc5 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                            _AddressPhysicalAddressDLI_7663b0f16a0f4cc0a74ff71312d5cbc5 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_7663b0f16a0f4cc0a74ff71312d5cbc5
                            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_7663b0f16a0f4cc0a74ff71312d5cbc5))

                                            Else
                            currentAction = SessionTrace("29. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                            currentAction = SessionTrace("29.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0
                            currentAction = SessionTrace("29.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1

                            currentAction = SessionTrace("30. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0...")
                            currentAction = SessionTrace("30.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0
                            currentAction = SessionTrace("30.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0
                            currentAction = SessionTrace("30.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                            currentAction = SessionTrace("30.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1

                                                End If
                                            End If
                                        End If
                currentAction = SessionTrace("31. If (HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID Not Is Null Or Not Empty  AND HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0) Then")
                If (Not IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID) AndAlso HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0) Then

                    currentAction = SessionTrace("32. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_798a342a5d7d48968e7a0d698db1b379 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_798a342a5d7d48968e7a0d698db1b379 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_798a342a5d7d48968e7a0d698db1b379
                    isNullResult = (IsNothing(_AddressDLICollection_798a342a5d7d48968e7a0d698db1b379))

                    currentAction = SessionTrace("33. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                        currentAction = SessionTrace("34. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                        currentAction = SessionTrace("34.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("35. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddresseMailDLI_c9179ef834a045b3871bebd63a1d0115 As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                        _AddresseMailDLI_c9179ef834a045b3871bebd63a1d0115 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = _AddresseMailDLI_c9179ef834a045b3871bebd63a1d0115
                        isNullResult = (IsNothing(_AddresseMailDLI_c9179ef834a045b3871bebd63a1d0115))

                                                    End If
                    currentAction = SessionTrace("36. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                    currentAction = SessionTrace("36.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1
                    currentAction = SessionTrace("36.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                    currentAction = SessionTrace("36.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1
                    currentAction = SessionTrace("36.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1

                    currentAction = SessionTrace("37. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_2a2538bc4e5d403890795c7dd345100b As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_2a2538bc4e5d403890795c7dd345100b = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_2a2538bc4e5d403890795c7dd345100b
                    isNullResult = (IsNothing(_AddressDLICollection_2a2538bc4e5d403890795c7dd345100b))

                    currentAction = SessionTrace("38. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                        currentAction = SessionTrace("39. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                        currentAction = SessionTrace("39.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("40. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddressPhysicalAddressDLI_af33228217e54a0698a9397987f88e70 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                        _AddressPhysicalAddressDLI_af33228217e54a0698a9397987f88e70 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_af33228217e54a0698a9397987f88e70
                        isNullResult = (IsNothing(_AddressPhysicalAddressDLI_af33228217e54a0698a9397987f88e70))

                                                        Else
                        currentAction = SessionTrace("41. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                        currentAction = SessionTrace("41.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2

                        currentAction = SessionTrace("42. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                        Dim _AddressDLICollection_39889c6f5482482781c4973216ae1713 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                        _AddressDLICollection_39889c6f5482482781c4973216ae1713 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_39889c6f5482482781c4973216ae1713
                        isNullResult = (IsNothing(_AddressDLICollection_39889c6f5482482781c4973216ae1713))

                        currentAction = SessionTrace("43. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                        If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                            currentAction = SessionTrace("44. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                            currentAction = SessionTrace("44.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                            currentAction = SessionTrace("45. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                            Dim _AddressPhysicalAddressDLI_48e7c0c630b441b3b59a085685bac1bc As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                            _AddressPhysicalAddressDLI_48e7c0c630b441b3b59a085685bac1bc = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_48e7c0c630b441b3b59a085685bac1bc
                            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_48e7c0c630b441b3b59a085685bac1bc))

                                                                    Else
                            currentAction = SessionTrace("46. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0...")
                            currentAction = SessionTrace("46.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0
                            currentAction = SessionTrace("46.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0
                            currentAction = SessionTrace("46.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                            currentAction = SessionTrace("46.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1

                            currentAction = SessionTrace("47. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                            currentAction = SessionTrace("47.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0
                            currentAction = SessionTrace("47.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1

                                                                        End If
                                                                    End If
                                                                End If
                currentAction = SessionTrace("48. ClientFirstName.Visible = true, ClientLastName.Visible = true, ClientLastName2.Visible = true...")
                currentAction = SessionTrace("48.1. ClientFirstName.Visible = true...")
                resultData.AddControlBehavior("ClientFirstName", "show")
                currentAction = SessionTrace("48.2. ClientLastName.Visible = true...")
                resultData.AddControlBehavior("ClientLastName", "show")
                currentAction = SessionTrace("48.3. ClientLastName2.Visible = true...")
                resultData.AddControlBehavior("ClientLastName2", "show")
                currentAction = SessionTrace("48.4. ClientGender.Enabled = false...")
                resultData.AddControlBehavior("ClientGender", "disabled")
                currentAction = SessionTrace("48.5. ClientSmokerIndicator.Enabled = false...")
                resultData.AddControlBehavior("ClientSmokerIndicator", "disabled")
                currentAction = SessionTrace("48.6. ClientBirthDate.Enabled = false...")
                resultData.AddControlBehavior("ClientBirthDate", "disabled")

                currentAction = SessionTrace("49. Cotizar.Visible = false, button14.Visible = false, Acepto.Visible = true")
                currentAction = SessionTrace("49.1. Cotizar.Visible = false...")
                resultData.AddControlBehavior("Cotizar", "hide")
                currentAction = SessionTrace("49.2. button14.Visible = false...")
                resultData.AddControlBehavior("button14", "hide")
                currentAction = SessionTrace("49.3. Acepto.Visible = true...")
                resultData.AddControlBehavior("Acepto", "show")

                currentAction = SessionTrace("50. zone24.Visible = true, ZoneInvestmentFundRelatedToPolicy.Enabled = false, button14.Visible = false...")
                currentAction = SessionTrace("50.1. zone24.Visible = true...")
                resultData.AddControlBehavior("zone24", "show")
                currentAction = SessionTrace("50.2. ZoneInvestmentFundRelatedToPolicy.Enabled = false...")
                resultData.AddControlBehavior("ZoneInvestmentFundRelatedToPolicy", "disabled")
                currentAction = SessionTrace("50.3. button14.Visible = false...")
                resultData.AddControlBehavior("button14", "hide")
                currentAction = SessionTrace("50.4. zone2.Visible = true...")
                resultData.AddControlBehavior("zone2", "show")
                currentAction = SessionTrace("50.5. label6.Visible = true...")
                resultData.AddControlBehavior("label6", "show")
                currentAction = SessionTrace("50.6. label7.Visible = true...")
                resultData.AddControlBehavior("label7", "show")
                currentAction = SessionTrace("50.7. label9.Visible = true...")
                resultData.AddControlBehavior("label9", "show")
                currentAction = SessionTrace("50.8. eMailAddressDefault.Visible = true...")
                resultData.AddControlBehavior("eMailAddressDefault", "show")

                currentAction = SessionTrace("51. zoneemail.Enabled = true")
                currentAction = SessionTrace("51.1. zoneemail.Enabled = true...")
                resultData.AddControlBehavior("zoneemail", "enabled")

                currentAction = SessionTrace("52. Proyectar.Visible = false, label8.Visible = false")
                currentAction = SessionTrace("52.1. Proyectar.Visible = false...")
                resultData.AddControlBehavior("Proyectar", "hide")
                currentAction = SessionTrace("52.2. label8.Visible = false...")
                resultData.AddControlBehavior("label8", "hide")

                currentAction = SessionTrace("53. zone8.Visible = true, label7.Visible = true, zone2.Visible = true...")
                currentAction = SessionTrace("53.1. zone8.Visible = true...")
                resultData.AddControlBehavior("zone8", "show")
                currentAction = SessionTrace("53.2. label7.Visible = true...")
                resultData.AddControlBehavior("label7", "show")
                currentAction = SessionTrace("53.3. zone2.Visible = true...")
                resultData.AddControlBehavior("zone2", "show")
                currentAction = SessionTrace("53.4. label9.Visible = true...")
                resultData.AddControlBehavior("label9", "show")
                currentAction = SessionTrace("53.5. eMailAddressDefault.Visible = true...")
                resultData.AddControlBehavior("eMailAddressDefault", "show")
                currentAction = SessionTrace("53.6. zone2.Enabled = false...")
                resultData.AddControlBehavior("zone2", "disabled")
                currentAction = SessionTrace("53.7. Proyectar.Visible = false...")
                resultData.AddControlBehavior("Proyectar", "hide")
                currentAction = SessionTrace("53.8. AceptarProyeccion.Visible = false...")
                resultData.AddControlBehavior("AceptarProyeccion", "hide")


                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "AceptoClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function ProyectarClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("ProyectarClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false...")
                currentAction = SessionTrace("1.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false

                currentAction = SessionTrace("2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded...")
                currentAction = SessionTrace("2.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded

                currentAction = SessionTrace("3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                currentAction = SessionTrace("3.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID

                currentAction = SessionTrace("4. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments < HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.AnnualPremium Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments < HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.AnnualPremium Then

                    currentAction = SessionTrace("5. The message 'El aporte anual no e...' will displayed as 'Popup'")
                    ParametersToDictionary(HT5NNCotizacionMiInversionSeguraIIParametersInstance, parametersDictionary)
                    messageAction = "El aporte anual no es suficiente para el pago anual de la prima. Por favor indiqe un monto superior"
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifyPopup(messageAction)
                    currentAction = SessionTrace("6. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")
                    currentAction = SessionTrace("6.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true

                    End If
                currentAction = SessionTrace("7. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("8. ProyeccionInf.Visible = true, Perfilar.Visible = false")
                    currentAction = SessionTrace("8.1. ProyeccionInf.Visible = true...")
                    resultData.AddControlBehavior("ProyeccionInf", "show")
                    currentAction = SessionTrace("8.2. Perfilar.Visible = false...")
                    resultData.AddControlBehavior("Perfilar", "hide")

                    currentAction = SessionTrace("9. HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaNacimiento = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                    currentAction = SessionTrace("9.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaNacimiento = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaNacimiento = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate

                    currentAction = SessionTrace("10. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PaymentsPlans' = New 'InMotionGIT.Policy.Entity'...'")
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PaymentsPlans = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlanCollection

                    currentAction = SessionTrace("11. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.LowestLimitOfPolicyYear = 1...")
                    currentAction = SessionTrace("11.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.LowestLimitOfPolicyYear = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.LowestLimitOfPolicyYear = 1
                    currentAction = SessionTrace("11.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProductCode = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.ProductCo...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProductCode = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.ProductCode
                    currentAction = SessionTrace("11.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.LineOfBusiness = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LineOfBus...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.LineOfBusiness = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LineOfBusiness
                    currentAction = SessionTrace("11.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.RecordEffectiveDate = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effective...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.RecordEffectiveDate = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate
                    currentAction = SessionTrace("11.5. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.HighestLimitOfPolicyYear = 99...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.HighestLimitOfPolicyYear = 99
                    currentAction = SessionTrace("11.6. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.IsDirty = true...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.IsDirty = true
                    currentAction = SessionTrace("11.7. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.IsNew = true...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.IsNew = true
                    currentAction = SessionTrace("11.8. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.PolicyID = 0...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.PolicyID = 0

                    currentAction = SessionTrace("12. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PaymentsPlans'.Add('HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan')")
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PaymentsPlans.Add(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan)

                    currentAction = SessionTrace("13. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.ActuarialAge = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effe...")
                    currentAction = SessionTrace("13.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.ActuarialAge = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effe...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.ActuarialAge = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate)-year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate)

                    currentAction = SessionTrace("14. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAge = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effe...")
                    currentAction = SessionTrace("14.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAge = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effe...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAge = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate)-year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate)

                    currentAction = SessionTrace("15. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.MaximumAge = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineO...")
                    currentAction = SessionTrace("15.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.MaximumAge = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineO...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.MaximumAge = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.ActuarialAge+20

                    currentAction = SessionTrace("16. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.AgreedProjectedAnnualPremium = HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnn...")
                    currentAction = SessionTrace("16.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.AgreedProjectedAnnualPremium = HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnn...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.AgreedProjectedAnnualPremium = HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments

                    currentAction = SessionTrace("17. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuranceDuration = 0...")
                    currentAction = SessionTrace("17.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuranceDuration = 0...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuranceDuration = 0

                    currentAction = SessionTrace("18. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.DurationOfPayments = 99...")
                    currentAction = SessionTrace("18.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.DurationOfPayments = 99...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.DurationOfPayments = 99
                    currentAction = SessionTrace("18.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfPaymentsPeriod = 5...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfPaymentsPeriod = 5
                    currentAction = SessionTrace("18.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfDurationOfPaymentsNose = 0...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfDurationOfPaymentsNose = 0
                    currentAction = SessionTrace("18.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfDuration = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfDuration = 1
                    currentAction = SessionTrace("18.5. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PolicyModule = 2...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PolicyModule = 2

                        End If
                currentAction = SessionTrace("19. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("20. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.PolicyExistPreviously = false Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.PolicyExistPreviously = false Then

                        currentAction = SessionTrace("22. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = 00000000009998...")
                        currentAction = SessionTrace("22.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = 00000000009998...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = 00000000009998

                        currentAction = SessionTrace("23. Call 'Crea una poliza para realizar la proyeccion en la cotizacion de vida inversion' workflow in Synchronous mode with tracking")
                        WorkflowInArguments = New Dictionary(Of String, Object)

                        With WorkflowInArguments
                        .Add("context", formContext)
                        .Add("RiskInformation", HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation)
                        End With

                        WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("CreaPolizaParaProyeccionDemo", "fc9578ec-e90e-45fd-80aa-b474243309b9", 1, WorkflowInArguments, True, True, "Me.AppRelativeVirtualPath", HT5NNCotizacionMiInversionSeguraIIParametersInstance.InternalId)

                        currentAction += "'Mapping Outputs'"
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaFinal = WorkflowOutArguments("FechaFinal")
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.PolicyIDProyeccion = WorkflowOutArguments("PolizaProyeccion")

                        currentAction = SessionTrace("24. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado...")
                        currentAction = SessionTrace("24.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado

                                    End If
                    currentAction = SessionTrace("25. Call INSUDB.UPDATE_CHRG_VIL7002PKG.INSCALILUSTRATION ('UPDATE_CHRG_VIL7002PKG.INSCALILUSTRATION')")
                         With New DataManagerFactory(True, "UPDATE_CHRG_VIL7002PKG.INSCALILUSTRATION", "Linked.LatCombined")
                        .AddParameter("SCERTYPE", DbType.AnsiStringFixedLength, 1, ("2" = String.Empty), "2")
                        .AddParameter("NBRANCH", DbType.Decimal, 5, False, 2)
                        .AddParameter("NPRODUCT", DbType.Decimal, 5, False, 605)
                        .AddParameter("NUSERCODE", DbType.Decimal, 5, False, 9998)
                        .AddParameter("DEFFECDATE", DbType.DateTime, 0, (HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate = Date.MinValue), HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate)
                        .AddParameter("SKEY", DbType.AnsiString, 20, (HT5NNCotizacionMiInversionSeguraIIParametersInstance.ProcedureKeyValue = String.Empty), HT5NNCotizacionMiInversionSeguraIIParametersInstance.ProcedureKeyValue, ParameterDirection.InputOutput)
                        .AddParameter("NOPTION", DbType.Decimal, 38, False, 3)
                        .AddParameter("NVP_INITIAL", DbType.Decimal, 18, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorNulo)
                        .AddParameter("NPOLICY", DbType.Decimal, 10, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.PolicyIDProyeccion)
                        .AddParameter("NCERTIF", DbType.Decimal, 10, False, 0)
                        .AddParameter("NINTWARR", DbType.Decimal, 8, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.GuaranteedInterestInInvestment)
                        .AddParameter("NINTWARRSAVING", DbType.Decimal, 8, False, 0)
                        .AddParameter("DBIRTHDATE", DbType.DateTime, 0, (HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaNacimiento = Date.MinValue), HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaNacimiento)
                        .AddParameter("DEFFECDATE_TO", DbType.DateTime, 0, (HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaFinal = Date.MinValue), HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaFinal)
                        .AddParameter("NPREMDEAL_ANU", DbType.Decimal, 18, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments)
                        .AddParameter("NINTWARR2", DbType.Decimal, 8, False, 0)
                        .AddParameter("NINTWARRSAVING2", DbType.Decimal, 8, False, 0)
                        .AddParameter("NTOP_AGE", DbType.Decimal, 3, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.MaximumAge)
                        .AddParameter("NCAUSE", DbType.Decimal, 5, False, 4)
                        .AddParameter("NIDPROCES", DbType.Decimal, 10, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorNulo)
 
                        .ProcedureExecute()
                    If Not IsNothing(.ParameterByName("SKEY")) AndAlso Not IsNothing(.ParameterByName("SKEY").Value) Then
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.ProcedureKeyValue = .ParameterByName("SKEY").Value
                    End If

                End With


                    currentAction = SessionTrace("26. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.PROJECTVULCollection' = New 'InMotionGIT.Policy.Entity'...'")
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PROJECTVULCollection = New InMotionGIT.Policy.Entity.Contracts.PROJECTVULCollection

                    currentAction = SessionTrace("27. SELECT PROJECTVUL.NBRANCH, PROJECTVUL.SCERTYPE, PROJECTVUL.NPRODUCT FROM PROJECTVUL... WHERE PROJECTVUL.NYEAR <= 30 AND PROJECTVUL.NPOLICY = HT5NNCotizacionMiInversionSeguraIIParametersInstance.PolicyIDProyeccion )")
                    isFoundData = False
                           With New DataManagerFactory("SELECT PROJECTVUL.NBRANCH, PROJECTVUL.SCERTYPE, PROJECTVUL.NPRODUCT, PROJECTVUL.NPOLICY, PROJECTVUL.NYEAR, PROJECTVUL.NAGE, PROJECTVUL.NPREMIUM, PROJECTVUL.NVP, PROJECTVUL.NSURRAMOUNT, PROJECTVUL.NCAPITAL FROM PROJECTVUL PROJECTVUL  WHERE (PROJECTVUL.NYEAR <= 30 AND PROJECTVUL.NPOLICY = @:PROJECTVULNPOLICY1) ORDER BY PROJECTVUL.NYEAR ASC", "PROJECTVUL", "Linked.LatCombined")
.AddParameter("PROJECTVULNPOLICY1", DbType.Int32, 10, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.PolicyIDProyeccion)
 
            selectDataTableItem = .QueryExecuteToTable(True)  
        End With
                    With selectDataTableItem
                            If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                                isFoundData = True 
                                HT5NNCotizacionMiInversionSeguraIIParametersInstance.PROJECTVULCollection = New InMotionGIT.Policy.Entity.Contracts.PROJECTVULCollection 
                                Dim newItem As InMotionGIT.Policy.Entity.Contracts.PROJECTVUL 
                                For Each itemData As DataRow In .Rows
                                     newItem = New InMotionGIT.Policy.Entity.Contracts.PROJECTVUL
                        newItem.YearOfThePolicy = itemData.NumericValue("NYEAR") 
                        newItem.InsuredAge = itemData.NumericValue("NAGE") 
                        newItem.AccumulatdAmount = itemData.NumericValue("NPREMIUM") 
                        newItem.PolicyValueOfProjectedProfitablity = itemData.NumericValue("NVP") 
                        newItem.SurrenderAvailableAmount = itemData.NumericValue("NSURRAMOUNT") 
                        newItem.DeathCoverageAmount = itemData.NumericValue("NCAPITAL") 

                                      HT5NNCotizacionMiInversionSeguraIIParametersInstance.PROJECTVULCollection.Add(newItem)
                                Next
                            End If
                    End With

                    currentAction = SessionTrace("28. tabcontainer7.ActiveTab = ProyeccionInf, zone12.Visible = true")
                    currentAction = SessionTrace("28.1. tabcontainer7.ActiveTab = ProyeccionInf...")
                    resultData.AddControlBehavior("ProyeccionInf", "active")
                    currentAction = SessionTrace("28.2. zone12.Visible = true...")
                    resultData.AddControlBehavior("zone12", "show")

                                End If

                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "ProyectarClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function AceptarProyeccionClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("AceptarProyeccionClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. GeneralInf.Visible = true")
                currentAction = SessionTrace("1.1. GeneralInf.Visible = true...")
                resultData.AddControlBehavior("GeneralInf", "show")

                currentAction = SessionTrace("2. ClientFirstName.Visible = true, ClientLastName.Visible = true, ClientLastName2.Visible = true...")
                currentAction = SessionTrace("2.1. ClientFirstName.Visible = true...")
                resultData.AddControlBehavior("ClientFirstName", "show")
                currentAction = SessionTrace("2.2. ClientLastName.Visible = true...")
                resultData.AddControlBehavior("ClientLastName", "show")
                currentAction = SessionTrace("2.3. ClientLastName2.Visible = true...")
                resultData.AddControlBehavior("ClientLastName2", "show")
                currentAction = SessionTrace("2.4. ClientGender.Enabled = false...")
                resultData.AddControlBehavior("ClientGender", "disabled")
                currentAction = SessionTrace("2.5. ClientSmokerIndicator.Enabled = false...")
                resultData.AddControlBehavior("ClientSmokerIndicator", "disabled")
                currentAction = SessionTrace("2.6. ClientBirthDate.Enabled = false...")
                resultData.AddControlBehavior("ClientBirthDate", "disabled")

                currentAction = SessionTrace("3. Cotizar.Visible = false")
                currentAction = SessionTrace("3.1. Cotizar.Visible = false...")
                resultData.AddControlBehavior("Cotizar", "hide")

                currentAction = SessionTrace("4. ClientBirthDate.Enabled = false, ClientGender.Enabled = false, ClientSmokerIndicator.Enabled = false...")
                currentAction = SessionTrace("4.1. ClientBirthDate.Enabled = false...")
                resultData.AddControlBehavior("ClientBirthDate", "disabled")
                currentAction = SessionTrace("4.2. ClientGender.Enabled = false...")
                resultData.AddControlBehavior("ClientGender", "disabled")
                currentAction = SessionTrace("4.3. ClientSmokerIndicator.Enabled = false...")
                resultData.AddControlBehavior("ClientSmokerIndicator", "disabled")
                currentAction = SessionTrace("4.4. RiskInformation.Enabled = false...")
                resultData.AddControlBehavior("RiskInformation", "disabled")
                currentAction = SessionTrace("4.5. EffectiveDate.Enabled = false...")
                resultData.AddControlBehavior("EffectiveDate", "disabled")
                currentAction = SessionTrace("4.6. TcoverCollection.Enabled = false...")
                resultData.AddControlBehavior("TcoverCollection", "disabled")

                currentAction = SessionTrace("5. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = false Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = false Then

                    currentAction = SessionTrace("6. ClientFirstName.Enabled = true, ClientLastName.Enabled = true, ClientLastName2.Enabled = true")
                    currentAction = SessionTrace("6.1. ClientFirstName.Enabled = true...")
                    resultData.AddControlBehavior("ClientFirstName", "enabled")
                    currentAction = SessionTrace("6.2. ClientLastName.Enabled = true...")
                    resultData.AddControlBehavior("ClientLastName", "enabled")
                    currentAction = SessionTrace("6.3. ClientLastName2.Enabled = true...")
                    resultData.AddControlBehavior("ClientLastName2", "enabled")

                    End If
                currentAction = SessionTrace("7. zone24.Visible = true, ZoneInvestmentFundRelatedToPolicy.Enabled = false, zone2.Visible = true...")
                currentAction = SessionTrace("7.1. zone24.Visible = true...")
                resultData.AddControlBehavior("zone24", "show")
                currentAction = SessionTrace("7.2. ZoneInvestmentFundRelatedToPolicy.Enabled = false...")
                resultData.AddControlBehavior("ZoneInvestmentFundRelatedToPolicy", "disabled")
                currentAction = SessionTrace("7.3. zone2.Visible = true...")
                resultData.AddControlBehavior("zone2", "show")
                currentAction = SessionTrace("7.4. label6.Visible = true...")
                resultData.AddControlBehavior("label6", "show")
                currentAction = SessionTrace("7.5. label7.Visible = true...")
                resultData.AddControlBehavior("label7", "show")
                currentAction = SessionTrace("7.6. label9.Visible = true...")
                resultData.AddControlBehavior("label9", "show")

                currentAction = SessionTrace("8. zoneemail.Enabled = true")
                currentAction = SessionTrace("8.1. zoneemail.Enabled = true...")
                resultData.AddControlBehavior("zoneemail", "enabled")

                currentAction = SessionTrace("9. Proyectar.Visible = false, label8.Visible = false")
                currentAction = SessionTrace("9.1. Proyectar.Visible = false...")
                resultData.AddControlBehavior("Proyectar", "hide")
                currentAction = SessionTrace("9.2. label8.Visible = false...")
                resultData.AddControlBehavior("label8", "hide")

                currentAction = SessionTrace("10. zone8.Visible = true, label7.Visible = true, zone2.Visible = true...")
                currentAction = SessionTrace("10.1. zone8.Visible = true...")
                resultData.AddControlBehavior("zone8", "show")
                currentAction = SessionTrace("10.2. label7.Visible = true...")
                resultData.AddControlBehavior("label7", "show")
                currentAction = SessionTrace("10.3. zone2.Visible = true...")
                resultData.AddControlBehavior("zone2", "show")
                currentAction = SessionTrace("10.4. label9.Visible = true...")
                resultData.AddControlBehavior("label9", "show")
                currentAction = SessionTrace("10.5. zone2.Enabled = false...")
                resultData.AddControlBehavior("zone2", "disabled")
                currentAction = SessionTrace("10.6. Proyectar.Visible = false...")
                resultData.AddControlBehavior("Proyectar", "hide")
                currentAction = SessionTrace("10.7. AceptarProyeccion.Visible = false...")
                resultData.AddControlBehavior("AceptarProyeccion", "hide")

                currentAction = SessionTrace("11. tab3.Visible = true, tabcontainer7.ActiveTab = tab3")
                currentAction = SessionTrace("11.1. tab3.Visible = true...")
                resultData.AddControlBehavior("tab3", "show")
                currentAction = SessionTrace("11.2. tabcontainer7.ActiveTab = tab3...")
                resultData.AddControlBehavior("tab3", "active")

                currentAction = SessionTrace("12. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1...")
                currentAction = SessionTrace("12.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1
                currentAction = SessionTrace("12.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Country = 58...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Country = 58
                currentAction = SessionTrace("12.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = 9998...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = 9998

                currentAction = SessionTrace("13. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
                currentAction = SessionTrace("13.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                currentAction = SessionTrace("13.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
                currentAction = SessionTrace("13.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address

                currentAction = SessionTrace("14. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                currentAction = SessionTrace("14.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1

                currentAction = SessionTrace("15. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                currentAction = SessionTrace("15.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1

                currentAction = SessionTrace("16. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                currentAction = SessionTrace("16.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1
                currentAction = SessionTrace("16.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = 3...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = 3
                currentAction = SessionTrace("16.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany.Code = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany.Code = 1
                currentAction = SessionTrace("16.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6

                currentAction = SessionTrace("17. HT5NNCotizacionMiInversionSeguraIIParametersInstance.CurrentYear = year(Date.Today)...")
                currentAction = SessionTrace("17.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.CurrentYear = year(Date.Today)...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.CurrentYear = year(Date.Today)

                currentAction = SessionTrace("18. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1...")
                currentAction = SessionTrace("18.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1
                currentAction = SessionTrace("18.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Country = 58...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Country = 58
                currentAction = SessionTrace("18.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = 9998...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = 9998

                currentAction = SessionTrace("19. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
                currentAction = SessionTrace("19.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                currentAction = SessionTrace("19.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
                currentAction = SessionTrace("19.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address

                currentAction = SessionTrace("20. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                currentAction = SessionTrace("20.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID
                currentAction = SessionTrace("20.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1
                currentAction = SessionTrace("20.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID

                currentAction = SessionTrace("21. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                currentAction = SessionTrace("21.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID
                currentAction = SessionTrace("21.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1
                currentAction = SessionTrace("21.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID

                currentAction = SessionTrace("22. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                currentAction = SessionTrace("22.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1
                currentAction = SessionTrace("22.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = 3...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = 3
                currentAction = SessionTrace("22.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany.Code = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany.Code = 1
                currentAction = SessionTrace("22.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6

                currentAction = SessionTrace("23. If (HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID Is Null Or Empty  OR HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) Then")
                If (IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID) OrElse HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) Then

                    currentAction = SessionTrace("24. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_bab34b3d7ba94ce9be6db3a93ac31b7e As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_bab34b3d7ba94ce9be6db3a93ac31b7e = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany, recordOwnerType:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType, recordOwnerId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_bab34b3d7ba94ce9be6db3a93ac31b7e
                    isNullResult = (IsNothing(_AddressDLICollection_bab34b3d7ba94ce9be6db3a93ac31b7e))

                    currentAction = SessionTrace("25. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                        currentAction = SessionTrace("26. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                        currentAction = SessionTrace("26.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).AddressID
                        currentAction = SessionTrace("26.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("27. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddresseMailDLI_967755d9ce674fa8aafbf95d25bd41c7 As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                        _AddresseMailDLI_967755d9ce674fa8aafbf95d25bd41c7 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = _AddresseMailDLI_967755d9ce674fa8aafbf95d25bd41c7
                        isNullResult = (IsNothing(_AddresseMailDLI_967755d9ce674fa8aafbf95d25bd41c7))

                                End If
                    currentAction = SessionTrace("28. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                    currentAction = SessionTrace("28.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1
                    currentAction = SessionTrace("28.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                    currentAction = SessionTrace("28.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1
                    currentAction = SessionTrace("28.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1

                    currentAction = SessionTrace("29. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_d21df05116bf4bdd908d7bb2cfffc413 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_d21df05116bf4bdd908d7bb2cfffc413 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_d21df05116bf4bdd908d7bb2cfffc413
                    isNullResult = (IsNothing(_AddressDLICollection_d21df05116bf4bdd908d7bb2cfffc413))

                    currentAction = SessionTrace("30. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                        currentAction = SessionTrace("31. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                        currentAction = SessionTrace("31.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).AddressID
                        currentAction = SessionTrace("31.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("32. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddressPhysicalAddressDLI_fb2ba3313be5453ca4f825fe50980eec As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                        _AddressPhysicalAddressDLI_fb2ba3313be5453ca4f825fe50980eec = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_fb2ba3313be5453ca4f825fe50980eec
                        isNullResult = (IsNothing(_AddressPhysicalAddressDLI_fb2ba3313be5453ca4f825fe50980eec))

                                    Else
                        currentAction = SessionTrace("33. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                        currentAction = SessionTrace("33.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2

                        currentAction = SessionTrace("34. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                        Dim _AddressDLICollection_94e809ea1995464bb881ff06c75bbd96 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                        _AddressDLICollection_94e809ea1995464bb881ff06c75bbd96 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_94e809ea1995464bb881ff06c75bbd96
                        isNullResult = (IsNothing(_AddressDLICollection_94e809ea1995464bb881ff06c75bbd96))

                        currentAction = SessionTrace("35. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                        If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                            currentAction = SessionTrace("36. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                            currentAction = SessionTrace("36.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).AddressID
                            currentAction = SessionTrace("36.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                            currentAction = SessionTrace("37. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                            Dim _AddressPhysicalAddressDLI_2e1bcfaf6b7e4f84afb140f928ecf4b8 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                            _AddressPhysicalAddressDLI_2e1bcfaf6b7e4f84afb140f928ecf4b8 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_2e1bcfaf6b7e4f84afb140f928ecf4b8
                            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_2e1bcfaf6b7e4f84afb140f928ecf4b8))

                                                Else
                            currentAction = SessionTrace("38. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                            currentAction = SessionTrace("38.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0
                            currentAction = SessionTrace("38.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1

                            currentAction = SessionTrace("39. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0...")
                            currentAction = SessionTrace("39.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0
                            currentAction = SessionTrace("39.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0
                            currentAction = SessionTrace("39.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                            currentAction = SessionTrace("39.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1

                                                    End If
                                                End If
                                            End If
                currentAction = SessionTrace("40. If (HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID Not Is Null Or Not Empty  AND HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0) Then")
                If (Not IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID) AndAlso HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0) Then

                    currentAction = SessionTrace("41. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_2bbcb207f3104b61be4e1c854bbd5ecb As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_2bbcb207f3104b61be4e1c854bbd5ecb = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_2bbcb207f3104b61be4e1c854bbd5ecb
                    isNullResult = (IsNothing(_AddressDLICollection_2bbcb207f3104b61be4e1c854bbd5ecb))

                    currentAction = SessionTrace("42. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                        currentAction = SessionTrace("43. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                        currentAction = SessionTrace("43.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("44. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddresseMailDLI_f5d71866c3cf4e268db84d818344c50a As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                        _AddresseMailDLI_f5d71866c3cf4e268db84d818344c50a = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = _AddresseMailDLI_f5d71866c3cf4e268db84d818344c50a
                        isNullResult = (IsNothing(_AddresseMailDLI_f5d71866c3cf4e268db84d818344c50a))

                                                        End If
                    currentAction = SessionTrace("45. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                    currentAction = SessionTrace("45.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1
                    currentAction = SessionTrace("45.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                    currentAction = SessionTrace("45.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1
                    currentAction = SessionTrace("45.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1

                    currentAction = SessionTrace("46. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_6a027357ffc74af3a73926bffae44ff9 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_6a027357ffc74af3a73926bffae44ff9 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_6a027357ffc74af3a73926bffae44ff9
                    isNullResult = (IsNothing(_AddressDLICollection_6a027357ffc74af3a73926bffae44ff9))

                    currentAction = SessionTrace("47. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                        currentAction = SessionTrace("48. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                        currentAction = SessionTrace("48.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("49. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddressPhysicalAddressDLI_5741215964de4833b1db083909e31431 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                        _AddressPhysicalAddressDLI_5741215964de4833b1db083909e31431 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_5741215964de4833b1db083909e31431
                        isNullResult = (IsNothing(_AddressPhysicalAddressDLI_5741215964de4833b1db083909e31431))

                                                            Else
                        currentAction = SessionTrace("50. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                        currentAction = SessionTrace("50.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2

                        currentAction = SessionTrace("51. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                        Dim _AddressDLICollection_ced4acce7dc740c19b01f8681383033f As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                        _AddressDLICollection_ced4acce7dc740c19b01f8681383033f = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_ced4acce7dc740c19b01f8681383033f
                        isNullResult = (IsNothing(_AddressDLICollection_ced4acce7dc740c19b01f8681383033f))

                        currentAction = SessionTrace("52. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                        If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                            currentAction = SessionTrace("53. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                            currentAction = SessionTrace("53.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                            currentAction = SessionTrace("54. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                            Dim _AddressPhysicalAddressDLI_f14490b73bf44406a369bc1c9529604d As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                            _AddressPhysicalAddressDLI_f14490b73bf44406a369bc1c9529604d = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_f14490b73bf44406a369bc1c9529604d
                            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_f14490b73bf44406a369bc1c9529604d))

                                                                        Else
                            currentAction = SessionTrace("55. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0...")
                            currentAction = SessionTrace("55.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0
                            currentAction = SessionTrace("55.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0
                            currentAction = SessionTrace("55.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                            currentAction = SessionTrace("55.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1

                            currentAction = SessionTrace("56. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                            currentAction = SessionTrace("56.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0
                            currentAction = SessionTrace("56.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1

                                                                            End If
                                                                        End If
                                                                    End If

                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "AceptarProyeccionClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function ClientIDChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("ClientIDClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false...")
                currentAction = SessionTrace("1.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false

                currentAction = SessionTrace("2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                currentAction = SessionTrace("2.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID

                currentAction = SessionTrace("3. Call Shared Function 'Retrieve Client' with parameters (Client Identification)")
                Dim _Client_4a7bd74b420049918357fe8fbde26555 As InMotionGIT.Client.Entity.Contracts.Client
                
      _Client_4a7bd74b420049918357fe8fbde26555 = (New InMotionGIT.Client.Services.ClientManager).Retrieve(clientId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado, atDate:=Date.Today, childFilter:= "All")
      isNullResult = (IsNothing(_Client_4a7bd74b420049918357fe8fbde26555))
      isFoundData  = Not isNullResult
    
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = _Client_4a7bd74b420049918357fe8fbde26555

                currentAction = SessionTrace("4. If Form.IsNullResult = true Then")
                If isNullResult = true Then

                    currentAction = SessionTrace("5. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = false...")
                    currentAction = SessionTrace("5.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = false...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = false
                    currentAction = SessionTrace("5.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = Nothing...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = Nothing

                    currentAction = SessionTrace("6. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado...")
                    currentAction = SessionTrace("6.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado

                    currentAction = SessionTrace("7. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded.BirthDate...")
                    currentAction = SessionTrace("7.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded.BirthDate...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded.BirthDate
                    currentAction = SessionTrace("7.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded.Gender...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded.Gender
                    currentAction = SessionTrace("7.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.SmokerIndicator = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded.SmokerIndi...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.SmokerIndicator = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded.SmokerIndicator

                    currentAction = SessionTrace("8. ClientFirstName.Enabled = true, ClientLastName.Enabled = true, ClientLastName2.Enabled = true")
                    currentAction = SessionTrace("8.1. ClientFirstName.Enabled = true...")
                    resultData.AddControlBehavior("ClientFirstName", "enabled")
                    currentAction = SessionTrace("8.2. ClientLastName.Enabled = true...")
                    resultData.AddControlBehavior("ClientLastName", "enabled")
                    currentAction = SessionTrace("8.3. ClientLastName2.Enabled = true...")
                    resultData.AddControlBehavior("ClientLastName2", "enabled")

                    currentAction = SessionTrace("9. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsNew = true...")
                    currentAction = SessionTrace("9.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsNew = true...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsNew = true
                    currentAction = SessionTrace("9.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.TypeOfPerson = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.TypeOfPerson = 1

                    Else
                    currentAction = SessionTrace("10. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true...")
                    currentAction = SessionTrace("10.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true

                    currentAction = SessionTrace("11. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsNew = false...")
                    currentAction = SessionTrace("11.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsNew = false...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsNew = false

                    currentAction = SessionTrace("12. ClientFirstName.Enabled = false, ClientLastName.Enabled = false, ClientLastName2.Enabled = false")
                    currentAction = SessionTrace("12.1. ClientFirstName.Enabled = false...")
                    resultData.AddControlBehavior("ClientFirstName", "disabled")
                    currentAction = SessionTrace("12.2. ClientLastName.Enabled = false...")
                    resultData.AddControlBehavior("ClientLastName", "disabled")
                    currentAction = SessionTrace("12.3. ClientLastName2.Enabled = false...")
                    resultData.AddControlBehavior("ClientLastName2", "disabled")

                        End If
                currentAction = SessionTrace("13. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true Then

                    currentAction = SessionTrace("14. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate Is Null Or Empty '' Then")
                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate) OrElse HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate = Date.MinValue Then

                        currentAction = SessionTrace("15. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsDirty = True...")
                        currentAction = SessionTrace("15.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsDirty = True...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsDirty = True

                        currentAction = SessionTrace("16. BirthDate.Enabled = true")
                        currentAction = SessionTrace("16.1. BirthDate.Enabled = true...")
                        resultData.AddControlBehavior("BirthDate", "enabled")

                                    Else
                        currentAction = SessionTrace("17. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded.BirthDate <> HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate Then")
                        If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded.BirthDate <> HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate Then

                            currentAction = SessionTrace("18. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")
                            currentAction = SessionTrace("18.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true

                            currentAction = SessionTrace("19. The message 'El cliente indicado ...' will displayed as 'Popup'")
                            ParametersToDictionary(HT5NNCotizacionMiInversionSeguraIIParametersInstance, parametersDictionary)
                            messageAction = "El cliente indicado está registrado en el sistema y la fecha de nacimiento incluida NO coincide con la fecha de nacimiento previamente registrada... No se puede continuar con la cotización..."
                            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                            resultData.AddNotifyPopup(messageAction)
                            currentAction = SessionTrace("20. BirthDate.Enabled = true, Gender.Enabled = true")
                            currentAction = SessionTrace("20.1. BirthDate.Enabled = true...")
                            resultData.AddControlBehavior("BirthDate", "enabled")
                            currentAction = SessionTrace("20.2. Gender.Enabled = true...")
                            resultData.AddControlBehavior("Gender", "enabled")

                                                Else
                            currentAction = SessionTrace("21. BirthDate.Enabled = false")
                            currentAction = SessionTrace("21.1. BirthDate.Enabled = false...")
                            resultData.AddControlBehavior("BirthDate", "disabled")

                                                    End If
                                                End If
                                            End If
                currentAction = SessionTrace("22. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true AND HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true AndAlso HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("23. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender Is Null Or Empty '' OR HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender = 3 Then")
                    If String.IsNullOrEmpty(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender) OrElse HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender = 3 Then

                        currentAction = SessionTrace("24. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsDirty = True...")
                        currentAction = SessionTrace("24.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsDirty = True...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsDirty = True

                        currentAction = SessionTrace("25. Gender.Enabled = true")
                        currentAction = SessionTrace("25.1. Gender.Enabled = true...")
                        resultData.AddControlBehavior("Gender", "enabled")

                                                        Else
                        currentAction = SessionTrace("26. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded.Gender <> HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender Then")
                        If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded.Gender <> HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender Then

                            currentAction = SessionTrace("27. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")
                            currentAction = SessionTrace("27.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true

                            currentAction = SessionTrace("28. The message 'El cliente indicado ...' will displayed as 'Popup'")
                            ParametersToDictionary(HT5NNCotizacionMiInversionSeguraIIParametersInstance, parametersDictionary)
                            messageAction = "El cliente indicado está registrado en el sistema y el género incluido NO coincide con el género previamente registrado... No se puede continuar con la cotización..."
                            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                            resultData.AddNotifyPopup(messageAction)
                            currentAction = SessionTrace("29. Gender.Enabled = true, BirthDate.Enabled = true")
                            currentAction = SessionTrace("29.1. Gender.Enabled = true...")
                            resultData.AddControlBehavior("Gender", "enabled")
                            currentAction = SessionTrace("29.2. BirthDate.Enabled = true...")
                            resultData.AddControlBehavior("BirthDate", "enabled")

                                                                    Else
                            currentAction = SessionTrace("30. Gender.Enabled = false")
                            currentAction = SessionTrace("30.1. Gender.Enabled = false...")
                            resultData.AddControlBehavior("Gender", "disabled")

                                                                        End If
                                                                    End If
                                                                End If
                currentAction = SessionTrace("31. Acepto.Visible = false")
                currentAction = SessionTrace("31.1. Acepto.Visible = false...")
                resultData.AddControlBehavior("Acepto", "hide")

                currentAction = SessionTrace("32. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true Then

                    currentAction = SessionTrace("33. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contr...")
                    currentAction = SessionTrace("33.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contr...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client

                    currentAction = SessionTrace("34. zoneAS2.Enabled = false, zone10.Enabled = false")
                    currentAction = SessionTrace("34.1. zoneAS2.Enabled = false...")
                    resultData.AddControlBehavior("zoneAS2", "disabled")
                    currentAction = SessionTrace("34.2. zone10.Enabled = false...")
                    resultData.AddControlBehavior("zone10", "disabled")

                                                                    Else
                    currentAction = SessionTrace("35. zoneAS2.Enabled = true, zone10.Enabled = true, PaymentFrequency.Enabled = false")
                    currentAction = SessionTrace("35.1. zoneAS2.Enabled = true...")
                    resultData.AddControlBehavior("zoneAS2", "enabled")
                    currentAction = SessionTrace("35.2. zone10.Enabled = true...")
                    resultData.AddControlBehavior("zone10", "enabled")
                    currentAction = SessionTrace("35.3. PaymentFrequency.Enabled = false...")
                    resultData.AddControlBehavior("PaymentFrequency", "disabled")

                                                                        End If
                currentAction = SessionTrace("36. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1...")
                currentAction = SessionTrace("36.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1
                currentAction = SessionTrace("36.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Country = 58...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Country = 58
                currentAction = SessionTrace("36.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = 9998...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = 9998

                currentAction = SessionTrace("37. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
                currentAction = SessionTrace("37.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                currentAction = SessionTrace("37.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
                currentAction = SessionTrace("37.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Cont...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address

                currentAction = SessionTrace("38. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                currentAction = SessionTrace("38.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID
                currentAction = SessionTrace("38.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1
                currentAction = SessionTrace("38.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID

                currentAction = SessionTrace("39. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                currentAction = SessionTrace("39.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID
                currentAction = SessionTrace("39.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1
                currentAction = SessionTrace("39.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID

                currentAction = SessionTrace("40. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                currentAction = SessionTrace("40.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1
                currentAction = SessionTrace("40.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = 3...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = 3
                currentAction = SessionTrace("40.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany.Code = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany.Code = 1
                currentAction = SessionTrace("40.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6

                currentAction = SessionTrace("41. If (HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID Is Null Or Empty  OR HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) AND ... Then")
                If (IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID) OrElse HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) AndAlso (HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false) Then

                    currentAction = SessionTrace("42. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_fbf4198033894fbab6cc180af2b79a7f As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_fbf4198033894fbab6cc180af2b79a7f = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany, recordOwnerType:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType, recordOwnerId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_fbf4198033894fbab6cc180af2b79a7f
                    isNullResult = (IsNothing(_AddressDLICollection_fbf4198033894fbab6cc180af2b79a7f))

                    currentAction = SessionTrace("43. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                        currentAction = SessionTrace("44. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                        currentAction = SessionTrace("44.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).AddressID
                        currentAction = SessionTrace("44.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("45. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddresseMailDLI_4e38554b28bd4f2a8b25aca3faa6fa79 As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                        _AddresseMailDLI_4e38554b28bd4f2a8b25aca3faa6fa79 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = _AddresseMailDLI_4e38554b28bd4f2a8b25aca3faa6fa79
                        isNullResult = (IsNothing(_AddresseMailDLI_4e38554b28bd4f2a8b25aca3faa6fa79))

                                                                                    End If
                    currentAction = SessionTrace("46. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                    currentAction = SessionTrace("46.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1
                    currentAction = SessionTrace("46.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                    currentAction = SessionTrace("46.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1
                    currentAction = SessionTrace("46.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1

                    currentAction = SessionTrace("47. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_9d6ec099dc3e4d74bdd8b5054b27711e As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_9d6ec099dc3e4d74bdd8b5054b27711e = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_9d6ec099dc3e4d74bdd8b5054b27711e
                    isNullResult = (IsNothing(_AddressDLICollection_9d6ec099dc3e4d74bdd8b5054b27711e))

                    currentAction = SessionTrace("48. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                        currentAction = SessionTrace("49. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                        currentAction = SessionTrace("49.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).AddressID
                        currentAction = SessionTrace("49.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("50. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddressPhysicalAddressDLI_6bcb094ebf294561a6ed5d978f3316f6 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                        _AddressPhysicalAddressDLI_6bcb094ebf294561a6ed5d978f3316f6 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_6bcb094ebf294561a6ed5d978f3316f6
                        isNullResult = (IsNothing(_AddressPhysicalAddressDLI_6bcb094ebf294561a6ed5d978f3316f6))

                                                                                        Else
                        currentAction = SessionTrace("51. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                        currentAction = SessionTrace("51.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2

                        currentAction = SessionTrace("52. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                        Dim _AddressDLICollection_0ae273d58ce342a5a44ef1040e19b440 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                        _AddressDLICollection_0ae273d58ce342a5a44ef1040e19b440 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_0ae273d58ce342a5a44ef1040e19b440
                        isNullResult = (IsNothing(_AddressDLICollection_0ae273d58ce342a5a44ef1040e19b440))

                        currentAction = SessionTrace("53. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                        If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                            currentAction = SessionTrace("54. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                            currentAction = SessionTrace("54.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).AddressID
                            currentAction = SessionTrace("54.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                            currentAction = SessionTrace("55. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                            Dim _AddressPhysicalAddressDLI_d9e586b18e2c40839c70213c72b3df73 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                            _AddressPhysicalAddressDLI_d9e586b18e2c40839c70213c72b3df73 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_d9e586b18e2c40839c70213c72b3df73
                            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_d9e586b18e2c40839c70213c72b3df73))

                                                                                                    Else
                            currentAction = SessionTrace("56. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                            currentAction = SessionTrace("56.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0
                            currentAction = SessionTrace("56.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1

                            currentAction = SessionTrace("57. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0...")
                            currentAction = SessionTrace("57.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0
                            currentAction = SessionTrace("57.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0
                            currentAction = SessionTrace("57.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                            currentAction = SessionTrace("57.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1

                                                                                                        End If
                                                                                                    End If
                                                                                                End If
                currentAction = SessionTrace("58. If (HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID Not Is Null Or Not Empty  AND HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0 AND ... Then")
                If (Not IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID) AndAlso HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0 AndAlso HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false) Then

                    currentAction = SessionTrace("59. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_2f44254c06114e1eb92e3bcc9d720d5d As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_2f44254c06114e1eb92e3bcc9d720d5d = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_2f44254c06114e1eb92e3bcc9d720d5d
                    isNullResult = (IsNothing(_AddressDLICollection_2f44254c06114e1eb92e3bcc9d720d5d))

                    currentAction = SessionTrace("60. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                        currentAction = SessionTrace("61. Cotizar.Enabled = false, Acepto.Enabled = false, RiskInformationEffectiveDate.Enabled = false...")
                        currentAction = SessionTrace("61.1. Cotizar.Enabled = false...")
                        resultData.AddControlBehavior("Cotizar", "disabled")
                        currentAction = SessionTrace("61.2. Acepto.Enabled = false...")
                        resultData.AddControlBehavior("Acepto", "disabled")
                        currentAction = SessionTrace("61.3. RiskInformationEffectiveDate.Enabled = false...")
                        resultData.AddControlBehavior("RiskInformationEffectiveDate", "disabled")
                        currentAction = SessionTrace("61.4. PaymentFrequency.Enabled = false...")
                        resultData.AddControlBehavior("PaymentFrequency", "disabled")

                        currentAction = SessionTrace("62. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                        currentAction = SessionTrace("62.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("63. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddresseMailDLI_766fc057dbc54b759ed9f49e32e7ad77 As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                        _AddresseMailDLI_766fc057dbc54b759ed9f49e32e7ad77 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = _AddresseMailDLI_766fc057dbc54b759ed9f49e32e7ad77
                        isNullResult = (IsNothing(_AddresseMailDLI_766fc057dbc54b759ed9f49e32e7ad77))

                                                                                                            End If
                    currentAction = SessionTrace("64. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                    currentAction = SessionTrace("64.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1
                    currentAction = SessionTrace("64.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                    currentAction = SessionTrace("64.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1
                    currentAction = SessionTrace("64.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1

                    currentAction = SessionTrace("65. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_36a89a5501914d68b58f828820b9dcd1 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_36a89a5501914d68b58f828820b9dcd1 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_36a89a5501914d68b58f828820b9dcd1
                    isNullResult = (IsNothing(_AddressDLICollection_36a89a5501914d68b58f828820b9dcd1))

                    currentAction = SessionTrace("66. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                        currentAction = SessionTrace("67. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                        currentAction = SessionTrace("67.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("68. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddressPhysicalAddressDLI_a06bc558acdf4f9ab435fc4abe489a18 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                        _AddressPhysicalAddressDLI_a06bc558acdf4f9ab435fc4abe489a18 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_a06bc558acdf4f9ab435fc4abe489a18
                        isNullResult = (IsNothing(_AddressPhysicalAddressDLI_a06bc558acdf4f9ab435fc4abe489a18))

                                                                                                                Else
                        currentAction = SessionTrace("69. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                        currentAction = SessionTrace("69.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2

                        currentAction = SessionTrace("70. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                        Dim _AddressDLICollection_fc7582f86d9140e0b0480f85bfb051bf As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                        _AddressDLICollection_fc7582f86d9140e0b0480f85bfb051bf = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_fc7582f86d9140e0b0480f85bfb051bf
                        isNullResult = (IsNothing(_AddressDLICollection_fc7582f86d9140e0b0480f85bfb051bf))

                        currentAction = SessionTrace("71. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                        If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                            currentAction = SessionTrace("72. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                            currentAction = SessionTrace("72.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                            currentAction = SessionTrace("73. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                            Dim _AddressPhysicalAddressDLI_fe3fad5252564e54aa01ff00c80ebdac As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                            _AddressPhysicalAddressDLI_fe3fad5252564e54aa01ff00c80ebdac = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_fe3fad5252564e54aa01ff00c80ebdac
                            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_fe3fad5252564e54aa01ff00c80ebdac))

                                                                                                                            Else
                            currentAction = SessionTrace("74. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0...")
                            currentAction = SessionTrace("74.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = 0
                            currentAction = SessionTrace("74.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0
                            currentAction = SessionTrace("74.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                            currentAction = SessionTrace("74.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1

                            currentAction = SessionTrace("75. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                            currentAction = SessionTrace("75.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0
                            currentAction = SessionTrace("75.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1

                                                                                                                                End If
                                                                                                                            End If
                                                                                                                        End If

                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "ClientIDClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function button23Click(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("button23Click")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. tab4Salud.Visible = true")
                currentAction = SessionTrace("1.1. tab4Salud.Visible = true...")
                resultData.AddControlBehavior("tab4Salud", "show")

                currentAction = SessionTrace("2. tabcontainer7.ActiveTab = tab4Salud")
                currentAction = SessionTrace("2.1. tabcontainer7.ActiveTab = tab4Salud...")
                resultData.AddControlBehavior("tab4Salud", "active")

                currentAction = SessionTrace("3. zone22.Visible = false")
                currentAction = SessionTrace("3.1. zone22.Visible = false...")
                resultData.AddControlBehavior("zone22", "hide")

                currentAction = SessionTrace("4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddr...")
                currentAction = SessionTrace("4.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddr...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress.eMail

                currentAction = SessionTrace("5. zone18.Enabled = false, zone24.Enabled = false, zone14.Enabled = false")
                currentAction = SessionTrace("5.1. zone18.Enabled = false...")
                resultData.AddControlBehavior("zone18", "disabled")
                currentAction = SessionTrace("5.2. zone24.Enabled = false...")
                resultData.AddControlBehavior("zone24", "disabled")
                currentAction = SessionTrace("5.3. zone14.Enabled = false...")
                resultData.AddControlBehavior("zone14", "disabled")


                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "button23Click", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function button22Click(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("button22Click")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. tab0.Visible = true")
                currentAction = SessionTrace("1.1. tab0.Visible = true...")
                resultData.AddControlBehavior("tab0", "show")

                currentAction = SessionTrace("2. tabcontainer7.ActiveTab = tab0")
                currentAction = SessionTrace("2.1. tabcontainer7.ActiveTab = tab0...")
                resultData.AddControlBehavior("tab0", "active")

                currentAction = SessionTrace("3. zone21.Visible = false")
                currentAction = SessionTrace("3.1. zone21.Visible = false...")
                resultData.AddControlBehavior("zone21", "hide")

                currentAction = SessionTrace("4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddr...")
                currentAction = SessionTrace("4.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddr...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress.eMail

                currentAction = SessionTrace("5. zone20.Enabled = false")
                currentAction = SessionTrace("5.1. zone20.Enabled = false...")
                resultData.AddControlBehavior("zone20", "disabled")


                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "button22Click", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function BeneficiaryTypeBeneficiaChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("BeneficiaryTypeBeneficiaClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 1 Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 1 Then

                    currentAction = SessionTrace("2. zoneAsignadoBeneficia.Visible = false")
                    currentAction = SessionTrace("2.1. zoneAsignadoBeneficia.Visible = false...")
                    resultData.AddControlBehavior("zoneAsignadoBeneficia", "hide")

                    Else
                    currentAction = SessionTrace("3. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 3 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 3 Then

                        currentAction = SessionTrace("4. zoneAsignadoBeneficia.Visible = true")
                        currentAction = SessionTrace("4.1. zoneAsignadoBeneficia.Visible = true...")
                        resultData.AddControlBehavior("zoneAsignadoBeneficia", "show")

                                End If
                            End If

                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "BeneficiaryTypeBeneficiaClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function AgregarBeneficiarioBeneficiaChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("AgregarBeneficiarioBeneficiaClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AgregarBeneficiario = true Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AgregarBeneficiario = true Then

                    currentAction = SessionTrace("2. zone24Beneficia.Visible = true")
                    currentAction = SessionTrace("2.1. zone24Beneficia.Visible = true...")
                    resultData.AddControlBehavior("zone24Beneficia", "show")

                    Else
                    currentAction = SessionTrace("3. zone24Beneficia.Visible = false")
                    currentAction = SessionTrace("3.1. zone24Beneficia.Visible = false...")
                    resultData.AddControlBehavior("zone24Beneficia", "hide")

                        End If
                currentAction = SessionTrace("4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AgregarBeneficiario = false...")
                currentAction = SessionTrace("4.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AgregarBeneficiario = false...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AgregarBeneficiario = false

                currentAction = SessionTrace("5. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary' = New 'InMotionGIT.Policy.Entity'...'")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary

                currentAction = SessionTrace("6. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TypeOfPersonBenef = 1...")
                currentAction = SessionTrace("6.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TypeOfPersonBenef = 1...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.TypeOfPersonBenef = 1

                currentAction = SessionTrace("7. FirstNameBPBeneficia.Visible = true, LastNameBPBeneficia.Visible = true, LastName2BPBeneficia.Visible = true...")
                currentAction = SessionTrace("7.1. FirstNameBPBeneficia.Visible = true...")
                resultData.AddControlBehavior("FirstNameBPBeneficia", "show")
                currentAction = SessionTrace("7.2. LastNameBPBeneficia.Visible = true...")
                resultData.AddControlBehavior("LastNameBPBeneficia", "show")
                currentAction = SessionTrace("7.3. LastName2BPBeneficia.Visible = true...")
                resultData.AddControlBehavior("LastName2BPBeneficia", "show")
                currentAction = SessionTrace("7.4. LegalNameBPBeneficia.Visible = false...")
                resultData.AddControlBehavior("LegalNameBPBeneficia", "hide")

                currentAction = SessionTrace("8. ClientIDBDBeneficia.Visible = true")
                currentAction = SessionTrace("8.1. ClientIDBDBeneficia.Visible = true...")
                resultData.AddControlBehavior("ClientIDBDBeneficia", "show")

                currentAction = SessionTrace("9. button33Beneficia.Visible = true")
                currentAction = SessionTrace("9.1. button33Beneficia.Visible = true...")
                resultData.AddControlBehavior("button33Beneficia", "show")


                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "AgregarBeneficiarioBeneficiaClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function TypeOfPersonBenefBeneficiaChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("TypeOfPersonBenefBeneficiaClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.TypeOfPersonBenef = 1 Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.TypeOfPersonBenef = 1 Then

                    currentAction = SessionTrace("2. FirstNameBPBeneficia.Visible = true, LastNameBPBeneficia.Visible = true, LastName2BPBeneficia.Visible = true...")
                    currentAction = SessionTrace("2.1. FirstNameBPBeneficia.Visible = true...")
                    resultData.AddControlBehavior("FirstNameBPBeneficia", "show")
                    currentAction = SessionTrace("2.2. LastNameBPBeneficia.Visible = true...")
                    resultData.AddControlBehavior("LastNameBPBeneficia", "show")
                    currentAction = SessionTrace("2.3. LastName2BPBeneficia.Visible = true...")
                    resultData.AddControlBehavior("LastName2BPBeneficia", "show")
                    currentAction = SessionTrace("2.4. LegalNameBPBeneficia.Visible = false...")
                    resultData.AddControlBehavior("LegalNameBPBeneficia", "hide")

                    Else
                    currentAction = SessionTrace("3. FirstNameBPBeneficia.Visible = false, LastNameBPBeneficia.Visible = false, LastName2BPBeneficia.Visible = false...")
                    currentAction = SessionTrace("3.1. FirstNameBPBeneficia.Visible = false...")
                    resultData.AddControlBehavior("FirstNameBPBeneficia", "hide")
                    currentAction = SessionTrace("3.2. LastNameBPBeneficia.Visible = false...")
                    resultData.AddControlBehavior("LastNameBPBeneficia", "hide")
                    currentAction = SessionTrace("3.3. LastName2BPBeneficia.Visible = false...")
                    resultData.AddControlBehavior("LastName2BPBeneficia", "hide")
                    currentAction = SessionTrace("3.4. LegalNameBPBeneficia.Visible = true...")
                    resultData.AddControlBehavior("LegalNameBPBeneficia", "show")

                        End If
                currentAction = SessionTrace("4. button33Beneficia.Visible = true")
                currentAction = SessionTrace("4.1. button33Beneficia.Visible = true...")
                resultData.AddControlBehavior("button33Beneficia", "show")


                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "TypeOfPersonBenefBeneficiaClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function ClientIDBDBeneficiaChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("ClientIDBDBeneficiaClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. Call Shared Function 'Retrieve Client' with parameters (Client Identification)")
                Dim _Client_b89c5e19f7614c2eb2882950d65e3275 As InMotionGIT.Client.Entity.Contracts.Client
                
      _Client_b89c5e19f7614c2eb2882950d65e3275 = (New InMotionGIT.Client.Services.ClientManager).Retrieve(clientId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.ClientID, atDate:=Date.Today, childFilter:= "All")
      isNullResult = (IsNothing(_Client_b89c5e19f7614c2eb2882950d65e3275))
      isFoundData  = Not isNullResult
    
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client = _Client_b89c5e19f7614c2eb2882950d65e3275

                currentAction = SessionTrace("2. If Form.IsNullResult = true Then")
                If isNullResult = true Then

                    currentAction = SessionTrace("3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.IsNew = true...")
                    currentAction = SessionTrace("3.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.IsNew = true...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.IsNew = true

                    currentAction = SessionTrace("4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.ClientID...")
                    currentAction = SessionTrace("4.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.ClientID...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.ClientID

                    Else
                    currentAction = SessionTrace("5. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.Client...")
                    currentAction = SessionTrace("5.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.Client...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.ClientID

                    currentAction = SessionTrace("6. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.IsNew = false...")
                    currentAction = SessionTrace("6.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.IsNew = false...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.IsNew = false

                    currentAction = SessionTrace("7. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TypeOfPersonBenef = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.TypeOf...")
                    currentAction = SessionTrace("7.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TypeOfPersonBenef = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.TypeOf...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.TypeOfPersonBenef = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.TypeOfPerson

                    currentAction = SessionTrace("8. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.TypeOfPersonBenef = 1 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.TypeOfPersonBenef = 1 Then

                        currentAction = SessionTrace("9. FirstNameBPBeneficia.Visible = true, LastNameBPBeneficia.Visible = true, LastName2BPBeneficia.Visible = true...")
                        currentAction = SessionTrace("9.1. FirstNameBPBeneficia.Visible = true...")
                        resultData.AddControlBehavior("FirstNameBPBeneficia", "show")
                        currentAction = SessionTrace("9.2. LastNameBPBeneficia.Visible = true...")
                        resultData.AddControlBehavior("LastNameBPBeneficia", "show")
                        currentAction = SessionTrace("9.3. LastName2BPBeneficia.Visible = true...")
                        resultData.AddControlBehavior("LastName2BPBeneficia", "show")
                        currentAction = SessionTrace("9.4. LegalNameBPBeneficia.Visible = false...")
                        resultData.AddControlBehavior("LegalNameBPBeneficia", "hide")

                                Else
                        currentAction = SessionTrace("10. FirstNameBPBeneficia.Visible = false, LastNameBPBeneficia.Visible = false, LastName2BPBeneficia.Visible = false...")
                        currentAction = SessionTrace("10.1. FirstNameBPBeneficia.Visible = false...")
                        resultData.AddControlBehavior("FirstNameBPBeneficia", "hide")
                        currentAction = SessionTrace("10.2. LastNameBPBeneficia.Visible = false...")
                        resultData.AddControlBehavior("LastNameBPBeneficia", "hide")
                        currentAction = SessionTrace("10.3. LastName2BPBeneficia.Visible = false...")
                        resultData.AddControlBehavior("LastName2BPBeneficia", "hide")
                        currentAction = SessionTrace("10.4. LegalNameBPBeneficia.Visible = true...")
                        resultData.AddControlBehavior("LegalNameBPBeneficia", "show")

                                    End If
                                End If

                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "ClientIDBDBeneficiaClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function button33BeneficiaClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("button33BeneficiaClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.TypeOfPersonBenef = 1 Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.TypeOfPersonBenef = 1 Then

                    currentAction = SessionTrace("2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.CompleteClientName = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.LastNa...")
                    currentAction = SessionTrace("2.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.CompleteClientName = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.LastNa...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.CompleteClientName = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.LastName & " " & HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.LastName2 & ", " & HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.FirstName

                    Else
                    currentAction = SessionTrace("3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.CompleteClientName = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.LegalN...")
                    currentAction = SessionTrace("3.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.CompleteClientName = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.LegalN...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.CompleteClientName = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary.Client.LegalName

                        End If
                currentAction = SessionTrace("4. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Beneficiaries'.Add('HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary')")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Beneficiaries.Add(HT5NNCotizacionMiInversionSeguraIIParametersInstance.Beneficiary)

                currentAction = SessionTrace("5. zone24Beneficia.Visible = false")
                currentAction = SessionTrace("5.1. zone24Beneficia.Visible = false...")
                resultData.AddControlBehavior("zone24Beneficia", "hide")


                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "button33BeneficiaClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function button12BeneficiaClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("button12BeneficiaClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false...")
                currentAction = SessionTrace("1.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false

                currentAction = SessionTrace("2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorAcumulado = 0...")
                currentAction = SessionTrace("2.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorAcumulado = 0...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorAcumulado = 0

                currentAction = SessionTrace("3. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 3 Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 3 Then

                    currentAction = SessionTrace("4. For Each beneficiaryItem As 'InMotionGIT.Policy.Entity...' In 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation...'")
                    For Each beneficiaryItem As InMotionGIT.Policy.Entity.Contracts.Beneficiary In HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Beneficiaries

                        currentAction = SessionTrace("5. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorAcumulado = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorAcumulado + benefici...")
                        currentAction = SessionTrace("5.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorAcumulado = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorAcumulado + benefici...")

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorAcumulado = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorAcumulado + beneficiaryItem.PercentageShare

                            Next
                    currentAction = SessionTrace("6. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorAcumulado <> 100 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorAcumulado <> 100 Then

                        currentAction = SessionTrace("7. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")
                        currentAction = SessionTrace("7.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true

                        currentAction = SessionTrace("8. The message 'La suma de los porce...' will displayed as 'Popup'")
                        ParametersToDictionary(HT5NNCotizacionMiInversionSeguraIIParametersInstance, parametersDictionary)
                        messageAction = "La suma de los porcentajes de participación de los beneficiarios debe ser el 100%"
                        messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                        resultData.AddNotifyPopup(messageAction)
                                End If
                            Else
                    currentAction = SessionTrace("9. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Beneficiaries' = New 'InMotionGIT.Policy.Entity'...'")
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Beneficiaries = New InMotionGIT.Policy.Entity.Contracts.BeneficiaryCollection

                                End If
                currentAction = SessionTrace("10. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("11. zoneemail.Visible = true, zoneemail.Enabled = true")
                    currentAction = SessionTrace("11.1. zoneemail.Visible = true...")
                    resultData.AddControlBehavior("zoneemail", "show")
                    currentAction = SessionTrace("11.2. zoneemail.Enabled = true...")
                    resultData.AddControlBehavior("zoneemail", "enabled")

                    currentAction = SessionTrace("12. tabcontainer7.ActiveTab = GeneralInf")
                    currentAction = SessionTrace("12.1. tabcontainer7.ActiveTab = GeneralInf...")
                    resultData.AddControlBehavior("GeneralInf", "active")

                    currentAction = SessionTrace("13. ProducerCode.Visible = true")
                    currentAction = SessionTrace("13.1. ProducerCode.Visible = true...")
                    resultData.AddControlBehavior("ProducerCode", "show")

                                    End If

                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "button12BeneficiaClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function btnVerResumenClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("btnVerResumenClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("2. Call 'HT5Mi Inversión Segura - Resumen' form with transferring parameters")
                                HttpContext.Current.Session(HT5NNCotizacionMiInversionSeguraIIParametersInstance.InternalId) = HT5NNCotizacionMiInversionSeguraIIParametersInstance
                HttpContext.Current.Session("fromid") = HT5NNCotizacionMiInversionSeguraIIParametersInstance.InternalId
    
                With resultData
                    .AddRedirect(String.Format(CultureInfo.InvariantCulture, "{0}/HT5NNCotizacionVidaInversionResumenPopup.html?fromid={1}", "/fasi/dli/forms", HT5NNCotizacionMiInversionSeguraIIParametersInstance.InternalId, ""), "scrollbars=no,resizable=yes,toolbar=no,location=no,directories=no,status=yes,menubar=no,copyhistory=no,width=1000,height=1000,left=100,top=100")
                End With

                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "btnVerResumenClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function btnEnviaMailClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("btnEnviaMailClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerDiabetes = 'No'...")
                currentAction = SessionTrace("1.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerDiabetes = 'No'...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerDiabetes = "No"

                currentAction = SessionTrace("2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerCancer = 'No'...")
                currentAction = SessionTrace("2.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerCancer = 'No'...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerCancer = "No"

                currentAction = SessionTrace("3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerHeart = 'No'...")
                currentAction = SessionTrace("3.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerHeart = 'No'...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerHeart = "No"

                currentAction = SessionTrace("4. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable.Diabetes = true Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable.Diabetes = true Then

                    currentAction = SessionTrace("5. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerDiabetes = 'Si'...")
                    currentAction = SessionTrace("5.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerDiabetes = 'Si'...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerDiabetes = "Si"

                    End If
                currentAction = SessionTrace("6. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable.Cancer = true Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable.Cancer = true Then

                    currentAction = SessionTrace("7. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerCancer = 'Si'...")
                    currentAction = SessionTrace("7.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerCancer = 'Si'...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerCancer = "Si"

                        End If
                currentAction = SessionTrace("8. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable.Heart = true Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable.Heart = true Then

                    currentAction = SessionTrace("9. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerHeart = 'Si'...")
                    currentAction = SessionTrace("9.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerHeart = 'Si'...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerHeart = "Si"

                            End If
                currentAction = SessionTrace("10. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PrimaTotalAnual = 0...")
                currentAction = SessionTrace("10.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PrimaTotalAnual = 0...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.PrimaTotalAnual = 0

                currentAction = SessionTrace("11. For Each CoverPT As 'InMotionGIT.Policy.Entity...' In 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation...'")
                For Each CoverPT As InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremium In HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.CoveragesWithCalculatedPremium

                    currentAction = SessionTrace("12. If CoverPT.SelectedByDefault = true Then")
                    If CoverPT.SelectedByDefault = true Then

                        currentAction = SessionTrace("13. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PrimaTotalAnual = HT5NNCotizacionMiInversionSeguraIIParametersInstance.PrimaTotalAnual+CoverPT.A...")
                        currentAction = SessionTrace("13.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PrimaTotalAnual = HT5NNCotizacionMiInversionSeguraIIParametersInstance.PrimaTotalAnual+CoverPT.A...")

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.PrimaTotalAnual = HT5NNCotizacionMiInversionSeguraIIParametersInstance.PrimaTotalAnual+CoverPT.AnnualPremium

                                        End If
                                    Next
                currentAction = SessionTrace("14. HT5NNCotizacionMiInversionSeguraIIParametersInstance.FondosMail = Nothing...")
                currentAction = SessionTrace("14.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.FondosMail = Nothing...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.FondosMail = Nothing

                currentAction = SessionTrace("15. For Each FondoMailItem As 'InMotionGIT.Policy.Entity...' In 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation...'")
                For Each FondoMailItem As InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy In HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies

                    currentAction = SessionTrace("16. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Codigo = FondoMailItem.InvestmentFund...")
                    currentAction = SessionTrace("16.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Codigo = FondoMailItem.InvestmentFund...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.Codigo = FondoMailItem.InvestmentFund

                    currentAction = SessionTrace("17. SELECT FUND_INV.NFUNDS, FUND_INV.SDESCRIPT FROM FUND_INV... WHERE FUND_INV.NFUNDS = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Codigo )")
                    isFoundData = False
                                               With New DataManagerFactory("SELECT FUND_INV.SDESCRIPT FROM FUND_INV FUND_INV  WHERE FUND_INV.NFUNDS = @:FUND_INVNFUNDS0", "FUND_INV", "Linked.LatCombined")
.AddParameter("FUND_INVNFUNDS0", DbType.Int32, 5, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.Codigo)
 
            HT5NNCotizacionMiInversionSeguraIIParametersInstance.Descripcion = .QueryExecuteScalarToString()  
        End With

                    currentAction = SessionTrace("18. HT5NNCotizacionMiInversionSeguraIIParametersInstance.FondosMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.FondosMail & '<p>' & 'Fon...")
                    currentAction = SessionTrace("18.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.FondosMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.FondosMail & '<p>' & 'Fon...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.FondosMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.FondosMail & "<p>" & "Fondo: " & HT5NNCotizacionMiInversionSeguraIIParametersInstance.Descripcion & "  Participación: " &   FondoMailItem.PercentageShare & "%  Rentabilidad: " & FondoMailItem.ProjectedProfitability & "%</a></p>" 

                                        Next
                currentAction = SessionTrace("19. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 1 Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 1 Then

                    currentAction = SessionTrace("20. HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiariosMail = 'Herederos legales'...")
                    currentAction = SessionTrace("20.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiariosMail = 'Herederos legales'...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiariosMail = "Herederos legales"

                                            Else
                    currentAction = SessionTrace("21. HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiariosMail = Nothing...")
                    currentAction = SessionTrace("21.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiariosMail = Nothing...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiariosMail = Nothing

                    currentAction = SessionTrace("22. For Each BenefMailItem As 'InMotionGIT.Policy.Entity...' In 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation...'")
                    For Each BenefMailItem As InMotionGIT.Policy.Entity.Contracts.Beneficiary In HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Beneficiaries

                        currentAction = SessionTrace("23. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Codigo = BenefMailItem.Relationship...")
                        currentAction = SessionTrace("23.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Codigo = BenefMailItem.Relationship...")

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.Codigo = BenefMailItem.Relationship

                        currentAction = SessionTrace("24. SELECT TABLE55.NRELATION, TABLE55.SDESCRIPT FROM TABLE55... WHERE TABLE55.NRELATION = HT5NNCotizacionMiInversionSeguraIIParametersInstance.Codigo )")
                        isFoundData = False
                                                       With New DataManagerFactory("SELECT TABLE55.SDESCRIPT FROM TABLE55 TABLE55  WHERE TABLE55.NRELATION = @:TABLE55NRELATION0 ORDER BY TABLE55.SDESCRIPT ASC", "TABLE55", "Linked.LatCombined")
.AddParameter("TABLE55NRELATION0", DbType.Int32, 5, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.Codigo)
 
            HT5NNCotizacionMiInversionSeguraIIParametersInstance.Descripcion = .QueryExecuteScalarToString()  
        End With

                        currentAction = SessionTrace("25. HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiariosMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiariosMail & '<p>'...")
                        currentAction = SessionTrace("25.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiariosMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiariosMail & '<p>'...")

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiariosMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiariosMail & "<p>" & "Beneficiario: " & BenefMailItem.Client.FirstName & " " & BenefMailItem.Client.LastName & " " & BenefMailItem.Client.LastName2 & "  Participación: " &  BenefMailItem.PercentageShare & "%  Relación: " & HT5NNCotizacionMiInversionSeguraIIParametersInstance.Descripcion & "</a></p>"

                                                        Next
                                                    End If
                currentAction = SessionTrace("26. SELECT TABLE18.SDESCRIPT, TABLE18.SSEXCLIEN, TABLE18.SSTATREGT FROM TABLE18... WHERE TABLE18.SSTATREGT = 1 AND TABLE18.SSEXCLIEN = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender )")
                isFoundData = False
                                       With New DataManagerFactory("SELECT TRIM(TABLE18.SDESCRIPT) SDESCRIPT FROM TABLE18 TABLE18  WHERE TABLE18.SSTATREGT = '1' AND TABLE18.SSEXCLIEN = @:TABLE18SSEXCLIEN1 ORDER BY TABLE18.SDESCRIPT ASC", "TABLE18", "Linked.LatCombined")
.AddParameter("TABLE18SSEXCLIEN1", DbType.AnsiStringFixedLength, 1, (HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender = String.Empty), HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender)
 
            HT5NNCotizacionMiInversionSeguraIIParametersInstance.GenderClient = .QueryExecuteScalarToString()  
        End With

                currentAction = SessionTrace("27. Call 'Envía cotización de vida por correo' workflow in Asynchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("context", formContext)
                .Add("RiskInformation", HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation)
                .Add("CorreoMail", HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail)
                .Add("PlanType", HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanType)
                .Add("BeneficiariosMail", HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiariosMail)
                .Add("FondosMail", HT5NNCotizacionMiInversionSeguraIIParametersInstance.FondosMail)
                .Add("AnswerDiabetes", HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerDiabetes)
                .Add("AnswerCancer", HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerCancer)
                .Add("AnswerHeart", HT5NNCotizacionMiInversionSeguraIIParametersInstance.AnswerHeart)
                .Add("PrimaTotalAnual", HT5NNCotizacionMiInversionSeguraIIParametersInstance.PrimaTotalAnual)
                .Add("AddressPhysicalAddressDLI", HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI)
                .Add("AddresseMailDLI", HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI)
                .Add("ProductMasterDescription", HT5NNCotizacionMiInversionSeguraIIParametersInstance.ProductMasterDescription)
                .Add("ConsumerInformtion", HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                .Add("GenderClient", HT5NNCotizacionMiInversionSeguraIIParametersInstance.GenderClient)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("EnviaCotizacionMailVida", "63c1250d-49eb-4f88-aa2e-ce30adfa821e", 4, WorkflowInArguments, True, False, "Me.AppRelativeVirtualPath", HT5NNCotizacionMiInversionSeguraIIParametersInstance.InternalId)


                currentAction = SessionTrace("28. The message 'El resumen de la cot...' will displayed as 'Popup'")
                ParametersToDictionary(HT5NNCotizacionMiInversionSeguraIIParametersInstance, parametersDictionary)
                messageAction = "El resumen de la cotización ha sido enviado al correo indicado { Value /eMail }.."
                messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                resultData.AddNotifyPopup(messageAction)

                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "btnEnviaMailClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function AcceptClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("AcceptClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false...")
                currentAction = SessionTrace("1.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false

                currentAction = SessionTrace("2. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PercentContributionUsedForInvesting >= 100 Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PercentContributionUsedForInvesting >= 100 Then

                    currentAction = SessionTrace("3. The message 'El %Inversión en cue...' will displayed as 'Popup'")
                    ParametersToDictionary(HT5NNCotizacionMiInversionSeguraIIParametersInstance, parametersDictionary)
                    messageAction = "El %Inversión en cuenta de ahorro debe ser menor al 100%"
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifyPopup(messageAction)
                    currentAction = SessionTrace("4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")
                    currentAction = SessionTrace("4.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true

                    End If
                currentAction = SessionTrace("5. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("6. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0...")
                    currentAction = SessionTrace("6.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0

                    currentAction = SessionTrace("7. For Each investmentfundrelatedtopolicyItem As 'InMotionGIT.Policy.Entity...' In 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation...'")
                    For Each investmentfundrelatedtopolicyItem As InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy In HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies

                        currentAction = SessionTrace("8. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+inve...")
                        currentAction = SessionTrace("8.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+inve...")

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+investmentfundrelatedtopolicyItem.PercentageShare

                                Next
                            End If
                currentAction = SessionTrace("9. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("10. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds <> 100 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds <> 100 Then

                        currentAction = SessionTrace("11. The message 'El total invertido e...' will displayed as 'Popup'")
                        ParametersToDictionary(HT5NNCotizacionMiInversionSeguraIIParametersInstance, parametersDictionary)
                        messageAction = "El total invertido en los fondos debe ser el 100%"
                        messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                        resultData.AddNotifyPopup(messageAction)
                        currentAction = SessionTrace("12. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")
                        currentAction = SessionTrace("12.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true...")

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = true

                                        End If
                                    End If
                currentAction = SessionTrace("16. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("17. The message 'Sr/Sra. { Value /Ris...' will displayed as 'Splash'")
                    ParametersToDictionary(HT5NNCotizacionMiInversionSeguraIIParametersInstance, parametersDictionary)
                    messageAction = "Sr/Sra. { Value /RiskInformation/PrimaryInsured/Client/FirstName } { Value /RiskInformation/PrimaryInsured/Client/LastName } { Value /RiskInformation/PrimaryInsured/Client/LastName2 }, pronto estará recibiendo noticias nuestras...Gracias por visitarnos..."
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifySplash(messageAction)
                    currentAction = SessionTrace("18. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PaymentsPlans' = New 'InMotionGIT.Policy.Entity'...'")
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PaymentsPlans = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlanCollection

                    currentAction = SessionTrace("19. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.IsNew = true...")
                    currentAction = SessionTrace("19.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.IsNew = true...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.IsNew = true
                    currentAction = SessionTrace("19.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.LineOfBusiness = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LineOfBus...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.LineOfBusiness = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LineOfBusiness
                    currentAction = SessionTrace("19.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProductCode = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.ProductCo...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProductCode = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.ProductCode

                    currentAction = SessionTrace("20. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PaymentsPlans'.Add('HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan')")
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PaymentsPlans.Add(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan)

                    currentAction = SessionTrace("21. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BusinessAddress.Email = HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail...")
                    currentAction = SessionTrace("21.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BusinessAddress.Email = HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BusinessAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BusinessAddress = New InMotionGIT.General.Entity.Contracts.Address.Address
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BusinessAddress.Email = HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail

                    currentAction = SessionTrace("22. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.InsuredAmount = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineO...")
                    currentAction = SessionTrace("22.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.InsuredAmount = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineO...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.InsuredAmount = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation

                    currentAction = SessionTrace("23. Call 'Main Process Of Life Request' workflow in Asynchronous mode with tracking")
                    WorkflowInArguments = New Dictionary(Of String, Object)

                    With WorkflowInArguments
                    .Add("RiskInformation", HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation)
                    .Add("eMail", HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail)
                    .Add("Currency", HT5NNCotizacionMiInversionSeguraIIParametersInstance.Currency)
                    .Add("ClientExistInDB", HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB)
                    .Add("QuestionnairesAvailable", HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable)
                    .Add("ProducerClientID", HT5NNCotizacionMiInversionSeguraIIParametersInstance.ProducerClientID)
                    .Add("BeneficiaryType", HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType)
                    .Add("context", formContext)
                    .Add("SendMailIndicator", true)
                    .Add("PlanType", HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanType)
                    .Add("MailToProducerIndicator", false)
                    .Add("OnLinePrintIndicator", false)
                    .Add("uwCaseID", HT5NNCotizacionMiInversionSeguraIIParametersInstance.uwcaseid)
                    .Add("PreviousPayment", false)
                    .Add("ConsumerInformation", HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                    .Add("PhysicalAddress", HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI)
                    .Add("ServiceResultData", HT5NNCotizacionMiInversionSeguraIIParametersInstance.ServiceResultData)
                    .Add("eMailAddress", HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI)
                    .Add("VerificarCuestionariosIndicador", true)
                    .Add("PlanillaModificacion", HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanillaModificacion)
                    .Add("PlanillaVisualizacion", HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanillaVisualizacion)
                    .Add("UsercodeBO", HT5NNCotizacionMiInversionSeguraIIParametersInstance.UsercodeBO)
                    .Add("UsercodeFASI", HT5NNCotizacionMiInversionSeguraIIParametersInstance.UsercodeFASI)
                    End With

                    WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("ProcessMainRequestOfLifePolicyNN", "87132571-11f9-45f0-a4e8-c19d98a1a13c", 21, WorkflowInArguments, True, False, "Me.AppRelativeVirtualPath", HT5NNCotizacionMiInversionSeguraIIParametersInstance.InternalId)


                                        End If

                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "AcceptClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function button2Click(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("button2Click")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = false Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = false Then

                    currentAction = SessionTrace("2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = nothing...")
                    currentAction = SessionTrace("2.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = nothing...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = nothing

                    End If
                currentAction = SessionTrace("3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail...")
                currentAction = SessionTrace("3.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail

                currentAction = SessionTrace("4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.InsuredAmount = HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected...")
                currentAction = SessionTrace("4.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.InsuredAmount = HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.InsuredAmount = HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected

                currentAction = SessionTrace("5. Call 'Guardar el caso de manera temporal' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("RiskInformation", HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation)
                .Add("eMail", HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail)
                .Add("ProducerClientID", HT5NNCotizacionMiInversionSeguraIIParametersInstance.ProducerClientID)
                .Add("context", formContext)
                .Add("SendMailIndicator", true)
                .Add("MailToProducerIndicator", false)
                .Add("uwCaseID", HT5NNCotizacionMiInversionSeguraIIParametersInstance.uwcaseid)
                .Add("ClientExistInDB", HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB)
                .Add("PlanType", HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanType)
                .Add("PhysicalAddress", HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI)
                .Add("eMailAddress", HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI)
                .Add("ConsumerInformation", HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                .Add("PlanillaModificacion", HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanillaModificacion)
                .Add("PlanillaVisualizacion", HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanillaVisualizacion)
                .Add("UsercodeBO", HT5NNCotizacionMiInversionSeguraIIParametersInstance.UsercodeBO)
                .Add("UsercodeFASI", HT5NNCotizacionMiInversionSeguraIIParametersInstance.UsercodeFASI)
                .Add("UsingVT", true)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("TemporaryCaseSave", "b4247466-c4a8-4676-8e98-b5a02eadb2be", 11, WorkflowInArguments, True, True, "Me.AppRelativeVirtualPath", HT5NNCotizacionMiInversionSeguraIIParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.uwcaseid = WorkflowOutArguments("uwCaseID")

                currentAction = SessionTrace("6. The message 'Se ha generado el si...' will displayed as 'Splash'")
                ParametersToDictionary(HT5NNCotizacionMiInversionSeguraIIParametersInstance, parametersDictionary)
                messageAction = "Se ha generado el siguiente caso: { Value /uwcaseid }, en los próximos 3 dias puede recuperar la información y continuar con el proceso de compra. Muchas gracias por visitarnos."
                messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                resultData.AddNotifySplash(messageAction)

                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "button2Click", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function eMailChange(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("eMailClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail...")
                currentAction = SessionTrace("1.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail


                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "eMailClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function RechazarClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("RechazarClick")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance = EntryDataToClass(HT5NNCotizacionMiInversionSeguraIIParametersInstance, instance)
                currentAction = SessionTrace("1. The message 'No se continua con e...' will displayed as 'Splash'")
                ParametersToDictionary(HT5NNCotizacionMiInversionSeguraIIParametersInstance, parametersDictionary)
                messageAction = "No se continua con el proceso... No deje de visitarnos en otra oportunidad..."
                messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                resultData.AddNotifySplash(messageAction)

                instance = ClassToEntryData(instance, HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                
                StoreFormInformation(HT5NNCotizacionMiInversionSeguraIIParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "RechazarClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


        <WebMethod()>
        Public Shared Function LookUpForInvestmentFund(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  FUND_INV.NFUNDS, FUND_INV.SDESCRIPT FROM FUND_INV FUND_INV  WHERE FUND_INV.SSTATREGT = '{0}'  ORDER BY FUND_INV.SDESCRIPT ASC", "1"), 
                                            "FUND_INV", "Linked.LatCombined")

                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithCommand
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NFUNDS"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "LookUpForInvestmentFund", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForInvestmentFund")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForProductCode(id As String, RiskInformationLineOfBusiness As System.Int32) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  PRODMASTER.NBRANCH, PRODMASTER.NPRODUCT, PRODMASTER.SDESCRIPT, PRODMASTER.SSTATREGT FROM PRODMASTER PRODMASTER  WHERE PRODMASTER.SSTATREGT = '{0}'  AND (PRODMASTER.NBRANCH = @:PRODMASTERNBRANCHDependen)  ORDER BY PRODMASTER.SDESCRIPT ASC", "1"), 
                                            "PRODMASTER", "Linked.LatCombined")
                    .AddParameter("PRODMASTERNBRANCHDependen", DbType.Int32, 0, False, RiskInformationLineOfBusiness)

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NPRODUCT"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "LookUpForProductCode", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForProductCode")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForLineOfBusiness(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE10.NBRANCH, TABLE10.SDESCRIPT, TABLE10.SSTATREGT FROM TABLE10 TABLE10  WHERE TABLE10.SSTATREGT = '{0}'  ORDER BY TABLE10.SDESCRIPT ASC", "1"), 
                                            "TABLE10", "Linked.LatCombined")

                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithCommand
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NBRANCH"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "LookUpForLineOfBusiness", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForLineOfBusiness")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForInvestmentFund2(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  FUND_INV.NFUNDS, FUND_INV.SDESCRIPT FROM FUND_INV FUND_INV  WHERE FUND_INV.SSTATREGT = '{0}'  ORDER BY FUND_INV.SDESCRIPT ASC", "1"), 
                                            "FUND_INV", "Linked.LatCombined")

                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithCommand
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NFUNDS"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "LookUpForInvestmentFund2", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForInvestmentFund2")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCurrency(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE11.NCODIGINT, TABLE11.SDESCRIPT FROM TABLE11 TABLE11  WHERE TABLE11.SSTATREGT = '{0}'  ORDER BY TABLE11.SDESCRIPT ASC", "1"), 
                                            "TABLE11", "Linked.LatCombined")

                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithCommand
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NCODIGINT"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "LookUpForCurrency", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCurrency")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForTypeOfIndemnity(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE5519.NOPTION, TABLE5519.SDESCRIPT FROM TABLE5519 TABLE5519  WHERE  ( TABLE5519.SSTATREGT = '{0}' AND TABLE5519.NOPTION <> {1} )   ORDER BY TABLE5519.SDESCRIPT ASC", "1", 99), 
                                            "TABLE5519", "Linked.LatCombined")

                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithCommand
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NOPTION"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "LookUpForTypeOfIndemnity", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForTypeOfIndemnity")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForRelationshipBeneficia(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE55.NRELATION, TABLE55.SDESCRIPT, TABLE55.SSTATREGT FROM TABLE55 TABLE55  WHERE TABLE55.SSTATREGT = '{0}'  ORDER BY TABLE55.SDESCRIPT ASC", "1"), 
                                            "TABLE55", "Linked.LatCombined")

                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithCommand
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NRELATION"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "LookUpForRelationshipBeneficia", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForRelationshipBeneficia")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForRelationshipBDBeneficia(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE55.NRELATION, TABLE55.SSTATREGT, TABLE55.SDESCRIPT FROM TABLE55 TABLE55  WHERE TABLE55.SSTATREGT = '{0}'  AND NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", "1"), 
                                            "TABLE55", "Linked.LatCombined")

                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithCommand
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NRELATION"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5NNCotizacionMiInversionSeguraII", "LookUpForRelationshipBDBeneficia", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForRelationshipBDBeneficia")
                End With
            End Try
            Return result
        End Function

#End Region

#Region "Form Actions"

        Private Shared Sub Form_Initialization(ByRef currentAction As String, ByRef HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, HT5NNCotizacionMiInversionSeguraIIParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Initialization")

            currentAction = SessionTrace("1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RecoveryCaseIndicator = false...")
            currentAction = SessionTrace("1.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RecoveryCaseIndicator = false...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.RecoveryCaseIndicator = false

            currentAction = SessionTrace("2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanillaModificacion = 'NNCotizacionMiInversionSeguraEdit'...")
            currentAction = SessionTrace("2.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanillaModificacion = 'NNCotizacionMiInversionSeguraEdit'...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanillaModificacion = "NNCotizacionMiInversionSeguraEdit"
            currentAction = SessionTrace("2.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanillaVisualizacion = 'NNCotizacionMiInversionSeguraView'...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanillaVisualizacion = "NNCotizacionMiInversionSeguraView"

            currentAction = SessionTrace("3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate = Date.Today...")
            currentAction = SessionTrace("3.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate = Date.Today...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate = Date.Today
            currentAction = SessionTrace("3.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LineOfBusiness = 2...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LineOfBusiness = 2
            currentAction = SessionTrace("3.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.ProductCode = 605...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.ProductCode = 605

            currentAction = SessionTrace("4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EndingDate = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effective...")
            currentAction = SessionTrace("4.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EndingDate = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effective...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EndingDate = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate

            currentAction = SessionTrace("5. HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected = 10000...")
            currentAction = SessionTrace("5.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected = 10000...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected = 10000

            currentAction = SessionTrace("6. zonegeneral.Enabled = true")
            currentAction = SessionTrace("6.1. zonegeneral.Enabled = true...")
            resultData.AddControlBehavior("zonegeneral", "enabled")

            currentAction = SessionTrace("7. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.uwcaseid <> '0' Then")
            If HT5NNCotizacionMiInversionSeguraIIParametersInstance.uwcaseid <> "0" Then

                currentAction = SessionTrace("8. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RecoveryCaseIndicator = true...")
                currentAction = SessionTrace("8.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RecoveryCaseIndicator = true...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RecoveryCaseIndicator = true

                currentAction = SessionTrace("9. Call 'Retrieve Case Information for Request of policy' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", HT5NNCotizacionMiInversionSeguraIIParametersInstance.uwcaseid)
                .Add("ClientName", HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.CompleteClientName)
                .Add("StatusCase", HT5NNCotizacionMiInversionSeguraIIParametersInstance.StatusCase)
                .Add("RiskInformation", HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation)
                .Add("Identifier", "Investment")
                .Add("context", formContext)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformationRequestPolicy", "3967f9a8-6bc2-41d6-8672-ad0ede452cf2", 7, WorkflowInArguments, True, True, "Me.AppRelativeVirtualPath", HT5NNCotizacionMiInversionSeguraIIParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.uwcaseid = WorkflowOutArguments("uwcaseid")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.CompleteClientName = WorkflowOutArguments("ClientName")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("10. Call Shared Function 'Retrieve Client' with parameters (Client Identification)")
                Dim _Client_aa50edcdeaa040b7a968d44db452fa5f As InMotionGIT.Client.Entity.Contracts.Client
                
      _Client_aa50edcdeaa040b7a968d44db452fa5f = (New InMotionGIT.Client.Services.ClientManager).Retrieve(clientId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID, atDate:=Date.Today, childFilter:= "All")
      isNullResult = (IsNothing(_Client_aa50edcdeaa040b7a968d44db452fa5f))
      isFoundData  = Not isNullResult
    
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = _Client_aa50edcdeaa040b7a968d44db452fa5f

                currentAction = SessionTrace("11. HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineO...")
                currentAction = SessionTrace("11.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineO...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation

                currentAction = SessionTrace("12. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Currency = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Currency...")
                currentAction = SessionTrace("12.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Currency = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Currency...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.Currency = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Currency

                currentAction = SessionTrace("13. Acepto.Visible = false, TcoverCollection.Visible = true, CoverageWithCalculatedPremium.Visible = true...")
                currentAction = SessionTrace("13.1. Acepto.Visible = false...")
                resultData.AddControlBehavior("Acepto", "hide")
                currentAction = SessionTrace("13.2. TcoverCollection.Visible = true...")
                resultData.AddControlBehavior("TcoverCollection", "show")
                currentAction = SessionTrace("13.3. CoverageWithCalculatedPremium.Visible = true...")
                resultData.AddControlBehavior("CoverageWithCalculatedPremiumContainer", "show")
                currentAction = SessionTrace("13.4. EndZone.Visible = true...")
                resultData.AddControlBehavior("EndZone", "show")

                currentAction = SessionTrace("14. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true...")
                currentAction = SessionTrace("14.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true

                currentAction = SessionTrace("15. uwcaseid.Visible = true")
                currentAction = SessionTrace("15.1. uwcaseid.Visible = true...")
                resultData.AddControlBehavior("uwcaseid", "show")

                currentAction = SessionTrace("16. Perfilar.Visible = false, GeneralInf.Visible = true")
                currentAction = SessionTrace("16.1. Perfilar.Visible = false...")
                resultData.AddControlBehavior("Perfilar", "hide")
                currentAction = SessionTrace("16.2. GeneralInf.Visible = true...")
                resultData.AddControlBehavior("GeneralInf", "show")

                Else
                currentAction = SessionTrace("17. TcoverCollection.Visible = false, uwcaseid.Visible = false")
                currentAction = SessionTrace("17.1. TcoverCollection.Visible = false...")
                resultData.AddControlBehavior("TcoverCollection", "hide")
                currentAction = SessionTrace("17.2. uwcaseid.Visible = false...")
                resultData.AddControlBehavior("uwcaseid", "hide")

                    End If
            currentAction = SessionTrace("18. ClientFirstName.Visible = false, ClientLastName.Visible = false, ClientLastName2.Visible = false...")
            currentAction = SessionTrace("18.1. ClientFirstName.Visible = false...")
            resultData.AddControlBehavior("ClientFirstName", "hide")
            currentAction = SessionTrace("18.2. ClientLastName.Visible = false...")
            resultData.AddControlBehavior("ClientLastName", "hide")
            currentAction = SessionTrace("18.3. ClientLastName2.Visible = false...")
            resultData.AddControlBehavior("ClientLastName2", "hide")
            currentAction = SessionTrace("18.4. TcoverCollection.Visible = false...")
            resultData.AddControlBehavior("TcoverCollection", "hide")

            currentAction = SessionTrace("19. EndZone.Visible = true")
            currentAction = SessionTrace("19.1. EndZone.Visible = true...")
            resultData.AddControlBehavior("EndZone", "show")

            currentAction = SessionTrace("20. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true Then")
            If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true Then

                currentAction = SessionTrace("21. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                currentAction = SessionTrace("21.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client

                currentAction = SessionTrace("22. ClientFirstName.Visible = true, ClientLastName.Visible = true, ClientLastName2.Visible = true")
                currentAction = SessionTrace("22.1. ClientFirstName.Visible = true...")
                resultData.AddControlBehavior("ClientFirstName", "show")
                currentAction = SessionTrace("22.2. ClientLastName.Visible = true...")
                resultData.AddControlBehavior("ClientLastName", "show")
                currentAction = SessionTrace("22.3. ClientLastName2.Visible = true...")
                resultData.AddControlBehavior("ClientLastName2", "show")

                currentAction = SessionTrace("23. ClientFirstName.Enabled = false, ClientLastName.Enabled = false, ClientLastName2.Enabled = false")
                currentAction = SessionTrace("23.1. ClientFirstName.Enabled = false...")
                resultData.AddControlBehavior("ClientFirstName", "disabled")
                currentAction = SessionTrace("23.2. ClientLastName.Enabled = false...")
                resultData.AddControlBehavior("ClientLastName", "disabled")
                currentAction = SessionTrace("23.3. ClientLastName2.Enabled = false...")
                resultData.AddControlBehavior("ClientLastName2", "disabled")

                        Else
                currentAction = SessionTrace("24. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BusinessAddress.Country = 56...")
                currentAction = SessionTrace("24.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BusinessAddress.Country = 56...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BusinessAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BusinessAddress = New InMotionGIT.General.Entity.Contracts.Address.Address
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BusinessAddress.Country = 56
                currentAction = SessionTrace("24.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsNew = true...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsNew = true

                            End If
            currentAction = SessionTrace("25. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true Then")
            If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true Then

                currentAction = SessionTrace("26. If (HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender Not Is Null Or Not Empty '' AND HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender <> '3') Then")
                If (Not String.IsNullOrEmpty(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender) AndAlso HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.Gender <> "3") Then

                    currentAction = SessionTrace("27. ClientGender.Enabled = false")
                    currentAction = SessionTrace("27.1. ClientGender.Enabled = false...")
                    resultData.AddControlBehavior("ClientGender", "disabled")

                                        Else
                    currentAction = SessionTrace("28. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsDirty = true...")
                    currentAction = SessionTrace("28.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsDirty = true...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsDirty = true

                                            End If
                                        End If
            currentAction = SessionTrace("29. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true Then")
            If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true Then

                currentAction = SessionTrace("30. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate Not Is Null Or Not Empty '' Then")
                If Not IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate) AndAlso HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate <> Date.MinValue Then

                    currentAction = SessionTrace("31. ClientBirthDate.Enabled = false")
                    currentAction = SessionTrace("31.1. ClientBirthDate.Enabled = false...")
                    resultData.AddControlBehavior("ClientBirthDate", "disabled")

                                                    Else
                    currentAction = SessionTrace("32. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsDirty = true...")
                    currentAction = SessionTrace("32.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsDirty = true...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.IsDirty = true

                                                        End If
                                                    End If
            currentAction = SessionTrace("33. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanType = 3...")
            currentAction = SessionTrace("33.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanType = 3...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.PlanType = 3
            currentAction = SessionTrace("33.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable.Cancer = false...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable = New InMotionGIT.Questionnaires.QuestionnairesAvailable
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable.Cancer = false
            currentAction = SessionTrace("33.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable.Diabetes = false...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable = New InMotionGIT.Questionnaires.QuestionnairesAvailable
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable.Diabetes = false
            currentAction = SessionTrace("33.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable.Heart = false...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable = New InMotionGIT.Questionnaires.QuestionnairesAvailable
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.QuestionnairesAvailable.Heart = false
            currentAction = SessionTrace("33.5. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PercentageOfCostPaidUsingUnits = 100...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PercentageOfCostPaidUsingUnits = 100
            currentAction = SessionTrace("33.6. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeProfitabilityCode = 1...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeProfitabilityCode = 1
            currentAction = SessionTrace("33.7. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfIndemnity = 1...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfIndemnity = 1

            currentAction = SessionTrace("34. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate Not Is Null Or Not Empty '' Then")
            If Not IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate) AndAlso HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate <> Date.MinValue Then

                currentAction = SessionTrace("35. RangeAge.Enabled = false")
                currentAction = SessionTrace("35.1. RangeAge.Enabled = false...")
                resultData.AddControlBehavior("RangeAge", "disabled")

                currentAction = SessionTrace("36. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effe...")
                currentAction = SessionTrace("36.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effe...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate)-year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate)

                currentAction = SessionTrace("37. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age <= 35 Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age <= 35 Then

                    currentAction = SessionTrace("38. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RangeAge = 1...")
                    currentAction = SessionTrace("38.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RangeAge = 1...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RangeAge = 1

                                                                End If
                currentAction = SessionTrace("39. If (HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age >= 36 AND HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age <= 50) Then")
                If (HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age >= 36 AndAlso HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age <= 50) Then

                    currentAction = SessionTrace("40. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RangeAge = 2...")
                    currentAction = SessionTrace("40.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RangeAge = 2...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RangeAge = 2

                                                                    End If
                currentAction = SessionTrace("41. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age >= 50 Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.Age >= 50 Then

                    currentAction = SessionTrace("42. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RangeAge = 3...")
                    currentAction = SessionTrace("42.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RangeAge = 3...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RangeAge = 3

                                                                        End If
                                                                    End If
            currentAction = SessionTrace("43. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.RecoveryCaseIndicator = false Then")
            If HT5NNCotizacionMiInversionSeguraIIParametersInstance.RecoveryCaseIndicator = false Then

                currentAction = SessionTrace("44. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies' = New 'InMotionGIT.Policy.Entity'...'")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicyCollection

                currentAction = SessionTrace("45. For Each investmentfundrelatedtoproductItem As 'InMotionGIT.Product.Entit...' In 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundR...'")
                For Each investmentfundrelatedtoproductItem As InMotionGIT.Product.Entity.Contracts.InvestmentFundRelatedToProduct In HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToProductCollection

                    currentAction = SessionTrace("46. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy' = New 'InMotionGIT.Policy.Entity'...'")
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy

                    currentAction = SessionTrace("47. HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy.InvestmentFund = investmentfundrelatedtoproductItem....")
                    currentAction = SessionTrace("47.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy.InvestmentFund = investmentfundrelatedtoproductItem....")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy.InvestmentFund = investmentfundrelatedtoproductItem.InvestmentFund
                    currentAction = SessionTrace("47.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy.PercentageShare = investmentfundrelatedtoproductItem....")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy.PercentageShare = investmentfundrelatedtoproductItem.PercentageShare
                    currentAction = SessionTrace("47.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy.ProjectedProfitability = HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPo...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy.ProjectedProfitability = HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy.ProjectedProfitability

                    currentAction = SessionTrace("48. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies'.Add('HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy')")
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies.Add(HT5NNCotizacionMiInversionSeguraIIParametersInstance.InvestmentFundRelatedToPolicy)

                                                                                Next
                currentAction = SessionTrace("49. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0...")
                currentAction = SessionTrace("49.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = 0

                currentAction = SessionTrace("50. For Each investmentfundrelatedtopolicyItem2 As 'InMotionGIT.Policy.Entity...' In 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation...'")
                For Each investmentfundrelatedtopolicyItem2 As InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy In HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies

                    currentAction = SessionTrace("51. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+(inv...")
                    currentAction = SessionTrace("51.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+(inv...")

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds+(investmentfundrelatedtopolicyItem2.PercentageShare*investmentfundrelatedtopolicyItem2.ProjectedProfitability/100)

                                                                                    Next
                currentAction = SessionTrace("52. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.GuaranteedInterestInInvestment = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds...")
                currentAction = SessionTrace("52.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.GuaranteedInterestInInvestment = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.GuaranteedInterestInInvestment = HT5NNCotizacionMiInversionSeguraIIParametersInstance.TotalInvestmentFunds

                                                                                End If
            currentAction = SessionTrace("53. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PolicyExistPreviously = false...")
            currentAction = SessionTrace("53.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PolicyExistPreviously = false...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.PolicyExistPreviously = false

            currentAction = SessionTrace("54. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PolicyID = 0...")
            currentAction = SessionTrace("54.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PolicyID = 0...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PolicyID = 0

            currentAction = SessionTrace("55. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments = 0...")
            currentAction = SessionTrace("55.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments = 0...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments = 0

            currentAction = SessionTrace("56. HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 1...")
            currentAction = SessionTrace("56.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 1...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 1

            currentAction = SessionTrace("57. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.IsProducer = true Then")
            If HT5NNCotizacionMiInversionSeguraIIParametersInstance.IsProducer = true Then

                currentAction = SessionTrace("58. ProducerCode.Enabled = false")
                currentAction = SessionTrace("58.1. ProducerCode.Enabled = false...")
                resultData.AddControlBehavior("ProducerCode", "disabled")

                                                                                    Else
                currentAction = SessionTrace("59. ProducerCode.Enabled = true")
                currentAction = SessionTrace("59.1. ProducerCode.Enabled = true...")
                resultData.AddControlBehavior("ProducerCode", "enabled")

                                                                                        End If
            currentAction = SessionTrace("60. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.IsEmployee = true OR HT5NNCotizacionMiInversionSeguraIIParametersInstance.IsProducer = true Then")
            If HT5NNCotizacionMiInversionSeguraIIParametersInstance.IsEmployee = true OrElse HT5NNCotizacionMiInversionSeguraIIParametersInstance.IsProducer = true Then

                currentAction = SessionTrace("61. ProducerCode.Visible = true")
                currentAction = SessionTrace("61.1. ProducerCode.Visible = true...")
                resultData.AddControlBehavior("ProducerCode", "show")

                                                                                            Else
                currentAction = SessionTrace("62. ProducerCode.Visible = false")
                currentAction = SessionTrace("62.1. ProducerCode.Visible = false...")
                resultData.AddControlBehavior("ProducerCode", "hide")

                                                                                                End If
            currentAction = SessionTrace("63. zoneemail.Visible = false")
            currentAction = SessionTrace("63.1. zoneemail.Visible = false...")
            resultData.AddControlBehavior("zoneemail", "hide")

            currentAction = SessionTrace("64. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true Then")
            If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true Then

                currentAction = SessionTrace("65. zone18.Enabled = false")
                currentAction = SessionTrace("65.1. zone18.Enabled = false...")
                resultData.AddControlBehavior("zone18", "disabled")

                                                                                                    Else
                currentAction = SessionTrace("66. zone18.Enabled = true")
                currentAction = SessionTrace("66.1. zone18.Enabled = true...")
                resultData.AddControlBehavior("zone18", "enabled")

                                                                                                        End If
            currentAction = SessionTrace("67. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Cont...")
            currentAction = SessionTrace("67.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Cont...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
            currentAction = SessionTrace("67.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Cont...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
            currentAction = SessionTrace("67.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Cont...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress

            currentAction = SessionTrace("68. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
            currentAction = SessionTrace("68.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1
            currentAction = SessionTrace("68.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.EffectiveDate = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effective...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.EffectiveDate = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate

            currentAction = SessionTrace("69. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.DateOfLastSuccesfulContactAtThisAddress = today...")
            currentAction = SessionTrace("69.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.DateOfLastSuccesfulContactAtThisAddress = today...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.DateOfLastSuccesfulContactAtThisAddress = today

            currentAction = SessionTrace("70. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Pr...")
            currentAction = SessionTrace("70.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Pr...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
            currentAction = SessionTrace("70.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1
            currentAction = SessionTrace("70.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = HT5NNCotizacionMiInversionSeguraIIParametersInstance.UsercodeBO...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = HT5NNCotizacionMiInversionSeguraIIParametersInstance.UsercodeBO


        End Sub
	
        Private Shared Sub Form_Load(ByRef currentAction As String, ByRef HT5NNCotizacionMiInversionSeguraIIParametersInstance As HT5NNCotizacionMiInversionSeguraIIParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, HT5NNCotizacionMiInversionSeguraIIParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Load")

            currentAction = SessionTrace("1. Perfilar.Visible = false, GeneralInf.Visible = true, zonegeneral.Enabled = false...")
            currentAction = SessionTrace("1.1. Perfilar.Visible = false...")
            resultData.AddControlBehavior("Perfilar", "hide")
            currentAction = SessionTrace("1.2. GeneralInf.Visible = true...")
            resultData.AddControlBehavior("GeneralInf", "show")
            currentAction = SessionTrace("1.3. zonegeneral.Enabled = false...")
            resultData.AddControlBehavior("zonegeneral", "disabled")
            currentAction = SessionTrace("1.4. TcoverCollection.Visible = true...")
            resultData.AddControlBehavior("TcoverCollection", "show")
            currentAction = SessionTrace("1.5. Cotizar.Visible = false...")
            resultData.AddControlBehavior("Cotizar", "hide")
            currentAction = SessionTrace("1.6. label5.Visible = false...")
            resultData.AddControlBehavior("label5", "hide")
            currentAction = SessionTrace("1.7. label8.Visible = false...")
            resultData.AddControlBehavior("label8", "hide")
            currentAction = SessionTrace("1.8. EndZone.Visible = false...")
            resultData.AddControlBehavior("EndZone", "hide")
            currentAction = SessionTrace("1.9. Proyectar.Visible = false...")
            resultData.AddControlBehavior("Proyectar", "hide")
            currentAction = SessionTrace("1.10. ProyeccionInf.Visible = true...")
            resultData.AddControlBehavior("ProyeccionInf", "show")
            currentAction = SessionTrace("1.11. zone2.Enabled = false...")
            resultData.AddControlBehavior("zone2", "disabled")
            currentAction = SessionTrace("1.12. tabcontainer0.Visible = true...")
            resultData.AddControlBehavior("tabcontainer0", "show")
            currentAction = SessionTrace("1.13. zone10.Enabled = false...")
            resultData.AddControlBehavior("zone10", "disabled")
            currentAction = SessionTrace("1.14. zone16.Enabled = false...")
            resultData.AddControlBehavior("zone16", "disabled")
            currentAction = SessionTrace("1.15. zone17.Visible = false...")
            resultData.AddControlBehavior("zone17", "hide")
            currentAction = SessionTrace("1.16. tab3.Visible = true...")
            resultData.AddControlBehavior("tab3", "show")
            currentAction = SessionTrace("1.17. zone18.Enabled = false...")
            resultData.AddControlBehavior("zone18", "disabled")
            currentAction = SessionTrace("1.18. zone24.Enabled = false...")
            resultData.AddControlBehavior("zone24", "disabled")
            currentAction = SessionTrace("1.19. zone14.Enabled = false...")
            resultData.AddControlBehavior("zone14", "disabled")
            currentAction = SessionTrace("1.20. zone22.Visible = false...")
            resultData.AddControlBehavior("zone22", "hide")
            currentAction = SessionTrace("1.21. tab4Salud.Visible = true...")
            resultData.AddControlBehavior("tab4Salud", "show")
            currentAction = SessionTrace("1.22. zone20.Enabled = false...")
            resultData.AddControlBehavior("zone20", "disabled")
            currentAction = SessionTrace("1.23. zone21.Visible = false...")
            resultData.AddControlBehavior("zone21", "hide")
            currentAction = SessionTrace("1.24. tab0.Visible = true...")
            resultData.AddControlBehavior("tab0", "show")
            currentAction = SessionTrace("1.25. zone4.Enabled = false...")
            resultData.AddControlBehavior("zone4", "disabled")
            currentAction = SessionTrace("1.26. button1.Visible = false...")
            resultData.AddControlBehavior("button1", "hide")
            currentAction = SessionTrace("1.27. zoneemail.Visible = false...")
            resultData.AddControlBehavior("zoneemail", "hide")
            currentAction = SessionTrace("1.28. zone13.Visible = false...")
            resultData.AddControlBehavior("zone13", "hide")
            currentAction = SessionTrace("1.29. ClientFirstName.Visible = true...")
            resultData.AddControlBehavior("ClientFirstName", "show")
            currentAction = SessionTrace("1.30. zone18.Visible = true...")
            resultData.AddControlBehavior("zone18", "show")
            currentAction = SessionTrace("1.31. ClientLastName.Visible = true...")
            resultData.AddControlBehavior("ClientLastName", "show")
            currentAction = SessionTrace("1.32. ClientLastName2.Visible = true...")
            resultData.AddControlBehavior("ClientLastName2", "show")
            currentAction = SessionTrace("1.33. zone8.Visible = true...")
            resultData.AddControlBehavior("zone8", "show")
            currentAction = SessionTrace("1.34. zone24.Visible = true...")
            resultData.AddControlBehavior("zone24", "show")
            currentAction = SessionTrace("1.35. zone14.Visible = true...")
            resultData.AddControlBehavior("zone14", "show")
            currentAction = SessionTrace("1.36. zone2.Visible = true...")
            resultData.AddControlBehavior("zone2", "show")
            currentAction = SessionTrace("1.37. zone12.Visible = true...")
            resultData.AddControlBehavior("zone12", "show")
            currentAction = SessionTrace("1.38. zone10.Visible = true...")
            resultData.AddControlBehavior("zone10", "show")
            currentAction = SessionTrace("1.39. zone16.Visible = true...")
            resultData.AddControlBehavior("zone16", "show")

            currentAction = SessionTrace("2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RecoveryCaseIndicator = true...")
            currentAction = SessionTrace("2.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RecoveryCaseIndicator = true...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.RecoveryCaseIndicator = true

            currentAction = SessionTrace("3. Call Shared Function 'Retrieve Underwriting Case' with parameters (Case ID, Effective Date)")
            Dim _UnderwritingCase_d74baf4716e747e29bcf96dc60fbf19a As InMotionGIT.Underwriting.Contracts.UnderwritingCase
            _UnderwritingCase_d74baf4716e747e29bcf96dc60fbf19a = InMotionGIT.Underwriting.Proxy.Manager.Retrieve(underwritingCaseID:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.uwcaseid, atDate:=Date.Today)
            HT5NNCotizacionMiInversionSeguraIIParametersInstance.UnderwritingCase = _UnderwritingCase_d74baf4716e747e29bcf96dc60fbf19a
            isNullResult = (IsNothing(_UnderwritingCase_d74baf4716e747e29bcf96dc60fbf19a))

            currentAction = SessionTrace("4. Call Function 'Amendment setup' with parameters (RiskInformation Object, Effective Date)")
            Dim _RiskInformation_14242fca2db245c280a45a2461fcf72b As InMotionGIT.Policy.Entity.Contracts.RiskInformation
            _RiskInformation_14242fca2db245c280a45a2461fcf72b = (New InMotionGIT.PolicyManager.Services.RiskManager).AmendmentSetup(risk:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.UnderwritingCase.RiskInformation, atDate:=Date.Today)
            HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = _RiskInformation_14242fca2db245c280a45a2461fcf72b
            isNullResult = (IsNothing(_RiskInformation_14242fca2db245c280a45a2461fcf72b))

            currentAction = SessionTrace("5. Call Shared Sub 'Clear Form Errors' without parameters")
            
        HT5NNCotizacionMiInversionSeguraIIParametersInstance.Errors.Clear()
	formContext.Errors.Clear()
    

            currentAction = SessionTrace("6. Call Shared Function 'Retrieve Client' with parameters (Client Identification)")
            Dim _Client_70936c861ffe4646b08b4a5f045d0599 As InMotionGIT.Client.Entity.Contracts.Client
            
      _Client_70936c861ffe4646b08b4a5f045d0599 = (New InMotionGIT.Client.Services.ClientManager).Retrieve(clientId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID, atDate:=Date.Today, childFilter:= "All")
      isNullResult = (IsNothing(_Client_70936c861ffe4646b08b4a5f045d0599))
      isFoundData  = Not isNullResult
    
            HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = _Client_70936c861ffe4646b08b4a5f045d0599

            currentAction = SessionTrace("7. HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineO...")
            currentAction = SessionTrace("7.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineO...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmountSelected = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation
            currentAction = SessionTrace("7.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmount = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineO...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.InsuredAmount = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation
            currentAction = SessionTrace("7.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.eMail = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.eMailAddressDefault
            currentAction = SessionTrace("7.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.Currency = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Currency...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.Currency = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Currency

            currentAction = SessionTrace("8. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true...")
            currentAction = SessionTrace("8.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientExistInDB = true

            currentAction = SessionTrace("9. uwcaseid.Visible = true")
            currentAction = SessionTrace("9.1. uwcaseid.Visible = true...")
            resultData.AddControlBehavior("uwcaseid", "show")

            currentAction = SessionTrace("10. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1...")
            currentAction = SessionTrace("10.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.CompanyId = 1
            currentAction = SessionTrace("10.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Country = 58...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Country = 58
            currentAction = SessionTrace("10.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = 9998...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation.Security.Usercode = 9998

            currentAction = SessionTrace("11. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
            currentAction = SessionTrace("11.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
            currentAction = SessionTrace("11.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Cont...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
            currentAction = SessionTrace("11.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Cont...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address

            currentAction = SessionTrace("12. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
            currentAction = SessionTrace("12.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID
            currentAction = SessionTrace("12.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1
            currentAction = SessionTrace("12.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID

            currentAction = SessionTrace("13. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
            currentAction = SessionTrace("13.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID
            currentAction = SessionTrace("13.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1
            currentAction = SessionTrace("13.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID

            currentAction = SessionTrace("14. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
            currentAction = SessionTrace("14.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType = 1
            currentAction = SessionTrace("14.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = 3...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress = 3
            currentAction = SessionTrace("14.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany.Code = 1...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany.Code = 1
            currentAction = SessionTrace("14.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6

            currentAction = SessionTrace("15. If (HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID Is Null Or Empty  OR HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) Then")
            If (IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID) OrElse HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) Then

                currentAction = SessionTrace("16. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                Dim _AddressDLICollection_62898af4db2f4077afcbfdd9ca9257eb As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                _AddressDLICollection_62898af4db2f4077afcbfdd9ca9257eb = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany, recordOwnerType:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerType, recordOwnerId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.RecordOwnerID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_62898af4db2f4077afcbfdd9ca9257eb
                isNullResult = (IsNothing(_AddressDLICollection_62898af4db2f4077afcbfdd9ca9257eb))

                currentAction = SessionTrace("17. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                    currentAction = SessionTrace("18. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                    currentAction = SessionTrace("18.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).AddressID
                    currentAction = SessionTrace("18.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                    currentAction = SessionTrace("19. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                    Dim _AddresseMailDLI_b9a2d6658efe45049c7367f42bc0e58a As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                    _AddresseMailDLI_b9a2d6658efe45049c7367f42bc0e58a = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = _AddresseMailDLI_b9a2d6658efe45049c7367f42bc0e58a
                    isNullResult = (IsNothing(_AddresseMailDLI_b9a2d6658efe45049c7367f42bc0e58a))

                        End If
                currentAction = SessionTrace("20. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                currentAction = SessionTrace("20.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1
                currentAction = SessionTrace("20.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                currentAction = SessionTrace("20.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1
                currentAction = SessionTrace("20.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1

                currentAction = SessionTrace("21. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                Dim _AddressDLICollection_0c1df56c5d8f47b6b650b35c053b92b9 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                _AddressDLICollection_0c1df56c5d8f47b6b650b35c053b92b9 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_0c1df56c5d8f47b6b650b35c053b92b9
                isNullResult = (IsNothing(_AddressDLICollection_0c1df56c5d8f47b6b650b35c053b92b9))

                currentAction = SessionTrace("22. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                    currentAction = SessionTrace("23. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                    currentAction = SessionTrace("23.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).AddressID
                    currentAction = SessionTrace("23.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                    currentAction = SessionTrace("24. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                    Dim _AddressPhysicalAddressDLI_44b803b786714aa2aa1f6c599d75835d As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                    _AddressPhysicalAddressDLI_44b803b786714aa2aa1f6c599d75835d = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_44b803b786714aa2aa1f6c599d75835d
                    isNullResult = (IsNothing(_AddressPhysicalAddressDLI_44b803b786714aa2aa1f6c599d75835d))

                            Else
                    currentAction = SessionTrace("25. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                    currentAction = SessionTrace("25.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2

                    currentAction = SessionTrace("26. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_aaffe873545f44db80007660aa026757 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_aaffe873545f44db80007660aa026757 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_aaffe873545f44db80007660aa026757
                    isNullResult = (IsNothing(_AddressDLICollection_aaffe873545f44db80007660aa026757))

                    currentAction = SessionTrace("27. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                                    Else
                        currentAction = SessionTrace("28. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                        currentAction = SessionTrace("28.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).A...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).AddressID
                        currentAction = SessionTrace("28.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("29. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddressPhysicalAddressDLI_3c4fee229d874c41bc9c1f748efed90f As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                        _AddressPhysicalAddressDLI_3c4fee229d874c41bc9c1f748efed90f = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_3c4fee229d874c41bc9c1f748efed90f
                        isNullResult = (IsNothing(_AddressPhysicalAddressDLI_3c4fee229d874c41bc9c1f748efed90f))

                                        End If
                                    End If
                                End If
            currentAction = SessionTrace("30. If (HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID Not Is Null Or Not Empty  AND HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0) Then")
            If (Not IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID) AndAlso HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0) Then

                currentAction = SessionTrace("31. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                Dim _AddressDLICollection_9be5897e57754f1789c650bbed25d1fd As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                _AddressDLICollection_9be5897e57754f1789c650bbed25d1fd = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.UserCompany, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_9be5897e57754f1789c650bbed25d1fd
                isNullResult = (IsNothing(_AddressDLICollection_9be5897e57754f1789c650bbed25d1fd))

                currentAction = SessionTrace("32. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                    currentAction = SessionTrace("33. Cotizar.Enabled = false, Acepto.Enabled = false, RiskInformationEffectiveDate.Enabled = false...")
                    currentAction = SessionTrace("33.1. Cotizar.Enabled = false...")
                    resultData.AddControlBehavior("Cotizar", "disabled")
                    currentAction = SessionTrace("33.2. Acepto.Enabled = false...")
                    resultData.AddControlBehavior("Acepto", "disabled")
                    currentAction = SessionTrace("33.3. RiskInformationEffectiveDate.Enabled = false...")
                    resultData.AddControlBehavior("RiskInformationEffectiveDate", "disabled")
                    currentAction = SessionTrace("33.4. PaymentFrequency.Enabled = false...")
                    resultData.AddControlBehavior("PaymentFrequency", "disabled")

                    currentAction = SessionTrace("34. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                    currentAction = SessionTrace("34.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                    currentAction = SessionTrace("35. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                    Dim _AddresseMailDLI_8d918650edfc4a149cc351f2f053cbee As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
                    _AddresseMailDLI_8d918650edfc4a149cc351f2f053cbee = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddresseMailDLI = _AddresseMailDLI_8d918650edfc4a149cc351f2f053cbee
                    isNullResult = (IsNothing(_AddresseMailDLI_8d918650edfc4a149cc351f2f053cbee))

                                            End If
                currentAction = SessionTrace("36. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                currentAction = SessionTrace("36.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1
                currentAction = SessionTrace("36.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1
                currentAction = SessionTrace("36.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1
                currentAction = SessionTrace("36.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1

                currentAction = SessionTrace("37. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                Dim _AddressDLICollection_5f3facdf72d4471a9b140fd8b899c9e1 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                _AddressDLICollection_5f3facdf72d4471a9b140fd8b899c9e1 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_5f3facdf72d4471a9b140fd8b899c9e1
                isNullResult = (IsNothing(_AddressDLICollection_5f3facdf72d4471a9b140fd8b899c9e1))

                currentAction = SessionTrace("38. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                    currentAction = SessionTrace("39. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                    currentAction = SessionTrace("39.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                    currentAction = SessionTrace("40. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                    Dim _AddressPhysicalAddressDLI_e8e5c0fc16cb496baade8703714e884e As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                    _AddressPhysicalAddressDLI_e8e5c0fc16cb496baade8703714e884e = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_e8e5c0fc16cb496baade8703714e884e
                    isNullResult = (IsNothing(_AddressPhysicalAddressDLI_e8e5c0fc16cb496baade8703714e884e))

                                                Else
                    currentAction = SessionTrace("41. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                    currentAction = SessionTrace("41.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
                End If
                                    If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
                End If

                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2

                    currentAction = SessionTrace("42. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)")
                    Dim _AddressDLICollection_269bae0039374788a53c07c4ce000f90 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
                    _AddressDLICollection_269bae0039374788a53c07c4ce000f90 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate, userCompany:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation, typeOfAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress)
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection = _AddressDLICollection_269bae0039374788a53c07c4ce000f90
                    isNullResult = (IsNothing(_AddressDLICollection_269bae0039374788a53c07c4ce000f90))

                    currentAction = SessionTrace("43. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then")
                    If HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection.Count <> 0 Then

                                                        Else
                        currentAction = SessionTrace("44. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                        currentAction = SessionTrace("44.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).I...")
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                End If
                                        If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
                End If

                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey = HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressDLICollection(0).InternalAddressKey

                        currentAction = SessionTrace("45. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)")
                        Dim _AddressPhysicalAddressDLI_0c0a01d34ac0438ba9137a04b82292be As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
                        _AddressPhysicalAddressDLI_0c0a01d34ac0438ba9137a04b82292be = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=HT5NNCotizacionMiInversionSeguraIIParametersInstance.ConsumerInformation)
                        HT5NNCotizacionMiInversionSeguraIIParametersInstance.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_0c0a01d34ac0438ba9137a04b82292be
                        isNullResult = (IsNothing(_AddressPhysicalAddressDLI_0c0a01d34ac0438ba9137a04b82292be))

                                                            End If
                                                        End If
                                                    End If
            currentAction = SessionTrace("46. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false...")
            currentAction = SessionTrace("46.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false

            currentAction = SessionTrace("47. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded...")
            currentAction = SessionTrace("47.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClientIncluded

            currentAction = SessionTrace("48. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
            currentAction = SessionTrace("48.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID

            currentAction = SessionTrace("49. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.TotalOrig...")
            currentAction = SessionTrace("49.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.TotalOrig...")
                            If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

            HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.TotalOriginalAnnualPremium

            currentAction = SessionTrace("50. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then")
            If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then

                currentAction = SessionTrace("51. ProyeccionInf.Visible = true, Perfilar.Visible = false")
                currentAction = SessionTrace("51.1. ProyeccionInf.Visible = true...")
                resultData.AddControlBehavior("ProyeccionInf", "show")
                currentAction = SessionTrace("51.2. Perfilar.Visible = false...")
                resultData.AddControlBehavior("Perfilar", "hide")

                currentAction = SessionTrace("52. HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaNacimiento = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                currentAction = SessionTrace("52.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaNacimiento = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaNacimiento = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate

                currentAction = SessionTrace("53. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PaymentsPlans' = New 'InMotionGIT.Policy.Entity'...'")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PaymentsPlans = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlanCollection

                currentAction = SessionTrace("54. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.LowestLimitOfPolicyYear = 1...")
                currentAction = SessionTrace("54.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.LowestLimitOfPolicyYear = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.LowestLimitOfPolicyYear = 1
                currentAction = SessionTrace("54.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProductCode = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.ProductCo...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProductCode = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.ProductCode
                currentAction = SessionTrace("54.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.LineOfBusiness = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LineOfBus...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.LineOfBusiness = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LineOfBusiness
                currentAction = SessionTrace("54.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.RecordEffectiveDate = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effective...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.RecordEffectiveDate = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate
                currentAction = SessionTrace("54.5. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.HighestLimitOfPolicyYear = 99...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.HighestLimitOfPolicyYear = 99
                currentAction = SessionTrace("54.6. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.IsDirty = true...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.IsDirty = true
                currentAction = SessionTrace("54.7. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.IsNew = true...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.IsNew = true
                currentAction = SessionTrace("54.8. HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.PolicyID = 0...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.PolicyID = 0

                currentAction = SessionTrace("55. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PaymentsPlans'.Add('HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan')")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PaymentsPlans.Add(HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan)

                currentAction = SessionTrace("56. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.ActuarialAge = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effe...")
                currentAction = SessionTrace("56.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.ActuarialAge = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effe...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.ActuarialAge = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate)-year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate)

                currentAction = SessionTrace("57. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAge = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effe...")
                currentAction = SessionTrace("57.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAge = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Effe...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuredAge = year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate)-year(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate)

                currentAction = SessionTrace("58. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.MaximumAge = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineO...")
                currentAction = SessionTrace("58.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.MaximumAge = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineO...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.MaximumAge = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.ActuarialAge+20

                currentAction = SessionTrace("59. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.AgreedProjectedAnnualPremium = HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnn...")
                currentAction = SessionTrace("59.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.AgreedProjectedAnnualPremium = HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnn...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.AgreedProjectedAnnualPremium = HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments

                currentAction = SessionTrace("60. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuranceDuration = 0...")
                currentAction = SessionTrace("60.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuranceDuration = 0...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.InsuranceDuration = 0

                currentAction = SessionTrace("61. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.DurationOfPayments = 99...")
                currentAction = SessionTrace("61.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.DurationOfPayments = 99...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.DurationOfPayments = 99
                currentAction = SessionTrace("61.2. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfPaymentsPeriod = 5...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfPaymentsPeriod = 5
                currentAction = SessionTrace("61.3. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfDurationOfPaymentsNose = 0...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfDurationOfPaymentsNose = 0
                currentAction = SessionTrace("61.4. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfDuration = 1...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.TypeOfDuration = 1
                currentAction = SessionTrace("61.5. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PolicyModule = 2...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.PolicyModule = 2

                                                        End If
            currentAction = SessionTrace("62. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then")
            If HT5NNCotizacionMiInversionSeguraIIParametersInstance.ErrorsFound = false Then

                currentAction = SessionTrace("63. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = 00000000009998...")
                currentAction = SessionTrace("63.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = 00000000009998...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = 00000000009998

                currentAction = SessionTrace("64. Call 'Crea una poliza para realizar la proyeccion en la cotizacion de vida inversion' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("context", formContext)
                .Add("RiskInformation", HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("CreaPolizaParaProyeccionDemo", "fc9578ec-e90e-45fd-80aa-b474243309b9", 1, WorkflowInArguments, True, True, "Me.AppRelativeVirtualPath", HT5NNCotizacionMiInversionSeguraIIParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaFinal = WorkflowOutArguments("FechaFinal")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.PolicyIDProyeccion = WorkflowOutArguments("PolizaProyeccion")

                currentAction = SessionTrace("65. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado...")
                currentAction = SessionTrace("65.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado...")
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
                End If
                                If IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
                End If

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.ClientID = HT5NNCotizacionMiInversionSeguraIIParametersInstance.ClienteIndicado

                currentAction = SessionTrace("66. HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaNacimiento = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")
                currentAction = SessionTrace("66.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaNacimiento = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryIn...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaNacimiento = HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.PrimaryInsured.Client.BirthDate

                currentAction = SessionTrace("67. Call INSUDB.UPDATE_CHRG_VIL7002PKG.INSCALILUSTRATION ('UPDATE_CHRG_VIL7002PKG.INSCALILUSTRATION')")
                     With New DataManagerFactory(True, "UPDATE_CHRG_VIL7002PKG.INSCALILUSTRATION", "Linked.LatCombined")
                        .AddParameter("SCERTYPE", DbType.AnsiStringFixedLength, 1, ("2" = String.Empty), "2")
                        .AddParameter("NBRANCH", DbType.Decimal, 5, False, 2)
                        .AddParameter("NPRODUCT", DbType.Decimal, 5, False, 605)
                        .AddParameter("NUSERCODE", DbType.Decimal, 5, False, 9998)
                        .AddParameter("DEFFECDATE", DbType.DateTime, 0, (HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate = Date.MinValue), HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.EffectiveDate)
                        .AddParameter("SKEY", DbType.AnsiString, 20, (HT5NNCotizacionMiInversionSeguraIIParametersInstance.ProcedureKeyValue = String.Empty), HT5NNCotizacionMiInversionSeguraIIParametersInstance.ProcedureKeyValue, ParameterDirection.InputOutput)
                        .AddParameter("NOPTION", DbType.Decimal, 38, False, 3)
                        .AddParameter("NVP_INITIAL", DbType.Decimal, 18, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorNulo)
                        .AddParameter("NPOLICY", DbType.Decimal, 10, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.PolicyIDProyeccion)
                        .AddParameter("NCERTIF", DbType.Decimal, 10, False, 0)
                        .AddParameter("NINTWARR", DbType.Decimal, 8, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.GuaranteedInterestInInvestment)
                        .AddParameter("NINTWARRSAVING", DbType.Decimal, 8, False, 0)
                        .AddParameter("DBIRTHDATE", DbType.DateTime, 0, (HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaNacimiento = Date.MinValue), HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaNacimiento)
                        .AddParameter("DEFFECDATE_TO", DbType.DateTime, 0, (HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaFinal = Date.MinValue), HT5NNCotizacionMiInversionSeguraIIParametersInstance.FechaFinal)
                        .AddParameter("NPREMDEAL_ANU", DbType.Decimal, 18, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.PaymentsPlan.ProjectedAnnualPayments)
                        .AddParameter("NINTWARR2", DbType.Decimal, 8, False, 0)
                        .AddParameter("NINTWARRSAVING2", DbType.Decimal, 8, False, 0)
                        .AddParameter("NTOP_AGE", DbType.Decimal, 3, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.LifeLineOfBusiness.MaximumAge)
                        .AddParameter("NCAUSE", DbType.Decimal, 5, False, 4)
                        .AddParameter("NIDPROCES", DbType.Decimal, 10, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.ValorNulo)
 
                        .ProcedureExecute()
                If Not IsNothing(.ParameterByName("SKEY")) AndAlso Not IsNothing(.ParameterByName("SKEY").Value) Then
                    HT5NNCotizacionMiInversionSeguraIIParametersInstance.ProcedureKeyValue = .ParameterByName("SKEY").Value
                End If

                End With


                currentAction = SessionTrace("68. 'HT5NNCotizacionMiInversionSeguraIIParametersInstance.PROJECTVULCollection' = New 'InMotionGIT.Policy.Entity'...'")
                HT5NNCotizacionMiInversionSeguraIIParametersInstance.PROJECTVULCollection = New InMotionGIT.Policy.Entity.Contracts.PROJECTVULCollection

                currentAction = SessionTrace("69. SELECT PROJECTVUL.NBRANCH, PROJECTVUL.SCERTYPE, PROJECTVUL.NPRODUCT FROM PROJECTVUL... WHERE PROJECTVUL.NYEAR <= 30 AND PROJECTVUL.NPOLICY = HT5NNCotizacionMiInversionSeguraIIParametersInstance.PolicyIDProyeccion )")
                isFoundData = False
                       With New DataManagerFactory("SELECT PROJECTVUL.NBRANCH, PROJECTVUL.SCERTYPE, PROJECTVUL.NPRODUCT, PROJECTVUL.NPOLICY, PROJECTVUL.NYEAR, PROJECTVUL.NAGE, PROJECTVUL.NPREMIUM, PROJECTVUL.NVP, PROJECTVUL.NSURRAMOUNT, PROJECTVUL.NCAPITAL FROM PROJECTVUL PROJECTVUL  WHERE (PROJECTVUL.NYEAR <= 30 AND PROJECTVUL.NPOLICY = @:PROJECTVULNPOLICY1) ORDER BY PROJECTVUL.NYEAR ASC", "PROJECTVUL", "Linked.LatCombined")
.AddParameter("PROJECTVULNPOLICY1", DbType.Int32, 10, False, HT5NNCotizacionMiInversionSeguraIIParametersInstance.PolicyIDProyeccion)
 
            selectDataTableItem = .QueryExecuteToTable(True)  
        End With
                With selectDataTableItem
                        If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                            isFoundData = True 
                            HT5NNCotizacionMiInversionSeguraIIParametersInstance.PROJECTVULCollection = New InMotionGIT.Policy.Entity.Contracts.PROJECTVULCollection 
                            Dim newItem As InMotionGIT.Policy.Entity.Contracts.PROJECTVUL 
                            For Each itemData As DataRow In .Rows
                                 newItem = New InMotionGIT.Policy.Entity.Contracts.PROJECTVUL
                        newItem.YearOfThePolicy = itemData.NumericValue("NYEAR") 
                        newItem.InsuredAge = itemData.NumericValue("NAGE") 
                        newItem.AccumulatdAmount = itemData.NumericValue("NPREMIUM") 
                        newItem.PolicyValueOfProjectedProfitablity = itemData.NumericValue("NVP") 
                        newItem.SurrenderAvailableAmount = itemData.NumericValue("NSURRAMOUNT") 
                        newItem.DeathCoverageAmount = itemData.NumericValue("NCAPITAL") 

                                  HT5NNCotizacionMiInversionSeguraIIParametersInstance.PROJECTVULCollection.Add(newItem)
                            Next
                        End If
                End With

                                                            End If
            currentAction = SessionTrace("70. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Beneficiaries Not Is Null Or Not Empty  AND HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Beneficiaries.Count <> 0 Then")
            If Not IsNothing(HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Beneficiaries) AndAlso HT5NNCotizacionMiInversionSeguraIIParametersInstance.RiskInformation.Beneficiaries.Count <> 0 Then

                currentAction = SessionTrace("71. HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 3...")
                currentAction = SessionTrace("71.1. HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 3...")

                HT5NNCotizacionMiInversionSeguraIIParametersInstance.BeneficiaryType = 3

                currentAction = SessionTrace("72. zoneAsignadoBeneficia.Visible = true, AgregarBeneficiarioBeneficia.Visible = false")
                currentAction = SessionTrace("72.1. zoneAsignadoBeneficia.Visible = true...")
                resultData.AddControlBehavior("zoneAsignadoBeneficia", "show")
                currentAction = SessionTrace("72.2. AgregarBeneficiarioBeneficia.Visible = false...")
                resultData.AddControlBehavior("AgregarBeneficiarioBeneficia", "hide")

                                                                End If
            currentAction = SessionTrace("73. If HT5NNCotizacionMiInversionSeguraIIParametersInstance.frompanel = true Then")
            If HT5NNCotizacionMiInversionSeguraIIParametersInstance.frompanel = true Then

                currentAction = SessionTrace("74. Perfilar.Visible = false, zonegeneral.Enabled = false, Cotizar.Visible = false...")
                currentAction = SessionTrace("74.1. Perfilar.Visible = false...")
                resultData.AddControlBehavior("Perfilar", "hide")
                currentAction = SessionTrace("74.2. zonegeneral.Enabled = false...")
                resultData.AddControlBehavior("zonegeneral", "disabled")
                currentAction = SessionTrace("74.3. Cotizar.Visible = false...")
                resultData.AddControlBehavior("Cotizar", "hide")
                currentAction = SessionTrace("74.4. label5.Visible = false...")
                resultData.AddControlBehavior("label5", "hide")
                currentAction = SessionTrace("74.5. label8.Visible = false...")
                resultData.AddControlBehavior("label8", "hide")
                currentAction = SessionTrace("74.6. EndZone.Visible = false...")
                resultData.AddControlBehavior("EndZone", "hide")
                currentAction = SessionTrace("74.7. ProyeccionInf.Visible = false...")
                resultData.AddControlBehavior("ProyeccionInf", "hide")
                currentAction = SessionTrace("74.8. zone5.Enabled = false...")
                resultData.AddControlBehavior("zone5", "disabled")
                currentAction = SessionTrace("74.9. zone22.Visible = false...")
                resultData.AddControlBehavior("zone22", "hide")
                currentAction = SessionTrace("74.10. zone20.Enabled = false...")
                resultData.AddControlBehavior("zone20", "disabled")
                currentAction = SessionTrace("74.11. zone21.Visible = false...")
                resultData.AddControlBehavior("zone21", "hide")
                currentAction = SessionTrace("74.12. zoneBeneficiariosBeneficia.Enabled = false...")
                resultData.AddControlBehavior("zoneBeneficiariosBeneficia", "disabled")
                currentAction = SessionTrace("74.13. zone11Beneficia.Visible = false...")
                resultData.AddControlBehavior("zone11Beneficia", "hide")
                currentAction = SessionTrace("74.14. zoneemail.Visible = false...")
                resultData.AddControlBehavior("zoneemail", "hide")
                currentAction = SessionTrace("74.15. zone13.Visible = false...")
                resultData.AddControlBehavior("zone13", "hide")

                                                                    End If

        End Sub
#End Region
#Region "Utilities"

        Private Shared Sub ParametersToDictionary(formData As HT5NNCotizacionMiInversionSeguraIIParameters, ByRef target As Dictionary(Of String, Object))
            If IsNothing(target) Then
                target = New Dictionary(Of String, Object)

                target.Add("RiskInformation", formData.RiskInformation)
                target.Add("uwcaseid", formData.uwcaseid)
                target.Add("uwreqid", formData.uwreqid)
                target.Add("InsuredAmount", formData.InsuredAmount)
                target.Add("InsuredAmountSelected", formData.InsuredAmountSelected)
                target.Add("PlanType", formData.PlanType)
                target.Add("ClientExistInDB", formData.ClientExistInDB)
                target.Add("eMail", formData.eMail)
                target.Add("Currency", formData.Currency)
                target.Add("QueryType", formData.QueryType)
                target.Add("MasaCorporal", formData.MasaCorporal)
                target.Add("Age", formData.Age)
                target.Add("MessagePopUp", formData.MessagePopUp)
                target.Add("MessageIndicator", formData.MessageIndicator)
                target.Add("QuestionnairesAvailable", formData.QuestionnairesAvailable)
                target.Add("ProducerClientID", formData.ProducerClientID)
                target.Add("DescontarAhorros", formData.DescontarAhorros)
                target.Add("DescontarUnidades", formData.DescontarUnidades)
                target.Add("StatusRun", formData.StatusRun)
                target.Add("RangeAge", formData.RangeAge)
                target.Add("RangeCapital", formData.RangeCapital)
                target.Add("FundsFound", formData.FundsFound)
                target.Add("TotalInvestmentFunds", formData.TotalInvestmentFunds)
                target.Add("ErrorsFound", formData.ErrorsFound)
                target.Add("ProcedureKeyValue", formData.ProcedureKeyValue)
                target.Add("Parametro2", formData.Parametro2)
                target.Add("Parametro3", formData.Parametro3)
                target.Add("Parametro4", formData.Parametro4)
                target.Add("FechaNacimiento", formData.FechaNacimiento)
                target.Add("InitialYear", formData.InitialYear)
                target.Add("EndYear", formData.EndYear)
                target.Add("AporteAnual", formData.AporteAnual)
                target.Add("ValorNulo", formData.ValorNulo)
                target.Add("FechaFinal", formData.FechaFinal)
                target.Add("OnLinePrintResult", formData.OnLinePrintResult)
                target.Add("PolicyDocument", formData.PolicyDocument)
                target.Add("PolicyExistPreviously", formData.PolicyExistPreviously)
                target.Add("PolicyIDProyeccion", formData.PolicyIDProyeccion)
                target.Add("PROJECTVULCollection", formData.PROJECTVULCollection)
                target.Add("BeneficiaryType", formData.BeneficiaryType)
                target.Add("IsProducer", formData.IsProducer)
                target.Add("ProducerCode", formData.ProducerCode)
                target.Add("IsEmployee", formData.IsEmployee)
                target.Add("RecoveryCaseIndicator", formData.RecoveryCaseIndicator)
                target.Add("StatusCase", formData.StatusCase)
                target.Add("InvestmentFundRelatedToProductCollection", formData.InvestmentFundRelatedToProductCollection)
                target.Add("InvestmentFundRelatedToPolicy", formData.InvestmentFundRelatedToPolicy)
                target.Add("InvestmentFundRelatedToPolicyProfileCollection", formData.InvestmentFundRelatedToPolicyProfileCollection)
                target.Add("PaymentsPlan", formData.PaymentsPlan)
                target.Add("AddressPhysicalAddressDLI", formData.AddressPhysicalAddressDLI)
                target.Add("AddresseMailDLI", formData.AddresseMailDLI)
                target.Add("ConsumerInformation", formData.ConsumerInformation)
                target.Add("ClientIncluded", formData.ClientIncluded)
                target.Add("CurrentYear", formData.CurrentYear)
                target.Add("AddressDLICollection", formData.AddressDLICollection)
                target.Add("ClienteIndicado", formData.ClienteIndicado)
                target.Add("PlanillaModificacion", formData.PlanillaModificacion)
                target.Add("PlanillaVisualizacion", formData.PlanillaVisualizacion)
                target.Add("ServiceResultData", formData.ServiceResultData)
                target.Add("UnderwritingCase", formData.UnderwritingCase)
                target.Add("DefaultAddresses", formData.DefaultAddresses)
                target.Add("LaboratoryRequired", formData.LaboratoryRequired)
                target.Add("LaboratorySelectedByUser", formData.LaboratorySelectedByUser)
                target.Add("PrimaryInsured", formData.PrimaryInsured)
                target.Add("SendMailIndicator", formData.SendMailIndicator)
                target.Add("MailToProducerIndicator", formData.MailToProducerIndicator)
                target.Add("InRuleErros", formData.InRuleErros)
                target.Add("AccumulatedAmount", formData.AccumulatedAmount)
                target.Add("CancelledPoliciesQuantity", formData.CancelledPoliciesQuantity)
                target.Add("OtherPoliciesSameRiskQuantity", formData.OtherPoliciesSameRiskQuantity)
                target.Add("InRuleMessage", formData.InRuleMessage)
                target.Add("OnLinePrintIndicator", formData.OnLinePrintIndicator)
                target.Add("ReportURL", formData.ReportURL)
                target.Add("FormStatus", formData.FormStatus)
                target.Add("OnLinePrint", formData.OnLinePrint)
                target.Add("AnswerDiabetes", formData.AnswerDiabetes)
                target.Add("AnswerHeart", formData.AnswerHeart)
                target.Add("AnswerCancer", formData.AnswerCancer)
                target.Add("SumInsuredToOffer", formData.SumInsuredToOffer)
                target.Add("PaymentMethod", formData.PaymentMethod)
                target.Add("ProductMasterDescription", formData.ProductMasterDescription)
                target.Add("PreviousPayment", formData.PreviousPayment)
                target.Add("CompleteAddress", formData.CompleteAddress)
                target.Add("ErroresActualizacion", formData.ErroresActualizacion)
                target.Add("ModulePoliza", formData.ModulePoliza)
                target.Add("VerificarCuestionariosIndicador", formData.VerificarCuestionariosIndicador)
                target.Add("ProductDescription", formData.ProductDescription)
                target.Add("PrimaTotalAnual", formData.PrimaTotalAnual)
                target.Add("PrimaRecibo", formData.PrimaRecibo)
                target.Add("PremiumDetailCollection", formData.PremiumDetailCollection)
                target.Add("MonedaRecibo", formData.MonedaRecibo)
                target.Add("MesTarjeta", formData.MesTarjeta)
                target.Add("AnoTarjeta", formData.AnoTarjeta)
                target.Add("ImagenMostrada", formData.ImagenMostrada)
                target.Add("ImagenIncluida", formData.ImagenIncluida)
                target.Add("IsAnonymous", formData.IsAnonymous)
                target.Add("AgregarBeneficiario", formData.AgregarBeneficiario)
                target.Add("Beneficiary", formData.Beneficiary)
                target.Add("TypeOfPersonBenef", formData.TypeOfPersonBenef)
                target.Add("ValorAcumulado", formData.ValorAcumulado)
                target.Add("FondosMail", formData.FondosMail)
                target.Add("BeneficiariosMail", formData.BeneficiariosMail)
                target.Add("Descripcion", formData.Descripcion)
                target.Add("Codigo", formData.Codigo)
                target.Add("UsercodeBO", formData.UsercodeBO)
                target.Add("UsercodeFASI", formData.UsercodeFASI)
                target.Add("GenderClient", formData.GenderClient)
                target.Add("frompanel", formData.frompanel)
            Else
                target("RiskInformation") = formData.RiskInformation
                target("uwcaseid") = formData.uwcaseid
                target("uwreqid") = formData.uwreqid
                target("InsuredAmount") = formData.InsuredAmount
                target("InsuredAmountSelected") = formData.InsuredAmountSelected
                target("PlanType") = formData.PlanType
                target("ClientExistInDB") = formData.ClientExistInDB
                target("eMail") = formData.eMail
                target("Currency") = formData.Currency
                target("QueryType") = formData.QueryType
                target("MasaCorporal") = formData.MasaCorporal
                target("Age") = formData.Age
                target("MessagePopUp") = formData.MessagePopUp
                target("MessageIndicator") = formData.MessageIndicator
                target("QuestionnairesAvailable") = formData.QuestionnairesAvailable
                target("ProducerClientID") = formData.ProducerClientID
                target("DescontarAhorros") = formData.DescontarAhorros
                target("DescontarUnidades") = formData.DescontarUnidades
                target("StatusRun") = formData.StatusRun
                target("RangeAge") = formData.RangeAge
                target("RangeCapital") = formData.RangeCapital
                target("FundsFound") = formData.FundsFound
                target("TotalInvestmentFunds") = formData.TotalInvestmentFunds
                target("ErrorsFound") = formData.ErrorsFound
                target("ProcedureKeyValue") = formData.ProcedureKeyValue
                target("Parametro2") = formData.Parametro2
                target("Parametro3") = formData.Parametro3
                target("Parametro4") = formData.Parametro4
                target("FechaNacimiento") = formData.FechaNacimiento
                target("InitialYear") = formData.InitialYear
                target("EndYear") = formData.EndYear
                target("AporteAnual") = formData.AporteAnual
                target("ValorNulo") = formData.ValorNulo
                target("FechaFinal") = formData.FechaFinal
                target("OnLinePrintResult") = formData.OnLinePrintResult
                target("PolicyDocument") = formData.PolicyDocument
                target("PolicyExistPreviously") = formData.PolicyExistPreviously
                target("PolicyIDProyeccion") = formData.PolicyIDProyeccion
                target("PROJECTVULCollection") = formData.PROJECTVULCollection
                target("BeneficiaryType") = formData.BeneficiaryType
                target("IsProducer") = formData.IsProducer
                target("ProducerCode") = formData.ProducerCode
                target("IsEmployee") = formData.IsEmployee
                target("RecoveryCaseIndicator") = formData.RecoveryCaseIndicator
                target("StatusCase") = formData.StatusCase
                target("InvestmentFundRelatedToProductCollection") = formData.InvestmentFundRelatedToProductCollection
                target("InvestmentFundRelatedToPolicy") = formData.InvestmentFundRelatedToPolicy
                target("InvestmentFundRelatedToPolicyProfileCollection") = formData.InvestmentFundRelatedToPolicyProfileCollection
                target("PaymentsPlan") = formData.PaymentsPlan
                target("AddressPhysicalAddressDLI") = formData.AddressPhysicalAddressDLI
                target("AddresseMailDLI") = formData.AddresseMailDLI
                target("ConsumerInformation") = formData.ConsumerInformation
                target("ClientIncluded") = formData.ClientIncluded
                target("CurrentYear") = formData.CurrentYear
                target("AddressDLICollection") = formData.AddressDLICollection
                target("ClienteIndicado") = formData.ClienteIndicado
                target("PlanillaModificacion") = formData.PlanillaModificacion
                target("PlanillaVisualizacion") = formData.PlanillaVisualizacion
                target("ServiceResultData") = formData.ServiceResultData
                target("UnderwritingCase") = formData.UnderwritingCase
                target("DefaultAddresses") = formData.DefaultAddresses
                target("LaboratoryRequired") = formData.LaboratoryRequired
                target("LaboratorySelectedByUser") = formData.LaboratorySelectedByUser
                target("PrimaryInsured") = formData.PrimaryInsured
                target("SendMailIndicator") = formData.SendMailIndicator
                target("MailToProducerIndicator") = formData.MailToProducerIndicator
                target("InRuleErros") = formData.InRuleErros
                target("AccumulatedAmount") = formData.AccumulatedAmount
                target("CancelledPoliciesQuantity") = formData.CancelledPoliciesQuantity
                target("OtherPoliciesSameRiskQuantity") = formData.OtherPoliciesSameRiskQuantity
                target("InRuleMessage") = formData.InRuleMessage
                target("OnLinePrintIndicator") = formData.OnLinePrintIndicator
                target("ReportURL") = formData.ReportURL
                target("FormStatus") = formData.FormStatus
                target("OnLinePrint") = formData.OnLinePrint
                target("AnswerDiabetes") = formData.AnswerDiabetes
                target("AnswerHeart") = formData.AnswerHeart
                target("AnswerCancer") = formData.AnswerCancer
                target("SumInsuredToOffer") = formData.SumInsuredToOffer
                target("PaymentMethod") = formData.PaymentMethod
                target("ProductMasterDescription") = formData.ProductMasterDescription
                target("PreviousPayment") = formData.PreviousPayment
                target("CompleteAddress") = formData.CompleteAddress
                target("ErroresActualizacion") = formData.ErroresActualizacion
                target("ModulePoliza") = formData.ModulePoliza
                target("VerificarCuestionariosIndicador") = formData.VerificarCuestionariosIndicador
                target("ProductDescription") = formData.ProductDescription
                target("PrimaTotalAnual") = formData.PrimaTotalAnual
                target("PrimaRecibo") = formData.PrimaRecibo
                target("PremiumDetailCollection") = formData.PremiumDetailCollection
                target("MonedaRecibo") = formData.MonedaRecibo
                target("MesTarjeta") = formData.MesTarjeta
                target("AnoTarjeta") = formData.AnoTarjeta
                target("ImagenMostrada") = formData.ImagenMostrada
                target("ImagenIncluida") = formData.ImagenIncluida
                target("IsAnonymous") = formData.IsAnonymous
                target("AgregarBeneficiario") = formData.AgregarBeneficiario
                target("Beneficiary") = formData.Beneficiary
                target("TypeOfPersonBenef") = formData.TypeOfPersonBenef
                target("ValorAcumulado") = formData.ValorAcumulado
                target("FondosMail") = formData.FondosMail
                target("BeneficiariosMail") = formData.BeneficiariosMail
                target("Descripcion") = formData.Descripcion
                target("Codigo") = formData.Codigo
                target("UsercodeBO") = formData.UsercodeBO
                target("UsercodeFASI") = formData.UsercodeFASI
                target("GenderClient") = formData.GenderClient
                target("frompanel") = formData.frompanel
            End If
        End Sub

        Private Shared Sub GetTransferParameters(parametersData As HT5NNCotizacionMiInversionSeguraIIParameters, fromid As String)
            Dim fromDocumentCache As Object = Nothing

            If Not String.IsNullOrEmpty(fromid) Then
                fromDocumentCache = HttpContext.Current.Session(fromid)
                HttpContext.Current.Session.Remove(fromid)

            Else
                fromDocumentCache = HttpContext.Current.Session(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove("fromid")
            End If

            If Not IsNothing(fromDocumentCache) Then
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InsuredAmount", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InsuredAmountSelected", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PlanType", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientExistInDB", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("eMail", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Currency", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QueryType", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MasaCorporal", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Age", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MessagePopUp", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MessageIndicator", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QuestionnairesAvailable", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProducerClientID", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("DescontarAhorros", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("DescontarUnidades", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRun", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RangeAge", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RangeCapital", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FundsFound", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("TotalInvestmentFunds", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ErrorsFound", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProcedureKeyValue", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Parametro2", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Parametro3", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Parametro4", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FechaNacimiento", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InitialYear", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("EndYear", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AporteAnual", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ValorNulo", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FechaFinal", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrintResult", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PolicyDocument", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PolicyExistPreviously", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PolicyIDProyeccion", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PROJECTVULCollection", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("BeneficiaryType", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsProducer", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProducerCode", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsEmployee", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RecoveryCaseIndicator", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusCase", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InvestmentFundRelatedToProductCollection", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InvestmentFundRelatedToPolicy", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InvestmentFundRelatedToPolicyProfileCollection", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PaymentsPlan", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AddressPhysicalAddressDLI", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AddresseMailDLI", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ConsumerInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientIncluded", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CurrentYear", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AddressDLICollection", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClienteIndicado", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PlanillaModificacion", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PlanillaVisualizacion", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ServiceResultData", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UnderwritingCase", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("DefaultAddresses", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("LaboratoryRequired", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("LaboratorySelectedByUser", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PrimaryInsured", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("SendMailIndicator", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MailToProducerIndicator", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InRuleErros", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AccumulatedAmount", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CancelledPoliciesQuantity", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OtherPoliciesSameRiskQuantity", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InRuleMessage", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrintIndicator", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ReportURL", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FormStatus", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrint", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnswerDiabetes", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnswerHeart", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnswerCancer", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("SumInsuredToOffer", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PaymentMethod", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProductMasterDescription", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PreviousPayment", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CompleteAddress", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ErroresActualizacion", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ModulePoliza", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("VerificarCuestionariosIndicador", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProductDescription", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PrimaTotalAnual", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PrimaRecibo", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PremiumDetailCollection", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MonedaRecibo", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MesTarjeta", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnoTarjeta", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ImagenMostrada", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ImagenIncluida", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsAnonymous", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AgregarBeneficiario", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Beneficiary", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("TypeOfPersonBenef", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ValorAcumulado", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FondosMail", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("BeneficiariosMail", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Descripcion", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Codigo", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeBO", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeFASI", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("GenderClient", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("frompanel", fromDocumentCache, parametersData)
            End If
        End Sub

        Private Shared Function SessionTrace(message As String) As String

            If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                Dim tracelog As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath")))

                tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = tracelog
            End If

            Return message
        End Function

#End Region


#Region "Storage Database Methods"

      Private Shared Sub StoreFormInformation(formData As HT5NNCotizacionMiInversionSeguraIIParameters)
            If Not IsNothing(formData) Then
                Dim foundData As Boolean

                If formData.InternalId.IsEmpty Then
                    formData.InternalId = Guid.NewGuid.ToString
                Else
                    With New DataManagerFactory("SELECT COUNT(FormId) FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                 "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                        .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                        foundData = .QueryExecuteScalarToInteger > 0
                    End With
                End If

                If foundData Then
                    UpdateStorageData(formData)
                Else
                    InsertStorageData(formData)
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso
                    HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                    HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.HT5NNCotizacionMiInversionSeguraII", formData.InternalId)) = formData
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track.Parameters")) AndAlso
                    HttpContext.Current.Session("Form.Track.Parameters").ToString.ToLower = "true" Then

                    If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                        InMotionGIT.Common.Helpers.FileHandler.SaveContent(String.Format(CultureInfo.InvariantCulture, 
                                                                                         "{0}\{1}.HT5NNCotizacionMiInversionSeguraII.txt", ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), 
                                                                                         HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", 
                                                                                                                                   IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))))
                    End If

                    InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of HT5NNCotizacionMiInversionSeguraIIParameters)(formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.HT5NNCotizacionMiInversionSeguraII.xml", 
                                                                                                                        ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
                End If
            End If
        End Sub

        Private Shared Function RetrieveFormInformationFromDatabase(instanceFormId As String) As HT5NNCotizacionMiInversionSeguraIIParameters
            Dim result As HT5NNCotizacionMiInversionSeguraIIParameters = Nothing
            Dim records As DataTable = Nothing

            With New DataManagerFactory("SELECT Content FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, instanceFormId)
                records = .QueryExecuteToTable(True)
            End With

            If records.Rows.Count > 0 Then
                result = Serialize.Deserialize(Of HT5NNCotizacionMiInversionSeguraIIParameters)(records.FirstRow.Item("Content"))
            End If

            Return result
        End Function

        Private Shared Sub InsertStorageData(formData As HT5NNCotizacionMiInversionSeguraIIParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("INSERT INTO FrontOffice.DocumentCache (FormId, ModelId, UserId, Page, Content, CreationDate, UpdateDate) VALUES(@:FormId, @:ModelId, @:UserId, @:Page, @:Content, @:CreationDate, @:UpdateDate)",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "a9a178b3-696d-43a7-b29d-8def1a6146e4")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, "Me.AppRelativeVirtualPath")
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HT5NNCotizacionMiInversionSeguraIIParameters)(formData))
            .AddParameter("CreationDate", DbType.DateTime, 20, False, Now)
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)

                .CommandExecute()
            End With
        End Sub

        Private Shared Sub UpdateStorageData(formData As HT5NNCotizacionMiInversionSeguraIIParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("UPDATE FrontOffice.DocumentCache SET ModelId = @:ModelId, UserId = @:UserId, Page = @:Page, Content = @:Content, UpdateDate = @:UpdateDate WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "a9a178b3-696d-43a7-b29d-8def1a6146e4")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, "Me.AppRelativeVirtualPath")
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HT5NNCotizacionMiInversionSeguraIIParameters)(formData))
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)

                .CommandExecute()
            End With
        End Sub

#End Region


#Region "Contracts Mappers"

        Private Shared Function EntryDataToClass(parametersData As HT5NNCotizacionMiInversionSeguraIIParameters, formData As EntryData) As HT5NNCotizacionMiInversionSeguraIIParameters
            If IsNothing(parametersData) Then
                parametersData = New HT5NNCotizacionMiInversionSeguraIIParameters
            End If

            If IsNothing(parametersData.RiskInformation) Then
                parametersData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
            End If
            If IsNothing(parametersData.RiskInformation.AmendmentInformation) Then
                parametersData.RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation
            End If
            If IsNothing(parametersData.RiskInformation.AmendmentInformation.Coverages) Then
                parametersData.RiskInformation.AmendmentInformation.Coverages = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection
            End If
            If IsNothing(parametersData.RiskInformation.AutomaticPaymentPolicy) Then
                parametersData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
            End If
            If IsNothing(parametersData.RiskInformation.Beneficiaries) Then
                parametersData.RiskInformation.Beneficiaries = New InMotionGIT.Policy.Entity.Contracts.BeneficiaryCollection
            End If
            If IsNothing(parametersData.RiskInformation.CoveragesWithCalculatedPremium) Then
                parametersData.RiskInformation.CoveragesWithCalculatedPremium = New InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremiumCollection
            End If
            If IsNothing(parametersData.RiskInformation.LifeLineOfBusiness) Then
                parametersData.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
            End If
            If IsNothing(parametersData.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies) Then
                parametersData.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicyCollection
            End If
            If IsNothing(parametersData.RiskInformation.Modules) Then
                parametersData.RiskInformation.Modules = New InMotionGIT.Policy.Entity.Contracts.ModuleCollection
            End If
            If IsNothing(parametersData.RiskInformation.Policy) Then
                parametersData.RiskInformation.Policy = New InMotionGIT.Policy.Entity.Contracts.Policy
            End If
            If IsNothing(parametersData.RiskInformation.PrimaryBeneficiary) Then
                parametersData.RiskInformation.PrimaryBeneficiary = New InMotionGIT.Policy.Entity.Contracts.Role
            End If
            If IsNothing(parametersData.RiskInformation.PrimaryBeneficiary.Client) Then
                parametersData.RiskInformation.PrimaryBeneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
            End If
            If IsNothing(parametersData.RiskInformation.PrimaryInsured) Then
                parametersData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
            End If
            If IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                parametersData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
            End If
            If IsNothing(parametersData.RiskInformation.PrimaryInsured.Client.BusinessAddress) Then
                parametersData.RiskInformation.PrimaryInsured.Client.BusinessAddress = New InMotionGIT.General.Entity.Contracts.Address.Address
            End If
            If IsNothing(parametersData.RiskInformation.PrimaryInsured.Client.CreditCards) Then
                parametersData.RiskInformation.PrimaryInsured.Client.CreditCards = New InMotionGIT.Client.Entity.Contracts.CreditCardCollection
            End If
            If IsNothing(parametersData.RiskInformation.PrimaryProducer) Then
                parametersData.RiskInformation.PrimaryProducer = New InMotionGIT.Policy.Entity.Contracts.Role
            End If
            If IsNothing(parametersData.RiskInformation.PrimaryProducer.Client) Then
                parametersData.RiskInformation.PrimaryProducer.Client = New InMotionGIT.Client.Entity.Contracts.Client
            End If
            If IsNothing(parametersData.RiskInformation.PrimaryProducer.Producer) Then
                parametersData.RiskInformation.PrimaryProducer.Producer = New InMotionGIT.Intermedia.Entity.Contracts.Producer
            End If
            If IsNothing(parametersData.QuestionnairesAvailable) Then
                parametersData.QuestionnairesAvailable = New InMotionGIT.Questionnaires.QuestionnairesAvailable
            End If
            If IsNothing(parametersData.PROJECTVULCollection) Then
                parametersData.PROJECTVULCollection = New InMotionGIT.Policy.Entity.Contracts.PROJECTVULCollection
            End If
            If IsNothing(parametersData.InvestmentFundRelatedToProductCollection) Then
                parametersData.InvestmentFundRelatedToProductCollection = New InMotionGIT.Product.Entity.Contracts.InvestmentFundRelatedToProductCollection
            End If
            If IsNothing(parametersData.InvestmentFundRelatedToPolicy) Then
                parametersData.InvestmentFundRelatedToPolicy = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy
            End If
            If IsNothing(parametersData.InvestmentFundRelatedToPolicyProfileCollection) Then
                parametersData.InvestmentFundRelatedToPolicyProfileCollection = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicyCollection
            End If
            If IsNothing(parametersData.PaymentsPlan) Then
                parametersData.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
            End If
            If IsNothing(parametersData.AddressPhysicalAddressDLI) Then
                parametersData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
            End If
            If IsNothing(parametersData.AddressPhysicalAddressDLI.Address) Then
                parametersData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
            End If
            If IsNothing(parametersData.AddressPhysicalAddressDLI.PhysicalAddress) Then
                parametersData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
            End If
            If IsNothing(parametersData.AddressPhysicalAddressDLI.PhysicalAddress.AddressEnteredByUser) Then
                parametersData.AddressPhysicalAddressDLI.PhysicalAddress.AddressEnteredByUser = New InMotionGIT.AddressManager.Contract.General.StreetAddress
            End If
            If IsNothing(parametersData.AddressPhysicalAddressDLI.PhysicalAddress.Country) Then
                parametersData.AddressPhysicalAddressDLI.PhysicalAddress.Country = New InMotionGIT.Common.DataType.LookUpValueExtend
            End If
            If IsNothing(parametersData.AddresseMailDLI) Then
                parametersData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
            End If
            If IsNothing(parametersData.AddresseMailDLI.Address) Then
                parametersData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
            End If
            If IsNothing(parametersData.AddresseMailDLI.eMailAddress) Then
                parametersData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
            End If
            If IsNothing(parametersData.ConsumerInformation) Then
                parametersData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
            End If
            If IsNothing(parametersData.ConsumerInformation.Security) Then
                parametersData.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
            End If
            If IsNothing(parametersData.ClientIncluded) Then
                parametersData.ClientIncluded = New InMotionGIT.Client.Entity.Contracts.Client
            End If
            If IsNothing(parametersData.AddressDLICollection) Then
                parametersData.AddressDLICollection = New InMotionGIT.AddressManager.Contract.General.AddressDLICollection
            End If
            If IsNothing(parametersData.ServiceResultData) Then
                parametersData.ServiceResultData = New InMotionGIT.Common.Contracts.ServiceResultData
            End If
            If IsNothing(parametersData.UnderwritingCase) Then
                parametersData.UnderwritingCase = New InMotionGIT.Underwriting.Contracts.UnderwritingCase
            End If
            If IsNothing(parametersData.SumInsuredToOffer) Then
                parametersData.SumInsuredToOffer = New InMotionGIT.Policy.Entity.Contracts.RequestCollection
            End If
            If IsNothing(parametersData.ErroresActualizacion) Then
                parametersData.ErroresActualizacion = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
            End If
            If IsNothing(parametersData.ModulePoliza) Then
                parametersData.ModulePoliza = New InMotionGIT.Policy.Entity.Contracts.Module
            End If
            If IsNothing(parametersData.PremiumDetailCollection) Then
                parametersData.PremiumDetailCollection = New InMotionGIT.Bill.Entity.Contracts.PremiumDetailCollection
            End If
            If IsNothing(parametersData.Beneficiary) Then
                parametersData.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
            End If
            If IsNothing(parametersData.Beneficiary.Client) Then
                parametersData.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
            End If
            With parametersData
                .InternalId = formData.InstanceFormId
                .RangeAge = formData.RangeAge
                .Parametro2 = formData.Parametro2
                .Parametro3 = formData.Parametro3

                .RiskInformation.EffectiveDate = formData.RiskInformationEffectiveDate
                .RiskInformation.ProductCode = formData.RiskInformationProductCode
                .RiskInformation.LineOfBusiness = formData.RiskInformationLineOfBusiness
                .ClientIncluded.Gender = formData.ClientIncludedGender
                .ClientIncluded.SmokerIndicator = formData.ClientIncludedSmokerIndicator
                .ClientIncluded.BirthDate = formData.ClientIncludedBirthDate
                If formData.InvestmentFundRelatedToPolicy_InvestmentFundRelatedToPolicy.IsNotEmpty Then
                    Dim currentItem As InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy
                  
	            For Each itemData As InvestmentFundRelatedToPolicy_InvestmentFundRelatedToPolicyItem In formData.InvestmentFundRelatedToPolicy_InvestmentFundRelatedToPolicy
                        currentItem = (From _x In parametersData.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies Where _x.InvestmentFund = itemData.InvestmentFund Select _x).FirstOrDefault()
                     
	                If currentItem.IsEmpty Then
                            currentItem = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy
                  
                            With currentItem

                                .InvestmentFund = itemData.InvestmentFund
                                .PercentageShare = itemData.PercentageShare
                                .ProjectedProfitability = itemData.ProjectedProfitability
                            End With
                        
                            parametersData.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies.Add(currentItem)
                     
	                Else
                            With currentItem

                                .InvestmentFund = itemData.InvestmentFund
                                .PercentageShare = itemData.PercentageShare
                                .ProjectedProfitability = itemData.ProjectedProfitability
                            End With
                        End If
                    Next
                End If
                .Currency = formData.Currency
                .InsuredAmountSelected = formData.InsuredAmountSelected

                .PaymentsPlan.ProjectedAnnualPayments = formData.PaymentsPlanProjectedAnnualPayments
                .RiskInformation.LifeLineOfBusiness.GuaranteedInterestInInvestment = formData.RiskInformationLifeLineOfBusinessGuaranteedInterestInInvestment
                .RiskInformation.LifeLineOfBusiness.TypeOfIndemnity = formData.RiskInformationLifeLineOfBusinessTypeOfIndemnity

                .RiskInformation.PrimaryInsured.Client.ClientID = formData.RiskInformationPrimaryInsuredClientClientID
                .RiskInformation.PrimaryInsured.Client.FirstName = formData.RiskInformationPrimaryInsuredClientFirstName
                .RiskInformation.PrimaryInsured.Client.LastName = formData.RiskInformationPrimaryInsuredClientLastName
                .RiskInformation.PrimaryInsured.Client.LastName2 = formData.RiskInformationPrimaryInsuredClientLastName2
                .AddresseMailDLI.eMailAddress.eMail = formData.AddresseMailDLIeMailAddresseMail
                .QuestionnairesAvailable.Diabetes = formData.QuestionnairesAvailableDiabetes
                .QuestionnairesAvailable.Heart = formData.QuestionnairesAvailableHeart
                .QuestionnairesAvailable.Cancer = formData.QuestionnairesAvailableCancer
                .BeneficiaryType = formData.BeneficiaryType
                If formData.BeneficiaryBeneficia_Beneficiary.IsNotEmpty Then
                    Dim currentItem As InMotionGIT.Policy.Entity.Contracts.Beneficiary
                  
	            For Each itemData As BeneficiaryBeneficia_BeneficiaryItem In formData.BeneficiaryBeneficia_Beneficiary
                        currentItem = (From _x In parametersData.RiskInformation.Beneficiaries Where _x.ClientID = itemData.ClientID Select _x).FirstOrDefault()
                     
	                If currentItem.IsEmpty Then
                            currentItem = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
                  
                            With currentItem
                                .Client = New InMotionGIT.Client.Entity.Contracts.Client

                                .Client.CompleteClientName = itemData.ClientCompleteClientName
                                .PercentageShare = itemData.PercentageShare
                                .Relationship = itemData.Relationship
                                .ClientID = itemData.ClientID
                            End With
                        
                            parametersData.RiskInformation.Beneficiaries.Add(currentItem)
                     
	                Else
                            With currentItem
                                If IsNothing(.Client) Then
                                    .Client = New InMotionGIT.Client.Entity.Contracts.Client
                                End If

                                .Client.CompleteClientName = itemData.ClientCompleteClientName
                                .PercentageShare = itemData.PercentageShare
                                .Relationship = itemData.Relationship
                                .ClientID = itemData.ClientID
                            End With
                        End If
                    Next
                End If
                .AgregarBeneficiario = formData.AgregarBeneficiario
                .Beneficiary.Relationship = formData.BeneficiaryRelationship
                .Beneficiary.PercentageShare = formData.BeneficiaryPercentageShare
                .TypeOfPersonBenef = formData.TypeOfPersonBenef
                .Beneficiary.ClientID = formData.BeneficiaryClientID
                .Beneficiary.Client.FirstName = formData.BeneficiaryClientFirstName
                .Beneficiary.Client.LastName = formData.BeneficiaryClientLastName
                .Beneficiary.Client.LastName2 = formData.BeneficiaryClientLastName2
                .Beneficiary.Client.LegalName = formData.BeneficiaryClientLegalName
                .eMail = formData.eMail
            End With

            Return parametersData
        End Function

        Private Shared Function ClassToEntryData(formData As EntryData, parametersData As HT5NNCotizacionMiInversionSeguraIIParameters) As EntryData
            formData = New EntryData

            With formData
                .InstanceFormId = parametersData.InternalId
                .RangeAge = parametersData.RangeAge
                .Parametro2 = parametersData.Parametro2
                .Parametro3 = parametersData.Parametro3
                .InvestmentFundProfile_InvestmentFundRelatedToPolicy = New List(Of InvestmentFundProfile_InvestmentFundRelatedToPolicyItem)

                If Not IsNothing(parametersData.InvestmentFundRelatedToPolicyProfileCollection) Then
                    Dim newItem as InvestmentFundProfile_InvestmentFundRelatedToPolicyItem
                    
                    For Each itemData As InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy In parametersData.InvestmentFundRelatedToPolicyProfileCollection
                        newItem = New InvestmentFundProfile_InvestmentFundRelatedToPolicyItem
                        
                        With newItem
                            .InvestmentFund = itemData.InvestmentFund
                            .PercentageShare = itemData.PercentageShare
                            .ProjectedProfitability = itemData.ProjectedProfitability                        
                        End With
                        
                        .InvestmentFundProfile_InvestmentFundRelatedToPolicy.Add(newItem)
                    Next
                End If


                If Not IsNothing(parametersData.RiskInformation) Then
                    .RiskInformationEffectiveDate = parametersData.RiskInformation.EffectiveDate
                End If
                If Not IsNothing(parametersData.RiskInformation) Then
                    .RiskInformationProductCode = parametersData.RiskInformation.ProductCode
                End If
                .uwcaseid = parametersData.uwcaseid
                If Not IsNothing(parametersData.RiskInformation) Then
                    .RiskInformationLineOfBusiness = parametersData.RiskInformation.LineOfBusiness
                End If
                If Not IsNothing(parametersData.ClientIncluded) Then
                    .ClientIncludedGender = parametersData.ClientIncluded.Gender
                End If
                If Not IsNothing(parametersData.ClientIncluded) Then
                    .ClientIncludedSmokerIndicator = parametersData.ClientIncluded.SmokerIndicator
                End If
                If Not IsNothing(parametersData.ClientIncluded) Then
                    .ClientIncludedBirthDate = parametersData.ClientIncluded.BirthDate
                End If
                .InvestmentFundRelatedToPolicy_InvestmentFundRelatedToPolicy = New List(Of InvestmentFundRelatedToPolicy_InvestmentFundRelatedToPolicyItem)

                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.LifeLineOfBusiness) AndAlso Not IsNothing(parametersData.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies) Then
                    Dim newItem as InvestmentFundRelatedToPolicy_InvestmentFundRelatedToPolicyItem
                    
                    For Each itemData As InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy In parametersData.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies
                        newItem = New InvestmentFundRelatedToPolicy_InvestmentFundRelatedToPolicyItem
                        
                        With newItem
                            .InvestmentFund = itemData.InvestmentFund
                            .PercentageShare = itemData.PercentageShare
                            .ProjectedProfitability = itemData.ProjectedProfitability                        
                        End With
                        
                        .InvestmentFundRelatedToPolicy_InvestmentFundRelatedToPolicy.Add(newItem)
                    Next
                End If


                .Currency = parametersData.Currency
                .InsuredAmountSelected = parametersData.InsuredAmountSelected
                .CoverageWithCalculatedPremium_CoverageWithCalculatedPremium = New List(Of CoverageWithCalculatedPremium_CoverageWithCalculatedPremiumItem)

                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.CoveragesWithCalculatedPremium) Then
                    Dim newItem as CoverageWithCalculatedPremium_CoverageWithCalculatedPremiumItem
                    
                    For Each itemData As InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremium In parametersData.RiskInformation.CoveragesWithCalculatedPremium
                        newItem = New CoverageWithCalculatedPremium_CoverageWithCalculatedPremiumItem
                        
                        With newItem
                            .Description = itemData.Description
                            .InsuredAmount = itemData.InsuredAmount
                            .AnnualPremium = itemData.AnnualPremium
                            .SelectedByDefault = itemData.SelectedByDefault                        
                        End With
                        
                        .CoverageWithCalculatedPremium_CoverageWithCalculatedPremium.Add(newItem)
                    Next
                End If


                If Not IsNothing(parametersData.RiskInformation) Then
                    .RiskInformationTotalOriginalAnnualPremium = parametersData.RiskInformation.TotalOriginalAnnualPremium
                End If
                If Not IsNothing(parametersData.PaymentsPlan) Then
                    .PaymentsPlanProjectedAnnualPayments = parametersData.PaymentsPlan.ProjectedAnnualPayments
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.LifeLineOfBusiness) Then
                    .RiskInformationLifeLineOfBusinessGuaranteedInterestInInvestment = parametersData.RiskInformation.LifeLineOfBusiness.GuaranteedInterestInInvestment
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.LifeLineOfBusiness) Then
                    .RiskInformationLifeLineOfBusinessTypeOfIndemnity = parametersData.RiskInformation.LifeLineOfBusiness.TypeOfIndemnity
                End If
                .PROJECTVULCollection = New List(Of PROJECTVULCollectionItem)

                If Not IsNothing(parametersData.PROJECTVULCollection) Then
                    Dim newItem as PROJECTVULCollectionItem
                    
                    For Each itemData As InMotionGIT.Policy.Entity.Contracts.PROJECTVUL In parametersData.PROJECTVULCollection
                        newItem = New PROJECTVULCollectionItem
                        
                        With newItem
.YearOfThePolicy = itemData.YearOfThePolicy
.AccumulatdAmount = itemData.AccumulatdAmount
.PolicyValueOfProjectedProfitablity = itemData.PolicyValueOfProjectedProfitablity
.SurrenderAvailableAmount = itemData.SurrenderAvailableAmount
.DeathCoverageAmount = itemData.DeathCoverageAmount                        
                        End With
                        
                        .PROJECTVULCollection.Add(newItem)
                    Next
                End If


                .PROJECTVUL_PROJECTVUL = New List(Of PROJECTVUL_PROJECTVULItem)

                If Not IsNothing(parametersData.PROJECTVULCollection) Then
                    Dim newItem as PROJECTVUL_PROJECTVULItem
                    
                    For Each itemData As InMotionGIT.Policy.Entity.Contracts.PROJECTVUL In parametersData.PROJECTVULCollection
                        newItem = New PROJECTVUL_PROJECTVULItem
                        
                        With newItem
                            .YearOfThePolicy = itemData.YearOfThePolicy
                            .InsuredAge = itemData.InsuredAge
                            .AccumulatdAmount = itemData.AccumulatdAmount
                            .PolicyValueOfProjectedProfitablity = itemData.PolicyValueOfProjectedProfitablity
                            .SurrenderAvailableAmount = itemData.SurrenderAvailableAmount
                            .DeathCoverageAmount = itemData.DeathCoverageAmount                        
                        End With
                        
                        .PROJECTVUL_PROJECTVUL.Add(newItem)
                    Next
                End If


                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                    .RiskInformationPrimaryInsuredClientClientID = parametersData.RiskInformation.PrimaryInsured.Client.ClientID
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                    .RiskInformationPrimaryInsuredClientFirstName = parametersData.RiskInformation.PrimaryInsured.Client.FirstName
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                    .RiskInformationPrimaryInsuredClientLastName = parametersData.RiskInformation.PrimaryInsured.Client.LastName
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                    .RiskInformationPrimaryInsuredClientLastName2 = parametersData.RiskInformation.PrimaryInsured.Client.LastName2
                End If
                If Not IsNothing(parametersData.AddresseMailDLI) AndAlso Not IsNothing(parametersData.AddresseMailDLI.eMailAddress) Then
                    .AddresseMailDLIeMailAddresseMail = parametersData.AddresseMailDLI.eMailAddress.eMail
                End If
                If Not IsNothing(parametersData.QuestionnairesAvailable) Then
                    .QuestionnairesAvailableDiabetes = parametersData.QuestionnairesAvailable.Diabetes
                End If
                If Not IsNothing(parametersData.QuestionnairesAvailable) Then
                    .QuestionnairesAvailableHeart = parametersData.QuestionnairesAvailable.Heart
                End If
                If Not IsNothing(parametersData.QuestionnairesAvailable) Then
                    .QuestionnairesAvailableCancer = parametersData.QuestionnairesAvailable.Cancer
                End If
                .BeneficiaryType = parametersData.BeneficiaryType
                .BeneficiaryBeneficia_Beneficiary = New List(Of BeneficiaryBeneficia_BeneficiaryItem)

                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.Beneficiaries) Then
                    Dim newItem as BeneficiaryBeneficia_BeneficiaryItem
                    
                    For Each itemData As InMotionGIT.Policy.Entity.Contracts.Beneficiary In parametersData.RiskInformation.Beneficiaries
                        newItem = New BeneficiaryBeneficia_BeneficiaryItem
                        
                        With newItem
                            If Not IsNothing(itemData.Client) Then
                                .ClientCompleteClientName = itemData.Client.CompleteClientName
                            End If
                            .PercentageShare = itemData.PercentageShare
                            .Relationship = itemData.Relationship
                            .ClientID = itemData.ClientID                        
                        End With
                        
                        .BeneficiaryBeneficia_Beneficiary.Add(newItem)
                    Next
                End If


                .AgregarBeneficiario = parametersData.AgregarBeneficiario
                If Not IsNothing(parametersData.Beneficiary) Then
                    .BeneficiaryRelationship = parametersData.Beneficiary.Relationship
                End If
                If Not IsNothing(parametersData.Beneficiary) Then
                    .BeneficiaryPercentageShare = parametersData.Beneficiary.PercentageShare
                End If
                .TypeOfPersonBenef = parametersData.TypeOfPersonBenef
                If Not IsNothing(parametersData.Beneficiary) Then
                    .BeneficiaryClientID = parametersData.Beneficiary.ClientID
                End If
                If Not IsNothing(parametersData.Beneficiary) AndAlso Not IsNothing(parametersData.Beneficiary.Client) Then
                    .BeneficiaryClientFirstName = parametersData.Beneficiary.Client.FirstName
                End If
                If Not IsNothing(parametersData.Beneficiary) AndAlso Not IsNothing(parametersData.Beneficiary.Client) Then
                    .BeneficiaryClientLastName = parametersData.Beneficiary.Client.LastName
                End If
                If Not IsNothing(parametersData.Beneficiary) AndAlso Not IsNothing(parametersData.Beneficiary.Client) Then
                    .BeneficiaryClientLastName2 = parametersData.Beneficiary.Client.LastName2
                End If
                If Not IsNothing(parametersData.Beneficiary) AndAlso Not IsNothing(parametersData.Beneficiary.Client) Then
                    .BeneficiaryClientLegalName = parametersData.Beneficiary.Client.LegalName
                End If
                .eMail = parametersData.eMail
            End With

            Return formData
        End Function

#End Region

#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As HT5NNCotizacionMiInversionSeguraIIParameters)
            If HttpContext.Current.Request.QueryString("uwcaseid").IsNotEmpty Then
                formData.uwcaseid = HttpContext.Current.Request.QueryString("uwcaseid")
            End If
            If HttpContext.Current.Request.QueryString("uwreqid").IsNotEmpty Then
                formData.uwreqid = HttpContext.Current.Request.QueryString("uwreqid")
            End If
            If HttpContext.Current.Request.QueryString("InsuredAmount").IsNotEmpty Then
                formData.InsuredAmount = HttpContext.Current.Request.QueryString("InsuredAmount")
            End If
            If HttpContext.Current.Request.QueryString("InsuredAmountSelected").IsNotEmpty Then
                formData.InsuredAmountSelected = HttpContext.Current.Request.QueryString("InsuredAmountSelected")
            End If
            If HttpContext.Current.Request.QueryString("PlanType").IsNotEmpty Then
                formData.PlanType = HttpContext.Current.Request.QueryString("PlanType")
            End If
            If HttpContext.Current.Request.QueryString("ClientExistInDB").IsNotEmpty Then
                formData.ClientExistInDB = HttpContext.Current.Request.QueryString("ClientExistInDB")
            End If
            If HttpContext.Current.Request.QueryString("eMail").IsNotEmpty Then
                formData.eMail = HttpContext.Current.Request.QueryString("eMail")
            End If
            If HttpContext.Current.Request.QueryString("Currency").IsNotEmpty Then
                formData.Currency = HttpContext.Current.Request.QueryString("Currency")
            End If
            If HttpContext.Current.Request.QueryString("QueryType").IsNotEmpty Then
                formData.QueryType = HttpContext.Current.Request.QueryString("QueryType")
            End If
            If HttpContext.Current.Request.QueryString("MasaCorporal").IsNotEmpty Then
                formData.MasaCorporal = HttpContext.Current.Request.QueryString("MasaCorporal")
            End If
            If HttpContext.Current.Request.QueryString("Age").IsNotEmpty Then
                formData.Age = HttpContext.Current.Request.QueryString("Age")
            End If
            If HttpContext.Current.Request.QueryString("MessagePopUp").IsNotEmpty Then
                formData.MessagePopUp = HttpContext.Current.Request.QueryString("MessagePopUp")
            End If
            If HttpContext.Current.Request.QueryString("MessageIndicator").IsNotEmpty Then
                formData.MessageIndicator = HttpContext.Current.Request.QueryString("MessageIndicator")
            End If
            If HttpContext.Current.Request.QueryString("ProducerClientID").IsNotEmpty Then
                formData.ProducerClientID = HttpContext.Current.Request.QueryString("ProducerClientID")
            End If
            If HttpContext.Current.Request.QueryString("DescontarAhorros").IsNotEmpty Then
                formData.DescontarAhorros = HttpContext.Current.Request.QueryString("DescontarAhorros")
            End If
            If HttpContext.Current.Request.QueryString("DescontarUnidades").IsNotEmpty Then
                formData.DescontarUnidades = HttpContext.Current.Request.QueryString("DescontarUnidades")
            End If
            If HttpContext.Current.Request.QueryString("StatusRun").IsNotEmpty Then
                formData.StatusRun = HttpContext.Current.Request.QueryString("StatusRun")
            End If
            If HttpContext.Current.Request.QueryString("RangeAge").IsNotEmpty Then
                formData.RangeAge = HttpContext.Current.Request.QueryString("RangeAge")
            End If
            If HttpContext.Current.Request.QueryString("RangeCapital").IsNotEmpty Then
                formData.RangeCapital = HttpContext.Current.Request.QueryString("RangeCapital")
            End If
            If HttpContext.Current.Request.QueryString("FundsFound").IsNotEmpty Then
                formData.FundsFound = HttpContext.Current.Request.QueryString("FundsFound")
            End If
            If HttpContext.Current.Request.QueryString("TotalInvestmentFunds").IsNotEmpty Then
                formData.TotalInvestmentFunds = HttpContext.Current.Request.QueryString("TotalInvestmentFunds")
            End If
            If HttpContext.Current.Request.QueryString("ErrorsFound").IsNotEmpty Then
                formData.ErrorsFound = HttpContext.Current.Request.QueryString("ErrorsFound")
            End If
            If HttpContext.Current.Request.QueryString("ProcedureKeyValue").IsNotEmpty Then
                formData.ProcedureKeyValue = HttpContext.Current.Request.QueryString("ProcedureKeyValue")
            End If
            If HttpContext.Current.Request.QueryString("Parametro2").IsNotEmpty Then
                formData.Parametro2 = HttpContext.Current.Request.QueryString("Parametro2")
            End If
            If HttpContext.Current.Request.QueryString("Parametro3").IsNotEmpty Then
                formData.Parametro3 = HttpContext.Current.Request.QueryString("Parametro3")
            End If
            If HttpContext.Current.Request.QueryString("Parametro4").IsNotEmpty Then
                formData.Parametro4 = HttpContext.Current.Request.QueryString("Parametro4")
            End If
            If HttpContext.Current.Request.QueryString("FechaNacimiento").IsNotEmpty Then
                formData.FechaNacimiento = HttpContext.Current.Request.QueryString("FechaNacimiento")
            End If
            If HttpContext.Current.Request.QueryString("InitialYear").IsNotEmpty Then
                formData.InitialYear = HttpContext.Current.Request.QueryString("InitialYear")
            End If
            If HttpContext.Current.Request.QueryString("EndYear").IsNotEmpty Then
                formData.EndYear = HttpContext.Current.Request.QueryString("EndYear")
            End If
            If HttpContext.Current.Request.QueryString("AporteAnual").IsNotEmpty Then
                formData.AporteAnual = HttpContext.Current.Request.QueryString("AporteAnual")
            End If
            If HttpContext.Current.Request.QueryString("ValorNulo").IsNotEmpty Then
                formData.ValorNulo = HttpContext.Current.Request.QueryString("ValorNulo")
            End If
            If HttpContext.Current.Request.QueryString("FechaFinal").IsNotEmpty Then
                formData.FechaFinal = HttpContext.Current.Request.QueryString("FechaFinal")
            End If
            If HttpContext.Current.Request.QueryString("OnLinePrintResult").IsNotEmpty Then
                formData.OnLinePrintResult = HttpContext.Current.Request.QueryString("OnLinePrintResult")
            End If
            If HttpContext.Current.Request.QueryString("PolicyDocument").IsNotEmpty Then
                formData.PolicyDocument = HttpContext.Current.Request.QueryString("PolicyDocument")
            End If
            If HttpContext.Current.Request.QueryString("PolicyExistPreviously").IsNotEmpty Then
                formData.PolicyExistPreviously = HttpContext.Current.Request.QueryString("PolicyExistPreviously")
            End If
            If HttpContext.Current.Request.QueryString("PolicyIDProyeccion").IsNotEmpty Then
                formData.PolicyIDProyeccion = HttpContext.Current.Request.QueryString("PolicyIDProyeccion")
            End If
            If HttpContext.Current.Request.QueryString("BeneficiaryType").IsNotEmpty Then
                formData.BeneficiaryType = HttpContext.Current.Request.QueryString("BeneficiaryType")
            End If
            If HttpContext.Current.Request.QueryString("IsProducer").IsNotEmpty Then
                formData.IsProducer = HttpContext.Current.Request.QueryString("IsProducer")
            End If
            If HttpContext.Current.Request.QueryString("ProducerCode").IsNotEmpty Then
                formData.ProducerCode = HttpContext.Current.Request.QueryString("ProducerCode")
            End If
            If HttpContext.Current.Request.QueryString("IsEmployee").IsNotEmpty Then
                formData.IsEmployee = HttpContext.Current.Request.QueryString("IsEmployee")
            End If
            If HttpContext.Current.Request.QueryString("RecoveryCaseIndicator").IsNotEmpty Then
                formData.RecoveryCaseIndicator = HttpContext.Current.Request.QueryString("RecoveryCaseIndicator")
            End If
            If HttpContext.Current.Request.QueryString("StatusCase").IsNotEmpty Then
                formData.StatusCase = HttpContext.Current.Request.QueryString("StatusCase")
            End If
            If HttpContext.Current.Request.QueryString("CurrentYear").IsNotEmpty Then
                formData.CurrentYear = HttpContext.Current.Request.QueryString("CurrentYear")
            End If
            If HttpContext.Current.Request.QueryString("ClienteIndicado").IsNotEmpty Then
                formData.ClienteIndicado = HttpContext.Current.Request.QueryString("ClienteIndicado")
            End If
            If HttpContext.Current.Request.QueryString("PlanillaModificacion").IsNotEmpty Then
                formData.PlanillaModificacion = HttpContext.Current.Request.QueryString("PlanillaModificacion")
            End If
            If HttpContext.Current.Request.QueryString("PlanillaVisualizacion").IsNotEmpty Then
                formData.PlanillaVisualizacion = HttpContext.Current.Request.QueryString("PlanillaVisualizacion")
            End If
            If HttpContext.Current.Request.QueryString("DefaultAddresses").IsNotEmpty Then
                formData.DefaultAddresses = HttpContext.Current.Request.QueryString("DefaultAddresses")
            End If
            If HttpContext.Current.Request.QueryString("LaboratoryRequired").IsNotEmpty Then
                formData.LaboratoryRequired = HttpContext.Current.Request.QueryString("LaboratoryRequired")
            End If
            If HttpContext.Current.Request.QueryString("LaboratorySelectedByUser").IsNotEmpty Then
                formData.LaboratorySelectedByUser = HttpContext.Current.Request.QueryString("LaboratorySelectedByUser")
            End If
            If HttpContext.Current.Request.QueryString("PrimaryInsured").IsNotEmpty Then
                formData.PrimaryInsured = HttpContext.Current.Request.QueryString("PrimaryInsured")
            End If
            If HttpContext.Current.Request.QueryString("SendMailIndicator").IsNotEmpty Then
                formData.SendMailIndicator = HttpContext.Current.Request.QueryString("SendMailIndicator")
            End If
            If HttpContext.Current.Request.QueryString("MailToProducerIndicator").IsNotEmpty Then
                formData.MailToProducerIndicator = HttpContext.Current.Request.QueryString("MailToProducerIndicator")
            End If
            If HttpContext.Current.Request.QueryString("InRuleErros").IsNotEmpty Then
                formData.InRuleErros = HttpContext.Current.Request.QueryString("InRuleErros")
            End If
            If HttpContext.Current.Request.QueryString("AccumulatedAmount").IsNotEmpty Then
                formData.AccumulatedAmount = HttpContext.Current.Request.QueryString("AccumulatedAmount")
            End If
            If HttpContext.Current.Request.QueryString("CancelledPoliciesQuantity").IsNotEmpty Then
                formData.CancelledPoliciesQuantity = HttpContext.Current.Request.QueryString("CancelledPoliciesQuantity")
            End If
            If HttpContext.Current.Request.QueryString("OtherPoliciesSameRiskQuantity").IsNotEmpty Then
                formData.OtherPoliciesSameRiskQuantity = HttpContext.Current.Request.QueryString("OtherPoliciesSameRiskQuantity")
            End If
            If HttpContext.Current.Request.QueryString("InRuleMessage").IsNotEmpty Then
                formData.InRuleMessage = HttpContext.Current.Request.QueryString("InRuleMessage")
            End If
            If HttpContext.Current.Request.QueryString("OnLinePrintIndicator").IsNotEmpty Then
                formData.OnLinePrintIndicator = HttpContext.Current.Request.QueryString("OnLinePrintIndicator")
            End If
            If HttpContext.Current.Request.QueryString("ReportURL").IsNotEmpty Then
                formData.ReportURL = HttpContext.Current.Request.QueryString("ReportURL")
            End If
            If HttpContext.Current.Request.QueryString("FormStatus").IsNotEmpty Then
                formData.FormStatus = HttpContext.Current.Request.QueryString("FormStatus")
            End If
            If HttpContext.Current.Request.QueryString("AnswerDiabetes").IsNotEmpty Then
                formData.AnswerDiabetes = HttpContext.Current.Request.QueryString("AnswerDiabetes")
            End If
            If HttpContext.Current.Request.QueryString("AnswerHeart").IsNotEmpty Then
                formData.AnswerHeart = HttpContext.Current.Request.QueryString("AnswerHeart")
            End If
            If HttpContext.Current.Request.QueryString("AnswerCancer").IsNotEmpty Then
                formData.AnswerCancer = HttpContext.Current.Request.QueryString("AnswerCancer")
            End If
            If HttpContext.Current.Request.QueryString("PaymentMethod").IsNotEmpty Then
                formData.PaymentMethod = HttpContext.Current.Request.QueryString("PaymentMethod")
            End If
            If HttpContext.Current.Request.QueryString("ProductMasterDescription").IsNotEmpty Then
                formData.ProductMasterDescription = HttpContext.Current.Request.QueryString("ProductMasterDescription")
            End If
            If HttpContext.Current.Request.QueryString("PreviousPayment").IsNotEmpty Then
                formData.PreviousPayment = HttpContext.Current.Request.QueryString("PreviousPayment")
            End If
            If HttpContext.Current.Request.QueryString("CompleteAddress").IsNotEmpty Then
                formData.CompleteAddress = HttpContext.Current.Request.QueryString("CompleteAddress")
            End If
            If HttpContext.Current.Request.QueryString("VerificarCuestionariosIndicador").IsNotEmpty Then
                formData.VerificarCuestionariosIndicador = HttpContext.Current.Request.QueryString("VerificarCuestionariosIndicador")
            End If
            If HttpContext.Current.Request.QueryString("ProductDescription").IsNotEmpty Then
                formData.ProductDescription = HttpContext.Current.Request.QueryString("ProductDescription")
            End If
            If HttpContext.Current.Request.QueryString("PrimaTotalAnual").IsNotEmpty Then
                formData.PrimaTotalAnual = HttpContext.Current.Request.QueryString("PrimaTotalAnual")
            End If
            If HttpContext.Current.Request.QueryString("PrimaRecibo").IsNotEmpty Then
                formData.PrimaRecibo = HttpContext.Current.Request.QueryString("PrimaRecibo")
            End If
            If HttpContext.Current.Request.QueryString("MonedaRecibo").IsNotEmpty Then
                formData.MonedaRecibo = HttpContext.Current.Request.QueryString("MonedaRecibo")
            End If
            If HttpContext.Current.Request.QueryString("MesTarjeta").IsNotEmpty Then
                formData.MesTarjeta = HttpContext.Current.Request.QueryString("MesTarjeta")
            End If
            If HttpContext.Current.Request.QueryString("AnoTarjeta").IsNotEmpty Then
                formData.AnoTarjeta = HttpContext.Current.Request.QueryString("AnoTarjeta")
            End If
            If HttpContext.Current.Request.QueryString("ImagenMostrada").IsNotEmpty Then
                formData.ImagenMostrada = HttpContext.Current.Request.QueryString("ImagenMostrada")
            End If
            If HttpContext.Current.Request.QueryString("ImagenIncluida").IsNotEmpty Then
                formData.ImagenIncluida = HttpContext.Current.Request.QueryString("ImagenIncluida")
            End If
            If HttpContext.Current.Request.QueryString("IsAnonymous").IsNotEmpty Then
                formData.IsAnonymous = HttpContext.Current.Request.QueryString("IsAnonymous")
            End If
            If HttpContext.Current.Request.QueryString("AgregarBeneficiario").IsNotEmpty Then
                formData.AgregarBeneficiario = HttpContext.Current.Request.QueryString("AgregarBeneficiario")
            End If
            If HttpContext.Current.Request.QueryString("TypeOfPersonBenef").IsNotEmpty Then
                formData.TypeOfPersonBenef = HttpContext.Current.Request.QueryString("TypeOfPersonBenef")
            End If
            If HttpContext.Current.Request.QueryString("ValorAcumulado").IsNotEmpty Then
                formData.ValorAcumulado = HttpContext.Current.Request.QueryString("ValorAcumulado")
            End If
            If HttpContext.Current.Request.QueryString("FondosMail").IsNotEmpty Then
                formData.FondosMail = HttpContext.Current.Request.QueryString("FondosMail")
            End If
            If HttpContext.Current.Request.QueryString("BeneficiariosMail").IsNotEmpty Then
                formData.BeneficiariosMail = HttpContext.Current.Request.QueryString("BeneficiariosMail")
            End If
            If HttpContext.Current.Request.QueryString("Descripcion").IsNotEmpty Then
                formData.Descripcion = HttpContext.Current.Request.QueryString("Descripcion")
            End If
            If HttpContext.Current.Request.QueryString("Codigo").IsNotEmpty Then
                formData.Codigo = HttpContext.Current.Request.QueryString("Codigo")
            End If
            If HttpContext.Current.Request.QueryString("UsercodeBO").IsNotEmpty Then
                formData.UsercodeBO = HttpContext.Current.Request.QueryString("UsercodeBO")
            End If
            If HttpContext.Current.Request.QueryString("UsercodeFASI").IsNotEmpty Then
                formData.UsercodeFASI = HttpContext.Current.Request.QueryString("UsercodeFASI")
            End If
            If HttpContext.Current.Request.QueryString("GenderClient").IsNotEmpty Then
                formData.GenderClient = HttpContext.Current.Request.QueryString("GenderClient")
            End If
            If HttpContext.Current.Request.QueryString("frompanel").IsNotEmpty Then
                formData.frompanel = HttpContext.Current.Request.QueryString("frompanel")
            End If
        End Sub	

        Private Sub ValidateParametersInstance(ByRef formData As HT5NNCotizacionMiInversionSeguraIIParameters)
            If IsNothing(formData.RiskInformation) Then
                formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
            End If
            If IsNothing(formData.RiskInformation.AmendmentInformation) Then
                formData.RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation
            End If
            If IsNothing(formData.RiskInformation.AmendmentInformation.Coverages) Then
                formData.RiskInformation.AmendmentInformation.Coverages = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection
            End If
            If IsNothing(formData.RiskInformation.AutomaticPaymentPolicy) Then
                formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
            End If
            If IsNothing(formData.RiskInformation.Beneficiaries) Then
                formData.RiskInformation.Beneficiaries = New InMotionGIT.Policy.Entity.Contracts.BeneficiaryCollection
            End If
            If IsNothing(formData.RiskInformation.CoveragesWithCalculatedPremium) Then
                formData.RiskInformation.CoveragesWithCalculatedPremium = New InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremiumCollection
            End If
            If IsNothing(formData.RiskInformation.LifeLineOfBusiness) Then
                formData.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
            End If
            If IsNothing(formData.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies) Then
                formData.RiskInformation.LifeLineOfBusiness.InvestmentFundRelatedToPolicies = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicyCollection
            End If
            If IsNothing(formData.RiskInformation.Modules) Then
                formData.RiskInformation.Modules = New InMotionGIT.Policy.Entity.Contracts.ModuleCollection
            End If
            If IsNothing(formData.RiskInformation.Policy) Then
                formData.RiskInformation.Policy = New InMotionGIT.Policy.Entity.Contracts.Policy
            End If
            If IsNothing(formData.RiskInformation.PrimaryBeneficiary) Then
                formData.RiskInformation.PrimaryBeneficiary = New InMotionGIT.Policy.Entity.Contracts.Role
            End If
            If IsNothing(formData.RiskInformation.PrimaryBeneficiary.Client) Then
                formData.RiskInformation.PrimaryBeneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
            End If
            If IsNothing(formData.RiskInformation.PrimaryInsured) Then
                formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
            End If
            If IsNothing(formData.RiskInformation.PrimaryInsured.Client) Then
                formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
            End If
            If IsNothing(formData.RiskInformation.PrimaryInsured.Client.BusinessAddress) Then
                formData.RiskInformation.PrimaryInsured.Client.BusinessAddress = New InMotionGIT.General.Entity.Contracts.Address.Address
            End If
            If IsNothing(formData.RiskInformation.PrimaryInsured.Client.CreditCards) Then
                formData.RiskInformation.PrimaryInsured.Client.CreditCards = New InMotionGIT.Client.Entity.Contracts.CreditCardCollection
            End If
            If IsNothing(formData.RiskInformation.PrimaryProducer) Then
                formData.RiskInformation.PrimaryProducer = New InMotionGIT.Policy.Entity.Contracts.Role
            End If
            If IsNothing(formData.RiskInformation.PrimaryProducer.Client) Then
                formData.RiskInformation.PrimaryProducer.Client = New InMotionGIT.Client.Entity.Contracts.Client
            End If
            If IsNothing(formData.RiskInformation.PrimaryProducer.Producer) Then
                formData.RiskInformation.PrimaryProducer.Producer = New InMotionGIT.Intermedia.Entity.Contracts.Producer
            End If
            If IsNothing(formData.QuestionnairesAvailable) Then
                formData.QuestionnairesAvailable = New InMotionGIT.Questionnaires.QuestionnairesAvailable
            End If
            If IsNothing(formData.PROJECTVULCollection) Then
                formData.PROJECTVULCollection = New InMotionGIT.Policy.Entity.Contracts.PROJECTVULCollection
            End If
            If IsNothing(formData.InvestmentFundRelatedToProductCollection) Then
                formData.InvestmentFundRelatedToProductCollection = New InMotionGIT.Product.Entity.Contracts.InvestmentFundRelatedToProductCollection
            End If
            If IsNothing(formData.InvestmentFundRelatedToPolicy) Then
                formData.InvestmentFundRelatedToPolicy = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy
            End If
            If IsNothing(formData.InvestmentFundRelatedToPolicyProfileCollection) Then
                formData.InvestmentFundRelatedToPolicyProfileCollection = New InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicyCollection
            End If
            If IsNothing(formData.PaymentsPlan) Then
                formData.PaymentsPlan = New InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
            End If
            If IsNothing(formData.AddressPhysicalAddressDLI) Then
                formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
            End If
            If IsNothing(formData.AddressPhysicalAddressDLI.Address) Then
                formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
            End If
            If IsNothing(formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
                formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
            End If
            If IsNothing(formData.AddressPhysicalAddressDLI.PhysicalAddress.AddressEnteredByUser) Then
                formData.AddressPhysicalAddressDLI.PhysicalAddress.AddressEnteredByUser = New InMotionGIT.AddressManager.Contract.General.StreetAddress
            End If
            If IsNothing(formData.AddressPhysicalAddressDLI.PhysicalAddress.Country) Then
                formData.AddressPhysicalAddressDLI.PhysicalAddress.Country = New InMotionGIT.Common.DataType.LookUpValueExtend
            End If
            If IsNothing(formData.AddresseMailDLI) Then
                formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
            End If
            If IsNothing(formData.AddresseMailDLI.Address) Then
                formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
            End If
            If IsNothing(formData.AddresseMailDLI.eMailAddress) Then
                formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
            End If
            If IsNothing(formData.ConsumerInformation) Then
                formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
            End If
            If IsNothing(formData.ConsumerInformation.Security) Then
                formData.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
            End If
            If IsNothing(formData.ClientIncluded) Then
                formData.ClientIncluded = New InMotionGIT.Client.Entity.Contracts.Client
            End If
            If IsNothing(formData.AddressDLICollection) Then
                formData.AddressDLICollection = New InMotionGIT.AddressManager.Contract.General.AddressDLICollection
            End If
            If IsNothing(formData.ServiceResultData) Then
                formData.ServiceResultData = New InMotionGIT.Common.Contracts.ServiceResultData
            End If
            If IsNothing(formData.UnderwritingCase) Then
                formData.UnderwritingCase = New InMotionGIT.Underwriting.Contracts.UnderwritingCase
            End If
            If IsNothing(formData.SumInsuredToOffer) Then
                formData.SumInsuredToOffer = New InMotionGIT.Policy.Entity.Contracts.RequestCollection
            End If
            If IsNothing(formData.ErroresActualizacion) Then
                formData.ErroresActualizacion = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
            End If
            If IsNothing(formData.ModulePoliza) Then
                formData.ModulePoliza = New InMotionGIT.Policy.Entity.Contracts.Module
            End If
            If IsNothing(formData.PremiumDetailCollection) Then
                formData.PremiumDetailCollection = New InMotionGIT.Bill.Entity.Contracts.PremiumDetailCollection
            End If
            If IsNothing(formData.Beneficiary) Then
                formData.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
            End If
            If IsNothing(formData.Beneficiary.Client) Then
                formData.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
            End If

        End Sub

#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property RangeAge As Int32
            <DataMember()> Public Property Parametro2 As Int32
            <DataMember()> Public Property Parametro3 As Int32
            <DataMember()> Public Property InvestmentFundRelatedToPolicyProfileCollectionInvestmentFund As System.Int32
            <DataMember()> Public Property InvestmentFundRelatedToPolicyProfileCollectionPercentageShare As System.Decimal
            <DataMember()> Public Property InvestmentFundRelatedToPolicyProfileCollectionProjectedProfitability As System.Decimal
            <DataMember()> Public Property InvestmentFundProfile_InvestmentFundRelatedToPolicy As List(Of InvestmentFundProfile_InvestmentFundRelatedToPolicyItem)
            <DataMember()> Public Property RiskInformationEffectiveDate As System.DateTime
            <DataMember()> Public Property RiskInformationProductCode As System.Int32
            <DataMember()> Public Property uwcaseid As Int64
            <DataMember()> Public Property RiskInformationLineOfBusiness As System.Int32
            <DataMember()> Public Property ClientIncludedGender As System.String
            <DataMember()> Public Property ClientIncludedSmokerIndicator As System.String
            <DataMember()> Public Property ClientIncludedBirthDate As System.DateTime
            <DataMember()> Public Property RiskInformationLifeLineOfBusinessInvestmentFundRelatedToPoliciesInvestmentFund As System.Int32
            <DataMember()> Public Property RiskInformationLifeLineOfBusinessInvestmentFundRelatedToPoliciesPercentageShare As System.Decimal
            <DataMember()> Public Property RiskInformationLifeLineOfBusinessInvestmentFundRelatedToPoliciesProjectedProfitability As System.Decimal
            <DataMember()> Public Property InvestmentFundRelatedToPolicy_InvestmentFundRelatedToPolicy As List(Of InvestmentFundRelatedToPolicy_InvestmentFundRelatedToPolicyItem)
            <DataMember()> Public Property Currency As Int32
            <DataMember()> Public Property InsuredAmountSelected As Decimal
            <DataMember()> Public Property RiskInformationCoveragesWithCalculatedPremiumDescription As System.String
            <DataMember()> Public Property RiskInformationCoveragesWithCalculatedPremiumInsuredAmount As System.Decimal
            <DataMember()> Public Property RiskInformationCoveragesWithCalculatedPremiumAnnualPremium As System.Decimal
            <DataMember()> Public Property CoverageWithCalculatedPremium_CoverageWithCalculatedPremium As List(Of CoverageWithCalculatedPremium_CoverageWithCalculatedPremiumItem)
            <DataMember()> Public Property RiskInformationTotalOriginalAnnualPremium As System.Decimal
            <DataMember()> Public Property PaymentsPlanProjectedAnnualPayments As System.Decimal
            <DataMember()> Public Property RiskInformationLifeLineOfBusinessGuaranteedInterestInInvestment As System.Decimal
            <DataMember()> Public Property RiskInformationLifeLineOfBusinessTypeOfIndemnity As System.Int32
            <DataMember()> Public Property PROJECTVULCollection As List(Of PROJECTVULCollectionItem)
            <DataMember()> Public Property PROJECTVULCollectionYearOfThePolicy As System.Int32
            <DataMember()> Public Property PROJECTVULCollectionInsuredAge As System.Int32
            <DataMember()> Public Property PROJECTVULCollectionAccumulatdAmount As System.Decimal
            <DataMember()> Public Property PROJECTVULCollectionPolicyValueOfProjectedProfitablity As System.Decimal
            <DataMember()> Public Property PROJECTVULCollectionSurrenderAvailableAmount As System.Decimal
            <DataMember()> Public Property PROJECTVULCollectionDeathCoverageAmount As System.Decimal
            <DataMember()> Public Property PROJECTVUL_PROJECTVUL As List(Of PROJECTVUL_PROJECTVULItem)
            <DataMember()> Public Property RiskInformationPrimaryInsuredClientClientID As System.String
            <DataMember()> Public Property RiskInformationPrimaryInsuredClientFirstName As System.String
            <DataMember()> Public Property RiskInformationPrimaryInsuredClientLastName As System.String
            <DataMember()> Public Property RiskInformationPrimaryInsuredClientLastName2 As System.String
            <DataMember()> Public Property AddressPhysicalAddressDLI As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
            <DataMember()> Public Property AddresseMailDLIeMailAddresseMail As System.String
            <DataMember()> Public Property QuestionnairesAvailableDiabetes As System.Boolean
            <DataMember()> Public Property QuestionnairesAvailableHeart As System.Boolean
            <DataMember()> Public Property QuestionnairesAvailableCancer As System.Boolean
            <DataMember()> Public Property BeneficiaryType As Int32
            <DataMember()> Public Property RiskInformationBeneficiariesClientCompleteClientName As System.String
            <DataMember()> Public Property RiskInformationBeneficiariesPercentageShare As System.Decimal
            <DataMember()> Public Property RiskInformationBeneficiariesRelationship As System.Int32
            <DataMember()> Public Property BeneficiaryBeneficia_Beneficiary As List(Of BeneficiaryBeneficia_BeneficiaryItem)
            <DataMember()> Public Property AgregarBeneficiario As Boolean
            <DataMember()> Public Property BeneficiaryRelationship As System.Int32
            <DataMember()> Public Property BeneficiaryPercentageShare As System.Decimal
            <DataMember()> Public Property TypeOfPersonBenef As Int32
            <DataMember()> Public Property BeneficiaryClientID As System.String
            <DataMember()> Public Property BeneficiaryClientFirstName As System.String
            <DataMember()> Public Property BeneficiaryClientLastName As System.String
            <DataMember()> Public Property BeneficiaryClientLastName2 As System.String
            <DataMember()> Public Property BeneficiaryClientLegalName As System.String
            <DataMember()> Public Property eMail As String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class InvestmentFundProfile_InvestmentFundRelatedToPolicyItem

            <DataMember()> Public Property InvestmentFund As System.Int32
            <DataMember()> Public Property PercentageShare As System.Decimal
            <DataMember()> Public Property ProjectedProfitability As System.Decimal

        End Class

        <Serializable()>
        <DataContract()>
        Public Class InvestmentFundRelatedToPolicy_InvestmentFundRelatedToPolicyItem

            <DataMember()> Public Property InvestmentFund As System.Int32
            <DataMember()> Public Property PercentageShare As System.Decimal
            <DataMember()> Public Property ProjectedProfitability As System.Decimal

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CoverageWithCalculatedPremium_CoverageWithCalculatedPremiumItem

            <DataMember()> Public Property Description As System.String
            <DataMember()> Public Property InsuredAmount As System.Decimal
            <DataMember()> Public Property AnnualPremium As System.Decimal
            <DataMember()> Public Property SelectedByDefault As System.Boolean

        End Class

        <Serializable()>
        <DataContract()>
        Public Class PROJECTVULCollectionItem

            <DataMember()> Public Property YearOfThePolicy As System.Int32
            <DataMember()> Public Property AccumulatdAmount As System.Decimal
            <DataMember()> Public Property PolicyValueOfProjectedProfitablity As System.Decimal
            <DataMember()> Public Property SurrenderAvailableAmount As System.Decimal
            <DataMember()> Public Property DeathCoverageAmount As System.Decimal

        End Class

        <Serializable()>
        <DataContract()>
        Public Class PROJECTVUL_PROJECTVULItem

            <DataMember()> Public Property YearOfThePolicy As System.Int32
            <DataMember()> Public Property InsuredAge As System.Int32
            <DataMember()> Public Property AccumulatdAmount As System.Decimal
            <DataMember()> Public Property PolicyValueOfProjectedProfitablity As System.Decimal
            <DataMember()> Public Property SurrenderAvailableAmount As System.Decimal
            <DataMember()> Public Property DeathCoverageAmount As System.Decimal

        End Class

        <Serializable()>
        <DataContract()>
        Public Class BeneficiaryBeneficia_BeneficiaryItem

            <DataMember()> Public Property ClientCompleteClientName As System.String
            <DataMember()> Public Property PercentageShare As System.Decimal
            <DataMember()> Public Property Relationship As System.Int32
            <DataMember()> Public Property ClientID As System.String

        End Class

        <Serializable()>
        Public Class HT5NNCotizacionMiInversionSeguraIIParameters
            Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of HT5NNCotizacionMiInversionSeguraIIParameters)

            Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
            Public Property uwcaseid As Int64
            Public Property uwreqid As Int64
            Public Property InsuredAmount As Decimal
            Public Property InsuredAmountSelected As Decimal
            Public Property PlanType As Int32
            Public Property ClientExistInDB As Boolean
            Public Property eMail As String
            Public Property Currency As Int32
            Public Property QueryType As Int32
            Public Property MasaCorporal As Decimal
            Public Property Age As Int32
            Public Property MessagePopUp As String
            Public Property MessageIndicator As Boolean
            Public Property QuestionnairesAvailable As InMotionGIT.Questionnaires.QuestionnairesAvailable
            Public Property ProducerClientID As String
            Public Property DescontarAhorros As Decimal
            Public Property DescontarUnidades As Decimal
            Public Property StatusRun As Boolean
            Public Property RangeAge As Int32
            Public Property RangeCapital As Int32
            Public Property FundsFound As Boolean
            Public Property TotalInvestmentFunds As Decimal
            Public Property ErrorsFound As Boolean
            Public Property ProcedureKeyValue As String
            Public Property Parametro2 As Int32
            Public Property Parametro3 As Int32
            Public Property Parametro4 As Int32
            Public Property FechaNacimiento As DateTime
            Public Property InitialYear As Int32
            Public Property EndYear As Int32
            Public Property AporteAnual As Decimal
            Public Property ValorNulo As Int32
            Public Property FechaFinal As DateTime
            Public Property OnLinePrintResult As Int32
            Public Property PolicyDocument As String
            Public Property PolicyExistPreviously As Boolean
            Public Property PolicyIDProyeccion As Int32
            Public Property PROJECTVULCollection As InMotionGIT.Policy.Entity.Contracts.PROJECTVULCollection
            Public Property BeneficiaryType As Int32
            Public Property IsProducer As Boolean
            Public Property ProducerCode As Int32
            Public Property IsEmployee As Boolean
            Public Property RecoveryCaseIndicator As Boolean
            Public Property StatusCase As Int32
            Public Property InvestmentFundRelatedToProductCollection As InMotionGIT.Product.Entity.Contracts.InvestmentFundRelatedToProductCollection
            Public Property InvestmentFundRelatedToPolicy As InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy
            Public Property InvestmentFundRelatedToPolicyProfileCollection As InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicyCollection
            Public Property PaymentsPlan As InMotionGIT.Policy.Entity.Contracts.PaymentsPlan
            Public Property AddressPhysicalAddressDLI As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
            Public Property AddresseMailDLI As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
            Public Property ConsumerInformation As InMotionGIT.Common.Contracts.Process.ConsumerInformation
            Public Property ClientIncluded As InMotionGIT.Client.Entity.Contracts.Client
            Public Property CurrentYear As Int32
            Public Property AddressDLICollection As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
            Public Property ClienteIndicado As String
            Public Property PlanillaModificacion As String
            Public Property PlanillaVisualizacion As String
            Public Property ServiceResultData As InMotionGIT.Common.Contracts.ServiceResultData
            Public Property UnderwritingCase As InMotionGIT.Underwriting.Contracts.UnderwritingCase
            Public Property DefaultAddresses As Boolean
            Public Property LaboratoryRequired As Boolean
            Public Property LaboratorySelectedByUser As Boolean
            Public Property PrimaryInsured As String
            Public Property SendMailIndicator As Boolean
            Public Property MailToProducerIndicator As Boolean
            Public Property InRuleErros As Boolean
            Public Property AccumulatedAmount As Decimal
            Public Property CancelledPoliciesQuantity As Int32
            Public Property OtherPoliciesSameRiskQuantity As Int32
            Public Property InRuleMessage As String
            Public Property OnLinePrintIndicator As Boolean
            Public Property ReportURL As String
            Public Property FormStatus As Int32
            Public Property OnLinePrint As Int32
            Public Property AnswerDiabetes As String
            Public Property AnswerHeart As String
            Public Property AnswerCancer As String
            Public Property SumInsuredToOffer As InMotionGIT.Policy.Entity.Contracts.RequestCollection
            Public Property PaymentMethod As Int32
            Public Property ProductMasterDescription As String
            Public Property PreviousPayment As Boolean
            Public Property CompleteAddress As String
            Public Property ErroresActualizacion As InMotionGIT.Common.Contracts.Errors.ErrorCollection
            Public Property ModulePoliza As InMotionGIT.Policy.Entity.Contracts.Module
            Public Property VerificarCuestionariosIndicador As Boolean
            Public Property ProductDescription As String
            Public Property PrimaTotalAnual As Decimal
            Public Property PrimaRecibo As Decimal
            Public Property PremiumDetailCollection As InMotionGIT.Bill.Entity.Contracts.PremiumDetailCollection
            Public Property MonedaRecibo As Int32
            Public Property MesTarjeta As Int32
            Public Property AnoTarjeta As Int32
            Public Property ImagenMostrada As String
            Public Property ImagenIncluida As String
            Public Property IsAnonymous As Boolean
            Public Property AgregarBeneficiario As Boolean
            Public Property Beneficiary As InMotionGIT.Policy.Entity.Contracts.Beneficiary
            Public Property TypeOfPersonBenef As Int32
            Public Property ValorAcumulado As Decimal
            Public Property FondosMail As String
            Public Property BeneficiariosMail As String
            Public Property Descripcion As String
            Public Property Codigo As Int32
            Public Property UsercodeBO As Int32
            Public Property UsercodeFASI As Int32
            Public Property GenderClient As String
            Public Property frompanel As Boolean

        End Class
#End Region

    End Class

End Namespace