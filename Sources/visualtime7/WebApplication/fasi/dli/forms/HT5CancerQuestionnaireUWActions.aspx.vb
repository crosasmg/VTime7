'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.3.34.1 at 2020-01-17 10:09:53 a. m. model release 1, Form Generator v1.0.37.30
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class HT5CancerQuestionnaireUWActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            
            Dim HT5CancerQuestionnaireUWParametersInstance As HT5CancerQuestionnaireUWParameters = Nothing

            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                    
                    With instance

                    End With                
                    
                    HT5CancerQuestionnaireUWParametersInstance = EntryDataToClass(HT5CancerQuestionnaireUWParametersInstance, instance)
                    SetDefaultValuesFromQueryString(HT5CancerQuestionnaireUWParametersInstance)
                    
                    If fromid.IsNotEmpty Then
                        GetTransferParameters(HT5CancerQuestionnaireUWParametersInstance, fromid)
                        ValidateParametersInstance(HT5CancerQuestionnaireUWParametersInstance)
                    End If
                Else       
                    instance.InstanceFormId = id.IfEmpty(urlid)
                    HT5CancerQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
    
                    If IsNothing(HT5CancerQuestionnaireUWParametersInstance) then
                        HT5CancerQuestionnaireUWParametersInstance = EntryDataToClass(HT5CancerQuestionnaireUWParametersInstance, instance)                        
                    End If
                    
                    SetDefaultValuesFromQueryString(HT5CancerQuestionnaireUWParametersInstance)
                End If

                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = String.Empty

                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    Form_Initialization(currentAction, HT5CancerQuestionnaireUWParametersInstance, resultData)
                Else
                    Form_Load(currentAction, HT5CancerQuestionnaireUWParametersInstance, resultData)
                End If


                instance = ClassToEntryData(instance, HT5CancerQuestionnaireUWParametersInstance) 
		        
                StoreFormInformation(HT5CancerQuestionnaireUWParametersInstance)
                                
                With resultData
                    .Success = True
                    .Data = New With {.Instance = instance, .LookUps = Nothing}
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "HT5CancerQuestionnaireUW", "Initialization", currentAction)
            End Try
            
            Return resultData
        End Function
  

        <WebMethod(EnableSession:=True)>
        Public Shared Function saveClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5CancerQuestionnaireUWParametersInstance As HT5CancerQuestionnaireUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                HT5CancerQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("saveClick")
                HT5CancerQuestionnaireUWParametersInstance = EntryDataToClass(HT5CancerQuestionnaireUWParametersInstance, instance)
                currentAction = SessionTrace("1. The message 'El cuestionario será...' will displayed as 'Splash'")
                ParametersToDictionary(HT5CancerQuestionnaireUWParametersInstance, parametersDictionary)
                messageAction = "El cuestionario será almacenado temporalmente. Recuerde que debe ser llenado para que su solicitud sea procesada. Muchas gracias."
                messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                resultData.AddNotifySplash(messageAction)

                instance = ClassToEntryData(instance, HT5CancerQuestionnaireUWParametersInstance)
                
                StoreFormInformation(HT5CancerQuestionnaireUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "HT5CancerQuestionnaireUW", "saveClick", currentAction)
            End Try
            
            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function submitClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5CancerQuestionnaireUWParametersInstance As HT5CancerQuestionnaireUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("*")
                HT5CancerQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("submitClick")
                HT5CancerQuestionnaireUWParametersInstance = EntryDataToClass(HT5CancerQuestionnaireUWParametersInstance, instance)
                currentAction = SessionTrace("1. HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5CancerQuestionnaireUWParametersInstance.uwcaseid)...")
                currentAction = SessionTrace("1.1. HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5CancerQuestionnaireUWParametersInstance.uwcaseid)...")

                HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5CancerQuestionnaireUWParametersInstance.uwcaseid)

                currentAction = SessionTrace("2. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64)
                .Add("uwreqid", HT5CancerQuestionnaireUWParametersInstance.uwreqid)
                .Add("ClientName", HT5CancerQuestionnaireUWParametersInstance.ClientName)
                .Add("StatusCase", HT5CancerQuestionnaireUWParametersInstance.StatusCase)
                .Add("StatusRequirement", HT5CancerQuestionnaireUWParametersInstance.StatusRequirement)
                .Add("RiskInformation", HT5CancerQuestionnaireUWParametersInstance.RiskInformation)
                .Add("Identifier", "CancerFinal")
                .Add("context", formContext)
                .Add("caseLocked", HT5CancerQuestionnaireUWParametersInstance.caseLocked)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5CancerQuestionnaireUWParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                HT5CancerQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                HT5CancerQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
                HT5CancerQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                HT5CancerQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                HT5CancerQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("3. If HT5CancerQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then")
                If HT5CancerQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then

                    currentAction = SessionTrace("4. The message 'El estado del cuesti...' will displayed as 'Splash'")
                    ParametersToDictionary(HT5CancerQuestionnaireUWParametersInstance, parametersDictionary)
                    messageAction = "El estado del cuestionario no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros."
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifySplash(messageAction)
                    Else
                    currentAction = SessionTrace("5. Call Shared Function 'User Profile' without parameters")
                    Dim _ClientUser_5acbb251c9a94bb5ae7c26ffd8cec35e As InMotionGIT.Client.Entity.Contracts.Client
                    

      If Not IsNothing(UserInfo) AndAlso Not IsNothing(UserInfo.User) then
         _ClientUser_5acbb251c9a94bb5ae7c26ffd8cec35e = New InMotionGIT.Client.Entity.Contracts.Client

         With _ClientUser_5acbb251c9a94bb5ae7c26ffd8cec35e
             .ClientID = UserInfo.User.ClientID
             .FirstName = UserInfo.User.FirstName
             .LastName = UserInfo.User.LastName
             .LastName2 = UserInfo.User.SecondLastName
             .BirthDate = UserInfo.User.DateOfBirth
             .LegalName = UserInfo.User.CompanyName
             .GenderEnum = IIf(UserInfo.User.Gender = "Male", InMotionGIT.Common.Contracts.Enumerations.EnumGender.Male, InMotionGIT.Common.Contracts.Enumerations.EnumGender.Female)
             .eMailAddressDefault = UserInfo.User.Email
             .CompleteClientName = .CompleteClientNameValid
         End With

	isNullResult = (IsNothing(_ClientUser_5acbb251c9a94bb5ae7c26ffd8cec35e))
	isFoundData  = Not isNullResult
      End If
    
                    HT5CancerQuestionnaireUWParametersInstance.ClientUser = _ClientUser_5acbb251c9a94bb5ae7c26ffd8cec35e

                    currentAction = SessionTrace("6. HT5CancerQuestionnaireUWParametersInstance.UsercodeFASI = UserInfo.UserId...")
                    currentAction = SessionTrace("6.1. HT5CancerQuestionnaireUWParametersInstance.UsercodeFASI = UserInfo.UserId...")

                    HT5CancerQuestionnaireUWParametersInstance.UsercodeFASI = UserInfo.UserId
                    currentAction = SessionTrace("6.2. HT5CancerQuestionnaireUWParametersInstance.IsAnonymous = UserInfo.IsAnonymous()...")

                    HT5CancerQuestionnaireUWParametersInstance.IsAnonymous = UserInfo.IsAnonymous()

                    currentAction = SessionTrace("7. If HT5CancerQuestionnaireUWParametersInstance.IsAnonymous = true Then")
                    If HT5CancerQuestionnaireUWParametersInstance.IsAnonymous = true Then

                        currentAction = SessionTrace("8. HT5CancerQuestionnaireUWParametersInstance.UsercodeFASI = 9998...")
                        currentAction = SessionTrace("8.1. HT5CancerQuestionnaireUWParametersInstance.UsercodeFASI = 9998...")

                        HT5CancerQuestionnaireUWParametersInstance.UsercodeFASI = 9998

                                End If
                    currentAction = SessionTrace("9. If HT5CancerQuestionnaireUWParametersInstance.caseLocked = true Then")
                    If HT5CancerQuestionnaireUWParametersInstance.caseLocked = true Then

                        currentAction = SessionTrace("10. Call 'Main Process Questionnaire Cancer' workflow in Synchronous mode with tracking")
                        WorkflowInArguments = New Dictionary(Of String, Object)

                        With WorkflowInArguments
                        .Add("uwcaseid", HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64)
                        .Add("uwreqid", HT5CancerQuestionnaireUWParametersInstance.uwreqid)
                        .Add("Cancer", HT5CancerQuestionnaireUWParametersInstance.Cancer)
                        .Add("context", formContext)
                        .Add("ConnectedUserCode", HT5CancerQuestionnaireUWParametersInstance.UsercodeFASI)
                        .Add("caseLocked", HT5CancerQuestionnaireUWParametersInstance.caseLocked)
                        End With

                        WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireRulesCancerUW", "B5096DF2-BF61-44E1-A621-9A5B0EE960EF", 10, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5CancerQuestionnaireUWParametersInstance.InternalId)

                        currentAction += "'Mapping Outputs'"
                        HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                        HT5CancerQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                        HT5CancerQuestionnaireUWParametersInstance.Cancer = WorkflowOutArguments("Cancer")

                        currentAction = SessionTrace("11. Url: '#setting.Url.WebApplication#/Underwriting/UnderwritingPanel.aspx'")
                            
                With resultData
                    .AddRedirect(String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") +"/Underwriting/UnderwritingPanel.aspx"+"?closeWindow={0}","1"))
                End With
                                    Else
                        currentAction = SessionTrace("12. The message 'El cuestionario será...' will displayed as 'Splash'")
                        ParametersToDictionary(HT5CancerQuestionnaireUWParametersInstance, parametersDictionary)
                        messageAction = "El cuestionario será procesado. Muchas gracias."
                        messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                        resultData.AddNotifySplash(messageAction)
                        currentAction = SessionTrace("13. Call 'Main Process Questionnaire Cancer' workflow in Asynchronous mode with tracking")
                        WorkflowInArguments = New Dictionary(Of String, Object)

                        With WorkflowInArguments
                        .Add("uwcaseid", HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64)
                        .Add("uwreqid", HT5CancerQuestionnaireUWParametersInstance.uwreqid)
                        .Add("Cancer", HT5CancerQuestionnaireUWParametersInstance.Cancer)
                        .Add("context", formContext)
                        .Add("ConnectedUserCode", HT5CancerQuestionnaireUWParametersInstance.UsercodeFASI)
                        .Add("caseLocked", HT5CancerQuestionnaireUWParametersInstance.caseLocked)
                        End With

                        WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireRulesCancerUW", "B5096DF2-BF61-44E1-A621-9A5B0EE960EF", 8, WorkflowInArguments, True, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5CancerQuestionnaireUWParametersInstance.InternalId)


                                        End If
                                    End If

                instance = ClassToEntryData(instance, HT5CancerQuestionnaireUWParametersInstance)
                
                StoreFormInformation(HT5CancerQuestionnaireUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessServerAction(ex, "HT5CancerQuestionnaireUW", "submitClick", currentAction)
            End Try
            
            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


#End Region

#Region "Form Actions"

        Private Shared Sub Form_Initialization(ByRef currentAction As String, ByRef HT5CancerQuestionnaireUWParametersInstance As HT5CancerQuestionnaireUWParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            
            Dim formContext As New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                        HT5CancerQuestionnaireUWParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                                     .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                                     .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                                     .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Initialization")

            currentAction = SessionTrace("1. HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5CancerQuestionnaireUWParametersInstance.uwcaseid)...")
            currentAction = SessionTrace("1.1. HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5CancerQuestionnaireUWParametersInstance.uwcaseid)...")

            HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5CancerQuestionnaireUWParametersInstance.uwcaseid)

            currentAction = SessionTrace("2. If HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 <> 0 Then")
            If HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 <> 0 Then

                currentAction = SessionTrace("3. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64)
                .Add("uwreqid", HT5CancerQuestionnaireUWParametersInstance.uwreqid)
                .Add("ClientName", HT5CancerQuestionnaireUWParametersInstance.ClientName)
                .Add("StatusCase", HT5CancerQuestionnaireUWParametersInstance.StatusCase)
                .Add("StatusRequirement", HT5CancerQuestionnaireUWParametersInstance.StatusRequirement)
                .Add("RiskInformation", HT5CancerQuestionnaireUWParametersInstance.RiskInformation)
                .Add("Identifier", "CancerInitialization")
                .Add("context", formContext)
                .Add("caseLocked", HT5CancerQuestionnaireUWParametersInstance.caseLocked)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5CancerQuestionnaireUWParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                HT5CancerQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                HT5CancerQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
                HT5CancerQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                HT5CancerQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                HT5CancerQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("4. HT5CancerQuestionnaireUWParametersInstance.Cancer.DateReceived = Date.Today...")
                currentAction = SessionTrace("4.1. HT5CancerQuestionnaireUWParametersInstance.Cancer.DateReceived = Date.Today...")
                                If IsNothing(HT5CancerQuestionnaireUWParametersInstance.Cancer) Then
                    HT5CancerQuestionnaireUWParametersInstance.Cancer = New InMotionGIT.Questionnaires.Cancer
                End If

                HT5CancerQuestionnaireUWParametersInstance.Cancer.DateReceived = Date.Today

                currentAction = SessionTrace("5. If HT5CancerQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then")
                If HT5CancerQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then

                    currentAction = SessionTrace("6. The message 'El estado del cuesti...' will displayed as 'Splash'")
                    ParametersToDictionary(HT5CancerQuestionnaireUWParametersInstance, parametersDictionary)
                    messageAction = "El estado del cuestionario no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros."
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifySplash(messageAction)
                        End If
                    End If

            
        End Sub
	
        Private Shared Sub Form_Load(ByRef currentAction As String, ByRef HT5CancerQuestionnaireUWParametersInstance As HT5CancerQuestionnaireUWParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                        HT5CancerQuestionnaireUWParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                                     .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                                     .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                                     .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Load")

            currentAction = SessionTrace("1. HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5CancerQuestionnaireUWParametersInstance.uwcaseid)...")
            currentAction = SessionTrace("1.1. HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5CancerQuestionnaireUWParametersInstance.uwcaseid)...")

            HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5CancerQuestionnaireUWParametersInstance.uwcaseid)

            currentAction = SessionTrace("2. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
            WorkflowInArguments = New Dictionary(Of String, Object)

            With WorkflowInArguments
            .Add("uwcaseid", HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64)
            .Add("uwreqid", HT5CancerQuestionnaireUWParametersInstance.uwreqid)
            .Add("ClientName", HT5CancerQuestionnaireUWParametersInstance.ClientName)
            .Add("StatusCase", HT5CancerQuestionnaireUWParametersInstance.StatusCase)
            .Add("StatusRequirement", HT5CancerQuestionnaireUWParametersInstance.StatusRequirement)
            .Add("RiskInformation", HT5CancerQuestionnaireUWParametersInstance.RiskInformation)
            .Add("Identifier", "CancerLoad")
            .Add("context", formContext)
            .Add("caseLocked", HT5CancerQuestionnaireUWParametersInstance.caseLocked)
            End With

            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5CancerQuestionnaireUWParametersInstance.InternalId)

            currentAction += "'Mapping Outputs'"
            HT5CancerQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
            HT5CancerQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
            HT5CancerQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
            HT5CancerQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
            HT5CancerQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
            HT5CancerQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

            currentAction = SessionTrace("3. If HT5CancerQuestionnaireUWParametersInstance.fromPanel = true Then")
            If HT5CancerQuestionnaireUWParametersInstance.fromPanel = true Then

                currentAction = SessionTrace("4. part1ca.Enabled = false, Zonadca.Enabled = false, Firmaca.Visible = false")
                currentAction = SessionTrace("4.1. part1ca.Enabled = false...")
                resultData.AddControlBehavior("part1ca", "disabled")
                currentAction = SessionTrace("4.2. Zonadca.Enabled = false...")
                resultData.AddControlBehavior("Zonadca", "disabled")
                currentAction = SessionTrace("4.3. Firmaca.Visible = false...")
                resultData.AddControlBehavior("Firmaca", "hide")

                End If
            currentAction = SessionTrace("5. If HT5CancerQuestionnaireUWParametersInstance.Cancer.DateReceived Is Null Or Empty '' Then")
            If IsNothing(HT5CancerQuestionnaireUWParametersInstance.Cancer.DateReceived) OrElse HT5CancerQuestionnaireUWParametersInstance.Cancer.DateReceived = Date.MinValue Then

                currentAction = SessionTrace("6. HT5CancerQuestionnaireUWParametersInstance.Cancer.DateReceived = Date.Today...")
                currentAction = SessionTrace("6.1. HT5CancerQuestionnaireUWParametersInstance.Cancer.DateReceived = Date.Today...")
                                If IsNothing(HT5CancerQuestionnaireUWParametersInstance.Cancer) Then
                    HT5CancerQuestionnaireUWParametersInstance.Cancer = New InMotionGIT.Questionnaires.Cancer
                End If

                HT5CancerQuestionnaireUWParametersInstance.Cancer.DateReceived = Date.Today

                    End If

        End Sub
#End Region
#Region "Utilities"

        Private Shared Sub ParametersToDictionary(formData As HT5CancerQuestionnaireUWParameters, ByRef target As Dictionary(Of String, Object))
            If IsNothing(target) Then
                target = New Dictionary(Of String, Object)

                target.Add("Cancer", formData.Cancer)
                target.Add("uwcaseid", formData.uwcaseid)
                target.Add("uwreqid", formData.uwreqid)
                target.Add("ClientName", formData.ClientName)
                target.Add("StatusCase", formData.StatusCase)
                target.Add("StatusRequirement", formData.StatusRequirement)
                target.Add("RiskInformation", formData.RiskInformation)
                target.Add("fromPanel", formData.fromPanel)
                target.Add("UsercodeFASI", formData.UsercodeFASI)
                target.Add("uwCaseIdInt64", formData.uwCaseIdInt64)
                target.Add("IsAnonymous", formData.IsAnonymous)
                target.Add("caseLocked", formData.caseLocked)
                target.Add("ClientUser", formData.ClientUser)
            Else
                target("Cancer") = formData.Cancer
                target("uwcaseid") = formData.uwcaseid
                target("uwreqid") = formData.uwreqid
                target("ClientName") = formData.ClientName
                target("StatusCase") = formData.StatusCase
                target("StatusRequirement") = formData.StatusRequirement
                target("RiskInformation") = formData.RiskInformation
                target("fromPanel") = formData.fromPanel
                target("UsercodeFASI") = formData.UsercodeFASI
                target("uwCaseIdInt64") = formData.uwCaseIdInt64
                target("IsAnonymous") = formData.IsAnonymous
                target("caseLocked") = formData.caseLocked
                target("ClientUser") = formData.ClientUser
            End If
        End Sub

        Private Shared Sub GetTransferParameters(parametersData As HT5CancerQuestionnaireUWParameters, fromid As String)
            Dim fromDocumentCache As Object = Nothing

            If Not String.IsNullOrEmpty(fromid) Then
                fromDocumentCache = HttpContext.Current.Session(fromid)
                HttpContext.Current.Session.Remove(fromid)

            Else
                fromDocumentCache = HttpContext.Current.Session(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove("fromid")
            End If

            If Not IsNothing(fromDocumentCache) Then
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Cancer", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientName", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusCase", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRequirement", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("fromPanel", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeFASI", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwCaseIdInt64", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsAnonymous", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("caseLocked", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientUser", fromDocumentCache, parametersData)
            End If
        End Sub

        Private Shared Function SessionTrace(message As String) As String

            If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                Dim tracelog As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath")))

                tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = tracelog
            End If

            Return message
        End Function

#End Region


#Region "Storage Database Methods"

      Private Shared Sub StoreFormInformation(formData As HT5CancerQuestionnaireUWParameters)
            If Not IsNothing(formData) Then
                Dim foundData As Boolean

                If formData.InternalId.IsEmpty Then
                    formData.InternalId = Guid.NewGuid.ToString
                Else
                    With New DataManagerFactory("SELECT COUNT(FormId) FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                 "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                        .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                        foundData = .QueryExecuteScalarToInteger > 0
                    End With
                End If

                If foundData Then
                    UpdateStorageData(formData)
                Else
                    InsertStorageData(formData)
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso
                    HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                    HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.HT5CancerQuestionnaireUW", formData.InternalId)) = formData
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track.Parameters")) AndAlso
                    HttpContext.Current.Session("Form.Track.Parameters").ToString.ToLower = "true" Then

                    If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                        InMotionGIT.Common.Helpers.FileHandler.SaveContent(String.Format(CultureInfo.InvariantCulture, 
                                                                                         "{0}\{1}.HT5CancerQuestionnaireUW.txt", ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), 
                                                                                         HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", 
                                                                                                                                   IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))))
                    End If

                    InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of HT5CancerQuestionnaireUWParameters)(formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.HT5CancerQuestionnaireUW.xml", 
                                                                                                                        ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
                End If
            End If
        End Sub

        Private Shared Function RetrieveFormInformationFromDatabase(instanceFormId As String) As HT5CancerQuestionnaireUWParameters
            Dim result As HT5CancerQuestionnaireUWParameters = Nothing
            Dim records As DataTable = Nothing

            With New DataManagerFactory("SELECT Content FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, instanceFormId)
                records = .QueryExecuteToTable(True)
            End With

            If records.Rows.Count > 0 Then
                result = Serialize.Deserialize(Of HT5CancerQuestionnaireUWParameters)(records.FirstRow.Item("Content"))
            End If

            Return result
        End Function

        Private Shared Sub InsertStorageData(formData As HT5CancerQuestionnaireUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("INSERT INTO FrontOffice.DocumentCache (FormId, ModelId, UserId, Page, Content, CreationDate, UpdateDate) VALUES(@:FormId, @:ModelId, @:UserId, @:Page, @:Content, @:CreationDate, @:UpdateDate)",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "d5f4d9c5-bf61-426d-89c7-a6e8f321d6df")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HT5CancerQuestionnaireUWParameters)(formData))
            .AddParameter("CreationDate", DbType.DateTime, 20, False, Now)
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)

                .CommandExecute()
            End With
        End Sub

        Private Shared Sub UpdateStorageData(formData As HT5CancerQuestionnaireUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("UPDATE FrontOffice.DocumentCache SET ModelId = @:ModelId, UserId = @:UserId, Page = @:Page, Content = @:Content, UpdateDate = @:UpdateDate WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "d5f4d9c5-bf61-426d-89c7-a6e8f321d6df")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HT5CancerQuestionnaireUWParameters)(formData))
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)

                .CommandExecute()
            End With
        End Sub

#End Region


#Region "Contracts Mappers"

        Private Shared Function EntryDataToClass(parametersData As HT5CancerQuestionnaireUWParameters, formData As EntryData) As HT5CancerQuestionnaireUWParameters
            If IsNothing(parametersData) Then
                parametersData = New HT5CancerQuestionnaireUWParameters
            End If

            If IsNothing(parametersData.Cancer) Then
                parametersData.Cancer = New InMotionGIT.Questionnaires.Cancer
            End If
            If IsNothing(parametersData.Cancer.DetailsRestrictedLifeStyle) Then
                parametersData.Cancer.DetailsRestrictedLifeStyle = New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWorkCollection
            End If
            If IsNothing(parametersData.Cancer.DetailsSpecialists) Then
                parametersData.Cancer.DetailsSpecialists = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitionersCollection
            End If

            With parametersData
                .InternalId = formData.InstanceFormId
                .ClientName = formData.ClientName
                .uwcaseid = formData.uwcaseid
                .Cancer.TypeOfCancer = formData.CancerTypeOfCancer
                .Cancer.DateDiagnosed = formData.CancerDateDiagnosed
                .Cancer.StageOfCancer = formData.CancerStageOfCancer
                .Cancer.ScaleColonRectalCancer = formData.CancerScaleColonRectalCancer
                .Cancer.LevelMelanoma = formData.CancerLevelMelanoma
                .Cancer.GradeProstateCancer = formData.CancerGradeProstateCancer
                .Cancer.EvidenceOfRecurringCancer = formData.CancerEvidenceOfRecurringCancer
                .Cancer.DateEvidence = formData.CancerDateEvidence
                .Cancer.LocationRecurringCancer = formData.CancerLocationRecurringCancer
                .Cancer.DateInitiallyTreated = formData.CancerDateInitiallyTreated
                .Cancer.DateLastTreated = formData.CancerDateLastTreated
                .Cancer.DateLastSeenByDoctor = formData.CancerDateLastSeenByDoctor
                .Cancer.GrowthMayBeMalignant = formData.CancerGrowthMayBeMalignant
                .Cancer.DetailsEvidence = formData.CancerDetailsEvidence
                .Cancer.RemovedGrowth = formData.CancerRemovedGrowth
                .Cancer.DetailsInvestigations = formData.CancerDetailsInvestigations
                .Cancer.ChemotherapyTreatmentFollowing = formData.CancerChemotherapyTreatmentFollowing
                .Cancer.RadiotherapyTreatmentFollowing = formData.CancerRadiotherapyTreatmentFollowing
                .Cancer.MedicationTreatmentFollowing = formData.CancerMedicationTreatmentFollowing
                .Cancer.OtherTreatmentFollowing = formData.CancerOtherTreatmentFollowing
                .Cancer.StillFollowedUp = formData.CancerStillFollowedUp
                .Cancer.HowOften = formData.CancerHowOften
                .Cancer.DateOfDischargedFollowUp = formData.CancerDateOfDischargedFollowUp
                .Cancer.SurgeryTreatment = formData.CancerSurgeryTreatment
                .Cancer.DateSurgeryTreatment = formData.CancerDateSurgeryTreatment
                .Cancer.ChemotherapyTreatment = formData.CancerChemotherapyTreatment
                .Cancer.DateChemotherapyTreatment = formData.CancerDateChemotherapyTreatment
                .Cancer.RadiationTreatment = formData.CancerRadiationTreatment
                .Cancer.DateRadiationTreatment = formData.CancerDateRadiationTreatment
                .Cancer.HormoneTreatment = formData.CancerHormoneTreatment
                .Cancer.DateHormoneTreatment = formData.CancerDateHormoneTreatment
                .Cancer.OtherTreatment = formData.CancerOtherTreatment
                .Cancer.DateOtherTreatment = formData.CancerDateOtherTreatment
                .Cancer.NameTreatment = formData.CancerNameTreatment
                .Cancer.Prognosis = formData.CancerPrognosis
                .Cancer.DetailsPrognosis = formData.CancerDetailsPrognosis
                .Cancer.ChemotherapyCurrentlyTreatment = formData.CancerChemotherapyCurrentlyTreatment
                .Cancer.RadiationCurrentlyTreatment = formData.CancerRadiationCurrentlyTreatment
                .Cancer.HormoneCurrentlyTreatment = formData.CancerHormoneCurrentlyTreatment
                .Cancer.MedicationCurrentlyTreatment = formData.CancerMedicationCurrentlyTreatment
                .Cancer.OtherCurrentlyTreatment = formData.CancerOtherCurrentlyTreatment
                .Cancer.DetailsCurrentlyTreatment = formData.CancerDetailsCurrentlyTreatment
                .Cancer.YesRestrictedLifeStyle = formData.CancerYesRestrictedLifeStyle
                 If formData.DetailsAbsensesFromWork_DetailsAbsensesFromWork.IsNotEmpty Then
                    Dim temporalDetailsRestrictedLifeStyle As New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWorkCollection
                    Dim currentItem As InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWork

	            For Each itemData As DetailsAbsensesFromWork_DetailsAbsensesFromWorkItem In formData.DetailsAbsensesFromWork_DetailsAbsensesFromWork
                        currentItem = (From _x In parametersData.Cancer.DetailsRestrictedLifeStyle Where _x.id = itemData.id Select _x).FirstOrDefault()
                     
	                If currentItem.IsEmpty Then
                            currentItem = New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWork
                  
                            With currentItem

                                .DateFrom = itemData.DateFrom
                                .DateTo = itemData.DateTo
                                .Details = itemData.Details
                                .id = itemData.id
                            End With                      
                                              
	                Else
                            With currentItem

                                .DateFrom = itemData.DateFrom
                                .DateTo = itemData.DateTo
                                .Details = itemData.Details
                                .id = itemData.id
                            End With
                        End If
                        
                        temporalDetailsRestrictedLifeStyle.Add(currentItem)
                    Next
                    
                    parametersData.Cancer.DetailsRestrictedLifeStyle = temporalDetailsRestrictedLifeStyle
                 End If
                 If formData.DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners.IsNotEmpty Then
                    Dim temporalDetailsSpecialists As New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitionersCollection
                    Dim currentItem As InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitioners

	            For Each itemData As DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem In formData.DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners
                        currentItem = (From _x In parametersData.Cancer.DetailsSpecialists Where _x.IdDetails = itemData.IdDetails Select _x).FirstOrDefault()
                     
	                If currentItem.IsEmpty Then
                            currentItem = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitioners
                  
                            With currentItem

                                .PractitionerName = itemData.PractitionerName
                                .PhonePractitioner = itemData.PhonePractitioner
                                .eMailPractitioner = itemData.eMailPractitioner
                                .AddresPractitioner = itemData.AddresPractitioner
                                .IdDetails = itemData.IdDetails
                            End With                      
                                              
	                Else
                            With currentItem

                                .PractitionerName = itemData.PractitionerName
                                .PhonePractitioner = itemData.PhonePractitioner
                                .eMailPractitioner = itemData.eMailPractitioner
                                .AddresPractitioner = itemData.AddresPractitioner
                                .IdDetails = itemData.IdDetails
                            End With
                        End If
                        
                        temporalDetailsSpecialists.Add(currentItem)
                    Next
                    
                    parametersData.Cancer.DetailsSpecialists = temporalDetailsSpecialists
                 End If
                .Cancer.AdditionalInformation = formData.CancerAdditionalInformation
                .Cancer.DateReceived = formData.CancerDateReceived
            End With

            Return parametersData
        End Function

        Private Shared Function ClassToEntryData(formData As EntryData, parametersData As HT5CancerQuestionnaireUWParameters) As EntryData
            formData = New EntryData

            With formData
                .InstanceFormId = parametersData.InternalId
                .ClientName = parametersData.ClientName
                .uwcaseid = parametersData.uwcaseid
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerTypeOfCancer = parametersData.Cancer.TypeOfCancer
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDateDiagnosed = parametersData.Cancer.DateDiagnosed
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerStageOfCancer = parametersData.Cancer.StageOfCancer
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerScaleColonRectalCancer = parametersData.Cancer.ScaleColonRectalCancer
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerLevelMelanoma = parametersData.Cancer.LevelMelanoma
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerGradeProstateCancer = parametersData.Cancer.GradeProstateCancer
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerEvidenceOfRecurringCancer = parametersData.Cancer.EvidenceOfRecurringCancer
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDateEvidence = parametersData.Cancer.DateEvidence
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerLocationRecurringCancer = parametersData.Cancer.LocationRecurringCancer
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDateInitiallyTreated = parametersData.Cancer.DateInitiallyTreated
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDateLastTreated = parametersData.Cancer.DateLastTreated
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDateLastSeenByDoctor = parametersData.Cancer.DateLastSeenByDoctor
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerGrowthMayBeMalignant = parametersData.Cancer.GrowthMayBeMalignant
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDetailsEvidence = parametersData.Cancer.DetailsEvidence
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerRemovedGrowth = parametersData.Cancer.RemovedGrowth
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDetailsInvestigations = parametersData.Cancer.DetailsInvestigations
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerChemotherapyTreatmentFollowing = parametersData.Cancer.ChemotherapyTreatmentFollowing
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerRadiotherapyTreatmentFollowing = parametersData.Cancer.RadiotherapyTreatmentFollowing
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerMedicationTreatmentFollowing = parametersData.Cancer.MedicationTreatmentFollowing
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerOtherTreatmentFollowing = parametersData.Cancer.OtherTreatmentFollowing
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerStillFollowedUp = parametersData.Cancer.StillFollowedUp
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerHowOften = parametersData.Cancer.HowOften
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDateOfDischargedFollowUp = parametersData.Cancer.DateOfDischargedFollowUp
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerSurgeryTreatment = parametersData.Cancer.SurgeryTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDateSurgeryTreatment = parametersData.Cancer.DateSurgeryTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerChemotherapyTreatment = parametersData.Cancer.ChemotherapyTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDateChemotherapyTreatment = parametersData.Cancer.DateChemotherapyTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerRadiationTreatment = parametersData.Cancer.RadiationTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDateRadiationTreatment = parametersData.Cancer.DateRadiationTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerHormoneTreatment = parametersData.Cancer.HormoneTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDateHormoneTreatment = parametersData.Cancer.DateHormoneTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerOtherTreatment = parametersData.Cancer.OtherTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDateOtherTreatment = parametersData.Cancer.DateOtherTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerNameTreatment = parametersData.Cancer.NameTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerPrognosis = parametersData.Cancer.Prognosis
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDetailsPrognosis = parametersData.Cancer.DetailsPrognosis
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerChemotherapyCurrentlyTreatment = parametersData.Cancer.ChemotherapyCurrentlyTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerRadiationCurrentlyTreatment = parametersData.Cancer.RadiationCurrentlyTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerHormoneCurrentlyTreatment = parametersData.Cancer.HormoneCurrentlyTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerMedicationCurrentlyTreatment = parametersData.Cancer.MedicationCurrentlyTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerOtherCurrentlyTreatment = parametersData.Cancer.OtherCurrentlyTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDetailsCurrentlyTreatment = parametersData.Cancer.DetailsCurrentlyTreatment
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerYesRestrictedLifeStyle = parametersData.Cancer.YesRestrictedLifeStyle
                End If
                .DetailsAbsensesFromWork_DetailsAbsensesFromWork = New List(Of DetailsAbsensesFromWork_DetailsAbsensesFromWorkItem)

                If Not IsNothing(parametersData.Cancer) AndAlso Not IsNothing(parametersData.Cancer.DetailsRestrictedLifeStyle) Then
                    Dim newItem As DetailsAbsensesFromWork_DetailsAbsensesFromWorkItem
                    
                    For Each itemData As InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWork In parametersData.Cancer.DetailsRestrictedLifeStyle
                        newItem = New DetailsAbsensesFromWork_DetailsAbsensesFromWorkItem
                        
                        With newItem
                            .DateFrom = itemData.DateFrom
                            .DateTo = itemData.DateTo
                            .Details = itemData.Details
                            .id = itemData.id                        
                        End With

                        .DetailsAbsensesFromWork_DetailsAbsensesFromWork.Add(newItem)
                    Next

                    If .DetailsAbsensesFromWork_DetailsAbsensesFromWork.Count <> 0 Then

                    End If
                End If


                .DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners = New List(Of DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem)

                If Not IsNothing(parametersData.Cancer) AndAlso Not IsNothing(parametersData.Cancer.DetailsSpecialists) Then
                    Dim newItem As DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem
                    
                    For Each itemData As InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitioners In parametersData.Cancer.DetailsSpecialists
                        newItem = New DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem
                        
                        With newItem
                            .PractitionerName = itemData.PractitionerName
                            .PhonePractitioner = itemData.PhonePractitioner
                            .eMailPractitioner = itemData.eMailPractitioner
                            .AddresPractitioner = itemData.AddresPractitioner
                            .IdDetails = itemData.IdDetails                        
                        End With

                        .DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners.Add(newItem)
                    Next

                    If .DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners.Count <> 0 Then

                    End If
                End If


                If Not IsNothing(parametersData.Cancer) Then
                    .CancerAdditionalInformation = parametersData.Cancer.AdditionalInformation
                End If
                If Not IsNothing(parametersData.Cancer) Then
                    .CancerDateReceived = parametersData.Cancer.DateReceived
                End If
            End With

            Return formData
        End Function

#End Region

#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As HT5CancerQuestionnaireUWParameters)
            If HttpContext.Current.Request.QueryString("uwcaseid").IsNotEmpty Then
                formData.uwcaseid = HttpContext.Current.Request.QueryString("uwcaseid")
            End If
            If HttpContext.Current.Request.QueryString("uwreqid").IsNotEmpty Then
                formData.uwreqid = HttpContext.Current.Request.QueryString("uwreqid")
            End If
            If HttpContext.Current.Request.QueryString("ClientName").IsNotEmpty Then
                formData.ClientName = HttpContext.Current.Request.QueryString("ClientName")
            End If
            If HttpContext.Current.Request.QueryString("StatusCase").IsNotEmpty Then
                formData.StatusCase = HttpContext.Current.Request.QueryString("StatusCase")
            End If
            If HttpContext.Current.Request.QueryString("StatusRequirement").IsNotEmpty Then
                formData.StatusRequirement = HttpContext.Current.Request.QueryString("StatusRequirement")
            End If
            If HttpContext.Current.Request.QueryString("fromPanel").IsNotEmpty Then
                formData.fromPanel = HttpContext.Current.Request.QueryString("fromPanel")
            End If
            If HttpContext.Current.Request.QueryString("UsercodeFASI").IsNotEmpty Then
                formData.UsercodeFASI = HttpContext.Current.Request.QueryString("UsercodeFASI")
            End If
            If HttpContext.Current.Request.QueryString("uwCaseIdInt64").IsNotEmpty Then
                formData.uwCaseIdInt64 = HttpContext.Current.Request.QueryString("uwCaseIdInt64")
            End If
            If HttpContext.Current.Request.QueryString("IsAnonymous").IsNotEmpty Then
                formData.IsAnonymous = HttpContext.Current.Request.QueryString("IsAnonymous")
            End If
            If HttpContext.Current.Request.QueryString("caseLocked").IsNotEmpty Then
                formData.caseLocked = HttpContext.Current.Request.QueryString("caseLocked")
            End If
        End Sub	

        Private Shared Sub ValidateParametersInstance(ByRef formData As HT5CancerQuestionnaireUWParameters)
            If IsNothing(formData.Cancer) Then
                formData.Cancer = New InMotionGIT.Questionnaires.Cancer
            End If
            If IsNothing(formData.Cancer.DetailsRestrictedLifeStyle) Then
                formData.Cancer.DetailsRestrictedLifeStyle = New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWorkCollection
            End If
            If IsNothing(formData.Cancer.DetailsSpecialists) Then
                formData.Cancer.DetailsSpecialists = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitionersCollection
            End If

        End Sub

#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property ClientName As String
            <DataMember()> Public Property uwcaseid As Int64
            <DataMember()> Public Property CancerTypeOfCancer As System.Int32
            <DataMember()> Public Property CancerDateDiagnosed As System.DateTime
            <DataMember()> Public Property CancerStageOfCancer As System.Int32
            <DataMember()> Public Property CancerScaleColonRectalCancer As System.Int32
            <DataMember()> Public Property CancerLevelMelanoma As System.Int32
            <DataMember()> Public Property CancerGradeProstateCancer As System.Int32
            <DataMember()> Public Property CancerEvidenceOfRecurringCancer As System.Boolean
            <DataMember()> Public Property CancerDateEvidence As System.DateTime
            <DataMember()> Public Property CancerLocationRecurringCancer As System.String
            <DataMember()> Public Property CancerDateInitiallyTreated As System.DateTime
            <DataMember()> Public Property CancerDateLastTreated As System.DateTime
            <DataMember()> Public Property CancerDateLastSeenByDoctor As System.DateTime
            <DataMember()> Public Property CancerGrowthMayBeMalignant As System.Boolean
            <DataMember()> Public Property CancerDetailsEvidence As System.String
            <DataMember()> Public Property CancerRemovedGrowth As System.Boolean
            <DataMember()> Public Property CancerDetailsInvestigations As System.String
            <DataMember()> Public Property CancerChemotherapyTreatmentFollowing As System.Boolean
            <DataMember()> Public Property CancerRadiotherapyTreatmentFollowing As System.Boolean
            <DataMember()> Public Property CancerMedicationTreatmentFollowing As System.Boolean
            <DataMember()> Public Property CancerOtherTreatmentFollowing As System.String
            <DataMember()> Public Property CancerStillFollowedUp As System.Boolean
            <DataMember()> Public Property CancerHowOften As System.String
            <DataMember()> Public Property CancerDateOfDischargedFollowUp As System.DateTime
            <DataMember()> Public Property CancerSurgeryTreatment As System.Boolean
            <DataMember()> Public Property CancerDateSurgeryTreatment As System.DateTime
            <DataMember()> Public Property CancerChemotherapyTreatment As System.Boolean
            <DataMember()> Public Property CancerDateChemotherapyTreatment As System.DateTime
            <DataMember()> Public Property CancerRadiationTreatment As System.Boolean
            <DataMember()> Public Property CancerDateRadiationTreatment As System.DateTime
            <DataMember()> Public Property CancerHormoneTreatment As System.Boolean
            <DataMember()> Public Property CancerDateHormoneTreatment As System.DateTime
            <DataMember()> Public Property CancerOtherTreatment As System.Boolean
            <DataMember()> Public Property CancerDateOtherTreatment As System.DateTime
            <DataMember()> Public Property CancerNameTreatment As System.String
            <DataMember()> Public Property CancerPrognosis As System.Boolean
            <DataMember()> Public Property CancerDetailsPrognosis As System.String
            <DataMember()> Public Property CancerChemotherapyCurrentlyTreatment As System.Boolean
            <DataMember()> Public Property CancerRadiationCurrentlyTreatment As System.Boolean
            <DataMember()> Public Property CancerHormoneCurrentlyTreatment As System.Boolean
            <DataMember()> Public Property CancerMedicationCurrentlyTreatment As System.Boolean
            <DataMember()> Public Property CancerOtherCurrentlyTreatment As System.String
            <DataMember()> Public Property CancerDetailsCurrentlyTreatment As System.String
            <DataMember()> Public Property CancerYesRestrictedLifeStyle As System.Boolean
            <DataMember()> Public Property CancerDetailsRestrictedLifeStyleDateFrom As System.DateTime
            <DataMember()> Public Property CancerDetailsRestrictedLifeStyleDateTo As System.DateTime
            <DataMember()> Public Property CancerDetailsRestrictedLifeStyleDetails As System.String
            <DataMember()> Public Property DetailsAbsensesFromWork_DetailsAbsensesFromWork As List(Of DetailsAbsensesFromWork_DetailsAbsensesFromWorkItem)
            <DataMember()> Public Property CancerDetailsSpecialistsPractitionerName As System.String
            <DataMember()> Public Property CancerDetailsSpecialistsPhonePractitioner As System.String
            <DataMember()> Public Property CancerDetailsSpecialistseMailPractitioner As System.String
            <DataMember()> Public Property CancerDetailsSpecialistsAddresPractitioner As System.String
            <DataMember()> Public Property DetailsOfMedicalPractitioners_DetailsOfMedicalPractitioners As List(Of DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem)
            <DataMember()> Public Property CancerAdditionalInformation As System.String
            <DataMember()> Public Property CancerDateReceived As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class DetailsAbsensesFromWork_DetailsAbsensesFromWorkItem

            <DataMember()> Public Property DateFrom As System.DateTime
            <DataMember()> Public Property DateTo As System.DateTime
            <DataMember()> Public Property Details As System.String
            <DataMember()> Public Property id As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class DetailsOfMedicalPractitioners_DetailsOfMedicalPractitionersItem

            <DataMember()> Public Property PractitionerName As System.String
            <DataMember()> Public Property PhonePractitioner As System.String
            <DataMember()> Public Property eMailPractitioner As System.String
            <DataMember()> Public Property AddresPractitioner As System.String
            <DataMember()> Public Property IdDetails As System.Int32

        End Class

        <Serializable()>
        Public Class HT5CancerQuestionnaireUWParameters
            Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of HT5CancerQuestionnaireUWParameters)

            Public Property Cancer As InMotionGIT.Questionnaires.Cancer
            Public Property uwcaseid As Int64
            Public Property uwreqid As Int64
            Public Property ClientName As String
            Public Property StatusCase As Int32
            Public Property StatusRequirement As Int32
            Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
            Public Property fromPanel As Boolean
            Public Property UsercodeFASI As Int32
            Public Property uwCaseIdInt64 As Int64
            Public Property IsAnonymous As Boolean
            Public Property caseLocked As Boolean
            Public Property ClientUser As InMotionGIT.Client.Entity.Contracts.Client

        End Class
#End Region

    End Class

End Namespace

