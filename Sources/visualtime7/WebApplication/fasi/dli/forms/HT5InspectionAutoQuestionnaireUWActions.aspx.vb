'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.1.220.1 at 2019/02/19 04:01:54  model release 2, Form Generator v1.0.34.17
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class HT5InspectionAutoQuestionnaireUWActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            Dim HT5InspectionAutoQuestionnaireUWParametersInstance As HT5InspectionAutoQuestionnaireUWParameters = Nothing

            Try
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                    
                    With instance

                    End With                
                    
                    HT5InspectionAutoQuestionnaireUWParametersInstance = EntryDataToClass(HT5InspectionAutoQuestionnaireUWParametersInstance, instance)
                    SetDefaultValuesFromQueryString(HT5InspectionAutoQuestionnaireUWParametersInstance)
                    
                    If fromid.IsNotEmpty Then
                        GetTransferParameters(HT5InspectionAutoQuestionnaireUWParametersInstance, fromid)
                        ValidateParametersInstance(HT5InspectionAutoQuestionnaireUWParametersInstance)
                    End If
                Else       
                    instance.InstanceFormId = id.IfEmpty(urlid)
                    HT5InspectionAutoQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
    
                    If IsNothing(HT5InspectionAutoQuestionnaireUWParametersInstance) then
                        HT5InspectionAutoQuestionnaireUWParametersInstance = EntryDataToClass(HT5InspectionAutoQuestionnaireUWParametersInstance, instance)
                        SetDefaultValuesFromQueryString(HT5InspectionAutoQuestionnaireUWParametersInstance)
                    End If
                End If

                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = String.Empty

                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    Form_Initialization(currentAction, HT5InspectionAutoQuestionnaireUWParametersInstance, resultData)
                Else
                    Form_Load(currentAction, HT5InspectionAutoQuestionnaireUWParametersInstance, resultData)
                End If


                instance = ClassToEntryData(instance, HT5InspectionAutoQuestionnaireUWParametersInstance) 
		        
                StoreFormInformation(HT5InspectionAutoQuestionnaireUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5InspectionAutoQuestionnaireUW", "Initialization", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
   
        <WebMethod(EnableSession:=True)>
        Public Shared Function submitClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5InspectionAutoQuestionnaireUWParametersInstance As HT5InspectionAutoQuestionnaireUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5InspectionAutoQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
    
                    If IsNothing(HT5InspectionAutoQuestionnaireUWParametersInstance) then
                        HT5InspectionAutoQuestionnaireUWParametersInstance = EntryDataToClass(HT5InspectionAutoQuestionnaireUWParametersInstance, instance)
                        SetDefaultValuesFromQueryString(HT5InspectionAutoQuestionnaireUWParametersInstance)
                    End If
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("submitClick")
                HT5InspectionAutoQuestionnaireUWParametersInstance = EntryDataToClass(HT5InspectionAutoQuestionnaireUWParametersInstance, instance)
                currentAction = SessionTrace("1. The message 'El reporte de inspec...' will displayed as 'Splash'")
                ParametersToDictionary(HT5InspectionAutoQuestionnaireUWParametersInstance, parametersDictionary)
                messageAction = "El reporte de inspección del vehículo será almacenado temporalmente. Recuerde que debe ser llenado para que la solicitud sea procesada. Muchas gracias."
                messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                resultData.AddNotifySplash(messageAction)

                instance = ClassToEntryData(instance, HT5InspectionAutoQuestionnaireUWParametersInstance)
                
                StoreFormInformation(HT5InspectionAutoQuestionnaireUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5InspectionAutoQuestionnaireUW", "submitClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function saveClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5InspectionAutoQuestionnaireUWParametersInstance As HT5InspectionAutoQuestionnaireUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5InspectionAutoQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
    
                    If IsNothing(HT5InspectionAutoQuestionnaireUWParametersInstance) then
                        HT5InspectionAutoQuestionnaireUWParametersInstance = EntryDataToClass(HT5InspectionAutoQuestionnaireUWParametersInstance, instance)
                        SetDefaultValuesFromQueryString(HT5InspectionAutoQuestionnaireUWParametersInstance)
                    End If
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                       instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                      .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                      .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                      .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("saveClick")
                HT5InspectionAutoQuestionnaireUWParametersInstance = EntryDataToClass(HT5InspectionAutoQuestionnaireUWParametersInstance, instance)
                currentAction = SessionTrace("1. HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = false...")
                currentAction = SessionTrace("1.1. HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = false...")

                HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = false

                currentAction = SessionTrace("2. If HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.EvidencePreviousCollisions = false Then")
                If HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.EvidencePreviousCollisions = false Then

                    currentAction = SessionTrace("3. HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Image1EvidencePreviousCollision = nothing...")
                    currentAction = SessionTrace("3.1. HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Image1EvidencePreviousCollision = nothing...")
                                    If IsNothing(HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto) Then
                    HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto = New InMotionGIT.Questionnaires.InspectionAuto
                End If

                    HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Image1EvidencePreviousCollision = nothing
                    currentAction = SessionTrace("3.2. HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Image2EvidencePreviousCollision = nothing...")
                                    If IsNothing(HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto) Then
                    HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto = New InMotionGIT.Questionnaires.InspectionAuto
                End If

                    HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Image2EvidencePreviousCollision = nothing
                    currentAction = SessionTrace("3.3. HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Image3EvidencePreviousCollision = nothing...")
                                    If IsNothing(HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto) Then
                    HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto = New InMotionGIT.Questionnaires.InspectionAuto
                End If

                    HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Image3EvidencePreviousCollision = nothing
                    currentAction = SessionTrace("3.4. HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Image4EvidencePreviousCollision = nothing...")
                                    If IsNothing(HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto) Then
                    HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto = New InMotionGIT.Questionnaires.InspectionAuto
                End If

                    HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Image4EvidencePreviousCollision = nothing

                    End If
                currentAction = SessionTrace("4. HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5InspectionAutoQuestionnaireUWParametersInstance.uwcaseid)...")
                currentAction = SessionTrace("4.1. HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5InspectionAutoQuestionnaireUWParametersInstance.uwcaseid)...")

                HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5InspectionAutoQuestionnaireUWParametersInstance.uwcaseid)

                currentAction = SessionTrace("5. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64)
                .Add("uwreqid", HT5InspectionAutoQuestionnaireUWParametersInstance.uwreqid)
                .Add("ClientName", HT5InspectionAutoQuestionnaireUWParametersInstance.ClientName)
                .Add("StatusCase", HT5InspectionAutoQuestionnaireUWParametersInstance.StatusCase)
                .Add("StatusRequirement", HT5InspectionAutoQuestionnaireUWParametersInstance.StatusRequirement)
                .Add("RiskInformation", HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation)
                .Add("Identifier", "InspAuto")
                .Add("context", formContext)
                .Add("caseLocked", HT5InspectionAutoQuestionnaireUWParametersInstance.caseLocked)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5InspectionAutoQuestionnaireUWParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                HT5InspectionAutoQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                HT5InspectionAutoQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
                HT5InspectionAutoQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                HT5InspectionAutoQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("6. If HT5InspectionAutoQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then")
                If HT5InspectionAutoQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then

                    currentAction = SessionTrace("7. The message 'El estado del report...' will displayed as 'Splash'")
                    ParametersToDictionary(HT5InspectionAutoQuestionnaireUWParametersInstance, parametersDictionary)
                    messageAction = "El estado del reporte no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros."
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifySplash(messageAction)
                    currentAction = SessionTrace("8. HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = true...")
                    currentAction = SessionTrace("8.1. HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = true...")

                    HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = true

                        End If
                currentAction = SessionTrace("9. If HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = false Then")
                If HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("10. If HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Chassis = HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation.AutomobileLineOfBusiness.Chassis AND HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.EngineSerialNumber = HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation.AutomobileLineOfBusiness.EngineSerialNumber Then")
                    If HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Chassis = HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation.AutomobileLineOfBusiness.Chassis AndAlso HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.EngineSerialNumber = HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation.AutomobileLineOfBusiness.EngineSerialNumber Then

                        currentAction = SessionTrace("11. HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.SerialsOK = True...")
                        currentAction = SessionTrace("11.1. HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.SerialsOK = True...")
                                        If IsNothing(HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto) Then
                    HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto = New InMotionGIT.Questionnaires.InspectionAuto
                End If

                        HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.SerialsOK = True

                                    Else
                        currentAction = SessionTrace("12. HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.SerialsOK = False...")
                        currentAction = SessionTrace("12.1. HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.SerialsOK = False...")
                                        If IsNothing(HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto) Then
                    HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto = New InMotionGIT.Questionnaires.InspectionAuto
                End If

                        HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.SerialsOK = False

                        currentAction = SessionTrace("13. The message 'Los seriales de moto...' will displayed as 'Popup'")
                        ParametersToDictionary(HT5InspectionAutoQuestionnaireUWParametersInstance, parametersDictionary)
                        messageAction = "Los seriales de motor y de chasis no coinciden con los seriales indicados en la solicitud."
                        messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                        resultData.AddNotifyPopup(messageAction)
                        currentAction = SessionTrace("14. HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = true...")
                        currentAction = SessionTrace("14.1. HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = true...")

                        HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = true

                                        End If
                                    End If
                currentAction = SessionTrace("15. If HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = false Then")
                If HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("16. HT5InspectionAutoQuestionnaireUWParametersInstance.KilometrajeMaximo = HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation.Automobil...")
                    currentAction = SessionTrace("16.1. HT5InspectionAutoQuestionnaireUWParametersInstance.KilometrajeMaximo = HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation.Automobil...")

                    HT5InspectionAutoQuestionnaireUWParametersInstance.KilometrajeMaximo = HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation.AutomobileLineOfBusiness.AutomobileInformation.Mileage+100

                    currentAction = SessionTrace("17. If HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Mileage < HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation.AutomobileLineOfBusiness.AutomobileInformation.Mileage OR HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Mileage > HT5InspectionAutoQuestionnaireUWParametersInstance.KilometrajeMaximo Then")
                    If HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Mileage < HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation.AutomobileLineOfBusiness.AutomobileInformation.Mileage OrElse HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.Mileage > HT5InspectionAutoQuestionnaireUWParametersInstance.KilometrajeMaximo Then

                        currentAction = SessionTrace("18. The message 'El kilometraje no se...' will displayed as 'Popup'")
                        ParametersToDictionary(HT5InspectionAutoQuestionnaireUWParametersInstance, parametersDictionary)
                        messageAction = "El kilometraje no se corresponde con el indicado en la solicitud de la cotización"
                        messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                        resultData.AddNotifyPopup(messageAction)
                        currentAction = SessionTrace("19. HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = true...")
                        currentAction = SessionTrace("19.1. HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = true...")

                        HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = true

                                                End If
                                            End If
                currentAction = SessionTrace("20. If HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = false Then")
                If HT5InspectionAutoQuestionnaireUWParametersInstance.ErrorsFound = false Then

                    currentAction = SessionTrace("21. Call Shared Function 'User Profile' without parameters")
                    Dim _ClientUser_b13b68e9747b466897bb4c319a74abec As InMotionGIT.Client.Entity.Contracts.Client
                    

      If Not IsNothing(UserInfo) AndAlso Not IsNothing(UserInfo.User) then
         _ClientUser_b13b68e9747b466897bb4c319a74abec = New InMotionGIT.Client.Entity.Contracts.Client

         With _ClientUser_b13b68e9747b466897bb4c319a74abec
             .ClientID = UserInfo.User.ClientID
             .FirstName = UserInfo.User.FirstName
             .LastName = UserInfo.User.LastName
             .LastName2 = UserInfo.User.SecondLastName
             .BirthDate = UserInfo.User.DateOfBirth
             .LegalName = UserInfo.User.CompanyName
             .GenderEnum = IIf(UserInfo.User.Gender = "Male", InMotionGIT.Common.Contracts.Enumerations.EnumGender.Male, InMotionGIT.Common.Contracts.Enumerations.EnumGender.Female)
             .eMailAddressDefault = UserInfo.User.Email
             .CompleteClientName = .CompleteClientNameValid
         End With

	isNullResult = (IsNothing(_ClientUser_b13b68e9747b466897bb4c319a74abec))
	isFoundData  = Not isNullResult
      End If
    
                    HT5InspectionAutoQuestionnaireUWParametersInstance.ClientUser = _ClientUser_b13b68e9747b466897bb4c319a74abec

                    currentAction = SessionTrace("22. HT5InspectionAutoQuestionnaireUWParametersInstance.UsercodeFASI = UserInfo.UserId...")
                    currentAction = SessionTrace("22.1. HT5InspectionAutoQuestionnaireUWParametersInstance.UsercodeFASI = UserInfo.UserId...")

                    HT5InspectionAutoQuestionnaireUWParametersInstance.UsercodeFASI = UserInfo.UserId
                    currentAction = SessionTrace("22.2. HT5InspectionAutoQuestionnaireUWParametersInstance.IsAnonymous = UserInfo.IsAnonymous()...")

                    HT5InspectionAutoQuestionnaireUWParametersInstance.IsAnonymous = UserInfo.IsAnonymous()

                    currentAction = SessionTrace("23. If HT5InspectionAutoQuestionnaireUWParametersInstance.IsAnonymous = true Then")
                    If HT5InspectionAutoQuestionnaireUWParametersInstance.IsAnonymous = true Then

                        currentAction = SessionTrace("24. HT5InspectionAutoQuestionnaireUWParametersInstance.UsercodeFASI = 9998...")
                        currentAction = SessionTrace("24.1. HT5InspectionAutoQuestionnaireUWParametersInstance.UsercodeFASI = 9998...")

                        HT5InspectionAutoQuestionnaireUWParametersInstance.UsercodeFASI = 9998

                                                        End If
                    currentAction = SessionTrace("25. If HT5InspectionAutoQuestionnaireUWParametersInstance.caseLocked = true Then")
                    If HT5InspectionAutoQuestionnaireUWParametersInstance.caseLocked = true Then

                        currentAction = SessionTrace("27. Call 'Main Process Questionnaire Inspection Auto - ApplyRule' workflow in Synchronous mode with tracking")
                        WorkflowInArguments = New Dictionary(Of String, Object)

                        With WorkflowInArguments
                        .Add("uwcaseid", HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64)
                        .Add("uwreqid", HT5InspectionAutoQuestionnaireUWParametersInstance.uwreqid)
                        .Add("InspectionAuto", HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto)
                        .Add("context", formContext)
                        .Add("UsercodeFASI", HT5InspectionAutoQuestionnaireUWParametersInstance.UsercodeFASI)
                        .Add("caseLocked", HT5InspectionAutoQuestionnaireUWParametersInstance.caseLocked)
                        End With

                        WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QApplyRulesInspectionAutoUW", "d3846af5-d41a-453c-8099-30ecb21e95ad", 4, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5InspectionAutoQuestionnaireUWParametersInstance.InternalId)

                        currentAction += "'Mapping Outputs'"
                        HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                        HT5InspectionAutoQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                        HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto = WorkflowOutArguments("InspectionAuto")

                        currentAction = SessionTrace("28. Url: '#setting.Url.WebApplication#/Underwriting/UnderwritingPanel.aspx'")
                            
                With resultData
                    .AddRedirect(String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") +"/Underwriting/UnderwritingPanel.aspx"+"?closeWindow={0}","1"))
                End With
                                                            Else
                        currentAction = SessionTrace("29. The message 'El reporte de inspec...' will displayed as 'Splash'")
                        ParametersToDictionary(HT5InspectionAutoQuestionnaireUWParametersInstance, parametersDictionary)
                        messageAction = "El reporte de inspección será procesado. Muchas gracias."
                        messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                        resultData.AddNotifySplash(messageAction)
                        currentAction = SessionTrace("31. Call 'Main Process Questionnaire Inspection Auto - ApplyRule' workflow in Asynchronous mode with tracking")
                        WorkflowInArguments = New Dictionary(Of String, Object)

                        With WorkflowInArguments
                        .Add("uwcaseid", HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64)
                        .Add("uwreqid", HT5InspectionAutoQuestionnaireUWParametersInstance.uwreqid)
                        .Add("InspectionAuto", HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto)
                        .Add("context", formContext)
                        .Add("UsercodeFASI", HT5InspectionAutoQuestionnaireUWParametersInstance.UsercodeFASI)
                        .Add("caseLocked", HT5InspectionAutoQuestionnaireUWParametersInstance.caseLocked)
                        End With

                        WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QApplyRulesInspectionAutoUW", "d3846af5-d41a-453c-8099-30ecb21e95ad", 4, WorkflowInArguments, True, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5InspectionAutoQuestionnaireUWParametersInstance.InternalId)


                                                                End If
                                                            End If

                instance = ClassToEntryData(instance, HT5InspectionAutoQuestionnaireUWParametersInstance)
                
                StoreFormInformation(HT5InspectionAutoQuestionnaireUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5InspectionAutoQuestionnaireUW", "saveClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


#End Region

#Region "Form Actions"

        Private Shared Sub Form_Initialization(ByRef currentAction As String, ByRef HT5InspectionAutoQuestionnaireUWParametersInstance As HT5InspectionAutoQuestionnaireUWParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                        HT5InspectionAutoQuestionnaireUWParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                                     .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                                     .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                                     .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Initialization")

            currentAction = SessionTrace("1. HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5InspectionAutoQuestionnaireUWParametersInstance.uwcaseid)...")
            currentAction = SessionTrace("1.1. HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5InspectionAutoQuestionnaireUWParametersInstance.uwcaseid)...")

            HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5InspectionAutoQuestionnaireUWParametersInstance.uwcaseid)

            currentAction = SessionTrace("2. If HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 <> 0 Then")
            If HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 <> 0 Then

                currentAction = SessionTrace("3. HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.DateReceived = Today...")
                currentAction = SessionTrace("3.1. HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.DateReceived = Today...")
                                If IsNothing(HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto) Then
                    HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto = New InMotionGIT.Questionnaires.InspectionAuto
                End If

                HT5InspectionAutoQuestionnaireUWParametersInstance.InspectionAuto.DateReceived = Today

                currentAction = SessionTrace("4. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64)
                .Add("uwreqid", HT5InspectionAutoQuestionnaireUWParametersInstance.uwreqid)
                .Add("ClientName", HT5InspectionAutoQuestionnaireUWParametersInstance.ClientName)
                .Add("StatusCase", HT5InspectionAutoQuestionnaireUWParametersInstance.StatusCase)
                .Add("StatusRequirement", HT5InspectionAutoQuestionnaireUWParametersInstance.StatusRequirement)
                .Add("RiskInformation", HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation)
                .Add("Identifier", "InspAuto")
                .Add("context", formContext)
                .Add("caseLocked", HT5InspectionAutoQuestionnaireUWParametersInstance.caseLocked)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5InspectionAutoQuestionnaireUWParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                HT5InspectionAutoQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                HT5InspectionAutoQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
                HT5InspectionAutoQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                HT5InspectionAutoQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("5. If HT5InspectionAutoQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then")
                If HT5InspectionAutoQuestionnaireUWParametersInstance.StatusRequirement <> 1 Then

                    currentAction = SessionTrace("6. The message 'El estado del requer...' will displayed as 'Splash'")
                    ParametersToDictionary(HT5InspectionAutoQuestionnaireUWParametersInstance, parametersDictionary)
                    messageAction = "El estado del requerimiento no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros."
                    messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                    resultData.AddNotifySplash(messageAction)
                        End If
                    End If

        End Sub
	
        Private Shared Sub Form_Load(ByRef currentAction As String, ByRef HT5InspectionAutoQuestionnaireUWParametersInstance As HT5InspectionAutoQuestionnaireUWParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                        HT5InspectionAutoQuestionnaireUWParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                                     .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                                     .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                                     .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Load")

            currentAction = SessionTrace("1. HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5InspectionAutoQuestionnaireUWParametersInstance.uwcaseid)...")
            currentAction = SessionTrace("1.1. HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5InspectionAutoQuestionnaireUWParametersInstance.uwcaseid)...")

            HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 = convert.ToInt64(HT5InspectionAutoQuestionnaireUWParametersInstance.uwcaseid)

            currentAction = SessionTrace("2. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
            WorkflowInArguments = New Dictionary(Of String, Object)

            With WorkflowInArguments
            .Add("uwcaseid", HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64)
            .Add("uwreqid", HT5InspectionAutoQuestionnaireUWParametersInstance.uwreqid)
            .Add("ClientName", HT5InspectionAutoQuestionnaireUWParametersInstance.ClientName)
            .Add("StatusCase", HT5InspectionAutoQuestionnaireUWParametersInstance.StatusCase)
            .Add("StatusRequirement", HT5InspectionAutoQuestionnaireUWParametersInstance.StatusRequirement)
            .Add("RiskInformation", HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation)
            .Add("Identifier", "InspAuto")
            .Add("context", formContext)
            .Add("caseLocked", HT5InspectionAutoQuestionnaireUWParametersInstance.caseLocked)
            End With

            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, HT5InspectionAutoQuestionnaireUWParametersInstance.InternalId)

            currentAction += "'Mapping Outputs'"
            HT5InspectionAutoQuestionnaireUWParametersInstance.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
            HT5InspectionAutoQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
            HT5InspectionAutoQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
            HT5InspectionAutoQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
            HT5InspectionAutoQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
            HT5InspectionAutoQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

            currentAction = SessionTrace("3. If HT5InspectionAutoQuestionnaireUWParametersInstance.fromPanel = true Then")
            If HT5InspectionAutoQuestionnaireUWParametersInstance.fromPanel = true Then

                currentAction = SessionTrace("4. zone9.Enabled = false, Firma.Visible = false")
                currentAction = SessionTrace("4.1. zone9.Enabled = false...")
                resultData.AddControlBehavior("zone9", "disabled")
                currentAction = SessionTrace("4.2. Firma.Visible = false...")
                resultData.AddControlBehavior("Firma", "hide")

                End If

        End Sub
#End Region
#Region "Utilities"

        Private Shared Sub ParametersToDictionary(formData As HT5InspectionAutoQuestionnaireUWParameters, ByRef target As Dictionary(Of String, Object))
            If IsNothing(target) Then
                target = New Dictionary(Of String, Object)

                target.Add("uwcaseid", formData.uwcaseid)
                target.Add("uwreqid", formData.uwreqid)
                target.Add("ClientName", formData.ClientName)
                target.Add("StatusCase", formData.StatusCase)
                target.Add("StatusRequirement", formData.StatusRequirement)
                target.Add("InspectionAuto", formData.InspectionAuto)
                target.Add("RiskInformation", formData.RiskInformation)
                target.Add("ErrorsFound", formData.ErrorsFound)
                target.Add("KilometrajeMaximo", formData.KilometrajeMaximo)
                target.Add("fromPanel", formData.fromPanel)
                target.Add("caseLocked", formData.caseLocked)
                target.Add("IsAnonymous", formData.IsAnonymous)
                target.Add("uwCaseIdInt64", formData.uwCaseIdInt64)
                target.Add("UsercodeFASI", formData.UsercodeFASI)
                target.Add("ClientUser", formData.ClientUser)
            Else
                target("uwcaseid") = formData.uwcaseid
                target("uwreqid") = formData.uwreqid
                target("ClientName") = formData.ClientName
                target("StatusCase") = formData.StatusCase
                target("StatusRequirement") = formData.StatusRequirement
                target("InspectionAuto") = formData.InspectionAuto
                target("RiskInformation") = formData.RiskInformation
                target("ErrorsFound") = formData.ErrorsFound
                target("KilometrajeMaximo") = formData.KilometrajeMaximo
                target("fromPanel") = formData.fromPanel
                target("caseLocked") = formData.caseLocked
                target("IsAnonymous") = formData.IsAnonymous
                target("uwCaseIdInt64") = formData.uwCaseIdInt64
                target("UsercodeFASI") = formData.UsercodeFASI
                target("ClientUser") = formData.ClientUser
            End If
        End Sub

        Private Shared Sub GetTransferParameters(parametersData As HT5InspectionAutoQuestionnaireUWParameters, fromid As String)
            Dim fromDocumentCache As Object = Nothing

            If Not String.IsNullOrEmpty(fromid) Then
                fromDocumentCache = HttpContext.Current.Session(fromid)
                HttpContext.Current.Session.Remove(fromid)

            Else
                fromDocumentCache = HttpContext.Current.Session(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove("fromid")
            End If

            If Not IsNothing(fromDocumentCache) Then
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientName", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusCase", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRequirement", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InspectionAuto", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ErrorsFound", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("KilometrajeMaximo", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("fromPanel", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("caseLocked", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsAnonymous", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwCaseIdInt64", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeFASI", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientUser", fromDocumentCache, parametersData)
            End If
        End Sub

        Private Shared Function SessionTrace(message As String) As String

            If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                Dim tracelog As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath")))

                tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = tracelog
            End If

            Return message
        End Function

#End Region


#Region "Storage Database Methods"

      Private Shared Sub StoreFormInformation(formData As HT5InspectionAutoQuestionnaireUWParameters)
            If Not IsNothing(formData) Then
                Dim foundData As Boolean

                If formData.InternalId.IsEmpty Then
                    formData.InternalId = Guid.NewGuid.ToString
                Else
                    With New DataManagerFactory("SELECT COUNT(FormId) FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                 "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                        .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                        foundData = .QueryExecuteScalarToInteger > 0
                    End With
                End If

                If foundData Then
                    UpdateStorageData(formData)
                Else
                    InsertStorageData(formData)
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso
                    HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                    HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.HT5InspectionAutoQuestionnaireUW", formData.InternalId)) = formData
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track.Parameters")) AndAlso
                    HttpContext.Current.Session("Form.Track.Parameters").ToString.ToLower = "true" Then

                    If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                        InMotionGIT.Common.Helpers.FileHandler.SaveContent(String.Format(CultureInfo.InvariantCulture, 
                                                                                         "{0}\{1}.HT5InspectionAutoQuestionnaireUW.txt", ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), 
                                                                                         HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", 
                                                                                                                                   IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))))
                    End If

                    InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of HT5InspectionAutoQuestionnaireUWParameters)(formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.HT5InspectionAutoQuestionnaireUW.xml", 
                                                                                                                        ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
                End If
            End If
        End Sub

        Private Shared Function RetrieveFormInformationFromDatabase(instanceFormId As String) As HT5InspectionAutoQuestionnaireUWParameters
            Dim result As HT5InspectionAutoQuestionnaireUWParameters = Nothing
            Dim records As DataTable = Nothing

            With New DataManagerFactory("SELECT Content FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, instanceFormId)
                records = .QueryExecuteToTable(True)
            End With

            If records.Rows.Count > 0 Then
                result = Serialize.Deserialize(Of HT5InspectionAutoQuestionnaireUWParameters)(records.FirstRow.Item("Content"))
            End If

            Return result
        End Function

        Private Shared Sub InsertStorageData(formData As HT5InspectionAutoQuestionnaireUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("INSERT INTO FrontOffice.DocumentCache (FormId, ModelId, UserId, Page, Content, CreationDate, UpdateDate) VALUES(@:FormId, @:ModelId, @:UserId, @:Page, @:Content, @:CreationDate, @:UpdateDate)",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "4a3879f1-8ca2-46a8-8108-86f183c926bd")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HT5InspectionAutoQuestionnaireUWParameters)(formData))
            .AddParameter("CreationDate", DbType.DateTime, 20, False, Now)
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)

                .CommandExecute()
            End With
        End Sub

        Private Shared Sub UpdateStorageData(formData As HT5InspectionAutoQuestionnaireUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("UPDATE FrontOffice.DocumentCache SET ModelId = @:ModelId, UserId = @:UserId, Page = @:Page, Content = @:Content, UpdateDate = @:UpdateDate WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "4a3879f1-8ca2-46a8-8108-86f183c926bd")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, HttpContext.Current.Request.UrlReferrer.AbsolutePath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HT5InspectionAutoQuestionnaireUWParameters)(formData))
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)

                .CommandExecute()
            End With
        End Sub

#End Region


#Region "Contracts Mappers"

        Private Shared Function EntryDataToClass(parametersData As HT5InspectionAutoQuestionnaireUWParameters, formData As EntryData) As HT5InspectionAutoQuestionnaireUWParameters
            If IsNothing(parametersData) Then
                parametersData = New HT5InspectionAutoQuestionnaireUWParameters
            End If

            If IsNothing(parametersData.InspectionAuto) Then
                parametersData.InspectionAuto = New InMotionGIT.Questionnaires.InspectionAuto
            End If

            With parametersData
                .InternalId = formData.InstanceFormId
                .InspectionAuto.Mileage = formData.InspectionAutoMileage
                .InspectionAuto.CleanCarIndicator = formData.InspectionAutoCleanCarIndicator
                .InspectionAuto.AirConditionOk = formData.InspectionAutoAirConditionOk
                .InspectionAuto.AirConditionComments = formData.InspectionAutoAirConditionComments
                .InspectionAuto.EngineOk = formData.InspectionAutoEngineOk
                .InspectionAuto.EngineComments = formData.InspectionAutoEngineComments
                .InspectionAuto.LightingSystemOK = formData.InspectionAutoLightingSystemOK
                .InspectionAuto.LightingSystemComments = formData.InspectionAutoLightingSystemComments
                .InspectionAuto.RubbersOk = formData.InspectionAutoRubbersOk
                .InspectionAuto.RubbersComments = formData.InspectionAutoRubbersComments
                .InspectionAuto.EngineSerialNumber = formData.InspectionAutoEngineSerialNumber
                .InspectionAuto.Chassis = formData.InspectionAutoChassis
                .InspectionAuto.SerialsOK = formData.InspectionAutoSerialsOK
                .InspectionAuto.SerialsComments = formData.InspectionAutoSerialsComments
                .InspectionAuto.Alarm = formData.InspectionAutoAlarm
                .InspectionAuto.LockingBar = formData.InspectionAutoLockingBar
                .InspectionAuto.SatelliteTrackingSystem = formData.InspectionAutoSatelliteTrackingSystem
                .InspectionAuto.MulTLock = formData.InspectionAutoMulTLock
                .InspectionAuto.Trabegas = formData.InspectionAutoTrabegas
                .InspectionAuto.ArmoredVehicle = formData.InspectionAutoArmoredVehicle
                .InspectionAuto.ImageFrontPlace = formData.InspectionAutoImageFrontPlace
                .InspectionAuto.ImageBackPlace = formData.InspectionAutoImageBackPlace
                .InspectionAuto.ImageRightSidePlace = formData.InspectionAutoImageRightSidePlace
                .InspectionAuto.ImageLeftSidePlace = formData.InspectionAutoImageLeftSidePlace
                .InspectionAuto.EvidencePreviousCollisions = formData.InspectionAutoEvidencePreviousCollisions
                .InspectionAuto.Image1EvidencePreviousCollision = formData.InspectionAutoImage1EvidencePreviousCollision
                .InspectionAuto.Image2EvidencePreviousCollision = formData.InspectionAutoImage2EvidencePreviousCollision
                .InspectionAuto.Image3EvidencePreviousCollision = formData.InspectionAutoImage3EvidencePreviousCollision
                .InspectionAuto.Image4EvidencePreviousCollision = formData.InspectionAutoImage4EvidencePreviousCollision
                .InspectionAuto.GeneralPoints = formData.InspectionAutoGeneralPoints
                .InspectionAuto.GeneralComments = formData.InspectionAutoGeneralComments
                .InspectionAuto.InspectionDate = formData.InspectionAutoInspectionDate
                .InspectionAuto.InspectionTime = formData.InspectionAutoInspectionTime
                .InspectionAuto.InspectionPlace = formData.InspectionAutoInspectionPlace
                .InspectionAuto.DateReceived = formData.InspectionAutoDateReceived
            End With

            Return parametersData
        End Function

        Private Shared Function ClassToEntryData(formData As EntryData, parametersData As HT5InspectionAutoQuestionnaireUWParameters) As EntryData
            formData = New EntryData

            With formData
                .InstanceFormId = parametersData.InternalId
                .ClientName = parametersData.ClientName
                .uwcaseid = parametersData.uwcaseid
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoMileage = parametersData.InspectionAuto.Mileage
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoCleanCarIndicator = parametersData.InspectionAuto.CleanCarIndicator
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoAirConditionOk = parametersData.InspectionAuto.AirConditionOk
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoAirConditionComments = parametersData.InspectionAuto.AirConditionComments
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoEngineOk = parametersData.InspectionAuto.EngineOk
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoEngineComments = parametersData.InspectionAuto.EngineComments
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoLightingSystemOK = parametersData.InspectionAuto.LightingSystemOK
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoLightingSystemComments = parametersData.InspectionAuto.LightingSystemComments
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoRubbersOk = parametersData.InspectionAuto.RubbersOk
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoRubbersComments = parametersData.InspectionAuto.RubbersComments
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoEngineSerialNumber = parametersData.InspectionAuto.EngineSerialNumber
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoChassis = parametersData.InspectionAuto.Chassis
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoSerialsOK = parametersData.InspectionAuto.SerialsOK
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoSerialsComments = parametersData.InspectionAuto.SerialsComments
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoAlarm = parametersData.InspectionAuto.Alarm
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoLockingBar = parametersData.InspectionAuto.LockingBar
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoSatelliteTrackingSystem = parametersData.InspectionAuto.SatelliteTrackingSystem
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoMulTLock = parametersData.InspectionAuto.MulTLock
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoTrabegas = parametersData.InspectionAuto.Trabegas
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoArmoredVehicle = parametersData.InspectionAuto.ArmoredVehicle
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoImageFrontPlace = parametersData.InspectionAuto.ImageFrontPlace
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoImageBackPlace = parametersData.InspectionAuto.ImageBackPlace
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoImageRightSidePlace = parametersData.InspectionAuto.ImageRightSidePlace
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoImageLeftSidePlace = parametersData.InspectionAuto.ImageLeftSidePlace
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoEvidencePreviousCollisions = parametersData.InspectionAuto.EvidencePreviousCollisions
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoImage1EvidencePreviousCollision = parametersData.InspectionAuto.Image1EvidencePreviousCollision
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoImage2EvidencePreviousCollision = parametersData.InspectionAuto.Image2EvidencePreviousCollision
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoImage3EvidencePreviousCollision = parametersData.InspectionAuto.Image3EvidencePreviousCollision
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoImage4EvidencePreviousCollision = parametersData.InspectionAuto.Image4EvidencePreviousCollision
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoGeneralPoints = parametersData.InspectionAuto.GeneralPoints
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoGeneralComments = parametersData.InspectionAuto.GeneralComments
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoInspectionDate = parametersData.InspectionAuto.InspectionDate
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoInspectionTime = parametersData.InspectionAuto.InspectionTime
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoInspectionPlace = parametersData.InspectionAuto.InspectionPlace
                End If
                If Not IsNothing(parametersData.InspectionAuto) Then
                    .InspectionAutoDateReceived = parametersData.InspectionAuto.DateReceived
                End If
            End With

            Return formData
        End Function

#End Region

#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As HT5InspectionAutoQuestionnaireUWParameters)
            If HttpContext.Current.Request.QueryString("uwcaseid").IsNotEmpty Then
                formData.uwcaseid = HttpContext.Current.Request.QueryString("uwcaseid")
            End If
            If HttpContext.Current.Request.QueryString("uwreqid").IsNotEmpty Then
                formData.uwreqid = HttpContext.Current.Request.QueryString("uwreqid")
            End If
            If HttpContext.Current.Request.QueryString("ClientName").IsNotEmpty Then
                formData.ClientName = HttpContext.Current.Request.QueryString("ClientName")
            End If
            If HttpContext.Current.Request.QueryString("StatusCase").IsNotEmpty Then
                formData.StatusCase = HttpContext.Current.Request.QueryString("StatusCase")
            End If
            If HttpContext.Current.Request.QueryString("StatusRequirement").IsNotEmpty Then
                formData.StatusRequirement = HttpContext.Current.Request.QueryString("StatusRequirement")
            End If
            If HttpContext.Current.Request.QueryString("ErrorsFound").IsNotEmpty Then
                formData.ErrorsFound = HttpContext.Current.Request.QueryString("ErrorsFound")
            End If
            If HttpContext.Current.Request.QueryString("KilometrajeMaximo").IsNotEmpty Then
                formData.KilometrajeMaximo = HttpContext.Current.Request.QueryString("KilometrajeMaximo")
            End If
            If HttpContext.Current.Request.QueryString("fromPanel").IsNotEmpty Then
                formData.fromPanel = HttpContext.Current.Request.QueryString("fromPanel")
            End If
            If HttpContext.Current.Request.QueryString("caseLocked").IsNotEmpty Then
                formData.caseLocked = HttpContext.Current.Request.QueryString("caseLocked")
            End If
            If HttpContext.Current.Request.QueryString("IsAnonymous").IsNotEmpty Then
                formData.IsAnonymous = HttpContext.Current.Request.QueryString("IsAnonymous")
            End If
            If HttpContext.Current.Request.QueryString("uwCaseIdInt64").IsNotEmpty Then
                formData.uwCaseIdInt64 = HttpContext.Current.Request.QueryString("uwCaseIdInt64")
            End If
            If HttpContext.Current.Request.QueryString("UsercodeFASI").IsNotEmpty Then
                formData.UsercodeFASI = HttpContext.Current.Request.QueryString("UsercodeFASI")
            End If
        End Sub	

        Private Shared Sub ValidateParametersInstance(ByRef formData As HT5InspectionAutoQuestionnaireUWParameters)
            If IsNothing(formData.InspectionAuto) Then
                formData.InspectionAuto = New InMotionGIT.Questionnaires.InspectionAuto
            End If

        End Sub

#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property ClientName As String
            <DataMember()> Public Property uwcaseid As Int64
            <DataMember()> Public Property InspectionAutoMileage As System.Int32
            <DataMember()> Public Property InspectionAutoCleanCarIndicator As System.Boolean
            <DataMember()> Public Property InspectionAutoAirConditionOk As System.Boolean
            <DataMember()> Public Property InspectionAutoAirConditionComments As System.String
            <DataMember()> Public Property InspectionAutoEngineOk As System.Boolean
            <DataMember()> Public Property InspectionAutoEngineComments As System.String
            <DataMember()> Public Property InspectionAutoLightingSystemOK As System.Boolean
            <DataMember()> Public Property InspectionAutoLightingSystemComments As System.String
            <DataMember()> Public Property InspectionAutoRubbersOk As System.Boolean
            <DataMember()> Public Property InspectionAutoRubbersComments As System.String
            <DataMember()> Public Property InspectionAutoEngineSerialNumber As System.String
            <DataMember()> Public Property InspectionAutoChassis As System.String
            <DataMember()> Public Property InspectionAutoSerialsOK As System.Boolean
            <DataMember()> Public Property InspectionAutoSerialsComments As System.String
            <DataMember()> Public Property InspectionAutoAlarm As System.Boolean
            <DataMember()> Public Property InspectionAutoLockingBar As System.Boolean
            <DataMember()> Public Property InspectionAutoSatelliteTrackingSystem As System.Boolean
            <DataMember()> Public Property InspectionAutoMulTLock As System.Boolean
            <DataMember()> Public Property InspectionAutoTrabegas As System.Boolean
            <DataMember()> Public Property InspectionAutoArmoredVehicle As System.Boolean
            <DataMember()> Public Property InspectionAutoImageFrontPlace As System.String
            <DataMember()> Public Property InspectionAutoImageBackPlace As System.String
            <DataMember()> Public Property InspectionAutoImageRightSidePlace As System.String
            <DataMember()> Public Property InspectionAutoImageLeftSidePlace As System.String
            <DataMember()> Public Property InspectionAutoEvidencePreviousCollisions As System.Boolean
            <DataMember()> Public Property InspectionAutoImage1EvidencePreviousCollision As System.String
            <DataMember()> Public Property InspectionAutoImage2EvidencePreviousCollision As System.String
            <DataMember()> Public Property InspectionAutoImage3EvidencePreviousCollision As System.String
            <DataMember()> Public Property InspectionAutoImage4EvidencePreviousCollision As System.String
            <DataMember()> Public Property InspectionAutoGeneralPoints As System.Int32
            <DataMember()> Public Property InspectionAutoGeneralComments As System.String
            <DataMember()> Public Property InspectionAutoInspectionDate As System.DateTime
            <DataMember()> Public Property InspectionAutoInspectionTime As System.String
            <DataMember()> Public Property InspectionAutoInspectionPlace As System.String
            <DataMember()> Public Property InspectionAutoDateReceived As System.DateTime

        End Class

        <Serializable()>
        Public Class HT5InspectionAutoQuestionnaireUWParameters
            Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of HT5InspectionAutoQuestionnaireUWParameters)

            Public Property uwcaseid As Int64
            Public Property uwreqid As Int64
            Public Property ClientName As String
            Public Property StatusCase As Int32
            Public Property StatusRequirement As Int32
            Public Property InspectionAuto As InMotionGIT.Questionnaires.InspectionAuto
            Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
            Public Property ErrorsFound As Boolean
            Public Property KilometrajeMaximo As Int32
            Public Property fromPanel As Boolean
            Public Property caseLocked As Boolean
            Public Property IsAnonymous As Boolean
            Public Property uwCaseIdInt64 As Int64
            Public Property UsercodeFASI As Int32
            Public Property ClientUser As InMotionGIT.Client.Entity.Contracts.Client

        End Class
#End Region

    End Class

End Namespace