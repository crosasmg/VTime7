'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.1.212.1 at 2018/11/08 02:25:17 p.m. model release 1, Form Generator v1.0.33.3
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------

#Region "using"
Imports System
Imports System.Web
Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services


Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class HT5CounterGuarantorQuestionnaireUWActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            Dim HT5CounterGuarantorQuestionnaireUWParametersInstance As HT5CounterGuarantorQuestionnaireUWParameters = Nothing

            Try
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                    
                    With instance

                    End With                
                    
                    HT5CounterGuarantorQuestionnaireUWParametersInstance = EntryDataToClass(HT5CounterGuarantorQuestionnaireUWParametersInstance, instance)
                    SetDefaultValuesFromQueryString(HT5CounterGuarantorQuestionnaireUWParametersInstance)
                    
                    If fromid.IsNotEmpty Then
                        GetTransferParameters(HT5CounterGuarantorQuestionnaireUWParametersInstance, fromid)
                    End If
                Else          
                    instance.InstanceFormId = id.IfEmpty(urlid)
                    HT5CounterGuarantorQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                End If

                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = String.Empty

                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    Form_Initialization(currentAction, HT5CounterGuarantorQuestionnaireUWParametersInstance, resultData)
                Else
                    Form_Load(currentAction, HT5CounterGuarantorQuestionnaireUWParametersInstance, resultData)
                End If


                instance = ClassToEntryData(instance, HT5CounterGuarantorQuestionnaireUWParametersInstance) 
		        
                StoreFormInformation(HT5CounterGuarantorQuestionnaireUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CounterGuarantorQuestionnaireUW", "Initialization", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
   
        <WebMethod(EnableSession:=True)>
        Public Shared Function saveClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5CounterGuarantorQuestionnaireUWParametersInstance As HT5CounterGuarantorQuestionnaireUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5CounterGuarantorQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("saveClick")
                HT5CounterGuarantorQuestionnaireUWParametersInstance = EntryDataToClass(HT5CounterGuarantorQuestionnaireUWParametersInstance, instance)
                currentAction = SessionTrace("1. The message 'El cuestionario será...' will displayed as 'Splash'")
                ParametersToDictionary(HT5CounterGuarantorQuestionnaireUWParametersInstance, parametersDictionary)
                messageAction = "El cuestionario será almacenado temporalmente. Recuerde que debe ser llenado para que su solicitud sea procesada. Muchas gracias."
                messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                resultData.AddNotifySplash(messageAction)

                instance = ClassToEntryData(instance, HT5CounterGuarantorQuestionnaireUWParametersInstance)
                
                StoreFormInformation(HT5CounterGuarantorQuestionnaireUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CounterGuarantorQuestionnaireUW", "saveClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod(EnableSession:=True)>
        Public Shared Function submitClick(instance As EntryData) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim HT5CounterGuarantorQuestionnaireUWParametersInstance As HT5CounterGuarantorQuestionnaireUWParameters = Nothing
            Dim UserInfo As InMotionGIT.Membership.Providers.MemberContext = Nothing
            Dim formContext As InMotionGIT.Common.Contracts.Context = Nothing
            Dim selectDataTableItem As DataTable = Nothing
            Dim currentAction As String = String.Empty
            Dim messageAction As String = String.Empty
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            Try
                HT5CounterGuarantorQuestionnaireUWParametersInstance = RetrieveFormInformationFromDatabase(instance.InstanceFormId)
                UserInfo = New InMotionGIT.Membership.Providers.MemberContext
                formContext = New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, instance.InstanceFormId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
                currentAction = SessionTrace("submitClick")
                HT5CounterGuarantorQuestionnaireUWParametersInstance = EntryDataToClass(HT5CounterGuarantorQuestionnaireUWParametersInstance, instance)
                currentAction = SessionTrace("1. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", HT5CounterGuarantorQuestionnaireUWParametersInstance.uwcaseid)
                .Add("uwreqid", HT5CounterGuarantorQuestionnaireUWParametersInstance.uwreqid)
                .Add("ClientName", HT5CounterGuarantorQuestionnaireUWParametersInstance.ClientName)
                .Add("StatusCase", HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusCase)
                .Add("StatusRequirement", HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusRequirement)
                .Add("RiskInformation", HT5CounterGuarantorQuestionnaireUWParametersInstance.RiskInformation)
                .Add("Identifier", "Guarantor")
                .Add("context", formContext)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 3, WorkflowInArguments, True, True, "Me.AppRelativeVirtualPath", HT5CounterGuarantorQuestionnaireUWParametersInstance.InternalId)

                currentAction += "'Mapping Outputs'"
                HT5CounterGuarantorQuestionnaireUWParametersInstance.uwcaseid = WorkflowOutArguments("uwcaseid")
                HT5CounterGuarantorQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
                HT5CounterGuarantorQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
                HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
                HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                HT5CounterGuarantorQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

                currentAction = SessionTrace("2. The message 'El cuestionario será...' will displayed as 'Splash'")
                ParametersToDictionary(HT5CounterGuarantorQuestionnaireUWParametersInstance, parametersDictionary)
                messageAction = "El cuestionario será procesado. La empresa le notificará lo más pronto posible el resultado del mismo. Muchas gracias."
                messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                resultData.AddNotifySplash(messageAction)
                currentAction = SessionTrace("3. Call 'Main Process Questionnaire Bond' workflow in Asynchronous mode with tracking")
                WorkflowInArguments = New Dictionary(Of String, Object)

                With WorkflowInArguments
                .Add("uwcaseid", HT5CounterGuarantorQuestionnaireUWParametersInstance.uwcaseid)
                .Add("uwreqid", HT5CounterGuarantorQuestionnaireUWParametersInstance.uwreqid)
                .Add("context", formContext)
                End With

                WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireBondUW", "1D9FBA6F-6EE9-4114-A7AD-A468F471F099", 3, WorkflowInArguments, True, False, "Me.AppRelativeVirtualPath", HT5CounterGuarantorQuestionnaireUWParametersInstance.InternalId)



                instance = ClassToEntryData(instance, HT5CounterGuarantorQuestionnaireUWParametersInstance)
                
                StoreFormInformation(HT5CounterGuarantorQuestionnaireUWParametersInstance)
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CounterGuarantorQuestionnaireUW", "submitClick", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


#End Region

#Region "Form Actions"

        Private Shared Sub Form_Initialization(ByRef currentAction As String, ByRef HT5CounterGuarantorQuestionnaireUWParametersInstance As HT5CounterGuarantorQuestionnaireUWParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, HT5CounterGuarantorQuestionnaireUWParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Initialization")

            currentAction = SessionTrace("1. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
            WorkflowInArguments = New Dictionary(Of String, Object)

            With WorkflowInArguments
            .Add("uwcaseid", HT5CounterGuarantorQuestionnaireUWParametersInstance.uwcaseid)
            .Add("uwreqid", HT5CounterGuarantorQuestionnaireUWParametersInstance.uwreqid)
            .Add("ClientName", HT5CounterGuarantorQuestionnaireUWParametersInstance.ClientName)
            .Add("StatusCase", HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusCase)
            .Add("StatusRequirement", HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusRequirement)
            .Add("RiskInformation", HT5CounterGuarantorQuestionnaireUWParametersInstance.RiskInformation)
            .Add("Identifier", "Guarantor")
            .Add("context", formContext)
            End With

            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 3, WorkflowInArguments, True, True, "Me.AppRelativeVirtualPath", HT5CounterGuarantorQuestionnaireUWParametersInstance.InternalId)

            currentAction += "'Mapping Outputs'"
            HT5CounterGuarantorQuestionnaireUWParametersInstance.uwcaseid = WorkflowOutArguments("uwcaseid")
            HT5CounterGuarantorQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
            HT5CounterGuarantorQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
            HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
            HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
            HT5CounterGuarantorQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")

            currentAction = SessionTrace("2. HT5CounterGuarantorQuestionnaireUWParametersInstance.BondRequirements.DateReceived = Date.Today...")
            currentAction = SessionTrace("2.1. HT5CounterGuarantorQuestionnaireUWParametersInstance.BondRequirements.DateReceived = Date.Today...")
                            If IsNothing(HT5CounterGuarantorQuestionnaireUWParametersInstance.BondRequirements) Then
                    HT5CounterGuarantorQuestionnaireUWParametersInstance.BondRequirements = New InMotionGIT.Questionnaires.BondRequirements
                End If

            HT5CounterGuarantorQuestionnaireUWParametersInstance.BondRequirements.DateReceived = Date.Today

            currentAction = SessionTrace("3. If HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusRequirement <> 1 OR HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusCase > 2 Then")
            If HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusRequirement <> 1 OrElse HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusCase > 2 Then

                currentAction = SessionTrace("4. The message 'El estado del cuesti...' will displayed as 'Splash'")
                ParametersToDictionary(HT5CounterGuarantorQuestionnaireUWParametersInstance, parametersDictionary)
                messageAction = "El estado del cuestionario no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros."
                messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary)
                resultData.AddNotifySplash(messageAction)
                End If

        End Sub
	
        Private Shared Sub Form_Load(ByRef currentAction As String, ByRef HT5CounterGuarantorQuestionnaireUWParametersInstance As HT5CounterGuarantorQuestionnaireUWParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(UserInfo.LanguageId, HT5CounterGuarantorQuestionnaireUWParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), .UserCode = HttpContext.Current.Session("nUsercode"), .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = SessionTrace("Form_Load")

            currentAction = SessionTrace("1. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking")
            WorkflowInArguments = New Dictionary(Of String, Object)

            With WorkflowInArguments
            .Add("uwcaseid", HT5CounterGuarantorQuestionnaireUWParametersInstance.uwcaseid)
            .Add("uwreqid", HT5CounterGuarantorQuestionnaireUWParametersInstance.uwreqid)
            .Add("ClientName", HT5CounterGuarantorQuestionnaireUWParametersInstance.ClientName)
            .Add("StatusCase", HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusCase)
            .Add("StatusRequirement", HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusRequirement)
            .Add("RiskInformation", HT5CounterGuarantorQuestionnaireUWParametersInstance.RiskInformation)
            .Add("Identifier", "Guarantor")
            .Add("context", formContext)
            End With

            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 3, WorkflowInArguments, True, True, "Me.AppRelativeVirtualPath", HT5CounterGuarantorQuestionnaireUWParametersInstance.InternalId)

            currentAction += "'Mapping Outputs'"
            HT5CounterGuarantorQuestionnaireUWParametersInstance.uwcaseid = WorkflowOutArguments("uwcaseid")
            HT5CounterGuarantorQuestionnaireUWParametersInstance.uwreqid = WorkflowOutArguments("uwreqid")
            HT5CounterGuarantorQuestionnaireUWParametersInstance.ClientName = WorkflowOutArguments("ClientName")
            HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusCase = WorkflowOutArguments("StatusCase")
            HT5CounterGuarantorQuestionnaireUWParametersInstance.StatusRequirement = WorkflowOutArguments("StatusRequirement")
            HT5CounterGuarantorQuestionnaireUWParametersInstance.RiskInformation = WorkflowOutArguments("RiskInformation")


            currentAction = SessionTrace("2. If Form.ReadOnly = true Then")
            If (Request.QueryString("readonly") = "yes") = True Then

                currentAction = SessionTrace("3. BondRequirements.Enabled = false, zoned.Enabled = false")
                currentAction = SessionTrace("3.1. BondRequirements.Enabled = false...")
                resultData.AddControlBehavior("BondRequirements", "disabled")
                currentAction = SessionTrace("3.2. zoned.Enabled = false...")
                resultData.AddControlBehavior("zoned", "disabled")

            End If

        End Sub
#End Region
#Region "Utilities"

        Private Shared Sub ParametersToDictionary(formData As HT5CounterGuarantorQuestionnaireUWParameters, ByRef target As Dictionary(Of String, Object))
            If IsNothing(target) Then
                target = New Dictionary(Of String, Object)

                target.Add("uwcaseid", formData.uwcaseid)
                target.Add("uwreqid", formData.uwreqid)
                target.Add("ClientName", formData.ClientName)
                target.Add("StatusCase", formData.StatusCase)
                target.Add("StatusRequirement", formData.StatusRequirement)
                target.Add("BondRequirements", formData.BondRequirements)
                target.Add("RiskInformation", formData.RiskInformation)
            Else
                target("uwcaseid") = formData.uwcaseid
                target("uwreqid") = formData.uwreqid
                target("ClientName") = formData.ClientName
                target("StatusCase") = formData.StatusCase
                target("StatusRequirement") = formData.StatusRequirement
                target("BondRequirements") = formData.BondRequirements
                target("RiskInformation") = formData.RiskInformation
            End If
        End Sub

        Private Shared Sub GetTransferParameters(parametersData As HT5CounterGuarantorQuestionnaireUWParameters, fromid As String)
            Dim fromDocumentCache As Object = Nothing

            If Not String.IsNullOrEmpty(fromid) Then
                fromDocumentCache = HttpContext.Current.Session(fromid)
                HttpContext.Current.Session.Remove(fromid)

            Else
                fromDocumentCache = HttpContext.Current.Session(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove("fromid")
            End If

            If Not IsNothing(fromDocumentCache) Then
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientName", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusCase", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRequirement", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("BondRequirements", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, parametersData)
            End If
        End Sub

        Private Shared Function SessionTrace(message As String) As String

            If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                Dim tracelog As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath")))

                tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = tracelog
            End If

            Return message
        End Function

#End Region


#Region "Storage Database Methods"

      Private Shared Sub StoreFormInformation(formData As HT5CounterGuarantorQuestionnaireUWParameters)
            If Not IsNothing(formData) Then
                Dim foundData As Boolean

                If formData.InternalId.IsEmpty Then
                    formData.InternalId = Guid.NewGuid.ToString
                Else
                    With New DataManagerFactory("SELECT COUNT(FormId) FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                 "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                        .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                        foundData = .QueryExecuteScalarToInteger > 0
                    End With
                End If

                If foundData Then
                    UpdateStorageData(formData)
                Else
                    InsertStorageData(formData)
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso
                    HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                    HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.HT5CounterGuarantorQuestionnaireUW", formData.InternalId)) = formData
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track.Parameters")) AndAlso
                    HttpContext.Current.Session("Form.Track.Parameters").ToString.ToLower = "true" Then

                    If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                        InMotionGIT.Common.Helpers.FileHandler.SaveContent(String.Format(CultureInfo.InvariantCulture, 
                                                                                         "{0}\{1}.HT5CounterGuarantorQuestionnaireUW.txt", ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), 
                                                                                         HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", 
                                                                                                                                   IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))))
                    End If

                    InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of HT5CounterGuarantorQuestionnaireUWParameters)(formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.HT5CounterGuarantorQuestionnaireUW.xml", 
                                                                                                                        ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
                End If
            End If
        End Sub

        Private Shared Function RetrieveFormInformationFromDatabase(instanceFormId As String) As HT5CounterGuarantorQuestionnaireUWParameters
            Dim result As HT5CounterGuarantorQuestionnaireUWParameters = Nothing
            Dim records As DataTable = Nothing

            With New DataManagerFactory("SELECT Content FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, instanceFormId)
                records = .QueryExecuteToTable(True)
            End With

            If records.Rows.Count > 0 Then
                result = Serialize.Deserialize(Of HT5CounterGuarantorQuestionnaireUWParameters)(records.FirstRow.Item("Content"))
            End If

            Return result
        End Function

        Private Shared Sub InsertStorageData(formData As HT5CounterGuarantorQuestionnaireUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("INSERT INTO FrontOffice.DocumentCache (FormId, ModelId, UserId, Page, Content, CreationDate, UpdateDate) VALUES(@:FormId, @:ModelId, @:UserId, @:Page, @:Content, @:CreationDate, @:UpdateDate)",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)
                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "522d3f96-b4d9-478b-a0ce-e4613078614a")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, "Me.AppRelativeVirtualPath")
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HT5CounterGuarantorQuestionnaireUWParameters)(formData))
            .AddParameter("CreationDate", DbType.DateTime, 20, False, Now)
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)

                .CommandExecute()
            End With
        End Sub

        Private Shared Sub UpdateStorageData(formData As HT5CounterGuarantorQuestionnaireUWParameters)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
	    
            With New DataManagerFactory("UPDATE FrontOffice.DocumentCache SET ModelId = @:ModelId, UserId = @:UserId, Page = @:Page, Content = @:Content, UpdateDate = @:UpdateDate WHERE FormId = @:FormId",
                                        "FrontOffice.DocumentCache", "FrontOfficeConnectionString")

                .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "522d3f96-b4d9-478b-a0ce-e4613078614a")
                .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserId)
            .AddParameter("Page", DbType.AnsiString, 255, False, "Me.AppRelativeVirtualPath")
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HT5CounterGuarantorQuestionnaireUWParameters)(formData))
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, formData.InternalId)

                .CommandExecute()
            End With
        End Sub

#End Region


#Region "Contracts Mappers"

        Private Shared Function EntryDataToClass(parametersData As HT5CounterGuarantorQuestionnaireUWParameters, formData As EntryData) As HT5CounterGuarantorQuestionnaireUWParameters
            If IsNothing(parametersData) Then
                parametersData = New HT5CounterGuarantorQuestionnaireUWParameters
            End If

            If IsNothing(parametersData.BondRequirements) Then
                parametersData.BondRequirements = New InMotionGIT.Questionnaires.BondRequirements
            End If
            If IsNothing(parametersData.BondRequirements.CounterGuarantor) Then
                parametersData.BondRequirements.CounterGuarantor = New InMotionGIT.Questionnaires.BondRequirementCounterGuarantor
            End If

            With parametersData
                .InternalId = formData.InstanceFormId
                .ClientName = formData.ClientName
                .uwcaseid = formData.uwcaseid
                .BondRequirements.CounterGuarantor.CedulaIdentidad = formData.BondRequirementsCounterGuarantorCedulaIdentidad
                .BondRequirements.CounterGuarantor.AutorizacionConyuge = formData.BondRequirementsCounterGuarantorAutorizacionConyuge
                .BondRequirements.CounterGuarantor.BalancePersonal = formData.BondRequirementsCounterGuarantorBalancePersonal
                .BondRequirements.CounterGuarantor.TitulosPropiedad = formData.BondRequirementsCounterGuarantorTitulosPropiedad
                .BondRequirements.CounterGuarantor.ReciboServicioBasico = formData.BondRequirementsCounterGuarantorReciboServicioBasico
                .BondRequirements.CounterGuarantor.DeclaracionImpuesto = formData.BondRequirementsCounterGuarantorDeclaracionImpuesto
                .BondRequirements.CounterGuarantor.ReferenciasComerciales = formData.BondRequirementsCounterGuarantorReferenciasComerciales
                .BondRequirements.GeneralComments = formData.BondRequirementsGeneralComments
                .BondRequirements.DateReceived = formData.BondRequirementsDateReceived
            End With

            Return parametersData
        End Function

        Private Shared Function ClassToEntryData(formData As EntryData, parametersData As HT5CounterGuarantorQuestionnaireUWParameters) As EntryData
            formData = New EntryData

            With formData
                .InstanceFormId = parametersData.InternalId
                .ClientName = parametersData.ClientName
                .uwcaseid = parametersData.uwcaseid
                If Not IsNothing(parametersData.BondRequirements) AndAlso Not IsNothing(parametersData.BondRequirements.CounterGuarantor) Then
                    .BondRequirementsCounterGuarantorCedulaIdentidad = parametersData.BondRequirements.CounterGuarantor.CedulaIdentidad
                End If
                If Not IsNothing(parametersData.BondRequirements) AndAlso Not IsNothing(parametersData.BondRequirements.CounterGuarantor) Then
                    .BondRequirementsCounterGuarantorAutorizacionConyuge = parametersData.BondRequirements.CounterGuarantor.AutorizacionConyuge
                End If
                If Not IsNothing(parametersData.BondRequirements) AndAlso Not IsNothing(parametersData.BondRequirements.CounterGuarantor) Then
                    .BondRequirementsCounterGuarantorBalancePersonal = parametersData.BondRequirements.CounterGuarantor.BalancePersonal
                End If
                If Not IsNothing(parametersData.BondRequirements) AndAlso Not IsNothing(parametersData.BondRequirements.CounterGuarantor) Then
                    .BondRequirementsCounterGuarantorTitulosPropiedad = parametersData.BondRequirements.CounterGuarantor.TitulosPropiedad
                End If
                If Not IsNothing(parametersData.BondRequirements) AndAlso Not IsNothing(parametersData.BondRequirements.CounterGuarantor) Then
                    .BondRequirementsCounterGuarantorReciboServicioBasico = parametersData.BondRequirements.CounterGuarantor.ReciboServicioBasico
                End If
                If Not IsNothing(parametersData.BondRequirements) AndAlso Not IsNothing(parametersData.BondRequirements.CounterGuarantor) Then
                    .BondRequirementsCounterGuarantorDeclaracionImpuesto = parametersData.BondRequirements.CounterGuarantor.DeclaracionImpuesto
                End If
                If Not IsNothing(parametersData.BondRequirements) AndAlso Not IsNothing(parametersData.BondRequirements.CounterGuarantor) Then
                    .BondRequirementsCounterGuarantorReferenciasComerciales = parametersData.BondRequirements.CounterGuarantor.ReferenciasComerciales
                End If
                If Not IsNothing(parametersData.BondRequirements) Then
                    .BondRequirementsGeneralComments = parametersData.BondRequirements.GeneralComments
                End If
                If Not IsNothing(parametersData.BondRequirements) Then
                    .BondRequirementsDateReceived = parametersData.BondRequirements.DateReceived
                End If
            End With

            Return formData
        End Function

#End Region

#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As HT5CounterGuarantorQuestionnaireUWParameters)
            If HttpContext.Current.Request.QueryString("uwcaseid").IsNotEmpty Then
                formData.uwcaseid = HttpContext.Current.Request.QueryString("uwcaseid")
            End If
            If HttpContext.Current.Request.QueryString("uwreqid").IsNotEmpty Then
                formData.uwreqid = HttpContext.Current.Request.QueryString("uwreqid")
            End If
            If HttpContext.Current.Request.QueryString("ClientName").IsNotEmpty Then
                formData.ClientName = HttpContext.Current.Request.QueryString("ClientName")
            End If
            If HttpContext.Current.Request.QueryString("StatusCase").IsNotEmpty Then
                formData.StatusCase = HttpContext.Current.Request.QueryString("StatusCase")
            End If
            If HttpContext.Current.Request.QueryString("StatusRequirement").IsNotEmpty Then
                formData.StatusRequirement = HttpContext.Current.Request.QueryString("StatusRequirement")
            End If
        End Sub	

        Private Sub ValidateParametersInstance(ByRef formData As HT5CounterGuarantorQuestionnaireUWParameters)
            If IsNothing(formData.BondRequirements) Then
                formData.BondRequirements = New InMotionGIT.Questionnaires.BondRequirements
            End If
            If IsNothing(formData.BondRequirements.CounterGuarantor) Then
                formData.BondRequirements.CounterGuarantor = New InMotionGIT.Questionnaires.BondRequirementCounterGuarantor
            End If

        End Sub

#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property ClientName As String
            <DataMember()> Public Property uwcaseid As Int64
            <DataMember()> Public Property BondRequirementsCounterGuarantorCedulaIdentidad As System.String
            <DataMember()> Public Property BondRequirementsCounterGuarantorAutorizacionConyuge As System.String
            <DataMember()> Public Property BondRequirementsCounterGuarantorBalancePersonal As System.String
            <DataMember()> Public Property BondRequirementsCounterGuarantorTitulosPropiedad As System.String
            <DataMember()> Public Property BondRequirementsCounterGuarantorReciboServicioBasico As System.String
            <DataMember()> Public Property BondRequirementsCounterGuarantorDeclaracionImpuesto As System.String
            <DataMember()> Public Property BondRequirementsCounterGuarantorReferenciasComerciales As System.String
            <DataMember()> Public Property BondRequirementsGeneralComments As System.String
            <DataMember()> Public Property BondRequirementsDateReceived As System.DateTime

        End Class

        <Serializable()>
        Public Class HT5CounterGuarantorQuestionnaireUWParameters
            Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of HT5CounterGuarantorQuestionnaireUWParameters)

            Public Property uwcaseid As Int64
            Public Property uwreqid As Int64
            Public Property ClientName As String
            Public Property StatusCase As Int32
            Public Property StatusRequirement As Int32
            Public Property BondRequirements As InMotionGIT.Questionnaires.BondRequirements
            Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation

        End Class
#End Region

    End Class

End Namespace