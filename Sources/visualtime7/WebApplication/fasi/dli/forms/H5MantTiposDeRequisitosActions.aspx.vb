'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.3.25.1 at 2019-11-11 03:34:59 p. m. model release 1, Form Generator v1.0.37.10
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class H5MantTiposDeRequisitosActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"
  

        <WebMethod()>
        Public Shared Function TabRequirementType_GridTblDataLoad(filter As String, TransRequirementTypeLanguageId1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.RequirementType = 0, .ProcessType = 0, .UnderwritingArea = 0, .Payer = 0, .Cost = 0, .Link = String.Empty, .AcordRequirementCode = 0, .LineOfBusiness = 0, .Product = 0, .RecordStatus = String.Empty, .CreatorUserCode = 0, .CreationDate = Date.MinValue, .UpdateUserCode = 0, .UpdateDate = Date.MinValue, .AllowViewRequirement = 0, .AllowLoadRequirement = 0, .Description = String.Empty, .ShortDescription = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)
            
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")

                With New DataManagerFactory("SELECT TABREQUIREMENTTYPE.REQUIREMENTTYPE, TABREQUIREMENTTYPE.PROCESSTYPE, TABREQUIREMENTTYPE.UNDERWRITINGAREA, TABREQUIREMENTTYPE.PAYER, TABREQUIREMENTTYPE.COST, TABREQUIREMENTTYPE.LINK, TABREQUIREMENTTYPE.ACORDREQUIREMENTCODE, TABREQUIREMENTTYPE.LINEOFBUSINESS, TABREQUIREMENTTYPE.PRODUCT, TABREQUIREMENTTYPE.RECORDSTATUS, TABREQUIREMENTTYPE.CREATORUSERCODE, TABREQUIREMENTTYPE.CREATIONDATE, TABREQUIREMENTTYPE.UPDATEUSERCODE, TABREQUIREMENTTYPE.UPDATEDATE, TABREQUIREMENTTYPE.ALLOWVIEWREQUIREMENT, TABREQUIREMENTTYPE.ALLOWLOADREQUIREMENT, TRANSREQUIREMENTTYPE.DESCRIPTION, TRANSREQUIREMENTTYPE.SHORTDESCRIPTION FROM TABREQUIREMENTTYPE TABREQUIREMENTTYPE  LEFT JOIN TRANSREQUIREMENTTYPE TRANSREQUIREMENTTYPE ON TRANSREQUIREMENTTYPE.REQUIREMENTTYPE = TABREQUIREMENTTYPE.REQUIREMENTTYPE  AND TRANSREQUIREMENTTYPE.LANGUAGEID = @:LANGUAGEID1", "TabRequirementType", "Linked.Underwriting")
                    .AddParameter("LANGUAGEID1", DbType.AnsiString, 5, (TransRequirementTypeLanguageId1 = String.Empty), TransRequirementTypeLanguageId1)

                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.RequirementType = itemData.NumericValue("REQUIREMENTTYPE"), .ProcessType = itemData.NumericValue("PROCESSTYPE"), .UnderwritingArea = itemData.NumericValue("UNDERWRITINGAREA"), .Payer = itemData.NumericValue("PAYER"), .Cost = itemData.NumericValue("COST"), .Link = itemData.StringValue("LINK"), .AcordRequirementCode = itemData.NumericValue("ACORDREQUIREMENTCODE"), .LineOfBusiness = itemData.NumericValue("LINEOFBUSINESS"), .Product = itemData.NumericValue("PRODUCT"), .RecordStatus = itemData.StringValue("RECORDSTATUS"), .CreatorUserCode = itemData.NumericValue("CREATORUSERCODE"), .CreationDate = itemData.DateTimeValue("CREATIONDATE"), .UpdateUserCode = itemData.NumericValue("UPDATEUSERCODE"), .UpdateDate = itemData.DateTimeValue("UPDATEDATE"), .AllowViewRequirement = itemData.NumericValue("ALLOWVIEWREQUIREMENT"), .AllowLoadRequirement = itemData.NumericValue("ALLOWLOADREQUIREMENT"), .Description = itemData.StringValue("DESCRIPTION"), .ShortDescription = itemData.StringValue("SHORTDESCRIPTION")}
                            
                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With
            
            If responseList.Count <> 0 Then          
		    
            End If
                
            Catch ex As Exception            
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "TabRequirementType_GridTblDataLoad", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function TabRequirementType_Grid1InsertCommandActionTabRequirementType(REQUIREMENTTYPE1 As Decimal, PROCESSTYPE2 As Decimal, UNDERWRITINGAREA3 As Decimal, PAYER4 As Decimal, COST5 As Decimal, LINK6 As String, ACORDREQUIREMENTCODE7 As Decimal, LINEOFBUSINESS8 As Decimal, PRODUCT9 As Decimal, RECORDSTATUS10 As String, CREATORUSERCODE10 As Decimal, UPDATEUSERCODE12 As Decimal, ALLOWVIEWREQUIREMENT15 As Decimal, ALLOWLOADREQUIREMENT16 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                With New DataManagerFactory("INSERT INTO TabRequirementType (REQUIREMENTTYPE, PROCESSTYPE, UNDERWRITINGAREA, PAYER, COST, LINK, ACORDREQUIREMENTCODE, LINEOFBUSINESS, PRODUCT, RECORDSTATUS, CREATORUSERCODE, CREATIONDATE, UPDATEUSERCODE, UPDATEDATE, ALLOWVIEWREQUIREMENT, ALLOWLOADREQUIREMENT) VALUES (@:REQUIREMENTTYPE1, @:PROCESSTYPE2, @:UNDERWRITINGAREA3, @:PAYER4, @:COST5, @:LINK6, @:ACORDREQUIREMENTCODE7, @:LINEOFBUSINESS8, @:PRODUCT9, @:RECORDSTATUS10, @:CREATORUSERCODE10, @:CREATIONDATE11, @:UPDATEUSERCODE12, @:UPDATEDATE13, @:ALLOWVIEWREQUIREMENT15, @:ALLOWLOADREQUIREMENT16)", "TabRequirementType", "Linked.Underwriting")
                    .AddParameter("REQUIREMENTTYPE1", DbType.Decimal, 0, False, REQUIREMENTTYPE1)
                    .AddParameter("PROCESSTYPE2", DbType.Decimal, 0, False, PROCESSTYPE2)
                    .AddParameter("UNDERWRITINGAREA3", DbType.Decimal, 0, False, UNDERWRITINGAREA3)
                    .AddParameter("PAYER4", DbType.Decimal, 0, False, PAYER4)
                    .AddParameter("COST5", DbType.Decimal, 0, False, COST5)
                    .AddParameter("LINK6", DbType.AnsiString, 0, (LINK6 = String.Empty), LINK6)
                    .AddParameter("ACORDREQUIREMENTCODE7", DbType.Decimal, 0, False, ACORDREQUIREMENTCODE7)
                    .AddParameter("LINEOFBUSINESS8", DbType.Decimal, 0, False, LINEOFBUSINESS8)
                    .AddParameter("PRODUCT9", DbType.Decimal, 0, False, PRODUCT9)
                    .AddParameter("RECORDSTATUS10", DbType.AnsiStringFixedLength, 0, (RECORDSTATUS10 = String.Empty), RECORDSTATUS10)
                    .AddParameter("CREATORUSERCODE10", DbType.Decimal, 0, False, CREATORUSERCODE10)
                    .AddParameter("CREATIONDATE11", DbType.DateTime, 0, False, Date.Now)
                    .AddParameter("UPDATEUSERCODE12", DbType.Decimal, 0, False, UPDATEUSERCODE12)
                    .AddParameter("UPDATEDATE13", DbType.DateTime, 0, False, Date.Now)
                    .AddParameter("ALLOWVIEWREQUIREMENT15", DbType.Decimal, 0, False, ALLOWVIEWREQUIREMENT15)
                    .AddParameter("ALLOWLOADREQUIREMENT16", DbType.Decimal, 0, False, ALLOWLOADREQUIREMENT16)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "TabRequirementType_Grid1InsertCommandActionTabRequirementType", String.Empty)
            End Try
            
            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function TabRequirementType_Grid3InsertCommandActionTransRequirementType(REQUIREMENTTYPE1 As Decimal, LANGUAGEID1 As Decimal, DESCRIPTION3 As String, SHORTDESCRIPTION4 As String, CREATORUSERCODE4 As Decimal, UPDATEUSERCODE6 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                    With New DataManagerFactory("INSERT INTO TransRequirementType (REQUIREMENTTYPE, LANGUAGEID, DESCRIPTION, SHORTDESCRIPTION, CREATORUSERCODE, CREATIONDATE, UPDATEUSERCODE, UPDATEDATE) VALUES (@:REQUIREMENTTYPE1, @:LANGUAGEID1, @:DESCRIPTION3, @:SHORTDESCRIPTION4, @:CREATORUSERCODE4, @:CREATIONDATE5, @:UPDATEUSERCODE6, @:UPDATEDATE7)", "TransRequirementType", "Linked.Underwriting")
                    .AddParameter("REQUIREMENTTYPE1", DbType.Decimal, 0, False, REQUIREMENTTYPE1)
                    .AddParameter("LANGUAGEID1", DbType.Decimal, 0, False, LANGUAGEID1)
                    .AddParameter("DESCRIPTION3", DbType.AnsiString, 0, (DESCRIPTION3 = String.Empty), DESCRIPTION3)
                    .AddParameter("SHORTDESCRIPTION4", DbType.AnsiString, 0, (SHORTDESCRIPTION4 = String.Empty), SHORTDESCRIPTION4)
                    .AddParameter("CREATORUSERCODE4", DbType.Decimal, 0, False, CREATORUSERCODE4)
                    .AddParameter("CREATIONDATE5", DbType.DateTime, 0, False, Date.Now)
                    .AddParameter("UPDATEUSERCODE6", DbType.Decimal, 0, False, UPDATEUSERCODE6)
                    .AddParameter("UPDATEDATE7", DbType.DateTime, 0, False, Date.Now)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "TabRequirementType_Grid3InsertCommandActionTransRequirementType", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function TabRequirementType_Grid1UpdateCommandActionTabRequirementType(PROCESSTYPE1 As Decimal, UNDERWRITINGAREA2 As Decimal, PAYER3 As Decimal, COST4 As Decimal, LINK5 As String, ACORDREQUIREMENTCODE6 As Decimal, LINEOFBUSINESS7 As Decimal, PRODUCT8 As Decimal, RECORDSTATUS9 As String, UPDATEUSERCODE9 As Decimal, ALLOWVIEWREQUIREMENT11 As Decimal, ALLOWLOADREQUIREMENT12 As Decimal, TabRequirementTypeRequirementType13 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                With New DataManagerFactory("UPDATE TabRequirementType SET PROCESSTYPE = @:PROCESSTYPE1, UNDERWRITINGAREA = @:UNDERWRITINGAREA2, PAYER = @:PAYER3, COST = @:COST4, LINK = @:LINK5, ACORDREQUIREMENTCODE = @:ACORDREQUIREMENTCODE6, LINEOFBUSINESS = @:LINEOFBUSINESS7, PRODUCT = @:PRODUCT8, RECORDSTATUS = @:RECORDSTATUS9, UPDATEUSERCODE = @:UPDATEUSERCODE9, ALLOWVIEWREQUIREMENT = @:ALLOWVIEWREQUIREMENT11, ALLOWLOADREQUIREMENT = @:ALLOWLOADREQUIREMENT12 WHERE TABREQUIREMENTTYPE.REQUIREMENTTYPE = @:REQUIREMENTTYPE13", "TabRequirementType", "Linked.Underwriting")
                    .AddParameter("PROCESSTYPE1", DbType.Decimal, 0, False, PROCESSTYPE1)
                    .AddParameter("UNDERWRITINGAREA2", DbType.Decimal, 0, False, UNDERWRITINGAREA2)
                    .AddParameter("PAYER3", DbType.Decimal, 0, False, PAYER3)
                    .AddParameter("COST4", DbType.Decimal, 0, False, COST4)
                    .AddParameter("LINK5", DbType.AnsiString, 0, (LINK5 = String.Empty), LINK5)
                    .AddParameter("ACORDREQUIREMENTCODE6", DbType.Decimal, 0, False, ACORDREQUIREMENTCODE6)
                    .AddParameter("LINEOFBUSINESS7", DbType.Decimal, 0, False, LINEOFBUSINESS7)
                    .AddParameter("PRODUCT8", DbType.Decimal, 0, False, PRODUCT8)
                    .AddParameter("RECORDSTATUS9", DbType.AnsiStringFixedLength, 0, (RECORDSTATUS9 = String.Empty), RECORDSTATUS9)
                    .AddParameter("UPDATEUSERCODE9", DbType.Decimal, 0, False, UPDATEUSERCODE9)
                    .AddParameter("ALLOWVIEWREQUIREMENT11", DbType.Decimal, 0, False, ALLOWVIEWREQUIREMENT11)
                    .AddParameter("ALLOWLOADREQUIREMENT12", DbType.Decimal, 0, False, ALLOWLOADREQUIREMENT12)
                    .AddParameter("REQUIREMENTTYPE13", DbType.Decimal, 0, False, TabRequirementTypeRequirementType13)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "TabRequirementType_Grid1UpdateCommandActionTabRequirementType", String.Empty)
            End Try
            
            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function TabRequirementType_Grid3SelectCommandActionTransRequirementType(TransRequirementTypeRequirementType1 As Decimal, TransRequirementTypeLanguageId2 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}
            Dim responseList As New List(Of Object)
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")

                With New DataManagerFactory("Select COUNT(TRANSREQUIREMENTTYPE.REQUIREMENTTYPE) REQUIREMENTTYPE FROM TRANSREQUIREMENTTYPE TRANSREQUIREMENTTYPE  WHERE TRANSREQUIREMENTTYPE.REQUIREMENTTYPE = @:REQUIREMENTTYPE1 AND TRANSREQUIREMENTTYPE.LANGUAGEID = @:LANGUAGEID2", "TransRequirementType", "Linked.Underwriting")
                    .AddParameter("REQUIREMENTTYPE1", DbType.Decimal, 0, False, TransRequirementTypeRequirementType1)
                    .AddParameter("LANGUAGEID2", DbType.Decimal, 0, False, TransRequirementTypeLanguageId2)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With
            
            If responseList.Count <> 0 Then          
		    
            End If
                
            Catch ex As Exception            
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "TabRequirementType_Grid3SelectCommandActionTransRequirementType", String.Empty)
            End Try
            
            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function TabRequirementType_Grid5InsertCommandActionTransRequirementType(REQUIREMENTTYPE1 As Decimal, LANGUAGEID1 As Decimal, DESCRIPTION3 As String, SHORTDESCRIPTION4 As String, CREATORUSERCODE4 As Decimal, UPDATEUSERCODE6 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                        With New DataManagerFactory("INSERT INTO TransRequirementType (REQUIREMENTTYPE, LANGUAGEID, DESCRIPTION, SHORTDESCRIPTION, CREATORUSERCODE, CREATIONDATE, UPDATEUSERCODE, UPDATEDATE) VALUES (@:REQUIREMENTTYPE1, @:LANGUAGEID1, @:DESCRIPTION3, @:SHORTDESCRIPTION4, @:CREATORUSERCODE4, @:CREATIONDATE5, @:UPDATEUSERCODE6, @:UPDATEDATE7)", "TransRequirementType", "Linked.Underwriting")
                    .AddParameter("REQUIREMENTTYPE1", DbType.Decimal, 0, False, REQUIREMENTTYPE1)
                    .AddParameter("LANGUAGEID1", DbType.Decimal, 0, False, LANGUAGEID1)
                    .AddParameter("DESCRIPTION3", DbType.AnsiString, 0, (DESCRIPTION3 = String.Empty), DESCRIPTION3)
                    .AddParameter("SHORTDESCRIPTION4", DbType.AnsiString, 0, (SHORTDESCRIPTION4 = String.Empty), SHORTDESCRIPTION4)
                    .AddParameter("CREATORUSERCODE4", DbType.Decimal, 0, False, CREATORUSERCODE4)
                    .AddParameter("CREATIONDATE5", DbType.DateTime, 0, False, Date.Now)
                    .AddParameter("UPDATEUSERCODE6", DbType.Decimal, 0, False, UPDATEUSERCODE6)
                    .AddParameter("UPDATEDATE7", DbType.DateTime, 0, False, Date.Now)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "TabRequirementType_Grid5InsertCommandActionTransRequirementType", String.Empty)
            End Try
            
            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function TabRequirementType_Grid6UpdateCommandActionTransRequirementType(DESCRIPTION1 As String, SHORTDESCRIPTION2 As String, UPDATEUSERCODE2 As Decimal, TransRequirementTypeRequirementType4 As Decimal, TransRequirementTypeLanguageId5 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                        With New DataManagerFactory("UPDATE TransRequirementType SET DESCRIPTION = @:DESCRIPTION1, SHORTDESCRIPTION = @:SHORTDESCRIPTION2, UPDATEUSERCODE = @:UPDATEUSERCODE2 WHERE TRANSREQUIREMENTTYPE.REQUIREMENTTYPE = @:REQUIREMENTTYPE4 AND TRANSREQUIREMENTTYPE.LANGUAGEID = @:LANGUAGEID5", "TransRequirementType", "Linked.Underwriting")
                    .AddParameter("DESCRIPTION1", DbType.AnsiString, 0, (DESCRIPTION1 = String.Empty), DESCRIPTION1)
                    .AddParameter("SHORTDESCRIPTION2", DbType.AnsiString, 0, (SHORTDESCRIPTION2 = String.Empty), SHORTDESCRIPTION2)
                    .AddParameter("UPDATEUSERCODE2", DbType.Decimal, 0, False, UPDATEUSERCODE2)
                    .AddParameter("REQUIREMENTTYPE4", DbType.Decimal, 0, False, TransRequirementTypeRequirementType4)
                    .AddParameter("LANGUAGEID5", DbType.Decimal, 0, False, TransRequirementTypeLanguageId5)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "TabRequirementType_Grid6UpdateCommandActionTransRequirementType", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function TabRequirementType_Grid1DeleteCommandActionTransRequirementType(TransRequirementTypeRequirementType1 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                With New DataManagerFactory("DELETE FROM TransRequirementType WHERE TRANSREQUIREMENTTYPE.REQUIREMENTTYPE = @:REQUIREMENTTYPE1", "TransRequirementType", "Linked.Underwriting")
                    .AddParameter("REQUIREMENTTYPE1", DbType.Decimal, 0, False, TransRequirementTypeRequirementType1)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "TabRequirementType_Grid1DeleteCommandActionTransRequirementType", String.Empty)
            End Try
            
            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function TabRequirementType_Grid3DeleteCommandActionTabRequirementType(TabRequirementTypeRequirementType1 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                    With New DataManagerFactory("DELETE FROM TabRequirementType WHERE TABREQUIREMENTTYPE.REQUIREMENTTYPE = @:REQUIREMENTTYPE1", "TabRequirementType", "Linked.Underwriting")
                    .AddParameter("REQUIREMENTTYPE1", DbType.Decimal, 0, False, TabRequirementTypeRequirementType1)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "TabRequirementType_Grid3DeleteCommandActionTabRequirementType", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function TabRequirementType_Grid2SelectCommandActionTabRequirementType() As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}
            Dim responseList As New List(Of Object)
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")

                With New DataManagerFactory("Select MAX(TABREQUIREMENTTYPE.REQUIREMENTTYPE) REQUIREMENTTYPE FROM TABREQUIREMENTTYPE TABREQUIREMENTTYPE ", "TabRequirementType", "Linked.Underwriting")

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With
            
            If responseList.Count <> 0 Then          
		    
            End If
                
            Catch ex As Exception            
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "TabRequirementType_Grid2SelectCommandActionTabRequirementType", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function TabRequirementTypeTranslator_GridTblDataLoad(filter As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.RequirementType = 0, .LanguageId = 0, .Description = String.Empty, .ShortDescription = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)
            
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")

                With New DataManagerFactory("SELECT TABREQUIREMENTTYPE.REQUIREMENTTYPE, TRANSREQUIREMENTTYPE.LANGUAGEID, TRANSREQUIREMENTTYPE.DESCRIPTION, TRANSREQUIREMENTTYPE.SHORTDESCRIPTION FROM TABREQUIREMENTTYPE TABREQUIREMENTTYPE  LEFT JOIN TRANSREQUIREMENTTYPE TRANSREQUIREMENTTYPE ON TRANSREQUIREMENTTYPE.REQUIREMENTTYPE = TABREQUIREMENTTYPE.REQUIREMENTTYPE ", "TabRequirementType", "Linked.Underwriting")

                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.RequirementType = itemData.NumericValue("REQUIREMENTTYPE"), .LanguageId = itemData.NumericValue("LANGUAGEID"), .Description = itemData.StringValue("DESCRIPTION"), .ShortDescription = itemData.StringValue("SHORTDESCRIPTION")}
                            
                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With
            
            If responseList.Count <> 0 Then          
		    
            End If
                
            Catch ex As Exception            
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "TabRequirementTypeTranslator_GridTblDataLoad", String.Empty)
            End Try
            
            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function TabRequirementTypeTranslator_Grid1UpdateCommandActionTransRequirementType(DESCRIPTION1 As String, SHORTDESCRIPTION2 As String, UPDATEUSERCODE2 As Decimal, TransRequirementTypeRequirementType4 As Decimal, TransRequirementTypeLanguageId5 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            
            Try
               InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                With New DataManagerFactory("UPDATE TransRequirementType SET DESCRIPTION = @:DESCRIPTION1, SHORTDESCRIPTION = @:SHORTDESCRIPTION2, UPDATEUSERCODE = @:UPDATEUSERCODE2 WHERE TRANSREQUIREMENTTYPE.REQUIREMENTTYPE = @:REQUIREMENTTYPE4 AND TRANSREQUIREMENTTYPE.LANGUAGEID = @:LANGUAGEID5", "TransRequirementType", "Linked.Underwriting")
                    .AddParameter("DESCRIPTION1", DbType.AnsiString, 0, (DESCRIPTION1 = String.Empty), DESCRIPTION1)
                    .AddParameter("SHORTDESCRIPTION2", DbType.AnsiString, 0, (SHORTDESCRIPTION2 = String.Empty), SHORTDESCRIPTION2)
                    .AddParameter("UPDATEUSERCODE2", DbType.Decimal, 0, False, UPDATEUSERCODE2)
                    .AddParameter("REQUIREMENTTYPE4", DbType.Decimal, 0, False, TransRequirementTypeRequirementType4)
                    .AddParameter("LANGUAGEID5", DbType.Decimal, 0, False, TransRequirementTypeLanguageId5)
 
                    .CommandExecute()
              End With

            Catch ex As Exception
                resultData = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "TabRequirementTypeTranslator_Grid1UpdateCommandActionTransRequirementType", String.Empty)
            End Try
            
            Return resultData
        End Function


#End Region

#Region "Lookups Web Methods"


        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForLineOfBusiness(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)                       
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                 
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE10.NBRANCH, TRIM(TABLE10.SDESCRIPT) SDESCRIPT FROM TABLE10 TABLE10    WHERE NOT TABLE10.SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE10", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NBRANCH"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "LookUpForLineOfBusiness", String.Empty)
            End Try
                        
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForProduct(id As String, TabRequirementTypeCollectionLineOfBusiness As System.Double) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)                       
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                 
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TRIM(PRODMASTER.SDESCRIPT) SDESCRIPT, PRODMASTER.NBRANCH, TRIM(PRODMASTER.SSTATREGT) SSTATREGT, PRODMASTER.NPRODUCT FROM PRODMASTER PRODMASTER  WHERE PRODMASTER.SSTATREGT = '{0}'  AND (PRODMASTER.NBRANCH = @:PRODMASTERNBRANCHDependen AND NOT PRODMASTER.SDESCRIPT IS NULL) ORDER BY SDESCRIPT ", "1"), 
                                            "PRODMASTER", "Linked.LatCombined")
                    .AddParameter("PRODMASTERNBRANCHDependen", DbType.Int32, 0, False, TabRequirementTypeCollectionLineOfBusiness)

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NPRODUCT"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "LookUpForProduct", String.Empty)
            End Try
                        
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForRecordStatus(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)                       
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                 
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT TRIM(ETRANRECORDSTATUS.RECORDSTATUS) RECORDSTATUS, ETRANRECORDSTATUS.DESCRIPTION FROM ETRANRECORDSTATUS ETRANRECORDSTATUS WHERE ETRANRECORDSTATUS.LANGUAGEID = {0} AND NOT ETRANRECORDSTATUS.DESCRIPTION IS NULL ORDER BY DESCRIPTION", InMotionGIT.FASI.Support.Handlers.LanguageHandler.ContextLanguageId()), 
                                            "ETranRecordStatus", "Linked.Common")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.StringValue("RecordStatus"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "LookUpForRecordStatus", String.Empty)
            End Try
                        
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForProcessType(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)                       
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                 
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABPROCESSTYPE.PROCESSTYPE, TRIM(TABPROCESSTYPE.RECORDSTATUS) RECORDSTATUS, TRANSPROCESSTYPE.PROCESSTYPE, TRANSPROCESSTYPE.LANGUAGEID, TRANSPROCESSTYPE.DESCRIPTION FROM TABPROCESSTYPE TABPROCESSTYPE JOIN TRANSPROCESSTYPE TRANSPROCESSTYPE ON TRANSPROCESSTYPE.PROCESSTYPE = TABPROCESSTYPE.PROCESSTYPE  WHERE TABPROCESSTYPE.RECORDSTATUS = '{0}' AND TRANSPROCESSTYPE.LANGUAGEID = {1}  AND NOT TRANSPROCESSTYPE.DESCRIPTION IS NULL ORDER BY DESCRIPTION", "1", InMotionGIT.FASI.Support.Handlers.LanguageHandler.ContextLanguageId()), 
                                            "TabProcessType", "Linked.Underwriting")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("ProcessType"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "LookUpForProcessType", String.Empty)
            End Try
                        
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForUnderwritingArea(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)                       
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                 
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABUNDERWRITINGAREATYPE.UNDERWRITINGAREA, TRIM(TABUNDERWRITINGAREATYPE.RECORDSTATUS) RECORDSTATUS, TRANSUNDERWRITINGAREATYPE.DESCRIPTION, TRANSUNDERWRITINGAREATYPE.LANGUAGEID FROM TABUNDERWRITINGAREATYPE TABUNDERWRITINGAREATYPE JOIN TRANSUNDERWRITINGAREATYPE TRANSUNDERWRITINGAREATYPE ON TRANSUNDERWRITINGAREATYPE.UNDERWRITINGAREA = TABUNDERWRITINGAREATYPE.UNDERWRITINGAREA  WHERE TABUNDERWRITINGAREATYPE.RECORDSTATUS = '{0}' AND TRANSUNDERWRITINGAREATYPE.LANGUAGEID = {1}  AND NOT TRANSUNDERWRITINGAREATYPE.DESCRIPTION IS NULL ORDER BY DESCRIPTION", "1", InMotionGIT.FASI.Support.Handlers.LanguageHandler.ContextLanguageId()), 
                                            "TabUnderwritingAreaType", "Linked.Underwriting")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("UnderwritingArea"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "LookUpForUnderwritingArea", String.Empty)
            End Try
                        
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForPayer(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)                       
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                 
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TRIM(TABPAYABLEBYTYPE.RECORDSTATUS) RECORDSTATUS, TABPAYABLEBYTYPE.PAYER, TRANSPAYABLEBYTYPE.LANGUAGEID, TRANSPAYABLEBYTYPE.DESCRIPTION, TRANSPAYABLEBYTYPE.PAYER FROM TABPAYABLEBYTYPE TABPAYABLEBYTYPE JOIN TRANSPAYABLEBYTYPE TRANSPAYABLEBYTYPE ON TRANSPAYABLEBYTYPE.PAYER = TABPAYABLEBYTYPE.PAYER  WHERE TABPAYABLEBYTYPE.RECORDSTATUS = '{0}' AND TRANSPAYABLEBYTYPE.LANGUAGEID = {1}  AND NOT TRANSPAYABLEBYTYPE.DESCRIPTION IS NULL ORDER BY DESCRIPTION", "1", InMotionGIT.FASI.Support.Handlers.LanguageHandler.ContextLanguageId()), 
                                            "TabPayableByType", "Linked.Underwriting")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("Payer"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "LookUpForPayer", String.Empty)
            End Try
                        
            Return result
        End Function

        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForLanguageIdTranslator(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)                       
            
            Try
                InMotionGIT.FASI.Support.Authentication.AuthorizationProcess("EASE1,Suscriptor")
                 
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT TRANSLANGUAGE.LANGUAGECODEID, TRANSLANGUAGE.DESCRIPTION FROM TRANSLANGUAGE TRANSLANGUAGE WHERE TRANSLANGUAGE.LANGUAGEID = {0} AND NOT TRANSLANGUAGE.DESCRIPTION IS NULL ORDER BY DESCRIPTION", InMotionGIT.FASI.Support.Handlers.LanguageHandler.ContextLanguageId()), 
                                            "TransLanguage", "Linked.Common")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("LanguageCodeID"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                result = InMotionGIT.FrontOffice.Support.ExceptionHandler.ProcessClientAction(ex, "H5MantTiposDeRequisitos", "LookUpForLanguageIdTranslator", String.Empty)
            End Try
                        
            Return result
        End Function

#End Region

#Region "Form Actions"


#End Region





#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As EntryData)

        End Sub	


#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property TabRequirementTypeCollectionRequirementType As System.Double
            <DataMember()> Public Property TabRequirementTypeCollectionDescription As System.String
            <DataMember()> Public Property TabRequirementTypeCollectionShortDescription As System.String
            <DataMember()> Public Property TabRequirementTypeCollectionLineOfBusiness As System.Double
            <DataMember()> Public Property TabRequirementTypeCollectionProduct As System.Double
            <DataMember()> Public Property TabRequirementTypeCollectionRecordStatus As System.String
            <DataMember()> Public Property TabRequirementTypeCollectionProcessType As System.Double
            <DataMember()> Public Property TabRequirementTypeCollectionUnderwritingArea As System.Double
            <DataMember()> Public Property TabRequirementTypeCollectionPayer As System.Double
            <DataMember()> Public Property TabRequirementTypeCollectionCost As System.Double
            <DataMember()> Public Property TabRequirementTypeCollectionLink As System.String
            <DataMember()> Public Property TabRequirementTypeCollectionAcordRequirementCode As System.Double
            <DataMember()> Public Property TabRequirementTypeCollectionCreatorUserCode As System.Double
            <DataMember()> Public Property TabRequirementTypeCollectionCreationDate As System.DateTime
            <DataMember()> Public Property TabRequirementTypeCollectionUpdateUserCode As System.Double
            <DataMember()> Public Property TabRequirementTypeCollectionUpdateDate As System.DateTime
            <DataMember()> Public Property TabRequirementTypeCollectionAllowViewRequirement As System.Double
            <DataMember()> Public Property TabRequirementTypeCollectionAllowLoadRequirement As System.Double
            <DataMember()> Public Property TabRequirementType_Grid_TabRequirementType_Item As List(Of TabRequirementType_Grid_TabRequirementType_ItemItem)
            <DataMember()> Public Property TabRequirementTypeCollectionLanguageId As System.Double
            <DataMember()> Public Property TabRequirementTypeTranslator_Grid_TabRequirementType_Item As List(Of TabRequirementTypeTranslator_Grid_TabRequirementType_ItemItem)

        End Class

        <Serializable()>
        <DataContract()>
        Public Class TabRequirementType_Grid_TabRequirementType_ItemItem

            <DataMember()> Public Property RequirementType As System.Double
            <DataMember()> Public Property Description As System.String
            <DataMember()> Public Property ShortDescription As System.String
            <DataMember()> Public Property LineOfBusiness As System.Double
            <DataMember()> Public Property Product As System.Double
            <DataMember()> Public Property RecordStatus As System.String
            <DataMember()> Public Property ProcessType As System.Double
            <DataMember()> Public Property UnderwritingArea As System.Double
            <DataMember()> Public Property Payer As System.Double
            <DataMember()> Public Property Cost As System.Double
            <DataMember()> Public Property Link As System.String
            <DataMember()> Public Property AcordRequirementCode As System.Double
            <DataMember()> Public Property CreatorUserCode As System.Double
            <DataMember()> Public Property CreationDate As System.DateTime
            <DataMember()> Public Property UpdateUserCode As System.Double
            <DataMember()> Public Property UpdateDate As System.DateTime
            <DataMember()> Public Property AllowViewRequirement As System.Double
            <DataMember()> Public Property AllowLoadRequirement As System.Double

        End Class

        <Serializable()>
        <DataContract()>
        Public Class TabRequirementTypeTranslator_Grid_TabRequirementType_ItemItem

            <DataMember()> Public Property RequirementType As System.Double
            <DataMember()> Public Property LanguageId As System.Double
            <DataMember()> Public Property Description As System.String
            <DataMember()> Public Property ShortDescription As System.String

        End Class


#End Region

    End Class

End Namespace

