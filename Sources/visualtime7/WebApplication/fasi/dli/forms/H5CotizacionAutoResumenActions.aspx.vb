'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer v7.1.220.1 at 2019/02/20 09:16:47  model release 1, Form Generator v1.0.34.17
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class H5CotizacionAutoResumenActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"

       <WebMethod(EnableSession:=True)>
        Public Shared Function Initialization(id As String, urlid As String, fromid As String) As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim instance As New EntryData With {.InstanceFormId = id}
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ServerActionResult
            Dim currentAction As String = String.Empty
            Dim H5CotizacionAutoResumenParametersInstance As H5CotizacionAutoResumenParameters = Nothing

            Try
                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    instance.InstanceFormId = System.Guid.NewGuid().ToString
                    
                    With instance

                    End With                
                    
                    H5CotizacionAutoResumenParametersInstance = EntryDataToClass(H5CotizacionAutoResumenParametersInstance, instance)
                    SetDefaultValuesFromQueryString(H5CotizacionAutoResumenParametersInstance)
                    
                    If fromid.IsNotEmpty Then
                        GetTransferParameters(H5CotizacionAutoResumenParametersInstance, fromid)
                        ValidateParametersInstance(H5CotizacionAutoResumenParametersInstance)
                    End If
                Else       
                    instance.InstanceFormId = id.IfEmpty(urlid)
                    H5CotizacionAutoResumenParametersInstance = RetrieveFormInformationFromSession(instance.InstanceFormId)
         
                    If IsNothing(H5CotizacionAutoResumenParametersInstance) then
                        H5CotizacionAutoResumenParametersInstance = EntryDataToClass(H5CotizacionAutoResumenParametersInstance, instance)
                        SetDefaultValuesFromQueryString(H5CotizacionAutoResumenParametersInstance)
                    End If
                End If

                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = String.Empty

                If id.IsEmpty AndAlso urlid.IsEmpty Then
                    Form_Initialization(currentAction, H5CotizacionAutoResumenParametersInstance, resultData)
                End If


                instance = ClassToEntryData(instance, H5CotizacionAutoResumenParametersInstance) 
		        StoreFormInformationOnSession(H5CotizacionAutoResumenParametersInstance)
                
                With resultData
                    .Success = True
                    .Data = instance
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5CotizacionAutoResumen", "Initialization", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, currentAction)
                End With
            End Try

            Return resultData
        End Function
   

#End Region

#Region "Lookups Web Methods"


        <WebMethod()>
        Public Shared Function LookUpForGender(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE18.SSEXCLIEN, TABLE18.SSTATREGT, TABLE18.SDESCRIPT FROM TABLE18 TABLE18  WHERE TABLE18.SSTATREGT = 1  AND NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", "1"), 
                                            "TABLE18", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.StringValue("SSEXCLIEN"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("H5CotizacionAutoResumen", "LookUpForGender", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForGender")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCurrency(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE11.NCODIGINT, TABLE11.SDESCRIPT, TABLE11.SSHORT_DES FROM TABLE11 TABLE11  WHERE TABLE11.SSTATREGT = 1  ORDER BY TABLE11.SDESCRIPT ASC", "1"), 
                                            "TABLE11", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NCODIGINT"),
                                                                                            .Description = item.StringValue("SSHORT_DES")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("H5CotizacionAutoResumen", "LookUpForCurrency", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCurrency")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForLicensePlateType(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE80.SLICENSE_TY, TABLE80.SDESCRIPT FROM TABLE80 TABLE80  WHERE TABLE80.SSTATREGT = 1  ORDER BY TABLE80.SDESCRIPT ASC", "1"), 
                                            "TABLE80", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.StringValue("SLICENSE_TY"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("H5CotizacionAutoResumen", "LookUpForLicensePlateType", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForLicensePlateType")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForDrivingZone(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE224.NAUTOZONE, TABLE224.SDESCRIPT FROM TABLE224 TABLE224  WHERE TABLE224.SSTATREGT = '{0}'  ORDER BY TABLE224.SDESCRIPT ASC", "1"), 
                                            "TABLE224", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NAUTOZONE"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("H5CotizacionAutoResumen", "LookUpForDrivingZone", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForDrivingZone")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForUseOfVehicle(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE6028.NGROUPVEH, TABLE6028.SDESCRIPT FROM TABLE6028 TABLE6028  WHERE TABLE6028.SSTATREGT = 1  ORDER BY TABLE6028.SDESCRIPT ASC", "1"), 
                                            "TABLE6028", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NGROUPVEH"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("H5CotizacionAutoResumen", "LookUpForUseOfVehicle", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForUseOfVehicle")
                End With
            End Try
            Return result
        End Function

#End Region

#Region "Form Actions"

        Private Shared Sub Form_Initialization(ByRef currentAction As String, ByRef H5CotizacionAutoResumenParametersInstance As H5CotizacionAutoResumenParameters, ByRef resultData As InMotionGIT.FrontOffice.Support.DataType.ServerActionResult)
            Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
            Dim formContext As New InMotionGIT.Common.Contracts.Context(InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId(), 
                                                                        H5CotizacionAutoResumenParametersInstance.InternalId) With {.UserId = HttpContext.Current.Session("UserId"), 
                                                                                                                     .UserCode = HttpContext.Current.Session("nUsercode"), 
                                                                                                                     .SecuritySchemeCode = HttpContext.Current.Session("sSche_code"), 
                                                                                                                     .AccessToken = HttpContext.Current.Session("AccessToken")}
            Dim selectDataTableItem As DataTable = Nothing
            Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
            Dim WorkflowInArguments As Dictionary(Of String, Object) = Nothing
            Dim WorkflowOutArguments As IDictionary(Of String, Object) = Nothing
            Dim messageAction As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False
            Dim errors As InMotionGIT.Common.DataType.Notify
            currentAction = SessionTrace("Form_Initialization")

            currentAction = SessionTrace("2. Call 'Build Complete Address' workflow in Synchronous mode with tracking")
            WorkflowInArguments = New Dictionary(Of String, Object)

            With WorkflowInArguments
            .Add("context", formContext)
            .Add("Address", H5CotizacionAutoResumenParametersInstance.RiskInformation.PrimaryInsured.Client.BusinessAddress)
            End With

            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("BuildCompleteAddress", "6AA7B3BD-15F9-404F-B83A-CB003F75BB24", 3, WorkflowInArguments, True, True, HttpContext.Current.Request.UrlReferrer.AbsolutePath, H5CotizacionAutoResumenParametersInstance.InternalId)

            currentAction += "'Mapping Outputs'"
            H5CotizacionAutoResumenParametersInstance.RiskInformation.PrimaryInsured.Client.BusinessAddress = WorkflowOutArguments("Address")

            currentAction = SessionTrace("3. H5CotizacionAutoResumenParametersInstance.DireccionMostrar = H5CotizacionAutoResumenParametersInstance.RiskInformation.PrimaryIn...")
            currentAction = SessionTrace("3.1. H5CotizacionAutoResumenParametersInstance.DireccionMostrar = H5CotizacionAutoResumenParametersInstance.RiskInformation.PrimaryIn...")

            H5CotizacionAutoResumenParametersInstance.DireccionMostrar = H5CotizacionAutoResumenParametersInstance.RiskInformation.PrimaryInsured.Client.BusinessAddress.CompleteAddress


        End Sub

#End Region
#Region "Utilities"


        Private Shared Sub GetTransferParameters(parametersData As H5CotizacionAutoResumenParameters, fromid As String)
            Dim fromDocumentCache As Object = Nothing

            If Not String.IsNullOrEmpty(fromid) Then
                fromDocumentCache = HttpContext.Current.Session(fromid)
                HttpContext.Current.Session.Remove(fromid)

            Else
                fromDocumentCache = HttpContext.Current.Session(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove(HttpContext.Current.Session("fromid"))
                HttpContext.Current.Session.Remove("fromid")
            End If

            If Not IsNothing(fromDocumentCache) Then
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InsuredAmount", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InsuredAmountSelected", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PlanType", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientExistInDB", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("eMail", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Currency", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QueryType", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MasaCorporal", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Age", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MessagePopUp", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MessageIndicator", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProducerClientID", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("BeneficiaryType", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("DefaultAddresses", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("LaboratoryRequired", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("LaboratorySelectedByUser", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PrimaryInsured", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("SendMailIndicator", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MailToProducerIndicator", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InRuleErros", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProductMaster", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AccumulatedAmount", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CancelledPoliciesQuantity", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OtherPoliciesSameRiskQuantity", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InRuleMessage", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrintIndicator", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrintResult", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PolicyDocument", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ErrorsFound", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ReportURL", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FormStatus", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrint", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRun", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ConsumerInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("DireccionMostrar", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ShowGeneral", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ShowAdditionalInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ShowBasicInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ShowPaymentInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UnderwritingCase", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ShowAddressInformation", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeBO", fromDocumentCache, parametersData)
                InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeFASI", fromDocumentCache, parametersData)
            End If
        End Sub

        Private Shared Function SessionTrace(message As String) As String

            If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                Dim tracelog As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath")))

                tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))) = tracelog
            End If

            Return message
        End Function

#End Region
#Region "Storage Session Methods"

        Private Shared Function RetrieveFormInformationFromSession(id As String) As H5CotizacionAutoResumenParameters
            Dim source As String = HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.Storage.{0}", id))
            Dim instance As H5CotizacionAutoResumenParameters = Nothing

            If Not String.IsNullOrEmpty(source) Then
                instance = Serialize.Deserialize(Of H5CotizacionAutoResumenParameters)(source)
            End If

            Return instance
        End Function

        Private Shared Sub StoreFormInformationOnSession(instance As H5CotizacionAutoResumenParameters)
            If Not IsNothing(instance) Then
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.Storage.{0}", instance.InternalId)) = Serialize.Serialize(Of H5CotizacionAutoResumenParameters)(instance)
                HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.Title.{0}", instance.InternalId)) = "Mi Auto aDorado - Resumen"
              
                If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso
                   HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then

                    HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture, "Form.H5CotizacionAutoResumen", instance.InternalId)) = instance
                End If

                If Not IsNothing(HttpContext.Current.Session("Form.Track.Parameters")) AndAlso
                   HttpContext.Current.Session("Form.Track.Parameters").ToString.ToLower = "true" Then

                    If Not IsNothing(HttpContext.Current.Session("Form.Track")) AndAlso HttpContext.Current.Session("Form.Track").ToString.ToLower = "true" Then
                        InMotionGIT.Common.Helpers.FileHandler.SaveContent(String.Format(CultureInfo.InvariantCulture, "{0}\{1}.H5CotizacionAutoResumen.txt",
                                                                                         ConfigurationManager.AppSettings("Path.Logs"), instance.InternalId),
                                                                                          HttpContext.Current.Session(String.Format(CultureInfo.InvariantCulture,
                                                                                                                     "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension("Page.AppRelativeVirtualPath"))))
                    End If

                    InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of H5CotizacionAutoResumenParameters)(instance,
                                                                                                String.Format(CultureInfo.InvariantCulture,
                                                                                                              "{0}\{1}.H5CotizacionAutoResumen.xml", ConfigurationManager.AppSettings("Path.Logs"), instance.InternalId), True)
                End If			
            End If
        End Sub

#End Region


#Region "Contracts Mappers"

        Private Shared Function EntryDataToClass(parametersData As H5CotizacionAutoResumenParameters, formData As EntryData) As H5CotizacionAutoResumenParameters
            If IsNothing(parametersData) Then
                parametersData = New H5CotizacionAutoResumenParameters
            End If

            If IsNothing(parametersData.RiskInformation) Then
                parametersData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
            End If
            If IsNothing(parametersData.ProductMaster) Then
                parametersData.ProductMaster = New InMotionGIT.Product.Entity.Contracts.ProductMaster
            End If
            If IsNothing(parametersData.RiskInformation.PrimaryInsured) Then
                parametersData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
            End If
            If IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                parametersData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
            End If
            If IsNothing(parametersData.RiskInformation.AutomobileLineOfBusiness) Then
                parametersData.RiskInformation.AutomobileLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.AutomobileLineOfBusiness
            End If
            If IsNothing(parametersData.RiskInformation.AutomobileLineOfBusiness.AutomobileInformation) Then
                parametersData.RiskInformation.AutomobileLineOfBusiness.AutomobileInformation = New InMotionGIT.Policy.Entity.Contracts.AutomobileInformation
            End If
            If IsNothing(parametersData.RiskInformation.CoveragesWithCalculatedPremium) Then
                parametersData.RiskInformation.CoveragesWithCalculatedPremium = New InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremiumCollection
            End If

            With parametersData
                .InternalId = formData.InstanceFormId
                .RiskInformation.EffectiveDate = formData.RiskInformationEffectiveDate
                .ProductMaster.Description = formData.ProductMasterDescription
                .RiskInformation.PrimaryInsured.Client.FirstName = formData.RiskInformationPrimaryInsuredClientFirstName
                .RiskInformation.PrimaryInsured.Client.LastName = formData.RiskInformationPrimaryInsuredClientLastName
                .RiskInformation.PrimaryInsured.Client.LastName2 = formData.RiskInformationPrimaryInsuredClientLastName2
                .RiskInformation.PrimaryInsured.Client.BirthDate = formData.RiskInformationPrimaryInsuredClientBirthDate
                .RiskInformation.PrimaryInsured.Client.Gender = formData.RiskInformationPrimaryInsuredClientGender
                .DireccionMostrar = formData.DireccionMostrar
                .RiskInformation.AutomobileLineOfBusiness.ValueOfTheVehicle = formData.RiskInformationAutomobileLineOfBusinessValueOfTheVehicle
                .RiskInformation.Currency = formData.RiskInformationCurrency
                .RiskInformation.AutomobileLineOfBusiness.LicensePlateType = formData.RiskInformationAutomobileLineOfBusinessLicensePlateType
                .RiskInformation.AutomobileLineOfBusiness.LicensePlate = formData.RiskInformationAutomobileLineOfBusinessLicensePlate
                .RiskInformation.AutomobileLineOfBusiness.Color = formData.RiskInformationAutomobileLineOfBusinessColor
                .RiskInformation.AutomobileLineOfBusiness.DrivingZone = formData.RiskInformationAutomobileLineOfBusinessDrivingZone
                .RiskInformation.AutomobileLineOfBusiness.UseOfVehicle = formData.RiskInformationAutomobileLineOfBusinessUseOfVehicle
                .RiskInformation.AutomobileLineOfBusiness.Chassis = formData.RiskInformationAutomobileLineOfBusinessChassis
                .RiskInformation.AutomobileLineOfBusiness.EngineSerialNumber = formData.RiskInformationAutomobileLineOfBusinessEngineSerialNumber
                .RiskInformation.AutomobileLineOfBusiness.AutomobileInformation.Mileage = formData.RiskInformationAutomobileLineOfBusinessAutomobileInformationMileage

            End With

            Return parametersData
        End Function

        Private Shared Function ClassToEntryData(formData As EntryData, parametersData As H5CotizacionAutoResumenParameters) As EntryData
            formData = New EntryData

            With formData
                .InstanceFormId = parametersData.InternalId
                If Not IsNothing(parametersData.RiskInformation) Then
                    .RiskInformationEffectiveDate = parametersData.RiskInformation.EffectiveDate
                End If
                If Not IsNothing(parametersData.ProductMaster) Then
                    .ProductMasterDescription = parametersData.ProductMaster.Description
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                    .RiskInformationPrimaryInsuredClientFirstName = parametersData.RiskInformation.PrimaryInsured.Client.FirstName
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                    .RiskInformationPrimaryInsuredClientLastName = parametersData.RiskInformation.PrimaryInsured.Client.LastName
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                    .RiskInformationPrimaryInsuredClientLastName2 = parametersData.RiskInformation.PrimaryInsured.Client.LastName2
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                    .RiskInformationPrimaryInsuredClientBirthDate = parametersData.RiskInformation.PrimaryInsured.Client.BirthDate
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                    .RiskInformationPrimaryInsuredClientGender = parametersData.RiskInformation.PrimaryInsured.Client.Gender
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured) AndAlso Not IsNothing(parametersData.RiskInformation.PrimaryInsured.Client) Then
                    .RiskInformationPrimaryInsuredClienteMailAddressDefault = parametersData.RiskInformation.PrimaryInsured.Client.eMailAddressDefault
                End If
                .DireccionMostrar = parametersData.DireccionMostrar
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.AutomobileLineOfBusiness) Then
                    .RiskInformationAutomobileLineOfBusinessValueOfTheVehicle = parametersData.RiskInformation.AutomobileLineOfBusiness.ValueOfTheVehicle
                End If
                If Not IsNothing(parametersData.RiskInformation) Then
                    .RiskInformationCurrency = parametersData.RiskInformation.Currency
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.AutomobileLineOfBusiness) Then
                    .RiskInformationAutomobileLineOfBusinessLicensePlateType = parametersData.RiskInformation.AutomobileLineOfBusiness.LicensePlateType
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.AutomobileLineOfBusiness) Then
                    .RiskInformationAutomobileLineOfBusinessLicensePlate = parametersData.RiskInformation.AutomobileLineOfBusiness.LicensePlate
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.AutomobileLineOfBusiness) Then
                    .RiskInformationAutomobileLineOfBusinessColor = parametersData.RiskInformation.AutomobileLineOfBusiness.Color
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.AutomobileLineOfBusiness) Then
                    .RiskInformationAutomobileLineOfBusinessDrivingZone = parametersData.RiskInformation.AutomobileLineOfBusiness.DrivingZone
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.AutomobileLineOfBusiness) Then
                    .RiskInformationAutomobileLineOfBusinessUseOfVehicle = parametersData.RiskInformation.AutomobileLineOfBusiness.UseOfVehicle
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.AutomobileLineOfBusiness) Then
                    .RiskInformationAutomobileLineOfBusinessChassis = parametersData.RiskInformation.AutomobileLineOfBusiness.Chassis
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.AutomobileLineOfBusiness) Then
                    .RiskInformationAutomobileLineOfBusinessEngineSerialNumber = parametersData.RiskInformation.AutomobileLineOfBusiness.EngineSerialNumber
                End If
                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.AutomobileLineOfBusiness) AndAlso Not IsNothing(parametersData.RiskInformation.AutomobileLineOfBusiness.AutomobileInformation) Then
                    .RiskInformationAutomobileLineOfBusinessAutomobileInformationMileage = parametersData.RiskInformation.AutomobileLineOfBusiness.AutomobileInformation.Mileage
                End If
                .CoverageWithCalculatedPremium_CoverageWithCalculatedPremium = New List(Of CoverageWithCalculatedPremium_CoverageWithCalculatedPremiumItem)

                If Not IsNothing(parametersData.RiskInformation) AndAlso Not IsNothing(parametersData.RiskInformation.CoveragesWithCalculatedPremium) Then
                    Dim newItem as CoverageWithCalculatedPremium_CoverageWithCalculatedPremiumItem
                    
                    For Each itemData As InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremium In parametersData.RiskInformation.CoveragesWithCalculatedPremium
                        newItem = New CoverageWithCalculatedPremium_CoverageWithCalculatedPremiumItem
                        
                        With newItem
                            .CoverageCode = itemData.CoverageCode
                            .Description = itemData.Description
                            .InsuredAmount = itemData.InsuredAmount
                            .AnnualPremium = itemData.AnnualPremium
                            .SelectedByDefault = itemData.SelectedByDefault                        
                        End With
                        
                        .CoverageWithCalculatedPremium_CoverageWithCalculatedPremium.Add(newItem)
                    Next
                End If


                If Not IsNothing(parametersData.RiskInformation) Then
                    .RiskInformationTotalOriginalAnnualPremium = parametersData.RiskInformation.TotalOriginalAnnualPremium
                End If
            End With

            Return formData
        End Function

#End Region

#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As H5CotizacionAutoResumenParameters)
            If HttpContext.Current.Request.QueryString("uwcaseid").IsNotEmpty Then
                formData.uwcaseid = HttpContext.Current.Request.QueryString("uwcaseid")
            End If
            If HttpContext.Current.Request.QueryString("uwreqid").IsNotEmpty Then
                formData.uwreqid = HttpContext.Current.Request.QueryString("uwreqid")
            End If
            If HttpContext.Current.Request.QueryString("InsuredAmount").IsNotEmpty Then
                formData.InsuredAmount = HttpContext.Current.Request.QueryString("InsuredAmount")
            End If
            If HttpContext.Current.Request.QueryString("InsuredAmountSelected").IsNotEmpty Then
                formData.InsuredAmountSelected = HttpContext.Current.Request.QueryString("InsuredAmountSelected")
            End If
            If HttpContext.Current.Request.QueryString("PlanType").IsNotEmpty Then
                formData.PlanType = HttpContext.Current.Request.QueryString("PlanType")
            End If
            If HttpContext.Current.Request.QueryString("ClientExistInDB").IsNotEmpty Then
                formData.ClientExistInDB = HttpContext.Current.Request.QueryString("ClientExistInDB")
            End If
            If HttpContext.Current.Request.QueryString("eMail").IsNotEmpty Then
                formData.eMail = HttpContext.Current.Request.QueryString("eMail")
            End If
            If HttpContext.Current.Request.QueryString("Currency").IsNotEmpty Then
                formData.Currency = HttpContext.Current.Request.QueryString("Currency")
            End If
            If HttpContext.Current.Request.QueryString("QueryType").IsNotEmpty Then
                formData.QueryType = HttpContext.Current.Request.QueryString("QueryType")
            End If
            If HttpContext.Current.Request.QueryString("MasaCorporal").IsNotEmpty Then
                formData.MasaCorporal = HttpContext.Current.Request.QueryString("MasaCorporal")
            End If
            If HttpContext.Current.Request.QueryString("Age").IsNotEmpty Then
                formData.Age = HttpContext.Current.Request.QueryString("Age")
            End If
            If HttpContext.Current.Request.QueryString("MessagePopUp").IsNotEmpty Then
                formData.MessagePopUp = HttpContext.Current.Request.QueryString("MessagePopUp")
            End If
            If HttpContext.Current.Request.QueryString("MessageIndicator").IsNotEmpty Then
                formData.MessageIndicator = HttpContext.Current.Request.QueryString("MessageIndicator")
            End If
            If HttpContext.Current.Request.QueryString("ProducerClientID").IsNotEmpty Then
                formData.ProducerClientID = HttpContext.Current.Request.QueryString("ProducerClientID")
            End If
            If HttpContext.Current.Request.QueryString("BeneficiaryType").IsNotEmpty Then
                formData.BeneficiaryType = HttpContext.Current.Request.QueryString("BeneficiaryType")
            End If
            If HttpContext.Current.Request.QueryString("DefaultAddresses").IsNotEmpty Then
                formData.DefaultAddresses = HttpContext.Current.Request.QueryString("DefaultAddresses")
            End If
            If HttpContext.Current.Request.QueryString("LaboratoryRequired").IsNotEmpty Then
                formData.LaboratoryRequired = HttpContext.Current.Request.QueryString("LaboratoryRequired")
            End If
            If HttpContext.Current.Request.QueryString("LaboratorySelectedByUser").IsNotEmpty Then
                formData.LaboratorySelectedByUser = HttpContext.Current.Request.QueryString("LaboratorySelectedByUser")
            End If
            If HttpContext.Current.Request.QueryString("PrimaryInsured").IsNotEmpty Then
                formData.PrimaryInsured = HttpContext.Current.Request.QueryString("PrimaryInsured")
            End If
            If HttpContext.Current.Request.QueryString("SendMailIndicator").IsNotEmpty Then
                formData.SendMailIndicator = HttpContext.Current.Request.QueryString("SendMailIndicator")
            End If
            If HttpContext.Current.Request.QueryString("MailToProducerIndicator").IsNotEmpty Then
                formData.MailToProducerIndicator = HttpContext.Current.Request.QueryString("MailToProducerIndicator")
            End If
            If HttpContext.Current.Request.QueryString("InRuleErros").IsNotEmpty Then
                formData.InRuleErros = HttpContext.Current.Request.QueryString("InRuleErros")
            End If
            If HttpContext.Current.Request.QueryString("AccumulatedAmount").IsNotEmpty Then
                formData.AccumulatedAmount = HttpContext.Current.Request.QueryString("AccumulatedAmount")
            End If
            If HttpContext.Current.Request.QueryString("CancelledPoliciesQuantity").IsNotEmpty Then
                formData.CancelledPoliciesQuantity = HttpContext.Current.Request.QueryString("CancelledPoliciesQuantity")
            End If
            If HttpContext.Current.Request.QueryString("OtherPoliciesSameRiskQuantity").IsNotEmpty Then
                formData.OtherPoliciesSameRiskQuantity = HttpContext.Current.Request.QueryString("OtherPoliciesSameRiskQuantity")
            End If
            If HttpContext.Current.Request.QueryString("InRuleMessage").IsNotEmpty Then
                formData.InRuleMessage = HttpContext.Current.Request.QueryString("InRuleMessage")
            End If
            If HttpContext.Current.Request.QueryString("OnLinePrintIndicator").IsNotEmpty Then
                formData.OnLinePrintIndicator = HttpContext.Current.Request.QueryString("OnLinePrintIndicator")
            End If
            If HttpContext.Current.Request.QueryString("OnLinePrintResult").IsNotEmpty Then
                formData.OnLinePrintResult = HttpContext.Current.Request.QueryString("OnLinePrintResult")
            End If
            If HttpContext.Current.Request.QueryString("PolicyDocument").IsNotEmpty Then
                formData.PolicyDocument = HttpContext.Current.Request.QueryString("PolicyDocument")
            End If
            If HttpContext.Current.Request.QueryString("ErrorsFound").IsNotEmpty Then
                formData.ErrorsFound = HttpContext.Current.Request.QueryString("ErrorsFound")
            End If
            If HttpContext.Current.Request.QueryString("ReportURL").IsNotEmpty Then
                formData.ReportURL = HttpContext.Current.Request.QueryString("ReportURL")
            End If
            If HttpContext.Current.Request.QueryString("FormStatus").IsNotEmpty Then
                formData.FormStatus = HttpContext.Current.Request.QueryString("FormStatus")
            End If
            If HttpContext.Current.Request.QueryString("OnLinePrint").IsNotEmpty Then
                formData.OnLinePrint = HttpContext.Current.Request.QueryString("OnLinePrint")
            End If
            If HttpContext.Current.Request.QueryString("StatusRun").IsNotEmpty Then
                formData.StatusRun = HttpContext.Current.Request.QueryString("StatusRun")
            End If
            If HttpContext.Current.Request.QueryString("DireccionMostrar").IsNotEmpty Then
                formData.DireccionMostrar = HttpContext.Current.Request.QueryString("DireccionMostrar")
            End If
            If HttpContext.Current.Request.QueryString("ShowGeneral").IsNotEmpty Then
                formData.ShowGeneral = HttpContext.Current.Request.QueryString("ShowGeneral")
            End If
            If HttpContext.Current.Request.QueryString("ShowAdditionalInformation").IsNotEmpty Then
                formData.ShowAdditionalInformation = HttpContext.Current.Request.QueryString("ShowAdditionalInformation")
            End If
            If HttpContext.Current.Request.QueryString("ShowBasicInformation").IsNotEmpty Then
                formData.ShowBasicInformation = HttpContext.Current.Request.QueryString("ShowBasicInformation")
            End If
            If HttpContext.Current.Request.QueryString("ShowPaymentInformation").IsNotEmpty Then
                formData.ShowPaymentInformation = HttpContext.Current.Request.QueryString("ShowPaymentInformation")
            End If
            If HttpContext.Current.Request.QueryString("ShowAddressInformation").IsNotEmpty Then
                formData.ShowAddressInformation = HttpContext.Current.Request.QueryString("ShowAddressInformation")
            End If
            If HttpContext.Current.Request.QueryString("UsercodeBO").IsNotEmpty Then
                formData.UsercodeBO = HttpContext.Current.Request.QueryString("UsercodeBO")
            End If
            If HttpContext.Current.Request.QueryString("UsercodeFASI").IsNotEmpty Then
                formData.UsercodeFASI = HttpContext.Current.Request.QueryString("UsercodeFASI")
            End If
        End Sub	

        Private Shared Sub ValidateParametersInstance(ByRef formData As H5CotizacionAutoResumenParameters)
            If IsNothing(formData.RiskInformation) Then
                formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
            End If
            If IsNothing(formData.ProductMaster) Then
                formData.ProductMaster = New InMotionGIT.Product.Entity.Contracts.ProductMaster
            End If
            If IsNothing(formData.RiskInformation.PrimaryInsured) Then
                formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
            End If
            If IsNothing(formData.RiskInformation.PrimaryInsured.Client) Then
                formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
            End If
            If IsNothing(formData.RiskInformation.AutomobileLineOfBusiness) Then
                formData.RiskInformation.AutomobileLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.AutomobileLineOfBusiness
            End If
            If IsNothing(formData.RiskInformation.AutomobileLineOfBusiness.AutomobileInformation) Then
                formData.RiskInformation.AutomobileLineOfBusiness.AutomobileInformation = New InMotionGIT.Policy.Entity.Contracts.AutomobileInformation
            End If
            If IsNothing(formData.RiskInformation.CoveragesWithCalculatedPremium) Then
                formData.RiskInformation.CoveragesWithCalculatedPremium = New InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremiumCollection
            End If

        End Sub

#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property RiskInformationEffectiveDate As System.DateTime
            <DataMember()> Public Property ProductMasterDescription As System.String
            <DataMember()> Public Property RiskInformationPrimaryInsuredClientFirstName As System.String
            <DataMember()> Public Property RiskInformationPrimaryInsuredClientLastName As System.String
            <DataMember()> Public Property RiskInformationPrimaryInsuredClientLastName2 As System.String
            <DataMember()> Public Property RiskInformationPrimaryInsuredClientBirthDate As System.DateTime
            <DataMember()> Public Property RiskInformationPrimaryInsuredClientGender As System.String
            <DataMember()> Public Property RiskInformationPrimaryInsuredClienteMailAddressDefault As System.String
            <DataMember()> Public Property DireccionMostrar As String
            <DataMember()> Public Property RiskInformationAutomobileLineOfBusinessValueOfTheVehicle As System.Decimal
            <DataMember()> Public Property RiskInformationCurrency As System.Int32
            <DataMember()> Public Property RiskInformationAutomobileLineOfBusinessLicensePlateType As System.String
            <DataMember()> Public Property RiskInformationAutomobileLineOfBusinessLicensePlate As System.String
            <DataMember()> Public Property RiskInformationAutomobileLineOfBusinessColor As System.String
            <DataMember()> Public Property RiskInformationAutomobileLineOfBusinessDrivingZone As System.Int64
            <DataMember()> Public Property RiskInformationAutomobileLineOfBusinessUseOfVehicle As System.Int32
            <DataMember()> Public Property RiskInformationAutomobileLineOfBusinessChassis As System.String
            <DataMember()> Public Property RiskInformationAutomobileLineOfBusinessEngineSerialNumber As System.String
            <DataMember()> Public Property RiskInformationAutomobileLineOfBusinessAutomobileInformationMileage As System.Int64
            <DataMember()> Public Property RiskInformationCoveragesWithCalculatedPremiumCoverageCode As System.Int32
            <DataMember()> Public Property RiskInformationCoveragesWithCalculatedPremiumDescription As System.String
            <DataMember()> Public Property RiskInformationCoveragesWithCalculatedPremiumInsuredAmount As System.Decimal
            <DataMember()> Public Property RiskInformationCoveragesWithCalculatedPremiumAnnualPremium As System.Decimal
            <DataMember()> Public Property CoverageWithCalculatedPremium_CoverageWithCalculatedPremium As List(Of CoverageWithCalculatedPremium_CoverageWithCalculatedPremiumItem)
            <DataMember()> Public Property RiskInformationTotalOriginalAnnualPremium As System.Decimal

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CoverageWithCalculatedPremium_CoverageWithCalculatedPremiumItem

            <DataMember()> Public Property CoverageCode As System.Int32
            <DataMember()> Public Property Description As System.String
            <DataMember()> Public Property InsuredAmount As System.Decimal
            <DataMember()> Public Property AnnualPremium As System.Decimal
            <DataMember()> Public Property SelectedByDefault As System.Boolean

        End Class

        <Serializable()>
        Public Class H5CotizacionAutoResumenParameters
            Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of H5CotizacionAutoResumenParameters)

            Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
            Public Property uwcaseid As Int64
            Public Property uwreqid As Int64
            Public Property InsuredAmount As Decimal
            Public Property InsuredAmountSelected As Decimal
            Public Property PlanType As Int32
            Public Property ClientExistInDB As Boolean
            Public Property eMail As String
            Public Property Currency As Int32
            Public Property QueryType As Int32
            Public Property MasaCorporal As Decimal
            Public Property Age As Int32
            Public Property MessagePopUp As String
            Public Property MessageIndicator As Boolean
            Public Property ProducerClientID As String
            Public Property BeneficiaryType As Int32
            Public Property DefaultAddresses As Boolean
            Public Property LaboratoryRequired As Boolean
            Public Property LaboratorySelectedByUser As Boolean
            Public Property PrimaryInsured As String
            Public Property SendMailIndicator As Boolean
            Public Property MailToProducerIndicator As Boolean
            Public Property InRuleErros As Boolean
            Public Property ProductMaster As InMotionGIT.Product.Entity.Contracts.ProductMaster
            Public Property AccumulatedAmount As Decimal
            Public Property CancelledPoliciesQuantity As Int32
            Public Property OtherPoliciesSameRiskQuantity As Int32
            Public Property InRuleMessage As String
            Public Property OnLinePrintIndicator As Boolean
            Public Property OnLinePrintResult As Int32
            Public Property PolicyDocument As String
            Public Property ErrorsFound As Boolean
            Public Property ReportURL As String
            Public Property FormStatus As Int32
            Public Property OnLinePrint As Int32
            Public Property StatusRun As Boolean
            Public Property ConsumerInformation As InMotionGIT.Common.Contracts.Process.ConsumerInformation
            Public Property DireccionMostrar As String
            Public Property ShowGeneral As Boolean
            Public Property ShowAdditionalInformation As Boolean
            Public Property ShowBasicInformation As Boolean
            Public Property ShowPaymentInformation As Boolean
            Public Property UnderwritingCase As InMotionGIT.Underwriting.Contracts.UnderwritingCase
            Public Property ShowAddressInformation As Boolean
            Public Property UsercodeBO As Int32
            Public Property UsercodeFASI As Int32

        End Class
#End Region

    End Class

End Namespace