'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Query Designer v7.1.120.1 at 2019/02/20 11:19:10 a.m. model release 1, Form Generator v1.0.34.18 - Query Generator v1.0.16.7
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class HT5CatalogoDeSuscripcionActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"
   
        <WebMethod()>
        Public Shared Function ItemsTblDataLoad() As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.UnderwritingRuleId = 0, .UnderwritingCaseType = 0, .UnderwritingRuleStatus = 0, .EffectiveDate = Date.MinValue, .CancellationDate = Date.MinValue, .UnderwritingArea = 0, .RequirementType = 0, .QuestionId = 0, .RecordStatus = 0, .UnderwritingRuleIdDesc = String.Empty, .UnderwritingCaseTypeDesc = String.Empty, .UnderwritingRuleStatusDesc = String.Empty, .UnderwritingAreaDesc = String.Empty, .RequirementTypeDesc = String.Empty, .QuestionIdDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT TABUNDERWRITINGRULE.UNDERWRITINGRULEID, TABUNDERWRITINGRULE.UNDERWRITINGCASETYPE, TABUNDERWRITINGRULE.UNDERWRITINGRULESTATUS, TABUNDERWRITINGRULE.EFFECTIVEDATE, TABUNDERWRITINGRULE.CANCELLATIONDATE, TABUNDERWRITINGRULE.UNDERWRITINGAREA, TABUNDERWRITINGRULE.REQUIREMENTTYPE, TABUNDERWRITINGRULE.QUESTIONID, TABUNDERWRITINGRULE.RECORDSTATUS, TRANSUNDERWRITINGRULE.DESCRIPTION UNDERWRITINGRULEIDDESC, TRANSUNDERWRITINGCASETYPE.DESCRIPTION UNDERWRITINGCASETYPEDESC, TRANSUNDERWRITINGRULESTYPE.DESCRIPTION UNDERWRITINGRULESTATUSDESC, TRANSUNDERWRITINGAREATYPE.DESCRIPTION UNDERWRITINGAREADESC, TRANSREQUIREMENTTYPE.DESCRIPTION REQUIREMENTTYPEDESC, TRANSQUESTIONSFROMREQUIREMENT.DESCRIPTION QUESTIONIDDESC FROM TABUNDERWRITINGRULE TABUNDERWRITINGRULE LEFT JOIN TRANSUNDERWRITINGRULE TRANSUNDERWRITINGRULE ON TRANSUNDERWRITINGRULE.UNDERWRITINGRULEID = TABUNDERWRITINGRULE.UNDERWRITINGRULEID  AND TRANSUNDERWRITINGRULE.EFFECTIVEDATE = TABUNDERWRITINGRULE.EFFECTIVEDATE LEFT JOIN TRANSUNDERWRITINGCASETYPE TRANSUNDERWRITINGCASETYPE ON TRANSUNDERWRITINGCASETYPE.UNDERWRITINGCASETYPE = TABUNDERWRITINGRULE.UNDERWRITINGCASETYPE LEFT JOIN TRANSUNDERWRITINGRULESTYPE TRANSUNDERWRITINGRULESTYPE ON TRANSUNDERWRITINGRULESTYPE.UNDERWRITINGRULESTATUS = TABUNDERWRITINGRULE.UNDERWRITINGRULESTATUS LEFT JOIN TRANSUNDERWRITINGAREATYPE TRANSUNDERWRITINGAREATYPE ON TRANSUNDERWRITINGAREATYPE.UNDERWRITINGAREA = TABUNDERWRITINGRULE.UNDERWRITINGAREA LEFT JOIN TRANSREQUIREMENTTYPE TRANSREQUIREMENTTYPE ON TRANSREQUIREMENTTYPE.REQUIREMENTTYPE = TABUNDERWRITINGRULE.REQUIREMENTTYPE LEFT JOIN TRANSQUESTIONSFROMREQUIREMENT TRANSQUESTIONSFROMREQUIREMENT ON TRANSQUESTIONSFROMREQUIREMENT.QUESTIONID = TABUNDERWRITINGRULE.QUESTIONID  WHERE TABUNDERWRITINGRULE.UNDERWRITINGAREA IS NOT NULL", "TABUNDERWRITINGRULE", "Linked.Underwriting")

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.UnderwritingRuleId = itemData.NumericValue("UNDERWRITINGRULEID"), .UnderwritingCaseType = itemData.NumericValue("UNDERWRITINGCASETYPE"), .UnderwritingRuleStatus = itemData.NumericValue("UNDERWRITINGRULESTATUS"), .EffectiveDate = itemData.DateTimeValue("EFFECTIVEDATE"), .CancellationDate = itemData.DateTimeValue("CANCELLATIONDATE"), .UnderwritingArea = itemData.NumericValue("UNDERWRITINGAREA"), .RequirementType = itemData.NumericValue("REQUIREMENTTYPE"), .QuestionId = itemData.NumericValue("QUESTIONID"), .RecordStatus = itemData.NumericValue("RECORDSTATUS"), .UnderwritingRuleIdDesc = itemData.StringValue("UNDERWRITINGRULEIDDESC"), .UnderwritingCaseTypeDesc = itemData.StringValue("UNDERWRITINGCASETYPEDESC"), .UnderwritingRuleStatusDesc = itemData.StringValue("UNDERWRITINGRULESTATUSDESC"), .UnderwritingAreaDesc = itemData.StringValue("UNDERWRITINGAREADESC"), .RequirementTypeDesc = itemData.StringValue("REQUIREMENTTYPEDESC"), .QuestionIdDesc = itemData.StringValue("QUESTIONIDDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CatalogoDeSuscripcion", "ItemsTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ItemsTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ItemsTblDataCount() As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT TABUNDERWRITINGRULE.UNDERWRITINGRULEID, TABUNDERWRITINGRULE.UNDERWRITINGCASETYPE, TABUNDERWRITINGRULE.UNDERWRITINGRULESTATUS, TABUNDERWRITINGRULE.EFFECTIVEDATE, TABUNDERWRITINGRULE.CANCELLATIONDATE, TABUNDERWRITINGRULE.UNDERWRITINGAREA, TABUNDERWRITINGRULE.REQUIREMENTTYPE, TABUNDERWRITINGRULE.QUESTIONID, TABUNDERWRITINGRULE.RECORDSTATUS, TRANSUNDERWRITINGRULE.DESCRIPTION UNDERWRITINGRULEIDDESC, TRANSUNDERWRITINGCASETYPE.DESCRIPTION UNDERWRITINGCASETYPEDESC, TRANSUNDERWRITINGRULESTYPE.DESCRIPTION UNDERWRITINGRULESTATUSDESC, TRANSUNDERWRITINGAREATYPE.DESCRIPTION UNDERWRITINGAREADESC, TRANSREQUIREMENTTYPE.DESCRIPTION REQUIREMENTTYPEDESC, TRANSQUESTIONSFROMREQUIREMENT.DESCRIPTION QUESTIONIDDESC FROM TABUNDERWRITINGRULE TABUNDERWRITINGRULE LEFT JOIN TRANSUNDERWRITINGRULE TRANSUNDERWRITINGRULE ON TRANSUNDERWRITINGRULE.UNDERWRITINGRULEID = TABUNDERWRITINGRULE.UNDERWRITINGRULEID  AND TRANSUNDERWRITINGRULE.EFFECTIVEDATE = TABUNDERWRITINGRULE.EFFECTIVEDATE LEFT JOIN TRANSUNDERWRITINGCASETYPE TRANSUNDERWRITINGCASETYPE ON TRANSUNDERWRITINGCASETYPE.UNDERWRITINGCASETYPE = TABUNDERWRITINGRULE.UNDERWRITINGCASETYPE LEFT JOIN TRANSUNDERWRITINGRULESTYPE TRANSUNDERWRITINGRULESTYPE ON TRANSUNDERWRITINGRULESTYPE.UNDERWRITINGRULESTATUS = TABUNDERWRITINGRULE.UNDERWRITINGRULESTATUS LEFT JOIN TRANSUNDERWRITINGAREATYPE TRANSUNDERWRITINGAREATYPE ON TRANSUNDERWRITINGAREATYPE.UNDERWRITINGAREA = TABUNDERWRITINGRULE.UNDERWRITINGAREA LEFT JOIN TRANSREQUIREMENTTYPE TRANSREQUIREMENTTYPE ON TRANSREQUIREMENTTYPE.REQUIREMENTTYPE = TABUNDERWRITINGRULE.REQUIREMENTTYPE LEFT JOIN TRANSQUESTIONSFROMREQUIREMENT TRANSQUESTIONSFROMREQUIREMENT ON TRANSQUESTIONSFROMREQUIREMENT.QUESTIONID = TABUNDERWRITINGRULE.QUESTIONID  WHERE TABUNDERWRITINGRULE.UNDERWRITINGAREA IS NOT NULL)", "TABUNDERWRITINGRULE", "Linked.Underwriting")

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CatalogoDeSuscripcion", "ItemsTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ItemsTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


        <WebMethod(EnableSession:=True)>
        Public Shared Function LookUpForTabUnderwritingRuleRecordStatus(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TRIM(ENUMRECORDSTATUS.RECORDSTATUS) RECORDSTATUS, TRIM(ENUMRECORDSTATUS.RECORDSTATUS) RECORDSTATUS, ETRANRECORDSTATUS.LANGUAGEID, ETRANRECORDSTATUS.DESCRIPTION, ETRANRECORDSTATUS.SHORTDESCRIPTION FROM ENUMRECORDSTATUS ENUMRECORDSTATUS JOIN ETRANRECORDSTATUS ETRANRECORDSTATUS ON ETRANRECORDSTATUS.RECORDSTATUS = ENUMRECORDSTATUS.RECORDSTATUS  WHERE ETRANRECORDSTATUS.LANGUAGEID = '{0}'  AND NOT DESCRIPTION IS NULL ORDER BY DESCRIPTION", InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId()), 
                                            "EnumRecordStatus", "Linked.Common")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.StringValue("RecordStatus"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5CatalogoDeSuscripcion", "LookUpForTabUnderwritingRuleRecordStatus", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForTabUnderwritingRuleRecordStatus")
                End With
            End Try
            Return result
        End Function

#End Region

#Region "Form Actions"


#End Region





#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As EntryData)
            If HttpContext.Current.Request.QueryString("RecordEffectiveDate").IsNotEmpty Then
                formData.RecordEffectiveDate = HttpContext.Current.Request.QueryString("RecordEffectiveDate")
            End If
            If HttpContext.Current.Request.QueryString("_AllowHistoryInfo").IsNotEmpty Then
                formData._AllowHistoryInfo = HttpContext.Current.Request.QueryString("_AllowHistoryInfo")
            End If

        End Sub	


#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property RecordEffectiveDate As DateTime
            <DataMember()> Public Property _AllowHistoryInfo As Object
            <DataMember()> Public Property RootItemsUnderwritingRuleId As System.Int32
            <DataMember()> Public Property RootItemsUnderwritingCaseType As System.Int32
            <DataMember()> Public Property RootItemsUnderwritingRuleStatus As System.Int32
            <DataMember()> Public Property RootItemsEffectiveDate As System.DateTime
            <DataMember()> Public Property RootItemsCancellationDate As System.DateTime
            <DataMember()> Public Property RootItemsUnderwritingArea As System.Int32
            <DataMember()> Public Property RootItemsRequirementType As System.Int32
            <DataMember()> Public Property RootItemsQuestionId As System.Int32
            <DataMember()> Public Property RootItemsRecordStatus As System.Int32
            <DataMember()> Public Property Items_Item As List(Of Items_ItemItem)

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Items_ItemItem

            <DataMember()> Public Property UnderwritingRuleId As System.Int32
            <DataMember()> Public Property UnderwritingRuleIdDesc As System.String
            <DataMember()> Public Property UnderwritingCaseType As System.Int32
            <DataMember()> Public Property UnderwritingCaseTypeDesc As System.String
            <DataMember()> Public Property UnderwritingRuleStatus As System.Int32
            <DataMember()> Public Property UnderwritingRuleStatusDesc As System.String
            <DataMember()> Public Property EffectiveDate As System.DateTime
            <DataMember()> Public Property CancellationDate As System.DateTime
            <DataMember()> Public Property UnderwritingArea As System.Int32
            <DataMember()> Public Property UnderwritingAreaDesc As System.String
            <DataMember()> Public Property RequirementType As System.Int32
            <DataMember()> Public Property RequirementTypeDesc As System.String
            <DataMember()> Public Property QuestionId As System.Int32
            <DataMember()> Public Property QuestionIdDesc As System.String
            <DataMember()> Public Property RecordStatus As System.Int32

        End Class


#End Region

    End Class

End Namespace