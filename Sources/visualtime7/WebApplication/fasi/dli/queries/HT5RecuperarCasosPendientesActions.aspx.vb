'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Query Designer v7.1.120.1 at 2019/03/01 02:18:25 p.m. model release 1, Form Generator v1.0.34.22 - Query Generator v1.0.16.8
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class HT5RecuperarCasosPendientesActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"
   
        <WebMethod()>
        Public Shared Function ItemsTblDataLoad(UNDERWRITINGCASEOPENDATE1 As DateTime, UNDERWRITINGCASEOPENDATE2 As DateTime) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.UnderwritingCaseID = 0, .OpenDate = Date.MinValue, .LineOfBusiness = 0, .Product = 0, .ClientName = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT UNDERWRITINGCASE.UNDERWRITINGCASEID, UNDERWRITINGCASE.OPENDATE, UNDERWRITINGCASE.LINEOFBUSINESS, UNDERWRITINGCASE.PRODUCT, ROLEINCASE.CLIENTNAME FROM UNDERWRITINGCASE UNDERWRITINGCASE JOIN ROLEINCASE ROLEINCASE ON ROLEINCASE.UNDERWRITINGCASEID = UNDERWRITINGCASE.UNDERWRITINGCASEID  WHERE UNDERWRITINGCASE.OPENDATE >= @:UNDERWRITINGCASEOPENDATE1 AND UNDERWRITINGCASE.OPENDATE <= @:UNDERWRITINGCASEOPENDATE2 AND UNDERWRITINGCASE.DECISION = '1' AND UNDERWRITINGCASE.STATUS = 9 AND (UNDERWRITINGCASE.POLICYID = '0' OR UNDERWRITINGCASE.POLICYID IS NULL) AND ROLEINCASE.ROLE = 2", "UNDERWRITINGCASE", "Linked.Underwriting")
                    .AddParameter("UNDERWRITINGCASEOPENDATE1", DbType.DateTime, 1, (UNDERWRITINGCASEOPENDATE1 = Date.MinValue), UNDERWRITINGCASEOPENDATE1)
                    .AddParameter("UNDERWRITINGCASEOPENDATE2", DbType.DateTime, 1, (UNDERWRITINGCASEOPENDATE2 = Date.MinValue), UNDERWRITINGCASEOPENDATE2)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.UnderwritingCaseID = itemData.NumericValue("UNDERWRITINGCASEID"), .OpenDate = itemData.DateTimeValue("OPENDATE"), .LineOfBusiness = itemData.NumericValue("LINEOFBUSINESS"), .Product = itemData.NumericValue("PRODUCT"), .ClientName = itemData.StringValue("CLIENTNAME")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5RecuperarCasosPendientes", "ItemsTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ItemsTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ItemsTblDataCount(UNDERWRITINGCASEOPENDATE1 As DateTime, UNDERWRITINGCASEOPENDATE2 As DateTime) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT UNDERWRITINGCASE.UNDERWRITINGCASEID, UNDERWRITINGCASE.OPENDATE, UNDERWRITINGCASE.LINEOFBUSINESS, UNDERWRITINGCASE.PRODUCT, ROLEINCASE.CLIENTNAME FROM UNDERWRITINGCASE UNDERWRITINGCASE JOIN ROLEINCASE ROLEINCASE ON ROLEINCASE.UNDERWRITINGCASEID = UNDERWRITINGCASE.UNDERWRITINGCASEID  WHERE UNDERWRITINGCASE.OPENDATE >= @:UNDERWRITINGCASEOPENDATE1 AND UNDERWRITINGCASE.OPENDATE <= @:UNDERWRITINGCASEOPENDATE2 AND UNDERWRITINGCASE.DECISION = '1' AND UNDERWRITINGCASE.STATUS = 9 AND (UNDERWRITINGCASE.POLICYID = '0' OR UNDERWRITINGCASE.POLICYID IS NULL) AND ROLEINCASE.ROLE = 2)", "UNDERWRITINGCASE", "Linked.Underwriting")
                    .AddParameter("UNDERWRITINGCASEOPENDATE1", DbType.DateTime, 1, (UNDERWRITINGCASEOPENDATE1 = Date.MinValue), UNDERWRITINGCASEOPENDATE1)
                    .AddParameter("UNDERWRITINGCASEOPENDATE2", DbType.DateTime, 1, (UNDERWRITINGCASEOPENDATE2 = Date.MinValue), UNDERWRITINGCASEOPENDATE2)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5RecuperarCasosPendientes", "ItemsTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ItemsTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


        <WebMethod()>
        Public Shared Function LookUpForUNDERWRITINGCASELineOfBusiness(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE{0}0.NBRANCH, TABLE{0}0.SDESCRIPT FROM TABLE{0}0 TABLE{0}0  WHERE TABLE{0}0.SSTATREGT = '{0}'  AND NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", "1"), 
                                            "TABLE10", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NBRANCH"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5RecuperarCasosPendientes", "LookUpForUNDERWRITINGCASELineOfBusiness", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForUNDERWRITINGCASELineOfBusiness")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForUNDERWRITINGCASEProduct(id As String, RootItemsLineOfBusiness As System.Int32) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  PRODMASTER.NPRODUCT, PRODMASTER.NBRANCH, PRODMASTER.SDESCRIPT FROM PRODMASTER PRODMASTER  WHERE PRODMASTER.SSTATREGT = '{0}'  AND (PRODMASTER.NBRANCH = @:PRODMASTERNBRANCHDependen AND NOT SDESCRIPT IS NULL) ORDER BY SDESCRIPT ", "1"), 
                                            "PRODMASTER", "Linked.LatCombined")
                    .AddParameter("PRODMASTERNBRANCHDependen", DbType.Int32, 0, False, RootItemsLineOfBusiness)

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NPRODUCT"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5RecuperarCasosPendientes", "LookUpForUNDERWRITINGCASEProduct", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForUNDERWRITINGCASEProduct")
                End With
            End Try
            Return result
        End Function

#End Region

#Region "Form Actions"


#End Region





#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As EntryData)
            If HttpContext.Current.Request.QueryString("Desde").IsNotEmpty Then
                formData.Desde = HttpContext.Current.Request.QueryString("Desde")
            End If
            If HttpContext.Current.Request.QueryString("Hasta").IsNotEmpty Then
                formData.Hasta = HttpContext.Current.Request.QueryString("Hasta")
            End If

        End Sub	


#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property Desde As DateTime
            <DataMember()> Public Property Hasta As DateTime
            <DataMember()> Public Property RootItemsUnderwritingCaseID As System.Int32
            <DataMember()> Public Property RootItemsOpenDate As System.DateTime
            <DataMember()> Public Property RootItemsLineOfBusiness As System.Int32
            <DataMember()> Public Property RootItemsProduct As System.Int32
            <DataMember()> Public Property RootItemsClientName As System.String
            <DataMember()> Public Property Items_Item As List(Of Items_ItemItem)

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Items_ItemItem

            <DataMember()> Public Property UnderwritingCaseID As System.Int32
            <DataMember()> Public Property OpenDate As System.DateTime
            <DataMember()> Public Property LineOfBusiness As System.Int32
            <DataMember()> Public Property Product As System.Int32
            <DataMember()> Public Property ClientName As System.String

        End Class


#End Region

    End Class

End Namespace