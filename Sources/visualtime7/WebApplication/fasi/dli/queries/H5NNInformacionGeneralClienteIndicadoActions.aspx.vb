'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Query Designer v7.1.120.1 at 2019/02/27 10:45:32 a.m. model release 1, Form Generator v1.0.34.22 - Query Generator v1.0.16.8
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class H5NNInformacionGeneralClienteIndicadoActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"
   
        <WebMethod()>
        Public Shared Function ItemsTblDataLoad(CLIENTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.SCLIENT = String.Empty, .sCliename = String.Empty, .SLEGALNAME = String.Empty, .sFirstname = String.Empty, .sLastname = String.Empty, .sLastName2 = String.Empty, .sSexClien = String.Empty, .nCivilSta = 0, .nWeight = 0, .nHeight = 0, .dBirthdat = Date.MinValue, .dDeathdat = Date.MinValue, .sSmoking = String.Empty, .nLanguage = 0, .nMailingPref = 0, .nTitle = 0, .nSpeciality = 0, .nNationality = 0, .nClass = 0, .dDependant = Date.MinValue, .dIndependant = Date.MinValue, .dInpdate = Date.MinValue, .SDIGIT = String.Empty, .NADDRESSID = 0, .sSexClienDesc = String.Empty, .nCivilStaDesc = String.Empty, .nLanguageDesc = String.Empty, .nMailingPrefDesc = String.Empty, .nTitleDesc = String.Empty, .nSpecialityDesc = String.Empty, .nNationalityDesc = String.Empty, .nClassDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLIENT.SCLIENT, CLIENT.SCLIENAME, CLIENT.SLEGALNAME, CLIENT.SFIRSTNAME, CLIENT.SLASTNAME, CLIENT.SLASTNAME2, CLIENT.SSEXCLIEN, CLIENT.NCIVILSTA, CLIENT.NWEIGHT, CLIENT.NHEIGHT, CLIENT.DBIRTHDAT, CLIENT.DDEATHDAT, CLIENT.SSMOKING, CLIENT.NLANGUAGE, CLIENT.NMAILINGPREF, CLIENT.NTITLE, CLIENT.NSPECIALITY, CLIENT.NNATIONALITY, CLIENT.NCLASS, CLIENT.DDEPENDANT, CLIENT.DINDEPENDANT, CLIENT.DINPDATE, CLIENT.SDIGIT, CLIENT.NADDRESSID, TABLE18.SDESCRIPT SSEXCLIENDESC, TABLE14.SDESCRIPT NCIVILSTADESC, TABLE85.SSHORT_DES NLANGUAGEDESC, TABLE4008.SDESCRIPT NMAILINGPREFDESC, TABLE222.SDESCRIPT NTITLEDESC, TABLE16.SDESCRIPT NSPECIALITYDESC, TABLE5518.SDESCRIPT NNATIONALITYDESC, TABLE146.SDESCRIPT NCLASSDESC FROM CLIENT CLIENT LEFT JOIN TABLE18 TABLE18 ON TABLE18.SSEXCLIEN = CLIENT.SSEXCLIEN LEFT JOIN TABLE14 TABLE14 ON TABLE14.NCIVILSTA = CLIENT.NCIVILSTA LEFT JOIN TABLE85 TABLE85 ON TABLE85.NLANGUAGE = CLIENT.NLANGUAGE LEFT JOIN TABLE4008 TABLE4008 ON TABLE4008.NMAILINGPREF = CLIENT.NMAILINGPREF LEFT JOIN TABLE222 TABLE222 ON TABLE222.NTITLE = CLIENT.NTITLE LEFT JOIN TABLE16 TABLE16 ON TABLE16.NSPECIALITY = CLIENT.NSPECIALITY LEFT JOIN TABLE5518 TABLE5518 ON TABLE5518.NNATIONALITY = CLIENT.NNATIONALITY LEFT JOIN TABLE146 TABLE146 ON TABLE146.NCLASS = CLIENT.NCLASS  WHERE CLIENT.SCLIENT = @:CLIENTSCLIENT1", "CLIENT", "Linked.LatCombined")
                    .AddParameter("CLIENTSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLIENTSCLIENT1 = String.Empty), CLIENTSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.SCLIENT = itemData.StringValue("SCLIENT"), .sCliename = itemData.StringValue("SCLIENAME"), .SLEGALNAME = itemData.StringValue("SLEGALNAME"), .sFirstname = itemData.StringValue("SFIRSTNAME"), .sLastname = itemData.StringValue("SLASTNAME"), .sLastName2 = itemData.StringValue("SLASTNAME2"), .sSexClien = itemData.StringValue("SSEXCLIEN"), .nCivilSta = itemData.NumericValue("NCIVILSTA"), .nWeight = itemData.NumericValue("NWEIGHT"), .nHeight = itemData.NumericValue("NHEIGHT"), .dBirthdat = itemData.DateTimeValue("DBIRTHDAT"), .dDeathdat = itemData.DateTimeValue("DDEATHDAT"), .sSmoking = itemData.StringValue("SSMOKING"), .nLanguage = itemData.NumericValue("NLANGUAGE"), .nMailingPref = itemData.NumericValue("NMAILINGPREF"), .nTitle = itemData.NumericValue("NTITLE"), .nSpeciality = itemData.NumericValue("NSPECIALITY"), .nNationality = itemData.NumericValue("NNATIONALITY"), .nClass = itemData.NumericValue("NCLASS"), .dDependant = itemData.DateTimeValue("DDEPENDANT"), .dIndependant = itemData.DateTimeValue("DINDEPENDANT"), .dInpdate = itemData.DateTimeValue("DINPDATE"), .SDIGIT = itemData.StringValue("SDIGIT"), .NADDRESSID = itemData.NumericValue("NADDRESSID"), .sSexClienDesc = itemData.StringValue("SSEXCLIENDESC"), .nCivilStaDesc = itemData.StringValue("NCIVILSTADESC"), .nLanguageDesc = itemData.StringValue("NLANGUAGEDESC"), .nMailingPrefDesc = itemData.StringValue("NMAILINGPREFDESC"), .nTitleDesc = itemData.StringValue("NTITLEDESC"), .nSpecialityDesc = itemData.StringValue("NSPECIALITYDESC"), .nNationalityDesc = itemData.StringValue("NNATIONALITYDESC"), .nClassDesc = itemData.StringValue("NCLASSDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "ItemsTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ItemsTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ItemsTblDataCount(CLIENTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLIENT.SCLIENT, CLIENT.SCLIENAME, CLIENT.SLEGALNAME, CLIENT.SFIRSTNAME, CLIENT.SLASTNAME, CLIENT.SLASTNAME2, CLIENT.SSEXCLIEN, CLIENT.NCIVILSTA, CLIENT.NWEIGHT, CLIENT.NHEIGHT, CLIENT.DBIRTHDAT, CLIENT.DDEATHDAT, CLIENT.SSMOKING, CLIENT.NLANGUAGE, CLIENT.NMAILINGPREF, CLIENT.NTITLE, CLIENT.NSPECIALITY, CLIENT.NNATIONALITY, CLIENT.NCLASS, CLIENT.DDEPENDANT, CLIENT.DINDEPENDANT, CLIENT.DINPDATE, CLIENT.SDIGIT, CLIENT.NADDRESSID, TABLE18.SDESCRIPT SSEXCLIENDESC, TABLE14.SDESCRIPT NCIVILSTADESC, TABLE85.SSHORT_DES NLANGUAGEDESC, TABLE4008.SDESCRIPT NMAILINGPREFDESC, TABLE222.SDESCRIPT NTITLEDESC, TABLE16.SDESCRIPT NSPECIALITYDESC, TABLE5518.SDESCRIPT NNATIONALITYDESC, TABLE146.SDESCRIPT NCLASSDESC FROM CLIENT CLIENT LEFT JOIN TABLE18 TABLE18 ON TABLE18.SSEXCLIEN = CLIENT.SSEXCLIEN LEFT JOIN TABLE14 TABLE14 ON TABLE14.NCIVILSTA = CLIENT.NCIVILSTA LEFT JOIN TABLE85 TABLE85 ON TABLE85.NLANGUAGE = CLIENT.NLANGUAGE LEFT JOIN TABLE4008 TABLE4008 ON TABLE4008.NMAILINGPREF = CLIENT.NMAILINGPREF LEFT JOIN TABLE222 TABLE222 ON TABLE222.NTITLE = CLIENT.NTITLE LEFT JOIN TABLE16 TABLE16 ON TABLE16.NSPECIALITY = CLIENT.NSPECIALITY LEFT JOIN TABLE5518 TABLE5518 ON TABLE5518.NNATIONALITY = CLIENT.NNATIONALITY LEFT JOIN TABLE146 TABLE146 ON TABLE146.NCLASS = CLIENT.NCLASS  WHERE CLIENT.SCLIENT = @:CLIENTSCLIENT1)", "CLIENT", "Linked.LatCombined")
                    .AddParameter("CLIENTSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLIENTSCLIENT1 = String.Empty), CLIENTSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "ItemsTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ItemsTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function PHYSICALADDRESSESTblDataLoad(PHYSICALADDRESSESADDRESSID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.TypeOfPhysicalAddress = 0, .AddressNormalizedI = String.Empty, .AddressNormalizedII = String.Empty, .ZipCode = String.Empty, .CancellationDate = Date.MinValue, .AddressID = 0, .EffectiveDate = Date.MinValue, .InternalAddressKey = 0, .TypeOfPhysicalAddressDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT PHYSICALADDRESSES.TYPEOFPHYSICALADDRESS, PHYSICALADDRESSES.ADDRESSNORMALIZEDI, PHYSICALADDRESSES.ADDRESSNORMALIZEDII, PHYSICALADDRESSES.ZIPCODE, PHYSICALADDRESSES.CANCELLATIONDATE, PHYSICALADDRESSES.ADDRESSID, PHYSICALADDRESSES.EFFECTIVEDATE, PHYSICALADDRESSES.INTERNALADDRESSKEY, ETRANTYPEOFPHYSICALADDRESS.DESCRIPTION TYPEOFPHYSICALADDRESSDESC FROM PHYSICALADDRESSES PHYSICALADDRESSES LEFT JOIN ETRANTYPEOFPHYSICALADDRESS ETRANTYPEOFPHYSICALADDRESS ON ETRANTYPEOFPHYSICALADDRESS.TYPEOFPHYSICALADDRESS = PHYSICALADDRESSES.TYPEOFPHYSICALADDRESS  WHERE PHYSICALADDRESSES.ADDRESSID = @:PHYSICALADDRESSESADDRESSID1", "PHYSICALADDRESSES", "Linked.Address")
                    .AddParameter("PHYSICALADDRESSESADDRESSID1", DbType.AnsiStringFixedLength, 0, (PHYSICALADDRESSESADDRESSID1 = String.Empty), PHYSICALADDRESSESADDRESSID1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.TypeOfPhysicalAddress = itemData.NumericValue("TYPEOFPHYSICALADDRESS"), .AddressNormalizedI = itemData.StringValue("ADDRESSNORMALIZEDI"), .AddressNormalizedII = itemData.StringValue("ADDRESSNORMALIZEDII"), .ZipCode = itemData.StringValue("ZIPCODE"), .CancellationDate = itemData.DateTimeValue("CANCELLATIONDATE"), .AddressID = itemData.NumericValue("ADDRESSID"), .EffectiveDate = itemData.DateTimeValue("EFFECTIVEDATE"), .InternalAddressKey = itemData.NumericValue("INTERNALADDRESSKEY"), .TypeOfPhysicalAddressDesc = itemData.StringValue("TYPEOFPHYSICALADDRESSDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "PHYSICALADDRESSESTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PHYSICALADDRESSESTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function PHYSICALADDRESSESTblDataCount(PHYSICALADDRESSESADDRESSID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT PHYSICALADDRESSES.TYPEOFPHYSICALADDRESS, PHYSICALADDRESSES.ADDRESSNORMALIZEDI, PHYSICALADDRESSES.ADDRESSNORMALIZEDII, PHYSICALADDRESSES.ZIPCODE, PHYSICALADDRESSES.CANCELLATIONDATE, PHYSICALADDRESSES.ADDRESSID, PHYSICALADDRESSES.EFFECTIVEDATE, PHYSICALADDRESSES.INTERNALADDRESSKEY, ETRANTYPEOFPHYSICALADDRESS.DESCRIPTION TYPEOFPHYSICALADDRESSDESC FROM PHYSICALADDRESSES PHYSICALADDRESSES LEFT JOIN ETRANTYPEOFPHYSICALADDRESS ETRANTYPEOFPHYSICALADDRESS ON ETRANTYPEOFPHYSICALADDRESS.TYPEOFPHYSICALADDRESS = PHYSICALADDRESSES.TYPEOFPHYSICALADDRESS  WHERE PHYSICALADDRESSES.ADDRESSID = @:PHYSICALADDRESSESADDRESSID1)", "PHYSICALADDRESSES", "Linked.Address")
                    .AddParameter("PHYSICALADDRESSESADDRESSID1", DbType.AnsiStringFixedLength, 0, (PHYSICALADDRESSESADDRESSID1 = String.Empty), PHYSICALADDRESSESADDRESSID1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "PHYSICALADDRESSESTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PHYSICALADDRESSESTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function PHYSICALADDRESSESSelectCommandActionPHYSICALADDRESSES(PHYSICALADDRESSESADDRESSID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(PHYSICALADDRESSES.TYPEOFPHYSICALADDRESS) COUNTDATA FROM PHYSICALADDRESSES PHYSICALADDRESSES LEFT JOIN ETRANTYPEOFPHYSICALADDRESS ETRANTYPEOFPHYSICALADDRESS ON ETRANTYPEOFPHYSICALADDRESS.TYPEOFPHYSICALADDRESS = PHYSICALADDRESSES.TYPEOFPHYSICALADDRESS  WHERE PHYSICALADDRESSES.ADDRESSID = @:PHYSICALADDRESSESADDRESSID1", "PHYSICALADDRESSES", "Linked.Address")
                    .AddParameter("PHYSICALADDRESSESADDRESSID1", DbType.AnsiStringFixedLength, 0, (PHYSICALADDRESSESADDRESSID1 = String.Empty), PHYSICALADDRESSESADDRESSID1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "PHYSICALADDRESSESSelectCommandActionPHYSICALADDRESSES", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PHYSICALADDRESSESSelectCommandActionPHYSICALADDRESSES)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function EMAILSTblDataLoad(EMAILSADDRESSID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.eMail = String.Empty, .HasBeenConfirmed = String.Empty, .CancellationDate = Date.MinValue, .EffectiveDate = Date.MinValue, .AddressID = 0, .InternalAddressKey = 0}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT EMAILS.EMAIL, EMAILS.HASBEENCONFIRMED, EMAILS.CANCELLATIONDATE, EMAILS.EFFECTIVEDATE, EMAILS.ADDRESSID, EMAILS.INTERNALADDRESSKEY FROM EMAILS EMAILS  WHERE EMAILS.ADDRESSID = @:EMAILSADDRESSID1", "EMAILS", "Linked.Address")
                    .AddParameter("EMAILSADDRESSID1", DbType.AnsiStringFixedLength, 0, (EMAILSADDRESSID1 = String.Empty), EMAILSADDRESSID1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.eMail = itemData.StringValue("EMAIL"), .HasBeenConfirmed = itemData.StringValue("HASBEENCONFIRMED"), .CancellationDate = itemData.DateTimeValue("CANCELLATIONDATE"), .EffectiveDate = itemData.DateTimeValue("EFFECTIVEDATE"), .AddressID = itemData.NumericValue("ADDRESSID"), .InternalAddressKey = itemData.NumericValue("INTERNALADDRESSKEY")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "EMAILSTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (EMAILSTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function EMAILSTblDataCount(EMAILSADDRESSID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT EMAILS.EMAIL, EMAILS.HASBEENCONFIRMED, EMAILS.CANCELLATIONDATE, EMAILS.EFFECTIVEDATE, EMAILS.ADDRESSID, EMAILS.INTERNALADDRESSKEY FROM EMAILS EMAILS  WHERE EMAILS.ADDRESSID = @:EMAILSADDRESSID1)", "EMAILS", "Linked.Address")
                    .AddParameter("EMAILSADDRESSID1", DbType.AnsiStringFixedLength, 0, (EMAILSADDRESSID1 = String.Empty), EMAILSADDRESSID1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "EMAILSTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (EMAILSTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function EMAILSSelectCommandActionEMAILS(EMAILSADDRESSID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(EMAILS.ADDRESSID) COUNTDATA FROM EMAILS EMAILS  WHERE EMAILS.ADDRESSID = @:EMAILSADDRESSID1", "EMAILS", "Linked.Address")
                    .AddParameter("EMAILSADDRESSID1", DbType.AnsiStringFixedLength, 0, (EMAILSADDRESSID1 = String.Empty), EMAILSADDRESSID1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "EMAILSSelectCommandActionEMAILS", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (EMAILSSelectCommandActionEMAILS)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function SOCIALNETWORKTblDataLoad(SOCIALNETWORKADDRESSID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NetworkType = 0, .NetworkValue = String.Empty, .AddressID = 0, .EffectiveDate = Date.MinValue, .CancellationDate = Date.MinValue, .InternalAddressKey = 0, .NetworkTypeDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT SOCIALNETWORK.NETWORKTYPE, SOCIALNETWORK.NETWORKVALUE, SOCIALNETWORK.ADDRESSID, SOCIALNETWORK.EFFECTIVEDATE, SOCIALNETWORK.CANCELLATIONDATE, SOCIALNETWORK.INTERNALADDRESSKEY, TRANSNETWORKTYPE.DESCRIPTION NETWORKTYPEDESC FROM SOCIALNETWORK SOCIALNETWORK LEFT JOIN TRANSNETWORKTYPE TRANSNETWORKTYPE ON TRANSNETWORKTYPE.NETWORKTYPE = SOCIALNETWORK.NETWORKTYPE  WHERE SOCIALNETWORK.ADDRESSID = @:SOCIALNETWORKADDRESSID1", "SOCIALNETWORK", "Linked.Address")
                    .AddParameter("SOCIALNETWORKADDRESSID1", DbType.AnsiStringFixedLength, 0, (SOCIALNETWORKADDRESSID1 = String.Empty), SOCIALNETWORKADDRESSID1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NetworkType = itemData.NumericValue("NETWORKTYPE"), .NetworkValue = itemData.StringValue("NETWORKVALUE"), .AddressID = itemData.NumericValue("ADDRESSID"), .EffectiveDate = itemData.DateTimeValue("EFFECTIVEDATE"), .CancellationDate = itemData.DateTimeValue("CANCELLATIONDATE"), .InternalAddressKey = itemData.NumericValue("INTERNALADDRESSKEY"), .NetworkTypeDesc = itemData.StringValue("NETWORKTYPEDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "SOCIALNETWORKTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (SOCIALNETWORKTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function SOCIALNETWORKTblDataCount(SOCIALNETWORKADDRESSID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT SOCIALNETWORK.NETWORKTYPE, SOCIALNETWORK.NETWORKVALUE, SOCIALNETWORK.ADDRESSID, SOCIALNETWORK.EFFECTIVEDATE, SOCIALNETWORK.CANCELLATIONDATE, SOCIALNETWORK.INTERNALADDRESSKEY, TRANSNETWORKTYPE.DESCRIPTION NETWORKTYPEDESC FROM SOCIALNETWORK SOCIALNETWORK LEFT JOIN TRANSNETWORKTYPE TRANSNETWORKTYPE ON TRANSNETWORKTYPE.NETWORKTYPE = SOCIALNETWORK.NETWORKTYPE  WHERE SOCIALNETWORK.ADDRESSID = @:SOCIALNETWORKADDRESSID1)", "SOCIALNETWORK", "Linked.Address")
                    .AddParameter("SOCIALNETWORKADDRESSID1", DbType.AnsiStringFixedLength, 0, (SOCIALNETWORKADDRESSID1 = String.Empty), SOCIALNETWORKADDRESSID1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "SOCIALNETWORKTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (SOCIALNETWORKTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function SOCIALNETWORKSelectCommandActionSOCIALNETWORK(SOCIALNETWORKADDRESSID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(SOCIALNETWORK.NETWORKTYPE) COUNTDATA FROM SOCIALNETWORK SOCIALNETWORK LEFT JOIN TRANSNETWORKTYPE TRANSNETWORKTYPE ON TRANSNETWORKTYPE.NETWORKTYPE = SOCIALNETWORK.NETWORKTYPE  WHERE SOCIALNETWORK.ADDRESSID = @:SOCIALNETWORKADDRESSID1", "SOCIALNETWORK", "Linked.Address")
                    .AddParameter("SOCIALNETWORKADDRESSID1", DbType.AnsiStringFixedLength, 0, (SOCIALNETWORKADDRESSID1 = String.Empty), SOCIALNETWORKADDRESSID1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "SOCIALNETWORKSelectCommandActionSOCIALNETWORK", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (SOCIALNETWORKSelectCommandActionSOCIALNETWORK)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function OTHERTYPEADDRESSTblDataLoad(OTHERTYPEADDRESSADDRESSID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.CountryID = 0, .POBox = String.Empty, .Url = String.Empty, .AddressValidatedElectronically = String.Empty, .CancellationDate = Date.MinValue, .EffectiveDate = Date.MinValue, .AddressID = 0, .InternalAddressKey = 0}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT OTHERTYPEADDRESS.COUNTRYID, OTHERTYPEADDRESS.POBOX, OTHERTYPEADDRESS.URL, OTHERTYPEADDRESS.ADDRESSVALIDATEDELECTRONICALLY, OTHERTYPEADDRESS.CANCELLATIONDATE, OTHERTYPEADDRESS.EFFECTIVEDATE, OTHERTYPEADDRESS.ADDRESSID, OTHERTYPEADDRESS.INTERNALADDRESSKEY FROM OTHERTYPEADDRESS OTHERTYPEADDRESS  WHERE OTHERTYPEADDRESS.ADDRESSID = @:OTHERTYPEADDRESSADDRESSID1", "OTHERTYPEADDRESS", "Linked.Address")
                    .AddParameter("OTHERTYPEADDRESSADDRESSID1", DbType.AnsiStringFixedLength, 0, (OTHERTYPEADDRESSADDRESSID1 = String.Empty), OTHERTYPEADDRESSADDRESSID1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.CountryID = itemData.NumericValue("COUNTRYID"), .POBox = itemData.StringValue("POBOX"), .Url = itemData.StringValue("URL"), .AddressValidatedElectronically = itemData.StringValue("ADDRESSVALIDATEDELECTRONICALLY"), .CancellationDate = itemData.DateTimeValue("CANCELLATIONDATE"), .EffectiveDate = itemData.DateTimeValue("EFFECTIVEDATE"), .AddressID = itemData.NumericValue("ADDRESSID"), .InternalAddressKey = itemData.NumericValue("INTERNALADDRESSKEY")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "OTHERTYPEADDRESSTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (OTHERTYPEADDRESSTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function OTHERTYPEADDRESSTblDataCount(OTHERTYPEADDRESSADDRESSID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT OTHERTYPEADDRESS.COUNTRYID, OTHERTYPEADDRESS.POBOX, OTHERTYPEADDRESS.URL, OTHERTYPEADDRESS.ADDRESSVALIDATEDELECTRONICALLY, OTHERTYPEADDRESS.CANCELLATIONDATE, OTHERTYPEADDRESS.EFFECTIVEDATE, OTHERTYPEADDRESS.ADDRESSID, OTHERTYPEADDRESS.INTERNALADDRESSKEY FROM OTHERTYPEADDRESS OTHERTYPEADDRESS  WHERE OTHERTYPEADDRESS.ADDRESSID = @:OTHERTYPEADDRESSADDRESSID1)", "OTHERTYPEADDRESS", "Linked.Address")
                    .AddParameter("OTHERTYPEADDRESSADDRESSID1", DbType.AnsiStringFixedLength, 0, (OTHERTYPEADDRESSADDRESSID1 = String.Empty), OTHERTYPEADDRESSADDRESSID1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "OTHERTYPEADDRESSTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (OTHERTYPEADDRESSTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function OTHERTYPEADDRESSSelectCommandActionOTHERTYPEADDRESS(OTHERTYPEADDRESSADDRESSID1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(OTHERTYPEADDRESS.COUNTRYID) COUNTDATA FROM OTHERTYPEADDRESS OTHERTYPEADDRESS  WHERE OTHERTYPEADDRESS.ADDRESSID = @:OTHERTYPEADDRESSADDRESSID1", "OTHERTYPEADDRESS", "Linked.Address")
                    .AddParameter("OTHERTYPEADDRESSADDRESSID1", DbType.AnsiStringFixedLength, 0, (OTHERTYPEADDRESSADDRESSID1 = String.Empty), OTHERTYPEADDRESSADDRESSID1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "OTHERTYPEADDRESSSelectCommandActionOTHERTYPEADDRESS", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (OTHERTYPEADDRESSSelectCommandActionOTHERTYPEADDRESS)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CertificatTblDataLoad(filter As String, CERTIFICATSCLIENT1 As String, CERTIFICATSCLIENT5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nBranch = 0, .nProduct = 0, .nPolicy = 0, .nCapital = 0, .dIssuedat = Date.MinValue, .dStartdate = Date.MinValue, .dExpirdat = Date.MinValue, .dNulldate = Date.MinValue, .nNullcode = 0, .nPayfreq = 0, .sStatusva = String.Empty, .nWait_code = 0, .sRenewal = String.Empty, .dChangdat = Date.MinValue, .nBranchDesc = String.Empty, .nProductDesc = String.Empty, .nNullcodeDesc = String.Empty, .nPayfreqDesc = String.Empty, .sStatusvaDesc = String.Empty, .nWait_codeDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CERTIFICAT.NBRANCH, CERTIFICAT.NPRODUCT, CERTIFICAT.NPOLICY, CERTIFICAT.NCAPITAL, CERTIFICAT.DISSUEDAT, CERTIFICAT.DSTARTDATE, CERTIFICAT.DEXPIRDAT, CERTIFICAT.DNULLDATE, CERTIFICAT.NNULLCODE, CERTIFICAT.NPAYFREQ, CERTIFICAT.SSTATUSVA, CERTIFICAT.NWAIT_CODE, CERTIFICAT.SRENEWAL, CERTIFICAT.DCHANGDAT, CERTIFICAT.SCLIENT SCLIENT, TABLE10.SDESCRIPT NBRANCHDESC, PRODMASTER.SDESCRIPT NPRODUCTDESC, TABLE13.SDESCRIPT NNULLCODEDESC, TABLE36.SDESCRIPT NPAYFREQDESC, TABLE181.SDESCRIPT SSTATUSVADESC, TAB_WAITPO.SDESCRIPT NWAIT_CODEDESC, POLICY.NINTERMED NINTERMED, POLICY.SPOLITYPE SPOLITYPE FROM CERTIFICAT CERTIFICAT LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = CERTIFICAT.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = CERTIFICAT.NBRANCH  AND PRODMASTER.NPRODUCT = CERTIFICAT.NPRODUCT LEFT JOIN TABLE13 TABLE13 ON TABLE13.NNULLCODE = CERTIFICAT.NNULLCODE LEFT JOIN TABLE36 TABLE36 ON TABLE36.NPAYFREQ = CERTIFICAT.NPAYFREQ LEFT JOIN TABLE181 TABLE181 ON TABLE181.SSTATUSVA = CERTIFICAT.SSTATUSVA LEFT JOIN TAB_WAITPO TAB_WAITPO ON TAB_WAITPO.NWAIT_CODE = CERTIFICAT.NWAIT_CODE LEFT JOIN POLICY POLICY ON POLICY.SCERTYPE = CERTIFICAT.SCERTYPE  AND POLICY.NBRANCH = CERTIFICAT.NBRANCH  AND POLICY.NPRODUCT = CERTIFICAT.NPRODUCT  AND POLICY.NPOLICY = CERTIFICAT.NPOLICY  WHERE CERTIFICAT.SCLIENT = @:CERTIFICATSCLIENT1 AND POLICY.SPOLITYPE = '1' AND CERTIFICAT.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND CERTIFICAT.SCLIENT = @:CERTIFICATSCLIENT5", "CERTIFICAT", "Linked.LatCombined")
                    .AddParameter("CERTIFICATSCLIENT1", DbType.AnsiStringFixedLength, 0, (CERTIFICATSCLIENT1 = String.Empty), CERTIFICATSCLIENT1)
                    .AddParameter("CERTIFICATSCLIENT5", DbType.AnsiStringFixedLength, 0, (CERTIFICATSCLIENT5 = String.Empty), CERTIFICATSCLIENT5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nBranch = itemData.NumericValue("NBRANCH"), .nProduct = itemData.NumericValue("NPRODUCT"), .nPolicy = itemData.NumericValue("NPOLICY"), .nCapital = itemData.NumericValue("NCAPITAL"), .dIssuedat = itemData.DateTimeValue("DISSUEDAT"), .dStartdate = itemData.DateTimeValue("DSTARTDATE"), .dExpirdat = itemData.DateTimeValue("DEXPIRDAT"), .dNulldate = itemData.DateTimeValue("DNULLDATE"), .nNullcode = itemData.NumericValue("NNULLCODE"), .nPayfreq = itemData.NumericValue("NPAYFREQ"), .sStatusva = itemData.StringValue("SSTATUSVA"), .nWait_code = itemData.NumericValue("NWAIT_CODE"), .sRenewal = itemData.StringValue("SRENEWAL"), .dChangdat = itemData.DateTimeValue("DCHANGDAT"), .nBranchDesc = itemData.StringValue("NBRANCHDESC"), .nProductDesc = itemData.StringValue("NPRODUCTDESC"), .nNullcodeDesc = itemData.StringValue("NNULLCODEDESC"), .nPayfreqDesc = itemData.StringValue("NPAYFREQDESC"), .sStatusvaDesc = itemData.StringValue("SSTATUSVADESC"), .nWait_codeDesc = itemData.StringValue("NWAIT_CODEDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "CertificatTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CertificatTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CertificatTblDataCount(filter As String, CERTIFICATSCLIENT1 As String, CERTIFICATSCLIENT5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CERTIFICAT.NBRANCH, CERTIFICAT.NPRODUCT, CERTIFICAT.NPOLICY, CERTIFICAT.NCAPITAL, CERTIFICAT.DISSUEDAT, CERTIFICAT.DSTARTDATE, CERTIFICAT.DEXPIRDAT, CERTIFICAT.DNULLDATE, CERTIFICAT.NNULLCODE, CERTIFICAT.NPAYFREQ, CERTIFICAT.SSTATUSVA, CERTIFICAT.NWAIT_CODE, CERTIFICAT.SRENEWAL, CERTIFICAT.DCHANGDAT, CERTIFICAT.SCLIENT SCLIENT, TABLE10.SDESCRIPT NBRANCHDESC, PRODMASTER.SDESCRIPT NPRODUCTDESC, TABLE13.SDESCRIPT NNULLCODEDESC, TABLE36.SDESCRIPT NPAYFREQDESC, TABLE181.SDESCRIPT SSTATUSVADESC, TAB_WAITPO.SDESCRIPT NWAIT_CODEDESC, POLICY.NINTERMED NINTERMED, POLICY.SPOLITYPE SPOLITYPE FROM CERTIFICAT CERTIFICAT LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = CERTIFICAT.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = CERTIFICAT.NBRANCH  AND PRODMASTER.NPRODUCT = CERTIFICAT.NPRODUCT LEFT JOIN TABLE13 TABLE13 ON TABLE13.NNULLCODE = CERTIFICAT.NNULLCODE LEFT JOIN TABLE36 TABLE36 ON TABLE36.NPAYFREQ = CERTIFICAT.NPAYFREQ LEFT JOIN TABLE181 TABLE181 ON TABLE181.SSTATUSVA = CERTIFICAT.SSTATUSVA LEFT JOIN TAB_WAITPO TAB_WAITPO ON TAB_WAITPO.NWAIT_CODE = CERTIFICAT.NWAIT_CODE LEFT JOIN POLICY POLICY ON POLICY.SCERTYPE = CERTIFICAT.SCERTYPE  AND POLICY.NBRANCH = CERTIFICAT.NBRANCH  AND POLICY.NPRODUCT = CERTIFICAT.NPRODUCT  AND POLICY.NPOLICY = CERTIFICAT.NPOLICY  WHERE CERTIFICAT.SCLIENT = @:CERTIFICATSCLIENT1 AND POLICY.SPOLITYPE = '1' AND CERTIFICAT.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND CERTIFICAT.SCLIENT = @:CERTIFICATSCLIENT5)", "CERTIFICAT", "Linked.LatCombined")
                    .AddParameter("CERTIFICATSCLIENT1", DbType.AnsiStringFixedLength, 0, (CERTIFICATSCLIENT1 = String.Empty), CERTIFICATSCLIENT1)
                    .AddParameter("CERTIFICATSCLIENT5", DbType.AnsiStringFixedLength, 0, (CERTIFICATSCLIENT5 = String.Empty), CERTIFICATSCLIENT5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "CertificatTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CertificatTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CertificatSelectCommandActionCERTIFICAT(CERTIFICATSCLIENT1 As String, CERTIFICATSCLIENT5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CERTIFICAT.NBRANCH) COUNTDATA FROM CERTIFICAT CERTIFICAT LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = CERTIFICAT.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = CERTIFICAT.NBRANCH  AND PRODMASTER.NPRODUCT = CERTIFICAT.NPRODUCT LEFT JOIN TABLE13 TABLE13 ON TABLE13.NNULLCODE = CERTIFICAT.NNULLCODE LEFT JOIN TABLE36 TABLE36 ON TABLE36.NPAYFREQ = CERTIFICAT.NPAYFREQ LEFT JOIN TABLE181 TABLE181 ON TABLE181.SSTATUSVA = CERTIFICAT.SSTATUSVA LEFT JOIN TAB_WAITPO TAB_WAITPO ON TAB_WAITPO.NWAIT_CODE = CERTIFICAT.NWAIT_CODE LEFT JOIN POLICY POLICY ON POLICY.SCERTYPE = CERTIFICAT.SCERTYPE  AND POLICY.NBRANCH = CERTIFICAT.NBRANCH  AND POLICY.NPRODUCT = CERTIFICAT.NPRODUCT  AND POLICY.NPOLICY = CERTIFICAT.NPOLICY  WHERE CERTIFICAT.SCLIENT = @:CERTIFICATSCLIENT1 AND POLICY.SPOLITYPE = '1' AND CERTIFICAT.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND CERTIFICAT.SCLIENT = @:CERTIFICATSCLIENT5", "CERTIFICAT", "Linked.LatCombined")
                    .AddParameter("CERTIFICATSCLIENT1", DbType.AnsiStringFixedLength, 0, (CERTIFICATSCLIENT1 = String.Empty), CERTIFICATSCLIENT1)
                    .AddParameter("CERTIFICATSCLIENT5", DbType.AnsiStringFixedLength, 0, (CERTIFICATSCLIENT5 = String.Empty), CERTIFICATSCLIENT5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "CertificatSelectCommandActionCERTIFICAT", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CertificatSelectCommandActionCERTIFICAT)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function PremiumTblDataLoad(filter As String, PREMIUMSCLIENT3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nCurrency = 0, .nStatus_pre = 0, .nReceipt = 0, .nBranch = 0, .nProduct = 0, .nPolicy = 0, .nTratypei = 0, .nPremium = 0, .NBALANCE = 0, .dIssuedat = Date.MinValue, .DEFFECDATE = Date.MinValue, .dExpirdat = Date.MinValue, .nCollector = 0, .sReject = String.Empty, .dLimitDate = Date.MinValue, .nWay_pay = 0, .NINTERMED = 0, .nParticip = 0, .nComamou = 0, .nType = 0, .sStatusva = String.Empty, .sManauti = String.Empty, .nCurrencyDesc = String.Empty, .nStatus_preDesc = String.Empty, .nBranchDesc = String.Empty, .nProductDesc = String.Empty, .nTratypeiDesc = String.Empty, .nWay_payDesc = String.Empty, .sStatusvaDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT PREMIUM.NCURRENCY, PREMIUM.NSTATUS_PRE, PREMIUM.NRECEIPT, PREMIUM.NBRANCH, PREMIUM.NPRODUCT, PREMIUM.NPOLICY, PREMIUM.NTRATYPEI, PREMIUM.NPREMIUM, PREMIUM.NBALANCE, PREMIUM.DISSUEDAT, PREMIUM.DEFFECDATE, PREMIUM.DEXPIRDAT, PREMIUM.NCOLLECTOR, PREMIUM.SREJECT, PREMIUM.DLIMITDATE, PREMIUM.NWAY_PAY, PREMIUM.NINTERMED, PREMIUM.NPARTICIP, PREMIUM.NCOMAMOU, PREMIUM.NTYPE, PREMIUM.SSTATUSVA, PREMIUM.SMANAUTI, TABLE11.SSHORT_DES NCURRENCYDESC, TABLE19.SDESCRIPT NSTATUS_PREDESC, TABLE10.SDESCRIPT NBRANCHDESC, PRODMASTER.SDESCRIPT NPRODUCTDESC, TABLE24.SDESCRIPT NTRATYPEIDESC, TABLE5002.SDESCRIPT NWAY_PAYDESC, TABLE181.SDESCRIPT SSTATUSVADESC FROM PREMIUM PREMIUM LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = PREMIUM.NCURRENCY LEFT JOIN TABLE19 TABLE19 ON TABLE19.NSTATUS_PRE = PREMIUM.NSTATUS_PRE LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = PREMIUM.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = PREMIUM.NBRANCH  AND PRODMASTER.NPRODUCT = PREMIUM.NPRODUCT LEFT JOIN TABLE24 TABLE24 ON TABLE24.NTRATYPEI = PREMIUM.NTRATYPEI LEFT JOIN TABLE5002 TABLE5002 ON TABLE5002.NWAY_PAY = PREMIUM.NWAY_PAY LEFT JOIN TABLE181 TABLE181 ON TABLE181.SSTATUSVA = PREMIUM.SSTATUSVA  WHERE PREMIUM.NDIGIT = 0 AND PREMIUM.SSTATUSVA <> '3' AND PREMIUM.SCLIENT = @:PREMIUMSCLIENT3", "PREMIUM", "Linked.LatCombined")
                    .AddParameter("PREMIUMSCLIENT3", DbType.AnsiStringFixedLength, 0, (PREMIUMSCLIENT3 = String.Empty), PREMIUMSCLIENT3)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nCurrency = itemData.NumericValue("NCURRENCY"), .nStatus_pre = itemData.NumericValue("NSTATUS_PRE"), .nReceipt = itemData.NumericValue("NRECEIPT"), .nBranch = itemData.NumericValue("NBRANCH"), .nProduct = itemData.NumericValue("NPRODUCT"), .nPolicy = itemData.NumericValue("NPOLICY"), .nTratypei = itemData.NumericValue("NTRATYPEI"), .nPremium = itemData.NumericValue("NPREMIUM"), .NBALANCE = itemData.NumericValue("NBALANCE"), .dIssuedat = itemData.DateTimeValue("DISSUEDAT"), .DEFFECDATE = itemData.DateTimeValue("DEFFECDATE"), .dExpirdat = itemData.DateTimeValue("DEXPIRDAT"), .nCollector = itemData.NumericValue("NCOLLECTOR"), .sReject = itemData.StringValue("SREJECT"), .dLimitDate = itemData.DateTimeValue("DLIMITDATE"), .nWay_pay = itemData.NumericValue("NWAY_PAY"), .NINTERMED = itemData.NumericValue("NINTERMED"), .nParticip = itemData.NumericValue("NPARTICIP"), .nComamou = itemData.NumericValue("NCOMAMOU"), .nType = itemData.NumericValue("NTYPE"), .sStatusva = itemData.StringValue("SSTATUSVA"), .sManauti = itemData.StringValue("SMANAUTI"), .nCurrencyDesc = itemData.StringValue("NCURRENCYDESC"), .nStatus_preDesc = itemData.StringValue("NSTATUS_PREDESC"), .nBranchDesc = itemData.StringValue("NBRANCHDESC"), .nProductDesc = itemData.StringValue("NPRODUCTDESC"), .nTratypeiDesc = itemData.StringValue("NTRATYPEIDESC"), .nWay_payDesc = itemData.StringValue("NWAY_PAYDESC"), .sStatusvaDesc = itemData.StringValue("SSTATUSVADESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "PremiumTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PremiumTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function PremiumTblDataCount(filter As String, PREMIUMSCLIENT3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT PREMIUM.NCURRENCY, PREMIUM.NSTATUS_PRE, PREMIUM.NRECEIPT, PREMIUM.NBRANCH, PREMIUM.NPRODUCT, PREMIUM.NPOLICY, PREMIUM.NTRATYPEI, PREMIUM.NPREMIUM, PREMIUM.NBALANCE, PREMIUM.DISSUEDAT, PREMIUM.DEFFECDATE, PREMIUM.DEXPIRDAT, PREMIUM.NCOLLECTOR, PREMIUM.SREJECT, PREMIUM.DLIMITDATE, PREMIUM.NWAY_PAY, PREMIUM.NINTERMED, PREMIUM.NPARTICIP, PREMIUM.NCOMAMOU, PREMIUM.NTYPE, PREMIUM.SSTATUSVA, PREMIUM.SMANAUTI, TABLE11.SSHORT_DES NCURRENCYDESC, TABLE19.SDESCRIPT NSTATUS_PREDESC, TABLE10.SDESCRIPT NBRANCHDESC, PRODMASTER.SDESCRIPT NPRODUCTDESC, TABLE24.SDESCRIPT NTRATYPEIDESC, TABLE5002.SDESCRIPT NWAY_PAYDESC, TABLE181.SDESCRIPT SSTATUSVADESC FROM PREMIUM PREMIUM LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = PREMIUM.NCURRENCY LEFT JOIN TABLE19 TABLE19 ON TABLE19.NSTATUS_PRE = PREMIUM.NSTATUS_PRE LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = PREMIUM.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = PREMIUM.NBRANCH  AND PRODMASTER.NPRODUCT = PREMIUM.NPRODUCT LEFT JOIN TABLE24 TABLE24 ON TABLE24.NTRATYPEI = PREMIUM.NTRATYPEI LEFT JOIN TABLE5002 TABLE5002 ON TABLE5002.NWAY_PAY = PREMIUM.NWAY_PAY LEFT JOIN TABLE181 TABLE181 ON TABLE181.SSTATUSVA = PREMIUM.SSTATUSVA  WHERE PREMIUM.NDIGIT = 0 AND PREMIUM.SSTATUSVA <> '3' AND PREMIUM.SCLIENT = @:PREMIUMSCLIENT3)", "PREMIUM", "Linked.LatCombined")
                    .AddParameter("PREMIUMSCLIENT3", DbType.AnsiStringFixedLength, 0, (PREMIUMSCLIENT3 = String.Empty), PREMIUMSCLIENT3)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "PremiumTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PremiumTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function PremiumSelectCommandActionPREMIUM(PREMIUMSCLIENT3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(PREMIUM.NCURRENCY) COUNTDATA FROM PREMIUM PREMIUM LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = PREMIUM.NCURRENCY LEFT JOIN TABLE19 TABLE19 ON TABLE19.NSTATUS_PRE = PREMIUM.NSTATUS_PRE LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = PREMIUM.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = PREMIUM.NBRANCH  AND PRODMASTER.NPRODUCT = PREMIUM.NPRODUCT LEFT JOIN TABLE24 TABLE24 ON TABLE24.NTRATYPEI = PREMIUM.NTRATYPEI LEFT JOIN TABLE5002 TABLE5002 ON TABLE5002.NWAY_PAY = PREMIUM.NWAY_PAY LEFT JOIN TABLE181 TABLE181 ON TABLE181.SSTATUSVA = PREMIUM.SSTATUSVA  WHERE PREMIUM.NDIGIT = 0 AND PREMIUM.SSTATUSVA <> '3' AND PREMIUM.SCLIENT = @:PREMIUMSCLIENT3", "PREMIUM", "Linked.LatCombined")
                    .AddParameter("PREMIUMSCLIENT3", DbType.AnsiStringFixedLength, 0, (PREMIUMSCLIENT3 = String.Empty), PREMIUMSCLIENT3)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "PremiumSelectCommandActionPREMIUM", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PremiumSelectCommandActionPREMIUM)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ClaimTblDataLoad(filter As String, CLAIMSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nBranch = 0, .nProduct = 0, .nPolicy = 0, .NCERTIF = 0, .dDecladat = Date.MinValue, .nClaim = 0, .dOccurdat = Date.MinValue, .sClaimtyp = String.Empty, .nCausecod = 0, .sStaclaim = String.Empty, .nUnaccode = 0, .dPrescdat = Date.MinValue, .nLoc_reserv = 0, .nLoc_pay_am = 0, .nLoc_out_am = 0, .nLoc_rec_am = 0, .nLoc_cos_re = 0, .dCompdate = Date.MinValue, .nBranchDesc = String.Empty, .nProductDesc = String.Empty, .sClaimtypDesc = String.Empty, .nCausecodDesc = String.Empty, .sStaclaimDesc = String.Empty, .nUnaccodeDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLAIM.NBRANCH, CLAIM.NPRODUCT, CLAIM.NPOLICY, CLAIM.NCERTIF, CLAIM.DDECLADAT, CLAIM.NCLAIM, CLAIM.DOCCURDAT, CLAIM.SCLAIMTYP, CLAIM.NCAUSECOD, CLAIM.SSTACLAIM, CLAIM.NUNACCODE, CLAIM.DPRESCDAT, CLAIM.NLOC_RESERV, CLAIM.NLOC_PAY_AM, CLAIM.NLOC_OUT_AM, CLAIM.NLOC_REC_AM, CLAIM.NLOC_COS_RE, CLAIM.DCOMPDATE, TABLE10.SDESCRIPT NBRANCHDESC, PRODMASTER.SDESCRIPT NPRODUCTDESC, TABLE132.SDESCRIPT SCLAIMTYPDESC, CLAIM_CAUS.SDESCRIPT NCAUSECODDESC, TABLE135.SDESCRIPT SSTACLAIMDESC, TABLE133.SDESCRIPT NUNACCODEDESC FROM CLAIM CLAIM LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = CLAIM.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = CLAIM.NBRANCH  AND PRODMASTER.NPRODUCT = CLAIM.NPRODUCT LEFT JOIN TABLE132 TABLE132 ON TABLE132.SCLAIMTYP = CLAIM.SCLAIMTYP LEFT JOIN CLAIM_CAUS CLAIM_CAUS ON CLAIM_CAUS.NBRANCH = CLAIM.NBRANCH  AND CLAIM_CAUS.NPRODUCT = CLAIM.NPRODUCT  AND CLAIM_CAUS.NCAUSECOD = CLAIM.NCAUSECOD LEFT JOIN TABLE135 TABLE135 ON TABLE135.SSTACLAIM = CLAIM.SSTACLAIM LEFT JOIN TABLE133 TABLE133 ON TABLE133.NUNACCODE = CLAIM.NUNACCODE  WHERE CLAIM.SCLIENT = @:CLAIMSCLIENT1", "CLAIM", "Linked.LatCombined")
                    .AddParameter("CLAIMSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLAIMSCLIENT1 = String.Empty), CLAIMSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nBranch = itemData.NumericValue("NBRANCH"), .nProduct = itemData.NumericValue("NPRODUCT"), .nPolicy = itemData.NumericValue("NPOLICY"), .NCERTIF = itemData.NumericValue("NCERTIF"), .dDecladat = itemData.DateTimeValue("DDECLADAT"), .nClaim = itemData.NumericValue("NCLAIM"), .dOccurdat = itemData.DateTimeValue("DOCCURDAT"), .sClaimtyp = itemData.StringValue("SCLAIMTYP"), .nCausecod = itemData.NumericValue("NCAUSECOD"), .sStaclaim = itemData.StringValue("SSTACLAIM"), .nUnaccode = itemData.NumericValue("NUNACCODE"), .dPrescdat = itemData.DateTimeValue("DPRESCDAT"), .nLoc_reserv = itemData.NumericValue("NLOC_RESERV"), .nLoc_pay_am = itemData.NumericValue("NLOC_PAY_AM"), .nLoc_out_am = itemData.NumericValue("NLOC_OUT_AM"), .nLoc_rec_am = itemData.NumericValue("NLOC_REC_AM"), .nLoc_cos_re = itemData.NumericValue("NLOC_COS_RE"), .dCompdate = itemData.DateTimeValue("DCOMPDATE"), .nBranchDesc = itemData.StringValue("NBRANCHDESC"), .nProductDesc = itemData.StringValue("NPRODUCTDESC"), .sClaimtypDesc = itemData.StringValue("SCLAIMTYPDESC"), .nCausecodDesc = itemData.StringValue("NCAUSECODDESC"), .sStaclaimDesc = itemData.StringValue("SSTACLAIMDESC"), .nUnaccodeDesc = itemData.StringValue("NUNACCODEDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "ClaimTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ClaimTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ClaimTblDataCount(filter As String, CLAIMSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLAIM.NBRANCH, CLAIM.NPRODUCT, CLAIM.NPOLICY, CLAIM.NCERTIF, CLAIM.DDECLADAT, CLAIM.NCLAIM, CLAIM.DOCCURDAT, CLAIM.SCLAIMTYP, CLAIM.NCAUSECOD, CLAIM.SSTACLAIM, CLAIM.NUNACCODE, CLAIM.DPRESCDAT, CLAIM.NLOC_RESERV, CLAIM.NLOC_PAY_AM, CLAIM.NLOC_OUT_AM, CLAIM.NLOC_REC_AM, CLAIM.NLOC_COS_RE, CLAIM.DCOMPDATE, TABLE10.SDESCRIPT NBRANCHDESC, PRODMASTER.SDESCRIPT NPRODUCTDESC, TABLE132.SDESCRIPT SCLAIMTYPDESC, CLAIM_CAUS.SDESCRIPT NCAUSECODDESC, TABLE135.SDESCRIPT SSTACLAIMDESC, TABLE133.SDESCRIPT NUNACCODEDESC FROM CLAIM CLAIM LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = CLAIM.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = CLAIM.NBRANCH  AND PRODMASTER.NPRODUCT = CLAIM.NPRODUCT LEFT JOIN TABLE132 TABLE132 ON TABLE132.SCLAIMTYP = CLAIM.SCLAIMTYP LEFT JOIN CLAIM_CAUS CLAIM_CAUS ON CLAIM_CAUS.NBRANCH = CLAIM.NBRANCH  AND CLAIM_CAUS.NPRODUCT = CLAIM.NPRODUCT  AND CLAIM_CAUS.NCAUSECOD = CLAIM.NCAUSECOD LEFT JOIN TABLE135 TABLE135 ON TABLE135.SSTACLAIM = CLAIM.SSTACLAIM LEFT JOIN TABLE133 TABLE133 ON TABLE133.NUNACCODE = CLAIM.NUNACCODE  WHERE CLAIM.SCLIENT = @:CLAIMSCLIENT1)", "CLAIM", "Linked.LatCombined")
                    .AddParameter("CLAIMSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLAIMSCLIENT1 = String.Empty), CLAIMSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "ClaimTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ClaimTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function ClaimSelectCommandActionCLAIM(CLAIMSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CLAIM.NBRANCH) COUNTDATA FROM CLAIM CLAIM LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = CLAIM.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = CLAIM.NBRANCH  AND PRODMASTER.NPRODUCT = CLAIM.NPRODUCT LEFT JOIN TABLE132 TABLE132 ON TABLE132.SCLAIMTYP = CLAIM.SCLAIMTYP LEFT JOIN CLAIM_CAUS CLAIM_CAUS ON CLAIM_CAUS.NBRANCH = CLAIM.NBRANCH  AND CLAIM_CAUS.NPRODUCT = CLAIM.NPRODUCT  AND CLAIM_CAUS.NCAUSECOD = CLAIM.NCAUSECOD LEFT JOIN TABLE135 TABLE135 ON TABLE135.SSTACLAIM = CLAIM.SSTACLAIM LEFT JOIN TABLE133 TABLE133 ON TABLE133.NUNACCODE = CLAIM.NUNACCODE  WHERE CLAIM.SCLIENT = @:CLAIMSCLIENT1", "CLAIM", "Linked.LatCombined")
                    .AddParameter("CLAIMSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLAIMSCLIENT1 = String.Empty), CLAIMSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "ClaimSelectCommandActionCLAIM", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ClaimSelectCommandActionCLAIM)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function AddressTblDataLoad(ADDRESSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.SRECTYPE = String.Empty, .nCountry = 0, .nProvince = 0, .nLocal = 0, .nMunicipality = 0, .sDescAdd = String.Empty, .sE_mail = String.Empty, .sStreet = String.Empty, .sStreet1 = String.Empty, .sBuild = String.Empty, .sDepartment = String.Empty, .sPobox = String.Empty, .NRECOWNER = String.Empty, .SKEYADDRESS = String.Empty, .DEFFECDATE = String.Empty, .nCountryDesc = String.Empty, .nProvinceDesc = String.Empty, .nLocalDesc = String.Empty, .nMunicipalityDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT ADDRESS.SRECTYPE, ADDRESS.NCOUNTRY, ADDRESS.NPROVINCE, ADDRESS.NLOCAL, ADDRESS.NMUNICIPALITY, ADDRESS.SDESCADD, ADDRESS.SE_MAIL, ADDRESS.SSTREET, ADDRESS.SSTREET1, ADDRESS.SBUILD, ADDRESS.SDEPARTMENT, ADDRESS.SPOBOX, ADDRESS.NRECOWNER, ADDRESS.SKEYADDRESS, ADDRESS.DEFFECDATE, TABLE66.SDESCRIPT NCOUNTRYDESC, PROVINCE.SDESCRIPT NPROVINCEDESC, TAB_LOCAT.SDESCRIPT NLOCALDESC, MUNICIPALITY.SDESCRIPT NMUNICIPALITYDESC FROM ADDRESS ADDRESS LEFT JOIN TABLE66 TABLE66 ON TABLE66.NCOUNTRY = ADDRESS.NCOUNTRY LEFT JOIN PROVINCE PROVINCE ON PROVINCE.NPROVINCE = ADDRESS.NPROVINCE LEFT JOIN TAB_LOCAT TAB_LOCAT ON TAB_LOCAT.NLOCAL = ADDRESS.NLOCAL LEFT JOIN MUNICIPALITY MUNICIPALITY ON MUNICIPALITY.NMUNICIPALITY = ADDRESS.NMUNICIPALITY  WHERE ADDRESS.SCLIENT = @:ADDRESSSCLIENT1", "ADDRESS", "Linked.LatCombined")
                    .AddParameter("ADDRESSSCLIENT1", DbType.AnsiStringFixedLength, 0, (ADDRESSSCLIENT1 = String.Empty), ADDRESSSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.SRECTYPE = itemData.StringValue("SRECTYPE"), .nCountry = itemData.NumericValue("NCOUNTRY"), .nProvince = itemData.NumericValue("NPROVINCE"), .nLocal = itemData.NumericValue("NLOCAL"), .nMunicipality = itemData.NumericValue("NMUNICIPALITY"), .sDescAdd = itemData.StringValue("SDESCADD"), .sE_mail = itemData.StringValue("SE_MAIL"), .sStreet = itemData.StringValue("SSTREET"), .sStreet1 = itemData.StringValue("SSTREET1"), .sBuild = itemData.StringValue("SBUILD"), .sDepartment = itemData.StringValue("SDEPARTMENT"), .sPobox = itemData.StringValue("SPOBOX"), .NRECOWNER = itemData.StringValue("NRECOWNER"), .SKEYADDRESS = itemData.StringValue("SKEYADDRESS"), .DEFFECDATE = itemData.StringValue("DEFFECDATE"), .nCountryDesc = itemData.StringValue("NCOUNTRYDESC"), .nProvinceDesc = itemData.StringValue("NPROVINCEDESC"), .nLocalDesc = itemData.StringValue("NLOCALDESC"), .nMunicipalityDesc = itemData.StringValue("NMUNICIPALITYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "AddressTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (AddressTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function AddressTblDataCount(ADDRESSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT ADDRESS.SRECTYPE, ADDRESS.NCOUNTRY, ADDRESS.NPROVINCE, ADDRESS.NLOCAL, ADDRESS.NMUNICIPALITY, ADDRESS.SDESCADD, ADDRESS.SE_MAIL, ADDRESS.SSTREET, ADDRESS.SSTREET1, ADDRESS.SBUILD, ADDRESS.SDEPARTMENT, ADDRESS.SPOBOX, ADDRESS.NRECOWNER, ADDRESS.SKEYADDRESS, ADDRESS.DEFFECDATE, TABLE66.SDESCRIPT NCOUNTRYDESC, PROVINCE.SDESCRIPT NPROVINCEDESC, TAB_LOCAT.SDESCRIPT NLOCALDESC, MUNICIPALITY.SDESCRIPT NMUNICIPALITYDESC FROM ADDRESS ADDRESS LEFT JOIN TABLE66 TABLE66 ON TABLE66.NCOUNTRY = ADDRESS.NCOUNTRY LEFT JOIN PROVINCE PROVINCE ON PROVINCE.NPROVINCE = ADDRESS.NPROVINCE LEFT JOIN TAB_LOCAT TAB_LOCAT ON TAB_LOCAT.NLOCAL = ADDRESS.NLOCAL LEFT JOIN MUNICIPALITY MUNICIPALITY ON MUNICIPALITY.NMUNICIPALITY = ADDRESS.NMUNICIPALITY  WHERE ADDRESS.SCLIENT = @:ADDRESSSCLIENT1)", "ADDRESS", "Linked.LatCombined")
                    .AddParameter("ADDRESSSCLIENT1", DbType.AnsiStringFixedLength, 0, (ADDRESSSCLIENT1 = String.Empty), ADDRESSSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "AddressTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (AddressTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function AddressSelectCommandActionADDRESS(ADDRESSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(ADDRESS.NCOUNTRY) COUNTDATA FROM ADDRESS ADDRESS LEFT JOIN TABLE66 TABLE66 ON TABLE66.NCOUNTRY = ADDRESS.NCOUNTRY LEFT JOIN PROVINCE PROVINCE ON PROVINCE.NPROVINCE = ADDRESS.NPROVINCE LEFT JOIN TAB_LOCAT TAB_LOCAT ON TAB_LOCAT.NLOCAL = ADDRESS.NLOCAL LEFT JOIN MUNICIPALITY MUNICIPALITY ON MUNICIPALITY.NMUNICIPALITY = ADDRESS.NMUNICIPALITY  WHERE ADDRESS.SCLIENT = @:ADDRESSSCLIENT1", "ADDRESS", "Linked.LatCombined")
                    .AddParameter("ADDRESSSCLIENT1", DbType.AnsiStringFixedLength, 0, (ADDRESSSCLIENT1 = String.Empty), ADDRESSSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "AddressSelectCommandActionADDRESS", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (AddressSelectCommandActionADDRESS)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function PHONESTblDataLoad(PHONESNRECOWNER1 As String, PHONESSKEYADDRESS2 As String, PHONESDEFFECDATE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NPHONE_TYPE = 0, .NAREA_CODE = 0, .SPHONE = String.Empty, .NEXTENS1 = 0, .NEXTENS2 = 0, .NBESTTIMETOCALL = 0, .NPHONE_TYPEDesc = String.Empty, .NBESTTIMETOCALLDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT PHONES.NPHONE_TYPE, PHONES.NAREA_CODE, PHONES.SPHONE, PHONES.NEXTENS1, PHONES.NEXTENS2, PHONES.NBESTTIMETOCALL, TABLE564.SDESCRIPT NPHONE_TYPEDESC, TABLE8060.SDESCRIPT NBESTTIMETOCALLDESC FROM PHONES PHONES LEFT JOIN TABLE564 TABLE564 ON TABLE564.NPHONE_TYPE = PHONES.NPHONE_TYPE LEFT JOIN TABLE8060 TABLE8060 ON TABLE8060.NBESTTIMETOCALL = PHONES.NBESTTIMETOCALL  WHERE PHONES.NRECOWNER = @:PHONESNRECOWNER1 AND PHONES.SKEYADDRESS = @:PHONESSKEYADDRESS2 AND PHONES.DEFFECDATE = @:PHONESDEFFECDATE3", "PHONES", "Linked.LatCombined")
                    .AddParameter("PHONESNRECOWNER1", DbType.AnsiStringFixedLength, 0, (PHONESNRECOWNER1 = String.Empty), PHONESNRECOWNER1)
                    .AddParameter("PHONESSKEYADDRESS2", DbType.AnsiStringFixedLength, 0, (PHONESSKEYADDRESS2 = String.Empty), PHONESSKEYADDRESS2)
                    .AddParameter("PHONESDEFFECDATE3", DbType.AnsiStringFixedLength, 0, (PHONESDEFFECDATE3 = String.Empty), PHONESDEFFECDATE3)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NPHONE_TYPE = itemData.NumericValue("NPHONE_TYPE"), .NAREA_CODE = itemData.NumericValue("NAREA_CODE"), .SPHONE = itemData.StringValue("SPHONE"), .NEXTENS1 = itemData.NumericValue("NEXTENS1"), .NEXTENS2 = itemData.NumericValue("NEXTENS2"), .NBESTTIMETOCALL = itemData.NumericValue("NBESTTIMETOCALL"), .NPHONE_TYPEDesc = itemData.StringValue("NPHONE_TYPEDESC"), .NBESTTIMETOCALLDesc = itemData.StringValue("NBESTTIMETOCALLDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "PHONESTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PHONESTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function PHONESTblDataCount(PHONESNRECOWNER1 As String, PHONESSKEYADDRESS2 As String, PHONESDEFFECDATE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT PHONES.NPHONE_TYPE, PHONES.NAREA_CODE, PHONES.SPHONE, PHONES.NEXTENS1, PHONES.NEXTENS2, PHONES.NBESTTIMETOCALL, TABLE564.SDESCRIPT NPHONE_TYPEDESC, TABLE8060.SDESCRIPT NBESTTIMETOCALLDESC FROM PHONES PHONES LEFT JOIN TABLE564 TABLE564 ON TABLE564.NPHONE_TYPE = PHONES.NPHONE_TYPE LEFT JOIN TABLE8060 TABLE8060 ON TABLE8060.NBESTTIMETOCALL = PHONES.NBESTTIMETOCALL  WHERE PHONES.NRECOWNER = @:PHONESNRECOWNER1 AND PHONES.SKEYADDRESS = @:PHONESSKEYADDRESS2 AND PHONES.DEFFECDATE = @:PHONESDEFFECDATE3)", "PHONES", "Linked.LatCombined")
                    .AddParameter("PHONESNRECOWNER1", DbType.AnsiStringFixedLength, 0, (PHONESNRECOWNER1 = String.Empty), PHONESNRECOWNER1)
                    .AddParameter("PHONESSKEYADDRESS2", DbType.AnsiStringFixedLength, 0, (PHONESSKEYADDRESS2 = String.Empty), PHONESSKEYADDRESS2)
                    .AddParameter("PHONESDEFFECDATE3", DbType.AnsiStringFixedLength, 0, (PHONESDEFFECDATE3 = String.Empty), PHONESDEFFECDATE3)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "PHONESTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PHONESTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function PHONESSelectCommandActionPHONES(PHONESNRECOWNER1 As String, PHONESSKEYADDRESS2 As String, PHONESDEFFECDATE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(PHONES.NPHONE_TYPE) COUNTDATA FROM PHONES PHONES LEFT JOIN TABLE564 TABLE564 ON TABLE564.NPHONE_TYPE = PHONES.NPHONE_TYPE LEFT JOIN TABLE8060 TABLE8060 ON TABLE8060.NBESTTIMETOCALL = PHONES.NBESTTIMETOCALL  WHERE PHONES.NRECOWNER = @:PHONESNRECOWNER1 AND PHONES.SKEYADDRESS = @:PHONESSKEYADDRESS2 AND PHONES.DEFFECDATE = @:PHONESDEFFECDATE3", "PHONES", "Linked.LatCombined")
                    .AddParameter("PHONESNRECOWNER1", DbType.AnsiStringFixedLength, 0, (PHONESNRECOWNER1 = String.Empty), PHONESNRECOWNER1)
                    .AddParameter("PHONESSKEYADDRESS2", DbType.AnsiStringFixedLength, 0, (PHONESSKEYADDRESS2 = String.Empty), PHONESSKEYADDRESS2)
                    .AddParameter("PHONESDEFFECDATE3", DbType.AnsiStringFixedLength, 0, (PHONESDEFFECDATE3 = String.Empty), PHONESDEFFECDATE3)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "PHONESSelectCommandActionPHONES", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PHONESSelectCommandActionPHONES)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLIDOCUMENTSTblDataLoad(CLIDOCUMENTSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NTYPCLIENTDOC = 0, .SCLINUMDOCU = String.Empty, .DISSUEDAT = Date.MinValue, .DEXPIRDAT = Date.MinValue, .NTYPCLIENTDOCDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLIDOCUMENTS.NTYPCLIENTDOC, CLIDOCUMENTS.SCLINUMDOCU, CLIDOCUMENTS.DISSUEDAT, CLIDOCUMENTS.DEXPIRDAT, FORMATVALUES.SDESCRIPT NTYPCLIENTDOCDESC FROM CLIDOCUMENTS CLIDOCUMENTS LEFT JOIN FORMATVALUES FORMATVALUES ON FORMATVALUES.NCLASSTYPDOC = CLIDOCUMENTS.NCLASSTYPDOC  AND FORMATVALUES.NTYPCLIENTDOC = CLIDOCUMENTS.NTYPCLIENTDOC  WHERE CLIDOCUMENTS.SCLIENT = @:CLIDOCUMENTSSCLIENT1", "CLIDOCUMENTS", "Linked.LatCombined")
                    .AddParameter("CLIDOCUMENTSSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLIDOCUMENTSSCLIENT1 = String.Empty), CLIDOCUMENTSSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NTYPCLIENTDOC = itemData.NumericValue("NTYPCLIENTDOC"), .SCLINUMDOCU = itemData.StringValue("SCLINUMDOCU"), .DISSUEDAT = itemData.DateTimeValue("DISSUEDAT"), .DEXPIRDAT = itemData.DateTimeValue("DEXPIRDAT"), .NTYPCLIENTDOCDesc = itemData.StringValue("NTYPCLIENTDOCDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "CLIDOCUMENTSTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLIDOCUMENTSTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLIDOCUMENTSTblDataCount(CLIDOCUMENTSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLIDOCUMENTS.NTYPCLIENTDOC, CLIDOCUMENTS.SCLINUMDOCU, CLIDOCUMENTS.DISSUEDAT, CLIDOCUMENTS.DEXPIRDAT, FORMATVALUES.SDESCRIPT NTYPCLIENTDOCDESC FROM CLIDOCUMENTS CLIDOCUMENTS LEFT JOIN FORMATVALUES FORMATVALUES ON FORMATVALUES.NCLASSTYPDOC = CLIDOCUMENTS.NCLASSTYPDOC  AND FORMATVALUES.NTYPCLIENTDOC = CLIDOCUMENTS.NTYPCLIENTDOC  WHERE CLIDOCUMENTS.SCLIENT = @:CLIDOCUMENTSSCLIENT1)", "CLIDOCUMENTS", "Linked.LatCombined")
                    .AddParameter("CLIDOCUMENTSSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLIDOCUMENTSSCLIENT1 = String.Empty), CLIDOCUMENTSSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "CLIDOCUMENTSTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLIDOCUMENTSTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CLIDOCUMENTSSelectCommandActionCLIDOCUMENTS(CLIDOCUMENTSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CLIDOCUMENTS.NTYPCLIENTDOC) COUNTDATA FROM CLIDOCUMENTS CLIDOCUMENTS LEFT JOIN FORMATVALUES FORMATVALUES ON FORMATVALUES.NCLASSTYPDOC = CLIDOCUMENTS.NCLASSTYPDOC  AND FORMATVALUES.NTYPCLIENTDOC = CLIDOCUMENTS.NTYPCLIENTDOC  WHERE CLIDOCUMENTS.SCLIENT = @:CLIDOCUMENTSSCLIENT1", "CLIDOCUMENTS", "Linked.LatCombined")
                    .AddParameter("CLIDOCUMENTSSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLIDOCUMENTSSCLIENT1 = String.Empty), CLIDOCUMENTSSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "CLIDOCUMENTSSelectCommandActionCLIDOCUMENTS", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLIDOCUMENTSSelectCommandActionCLIDOCUMENTS)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function DIR_DEBIT_CLITblDataLoad(DIRDEBITCLISCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.STYP_DIRDEB = String.Empty, .NBANKEXT = 0, .SACCOUNT = String.Empty, .NBILL_DAY = 0, .DEFFECDATE = Date.MinValue, .DNULLDATE = Date.MinValue, .NBANKEXTDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT DIR_DEBIT_CLI.STYP_DIRDEB, DIR_DEBIT_CLI.NBANKEXT, DIR_DEBIT_CLI.SACCOUNT, DIR_DEBIT_CLI.NBILL_DAY, DIR_DEBIT_CLI.DEFFECDATE, DIR_DEBIT_CLI.DNULLDATE, TABLE7.SDESCRIPT NBANKEXTDESC FROM DIR_DEBIT_CLI DIR_DEBIT_CLI LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = DIR_DEBIT_CLI.NBANKEXT  WHERE DIR_DEBIT_CLI.SCLIENT = @:DIR_DEBIT_CLISCLIENT1", "DIR_DEBIT_CLI", "Linked.LatCombined")
                    .AddParameter("DIR_DEBIT_CLISCLIENT1", DbType.AnsiStringFixedLength, 0, (DIRDEBITCLISCLIENT1 = String.Empty), DIRDEBITCLISCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.STYP_DIRDEB = itemData.StringValue("STYP_DIRDEB"), .NBANKEXT = itemData.NumericValue("NBANKEXT"), .SACCOUNT = itemData.StringValue("SACCOUNT"), .NBILL_DAY = itemData.NumericValue("NBILL_DAY"), .DEFFECDATE = itemData.DateTimeValue("DEFFECDATE"), .DNULLDATE = itemData.DateTimeValue("DNULLDATE"), .NBANKEXTDesc = itemData.StringValue("NBANKEXTDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "DIR_DEBIT_CLITblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (DIR_DEBIT_CLITblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function DIR_DEBIT_CLITblDataCount(DIRDEBITCLISCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT DIR_DEBIT_CLI.STYP_DIRDEB, DIR_DEBIT_CLI.NBANKEXT, DIR_DEBIT_CLI.SACCOUNT, DIR_DEBIT_CLI.NBILL_DAY, DIR_DEBIT_CLI.DEFFECDATE, DIR_DEBIT_CLI.DNULLDATE, TABLE7.SDESCRIPT NBANKEXTDESC FROM DIR_DEBIT_CLI DIR_DEBIT_CLI LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = DIR_DEBIT_CLI.NBANKEXT  WHERE DIR_DEBIT_CLI.SCLIENT = @:DIR_DEBIT_CLISCLIENT1)", "DIR_DEBIT_CLI", "Linked.LatCombined")
                    .AddParameter("DIR_DEBIT_CLISCLIENT1", DbType.AnsiStringFixedLength, 0, (DIRDEBITCLISCLIENT1 = String.Empty), DIRDEBITCLISCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "DIR_DEBIT_CLITblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (DIR_DEBIT_CLITblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function DIR_DEBIT_CLISelectCommandActionDIR_DEBIT_CLI(DIRDEBITCLISCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(DIR_DEBIT_CLI.NBANKEXT) COUNTDATA FROM DIR_DEBIT_CLI DIR_DEBIT_CLI LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = DIR_DEBIT_CLI.NBANKEXT  WHERE DIR_DEBIT_CLI.SCLIENT = @:DIR_DEBIT_CLISCLIENT1", "DIR_DEBIT_CLI", "Linked.LatCombined")
                    .AddParameter("DIR_DEBIT_CLISCLIENT1", DbType.AnsiStringFixedLength, 0, (DIRDEBITCLISCLIENT1 = String.Empty), DIRDEBITCLISCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "DIR_DEBIT_CLISelectCommandActionDIR_DEBIT_CLI", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (DIR_DEBIT_CLISelectCommandActionDIR_DEBIT_CLI)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Bk_accountTblDataLoad(BKACCOUNTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nTyp_acc = 0, .nBankExt = 0, .sAccount = String.Empty, .sStatregt = String.Empty, .nTyp_accDesc = String.Empty, .nBankExtDesc = String.Empty, .sStatregtDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT BK_ACCOUNT.NTYP_ACC, BK_ACCOUNT.NBANKEXT, BK_ACCOUNT.SACCOUNT, BK_ACCOUNT.SSTATREGT, TABLE190.SDESCRIPT NTYP_ACCDESC, TABLE7.SDESCRIPT NBANKEXTDESC, TABLE26.SDESCRIPT SSTATREGTDESC FROM BK_ACCOUNT BK_ACCOUNT LEFT JOIN TABLE190 TABLE190 ON TABLE190.NACC_TYPE = BK_ACCOUNT.NTYP_ACC LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = BK_ACCOUNT.NBANKEXT LEFT JOIN TABLE26 TABLE26 ON TABLE26.NCODIGINT = BK_ACCOUNT.SSTATREGT  WHERE BK_ACCOUNT.SCLIENT = @:BK_ACCOUNTSCLIENT1", "BK_ACCOUNT", "Linked.LatCombined")
                    .AddParameter("BK_ACCOUNTSCLIENT1", DbType.AnsiStringFixedLength, 0, (BKACCOUNTSCLIENT1 = String.Empty), BKACCOUNTSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nTyp_acc = itemData.NumericValue("NTYP_ACC"), .nBankExt = itemData.NumericValue("NBANKEXT"), .sAccount = itemData.StringValue("SACCOUNT"), .sStatregt = itemData.StringValue("SSTATREGT"), .nTyp_accDesc = itemData.StringValue("NTYP_ACCDESC"), .nBankExtDesc = itemData.StringValue("NBANKEXTDESC"), .sStatregtDesc = itemData.StringValue("SSTATREGTDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "Bk_accountTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Bk_accountTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Bk_accountTblDataCount(BKACCOUNTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT BK_ACCOUNT.NTYP_ACC, BK_ACCOUNT.NBANKEXT, BK_ACCOUNT.SACCOUNT, BK_ACCOUNT.SSTATREGT, TABLE190.SDESCRIPT NTYP_ACCDESC, TABLE7.SDESCRIPT NBANKEXTDESC, TABLE26.SDESCRIPT SSTATREGTDESC FROM BK_ACCOUNT BK_ACCOUNT LEFT JOIN TABLE190 TABLE190 ON TABLE190.NACC_TYPE = BK_ACCOUNT.NTYP_ACC LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = BK_ACCOUNT.NBANKEXT LEFT JOIN TABLE26 TABLE26 ON TABLE26.NCODIGINT = BK_ACCOUNT.SSTATREGT  WHERE BK_ACCOUNT.SCLIENT = @:BK_ACCOUNTSCLIENT1)", "BK_ACCOUNT", "Linked.LatCombined")
                    .AddParameter("BK_ACCOUNTSCLIENT1", DbType.AnsiStringFixedLength, 0, (BKACCOUNTSCLIENT1 = String.Empty), BKACCOUNTSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "Bk_accountTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Bk_accountTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Bk_accountSelectCommandActionBK_ACCOUNT(BKACCOUNTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(BK_ACCOUNT.NTYP_ACC) COUNTDATA FROM BK_ACCOUNT BK_ACCOUNT LEFT JOIN TABLE190 TABLE190 ON TABLE190.NACC_TYPE = BK_ACCOUNT.NTYP_ACC LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = BK_ACCOUNT.NBANKEXT LEFT JOIN TABLE26 TABLE26 ON TABLE26.NCODIGINT = BK_ACCOUNT.SSTATREGT  WHERE BK_ACCOUNT.SCLIENT = @:BK_ACCOUNTSCLIENT1", "BK_ACCOUNT", "Linked.LatCombined")
                    .AddParameter("BK_ACCOUNTSCLIENT1", DbType.AnsiStringFixedLength, 0, (BKACCOUNTSCLIENT1 = String.Empty), BKACCOUNTSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "Bk_accountSelectCommandActionBK_ACCOUNT", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Bk_accountSelectCommandActionBK_ACCOUNT)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Cred_cardTblDataLoad(CREDCARDSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.sCredi_Card = String.Empty, .nCard_type = 0, .nBankExt = 0, .dCardExpir = Date.MinValue, .nCard_typeDesc = String.Empty, .nBankExtDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CRED_CARD.SCREDI_CARD, CRED_CARD.NCARD_TYPE, CRED_CARD.NBANKEXT, CRED_CARD.DCARDEXPIR, TABLE183.SDESCRIPT NCARD_TYPEDESC, TABLE7.SDESCRIPT NBANKEXTDESC FROM CRED_CARD CRED_CARD LEFT JOIN TABLE183 TABLE183 ON TABLE183.NCARD_TYPE = CRED_CARD.NCARD_TYPE LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = CRED_CARD.NBANKEXT  WHERE CRED_CARD.SCLIENT = @:CRED_CARDSCLIENT1", "CRED_CARD", "Linked.LatCombined")
                    .AddParameter("CRED_CARDSCLIENT1", DbType.AnsiStringFixedLength, 0, (CREDCARDSCLIENT1 = String.Empty), CREDCARDSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.sCredi_Card = itemData.StringValue("SCREDI_CARD"), .nCard_type = itemData.NumericValue("NCARD_TYPE"), .nBankExt = itemData.NumericValue("NBANKEXT"), .dCardExpir = itemData.DateTimeValue("DCARDEXPIR"), .nCard_typeDesc = itemData.StringValue("NCARD_TYPEDESC"), .nBankExtDesc = itemData.StringValue("NBANKEXTDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "Cred_cardTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Cred_cardTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Cred_cardTblDataCount(CREDCARDSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CRED_CARD.SCREDI_CARD, CRED_CARD.NCARD_TYPE, CRED_CARD.NBANKEXT, CRED_CARD.DCARDEXPIR, TABLE183.SDESCRIPT NCARD_TYPEDESC, TABLE7.SDESCRIPT NBANKEXTDESC FROM CRED_CARD CRED_CARD LEFT JOIN TABLE183 TABLE183 ON TABLE183.NCARD_TYPE = CRED_CARD.NCARD_TYPE LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = CRED_CARD.NBANKEXT  WHERE CRED_CARD.SCLIENT = @:CRED_CARDSCLIENT1)", "CRED_CARD", "Linked.LatCombined")
                    .AddParameter("CRED_CARDSCLIENT1", DbType.AnsiStringFixedLength, 0, (CREDCARDSCLIENT1 = String.Empty), CREDCARDSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "Cred_cardTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Cred_cardTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Cred_cardSelectCommandActionCRED_CARD(CREDCARDSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CRED_CARD.NCARD_TYPE) COUNTDATA FROM CRED_CARD CRED_CARD LEFT JOIN TABLE183 TABLE183 ON TABLE183.NCARD_TYPE = CRED_CARD.NCARD_TYPE LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = CRED_CARD.NBANKEXT  WHERE CRED_CARD.SCLIENT = @:CRED_CARDSCLIENT1", "CRED_CARD", "Linked.LatCombined")
                    .AddParameter("CRED_CARDSCLIENT1", DbType.AnsiStringFixedLength, 0, (CREDCARDSCLIENT1 = String.Empty), CREDCARDSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "Cred_cardSelectCommandActionCRED_CARD", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Cred_cardSelectCommandActionCRED_CARD)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Curr_accTblDataLoad(CURRACCSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nTyp_acco = 0, .nDebit = 0, .nCredit = 0, .nBalance = 0, .nCurrency = 0, .nTyp_accoDesc = String.Empty, .nCurrencyDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CURR_ACC.NTYP_ACCO, CURR_ACC.NDEBIT, CURR_ACC.NCREDIT, CURR_ACC.NBALANCE, CURR_ACC.NCURRENCY, TABLE400.SDESCRIPT NTYP_ACCODESC, TABLE11.SSHORT_DES NCURRENCYDESC FROM CURR_ACC CURR_ACC LEFT JOIN TABLE400 TABLE400 ON TABLE400.NTYP_ACCO = CURR_ACC.NTYP_ACCO LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = CURR_ACC.NCURRENCY  WHERE CURR_ACC.SCLIENT = @:CURR_ACCSCLIENT1", "CURR_ACC", "Linked.LatCombined")
                    .AddParameter("CURR_ACCSCLIENT1", DbType.AnsiStringFixedLength, 0, (CURRACCSCLIENT1 = String.Empty), CURRACCSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nTyp_acco = itemData.NumericValue("NTYP_ACCO"), .nDebit = itemData.NumericValue("NDEBIT"), .nCredit = itemData.NumericValue("NCREDIT"), .nBalance = itemData.NumericValue("NBALANCE"), .nCurrency = itemData.NumericValue("NCURRENCY"), .nTyp_accoDesc = itemData.StringValue("NTYP_ACCODESC"), .nCurrencyDesc = itemData.StringValue("NCURRENCYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "Curr_accTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Curr_accTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Curr_accTblDataCount(CURRACCSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CURR_ACC.NTYP_ACCO, CURR_ACC.NDEBIT, CURR_ACC.NCREDIT, CURR_ACC.NBALANCE, CURR_ACC.NCURRENCY, TABLE400.SDESCRIPT NTYP_ACCODESC, TABLE11.SSHORT_DES NCURRENCYDESC FROM CURR_ACC CURR_ACC LEFT JOIN TABLE400 TABLE400 ON TABLE400.NTYP_ACCO = CURR_ACC.NTYP_ACCO LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = CURR_ACC.NCURRENCY  WHERE CURR_ACC.SCLIENT = @:CURR_ACCSCLIENT1)", "CURR_ACC", "Linked.LatCombined")
                    .AddParameter("CURR_ACCSCLIENT1", DbType.AnsiStringFixedLength, 0, (CURRACCSCLIENT1 = String.Empty), CURRACCSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "Curr_accTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Curr_accTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Curr_accSelectCommandActionCURR_ACC(CURRACCSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CURR_ACC.NTYP_ACCO) COUNTDATA FROM CURR_ACC CURR_ACC LEFT JOIN TABLE400 TABLE400 ON TABLE400.NTYP_ACCO = CURR_ACC.NTYP_ACCO LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = CURR_ACC.NCURRENCY  WHERE CURR_ACC.SCLIENT = @:CURR_ACCSCLIENT1", "CURR_ACC", "Linked.LatCombined")
                    .AddParameter("CURR_ACCSCLIENT1", DbType.AnsiStringFixedLength, 0, (CURRACCSCLIENT1 = String.Empty), CURRACCSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "Curr_accSelectCommandActionCURR_ACC", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Curr_accSelectCommandActionCURR_ACC)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function SportTblDataLoad(SPORTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nSport = 0, .nSportDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT SPORT.NSPORT, TABLE512.SDESCRIPT NSPORTDESC FROM SPORT SPORT LEFT JOIN TABLE512 TABLE512 ON TABLE512.NSPORT = SPORT.NSPORT  WHERE SPORT.SCLIENT = @:SPORTSCLIENT1", "SPORT", "Linked.LatCombined")
                    .AddParameter("SPORTSCLIENT1", DbType.AnsiStringFixedLength, 0, (SPORTSCLIENT1 = String.Empty), SPORTSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nSport = itemData.NumericValue("NSPORT"), .nSportDesc = itemData.StringValue("NSPORTDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "SportTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (SportTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function SportTblDataCount(SPORTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT SPORT.NSPORT, TABLE512.SDESCRIPT NSPORTDESC FROM SPORT SPORT LEFT JOIN TABLE512 TABLE512 ON TABLE512.NSPORT = SPORT.NSPORT  WHERE SPORT.SCLIENT = @:SPORTSCLIENT1)", "SPORT", "Linked.LatCombined")
                    .AddParameter("SPORTSCLIENT1", DbType.AnsiStringFixedLength, 0, (SPORTSCLIENT1 = String.Empty), SPORTSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "SportTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (SportTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function SportSelectCommandActionSPORT(SPORTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(SPORT.NSPORT) COUNTDATA FROM SPORT SPORT LEFT JOIN TABLE512 TABLE512 ON TABLE512.NSPORT = SPORT.NSPORT  WHERE SPORT.SCLIENT = @:SPORTSCLIENT1", "SPORT", "Linked.LatCombined")
                    .AddParameter("SPORTSCLIENT1", DbType.AnsiStringFixedLength, 0, (SPORTSCLIENT1 = String.Empty), SPORTSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "SportSelectCommandActionSPORT", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (SportSelectCommandActionSPORT)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function HobbyTblDataLoad(HOBBYSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nHobby = 0, .nHobbyDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT HOBBY.NHOBBY, TABLE5506.SDESCRIPT NHOBBYDESC FROM HOBBY HOBBY LEFT JOIN TABLE5506 TABLE5506 ON TABLE5506.NHOBBY = HOBBY.NHOBBY  WHERE HOBBY.SCLIENT = @:HOBBYSCLIENT1", "HOBBY", "Linked.LatCombined")
                    .AddParameter("HOBBYSCLIENT1", DbType.AnsiStringFixedLength, 0, (HOBBYSCLIENT1 = String.Empty), HOBBYSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nHobby = itemData.NumericValue("NHOBBY"), .nHobbyDesc = itemData.StringValue("NHOBBYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "HobbyTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (HobbyTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function HobbyTblDataCount(HOBBYSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT HOBBY.NHOBBY, TABLE5506.SDESCRIPT NHOBBYDESC FROM HOBBY HOBBY LEFT JOIN TABLE5506 TABLE5506 ON TABLE5506.NHOBBY = HOBBY.NHOBBY  WHERE HOBBY.SCLIENT = @:HOBBYSCLIENT1)", "HOBBY", "Linked.LatCombined")
                    .AddParameter("HOBBYSCLIENT1", DbType.AnsiStringFixedLength, 0, (HOBBYSCLIENT1 = String.Empty), HOBBYSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "HobbyTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (HobbyTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function HobbySelectCommandActionHOBBY(HOBBYSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(HOBBY.NHOBBY) COUNTDATA FROM HOBBY HOBBY LEFT JOIN TABLE5506 TABLE5506 ON TABLE5506.NHOBBY = HOBBY.NHOBBY  WHERE HOBBY.SCLIENT = @:HOBBYSCLIENT1", "HOBBY", "Linked.LatCombined")
                    .AddParameter("HOBBYSCLIENT1", DbType.AnsiStringFixedLength, 0, (HOBBYSCLIENT1 = String.Empty), HOBBYSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "HobbySelectCommandActionHOBBY", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (HobbySelectCommandActionHOBBY)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Financ_cliTblDataLoad(FINANCCLISCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nConcept = 0, .nAmount = 0, .nCurrency = 0, .nUnits = 0, .nFinanStat = 0, .nConceptDesc = String.Empty, .nCurrencyDesc = String.Empty, .nFinanStatDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT FINANC_CLI.NCONCEPT, FINANC_CLI.NAMOUNT, FINANC_CLI.NCURRENCY, FINANC_CLI.NUNITS, FINANC_CLI.NFINANSTAT, TABLE416.SDESCRIPT NCONCEPTDESC, TABLE11.SSHORT_DES NCURRENCYDESC, TABLE185.SDESCRIPT NFINANSTATDESC FROM FINANC_CLI FINANC_CLI LEFT JOIN TABLE416 TABLE416 ON TABLE416.NCONCEPT = FINANC_CLI.NCONCEPT LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = FINANC_CLI.NCURRENCY LEFT JOIN TABLE185 TABLE185 ON TABLE185.NFINANSTAT = FINANC_CLI.NFINANSTAT  WHERE FINANC_CLI.SCLIENT = @:FINANC_CLISCLIENT1", "FINANC_CLI", "Linked.LatCombined")
                    .AddParameter("FINANC_CLISCLIENT1", DbType.AnsiStringFixedLength, 0, (FINANCCLISCLIENT1 = String.Empty), FINANCCLISCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nConcept = itemData.NumericValue("NCONCEPT"), .nAmount = itemData.NumericValue("NAMOUNT"), .nCurrency = itemData.NumericValue("NCURRENCY"), .nUnits = itemData.NumericValue("NUNITS"), .nFinanStat = itemData.NumericValue("NFINANSTAT"), .nConceptDesc = itemData.StringValue("NCONCEPTDESC"), .nCurrencyDesc = itemData.StringValue("NCURRENCYDESC"), .nFinanStatDesc = itemData.StringValue("NFINANSTATDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "Financ_cliTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Financ_cliTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Financ_cliTblDataCount(FINANCCLISCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT FINANC_CLI.NCONCEPT, FINANC_CLI.NAMOUNT, FINANC_CLI.NCURRENCY, FINANC_CLI.NUNITS, FINANC_CLI.NFINANSTAT, TABLE416.SDESCRIPT NCONCEPTDESC, TABLE11.SSHORT_DES NCURRENCYDESC, TABLE185.SDESCRIPT NFINANSTATDESC FROM FINANC_CLI FINANC_CLI LEFT JOIN TABLE416 TABLE416 ON TABLE416.NCONCEPT = FINANC_CLI.NCONCEPT LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = FINANC_CLI.NCURRENCY LEFT JOIN TABLE185 TABLE185 ON TABLE185.NFINANSTAT = FINANC_CLI.NFINANSTAT  WHERE FINANC_CLI.SCLIENT = @:FINANC_CLISCLIENT1)", "FINANC_CLI", "Linked.LatCombined")
                    .AddParameter("FINANC_CLISCLIENT1", DbType.AnsiStringFixedLength, 0, (FINANCCLISCLIENT1 = String.Empty), FINANCCLISCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "Financ_cliTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Financ_cliTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Financ_cliSelectCommandActionFINANC_CLI(FINANCCLISCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(FINANC_CLI.NCONCEPT) COUNTDATA FROM FINANC_CLI FINANC_CLI LEFT JOIN TABLE416 TABLE416 ON TABLE416.NCONCEPT = FINANC_CLI.NCONCEPT LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = FINANC_CLI.NCURRENCY LEFT JOIN TABLE185 TABLE185 ON TABLE185.NFINANSTAT = FINANC_CLI.NFINANSTAT  WHERE FINANC_CLI.SCLIENT = @:FINANC_CLISCLIENT1", "FINANC_CLI", "Linked.LatCombined")
                    .AddParameter("FINANC_CLISCLIENT1", DbType.AnsiStringFixedLength, 0, (FINANCCLISCLIENT1 = String.Empty), FINANCCLISCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "Financ_cliSelectCommandActionFINANC_CLI", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Financ_cliSelectCommandActionFINANC_CLI)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function RelationsTblDataLoad(RELATIONSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nRelaship = 0, .sClientr = String.Empty, .nRelashipDesc = String.Empty, .sClientrDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT RELATIONS.NRELASHIP, RELATIONS.SCLIENTR, TABLE15.SDESCRIPT NRELASHIPDESC, CLIENT.SCLIENAME SCLIENTRDESC FROM RELATIONS RELATIONS LEFT JOIN TABLE15 TABLE15 ON TABLE15.NRELASHIP = RELATIONS.NRELASHIP LEFT JOIN CLIENT CLIENT ON CLIENT.SCLIENT = RELATIONS.SCLIENT  WHERE RELATIONS.SCLIENT = @:RELATIONSSCLIENT1", "RELATIONS", "Linked.LatCombined")
                    .AddParameter("RELATIONSSCLIENT1", DbType.AnsiStringFixedLength, 0, (RELATIONSSCLIENT1 = String.Empty), RELATIONSSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nRelaship = itemData.NumericValue("NRELASHIP"), .sClientr = itemData.StringValue("SCLIENTR"), .nRelashipDesc = itemData.StringValue("NRELASHIPDESC"), .sClientrDesc = itemData.StringValue("SCLIENTRDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "RelationsTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (RelationsTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function RelationsTblDataCount(RELATIONSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT RELATIONS.NRELASHIP, RELATIONS.SCLIENTR, TABLE15.SDESCRIPT NRELASHIPDESC, CLIENT.SCLIENAME SCLIENTRDESC FROM RELATIONS RELATIONS LEFT JOIN TABLE15 TABLE15 ON TABLE15.NRELASHIP = RELATIONS.NRELASHIP LEFT JOIN CLIENT CLIENT ON CLIENT.SCLIENT = RELATIONS.SCLIENT  WHERE RELATIONS.SCLIENT = @:RELATIONSSCLIENT1)", "RELATIONS", "Linked.LatCombined")
                    .AddParameter("RELATIONSSCLIENT1", DbType.AnsiStringFixedLength, 0, (RELATIONSSCLIENT1 = String.Empty), RELATIONSSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "RelationsTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (RelationsTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function RelationsSelectCommandActionRELATIONS(RELATIONSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(RELATIONS.NRELASHIP) COUNTDATA FROM RELATIONS RELATIONS LEFT JOIN TABLE15 TABLE15 ON TABLE15.NRELASHIP = RELATIONS.NRELASHIP LEFT JOIN CLIENT CLIENT ON CLIENT.SCLIENT = RELATIONS.SCLIENT  WHERE RELATIONS.SCLIENT = @:RELATIONSSCLIENT1", "RELATIONS", "Linked.LatCombined")
                    .AddParameter("RELATIONSSCLIENT1", DbType.AnsiStringFixedLength, 0, (RELATIONSSCLIENT1 = String.Empty), RELATIONSSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "RelationsSelectCommandActionRELATIONS", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (RelationsSelectCommandActionRELATIONS)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CHEQUESTblDataLoad(CHEQUESSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.SREQUEST_TY = String.Empty, .NREQUEST_NU = 0, .SCHEQUE = String.Empty, .NAMOUNT = 0, .NCURRENCYPAY = 0, .NCONCEPT = 0, .NSTA_CHEQUE = 0, .SINTER_PAY = String.Empty, .NOFFICE = 0, .NOFFICEAGEN = 0, .NAGENCY = 0, .NTYPESUPPORT = 0, .NDOCSUPPORT = 0, .DSTAT_DATE = Date.MinValue, .SDESCRIPT = String.Empty, .SREQUEST_TYDesc = String.Empty, .NCURRENCYPAYDesc = String.Empty, .NCONCEPTDesc = String.Empty, .NSTA_CHEQUEDesc = String.Empty, .SINTER_PAYDesc = String.Empty, .NOFFICEDesc = String.Empty, .NOFFICEAGENDesc = String.Empty, .NTYPESUPPORTDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CHEQUES.SREQUEST_TY, CHEQUES.NREQUEST_NU, CHEQUES.SCHEQUE, CHEQUES.NAMOUNT, CHEQUES.NCURRENCYPAY, CHEQUES.NCONCEPT, CHEQUES.NSTA_CHEQUE, CHEQUES.SINTER_PAY, CHEQUES.NOFFICE, CHEQUES.NOFFICEAGEN, CHEQUES.NAGENCY, CHEQUES.NTYPESUPPORT, CHEQUES.NDOCSUPPORT, CHEQUES.DSTAT_DATE, CHEQUES.SDESCRIPT, TABLE193.SDESCRIPT SREQUEST_TYDESC, TABLE11.SDESCRIPT NCURRENCYPAYDESC, TABLE293.SDESCRIPT NCONCEPTDESC, TABLE187.SDESCRIPT NSTA_CHEQUEDESC, CLIENT.SCLIENAME SINTER_PAYDESC, TABLE9.SDESCRIPT NOFFICEDESC, TABLE5556.SDESCRIPT NOFFICEAGENDESC, TABLE5570.SDESCRIPT NTYPESUPPORTDESC FROM CHEQUES CHEQUES LEFT JOIN TABLE193 TABLE193 ON TABLE193.SREQUEST_TY = CHEQUES.SREQUEST_TY LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = CHEQUES.NCURRENCYPAY LEFT JOIN TABLE293 TABLE293 ON TABLE293.NCONCEPT = CHEQUES.NCONCEPT LEFT JOIN TABLE187 TABLE187 ON TABLE187.NSTA_CHEQUE = CHEQUES.NSTA_CHEQUE LEFT JOIN CLIENT CLIENT ON CLIENT.SCLIENT = CHEQUES.SCLIENT LEFT JOIN TABLE9 TABLE9 ON TABLE9.NOFFICE = CHEQUES.NOFFICE LEFT JOIN TABLE5556 TABLE5556 ON TABLE5556.NOFFICEAGEN = CHEQUES.NOFFICEAGEN LEFT JOIN TABLE5570 TABLE5570 ON TABLE5570.NTYPESUPPORT = CHEQUES.NTYPESUPPORT  WHERE CHEQUES.SCLIENT = @:CHEQUESSCLIENT1", "CHEQUES", "Linked.LatCombined")
                    .AddParameter("CHEQUESSCLIENT1", DbType.AnsiStringFixedLength, 0, (CHEQUESSCLIENT1 = String.Empty), CHEQUESSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.SREQUEST_TY = itemData.StringValue("SREQUEST_TY"), .NREQUEST_NU = itemData.NumericValue("NREQUEST_NU"), .SCHEQUE = itemData.StringValue("SCHEQUE"), .NAMOUNT = itemData.NumericValue("NAMOUNT"), .NCURRENCYPAY = itemData.NumericValue("NCURRENCYPAY"), .NCONCEPT = itemData.NumericValue("NCONCEPT"), .NSTA_CHEQUE = itemData.NumericValue("NSTA_CHEQUE"), .SINTER_PAY = itemData.StringValue("SINTER_PAY"), .NOFFICE = itemData.NumericValue("NOFFICE"), .NOFFICEAGEN = itemData.NumericValue("NOFFICEAGEN"), .NAGENCY = itemData.NumericValue("NAGENCY"), .NTYPESUPPORT = itemData.NumericValue("NTYPESUPPORT"), .NDOCSUPPORT = itemData.NumericValue("NDOCSUPPORT"), .DSTAT_DATE = itemData.DateTimeValue("DSTAT_DATE"), .SDESCRIPT = itemData.StringValue("SDESCRIPT"), .SREQUEST_TYDesc = itemData.StringValue("SREQUEST_TYDESC"), .NCURRENCYPAYDesc = itemData.StringValue("NCURRENCYPAYDESC"), .NCONCEPTDesc = itemData.StringValue("NCONCEPTDESC"), .NSTA_CHEQUEDesc = itemData.StringValue("NSTA_CHEQUEDESC"), .SINTER_PAYDesc = itemData.StringValue("SINTER_PAYDESC"), .NOFFICEDesc = itemData.StringValue("NOFFICEDESC"), .NOFFICEAGENDesc = itemData.StringValue("NOFFICEAGENDESC"), .NTYPESUPPORTDesc = itemData.StringValue("NTYPESUPPORTDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "CHEQUESTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CHEQUESTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CHEQUESTblDataCount(CHEQUESSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CHEQUES.SREQUEST_TY, CHEQUES.NREQUEST_NU, CHEQUES.SCHEQUE, CHEQUES.NAMOUNT, CHEQUES.NCURRENCYPAY, CHEQUES.NCONCEPT, CHEQUES.NSTA_CHEQUE, CHEQUES.SINTER_PAY, CHEQUES.NOFFICE, CHEQUES.NOFFICEAGEN, CHEQUES.NAGENCY, CHEQUES.NTYPESUPPORT, CHEQUES.NDOCSUPPORT, CHEQUES.DSTAT_DATE, CHEQUES.SDESCRIPT, TABLE193.SDESCRIPT SREQUEST_TYDESC, TABLE11.SDESCRIPT NCURRENCYPAYDESC, TABLE293.SDESCRIPT NCONCEPTDESC, TABLE187.SDESCRIPT NSTA_CHEQUEDESC, CLIENT.SCLIENAME SINTER_PAYDESC, TABLE9.SDESCRIPT NOFFICEDESC, TABLE5556.SDESCRIPT NOFFICEAGENDESC, TABLE5570.SDESCRIPT NTYPESUPPORTDESC FROM CHEQUES CHEQUES LEFT JOIN TABLE193 TABLE193 ON TABLE193.SREQUEST_TY = CHEQUES.SREQUEST_TY LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = CHEQUES.NCURRENCYPAY LEFT JOIN TABLE293 TABLE293 ON TABLE293.NCONCEPT = CHEQUES.NCONCEPT LEFT JOIN TABLE187 TABLE187 ON TABLE187.NSTA_CHEQUE = CHEQUES.NSTA_CHEQUE LEFT JOIN CLIENT CLIENT ON CLIENT.SCLIENT = CHEQUES.SCLIENT LEFT JOIN TABLE9 TABLE9 ON TABLE9.NOFFICE = CHEQUES.NOFFICE LEFT JOIN TABLE5556 TABLE5556 ON TABLE5556.NOFFICEAGEN = CHEQUES.NOFFICEAGEN LEFT JOIN TABLE5570 TABLE5570 ON TABLE5570.NTYPESUPPORT = CHEQUES.NTYPESUPPORT  WHERE CHEQUES.SCLIENT = @:CHEQUESSCLIENT1)", "CHEQUES", "Linked.LatCombined")
                    .AddParameter("CHEQUESSCLIENT1", DbType.AnsiStringFixedLength, 0, (CHEQUESSCLIENT1 = String.Empty), CHEQUESSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "CHEQUESTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CHEQUESTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CHEQUESSelectCommandActionCHEQUES(CHEQUESSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CHEQUES.NREQUEST_NU) COUNTDATA FROM CHEQUES CHEQUES LEFT JOIN TABLE193 TABLE193 ON TABLE193.SREQUEST_TY = CHEQUES.SREQUEST_TY LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = CHEQUES.NCURRENCYPAY LEFT JOIN TABLE293 TABLE293 ON TABLE293.NCONCEPT = CHEQUES.NCONCEPT LEFT JOIN TABLE187 TABLE187 ON TABLE187.NSTA_CHEQUE = CHEQUES.NSTA_CHEQUE LEFT JOIN CLIENT CLIENT ON CLIENT.SCLIENT = CHEQUES.SCLIENT LEFT JOIN TABLE9 TABLE9 ON TABLE9.NOFFICE = CHEQUES.NOFFICE LEFT JOIN TABLE5556 TABLE5556 ON TABLE5556.NOFFICEAGEN = CHEQUES.NOFFICEAGEN LEFT JOIN TABLE5570 TABLE5570 ON TABLE5570.NTYPESUPPORT = CHEQUES.NTYPESUPPORT  WHERE CHEQUES.SCLIENT = @:CHEQUESSCLIENT1", "CHEQUES", "Linked.LatCombined")
                    .AddParameter("CHEQUESSCLIENT1", DbType.AnsiStringFixedLength, 0, (CHEQUESSCLIENT1 = String.Empty), CHEQUESSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "CHEQUESSelectCommandActionCHEQUES", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CHEQUESSelectCommandActionCHEQUES)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ROLEINCASETblDataLoad(filter As String, ROLEINCASECLIENTID1 As String, ROLEINCASECLIENTID5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.UnderwritingCaseID = 0, .DecisionDesc = String.Empty, .StatusDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT ROLEINCASE.UNDERWRITINGCASEID, ROLEINCASE.CLIENTID CLIENTID, UNDERWRITINGCASE.OPENDATE OPENDATE, UNDERWRITINGCASE.CLOSEDATE CLOSEDATE, UNDERWRITINGCASE.DECISION DECISION, UNDERWRITINGCASE.STATUS STATUS, TRANSDECISIONTYPE.DESCRIPTION DECISIONDESC, TRANSUNDERWRITINGCASESTYPE.DESCRIPTION STATUSDESC FROM ROLEINCASE ROLEINCASE LEFT JOIN UNDERWRITINGCASE UNDERWRITINGCASE ON UNDERWRITINGCASE.UNDERWRITINGCASEID = ROLEINCASE.UNDERWRITINGCASEID LEFT JOIN TRANSDECISIONTYPE TRANSDECISIONTYPE ON TRANSDECISIONTYPE.DECISION = UNDERWRITINGCASE.DECISION LEFT JOIN TRANSUNDERWRITINGCASESTYPE TRANSUNDERWRITINGCASESTYPE ON TRANSUNDERWRITINGCASESTYPE.UNDERWRITINGCASESTATUS = UNDERWRITINGCASE.STATUS  WHERE ROLEINCASE.CLIENTID = @:ROLEINCASECLIENTID1 AND ROLEINCASE.ROLE = 2 AND UNDERWRITINGCASE.STATUS IS NOT NULL AND UNDERWRITINGCASE.STATUS <> 0 AND ROLEINCASE.CLIENTID = @:ROLEINCASECLIENTID5", "ROLEINCASE", "Linked.Underwriting")
                    .AddParameter("ROLEINCASECLIENTID1", DbType.AnsiStringFixedLength, 0, (ROLEINCASECLIENTID1 = String.Empty), ROLEINCASECLIENTID1)
                    .AddParameter("ROLEINCASECLIENTID5", DbType.AnsiStringFixedLength, 0, (ROLEINCASECLIENTID5 = String.Empty), ROLEINCASECLIENTID5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.UnderwritingCaseID = itemData.NumericValue("UNDERWRITINGCASEID"), .DecisionDesc = itemData.StringValue("DECISIONDESC"), .StatusDesc = itemData.StringValue("STATUSDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "ROLEINCASETblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ROLEINCASETblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ROLEINCASETblDataCount(filter As String, ROLEINCASECLIENTID1 As String, ROLEINCASECLIENTID5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT ROLEINCASE.UNDERWRITINGCASEID, ROLEINCASE.CLIENTID CLIENTID, UNDERWRITINGCASE.OPENDATE OPENDATE, UNDERWRITINGCASE.CLOSEDATE CLOSEDATE, UNDERWRITINGCASE.DECISION DECISION, UNDERWRITINGCASE.STATUS STATUS, TRANSDECISIONTYPE.DESCRIPTION DECISIONDESC, TRANSUNDERWRITINGCASESTYPE.DESCRIPTION STATUSDESC FROM ROLEINCASE ROLEINCASE LEFT JOIN UNDERWRITINGCASE UNDERWRITINGCASE ON UNDERWRITINGCASE.UNDERWRITINGCASEID = ROLEINCASE.UNDERWRITINGCASEID LEFT JOIN TRANSDECISIONTYPE TRANSDECISIONTYPE ON TRANSDECISIONTYPE.DECISION = UNDERWRITINGCASE.DECISION LEFT JOIN TRANSUNDERWRITINGCASESTYPE TRANSUNDERWRITINGCASESTYPE ON TRANSUNDERWRITINGCASESTYPE.UNDERWRITINGCASESTATUS = UNDERWRITINGCASE.STATUS  WHERE ROLEINCASE.CLIENTID = @:ROLEINCASECLIENTID1 AND ROLEINCASE.ROLE = 2 AND UNDERWRITINGCASE.STATUS IS NOT NULL AND UNDERWRITINGCASE.STATUS <> 0 AND ROLEINCASE.CLIENTID = @:ROLEINCASECLIENTID5)", "ROLEINCASE", "Linked.Underwriting")
                    .AddParameter("ROLEINCASECLIENTID1", DbType.AnsiStringFixedLength, 0, (ROLEINCASECLIENTID1 = String.Empty), ROLEINCASECLIENTID1)
                    .AddParameter("ROLEINCASECLIENTID5", DbType.AnsiStringFixedLength, 0, (ROLEINCASECLIENTID5 = String.Empty), ROLEINCASECLIENTID5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "ROLEINCASETblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ROLEINCASETblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function ROLEINCASESelectCommandActionROLEINCASE(ROLEINCASECLIENTID1 As String, ROLEINCASECLIENTID5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(ROLEINCASE.UNDERWRITINGCASEID) COUNTDATA FROM ROLEINCASE ROLEINCASE LEFT JOIN UNDERWRITINGCASE UNDERWRITINGCASE ON UNDERWRITINGCASE.UNDERWRITINGCASEID = ROLEINCASE.UNDERWRITINGCASEID LEFT JOIN TRANSDECISIONTYPE TRANSDECISIONTYPE ON TRANSDECISIONTYPE.DECISION = UNDERWRITINGCASE.DECISION LEFT JOIN TRANSUNDERWRITINGCASESTYPE TRANSUNDERWRITINGCASESTYPE ON TRANSUNDERWRITINGCASESTYPE.UNDERWRITINGCASESTATUS = UNDERWRITINGCASE.STATUS  WHERE ROLEINCASE.CLIENTID = @:ROLEINCASECLIENTID1 AND ROLEINCASE.ROLE = 2 AND UNDERWRITINGCASE.STATUS IS NOT NULL AND UNDERWRITINGCASE.STATUS <> 0 AND ROLEINCASE.CLIENTID = @:ROLEINCASECLIENTID5", "ROLEINCASE", "Linked.Underwriting")
                    .AddParameter("ROLEINCASECLIENTID1", DbType.AnsiStringFixedLength, 0, (ROLEINCASECLIENTID1 = String.Empty), ROLEINCASECLIENTID1)
                    .AddParameter("ROLEINCASECLIENTID5", DbType.AnsiStringFixedLength, 0, (ROLEINCASECLIENTID5 = String.Empty), ROLEINCASECLIENTID5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "ROLEINCASESelectCommandActionROLEINCASE", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ROLEINCASESelectCommandActionROLEINCASE)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Client(filter As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                resultData = InMotionGIT.BackOffice.Support.Connection.Client.Lookup(filter, 1, 20)
            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "Client", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Client)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


        <WebMethod()>
        Public Shared Function LookUpForOTHERTYPEADDRESSCountryID(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                Dim UserInfo As New InMotionGIT.Membership.Providers.MemberContext
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TRANSCOUNTRY.COUNTRYID, TRANSCOUNTRY.LANGUAGEID, TRANSCOUNTRY.DESCRIPTION FROM TRANSCOUNTRY TRANSCOUNTRY  WHERE  TRANSCOUNTRY.LANGUAGEID = {0}  ORDER BY TransCountry.Description ASC", InMotionGIT.FASI.Support.Handlers.LanguageHandler.LanguageId()), 
                                            "TransCountry", "Linked.Common")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("CountryID"),
                                                                                            .Description = item.StringValue("Description")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "LookUpForOTHERTYPEADDRESSCountryID", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForOTHERTYPEADDRESSCountryID")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCertificatNINTERMED(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  INTERMEDIA.NINTERMED, INTERMEDIA.SCLIENT, CLIENT.SCLIENAME FROM INTERMEDIA INTERMEDIA JOIN CLIENT CLIENT ON CLIENT.SCLIENT = INTERMEDIA.SCLIENT    WHERE NOT SCLIENAME IS NULL ORDER BY SCLIENAME", ""), 
                                            "INTERMEDIA", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NINTERMED"),
                                                                                            .Description = item.StringValue("SCLIENAME")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("H5NNInformacionGeneralClienteIndicado", "LookUpForCertificatNINTERMED", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCertificatNINTERMED")
                End With
            End Try
            Return result
        End Function

#End Region

#Region "Form Actions"


#End Region





#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As EntryData)
            If HttpContext.Current.Request.QueryString("Client").IsNotEmpty Then
                formData.Client = HttpContext.Current.Request.QueryString("Client")
            End If
            If HttpContext.Current.Request.QueryString("RecordEffectiveDate").IsNotEmpty Then
                formData.RecordEffectiveDate = HttpContext.Current.Request.QueryString("RecordEffectiveDate")
            End If
        End Sub	


#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property Client As System.String
            <DataMember()> Public Property RecordEffectiveDate As DateTime
            <DataMember()> Public Property RootItemsSCLIENT As System.String
            <DataMember()> Public Property RootItemssCliename As System.String
            <DataMember()> Public Property RootItemsSLEGALNAME As System.String
            <DataMember()> Public Property RootItemssFirstname As System.String
            <DataMember()> Public Property RootItemssLastname As System.String
            <DataMember()> Public Property RootItemssLastName2 As System.String
            <DataMember()> Public Property RootItemssSexClien As System.String
            <DataMember()> Public Property RootItemsnCivilSta As System.Int32
            <DataMember()> Public Property RootItemsnWeight As System.Int32
            <DataMember()> Public Property RootItemsnHeight As System.Int32
            <DataMember()> Public Property RootItemsdBirthdat As System.DateTime
            <DataMember()> Public Property RootItemsdDeathdat As System.DateTime
            <DataMember()> Public Property RootItemssSmoking As System.String
            <DataMember()> Public Property RootItemsnLanguage As System.Int32
            <DataMember()> Public Property RootItemsnMailingPref As System.Int32
            <DataMember()> Public Property RootItemsnTitle As System.Int32
            <DataMember()> Public Property RootItemsnSpeciality As System.Int32
            <DataMember()> Public Property RootItemsnNationality As System.Int32
            <DataMember()> Public Property RootItemsnClass As System.Int32
            <DataMember()> Public Property RootItemsdDependant As System.DateTime
            <DataMember()> Public Property RootItemsdIndependant As System.DateTime
            <DataMember()> Public Property RootItemsdInpdate As System.DateTime
            <DataMember()> Public Property RootItemsSDIGIT As System.String
            <DataMember()> Public Property RootItemsClientID As System.String
            <DataMember()> Public Property RootItemsNADDRESSID As System.Int32
            <DataMember()> Public Property RootItemsPHYSICALADDRESSESTypeOfPhysicalAddress As System.Int32
            <DataMember()> Public Property RootItemsPHYSICALADDRESSESAddressNormalizedI As System.String
            <DataMember()> Public Property RootItemsPHYSICALADDRESSESAddressNormalizedII As System.String
            <DataMember()> Public Property RootItemsPHYSICALADDRESSESZipCode As System.String
            <DataMember()> Public Property RootItemsPHYSICALADDRESSESCancellationDate As System.DateTime
            <DataMember()> Public Property RootItemsPHYSICALADDRESSESAddressID As System.Int32
            <DataMember()> Public Property RootItemsPHYSICALADDRESSESEffectiveDate As System.DateTime
            <DataMember()> Public Property RootItemsPHYSICALADDRESSESInternalAddressKey As System.Int32
            <DataMember()> Public Property PHYSICALADDRESSES_PHYSICALADDRESSES As List(Of PHYSICALADDRESSES_PHYSICALADDRESSESItem)
            <DataMember()> Public Property RootItemsEMAILSeMail As System.String
            <DataMember()> Public Property RootItemsEMAILSHasBeenConfirmed As System.String
            <DataMember()> Public Property RootItemsEMAILSCancellationDate As System.DateTime
            <DataMember()> Public Property RootItemsEMAILSEffectiveDate As System.DateTime
            <DataMember()> Public Property RootItemsEMAILSAddressID As System.Int32
            <DataMember()> Public Property RootItemsEMAILSInternalAddressKey As System.Int32
            <DataMember()> Public Property EMAILS_EMAILS As List(Of EMAILS_EMAILSItem)
            <DataMember()> Public Property RootItemsSOCIALNETWORKNetworkType As System.Int32
            <DataMember()> Public Property RootItemsSOCIALNETWORKNetworkValue As System.String
            <DataMember()> Public Property RootItemsSOCIALNETWORKAddressID As System.Int32
            <DataMember()> Public Property RootItemsSOCIALNETWORKEffectiveDate As System.DateTime
            <DataMember()> Public Property RootItemsSOCIALNETWORKCancellationDate As System.DateTime
            <DataMember()> Public Property RootItemsSOCIALNETWORKInternalAddressKey As System.Int32
            <DataMember()> Public Property SOCIALNETWORK_SOCIALNETWORK As List(Of SOCIALNETWORK_SOCIALNETWORKItem)
            <DataMember()> Public Property RootItemsOTHERTYPEADDRESSCountryID As System.Int32
            <DataMember()> Public Property RootItemsOTHERTYPEADDRESSPOBox As System.String
            <DataMember()> Public Property RootItemsOTHERTYPEADDRESSUrl As System.String
            <DataMember()> Public Property RootItemsOTHERTYPEADDRESSAddressValidatedElectronically As System.String
            <DataMember()> Public Property RootItemsOTHERTYPEADDRESSCancellationDate As System.DateTime
            <DataMember()> Public Property RootItemsOTHERTYPEADDRESSEffectiveDate As System.DateTime
            <DataMember()> Public Property RootItemsOTHERTYPEADDRESSAddressID As System.Int32
            <DataMember()> Public Property RootItemsOTHERTYPEADDRESSInternalAddressKey As System.Int32
            <DataMember()> Public Property OTHERTYPEADDRESS_OTHERTYPEADDRESS As List(Of OTHERTYPEADDRESS_OTHERTYPEADDRESSItem)
            <DataMember()> Public Property RootItemsCertificatnBranch As System.Int32
            <DataMember()> Public Property RootItemsCertificatnProduct As System.Int32
            <DataMember()> Public Property RootItemsCertificatnPolicy As System.Int32
            <DataMember()> Public Property RootItemsCertificatnCapital As System.Int32
            <DataMember()> Public Property RootItemsCertificatdIssuedat As System.DateTime
            <DataMember()> Public Property RootItemsCertificatdStartdate As System.DateTime
            <DataMember()> Public Property RootItemsCertificatdExpirdat As System.DateTime
            <DataMember()> Public Property RootItemsCertificatdNulldate As System.DateTime
            <DataMember()> Public Property RootItemsCertificatnNullcode As System.Int32
            <DataMember()> Public Property RootItemsCertificatnPayfreq As System.Int32
            <DataMember()> Public Property RootItemsCertificatsStatusva As System.String
            <DataMember()> Public Property RootItemsCertificatnWait_code As System.Int32
            <DataMember()> Public Property RootItemsCertificatsRenewal As System.String
            <DataMember()> Public Property RootItemsCertificatdChangdat As System.DateTime
            <DataMember()> Public Property RootItemsCertificatNINTERMED As System.Int32
            <DataMember()> Public Property Certificat_Certificat As List(Of Certificat_CertificatItem)
            <DataMember()> Public Property RootItemsPremiumnCurrency As System.Int32
            <DataMember()> Public Property RootItemsPremiumnStatus_pre As System.Int32
            <DataMember()> Public Property RootItemsPremiumnReceipt As System.Int32
            <DataMember()> Public Property RootItemsPremiumnBranch As System.Int32
            <DataMember()> Public Property RootItemsPremiumnProduct As System.Int32
            <DataMember()> Public Property RootItemsPremiumnPolicy As System.Int32
            <DataMember()> Public Property RootItemsPremiumnTratypei As System.Int32
            <DataMember()> Public Property RootItemsPremiumnPremium As System.Int32
            <DataMember()> Public Property RootItemsPremiumNBALANCE As System.Int32
            <DataMember()> Public Property RootItemsPremiumdIssuedat As System.DateTime
            <DataMember()> Public Property RootItemsPremiumDEFFECDATE As System.DateTime
            <DataMember()> Public Property RootItemsPremiumdExpirdat As System.DateTime
            <DataMember()> Public Property RootItemsPremiumnCollector As System.Int32
            <DataMember()> Public Property RootItemsPremiumsReject As System.String
            <DataMember()> Public Property RootItemsPremiumdLimitDate As System.DateTime
            <DataMember()> Public Property RootItemsPremiumnWay_pay As System.Int32
            <DataMember()> Public Property RootItemsPremiumNINTERMED As System.Int32
            <DataMember()> Public Property RootItemsPremiumnParticip As System.Int32
            <DataMember()> Public Property RootItemsPremiumnComamou As System.Int32
            <DataMember()> Public Property RootItemsPremiumnType As System.Int32
            <DataMember()> Public Property RootItemsPremiumsStatusva As System.String
            <DataMember()> Public Property RootItemsPremiumsManauti As System.String
            <DataMember()> Public Property Premium_Premium As List(Of Premium_PremiumItem)
            <DataMember()> Public Property RootItemsClaimnBranch As System.Int32
            <DataMember()> Public Property RootItemsClaimnProduct As System.Int32
            <DataMember()> Public Property RootItemsClaimnPolicy As System.Int32
            <DataMember()> Public Property RootItemsClaimNCERTIF As System.Int32
            <DataMember()> Public Property RootItemsClaimdDecladat As System.DateTime
            <DataMember()> Public Property RootItemsClaimnClaim As System.Int32
            <DataMember()> Public Property RootItemsClaimdOccurdat As System.DateTime
            <DataMember()> Public Property RootItemsClaimsClaimtyp As System.String
            <DataMember()> Public Property RootItemsClaimnCausecod As System.Int32
            <DataMember()> Public Property RootItemsClaimsStaclaim As System.String
            <DataMember()> Public Property RootItemsClaimnUnaccode As System.Int32
            <DataMember()> Public Property RootItemsClaimdPrescdat As System.DateTime
            <DataMember()> Public Property RootItemsClaimnLoc_reserv As System.Int32
            <DataMember()> Public Property RootItemsClaimnLoc_pay_am As System.Int32
            <DataMember()> Public Property RootItemsClaimnLoc_out_am As System.Int32
            <DataMember()> Public Property RootItemsClaimnLoc_rec_am As System.Int32
            <DataMember()> Public Property RootItemsClaimnLoc_cos_re As System.Int32
            <DataMember()> Public Property RootItemsClaimdCompdate As System.DateTime
            <DataMember()> Public Property Claim_Claim As List(Of Claim_ClaimItem)
            <DataMember()> Public Property RootItemsAddressSRECTYPE As System.String
            <DataMember()> Public Property RootItemsAddressnCountry As System.Int32
            <DataMember()> Public Property RootItemsAddressnProvince As System.Int32
            <DataMember()> Public Property RootItemsAddressnLocal As System.Int32
            <DataMember()> Public Property RootItemsAddressnMunicipality As System.Int32
            <DataMember()> Public Property RootItemsAddresssDescAdd As System.String
            <DataMember()> Public Property RootItemsAddresssE_mail As System.String
            <DataMember()> Public Property RootItemsAddresssStreet As System.String
            <DataMember()> Public Property RootItemsAddresssStreet1 As System.String
            <DataMember()> Public Property RootItemsAddresssBuild As System.String
            <DataMember()> Public Property RootItemsAddresssDepartment As System.String
            <DataMember()> Public Property RootItemsAddresssPobox As System.String
            <DataMember()> Public Property RootItemsAddressNRECOWNER As System.String
            <DataMember()> Public Property RootItemsAddressSKEYADDRESS As System.String
            <DataMember()> Public Property RootItemsAddressDEFFECDATE As System.String
            <DataMember()> Public Property RootItemsAddressPHONESNPHONE_TYPE As System.Int32
            <DataMember()> Public Property RootItemsAddressPHONESNAREA_CODE As System.Int32
            <DataMember()> Public Property RootItemsAddressPHONESSPHONE As System.String
            <DataMember()> Public Property RootItemsAddressPHONESNEXTENS1 As System.Int32
            <DataMember()> Public Property RootItemsAddressPHONESNEXTENS2 As System.Int32
            <DataMember()> Public Property RootItemsAddressPHONESNBESTTIMETOCALL As System.Int32
            <DataMember()> Public Property PHONES_PHONES As List(Of PHONES_PHONESItem)
            <DataMember()> Public Property Address_Address As List(Of Address_AddressItem)
            <DataMember()> Public Property RootItemsCLIDOCUMENTSNTYPCLIENTDOC As System.Int32
            <DataMember()> Public Property RootItemsCLIDOCUMENTSSCLINUMDOCU As System.String
            <DataMember()> Public Property RootItemsCLIDOCUMENTSDISSUEDAT As System.DateTime
            <DataMember()> Public Property RootItemsCLIDOCUMENTSDEXPIRDAT As System.DateTime
            <DataMember()> Public Property CLIDOCUMENTS_CLIDOCUMENTS As List(Of CLIDOCUMENTS_CLIDOCUMENTSItem)
            <DataMember()> Public Property RootItemsDIR_DEBIT_CLISTYP_DIRDEB As System.String
            <DataMember()> Public Property RootItemsDIR_DEBIT_CLINBANKEXT As System.Int32
            <DataMember()> Public Property RootItemsDIR_DEBIT_CLISACCOUNT As System.String
            <DataMember()> Public Property RootItemsDIR_DEBIT_CLINBILL_DAY As System.Int32
            <DataMember()> Public Property RootItemsDIR_DEBIT_CLIDEFFECDATE As System.DateTime
            <DataMember()> Public Property RootItemsDIR_DEBIT_CLIDNULLDATE As System.DateTime
            <DataMember()> Public Property DIR_DEBIT_CLI_DIR_DEBIT_CLI As List(Of DIR_DEBIT_CLI_DIR_DEBIT_CLIItem)
            <DataMember()> Public Property RootItemsBk_accountnTyp_acc As System.Int32
            <DataMember()> Public Property RootItemsBk_accountnBankExt As System.Int32
            <DataMember()> Public Property RootItemsBk_accountsAccount As System.String
            <DataMember()> Public Property RootItemsBk_accountsStatregt As System.String
            <DataMember()> Public Property Bk_account_Bk_account As List(Of Bk_account_Bk_accountItem)
            <DataMember()> Public Property RootItemsCred_cardsCredi_Card As System.String
            <DataMember()> Public Property RootItemsCred_cardnCard_type As System.Int32
            <DataMember()> Public Property RootItemsCred_cardnBankExt As System.Int32
            <DataMember()> Public Property RootItemsCred_carddCardExpir As System.DateTime
            <DataMember()> Public Property Cred_card_Cred_card As List(Of Cred_card_Cred_cardItem)
            <DataMember()> Public Property RootItemsCurr_accnTyp_acco As System.Int32
            <DataMember()> Public Property RootItemsCurr_accnDebit As System.Int32
            <DataMember()> Public Property RootItemsCurr_accnCredit As System.Int32
            <DataMember()> Public Property RootItemsCurr_accnBalance As System.Int32
            <DataMember()> Public Property RootItemsCurr_accnCurrency As System.Int32
            <DataMember()> Public Property Curr_acc_Curr_acc As List(Of Curr_acc_Curr_accItem)
            <DataMember()> Public Property RootItemsSportnSport As System.Int32
            <DataMember()> Public Property Sport_Sport As List(Of Sport_SportItem)
            <DataMember()> Public Property RootItemsHobbynHobby As System.Int32
            <DataMember()> Public Property Hobby_Hobby As List(Of Hobby_HobbyItem)
            <DataMember()> Public Property RootItemsFinanc_clinConcept As System.Int32
            <DataMember()> Public Property RootItemsFinanc_clinAmount As System.Int32
            <DataMember()> Public Property RootItemsFinanc_clinCurrency As System.Int32
            <DataMember()> Public Property RootItemsFinanc_clinUnits As System.Int32
            <DataMember()> Public Property RootItemsFinanc_clinFinanStat As System.Int32
            <DataMember()> Public Property Financ_cli_Financ_cli As List(Of Financ_cli_Financ_cliItem)
            <DataMember()> Public Property RootItemsRelationsnRelaship As System.Int32
            <DataMember()> Public Property RootItemsRelationssClientr As System.String
            <DataMember()> Public Property Relations_Relations As List(Of Relations_RelationsItem)
            <DataMember()> Public Property RootItemsCHEQUESSREQUEST_TY As System.String
            <DataMember()> Public Property RootItemsCHEQUESNREQUEST_NU As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESSCHEQUE As System.String
            <DataMember()> Public Property RootItemsCHEQUESNAMOUNT As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNCURRENCYPAY As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNCONCEPT As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNSTA_CHEQUE As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESSINTER_PAY As System.String
            <DataMember()> Public Property RootItemsCHEQUESNOFFICE As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNOFFICEAGEN As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNAGENCY As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNTYPESUPPORT As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNDOCSUPPORT As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESDSTAT_DATE As System.DateTime
            <DataMember()> Public Property RootItemsCHEQUESSDESCRIPT As System.String
            <DataMember()> Public Property CHEQUES_CHEQUES As List(Of CHEQUES_CHEQUESItem)
            <DataMember()> Public Property RootItemsROLEINCASEUnderwritingCaseID As System.Int32
            <DataMember()> Public Property RootItemsROLEINCASEOpenDate As System.DateTime
            <DataMember()> Public Property RootItemsROLEINCASECloseDate As System.DateTime
            <DataMember()> Public Property RootItemsROLEINCASEDecision As System.Int32
            <DataMember()> Public Property RootItemsROLEINCASEStatus As System.Int32
            <DataMember()> Public Property ROLEINCASE_ROLEINCASE As List(Of ROLEINCASE_ROLEINCASEItem)
            <DataMember()> Public Property Items_Item As List(Of Items_ItemItem)

        End Class

        <Serializable()>
        <DataContract()>
        Public Class PHYSICALADDRESSES_PHYSICALADDRESSESItem

            <DataMember()> Public Property TypeOfPhysicalAddress As System.Int32
            <DataMember()> Public Property TypeOfPhysicalAddressDesc As System.String
            <DataMember()> Public Property AddressNormalizedI As System.String
            <DataMember()> Public Property AddressNormalizedII As System.String
            <DataMember()> Public Property ZipCode As System.String
            <DataMember()> Public Property CancellationDate As System.DateTime
            <DataMember()> Public Property AddressID As System.Int32
            <DataMember()> Public Property EffectiveDate As System.DateTime
            <DataMember()> Public Property InternalAddressKey As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class EMAILS_EMAILSItem

            <DataMember()> Public Property eMail As System.String
            <DataMember()> Public Property HasBeenConfirmed As System.String
            <DataMember()> Public Property CancellationDate As System.DateTime
            <DataMember()> Public Property EffectiveDate As System.DateTime
            <DataMember()> Public Property AddressID As System.Int32
            <DataMember()> Public Property InternalAddressKey As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class SOCIALNETWORK_SOCIALNETWORKItem

            <DataMember()> Public Property NetworkType As System.Int32
            <DataMember()> Public Property NetworkTypeDesc As System.String
            <DataMember()> Public Property NetworkValue As System.String
            <DataMember()> Public Property AddressID As System.Int32
            <DataMember()> Public Property EffectiveDate As System.DateTime
            <DataMember()> Public Property CancellationDate As System.DateTime
            <DataMember()> Public Property InternalAddressKey As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class OTHERTYPEADDRESS_OTHERTYPEADDRESSItem

            <DataMember()> Public Property CountryID As System.Int32
            <DataMember()> Public Property POBox As System.String
            <DataMember()> Public Property Url As System.String
            <DataMember()> Public Property AddressValidatedElectronically As System.String
            <DataMember()> Public Property CancellationDate As System.DateTime
            <DataMember()> Public Property EffectiveDate As System.DateTime
            <DataMember()> Public Property AddressID As System.Int32
            <DataMember()> Public Property InternalAddressKey As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Certificat_CertificatItem

            <DataMember()> Public Property nBranch As System.Int32
            <DataMember()> Public Property nBranchDesc As System.String
            <DataMember()> Public Property nProduct As System.Int32
            <DataMember()> Public Property nProductDesc As System.String
            <DataMember()> Public Property nPolicy As System.Int32
            <DataMember()> Public Property nCapital As System.Int32
            <DataMember()> Public Property dIssuedat As System.DateTime
            <DataMember()> Public Property dStartdate As System.DateTime
            <DataMember()> Public Property dExpirdat As System.DateTime
            <DataMember()> Public Property dNulldate As System.DateTime
            <DataMember()> Public Property nNullcode As System.Int32
            <DataMember()> Public Property nNullcodeDesc As System.String
            <DataMember()> Public Property nPayfreq As System.Int32
            <DataMember()> Public Property nPayfreqDesc As System.String
            <DataMember()> Public Property sStatusva As System.String
            <DataMember()> Public Property sStatusvaDesc As System.String
            <DataMember()> Public Property nWait_code As System.Int32
            <DataMember()> Public Property nWait_codeDesc As System.String
            <DataMember()> Public Property sRenewal As System.String
            <DataMember()> Public Property dChangdat As System.DateTime
            <DataMember()> Public Property NINTERMED As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Premium_PremiumItem

            <DataMember()> Public Property nCurrency As System.Int32
            <DataMember()> Public Property nCurrencyDesc As System.String
            <DataMember()> Public Property nStatus_pre As System.Int32
            <DataMember()> Public Property nStatus_preDesc As System.String
            <DataMember()> Public Property nReceipt As System.Int32
            <DataMember()> Public Property nBranch As System.Int32
            <DataMember()> Public Property nBranchDesc As System.String
            <DataMember()> Public Property nProduct As System.Int32
            <DataMember()> Public Property nProductDesc As System.String
            <DataMember()> Public Property nPolicy As System.Int32
            <DataMember()> Public Property nTratypei As System.Int32
            <DataMember()> Public Property nTratypeiDesc As System.String
            <DataMember()> Public Property nPremium As System.Int32
            <DataMember()> Public Property NBALANCE As System.Int32
            <DataMember()> Public Property dIssuedat As System.DateTime
            <DataMember()> Public Property DEFFECDATE As System.DateTime
            <DataMember()> Public Property dExpirdat As System.DateTime
            <DataMember()> Public Property nCollector As System.Int32
            <DataMember()> Public Property sReject As System.String
            <DataMember()> Public Property dLimitDate As System.DateTime
            <DataMember()> Public Property nWay_pay As System.Int32
            <DataMember()> Public Property nWay_payDesc As System.String
            <DataMember()> Public Property NINTERMED As System.Int32
            <DataMember()> Public Property nParticip As System.Int32
            <DataMember()> Public Property nComamou As System.Int32
            <DataMember()> Public Property nType As System.Int32
            <DataMember()> Public Property sStatusva As System.String
            <DataMember()> Public Property sStatusvaDesc As System.String
            <DataMember()> Public Property sManauti As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Claim_ClaimItem

            <DataMember()> Public Property nBranch As System.Int32
            <DataMember()> Public Property nBranchDesc As System.String
            <DataMember()> Public Property nProduct As System.Int32
            <DataMember()> Public Property nProductDesc As System.String
            <DataMember()> Public Property nPolicy As System.Int32
            <DataMember()> Public Property NCERTIF As System.Int32
            <DataMember()> Public Property dDecladat As System.DateTime
            <DataMember()> Public Property nClaim As System.Int32
            <DataMember()> Public Property dOccurdat As System.DateTime
            <DataMember()> Public Property sClaimtyp As System.String
            <DataMember()> Public Property sClaimtypDesc As System.String
            <DataMember()> Public Property nCausecod As System.Int32
            <DataMember()> Public Property nCausecodDesc As System.String
            <DataMember()> Public Property sStaclaim As System.String
            <DataMember()> Public Property sStaclaimDesc As System.String
            <DataMember()> Public Property nUnaccode As System.Int32
            <DataMember()> Public Property nUnaccodeDesc As System.String
            <DataMember()> Public Property dPrescdat As System.DateTime
            <DataMember()> Public Property nLoc_reserv As System.Int32
            <DataMember()> Public Property nLoc_pay_am As System.Int32
            <DataMember()> Public Property nLoc_out_am As System.Int32
            <DataMember()> Public Property nLoc_rec_am As System.Int32
            <DataMember()> Public Property nLoc_cos_re As System.Int32
            <DataMember()> Public Property dCompdate As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class PHONES_PHONESItem

            <DataMember()> Public Property NPHONE_TYPE As System.Int32
            <DataMember()> Public Property NPHONE_TYPEDesc As System.String
            <DataMember()> Public Property NAREA_CODE As System.Int32
            <DataMember()> Public Property SPHONE As System.String
            <DataMember()> Public Property NEXTENS1 As System.Int32
            <DataMember()> Public Property NEXTENS2 As System.Int32
            <DataMember()> Public Property NBESTTIMETOCALL As System.Int32
            <DataMember()> Public Property NBESTTIMETOCALLDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Address_AddressItem

            <DataMember()> Public Property SRECTYPE As System.String
            <DataMember()> Public Property nCountry As System.Int32
            <DataMember()> Public Property nCountryDesc As System.String
            <DataMember()> Public Property nProvince As System.Int32
            <DataMember()> Public Property nProvinceDesc As System.String
            <DataMember()> Public Property nLocal As System.Int32
            <DataMember()> Public Property nLocalDesc As System.String
            <DataMember()> Public Property nMunicipality As System.Int32
            <DataMember()> Public Property nMunicipalityDesc As System.String
            <DataMember()> Public Property sDescAdd As System.String
            <DataMember()> Public Property sE_mail As System.String
            <DataMember()> Public Property sStreet As System.String
            <DataMember()> Public Property sStreet1 As System.String
            <DataMember()> Public Property sBuild As System.String
            <DataMember()> Public Property sDepartment As System.String
            <DataMember()> Public Property sPobox As System.String
            <DataMember()> Public Property NRECOWNER As System.String
            <DataMember()> Public Property SKEYADDRESS As System.String
            <DataMember()> Public Property DEFFECDATE As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CLIDOCUMENTS_CLIDOCUMENTSItem

            <DataMember()> Public Property NTYPCLIENTDOC As System.Int32
            <DataMember()> Public Property NTYPCLIENTDOCDesc As System.String
            <DataMember()> Public Property SCLINUMDOCU As System.String
            <DataMember()> Public Property DISSUEDAT As System.DateTime
            <DataMember()> Public Property DEXPIRDAT As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class DIR_DEBIT_CLI_DIR_DEBIT_CLIItem

            <DataMember()> Public Property STYP_DIRDEB As System.String
            <DataMember()> Public Property NBANKEXT As System.Int32
            <DataMember()> Public Property NBANKEXTDesc As System.String
            <DataMember()> Public Property SACCOUNT As System.String
            <DataMember()> Public Property NBILL_DAY As System.Int32
            <DataMember()> Public Property DEFFECDATE As System.DateTime
            <DataMember()> Public Property DNULLDATE As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Bk_account_Bk_accountItem

            <DataMember()> Public Property nTyp_acc As System.Int32
            <DataMember()> Public Property nTyp_accDesc As System.String
            <DataMember()> Public Property nBankExt As System.Int32
            <DataMember()> Public Property nBankExtDesc As System.String
            <DataMember()> Public Property sAccount As System.String
            <DataMember()> Public Property sStatregt As System.String
            <DataMember()> Public Property sStatregtDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Cred_card_Cred_cardItem

            <DataMember()> Public Property sCredi_Card As System.String
            <DataMember()> Public Property nCard_type As System.Int32
            <DataMember()> Public Property nCard_typeDesc As System.String
            <DataMember()> Public Property nBankExt As System.Int32
            <DataMember()> Public Property nBankExtDesc As System.String
            <DataMember()> Public Property dCardExpir As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Curr_acc_Curr_accItem

            <DataMember()> Public Property nTyp_acco As System.Int32
            <DataMember()> Public Property nTyp_accoDesc As System.String
            <DataMember()> Public Property nDebit As System.Int32
            <DataMember()> Public Property nCredit As System.Int32
            <DataMember()> Public Property nBalance As System.Int32
            <DataMember()> Public Property nCurrency As System.Int32
            <DataMember()> Public Property nCurrencyDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Sport_SportItem

            <DataMember()> Public Property nSport As System.Int32
            <DataMember()> Public Property nSportDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Hobby_HobbyItem

            <DataMember()> Public Property nHobby As System.Int32
            <DataMember()> Public Property nHobbyDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Financ_cli_Financ_cliItem

            <DataMember()> Public Property nConcept As System.Int32
            <DataMember()> Public Property nConceptDesc As System.String
            <DataMember()> Public Property nAmount As System.Int32
            <DataMember()> Public Property nCurrency As System.Int32
            <DataMember()> Public Property nCurrencyDesc As System.String
            <DataMember()> Public Property nUnits As System.Int32
            <DataMember()> Public Property nFinanStat As System.Int32
            <DataMember()> Public Property nFinanStatDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Relations_RelationsItem

            <DataMember()> Public Property nRelaship As System.Int32
            <DataMember()> Public Property nRelashipDesc As System.String
            <DataMember()> Public Property sClientr As System.String
            <DataMember()> Public Property sClientrDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CHEQUES_CHEQUESItem

            <DataMember()> Public Property SREQUEST_TY As System.String
            <DataMember()> Public Property SREQUEST_TYDesc As System.String
            <DataMember()> Public Property NREQUEST_NU As System.Int32
            <DataMember()> Public Property SCHEQUE As System.String
            <DataMember()> Public Property NAMOUNT As System.Int32
            <DataMember()> Public Property NCURRENCYPAY As System.Int32
            <DataMember()> Public Property NCURRENCYPAYDesc As System.String
            <DataMember()> Public Property NCONCEPT As System.Int32
            <DataMember()> Public Property NCONCEPTDesc As System.String
            <DataMember()> Public Property NSTA_CHEQUE As System.Int32
            <DataMember()> Public Property NSTA_CHEQUEDesc As System.String
            <DataMember()> Public Property SINTER_PAY As System.String
            <DataMember()> Public Property SINTER_PAYDesc As System.String
            <DataMember()> Public Property NOFFICE As System.Int32
            <DataMember()> Public Property NOFFICEDesc As System.String
            <DataMember()> Public Property NOFFICEAGEN As System.Int32
            <DataMember()> Public Property NOFFICEAGENDesc As System.String
            <DataMember()> Public Property NAGENCY As System.Int32
            <DataMember()> Public Property NTYPESUPPORT As System.Int32
            <DataMember()> Public Property NTYPESUPPORTDesc As System.String
            <DataMember()> Public Property NDOCSUPPORT As System.Int32
            <DataMember()> Public Property DSTAT_DATE As System.DateTime
            <DataMember()> Public Property SDESCRIPT As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class ROLEINCASE_ROLEINCASEItem

            <DataMember()> Public Property UnderwritingCaseID As System.Int32
            <DataMember()> Public Property OpenDate As System.DateTime
            <DataMember()> Public Property CloseDate As System.DateTime
            <DataMember()> Public Property Decision As System.Int32
            <DataMember()> Public Property DecisionDesc As System.String
            <DataMember()> Public Property Status As System.Int32
            <DataMember()> Public Property StatusDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Items_ItemItem

            <DataMember()> Public Property SCLIENT As System.String
            <DataMember()> Public Property sCliename As System.String
            <DataMember()> Public Property SLEGALNAME As System.String
            <DataMember()> Public Property sFirstname As System.String
            <DataMember()> Public Property sLastname As System.String
            <DataMember()> Public Property sLastName2 As System.String
            <DataMember()> Public Property sSexClien As System.String
            <DataMember()> Public Property sSexClienDesc As System.String
            <DataMember()> Public Property nCivilSta As System.Int32
            <DataMember()> Public Property nCivilStaDesc As System.String
            <DataMember()> Public Property nWeight As System.Int32
            <DataMember()> Public Property nHeight As System.Int32
            <DataMember()> Public Property dBirthdat As System.DateTime
            <DataMember()> Public Property dDeathdat As System.DateTime
            <DataMember()> Public Property sSmoking As System.String
            <DataMember()> Public Property nLanguage As System.Int32
            <DataMember()> Public Property nLanguageDesc As System.String
            <DataMember()> Public Property nMailingPref As System.Int32
            <DataMember()> Public Property nMailingPrefDesc As System.String
            <DataMember()> Public Property nTitle As System.Int32
            <DataMember()> Public Property nTitleDesc As System.String
            <DataMember()> Public Property nSpeciality As System.Int32
            <DataMember()> Public Property nSpecialityDesc As System.String
            <DataMember()> Public Property nNationality As System.Int32
            <DataMember()> Public Property nNationalityDesc As System.String
            <DataMember()> Public Property nClass As System.Int32
            <DataMember()> Public Property nClassDesc As System.String
            <DataMember()> Public Property dDependant As System.DateTime
            <DataMember()> Public Property dIndependant As System.DateTime
            <DataMember()> Public Property dInpdate As System.DateTime
            <DataMember()> Public Property SDIGIT As System.String
            <DataMember()> Public Property ClientID As System.String
            <DataMember()> Public Property NADDRESSID As System.Int32

        End Class


#End Region

    End Class

End Namespace