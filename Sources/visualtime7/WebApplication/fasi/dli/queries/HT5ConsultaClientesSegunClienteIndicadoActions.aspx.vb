'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Query Designer v7.1.118.1 at 2019/02/07 09:47:30 a.m. model release 1, Form Generator v1.0.34.9 - Query Generator v1.0.16.4
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"

Imports System.Data
Imports System.Globalization
Imports System.Runtime.Serialization
Imports System.Web.Script.Services
Imports System.Web.Services
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.FrontOffice.Support

#End Region

Namespace dli.forms

    Public Class HT5ConsultaClientesSegunClienteIndicadoActions
        Inherits System.Web.UI.Page

#Region "Actions Methods"
   
        <WebMethod()>
        Public Shared Function ItemsTblDataLoad(CLIENTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.SCLIENT = String.Empty, .sCliename = String.Empty, .sFirstname = String.Empty, .sLastname = String.Empty, .sLastName2 = String.Empty, .sSexClien = String.Empty, .nCivilSta = 0, .nWeight = 0, .nHeight = 0, .dBirthdat = Date.MinValue, .dDeathdat = Date.MinValue, .sSmoking = String.Empty, .nLanguage = 0, .nMailingPref = 0, .nTitle = 0, .nSpeciality = 0, .nNationality = 0, .nClass = 0, .dDependant = Date.MinValue, .dIndependant = Date.MinValue, .dInpdate = Date.MinValue, .SDIGIT = String.Empty, .sSexClienDesc = String.Empty, .nCivilStaDesc = String.Empty, .nLanguageDesc = String.Empty, .nMailingPrefDesc = String.Empty, .nTitleDesc = String.Empty, .nSpecialityDesc = String.Empty, .nNationalityDesc = String.Empty, .nClassDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLIENT.SCLIENT, CLIENT.SCLIENAME, CLIENT.SFIRSTNAME, CLIENT.SLASTNAME, CLIENT.SLASTNAME2, CLIENT.SSEXCLIEN, CLIENT.NCIVILSTA, CLIENT.NWEIGHT, CLIENT.NHEIGHT, CLIENT.DBIRTHDAT, CLIENT.DDEATHDAT, CLIENT.SSMOKING, CLIENT.NLANGUAGE, CLIENT.NMAILINGPREF, CLIENT.NTITLE, CLIENT.NSPECIALITY, CLIENT.NNATIONALITY, CLIENT.NCLASS, CLIENT.DDEPENDANT, CLIENT.DINDEPENDANT, CLIENT.DINPDATE, CLIENT.SDIGIT, TABLE18.SDESCRIPT SSEXCLIENDESC, TABLE14.SDESCRIPT NCIVILSTADESC, TABLE85.SSHORT_DES NLANGUAGEDESC, TABLE4008.SDESCRIPT NMAILINGPREFDESC, TABLE222.SDESCRIPT NTITLEDESC, TABLE16.SDESCRIPT NSPECIALITYDESC, TABLE5518.SDESCRIPT NNATIONALITYDESC, TABLE146.SDESCRIPT NCLASSDESC FROM CLIENT CLIENT LEFT JOIN TABLE18 TABLE18 ON TABLE18.SSEXCLIEN = CLIENT.SSEXCLIEN LEFT JOIN TABLE14 TABLE14 ON TABLE14.NCIVILSTA = CLIENT.NCIVILSTA LEFT JOIN TABLE85 TABLE85 ON TABLE85.NLANGUAGE = CLIENT.NLANGUAGE LEFT JOIN TABLE4008 TABLE4008 ON TABLE4008.NMAILINGPREF = CLIENT.NMAILINGPREF LEFT JOIN TABLE222 TABLE222 ON TABLE222.NTITLE = CLIENT.NTITLE LEFT JOIN TABLE16 TABLE16 ON TABLE16.NSPECIALITY = CLIENT.NSPECIALITY LEFT JOIN TABLE5518 TABLE5518 ON TABLE5518.NNATIONALITY = CLIENT.NNATIONALITY LEFT JOIN TABLE146 TABLE146 ON TABLE146.NCLASS = CLIENT.NCLASS  WHERE CLIENT.SCLIENT = @:CLIENTSCLIENT1", "CLIENT", "Linked.LatCombined")
                    .AddParameter("CLIENTSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLIENTSCLIENT1 = String.Empty), CLIENTSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.SCLIENT = itemData.StringValue("SCLIENT"), .sCliename = itemData.StringValue("SCLIENAME"), .sFirstname = itemData.StringValue("SFIRSTNAME"), .sLastname = itemData.StringValue("SLASTNAME"), .sLastName2 = itemData.StringValue("SLASTNAME2"), .sSexClien = itemData.StringValue("SSEXCLIEN"), .nCivilSta = itemData.NumericValue("NCIVILSTA"), .nWeight = itemData.NumericValue("NWEIGHT"), .nHeight = itemData.NumericValue("NHEIGHT"), .dBirthdat = itemData.DateTimeValue("DBIRTHDAT"), .dDeathdat = itemData.DateTimeValue("DDEATHDAT"), .sSmoking = itemData.StringValue("SSMOKING"), .nLanguage = itemData.NumericValue("NLANGUAGE"), .nMailingPref = itemData.NumericValue("NMAILINGPREF"), .nTitle = itemData.NumericValue("NTITLE"), .nSpeciality = itemData.NumericValue("NSPECIALITY"), .nNationality = itemData.NumericValue("NNATIONALITY"), .nClass = itemData.NumericValue("NCLASS"), .dDependant = itemData.DateTimeValue("DDEPENDANT"), .dIndependant = itemData.DateTimeValue("DINDEPENDANT"), .dInpdate = itemData.DateTimeValue("DINPDATE"), .SDIGIT = itemData.StringValue("SDIGIT"), .sSexClienDesc = itemData.StringValue("SSEXCLIENDESC"), .nCivilStaDesc = itemData.StringValue("NCIVILSTADESC"), .nLanguageDesc = itemData.StringValue("NLANGUAGEDESC"), .nMailingPrefDesc = itemData.StringValue("NMAILINGPREFDESC"), .nTitleDesc = itemData.StringValue("NTITLEDESC"), .nSpecialityDesc = itemData.StringValue("NSPECIALITYDESC"), .nNationalityDesc = itemData.StringValue("NNATIONALITYDESC"), .nClassDesc = itemData.StringValue("NCLASSDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ItemsTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ItemsTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ItemsTblDataCount(CLIENTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLIENT.SCLIENT, CLIENT.SCLIENAME, CLIENT.SFIRSTNAME, CLIENT.SLASTNAME, CLIENT.SLASTNAME2, CLIENT.SSEXCLIEN, CLIENT.NCIVILSTA, CLIENT.NWEIGHT, CLIENT.NHEIGHT, CLIENT.DBIRTHDAT, CLIENT.DDEATHDAT, CLIENT.SSMOKING, CLIENT.NLANGUAGE, CLIENT.NMAILINGPREF, CLIENT.NTITLE, CLIENT.NSPECIALITY, CLIENT.NNATIONALITY, CLIENT.NCLASS, CLIENT.DDEPENDANT, CLIENT.DINDEPENDANT, CLIENT.DINPDATE, CLIENT.SDIGIT, TABLE18.SDESCRIPT SSEXCLIENDESC, TABLE14.SDESCRIPT NCIVILSTADESC, TABLE85.SSHORT_DES NLANGUAGEDESC, TABLE4008.SDESCRIPT NMAILINGPREFDESC, TABLE222.SDESCRIPT NTITLEDESC, TABLE16.SDESCRIPT NSPECIALITYDESC, TABLE5518.SDESCRIPT NNATIONALITYDESC, TABLE146.SDESCRIPT NCLASSDESC FROM CLIENT CLIENT LEFT JOIN TABLE18 TABLE18 ON TABLE18.SSEXCLIEN = CLIENT.SSEXCLIEN LEFT JOIN TABLE14 TABLE14 ON TABLE14.NCIVILSTA = CLIENT.NCIVILSTA LEFT JOIN TABLE85 TABLE85 ON TABLE85.NLANGUAGE = CLIENT.NLANGUAGE LEFT JOIN TABLE4008 TABLE4008 ON TABLE4008.NMAILINGPREF = CLIENT.NMAILINGPREF LEFT JOIN TABLE222 TABLE222 ON TABLE222.NTITLE = CLIENT.NTITLE LEFT JOIN TABLE16 TABLE16 ON TABLE16.NSPECIALITY = CLIENT.NSPECIALITY LEFT JOIN TABLE5518 TABLE5518 ON TABLE5518.NNATIONALITY = CLIENT.NNATIONALITY LEFT JOIN TABLE146 TABLE146 ON TABLE146.NCLASS = CLIENT.NCLASS  WHERE CLIENT.SCLIENT = @:CLIENTSCLIENT1)", "CLIENT", "Linked.LatCombined")
                    .AddParameter("CLIENTSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLIENTSCLIENT1 = String.Empty), CLIENTSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ItemsTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ItemsTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CertificatTblDataLoad(filter As String, CERTIFICATSCLIENT1 As String, CERTIFICATSCLIENT5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nBranch = 0, .nProduct = 0, .nPolicy = 0, .nCapital = 0, .nPayfreq = 0, .sStatusva = String.Empty, .dIssuedat = Date.MinValue, .nWait_code = 0, .dStartdate = Date.MinValue, .sRenewal = String.Empty, .dNulldate = Date.MinValue, .nNullcode = 0, .dExpirdat = Date.MinValue, .dChangdat = Date.MinValue, .SCERTYPE = String.Empty, .NCERTIF = 0, .nBranchDesc = String.Empty, .nProductDesc = String.Empty, .nPayfreqDesc = String.Empty, .sStatusvaDesc = String.Empty, .nWait_codeDesc = String.Empty, .nNullcodeDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CERTIFICAT.NBRANCH, CERTIFICAT.NPRODUCT, CERTIFICAT.NPOLICY, CERTIFICAT.NCAPITAL, CERTIFICAT.NPAYFREQ, CERTIFICAT.SSTATUSVA, CERTIFICAT.DISSUEDAT, CERTIFICAT.NWAIT_CODE, CERTIFICAT.DSTARTDATE, CERTIFICAT.SRENEWAL, CERTIFICAT.DNULLDATE, CERTIFICAT.NNULLCODE, CERTIFICAT.DEXPIRDAT, CERTIFICAT.DCHANGDAT, CERTIFICAT.SCERTYPE, CERTIFICAT.NCERTIF, CERTIFICAT.SCLIENT SCLIENT, TABLE10.SDESCRIPT NBRANCHDESC, PRODMASTER.SDESCRIPT NPRODUCTDESC, TABLE36.SDESCRIPT NPAYFREQDESC, TABLE181.SDESCRIPT SSTATUSVADESC, TAB_WAITPO.SDESCRIPT NWAIT_CODEDESC, TABLE13.SDESCRIPT NNULLCODEDESC, POLICY.SPOLITYPE SPOLITYPE FROM CERTIFICAT CERTIFICAT LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = CERTIFICAT.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = CERTIFICAT.NBRANCH  AND PRODMASTER.NPRODUCT = CERTIFICAT.NPRODUCT LEFT JOIN TABLE36 TABLE36 ON TABLE36.NPAYFREQ = CERTIFICAT.NPAYFREQ LEFT JOIN TABLE181 TABLE181 ON TABLE181.SSTATUSVA = CERTIFICAT.SSTATUSVA LEFT JOIN TAB_WAITPO TAB_WAITPO ON TAB_WAITPO.NWAIT_CODE = CERTIFICAT.NWAIT_CODE LEFT JOIN TABLE13 TABLE13 ON TABLE13.NNULLCODE = CERTIFICAT.NNULLCODE LEFT JOIN POLICY POLICY ON POLICY.SCERTYPE = CERTIFICAT.SCERTYPE  AND POLICY.NBRANCH = CERTIFICAT.NBRANCH  AND POLICY.NPRODUCT = CERTIFICAT.NPRODUCT  AND POLICY.NPOLICY = CERTIFICAT.NPOLICY  WHERE CERTIFICAT.SCLIENT = @:CERTIFICATSCLIENT1 AND POLICY.SPOLITYPE = '1' AND CERTIFICAT.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND CERTIFICAT.SCLIENT = @:CERTIFICATSCLIENT5", "CERTIFICAT", "Linked.LatCombined")
                    .AddParameter("CERTIFICATSCLIENT1", DbType.AnsiStringFixedLength, 0, (CERTIFICATSCLIENT1 = String.Empty), CERTIFICATSCLIENT1)
                    .AddParameter("CERTIFICATSCLIENT5", DbType.AnsiStringFixedLength, 0, (CERTIFICATSCLIENT5 = String.Empty), CERTIFICATSCLIENT5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nBranch = itemData.NumericValue("NBRANCH"), .nProduct = itemData.NumericValue("NPRODUCT"), .nPolicy = itemData.NumericValue("NPOLICY"), .nCapital = itemData.NumericValue("NCAPITAL"), .nPayfreq = itemData.NumericValue("NPAYFREQ"), .sStatusva = itemData.StringValue("SSTATUSVA"), .dIssuedat = itemData.DateTimeValue("DISSUEDAT"), .nWait_code = itemData.NumericValue("NWAIT_CODE"), .dStartdate = itemData.DateTimeValue("DSTARTDATE"), .sRenewal = itemData.StringValue("SRENEWAL"), .dNulldate = itemData.DateTimeValue("DNULLDATE"), .nNullcode = itemData.NumericValue("NNULLCODE"), .dExpirdat = itemData.DateTimeValue("DEXPIRDAT"), .dChangdat = itemData.DateTimeValue("DCHANGDAT"), .SCERTYPE = itemData.StringValue("SCERTYPE"), .NCERTIF = itemData.NumericValue("NCERTIF"), .nBranchDesc = itemData.StringValue("NBRANCHDESC"), .nProductDesc = itemData.StringValue("NPRODUCTDESC"), .nPayfreqDesc = itemData.StringValue("NPAYFREQDESC"), .sStatusvaDesc = itemData.StringValue("SSTATUSVADESC"), .nWait_codeDesc = itemData.StringValue("NWAIT_CODEDESC"), .nNullcodeDesc = itemData.StringValue("NNULLCODEDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CertificatTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CertificatTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CertificatTblDataCount(filter As String, CERTIFICATSCLIENT1 As String, CERTIFICATSCLIENT5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CERTIFICAT.NBRANCH, CERTIFICAT.NPRODUCT, CERTIFICAT.NPOLICY, CERTIFICAT.NCAPITAL, CERTIFICAT.NPAYFREQ, CERTIFICAT.SSTATUSVA, CERTIFICAT.DISSUEDAT, CERTIFICAT.NWAIT_CODE, CERTIFICAT.DSTARTDATE, CERTIFICAT.SRENEWAL, CERTIFICAT.DNULLDATE, CERTIFICAT.NNULLCODE, CERTIFICAT.DEXPIRDAT, CERTIFICAT.DCHANGDAT, CERTIFICAT.SCERTYPE, CERTIFICAT.NCERTIF, CERTIFICAT.SCLIENT SCLIENT, TABLE10.SDESCRIPT NBRANCHDESC, PRODMASTER.SDESCRIPT NPRODUCTDESC, TABLE36.SDESCRIPT NPAYFREQDESC, TABLE181.SDESCRIPT SSTATUSVADESC, TAB_WAITPO.SDESCRIPT NWAIT_CODEDESC, TABLE13.SDESCRIPT NNULLCODEDESC, POLICY.SPOLITYPE SPOLITYPE FROM CERTIFICAT CERTIFICAT LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = CERTIFICAT.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = CERTIFICAT.NBRANCH  AND PRODMASTER.NPRODUCT = CERTIFICAT.NPRODUCT LEFT JOIN TABLE36 TABLE36 ON TABLE36.NPAYFREQ = CERTIFICAT.NPAYFREQ LEFT JOIN TABLE181 TABLE181 ON TABLE181.SSTATUSVA = CERTIFICAT.SSTATUSVA LEFT JOIN TAB_WAITPO TAB_WAITPO ON TAB_WAITPO.NWAIT_CODE = CERTIFICAT.NWAIT_CODE LEFT JOIN TABLE13 TABLE13 ON TABLE13.NNULLCODE = CERTIFICAT.NNULLCODE LEFT JOIN POLICY POLICY ON POLICY.SCERTYPE = CERTIFICAT.SCERTYPE  AND POLICY.NBRANCH = CERTIFICAT.NBRANCH  AND POLICY.NPRODUCT = CERTIFICAT.NPRODUCT  AND POLICY.NPOLICY = CERTIFICAT.NPOLICY  WHERE CERTIFICAT.SCLIENT = @:CERTIFICATSCLIENT1 AND POLICY.SPOLITYPE = '1' AND CERTIFICAT.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND CERTIFICAT.SCLIENT = @:CERTIFICATSCLIENT5)", "CERTIFICAT", "Linked.LatCombined")
                    .AddParameter("CERTIFICATSCLIENT1", DbType.AnsiStringFixedLength, 0, (CERTIFICATSCLIENT1 = String.Empty), CERTIFICATSCLIENT1)
                    .AddParameter("CERTIFICATSCLIENT5", DbType.AnsiStringFixedLength, 0, (CERTIFICATSCLIENT5 = String.Empty), CERTIFICATSCLIENT5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CertificatTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CertificatTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CertificatSelectCommandActionCERTIFICAT(CERTIFICATSCLIENT1 As String, CERTIFICATSCLIENT5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CERTIFICAT.NBRANCH) COUNTDATA FROM CERTIFICAT CERTIFICAT LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = CERTIFICAT.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = CERTIFICAT.NBRANCH  AND PRODMASTER.NPRODUCT = CERTIFICAT.NPRODUCT LEFT JOIN TABLE36 TABLE36 ON TABLE36.NPAYFREQ = CERTIFICAT.NPAYFREQ LEFT JOIN TABLE181 TABLE181 ON TABLE181.SSTATUSVA = CERTIFICAT.SSTATUSVA LEFT JOIN TAB_WAITPO TAB_WAITPO ON TAB_WAITPO.NWAIT_CODE = CERTIFICAT.NWAIT_CODE LEFT JOIN TABLE13 TABLE13 ON TABLE13.NNULLCODE = CERTIFICAT.NNULLCODE LEFT JOIN POLICY POLICY ON POLICY.SCERTYPE = CERTIFICAT.SCERTYPE  AND POLICY.NBRANCH = CERTIFICAT.NBRANCH  AND POLICY.NPRODUCT = CERTIFICAT.NPRODUCT  AND POLICY.NPOLICY = CERTIFICAT.NPOLICY  WHERE CERTIFICAT.SCLIENT = @:CERTIFICATSCLIENT1 AND POLICY.SPOLITYPE = '1' AND CERTIFICAT.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND CERTIFICAT.SCLIENT = @:CERTIFICATSCLIENT5", "CERTIFICAT", "Linked.LatCombined")
                    .AddParameter("CERTIFICATSCLIENT1", DbType.AnsiStringFixedLength, 0, (CERTIFICATSCLIENT1 = String.Empty), CERTIFICATSCLIENT1)
                    .AddParameter("CERTIFICATSCLIENT5", DbType.AnsiStringFixedLength, 0, (CERTIFICATSCLIENT5 = String.Empty), CERTIFICATSCLIENT5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CertificatSelectCommandActionCERTIFICAT", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CertificatSelectCommandActionCERTIFICAT)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Curren_polTblDataLoad(CURRENPOLSCERTYPE1 As String, CURRENPOLNBRANCH2 As String, CURRENPOLNPRODUCT3 As String, CURRENPOLNPOLICY4 As String, CURRENPOLNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nCurrency = 0, .nCurrencyDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CURREN_POL.NCURRENCY, TABLE11.SDESCRIPT NCURRENCYDESC FROM CURREN_POL CURREN_POL LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = CURREN_POL.NCURRENCY  WHERE CURREN_POL.SCERTYPE = @:CURREN_POLSCERTYPE1 AND CURREN_POL.NBRANCH = @:CURREN_POLNBRANCH2 AND CURREN_POL.NPRODUCT = @:CURREN_POLNPRODUCT3 AND CURREN_POL.NPOLICY = @:CURREN_POLNPOLICY4 AND CURREN_POL.NCERTIF = @:CURREN_POLNCERTIF5", "CURREN_POL", "Linked.LatCombined")
                    .AddParameter("CURREN_POLSCERTYPE1", DbType.AnsiStringFixedLength, 0, (CURRENPOLSCERTYPE1 = String.Empty), CURRENPOLSCERTYPE1)
                    .AddParameter("CURREN_POLNBRANCH2", DbType.AnsiStringFixedLength, 0, (CURRENPOLNBRANCH2 = String.Empty), CURRENPOLNBRANCH2)
                    .AddParameter("CURREN_POLNPRODUCT3", DbType.AnsiStringFixedLength, 0, (CURRENPOLNPRODUCT3 = String.Empty), CURRENPOLNPRODUCT3)
                    .AddParameter("CURREN_POLNPOLICY4", DbType.AnsiStringFixedLength, 0, (CURRENPOLNPOLICY4 = String.Empty), CURRENPOLNPOLICY4)
                    .AddParameter("CURREN_POLNCERTIF5", DbType.AnsiStringFixedLength, 0, (CURRENPOLNCERTIF5 = String.Empty), CURRENPOLNCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nCurrency = itemData.NumericValue("NCURRENCY"), .nCurrencyDesc = itemData.StringValue("NCURRENCYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Curren_polTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Curren_polTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Curren_polTblDataCount(CURRENPOLSCERTYPE1 As String, CURRENPOLNBRANCH2 As String, CURRENPOLNPRODUCT3 As String, CURRENPOLNPOLICY4 As String, CURRENPOLNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CURREN_POL.NCURRENCY, TABLE11.SDESCRIPT NCURRENCYDESC FROM CURREN_POL CURREN_POL LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = CURREN_POL.NCURRENCY  WHERE CURREN_POL.SCERTYPE = @:CURREN_POLSCERTYPE1 AND CURREN_POL.NBRANCH = @:CURREN_POLNBRANCH2 AND CURREN_POL.NPRODUCT = @:CURREN_POLNPRODUCT3 AND CURREN_POL.NPOLICY = @:CURREN_POLNPOLICY4 AND CURREN_POL.NCERTIF = @:CURREN_POLNCERTIF5)", "CURREN_POL", "Linked.LatCombined")
                    .AddParameter("CURREN_POLSCERTYPE1", DbType.AnsiStringFixedLength, 0, (CURRENPOLSCERTYPE1 = String.Empty), CURRENPOLSCERTYPE1)
                    .AddParameter("CURREN_POLNBRANCH2", DbType.AnsiStringFixedLength, 0, (CURRENPOLNBRANCH2 = String.Empty), CURRENPOLNBRANCH2)
                    .AddParameter("CURREN_POLNPRODUCT3", DbType.AnsiStringFixedLength, 0, (CURRENPOLNPRODUCT3 = String.Empty), CURRENPOLNPRODUCT3)
                    .AddParameter("CURREN_POLNPOLICY4", DbType.AnsiStringFixedLength, 0, (CURRENPOLNPOLICY4 = String.Empty), CURRENPOLNPOLICY4)
                    .AddParameter("CURREN_POLNCERTIF5", DbType.AnsiStringFixedLength, 0, (CURRENPOLNCERTIF5 = String.Empty), CURRENPOLNCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Curren_polTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Curren_polTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Curren_polSelectCommandActionCURREN_POL(CURRENPOLSCERTYPE1 As String, CURRENPOLNBRANCH2 As String, CURRENPOLNPRODUCT3 As String, CURRENPOLNPOLICY4 As String, CURRENPOLNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CURREN_POL.NCURRENCY) COUNTDATA FROM CURREN_POL CURREN_POL LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = CURREN_POL.NCURRENCY  WHERE CURREN_POL.SCERTYPE = @:CURREN_POLSCERTYPE1 AND CURREN_POL.NBRANCH = @:CURREN_POLNBRANCH2 AND CURREN_POL.NPRODUCT = @:CURREN_POLNPRODUCT3 AND CURREN_POL.NPOLICY = @:CURREN_POLNPOLICY4 AND CURREN_POL.NCERTIF = @:CURREN_POLNCERTIF5", "CURREN_POL", "Linked.LatCombined")
                    .AddParameter("CURREN_POLSCERTYPE1", DbType.AnsiStringFixedLength, 0, (CURRENPOLSCERTYPE1 = String.Empty), CURRENPOLSCERTYPE1)
                    .AddParameter("CURREN_POLNBRANCH2", DbType.AnsiStringFixedLength, 0, (CURRENPOLNBRANCH2 = String.Empty), CURRENPOLNBRANCH2)
                    .AddParameter("CURREN_POLNPRODUCT3", DbType.AnsiStringFixedLength, 0, (CURRENPOLNPRODUCT3 = String.Empty), CURRENPOLNPRODUCT3)
                    .AddParameter("CURREN_POLNPOLICY4", DbType.AnsiStringFixedLength, 0, (CURRENPOLNPOLICY4 = String.Empty), CURRENPOLNPOLICY4)
                    .AddParameter("CURREN_POLNCERTIF5", DbType.AnsiStringFixedLength, 0, (CURRENPOLNCERTIF5 = String.Empty), CURRENPOLNCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Curren_polSelectCommandActionCURREN_POL", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Curren_polSelectCommandActionCURREN_POL)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ROLESTblDataLoad(ROLESSCERTYPE1 As String, ROLESNBRANCH2 As Decimal, ROLESNPRODUCT3 As Decimal, ROLESNPOLICY4 As Decimal, ROLESNCERTIF5 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nRole = 0, .nStatusRol = 0, .sSexClien = String.Empty, .dBirthDate = Date.MinValue, .nTypeRisk = 0, .nRating = 0, .SCLIENAME = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT ROLES.NROLE, ROLES.NSTATUSROL, ROLES.SSEXCLIEN, ROLES.DBIRTHDATE, ROLES.NTYPERISK, ROLES.NRATING, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM ROLES ROLES JOIN CLIENT CLIENT ON CLIENT.SCLIENT = ROLES.SCLIENT  WHERE ROLES.SCERTYPE = @:ROLESSCERTYPE1 AND ROLES.NBRANCH = @:ROLESNBRANCH2 AND ROLES.NPRODUCT = @:ROLESNPRODUCT3 AND ROLES.NPOLICY = @:ROLESNPOLICY4 AND ROLES.NCERTIF = @:ROLESNCERTIF5", "ROLES", "Linked.LatCombined")
                    .AddParameter("ROLESSCERTYPE1", DbType.AnsiStringFixedLength, 0, (ROLESSCERTYPE1 = String.Empty), ROLESSCERTYPE1)
                    .AddParameter("ROLESNBRANCH2", DbType.Decimal, 0, False, ROLESNBRANCH2)
                    .AddParameter("ROLESNPRODUCT3", DbType.Decimal, 0, False, ROLESNPRODUCT3)
                    .AddParameter("ROLESNPOLICY4", DbType.Decimal, 0, False, ROLESNPOLICY4)
                    .AddParameter("ROLESNCERTIF5", DbType.Decimal, 0, False, ROLESNCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nRole = itemData.NumericValue("NROLE"), .nStatusRol = itemData.NumericValue("NSTATUSROL"), .sSexClien = itemData.StringValue("SSEXCLIEN"), .dBirthDate = itemData.DateTimeValue("DBIRTHDATE"), .nTypeRisk = itemData.NumericValue("NTYPERISK"), .nRating = itemData.NumericValue("NRATING"), .SCLIENAME = itemData.StringValue("SCLIENAME")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ROLESTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ROLESTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ROLESTblDataCount(ROLESSCERTYPE1 As String, ROLESNBRANCH2 As Decimal, ROLESNPRODUCT3 As Decimal, ROLESNPOLICY4 As Decimal, ROLESNCERTIF5 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT ROLES.NROLE, ROLES.NSTATUSROL, ROLES.SSEXCLIEN, ROLES.DBIRTHDATE, ROLES.NTYPERISK, ROLES.NRATING, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM ROLES ROLES JOIN CLIENT CLIENT ON CLIENT.SCLIENT = ROLES.SCLIENT  WHERE ROLES.SCERTYPE = @:ROLESSCERTYPE1 AND ROLES.NBRANCH = @:ROLESNBRANCH2 AND ROLES.NPRODUCT = @:ROLESNPRODUCT3 AND ROLES.NPOLICY = @:ROLESNPOLICY4 AND ROLES.NCERTIF = @:ROLESNCERTIF5)", "ROLES", "Linked.LatCombined")
                    .AddParameter("ROLESSCERTYPE1", DbType.AnsiStringFixedLength, 0, (ROLESSCERTYPE1 = String.Empty), ROLESSCERTYPE1)
                    .AddParameter("ROLESNBRANCH2", DbType.Decimal, 0, False, ROLESNBRANCH2)
                    .AddParameter("ROLESNPRODUCT3", DbType.Decimal, 0, False, ROLESNPRODUCT3)
                    .AddParameter("ROLESNPOLICY4", DbType.Decimal, 0, False, ROLESNPOLICY4)
                    .AddParameter("ROLESNCERTIF5", DbType.Decimal, 0, False, ROLESNCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ROLESTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ROLESTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function ROLESSelectCommandActionROLES(ROLESSCERTYPE1 As String, ROLESNBRANCH2 As Decimal, ROLESNPRODUCT3 As Decimal, ROLESNPOLICY4 As Decimal, ROLESNCERTIF5 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(ROLES.NROLE) COUNTDATA FROM ROLES ROLES JOIN CLIENT CLIENT ON CLIENT.SCLIENT = ROLES.SCLIENT  WHERE ROLES.SCERTYPE = @:ROLESSCERTYPE1 AND ROLES.NBRANCH = @:ROLESNBRANCH2 AND ROLES.NPRODUCT = @:ROLESNPRODUCT3 AND ROLES.NPOLICY = @:ROLESNPOLICY4 AND ROLES.NCERTIF = @:ROLESNCERTIF5", "ROLES", "Linked.LatCombined")
                    .AddParameter("ROLESSCERTYPE1", DbType.AnsiStringFixedLength, 0, (ROLESSCERTYPE1 = String.Empty), ROLESSCERTYPE1)
                    .AddParameter("ROLESNBRANCH2", DbType.Decimal, 0, False, ROLESNBRANCH2)
                    .AddParameter("ROLESNPRODUCT3", DbType.Decimal, 0, False, ROLESNPRODUCT3)
                    .AddParameter("ROLESNPOLICY4", DbType.Decimal, 0, False, ROLESNPOLICY4)
                    .AddParameter("ROLESNCERTIF5", DbType.Decimal, 0, False, ROLESNCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ROLESSelectCommandActionROLES", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ROLESSelectCommandActionROLES)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function SUM_INSURTblDataLoad(SUMINSURSCERTYPE1 As String, SUMINSURNBRANCH2 As String, SUMINSURNPRODUCT3 As String, SUMINSURNPOLICY4 As String, SUMINSURNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NSUMINS_COD = 0, .NSUMINS_REAL = 0, .NCOINSURAN = 0, .NSUM_INSUR = 0, .NSUMINS_CODDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT SUM_INSUR.NSUMINS_COD, SUM_INSUR.NSUMINS_REAL, SUM_INSUR.NCOINSURAN, SUM_INSUR.NSUM_INSUR, BAS_SUMINS.SDESCRIPT NSUMINS_CODDESC FROM SUM_INSUR SUM_INSUR LEFT JOIN BAS_SUMINS BAS_SUMINS ON BAS_SUMINS.NBRANCH = SUM_INSUR.NBRANCH  AND BAS_SUMINS.NPRODUCT = SUM_INSUR.NPRODUCT  AND BAS_SUMINS.NSUMINS_CO = SUM_INSUR.NSUMINS_COD  WHERE SUM_INSUR.SCERTYPE = @:SUM_INSURSCERTYPE1 AND SUM_INSUR.NBRANCH = @:SUM_INSURNBRANCH2 AND SUM_INSUR.NPRODUCT = @:SUM_INSURNPRODUCT3 AND SUM_INSUR.NPOLICY = @:SUM_INSURNPOLICY4 AND SUM_INSUR.NCERTIF = @:SUM_INSURNCERTIF5", "SUM_INSUR", "Linked.LatCombined")
                    .AddParameter("SUM_INSURSCERTYPE1", DbType.AnsiStringFixedLength, 0, (SUMINSURSCERTYPE1 = String.Empty), SUMINSURSCERTYPE1)
                    .AddParameter("SUM_INSURNBRANCH2", DbType.AnsiStringFixedLength, 0, (SUMINSURNBRANCH2 = String.Empty), SUMINSURNBRANCH2)
                    .AddParameter("SUM_INSURNPRODUCT3", DbType.AnsiStringFixedLength, 0, (SUMINSURNPRODUCT3 = String.Empty), SUMINSURNPRODUCT3)
                    .AddParameter("SUM_INSURNPOLICY4", DbType.AnsiStringFixedLength, 0, (SUMINSURNPOLICY4 = String.Empty), SUMINSURNPOLICY4)
                    .AddParameter("SUM_INSURNCERTIF5", DbType.AnsiStringFixedLength, 0, (SUMINSURNCERTIF5 = String.Empty), SUMINSURNCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NSUMINS_COD = itemData.NumericValue("NSUMINS_COD"), .NSUMINS_REAL = itemData.NumericValue("NSUMINS_REAL"), .NCOINSURAN = itemData.NumericValue("NCOINSURAN"), .NSUM_INSUR = itemData.NumericValue("NSUM_INSUR"), .NSUMINS_CODDesc = itemData.StringValue("NSUMINS_CODDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "SUM_INSURTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (SUM_INSURTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function SUM_INSURTblDataCount(SUMINSURSCERTYPE1 As String, SUMINSURNBRANCH2 As String, SUMINSURNPRODUCT3 As String, SUMINSURNPOLICY4 As String, SUMINSURNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT SUM_INSUR.NSUMINS_COD, SUM_INSUR.NSUMINS_REAL, SUM_INSUR.NCOINSURAN, SUM_INSUR.NSUM_INSUR, BAS_SUMINS.SDESCRIPT NSUMINS_CODDESC FROM SUM_INSUR SUM_INSUR LEFT JOIN BAS_SUMINS BAS_SUMINS ON BAS_SUMINS.NBRANCH = SUM_INSUR.NBRANCH  AND BAS_SUMINS.NPRODUCT = SUM_INSUR.NPRODUCT  AND BAS_SUMINS.NSUMINS_CO = SUM_INSUR.NSUMINS_COD  WHERE SUM_INSUR.SCERTYPE = @:SUM_INSURSCERTYPE1 AND SUM_INSUR.NBRANCH = @:SUM_INSURNBRANCH2 AND SUM_INSUR.NPRODUCT = @:SUM_INSURNPRODUCT3 AND SUM_INSUR.NPOLICY = @:SUM_INSURNPOLICY4 AND SUM_INSUR.NCERTIF = @:SUM_INSURNCERTIF5)", "SUM_INSUR", "Linked.LatCombined")
                    .AddParameter("SUM_INSURSCERTYPE1", DbType.AnsiStringFixedLength, 0, (SUMINSURSCERTYPE1 = String.Empty), SUMINSURSCERTYPE1)
                    .AddParameter("SUM_INSURNBRANCH2", DbType.AnsiStringFixedLength, 0, (SUMINSURNBRANCH2 = String.Empty), SUMINSURNBRANCH2)
                    .AddParameter("SUM_INSURNPRODUCT3", DbType.AnsiStringFixedLength, 0, (SUMINSURNPRODUCT3 = String.Empty), SUMINSURNPRODUCT3)
                    .AddParameter("SUM_INSURNPOLICY4", DbType.AnsiStringFixedLength, 0, (SUMINSURNPOLICY4 = String.Empty), SUMINSURNPOLICY4)
                    .AddParameter("SUM_INSURNCERTIF5", DbType.AnsiStringFixedLength, 0, (SUMINSURNCERTIF5 = String.Empty), SUMINSURNCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "SUM_INSURTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (SUM_INSURTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function SUM_INSURSelectCommandActionSUM_INSUR(SUMINSURSCERTYPE1 As String, SUMINSURNBRANCH2 As String, SUMINSURNPRODUCT3 As String, SUMINSURNPOLICY4 As String, SUMINSURNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(SUM_INSUR.NSUMINS_COD) COUNTDATA FROM SUM_INSUR SUM_INSUR LEFT JOIN BAS_SUMINS BAS_SUMINS ON BAS_SUMINS.NBRANCH = SUM_INSUR.NBRANCH  AND BAS_SUMINS.NPRODUCT = SUM_INSUR.NPRODUCT  AND BAS_SUMINS.NSUMINS_CO = SUM_INSUR.NSUMINS_COD  WHERE SUM_INSUR.SCERTYPE = @:SUM_INSURSCERTYPE1 AND SUM_INSUR.NBRANCH = @:SUM_INSURNBRANCH2 AND SUM_INSUR.NPRODUCT = @:SUM_INSURNPRODUCT3 AND SUM_INSUR.NPOLICY = @:SUM_INSURNPOLICY4 AND SUM_INSUR.NCERTIF = @:SUM_INSURNCERTIF5", "SUM_INSUR", "Linked.LatCombined")
                    .AddParameter("SUM_INSURSCERTYPE1", DbType.AnsiStringFixedLength, 0, (SUMINSURSCERTYPE1 = String.Empty), SUMINSURSCERTYPE1)
                    .AddParameter("SUM_INSURNBRANCH2", DbType.AnsiStringFixedLength, 0, (SUMINSURNBRANCH2 = String.Empty), SUMINSURNBRANCH2)
                    .AddParameter("SUM_INSURNPRODUCT3", DbType.AnsiStringFixedLength, 0, (SUMINSURNPRODUCT3 = String.Empty), SUMINSURNPRODUCT3)
                    .AddParameter("SUM_INSURNPOLICY4", DbType.AnsiStringFixedLength, 0, (SUMINSURNPOLICY4 = String.Empty), SUMINSURNPOLICY4)
                    .AddParameter("SUM_INSURNCERTIF5", DbType.AnsiStringFixedLength, 0, (SUMINSURNCERTIF5 = String.Empty), SUMINSURNCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "SUM_INSURSelectCommandActionSUM_INSUR", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (SUM_INSURSelectCommandActionSUM_INSUR)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function COVERTblDataLoad(COVERSCERTYPE1 As String, COVERNBRANCH2 As Decimal, COVERNPRODUCT3 As Decimal, COVERNPOLICY4 As Decimal, COVERNCERTIF5 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nModulec = 0, .nCover = 0, .nRole = 0, .nCurrency = 0, .nCapital = 0, .nPremium = 0, .SCLIENAME = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT COVER.NMODULEC, COVER.NCOVER, COVER.NROLE, COVER.NCURRENCY, COVER.NCAPITAL, COVER.NPREMIUM, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM COVER COVER JOIN CLIENT CLIENT ON CLIENT.SCLIENT = COVER.SCLIENT  WHERE COVER.SCERTYPE = @:COVERSCERTYPE1 AND COVER.NBRANCH = @:COVERNBRANCH2 AND COVER.NPRODUCT = @:COVERNPRODUCT3 AND COVER.NPOLICY = @:COVERNPOLICY4 AND COVER.NCERTIF = @:COVERNCERTIF5", "COVER", "Linked.LatCombined")
                    .AddParameter("COVERSCERTYPE1", DbType.AnsiStringFixedLength, 0, (COVERSCERTYPE1 = String.Empty), COVERSCERTYPE1)
                    .AddParameter("COVERNBRANCH2", DbType.Decimal, 0, False, COVERNBRANCH2)
                    .AddParameter("COVERNPRODUCT3", DbType.Decimal, 0, False, COVERNPRODUCT3)
                    .AddParameter("COVERNPOLICY4", DbType.Decimal, 0, False, COVERNPOLICY4)
                    .AddParameter("COVERNCERTIF5", DbType.Decimal, 0, False, COVERNCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nModulec = itemData.NumericValue("NMODULEC"), .nCover = itemData.NumericValue("NCOVER"), .nRole = itemData.NumericValue("NROLE"), .nCurrency = itemData.NumericValue("NCURRENCY"), .nCapital = itemData.NumericValue("NCAPITAL"), .nPremium = itemData.NumericValue("NPREMIUM"), .SCLIENAME = itemData.StringValue("SCLIENAME")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "COVERTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (COVERTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function COVERTblDataCount(COVERSCERTYPE1 As String, COVERNBRANCH2 As Decimal, COVERNPRODUCT3 As Decimal, COVERNPOLICY4 As Decimal, COVERNCERTIF5 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT COVER.NMODULEC, COVER.NCOVER, COVER.NROLE, COVER.NCURRENCY, COVER.NCAPITAL, COVER.NPREMIUM, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM COVER COVER JOIN CLIENT CLIENT ON CLIENT.SCLIENT = COVER.SCLIENT  WHERE COVER.SCERTYPE = @:COVERSCERTYPE1 AND COVER.NBRANCH = @:COVERNBRANCH2 AND COVER.NPRODUCT = @:COVERNPRODUCT3 AND COVER.NPOLICY = @:COVERNPOLICY4 AND COVER.NCERTIF = @:COVERNCERTIF5)", "COVER", "Linked.LatCombined")
                    .AddParameter("COVERSCERTYPE1", DbType.AnsiStringFixedLength, 0, (COVERSCERTYPE1 = String.Empty), COVERSCERTYPE1)
                    .AddParameter("COVERNBRANCH2", DbType.Decimal, 0, False, COVERNBRANCH2)
                    .AddParameter("COVERNPRODUCT3", DbType.Decimal, 0, False, COVERNPRODUCT3)
                    .AddParameter("COVERNPOLICY4", DbType.Decimal, 0, False, COVERNPOLICY4)
                    .AddParameter("COVERNCERTIF5", DbType.Decimal, 0, False, COVERNCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "COVERTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (COVERTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function COVERSelectCommandActionCOVER(COVERSCERTYPE1 As String, COVERNBRANCH2 As Decimal, COVERNPRODUCT3 As Decimal, COVERNPOLICY4 As Decimal, COVERNCERTIF5 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(COVER.NMODULEC) COUNTDATA FROM COVER COVER JOIN CLIENT CLIENT ON CLIENT.SCLIENT = COVER.SCLIENT  WHERE COVER.SCERTYPE = @:COVERSCERTYPE1 AND COVER.NBRANCH = @:COVERNBRANCH2 AND COVER.NPRODUCT = @:COVERNPRODUCT3 AND COVER.NPOLICY = @:COVERNPOLICY4 AND COVER.NCERTIF = @:COVERNCERTIF5", "COVER", "Linked.LatCombined")
                    .AddParameter("COVERSCERTYPE1", DbType.AnsiStringFixedLength, 0, (COVERSCERTYPE1 = String.Empty), COVERSCERTYPE1)
                    .AddParameter("COVERNBRANCH2", DbType.Decimal, 0, False, COVERNBRANCH2)
                    .AddParameter("COVERNPRODUCT3", DbType.Decimal, 0, False, COVERNPRODUCT3)
                    .AddParameter("COVERNPOLICY4", DbType.Decimal, 0, False, COVERNPOLICY4)
                    .AddParameter("COVERNCERTIF5", DbType.Decimal, 0, False, COVERNCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "COVERSelectCommandActionCOVER", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (COVERSelectCommandActionCOVER)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function REINSURANTblDataLoad(REINSURANSCERTYPE3 As String, REINSURANNBRANCH4 As String, REINSURANNPRODUCT5 As String, REINSURANNPOLICY6 As String, REINSURANNCERTIF7 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NBRANCH_REI = 0, .NTYPE_REIN = 0, .NCAPITAL = 0, .NCURRENCY = 0, .NSHARE = 0, .NBRANCH_REIDesc = String.Empty, .NTYPE_REINDesc = String.Empty, .NCURRENCYDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT REINSURAN.NBRANCH_REI, REINSURAN.NTYPE_REIN, REINSURAN.NCAPITAL, REINSURAN.NCURRENCY, REINSURAN.NSHARE, TABLE5000.SDESCRIPT NBRANCH_REIDESC, TABLE173.SDESCRIPT NTYPE_REINDESC, TABLE11.SSHORT_DES NCURRENCYDESC FROM REINSURAN REINSURAN LEFT JOIN TABLE5000 TABLE5000 ON TABLE5000.NBRANCH_REI = REINSURAN.NBRANCH_REI LEFT JOIN TABLE173 TABLE173 ON TABLE173.NTYPE_REIN = REINSURAN.NTYPE_REIN LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = REINSURAN.NCURRENCY  WHERE REINSURAN.NCAPITAL > 0 AND REINSURAN.NTYPE_REIN <> 8 AND REINSURAN.SCERTYPE = @:REINSURANSCERTYPE3 AND REINSURAN.NBRANCH = @:REINSURANNBRANCH4 AND REINSURAN.NPRODUCT = @:REINSURANNPRODUCT5 AND REINSURAN.NPOLICY = @:REINSURANNPOLICY6 AND REINSURAN.NCERTIF = @:REINSURANNCERTIF7", "REINSURAN", "Linked.LatCombined")
                    .AddParameter("REINSURANSCERTYPE3", DbType.AnsiStringFixedLength, 0, (REINSURANSCERTYPE3 = String.Empty), REINSURANSCERTYPE3)
                    .AddParameter("REINSURANNBRANCH4", DbType.AnsiStringFixedLength, 0, (REINSURANNBRANCH4 = String.Empty), REINSURANNBRANCH4)
                    .AddParameter("REINSURANNPRODUCT5", DbType.AnsiStringFixedLength, 0, (REINSURANNPRODUCT5 = String.Empty), REINSURANNPRODUCT5)
                    .AddParameter("REINSURANNPOLICY6", DbType.AnsiStringFixedLength, 0, (REINSURANNPOLICY6 = String.Empty), REINSURANNPOLICY6)
                    .AddParameter("REINSURANNCERTIF7", DbType.AnsiStringFixedLength, 0, (REINSURANNCERTIF7 = String.Empty), REINSURANNCERTIF7)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NBRANCH_REI = itemData.NumericValue("NBRANCH_REI"), .NTYPE_REIN = itemData.NumericValue("NTYPE_REIN"), .NCAPITAL = itemData.NumericValue("NCAPITAL"), .NCURRENCY = itemData.NumericValue("NCURRENCY"), .NSHARE = itemData.NumericValue("NSHARE"), .NBRANCH_REIDesc = itemData.StringValue("NBRANCH_REIDESC"), .NTYPE_REINDesc = itemData.StringValue("NTYPE_REINDESC"), .NCURRENCYDesc = itemData.StringValue("NCURRENCYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "REINSURANTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (REINSURANTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function REINSURANTblDataCount(REINSURANSCERTYPE3 As String, REINSURANNBRANCH4 As String, REINSURANNPRODUCT5 As String, REINSURANNPOLICY6 As String, REINSURANNCERTIF7 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT REINSURAN.NBRANCH_REI, REINSURAN.NTYPE_REIN, REINSURAN.NCAPITAL, REINSURAN.NCURRENCY, REINSURAN.NSHARE, TABLE5000.SDESCRIPT NBRANCH_REIDESC, TABLE173.SDESCRIPT NTYPE_REINDESC, TABLE11.SSHORT_DES NCURRENCYDESC FROM REINSURAN REINSURAN LEFT JOIN TABLE5000 TABLE5000 ON TABLE5000.NBRANCH_REI = REINSURAN.NBRANCH_REI LEFT JOIN TABLE173 TABLE173 ON TABLE173.NTYPE_REIN = REINSURAN.NTYPE_REIN LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = REINSURAN.NCURRENCY  WHERE REINSURAN.NCAPITAL > 0 AND REINSURAN.NTYPE_REIN <> 8 AND REINSURAN.SCERTYPE = @:REINSURANSCERTYPE3 AND REINSURAN.NBRANCH = @:REINSURANNBRANCH4 AND REINSURAN.NPRODUCT = @:REINSURANNPRODUCT5 AND REINSURAN.NPOLICY = @:REINSURANNPOLICY6 AND REINSURAN.NCERTIF = @:REINSURANNCERTIF7)", "REINSURAN", "Linked.LatCombined")
                    .AddParameter("REINSURANSCERTYPE3", DbType.AnsiStringFixedLength, 0, (REINSURANSCERTYPE3 = String.Empty), REINSURANSCERTYPE3)
                    .AddParameter("REINSURANNBRANCH4", DbType.AnsiStringFixedLength, 0, (REINSURANNBRANCH4 = String.Empty), REINSURANNBRANCH4)
                    .AddParameter("REINSURANNPRODUCT5", DbType.AnsiStringFixedLength, 0, (REINSURANNPRODUCT5 = String.Empty), REINSURANNPRODUCT5)
                    .AddParameter("REINSURANNPOLICY6", DbType.AnsiStringFixedLength, 0, (REINSURANNPOLICY6 = String.Empty), REINSURANNPOLICY6)
                    .AddParameter("REINSURANNCERTIF7", DbType.AnsiStringFixedLength, 0, (REINSURANNCERTIF7 = String.Empty), REINSURANNCERTIF7)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "REINSURANTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (REINSURANTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function REINSURANSelectCommandActionREINSURAN(REINSURANSCERTYPE3 As String, REINSURANNBRANCH4 As String, REINSURANNPRODUCT5 As String, REINSURANNPOLICY6 As String, REINSURANNCERTIF7 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(REINSURAN.NBRANCH_REI) COUNTDATA FROM REINSURAN REINSURAN LEFT JOIN TABLE5000 TABLE5000 ON TABLE5000.NBRANCH_REI = REINSURAN.NBRANCH_REI LEFT JOIN TABLE173 TABLE173 ON TABLE173.NTYPE_REIN = REINSURAN.NTYPE_REIN LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = REINSURAN.NCURRENCY  WHERE REINSURAN.NCAPITAL > 0 AND REINSURAN.NTYPE_REIN <> 8 AND REINSURAN.SCERTYPE = @:REINSURANSCERTYPE3 AND REINSURAN.NBRANCH = @:REINSURANNBRANCH4 AND REINSURAN.NPRODUCT = @:REINSURANNPRODUCT5 AND REINSURAN.NPOLICY = @:REINSURANNPOLICY6 AND REINSURAN.NCERTIF = @:REINSURANNCERTIF7", "REINSURAN", "Linked.LatCombined")
                    .AddParameter("REINSURANSCERTYPE3", DbType.AnsiStringFixedLength, 0, (REINSURANSCERTYPE3 = String.Empty), REINSURANSCERTYPE3)
                    .AddParameter("REINSURANNBRANCH4", DbType.AnsiStringFixedLength, 0, (REINSURANNBRANCH4 = String.Empty), REINSURANNBRANCH4)
                    .AddParameter("REINSURANNPRODUCT5", DbType.AnsiStringFixedLength, 0, (REINSURANNPRODUCT5 = String.Empty), REINSURANNPRODUCT5)
                    .AddParameter("REINSURANNPOLICY6", DbType.AnsiStringFixedLength, 0, (REINSURANNPOLICY6 = String.Empty), REINSURANNPOLICY6)
                    .AddParameter("REINSURANNCERTIF7", DbType.AnsiStringFixedLength, 0, (REINSURANNCERTIF7 = String.Empty), REINSURANNCERTIF7)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "REINSURANSelectCommandActionREINSURAN", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (REINSURANSelectCommandActionREINSURAN)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function REINSURAN2TblDataLoad(REINSURANSCERTYPE3 As String, REINSURANNBRANCH4 As String, REINSURANNPRODUCT5 As String, REINSURANNPOLICY6 As String, REINSURANNCERTIF7 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NBRANCH_REI = 0, .NCOMPANY = 0, .NCAPITAL = 0, .NCURRENCY = 0, .NSHARE = 0, .NCOMMISSI = 0, .NBRANCH_REIDesc = String.Empty, .NCURRENCYDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT REINSURAN.NBRANCH_REI, REINSURAN.NCOMPANY, REINSURAN.NCAPITAL, REINSURAN.NCURRENCY, REINSURAN.NSHARE, REINSURAN.NCOMMISSI, TABLE5000.SDESCRIPT NBRANCH_REIDESC, TABLE11.SSHORT_DES NCURRENCYDESC FROM REINSURAN REINSURAN LEFT JOIN TABLE5000 TABLE5000 ON TABLE5000.NBRANCH_REI = REINSURAN.NBRANCH_REI LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = REINSURAN.NCURRENCY  WHERE REINSURAN.NCAPITAL > 0 AND REINSURAN.NTYPE_REIN = 8 AND REINSURAN.SCERTYPE = @:REINSURANSCERTYPE3 AND REINSURAN.NBRANCH = @:REINSURANNBRANCH4 AND REINSURAN.NPRODUCT = @:REINSURANNPRODUCT5 AND REINSURAN.NPOLICY = @:REINSURANNPOLICY6 AND REINSURAN.NCERTIF = @:REINSURANNCERTIF7", "REINSURAN", "Linked.LatCombined")
                    .AddParameter("REINSURANSCERTYPE3", DbType.AnsiStringFixedLength, 0, (REINSURANSCERTYPE3 = String.Empty), REINSURANSCERTYPE3)
                    .AddParameter("REINSURANNBRANCH4", DbType.AnsiStringFixedLength, 0, (REINSURANNBRANCH4 = String.Empty), REINSURANNBRANCH4)
                    .AddParameter("REINSURANNPRODUCT5", DbType.AnsiStringFixedLength, 0, (REINSURANNPRODUCT5 = String.Empty), REINSURANNPRODUCT5)
                    .AddParameter("REINSURANNPOLICY6", DbType.AnsiStringFixedLength, 0, (REINSURANNPOLICY6 = String.Empty), REINSURANNPOLICY6)
                    .AddParameter("REINSURANNCERTIF7", DbType.AnsiStringFixedLength, 0, (REINSURANNCERTIF7 = String.Empty), REINSURANNCERTIF7)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NBRANCH_REI = itemData.NumericValue("NBRANCH_REI"), .NCOMPANY = itemData.NumericValue("NCOMPANY"), .NCAPITAL = itemData.NumericValue("NCAPITAL"), .NCURRENCY = itemData.NumericValue("NCURRENCY"), .NSHARE = itemData.NumericValue("NSHARE"), .NCOMMISSI = itemData.NumericValue("NCOMMISSI"), .NBRANCH_REIDesc = itemData.StringValue("NBRANCH_REIDESC"), .NCURRENCYDesc = itemData.StringValue("NCURRENCYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "REINSURAN2TblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (REINSURAN2TblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function REINSURAN2TblDataCount(REINSURANSCERTYPE3 As String, REINSURANNBRANCH4 As String, REINSURANNPRODUCT5 As String, REINSURANNPOLICY6 As String, REINSURANNCERTIF7 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT REINSURAN.NBRANCH_REI, REINSURAN.NCOMPANY, REINSURAN.NCAPITAL, REINSURAN.NCURRENCY, REINSURAN.NSHARE, REINSURAN.NCOMMISSI, TABLE5000.SDESCRIPT NBRANCH_REIDESC, TABLE11.SSHORT_DES NCURRENCYDESC FROM REINSURAN REINSURAN LEFT JOIN TABLE5000 TABLE5000 ON TABLE5000.NBRANCH_REI = REINSURAN.NBRANCH_REI LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = REINSURAN.NCURRENCY  WHERE REINSURAN.NCAPITAL > 0 AND REINSURAN.NTYPE_REIN = 8 AND REINSURAN.SCERTYPE = @:REINSURANSCERTYPE3 AND REINSURAN.NBRANCH = @:REINSURANNBRANCH4 AND REINSURAN.NPRODUCT = @:REINSURANNPRODUCT5 AND REINSURAN.NPOLICY = @:REINSURANNPOLICY6 AND REINSURAN.NCERTIF = @:REINSURANNCERTIF7)", "REINSURAN", "Linked.LatCombined")
                    .AddParameter("REINSURANSCERTYPE3", DbType.AnsiStringFixedLength, 0, (REINSURANSCERTYPE3 = String.Empty), REINSURANSCERTYPE3)
                    .AddParameter("REINSURANNBRANCH4", DbType.AnsiStringFixedLength, 0, (REINSURANNBRANCH4 = String.Empty), REINSURANNBRANCH4)
                    .AddParameter("REINSURANNPRODUCT5", DbType.AnsiStringFixedLength, 0, (REINSURANNPRODUCT5 = String.Empty), REINSURANNPRODUCT5)
                    .AddParameter("REINSURANNPOLICY6", DbType.AnsiStringFixedLength, 0, (REINSURANNPOLICY6 = String.Empty), REINSURANNPOLICY6)
                    .AddParameter("REINSURANNCERTIF7", DbType.AnsiStringFixedLength, 0, (REINSURANNCERTIF7 = String.Empty), REINSURANNCERTIF7)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "REINSURAN2TblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (REINSURAN2TblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function REINSURAN2SelectCommandActionREINSURAN(REINSURANSCERTYPE3 As String, REINSURANNBRANCH4 As String, REINSURANNPRODUCT5 As String, REINSURANNPOLICY6 As String, REINSURANNCERTIF7 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(REINSURAN.NBRANCH_REI) COUNTDATA FROM REINSURAN REINSURAN LEFT JOIN TABLE5000 TABLE5000 ON TABLE5000.NBRANCH_REI = REINSURAN.NBRANCH_REI LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = REINSURAN.NCURRENCY  WHERE REINSURAN.NCAPITAL > 0 AND REINSURAN.NTYPE_REIN = 8 AND REINSURAN.SCERTYPE = @:REINSURANSCERTYPE3 AND REINSURAN.NBRANCH = @:REINSURANNBRANCH4 AND REINSURAN.NPRODUCT = @:REINSURANNPRODUCT5 AND REINSURAN.NPOLICY = @:REINSURANNPOLICY6 AND REINSURAN.NCERTIF = @:REINSURANNCERTIF7", "REINSURAN", "Linked.LatCombined")
                    .AddParameter("REINSURANSCERTYPE3", DbType.AnsiStringFixedLength, 0, (REINSURANSCERTYPE3 = String.Empty), REINSURANSCERTYPE3)
                    .AddParameter("REINSURANNBRANCH4", DbType.AnsiStringFixedLength, 0, (REINSURANNBRANCH4 = String.Empty), REINSURANNBRANCH4)
                    .AddParameter("REINSURANNPRODUCT5", DbType.AnsiStringFixedLength, 0, (REINSURANNPRODUCT5 = String.Empty), REINSURANNPRODUCT5)
                    .AddParameter("REINSURANNPOLICY6", DbType.AnsiStringFixedLength, 0, (REINSURANNPOLICY6 = String.Empty), REINSURANNPOLICY6)
                    .AddParameter("REINSURANNCERTIF7", DbType.AnsiStringFixedLength, 0, (REINSURANNCERTIF7 = String.Empty), REINSURANNCERTIF7)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "REINSURAN2SelectCommandActionREINSURAN", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (REINSURAN2SelectCommandActionREINSURAN)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Disc_xpremTblDataLoad(DISCXPREMSCERTYPE1 As String, DISCXPREMNBRANCH2 As String, DISCXPREMNPRODUCT3 As String, DISCXPREMNPOLICY4 As String, DISCXPREMNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nDisc_code = 0, .sAgree = String.Empty, .nCause = 0, .nPercent = 0, .nCurrency = 0, .nAmount = 0, .nDisc_codeDesc = String.Empty, .nCauseDesc = String.Empty, .nCurrencyDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT DISC_XPREM.NDISC_CODE, DISC_XPREM.SAGREE, DISC_XPREM.NCAUSE, DISC_XPREM.NPERCENT, DISC_XPREM.NCURRENCY, DISC_XPREM.NAMOUNT, DISCO_EXPR.SDESCRIPT NDISC_CODEDESC, TABLE5631.SDESCRIPT NCAUSEDESC, TABLE11.SDESCRIPT NCURRENCYDESC FROM DISC_XPREM DISC_XPREM LEFT JOIN DISCO_EXPR DISCO_EXPR ON DISCO_EXPR.NBRANCH = DISC_XPREM.NBRANCH  AND DISCO_EXPR.NPRODUCT = DISC_XPREM.NPRODUCT  AND DISCO_EXPR.NDISEXPRC = DISC_XPREM.NDISC_CODE  AND DISCO_EXPR.DEFFECDATE = DISC_XPREM.DEFFECDATE LEFT JOIN TABLE5631 TABLE5631 ON TABLE5631.NCAUSE = DISC_XPREM.NCAUSE LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = DISC_XPREM.NCURRENCY  WHERE DISC_XPREM.SCERTYPE = @:DISC_XPREMSCERTYPE1 AND DISC_XPREM.NBRANCH = @:DISC_XPREMNBRANCH2 AND DISC_XPREM.NPRODUCT = @:DISC_XPREMNPRODUCT3 AND DISC_XPREM.NPOLICY = @:DISC_XPREMNPOLICY4 AND DISC_XPREM.NCERTIF = @:DISC_XPREMNCERTIF5", "DISC_XPREM", "Linked.LatCombined")
                    .AddParameter("DISC_XPREMSCERTYPE1", DbType.AnsiStringFixedLength, 0, (DISCXPREMSCERTYPE1 = String.Empty), DISCXPREMSCERTYPE1)
                    .AddParameter("DISC_XPREMNBRANCH2", DbType.AnsiStringFixedLength, 0, (DISCXPREMNBRANCH2 = String.Empty), DISCXPREMNBRANCH2)
                    .AddParameter("DISC_XPREMNPRODUCT3", DbType.AnsiStringFixedLength, 0, (DISCXPREMNPRODUCT3 = String.Empty), DISCXPREMNPRODUCT3)
                    .AddParameter("DISC_XPREMNPOLICY4", DbType.AnsiStringFixedLength, 0, (DISCXPREMNPOLICY4 = String.Empty), DISCXPREMNPOLICY4)
                    .AddParameter("DISC_XPREMNCERTIF5", DbType.AnsiStringFixedLength, 0, (DISCXPREMNCERTIF5 = String.Empty), DISCXPREMNCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nDisc_code = itemData.NumericValue("NDISC_CODE"), .sAgree = itemData.StringValue("SAGREE"), .nCause = itemData.NumericValue("NCAUSE"), .nPercent = itemData.NumericValue("NPERCENT"), .nCurrency = itemData.NumericValue("NCURRENCY"), .nAmount = itemData.NumericValue("NAMOUNT"), .nDisc_codeDesc = itemData.StringValue("NDISC_CODEDESC"), .nCauseDesc = itemData.StringValue("NCAUSEDESC"), .nCurrencyDesc = itemData.StringValue("NCURRENCYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Disc_xpremTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Disc_xpremTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Disc_xpremTblDataCount(DISCXPREMSCERTYPE1 As String, DISCXPREMNBRANCH2 As String, DISCXPREMNPRODUCT3 As String, DISCXPREMNPOLICY4 As String, DISCXPREMNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT DISC_XPREM.NDISC_CODE, DISC_XPREM.SAGREE, DISC_XPREM.NCAUSE, DISC_XPREM.NPERCENT, DISC_XPREM.NCURRENCY, DISC_XPREM.NAMOUNT, DISCO_EXPR.SDESCRIPT NDISC_CODEDESC, TABLE5631.SDESCRIPT NCAUSEDESC, TABLE11.SDESCRIPT NCURRENCYDESC FROM DISC_XPREM DISC_XPREM LEFT JOIN DISCO_EXPR DISCO_EXPR ON DISCO_EXPR.NBRANCH = DISC_XPREM.NBRANCH  AND DISCO_EXPR.NPRODUCT = DISC_XPREM.NPRODUCT  AND DISCO_EXPR.NDISEXPRC = DISC_XPREM.NDISC_CODE  AND DISCO_EXPR.DEFFECDATE = DISC_XPREM.DEFFECDATE LEFT JOIN TABLE5631 TABLE5631 ON TABLE5631.NCAUSE = DISC_XPREM.NCAUSE LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = DISC_XPREM.NCURRENCY  WHERE DISC_XPREM.SCERTYPE = @:DISC_XPREMSCERTYPE1 AND DISC_XPREM.NBRANCH = @:DISC_XPREMNBRANCH2 AND DISC_XPREM.NPRODUCT = @:DISC_XPREMNPRODUCT3 AND DISC_XPREM.NPOLICY = @:DISC_XPREMNPOLICY4 AND DISC_XPREM.NCERTIF = @:DISC_XPREMNCERTIF5)", "DISC_XPREM", "Linked.LatCombined")
                    .AddParameter("DISC_XPREMSCERTYPE1", DbType.AnsiStringFixedLength, 0, (DISCXPREMSCERTYPE1 = String.Empty), DISCXPREMSCERTYPE1)
                    .AddParameter("DISC_XPREMNBRANCH2", DbType.AnsiStringFixedLength, 0, (DISCXPREMNBRANCH2 = String.Empty), DISCXPREMNBRANCH2)
                    .AddParameter("DISC_XPREMNPRODUCT3", DbType.AnsiStringFixedLength, 0, (DISCXPREMNPRODUCT3 = String.Empty), DISCXPREMNPRODUCT3)
                    .AddParameter("DISC_XPREMNPOLICY4", DbType.AnsiStringFixedLength, 0, (DISCXPREMNPOLICY4 = String.Empty), DISCXPREMNPOLICY4)
                    .AddParameter("DISC_XPREMNCERTIF5", DbType.AnsiStringFixedLength, 0, (DISCXPREMNCERTIF5 = String.Empty), DISCXPREMNCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Disc_xpremTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Disc_xpremTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Disc_xpremSelectCommandActionDISC_XPREM(DISCXPREMSCERTYPE1 As String, DISCXPREMNBRANCH2 As String, DISCXPREMNPRODUCT3 As String, DISCXPREMNPOLICY4 As String, DISCXPREMNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(DISC_XPREM.NDISC_CODE) COUNTDATA FROM DISC_XPREM DISC_XPREM LEFT JOIN DISCO_EXPR DISCO_EXPR ON DISCO_EXPR.NBRANCH = DISC_XPREM.NBRANCH  AND DISCO_EXPR.NPRODUCT = DISC_XPREM.NPRODUCT  AND DISCO_EXPR.NDISEXPRC = DISC_XPREM.NDISC_CODE  AND DISCO_EXPR.DEFFECDATE = DISC_XPREM.DEFFECDATE LEFT JOIN TABLE5631 TABLE5631 ON TABLE5631.NCAUSE = DISC_XPREM.NCAUSE LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = DISC_XPREM.NCURRENCY  WHERE DISC_XPREM.SCERTYPE = @:DISC_XPREMSCERTYPE1 AND DISC_XPREM.NBRANCH = @:DISC_XPREMNBRANCH2 AND DISC_XPREM.NPRODUCT = @:DISC_XPREMNPRODUCT3 AND DISC_XPREM.NPOLICY = @:DISC_XPREMNPOLICY4 AND DISC_XPREM.NCERTIF = @:DISC_XPREMNCERTIF5", "DISC_XPREM", "Linked.LatCombined")
                    .AddParameter("DISC_XPREMSCERTYPE1", DbType.AnsiStringFixedLength, 0, (DISCXPREMSCERTYPE1 = String.Empty), DISCXPREMSCERTYPE1)
                    .AddParameter("DISC_XPREMNBRANCH2", DbType.AnsiStringFixedLength, 0, (DISCXPREMNBRANCH2 = String.Empty), DISCXPREMNBRANCH2)
                    .AddParameter("DISC_XPREMNPRODUCT3", DbType.AnsiStringFixedLength, 0, (DISCXPREMNPRODUCT3 = String.Empty), DISCXPREMNPRODUCT3)
                    .AddParameter("DISC_XPREMNPOLICY4", DbType.AnsiStringFixedLength, 0, (DISCXPREMNPOLICY4 = String.Empty), DISCXPREMNPOLICY4)
                    .AddParameter("DISC_XPREMNCERTIF5", DbType.AnsiStringFixedLength, 0, (DISCXPREMNCERTIF5 = String.Empty), DISCXPREMNCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Disc_xpremSelectCommandActionDISC_XPREM", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Disc_xpremSelectCommandActionDISC_XPREM)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function AutoTblDataLoad(AUTOSCERTYPE1 As String, AUTONBRANCH2 As String, AUTONPRODUCT3 As String, AUTONPOLICY4 As String, AUTONCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.sRegist = String.Empty, .sLicense_ty = String.Empty, .nVehType = 0, .sMotor = String.Empty, .sChassis = String.Empty, .sColor = String.Empty, .nCapital = 0, .nVeh_valor = 0, .nYear = 0, .nAutoZone = 0, .nUse = 0, .sLicense_tyDesc = String.Empty, .nVehTypeDesc = String.Empty, .nAutoZoneDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT AUTO.SREGIST, AUTO.SLICENSE_TY, AUTO.NVEHTYPE, AUTO.SMOTOR, AUTO.SCHASSIS, AUTO.SCOLOR, AUTO.NCAPITAL, AUTO.NVEH_VALOR, AUTO.NYEAR, AUTO.NAUTOZONE, AUTO.NUSE, TABLE80.SDESCRIPT SLICENSE_TYDESC, TABLE226.SDESCRIPT NVEHTYPEDESC, TABLE224.SDESCRIPT NAUTOZONEDESC FROM AUTO AUTO LEFT JOIN TABLE80 TABLE80 ON TABLE80.SLICENSE_TY = AUTO.SLICENSE_TY LEFT JOIN TABLE226 TABLE226 ON TABLE226.NVEHTYPE = AUTO.NVEHTYPE LEFT JOIN TABLE224 TABLE224 ON TABLE224.NAUTOZONE = AUTO.NAUTOZONE  WHERE AUTO.SCERTYPE = @:AUTOSCERTYPE1 AND AUTO.NBRANCH = @:AUTONBRANCH2 AND AUTO.NPRODUCT = @:AUTONPRODUCT3 AND AUTO.NPOLICY = @:AUTONPOLICY4 AND AUTO.NCERTIF = @:AUTONCERTIF5", "AUTO", "Linked.LatCombined")
                    .AddParameter("AUTOSCERTYPE1", DbType.AnsiStringFixedLength, 0, (AUTOSCERTYPE1 = String.Empty), AUTOSCERTYPE1)
                    .AddParameter("AUTONBRANCH2", DbType.AnsiStringFixedLength, 0, (AUTONBRANCH2 = String.Empty), AUTONBRANCH2)
                    .AddParameter("AUTONPRODUCT3", DbType.AnsiStringFixedLength, 0, (AUTONPRODUCT3 = String.Empty), AUTONPRODUCT3)
                    .AddParameter("AUTONPOLICY4", DbType.AnsiStringFixedLength, 0, (AUTONPOLICY4 = String.Empty), AUTONPOLICY4)
                    .AddParameter("AUTONCERTIF5", DbType.AnsiStringFixedLength, 0, (AUTONCERTIF5 = String.Empty), AUTONCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.sRegist = itemData.StringValue("SREGIST"), .sLicense_ty = itemData.StringValue("SLICENSE_TY"), .nVehType = itemData.NumericValue("NVEHTYPE"), .sMotor = itemData.StringValue("SMOTOR"), .sChassis = itemData.StringValue("SCHASSIS"), .sColor = itemData.StringValue("SCOLOR"), .nCapital = itemData.NumericValue("NCAPITAL"), .nVeh_valor = itemData.NumericValue("NVEH_VALOR"), .nYear = itemData.NumericValue("NYEAR"), .nAutoZone = itemData.NumericValue("NAUTOZONE"), .nUse = itemData.NumericValue("NUSE"), .sLicense_tyDesc = itemData.StringValue("SLICENSE_TYDESC"), .nVehTypeDesc = itemData.StringValue("NVEHTYPEDESC"), .nAutoZoneDesc = itemData.StringValue("NAUTOZONEDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "AutoTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (AutoTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function AutoTblDataCount(AUTOSCERTYPE1 As String, AUTONBRANCH2 As String, AUTONPRODUCT3 As String, AUTONPOLICY4 As String, AUTONCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT AUTO.SREGIST, AUTO.SLICENSE_TY, AUTO.NVEHTYPE, AUTO.SMOTOR, AUTO.SCHASSIS, AUTO.SCOLOR, AUTO.NCAPITAL, AUTO.NVEH_VALOR, AUTO.NYEAR, AUTO.NAUTOZONE, AUTO.NUSE, TABLE80.SDESCRIPT SLICENSE_TYDESC, TABLE226.SDESCRIPT NVEHTYPEDESC, TABLE224.SDESCRIPT NAUTOZONEDESC FROM AUTO AUTO LEFT JOIN TABLE80 TABLE80 ON TABLE80.SLICENSE_TY = AUTO.SLICENSE_TY LEFT JOIN TABLE226 TABLE226 ON TABLE226.NVEHTYPE = AUTO.NVEHTYPE LEFT JOIN TABLE224 TABLE224 ON TABLE224.NAUTOZONE = AUTO.NAUTOZONE  WHERE AUTO.SCERTYPE = @:AUTOSCERTYPE1 AND AUTO.NBRANCH = @:AUTONBRANCH2 AND AUTO.NPRODUCT = @:AUTONPRODUCT3 AND AUTO.NPOLICY = @:AUTONPOLICY4 AND AUTO.NCERTIF = @:AUTONCERTIF5)", "AUTO", "Linked.LatCombined")
                    .AddParameter("AUTOSCERTYPE1", DbType.AnsiStringFixedLength, 0, (AUTOSCERTYPE1 = String.Empty), AUTOSCERTYPE1)
                    .AddParameter("AUTONBRANCH2", DbType.AnsiStringFixedLength, 0, (AUTONBRANCH2 = String.Empty), AUTONBRANCH2)
                    .AddParameter("AUTONPRODUCT3", DbType.AnsiStringFixedLength, 0, (AUTONPRODUCT3 = String.Empty), AUTONPRODUCT3)
                    .AddParameter("AUTONPOLICY4", DbType.AnsiStringFixedLength, 0, (AUTONPOLICY4 = String.Empty), AUTONPOLICY4)
                    .AddParameter("AUTONCERTIF5", DbType.AnsiStringFixedLength, 0, (AUTONCERTIF5 = String.Empty), AUTONCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "AutoTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (AutoTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function AutoSelectCommandActionAUTO(AUTOSCERTYPE1 As String, AUTONBRANCH2 As String, AUTONPRODUCT3 As String, AUTONPOLICY4 As String, AUTONCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(AUTO.NVEHTYPE) COUNTDATA FROM AUTO AUTO LEFT JOIN TABLE80 TABLE80 ON TABLE80.SLICENSE_TY = AUTO.SLICENSE_TY LEFT JOIN TABLE226 TABLE226 ON TABLE226.NVEHTYPE = AUTO.NVEHTYPE LEFT JOIN TABLE224 TABLE224 ON TABLE224.NAUTOZONE = AUTO.NAUTOZONE  WHERE AUTO.SCERTYPE = @:AUTOSCERTYPE1 AND AUTO.NBRANCH = @:AUTONBRANCH2 AND AUTO.NPRODUCT = @:AUTONPRODUCT3 AND AUTO.NPOLICY = @:AUTONPOLICY4 AND AUTO.NCERTIF = @:AUTONCERTIF5", "AUTO", "Linked.LatCombined")
                    .AddParameter("AUTOSCERTYPE1", DbType.AnsiStringFixedLength, 0, (AUTOSCERTYPE1 = String.Empty), AUTOSCERTYPE1)
                    .AddParameter("AUTONBRANCH2", DbType.AnsiStringFixedLength, 0, (AUTONBRANCH2 = String.Empty), AUTONBRANCH2)
                    .AddParameter("AUTONPRODUCT3", DbType.AnsiStringFixedLength, 0, (AUTONPRODUCT3 = String.Empty), AUTONPRODUCT3)
                    .AddParameter("AUTONPOLICY4", DbType.AnsiStringFixedLength, 0, (AUTONPOLICY4 = String.Empty), AUTONPOLICY4)
                    .AddParameter("AUTONCERTIF5", DbType.AnsiStringFixedLength, 0, (AUTONCERTIF5 = String.Empty), AUTONCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "AutoSelectCommandActionAUTO", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (AutoSelectCommandActionAUTO)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function FireTblDataLoad(FIRESCERTYPE1 As String, FIRENBRANCH2 As String, FIRENPRODUCT3 As String, FIRENPOLICY4 As String, FIRENCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nConstCat = 0, .nActivityCat = 0, .nFloor_quan = 0, .nRoofType = 0, .nSeismicZone = 0, .nBuildType = 0, .nSpCombType = 0, .sDescBussi = String.Empty, .nHurrican_zone = 0, .nSideCloseType = 0, .nConstCatDesc = String.Empty, .nActivityCatDesc = String.Empty, .nRoofTypeDesc = String.Empty, .nSeismicZoneDesc = String.Empty, .nBuildTypeDesc = String.Empty, .nSpCombTypeDesc = String.Empty, .nSideCloseTypeDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT FIRE.NCONSTCAT, FIRE.NACTIVITYCAT, FIRE.NFLOOR_QUAN, FIRE.NROOFTYPE, FIRE.NSEISMICZONE, FIRE.NBUILDTYPE, FIRE.NSPCOMBTYPE, FIRE.SDESCBUSSI, FIRE.NHURRICAN_ZONE, FIRE.NSIDECLOSETYPE, TABLE233.SDESCRIPT NCONSTCATDESC, TABLE7044.SDESCRIPT NACTIVITYCATDESC, TABLE7038.SDESCRIPT NROOFTYPEDESC, TABLE7047.SDESCRIPT NSEISMICZONEDESC, TABLE7039.SDESCRIPT NBUILDTYPEDESC, TABLE7040.SDESCRIPT NSPCOMBTYPEDESC, TABLE7037.SDESCRIPT NSIDECLOSETYPEDESC FROM FIRE FIRE LEFT JOIN TABLE233 TABLE233 ON TABLE233.NCONSTCAT = FIRE.NCONSTCAT LEFT JOIN TABLE7044 TABLE7044 ON TABLE7044.NACTIVITYCAT = FIRE.NACTIVITYCAT LEFT JOIN TABLE7038 TABLE7038 ON TABLE7038.NROOFTYPE = FIRE.NROOFTYPE LEFT JOIN TABLE7047 TABLE7047 ON TABLE7047.NSEISMICZONE = FIRE.NSEISMICZONE LEFT JOIN TABLE7039 TABLE7039 ON TABLE7039.NBUILDTYPE = FIRE.NBUILDTYPE LEFT JOIN TABLE7040 TABLE7040 ON TABLE7040.NSPCOMBTYPE = FIRE.NSPCOMBTYPE LEFT JOIN TABLE7037 TABLE7037 ON TABLE7037.NSIDECLOSETYPE = FIRE.NSIDECLOSETYPE  WHERE FIRE.SCERTYPE = @:FIRESCERTYPE1 AND FIRE.NBRANCH = @:FIRENBRANCH2 AND FIRE.NPRODUCT = @:FIRENPRODUCT3 AND FIRE.NPOLICY = @:FIRENPOLICY4 AND FIRE.NCERTIF = @:FIRENCERTIF5", "FIRE", "Linked.LatCombined")
                    .AddParameter("FIRESCERTYPE1", DbType.AnsiStringFixedLength, 0, (FIRESCERTYPE1 = String.Empty), FIRESCERTYPE1)
                    .AddParameter("FIRENBRANCH2", DbType.AnsiStringFixedLength, 0, (FIRENBRANCH2 = String.Empty), FIRENBRANCH2)
                    .AddParameter("FIRENPRODUCT3", DbType.AnsiStringFixedLength, 0, (FIRENPRODUCT3 = String.Empty), FIRENPRODUCT3)
                    .AddParameter("FIRENPOLICY4", DbType.AnsiStringFixedLength, 0, (FIRENPOLICY4 = String.Empty), FIRENPOLICY4)
                    .AddParameter("FIRENCERTIF5", DbType.AnsiStringFixedLength, 0, (FIRENCERTIF5 = String.Empty), FIRENCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nConstCat = itemData.NumericValue("NCONSTCAT"), .nActivityCat = itemData.NumericValue("NACTIVITYCAT"), .nFloor_quan = itemData.NumericValue("NFLOOR_QUAN"), .nRoofType = itemData.NumericValue("NROOFTYPE"), .nSeismicZone = itemData.NumericValue("NSEISMICZONE"), .nBuildType = itemData.NumericValue("NBUILDTYPE"), .nSpCombType = itemData.NumericValue("NSPCOMBTYPE"), .sDescBussi = itemData.StringValue("SDESCBUSSI"), .nHurrican_zone = itemData.NumericValue("NHURRICAN_ZONE"), .nSideCloseType = itemData.NumericValue("NSIDECLOSETYPE"), .nConstCatDesc = itemData.StringValue("NCONSTCATDESC"), .nActivityCatDesc = itemData.StringValue("NACTIVITYCATDESC"), .nRoofTypeDesc = itemData.StringValue("NROOFTYPEDESC"), .nSeismicZoneDesc = itemData.StringValue("NSEISMICZONEDESC"), .nBuildTypeDesc = itemData.StringValue("NBUILDTYPEDESC"), .nSpCombTypeDesc = itemData.StringValue("NSPCOMBTYPEDESC"), .nSideCloseTypeDesc = itemData.StringValue("NSIDECLOSETYPEDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "FireTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (FireTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function FireTblDataCount(FIRESCERTYPE1 As String, FIRENBRANCH2 As String, FIRENPRODUCT3 As String, FIRENPOLICY4 As String, FIRENCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT FIRE.NCONSTCAT, FIRE.NACTIVITYCAT, FIRE.NFLOOR_QUAN, FIRE.NROOFTYPE, FIRE.NSEISMICZONE, FIRE.NBUILDTYPE, FIRE.NSPCOMBTYPE, FIRE.SDESCBUSSI, FIRE.NHURRICAN_ZONE, FIRE.NSIDECLOSETYPE, TABLE233.SDESCRIPT NCONSTCATDESC, TABLE7044.SDESCRIPT NACTIVITYCATDESC, TABLE7038.SDESCRIPT NROOFTYPEDESC, TABLE7047.SDESCRIPT NSEISMICZONEDESC, TABLE7039.SDESCRIPT NBUILDTYPEDESC, TABLE7040.SDESCRIPT NSPCOMBTYPEDESC, TABLE7037.SDESCRIPT NSIDECLOSETYPEDESC FROM FIRE FIRE LEFT JOIN TABLE233 TABLE233 ON TABLE233.NCONSTCAT = FIRE.NCONSTCAT LEFT JOIN TABLE7044 TABLE7044 ON TABLE7044.NACTIVITYCAT = FIRE.NACTIVITYCAT LEFT JOIN TABLE7038 TABLE7038 ON TABLE7038.NROOFTYPE = FIRE.NROOFTYPE LEFT JOIN TABLE7047 TABLE7047 ON TABLE7047.NSEISMICZONE = FIRE.NSEISMICZONE LEFT JOIN TABLE7039 TABLE7039 ON TABLE7039.NBUILDTYPE = FIRE.NBUILDTYPE LEFT JOIN TABLE7040 TABLE7040 ON TABLE7040.NSPCOMBTYPE = FIRE.NSPCOMBTYPE LEFT JOIN TABLE7037 TABLE7037 ON TABLE7037.NSIDECLOSETYPE = FIRE.NSIDECLOSETYPE  WHERE FIRE.SCERTYPE = @:FIRESCERTYPE1 AND FIRE.NBRANCH = @:FIRENBRANCH2 AND FIRE.NPRODUCT = @:FIRENPRODUCT3 AND FIRE.NPOLICY = @:FIRENPOLICY4 AND FIRE.NCERTIF = @:FIRENCERTIF5)", "FIRE", "Linked.LatCombined")
                    .AddParameter("FIRESCERTYPE1", DbType.AnsiStringFixedLength, 0, (FIRESCERTYPE1 = String.Empty), FIRESCERTYPE1)
                    .AddParameter("FIRENBRANCH2", DbType.AnsiStringFixedLength, 0, (FIRENBRANCH2 = String.Empty), FIRENBRANCH2)
                    .AddParameter("FIRENPRODUCT3", DbType.AnsiStringFixedLength, 0, (FIRENPRODUCT3 = String.Empty), FIRENPRODUCT3)
                    .AddParameter("FIRENPOLICY4", DbType.AnsiStringFixedLength, 0, (FIRENPOLICY4 = String.Empty), FIRENPOLICY4)
                    .AddParameter("FIRENCERTIF5", DbType.AnsiStringFixedLength, 0, (FIRENCERTIF5 = String.Empty), FIRENCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "FireTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (FireTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function FireSelectCommandActionFIRE(FIRESCERTYPE1 As String, FIRENBRANCH2 As String, FIRENPRODUCT3 As String, FIRENPOLICY4 As String, FIRENCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(FIRE.NCONSTCAT) COUNTDATA FROM FIRE FIRE LEFT JOIN TABLE233 TABLE233 ON TABLE233.NCONSTCAT = FIRE.NCONSTCAT LEFT JOIN TABLE7044 TABLE7044 ON TABLE7044.NACTIVITYCAT = FIRE.NACTIVITYCAT LEFT JOIN TABLE7038 TABLE7038 ON TABLE7038.NROOFTYPE = FIRE.NROOFTYPE LEFT JOIN TABLE7047 TABLE7047 ON TABLE7047.NSEISMICZONE = FIRE.NSEISMICZONE LEFT JOIN TABLE7039 TABLE7039 ON TABLE7039.NBUILDTYPE = FIRE.NBUILDTYPE LEFT JOIN TABLE7040 TABLE7040 ON TABLE7040.NSPCOMBTYPE = FIRE.NSPCOMBTYPE LEFT JOIN TABLE7037 TABLE7037 ON TABLE7037.NSIDECLOSETYPE = FIRE.NSIDECLOSETYPE  WHERE FIRE.SCERTYPE = @:FIRESCERTYPE1 AND FIRE.NBRANCH = @:FIRENBRANCH2 AND FIRE.NPRODUCT = @:FIRENPRODUCT3 AND FIRE.NPOLICY = @:FIRENPOLICY4 AND FIRE.NCERTIF = @:FIRENCERTIF5", "FIRE", "Linked.LatCombined")
                    .AddParameter("FIRESCERTYPE1", DbType.AnsiStringFixedLength, 0, (FIRESCERTYPE1 = String.Empty), FIRESCERTYPE1)
                    .AddParameter("FIRENBRANCH2", DbType.AnsiStringFixedLength, 0, (FIRENBRANCH2 = String.Empty), FIRENBRANCH2)
                    .AddParameter("FIRENPRODUCT3", DbType.AnsiStringFixedLength, 0, (FIRENPRODUCT3 = String.Empty), FIRENPRODUCT3)
                    .AddParameter("FIRENPOLICY4", DbType.AnsiStringFixedLength, 0, (FIRENPOLICY4 = String.Empty), FIRENPOLICY4)
                    .AddParameter("FIRENCERTIF5", DbType.AnsiStringFixedLength, 0, (FIRENCERTIF5 = String.Empty), FIRENCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "FireSelectCommandActionFIRE", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (FireSelectCommandActionFIRE)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function HomeOwnerTblDataLoad(HOMEOWNERSCERTYPE1 As String, HOMEOWNERNBRANCH2 As String, HOMEOWNERNPRODUCT3 As String, HOMEOWNERNPOLICY4 As String, HOMEOWNERNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nOwnerShip = 0, .nDwellingType = 0, .NSEISMICZONE = 0, .nYear_built = 0, .dDate_purch = Date.MinValue, .nPrice_purch = 0, .nCurrency_purch = 0, .nLandSuper = 0, .nHomeSuper = 0, .nRoofType = 0, .nRoofYear = 0, .nFloodZone = 0, .nFoundType = 0, .sSprinkSys = String.Empty, .nAirType = 0, .nStories = 0, .nHalfBath = 0, .nFullBath = 0, .nBedrooms = 0, .nFirePlace = 0, .nGarage = 0, .sAnimalsDes = String.Empty, .nDist_Fire = 0, .sAlarm_comp = String.Empty, .sFencePool = String.Empty, .nSwimPool = 0, .nFenceHeight = 0, .sPolicy_other = String.Empty, .nCap_other = 0, .nCurrency_other = 0, .dExpir_other = Date.MinValue, .nOwnerShipDesc = String.Empty, .nDwellingTypeDesc = String.Empty, .nCurrency_purchDesc = String.Empty, .nRoofTypeDesc = String.Empty, .nFloodZoneDesc = String.Empty, .nAirTypeDesc = String.Empty, .nSwimPoolDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT HOMEOWNER.NOWNERSHIP, HOMEOWNER.NDWELLINGTYPE, HOMEOWNER.NSEISMICZONE, HOMEOWNER.NYEAR_BUILT, HOMEOWNER.DDATE_PURCH, HOMEOWNER.NPRICE_PURCH, HOMEOWNER.NCURRENCY_PURCH, HOMEOWNER.NLANDSUPER, HOMEOWNER.NHOMESUPER, HOMEOWNER.NROOFTYPE, HOMEOWNER.NROOFYEAR, HOMEOWNER.NFLOODZONE, HOMEOWNER.NFOUNDTYPE, HOMEOWNER.SSPRINKSYS, HOMEOWNER.NAIRTYPE, HOMEOWNER.NSTORIES, HOMEOWNER.NHALFBATH, HOMEOWNER.NFULLBATH, HOMEOWNER.NBEDROOMS, HOMEOWNER.NFIREPLACE, HOMEOWNER.NGARAGE, HOMEOWNER.SANIMALSDES, HOMEOWNER.NDIST_FIRE, HOMEOWNER.SALARM_COMP, HOMEOWNER.SFENCEPOOL, HOMEOWNER.NSWIMPOOL, HOMEOWNER.NFENCEHEIGHT, HOMEOWNER.SPOLICY_OTHER, HOMEOWNER.NCAP_OTHER, HOMEOWNER.NCURRENCY_OTHER, HOMEOWNER.DEXPIR_OTHER, TABLE6005.SDESCRIPT NOWNERSHIPDESC, TABLE6012.SDESCRIPT NDWELLINGTYPEDESC, TABLE11.SDESCRIPT NCURRENCY_PURCHDESC, TABLE7038.SDESCRIPT NROOFTYPEDESC, TABLE6007.SDESCRIPT NFLOODZONEDESC, TABLE6001.SDESCRIPT NAIRTYPEDESC, TABLE6004.SDESCRIPT NSWIMPOOLDESC FROM HOMEOWNER HOMEOWNER LEFT JOIN TABLE6005 TABLE6005 ON TABLE6005.NOWNERSHIP = HOMEOWNER.NOWNERSHIP LEFT JOIN TABLE6012 TABLE6012 ON TABLE6012.NDWELLINGTYPE = HOMEOWNER.NDWELLINGTYPE LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = HOMEOWNER.NCURRENCY_PURCH LEFT JOIN TABLE7038 TABLE7038 ON TABLE7038.NROOFTYPE = HOMEOWNER.NROOFTYPE LEFT JOIN TABLE6007 TABLE6007 ON TABLE6007.NZONETYPE = HOMEOWNER.NFLOODZONE LEFT JOIN TABLE6001 TABLE6001 ON TABLE6001.NAIRTYPE = HOMEOWNER.NAIRTYPE LEFT JOIN TABLE6004 TABLE6004 ON TABLE6004.NSWIMPOOL = HOMEOWNER.NSWIMPOOL  WHERE HOMEOWNER.SCERTYPE = @:HOMEOWNERSCERTYPE1 AND HOMEOWNER.NBRANCH = @:HOMEOWNERNBRANCH2 AND HOMEOWNER.NPRODUCT = @:HOMEOWNERNPRODUCT3 AND HOMEOWNER.NPOLICY = @:HOMEOWNERNPOLICY4 AND HOMEOWNER.NCERTIF = @:HOMEOWNERNCERTIF5", "HOMEOWNER", "Linked.LatCombined")
                    .AddParameter("HOMEOWNERSCERTYPE1", DbType.AnsiStringFixedLength, 0, (HOMEOWNERSCERTYPE1 = String.Empty), HOMEOWNERSCERTYPE1)
                    .AddParameter("HOMEOWNERNBRANCH2", DbType.AnsiStringFixedLength, 0, (HOMEOWNERNBRANCH2 = String.Empty), HOMEOWNERNBRANCH2)
                    .AddParameter("HOMEOWNERNPRODUCT3", DbType.AnsiStringFixedLength, 0, (HOMEOWNERNPRODUCT3 = String.Empty), HOMEOWNERNPRODUCT3)
                    .AddParameter("HOMEOWNERNPOLICY4", DbType.AnsiStringFixedLength, 0, (HOMEOWNERNPOLICY4 = String.Empty), HOMEOWNERNPOLICY4)
                    .AddParameter("HOMEOWNERNCERTIF5", DbType.AnsiStringFixedLength, 0, (HOMEOWNERNCERTIF5 = String.Empty), HOMEOWNERNCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nOwnerShip = itemData.NumericValue("NOWNERSHIP"), .nDwellingType = itemData.NumericValue("NDWELLINGTYPE"), .NSEISMICZONE = itemData.NumericValue("NSEISMICZONE"), .nYear_built = itemData.NumericValue("NYEAR_BUILT"), .dDate_purch = itemData.DateTimeValue("DDATE_PURCH"), .nPrice_purch = itemData.NumericValue("NPRICE_PURCH"), .nCurrency_purch = itemData.NumericValue("NCURRENCY_PURCH"), .nLandSuper = itemData.NumericValue("NLANDSUPER"), .nHomeSuper = itemData.NumericValue("NHOMESUPER"), .nRoofType = itemData.NumericValue("NROOFTYPE"), .nRoofYear = itemData.NumericValue("NROOFYEAR"), .nFloodZone = itemData.NumericValue("NFLOODZONE"), .nFoundType = itemData.NumericValue("NFOUNDTYPE"), .sSprinkSys = itemData.StringValue("SSPRINKSYS"), .nAirType = itemData.NumericValue("NAIRTYPE"), .nStories = itemData.NumericValue("NSTORIES"), .nHalfBath = itemData.NumericValue("NHALFBATH"), .nFullBath = itemData.NumericValue("NFULLBATH"), .nBedrooms = itemData.NumericValue("NBEDROOMS"), .nFirePlace = itemData.NumericValue("NFIREPLACE"), .nGarage = itemData.NumericValue("NGARAGE"), .sAnimalsDes = itemData.StringValue("SANIMALSDES"), .nDist_Fire = itemData.NumericValue("NDIST_FIRE"), .sAlarm_comp = itemData.StringValue("SALARM_COMP"), .sFencePool = itemData.StringValue("SFENCEPOOL"), .nSwimPool = itemData.NumericValue("NSWIMPOOL"), .nFenceHeight = itemData.NumericValue("NFENCEHEIGHT"), .sPolicy_other = itemData.StringValue("SPOLICY_OTHER"), .nCap_other = itemData.NumericValue("NCAP_OTHER"), .nCurrency_other = itemData.NumericValue("NCURRENCY_OTHER"), .dExpir_other = itemData.DateTimeValue("DEXPIR_OTHER"), .nOwnerShipDesc = itemData.StringValue("NOWNERSHIPDESC"), .nDwellingTypeDesc = itemData.StringValue("NDWELLINGTYPEDESC"), .nCurrency_purchDesc = itemData.StringValue("NCURRENCY_PURCHDESC"), .nRoofTypeDesc = itemData.StringValue("NROOFTYPEDESC"), .nFloodZoneDesc = itemData.StringValue("NFLOODZONEDESC"), .nAirTypeDesc = itemData.StringValue("NAIRTYPEDESC"), .nSwimPoolDesc = itemData.StringValue("NSWIMPOOLDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "HomeOwnerTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (HomeOwnerTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function HomeOwnerTblDataCount(HOMEOWNERSCERTYPE1 As String, HOMEOWNERNBRANCH2 As String, HOMEOWNERNPRODUCT3 As String, HOMEOWNERNPOLICY4 As String, HOMEOWNERNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT HOMEOWNER.NOWNERSHIP, HOMEOWNER.NDWELLINGTYPE, HOMEOWNER.NSEISMICZONE, HOMEOWNER.NYEAR_BUILT, HOMEOWNER.DDATE_PURCH, HOMEOWNER.NPRICE_PURCH, HOMEOWNER.NCURRENCY_PURCH, HOMEOWNER.NLANDSUPER, HOMEOWNER.NHOMESUPER, HOMEOWNER.NROOFTYPE, HOMEOWNER.NROOFYEAR, HOMEOWNER.NFLOODZONE, HOMEOWNER.NFOUNDTYPE, HOMEOWNER.SSPRINKSYS, HOMEOWNER.NAIRTYPE, HOMEOWNER.NSTORIES, HOMEOWNER.NHALFBATH, HOMEOWNER.NFULLBATH, HOMEOWNER.NBEDROOMS, HOMEOWNER.NFIREPLACE, HOMEOWNER.NGARAGE, HOMEOWNER.SANIMALSDES, HOMEOWNER.NDIST_FIRE, HOMEOWNER.SALARM_COMP, HOMEOWNER.SFENCEPOOL, HOMEOWNER.NSWIMPOOL, HOMEOWNER.NFENCEHEIGHT, HOMEOWNER.SPOLICY_OTHER, HOMEOWNER.NCAP_OTHER, HOMEOWNER.NCURRENCY_OTHER, HOMEOWNER.DEXPIR_OTHER, TABLE6005.SDESCRIPT NOWNERSHIPDESC, TABLE6012.SDESCRIPT NDWELLINGTYPEDESC, TABLE11.SDESCRIPT NCURRENCY_PURCHDESC, TABLE7038.SDESCRIPT NROOFTYPEDESC, TABLE6007.SDESCRIPT NFLOODZONEDESC, TABLE6001.SDESCRIPT NAIRTYPEDESC, TABLE6004.SDESCRIPT NSWIMPOOLDESC FROM HOMEOWNER HOMEOWNER LEFT JOIN TABLE6005 TABLE6005 ON TABLE6005.NOWNERSHIP = HOMEOWNER.NOWNERSHIP LEFT JOIN TABLE6012 TABLE6012 ON TABLE6012.NDWELLINGTYPE = HOMEOWNER.NDWELLINGTYPE LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = HOMEOWNER.NCURRENCY_PURCH LEFT JOIN TABLE7038 TABLE7038 ON TABLE7038.NROOFTYPE = HOMEOWNER.NROOFTYPE LEFT JOIN TABLE6007 TABLE6007 ON TABLE6007.NZONETYPE = HOMEOWNER.NFLOODZONE LEFT JOIN TABLE6001 TABLE6001 ON TABLE6001.NAIRTYPE = HOMEOWNER.NAIRTYPE LEFT JOIN TABLE6004 TABLE6004 ON TABLE6004.NSWIMPOOL = HOMEOWNER.NSWIMPOOL  WHERE HOMEOWNER.SCERTYPE = @:HOMEOWNERSCERTYPE1 AND HOMEOWNER.NBRANCH = @:HOMEOWNERNBRANCH2 AND HOMEOWNER.NPRODUCT = @:HOMEOWNERNPRODUCT3 AND HOMEOWNER.NPOLICY = @:HOMEOWNERNPOLICY4 AND HOMEOWNER.NCERTIF = @:HOMEOWNERNCERTIF5)", "HOMEOWNER", "Linked.LatCombined")
                    .AddParameter("HOMEOWNERSCERTYPE1", DbType.AnsiStringFixedLength, 0, (HOMEOWNERSCERTYPE1 = String.Empty), HOMEOWNERSCERTYPE1)
                    .AddParameter("HOMEOWNERNBRANCH2", DbType.AnsiStringFixedLength, 0, (HOMEOWNERNBRANCH2 = String.Empty), HOMEOWNERNBRANCH2)
                    .AddParameter("HOMEOWNERNPRODUCT3", DbType.AnsiStringFixedLength, 0, (HOMEOWNERNPRODUCT3 = String.Empty), HOMEOWNERNPRODUCT3)
                    .AddParameter("HOMEOWNERNPOLICY4", DbType.AnsiStringFixedLength, 0, (HOMEOWNERNPOLICY4 = String.Empty), HOMEOWNERNPOLICY4)
                    .AddParameter("HOMEOWNERNCERTIF5", DbType.AnsiStringFixedLength, 0, (HOMEOWNERNCERTIF5 = String.Empty), HOMEOWNERNCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "HomeOwnerTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (HomeOwnerTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function HomeOwnerSelectCommandActionHOMEOWNER(HOMEOWNERSCERTYPE1 As String, HOMEOWNERNBRANCH2 As String, HOMEOWNERNPRODUCT3 As String, HOMEOWNERNPOLICY4 As String, HOMEOWNERNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(HOMEOWNER.NOWNERSHIP) COUNTDATA FROM HOMEOWNER HOMEOWNER LEFT JOIN TABLE6005 TABLE6005 ON TABLE6005.NOWNERSHIP = HOMEOWNER.NOWNERSHIP LEFT JOIN TABLE6012 TABLE6012 ON TABLE6012.NDWELLINGTYPE = HOMEOWNER.NDWELLINGTYPE LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = HOMEOWNER.NCURRENCY_PURCH LEFT JOIN TABLE7038 TABLE7038 ON TABLE7038.NROOFTYPE = HOMEOWNER.NROOFTYPE LEFT JOIN TABLE6007 TABLE6007 ON TABLE6007.NZONETYPE = HOMEOWNER.NFLOODZONE LEFT JOIN TABLE6001 TABLE6001 ON TABLE6001.NAIRTYPE = HOMEOWNER.NAIRTYPE LEFT JOIN TABLE6004 TABLE6004 ON TABLE6004.NSWIMPOOL = HOMEOWNER.NSWIMPOOL  WHERE HOMEOWNER.SCERTYPE = @:HOMEOWNERSCERTYPE1 AND HOMEOWNER.NBRANCH = @:HOMEOWNERNBRANCH2 AND HOMEOWNER.NPRODUCT = @:HOMEOWNERNPRODUCT3 AND HOMEOWNER.NPOLICY = @:HOMEOWNERNPOLICY4 AND HOMEOWNER.NCERTIF = @:HOMEOWNERNCERTIF5", "HOMEOWNER", "Linked.LatCombined")
                    .AddParameter("HOMEOWNERSCERTYPE1", DbType.AnsiStringFixedLength, 0, (HOMEOWNERSCERTYPE1 = String.Empty), HOMEOWNERSCERTYPE1)
                    .AddParameter("HOMEOWNERNBRANCH2", DbType.AnsiStringFixedLength, 0, (HOMEOWNERNBRANCH2 = String.Empty), HOMEOWNERNBRANCH2)
                    .AddParameter("HOMEOWNERNPRODUCT3", DbType.AnsiStringFixedLength, 0, (HOMEOWNERNPRODUCT3 = String.Empty), HOMEOWNERNPRODUCT3)
                    .AddParameter("HOMEOWNERNPOLICY4", DbType.AnsiStringFixedLength, 0, (HOMEOWNERNPOLICY4 = String.Empty), HOMEOWNERNPOLICY4)
                    .AddParameter("HOMEOWNERNCERTIF5", DbType.AnsiStringFixedLength, 0, (HOMEOWNERNCERTIF5 = String.Empty), HOMEOWNERNCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "HomeOwnerSelectCommandActionHOMEOWNER", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (HomeOwnerSelectCommandActionHOMEOWNER)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function LifeTblDataLoad(LIFESCERTYPE1 As String, LIFENBRANCH2 As String, LIFENPRODUCT3 As String, LIFENPOLICY4 As String, LIFENCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nTypDurPay = 0, .nPay_time = 0, .nTypDurIns = 0, .nInsur_time = 0, .nXprem_time = 0, .nAge_limit = 0, .NAGE_REINSU = 0, .NAGE = 0, .nTypDurPayDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT LIFE.NTYPDURPAY, LIFE.NPAY_TIME, LIFE.NTYPDURINS, LIFE.NINSUR_TIME, LIFE.NXPREM_TIME, LIFE.NAGE_LIMIT, LIFE.NAGE_REINSU, LIFE.NAGE, TABLE5589.SDESCRIPT NTYPDURPAYDESC FROM LIFE LIFE LEFT JOIN TABLE5589 TABLE5589 ON TABLE5589.NTYPDUR = LIFE.NPAY_TIME  WHERE LIFE.SCERTYPE = @:LIFESCERTYPE1 AND LIFE.NBRANCH = @:LIFENBRANCH2 AND LIFE.NPRODUCT = @:LIFENPRODUCT3 AND LIFE.NPOLICY = @:LIFENPOLICY4 AND LIFE.NCERTIF = @:LIFENCERTIF5", "LIFE", "Linked.LatCombined")
                    .AddParameter("LIFESCERTYPE1", DbType.AnsiStringFixedLength, 0, (LIFESCERTYPE1 = String.Empty), LIFESCERTYPE1)
                    .AddParameter("LIFENBRANCH2", DbType.AnsiStringFixedLength, 0, (LIFENBRANCH2 = String.Empty), LIFENBRANCH2)
                    .AddParameter("LIFENPRODUCT3", DbType.AnsiStringFixedLength, 0, (LIFENPRODUCT3 = String.Empty), LIFENPRODUCT3)
                    .AddParameter("LIFENPOLICY4", DbType.AnsiStringFixedLength, 0, (LIFENPOLICY4 = String.Empty), LIFENPOLICY4)
                    .AddParameter("LIFENCERTIF5", DbType.AnsiStringFixedLength, 0, (LIFENCERTIF5 = String.Empty), LIFENCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nTypDurPay = itemData.NumericValue("NTYPDURPAY"), .nPay_time = itemData.NumericValue("NPAY_TIME"), .nTypDurIns = itemData.NumericValue("NTYPDURINS"), .nInsur_time = itemData.NumericValue("NINSUR_TIME"), .nXprem_time = itemData.NumericValue("NXPREM_TIME"), .nAge_limit = itemData.NumericValue("NAGE_LIMIT"), .NAGE_REINSU = itemData.NumericValue("NAGE_REINSU"), .NAGE = itemData.NumericValue("NAGE"), .nTypDurPayDesc = itemData.StringValue("NTYPDURPAYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LifeTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (LifeTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function LifeTblDataCount(LIFESCERTYPE1 As String, LIFENBRANCH2 As String, LIFENPRODUCT3 As String, LIFENPOLICY4 As String, LIFENCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT LIFE.NTYPDURPAY, LIFE.NPAY_TIME, LIFE.NTYPDURINS, LIFE.NINSUR_TIME, LIFE.NXPREM_TIME, LIFE.NAGE_LIMIT, LIFE.NAGE_REINSU, LIFE.NAGE, TABLE5589.SDESCRIPT NTYPDURPAYDESC FROM LIFE LIFE LEFT JOIN TABLE5589 TABLE5589 ON TABLE5589.NTYPDUR = LIFE.NPAY_TIME  WHERE LIFE.SCERTYPE = @:LIFESCERTYPE1 AND LIFE.NBRANCH = @:LIFENBRANCH2 AND LIFE.NPRODUCT = @:LIFENPRODUCT3 AND LIFE.NPOLICY = @:LIFENPOLICY4 AND LIFE.NCERTIF = @:LIFENCERTIF5)", "LIFE", "Linked.LatCombined")
                    .AddParameter("LIFESCERTYPE1", DbType.AnsiStringFixedLength, 0, (LIFESCERTYPE1 = String.Empty), LIFESCERTYPE1)
                    .AddParameter("LIFENBRANCH2", DbType.AnsiStringFixedLength, 0, (LIFENBRANCH2 = String.Empty), LIFENBRANCH2)
                    .AddParameter("LIFENPRODUCT3", DbType.AnsiStringFixedLength, 0, (LIFENPRODUCT3 = String.Empty), LIFENPRODUCT3)
                    .AddParameter("LIFENPOLICY4", DbType.AnsiStringFixedLength, 0, (LIFENPOLICY4 = String.Empty), LIFENPOLICY4)
                    .AddParameter("LIFENCERTIF5", DbType.AnsiStringFixedLength, 0, (LIFENCERTIF5 = String.Empty), LIFENCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LifeTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (LifeTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function LifeSelectCommandActionLIFE(LIFESCERTYPE1 As String, LIFENBRANCH2 As String, LIFENPRODUCT3 As String, LIFENPOLICY4 As String, LIFENCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(LIFE.NTYPDURPAY) COUNTDATA FROM LIFE LIFE LEFT JOIN TABLE5589 TABLE5589 ON TABLE5589.NTYPDUR = LIFE.NPAY_TIME  WHERE LIFE.SCERTYPE = @:LIFESCERTYPE1 AND LIFE.NBRANCH = @:LIFENBRANCH2 AND LIFE.NPRODUCT = @:LIFENPRODUCT3 AND LIFE.NPOLICY = @:LIFENPOLICY4 AND LIFE.NCERTIF = @:LIFENCERTIF5", "LIFE", "Linked.LatCombined")
                    .AddParameter("LIFESCERTYPE1", DbType.AnsiStringFixedLength, 0, (LIFESCERTYPE1 = String.Empty), LIFESCERTYPE1)
                    .AddParameter("LIFENBRANCH2", DbType.AnsiStringFixedLength, 0, (LIFENBRANCH2 = String.Empty), LIFENBRANCH2)
                    .AddParameter("LIFENPRODUCT3", DbType.AnsiStringFixedLength, 0, (LIFENPRODUCT3 = String.Empty), LIFENPRODUCT3)
                    .AddParameter("LIFENPOLICY4", DbType.AnsiStringFixedLength, 0, (LIFENPOLICY4 = String.Empty), LIFENPOLICY4)
                    .AddParameter("LIFENCERTIF5", DbType.AnsiStringFixedLength, 0, (LIFENCERTIF5 = String.Empty), LIFENCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LifeSelectCommandActionLIFE", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (LifeSelectCommandActionLIFE)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function THEFTTblDataLoad(THEFTSCERTYPE1 As String, THEFTNBRANCH2 As String, THEFTNPRODUCT3 As String, THEFTNPOLICY4 As String, THEFTNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.DSTARTDATE = Date.MinValue, .DEXPIRDAT = Date.MinValue, .NCOMMERGRP = 0, .SDESCBUSSI = String.Empty, .NINSURED = 0, .NEMPLOYEES = 0, .NAREA = 0, .NVIGILANCE = 0, .NCAPITAL = 0, .DNULLDATE = Date.MinValue, .NNULLCODE = 0, .NCOMMERGRPDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT THEFT.DSTARTDATE, THEFT.DEXPIRDAT, THEFT.NCOMMERGRP, THEFT.SDESCBUSSI, THEFT.NINSURED, THEFT.NEMPLOYEES, THEFT.NAREA, THEFT.NVIGILANCE, THEFT.NCAPITAL, THEFT.DNULLDATE, THEFT.NNULLCODE, BUSSKIND.SDESCRIPT NCOMMERGRPDESC FROM THEFT THEFT LEFT JOIN BUSSKIND BUSSKIND ON BUSSKIND.NCODKIND = THEFT.NCODKIND  AND BUSSKIND.NBUSINESSTY = THEFT.NBUSINESSTY  AND BUSSKIND.NCOMMERGRP = THEFT.NCOMMERGRP  WHERE THEFT.SCERTYPE = @:THEFTSCERTYPE1 AND THEFT.NBRANCH = @:THEFTNBRANCH2 AND THEFT.NPRODUCT = @:THEFTNPRODUCT3 AND THEFT.NPOLICY = @:THEFTNPOLICY4 AND THEFT.NCERTIF = @:THEFTNCERTIF5", "THEFT", "Linked.LatCombined")
                    .AddParameter("THEFTSCERTYPE1", DbType.AnsiStringFixedLength, 0, (THEFTSCERTYPE1 = String.Empty), THEFTSCERTYPE1)
                    .AddParameter("THEFTNBRANCH2", DbType.AnsiStringFixedLength, 0, (THEFTNBRANCH2 = String.Empty), THEFTNBRANCH2)
                    .AddParameter("THEFTNPRODUCT3", DbType.AnsiStringFixedLength, 0, (THEFTNPRODUCT3 = String.Empty), THEFTNPRODUCT3)
                    .AddParameter("THEFTNPOLICY4", DbType.AnsiStringFixedLength, 0, (THEFTNPOLICY4 = String.Empty), THEFTNPOLICY4)
                    .AddParameter("THEFTNCERTIF5", DbType.AnsiStringFixedLength, 0, (THEFTNCERTIF5 = String.Empty), THEFTNCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.DSTARTDATE = itemData.DateTimeValue("DSTARTDATE"), .DEXPIRDAT = itemData.DateTimeValue("DEXPIRDAT"), .NCOMMERGRP = itemData.NumericValue("NCOMMERGRP"), .SDESCBUSSI = itemData.StringValue("SDESCBUSSI"), .NINSURED = itemData.NumericValue("NINSURED"), .NEMPLOYEES = itemData.NumericValue("NEMPLOYEES"), .NAREA = itemData.NumericValue("NAREA"), .NVIGILANCE = itemData.NumericValue("NVIGILANCE"), .NCAPITAL = itemData.NumericValue("NCAPITAL"), .DNULLDATE = itemData.DateTimeValue("DNULLDATE"), .NNULLCODE = itemData.NumericValue("NNULLCODE"), .NCOMMERGRPDesc = itemData.StringValue("NCOMMERGRPDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "THEFTTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (THEFTTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function THEFTTblDataCount(THEFTSCERTYPE1 As String, THEFTNBRANCH2 As String, THEFTNPRODUCT3 As String, THEFTNPOLICY4 As String, THEFTNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT THEFT.DSTARTDATE, THEFT.DEXPIRDAT, THEFT.NCOMMERGRP, THEFT.SDESCBUSSI, THEFT.NINSURED, THEFT.NEMPLOYEES, THEFT.NAREA, THEFT.NVIGILANCE, THEFT.NCAPITAL, THEFT.DNULLDATE, THEFT.NNULLCODE, BUSSKIND.SDESCRIPT NCOMMERGRPDESC FROM THEFT THEFT LEFT JOIN BUSSKIND BUSSKIND ON BUSSKIND.NCODKIND = THEFT.NCODKIND  AND BUSSKIND.NBUSINESSTY = THEFT.NBUSINESSTY  AND BUSSKIND.NCOMMERGRP = THEFT.NCOMMERGRP  WHERE THEFT.SCERTYPE = @:THEFTSCERTYPE1 AND THEFT.NBRANCH = @:THEFTNBRANCH2 AND THEFT.NPRODUCT = @:THEFTNPRODUCT3 AND THEFT.NPOLICY = @:THEFTNPOLICY4 AND THEFT.NCERTIF = @:THEFTNCERTIF5)", "THEFT", "Linked.LatCombined")
                    .AddParameter("THEFTSCERTYPE1", DbType.AnsiStringFixedLength, 0, (THEFTSCERTYPE1 = String.Empty), THEFTSCERTYPE1)
                    .AddParameter("THEFTNBRANCH2", DbType.AnsiStringFixedLength, 0, (THEFTNBRANCH2 = String.Empty), THEFTNBRANCH2)
                    .AddParameter("THEFTNPRODUCT3", DbType.AnsiStringFixedLength, 0, (THEFTNPRODUCT3 = String.Empty), THEFTNPRODUCT3)
                    .AddParameter("THEFTNPOLICY4", DbType.AnsiStringFixedLength, 0, (THEFTNPOLICY4 = String.Empty), THEFTNPOLICY4)
                    .AddParameter("THEFTNCERTIF5", DbType.AnsiStringFixedLength, 0, (THEFTNCERTIF5 = String.Empty), THEFTNCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "THEFTTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (THEFTTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function THEFTSelectCommandActionTHEFT(THEFTSCERTYPE1 As String, THEFTNBRANCH2 As String, THEFTNPRODUCT3 As String, THEFTNPOLICY4 As String, THEFTNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(THEFT.NCOMMERGRP) COUNTDATA FROM THEFT THEFT LEFT JOIN BUSSKIND BUSSKIND ON BUSSKIND.NCODKIND = THEFT.NCODKIND  AND BUSSKIND.NBUSINESSTY = THEFT.NBUSINESSTY  AND BUSSKIND.NCOMMERGRP = THEFT.NCOMMERGRP  WHERE THEFT.SCERTYPE = @:THEFTSCERTYPE1 AND THEFT.NBRANCH = @:THEFTNBRANCH2 AND THEFT.NPRODUCT = @:THEFTNPRODUCT3 AND THEFT.NPOLICY = @:THEFTNPOLICY4 AND THEFT.NCERTIF = @:THEFTNCERTIF5", "THEFT", "Linked.LatCombined")
                    .AddParameter("THEFTSCERTYPE1", DbType.AnsiStringFixedLength, 0, (THEFTSCERTYPE1 = String.Empty), THEFTSCERTYPE1)
                    .AddParameter("THEFTNBRANCH2", DbType.AnsiStringFixedLength, 0, (THEFTNBRANCH2 = String.Empty), THEFTNBRANCH2)
                    .AddParameter("THEFTNPRODUCT3", DbType.AnsiStringFixedLength, 0, (THEFTNPRODUCT3 = String.Empty), THEFTNPRODUCT3)
                    .AddParameter("THEFTNPOLICY4", DbType.AnsiStringFixedLength, 0, (THEFTNPOLICY4 = String.Empty), THEFTNPOLICY4)
                    .AddParameter("THEFTNCERTIF5", DbType.AnsiStringFixedLength, 0, (THEFTNCERTIF5 = String.Empty), THEFTNCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "THEFTSelectCommandActionTHEFT", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (THEFTSelectCommandActionTHEFT)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function FINANCIAL_INSTRUMENTSTblDataLoad(FINANCIALINSTRUMENTSSCERTYPE1 As String, FINANCIALINSTRUMENTSNBRANCH2 As String, FINANCIALINSTRUMENTSNPRODUCT3 As String, FINANCIALINSTRUMENTSNPOLICY4 As String, FINANCIALINSTRUMENTSNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NCONSECUTIVE = 0, .NINSTRUMENT_TY = 0, .NBANK_CODE = 0, .NCARD_TYPE = 0, .SNUMBER = String.Empty, .DCARDEXPIR = Date.MinValue, .DSTARTDATE = Date.MinValue, .DTERM_DATE = Date.MinValue, .NQUOTA = 0, .NAMOUNT = 0, .NCURRENCY = 0, .NINSTRUMENT_TYDesc = String.Empty, .NBANK_CODEDesc = String.Empty, .NCARD_TYPEDesc = String.Empty, .NCURRENCYDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactoryinked.LatCombined")
                    .AddParameter("FINANCIAL_INSTRUMENTSSCERTYPE1", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSSCERTYPE1 = String.Empty), FINANCIALINSTRUMENTSSCERTYPE1)
                    .AddParameter("FINANCIAL_INSTRUMENTSNBRANCH2", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSNBRANCH2 = String.Empty), FINANCIALINSTRUMENTSNBRANCH2)
                    .AddParameter("FINANCIAL_INSTRUMENTSNPRODUCT3", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSNPRODUCT3 = String.Empty), FINANCIALINSTRUMENTSNPRODUCT3)
                    .AddParameter("FINANCIAL_INSTRUMENTSNPOLICY4", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSNPOLICY4 = String.Empty), FINANCIALINSTRUMENTSNPOLICY4)
                    .AddParameter("FINANCIAL_INSTRUMENTSNCERTIF5", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSNCERTIF5 = String.Empty), FINANCIALINSTRUMENTSNCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NCONSECUTIVE = itemData.NumericValue("NCONSECUTIVE"), .NINSTRUMENT_TY = itemData.NumericValue("NINSTRUMENT_TY"), .NBANK_CODE = itemData.NumericValue("NBANK_CODE"), .NCARD_TYPE = itemData.NumericValue("NCARD_TYPE"), .SNUMBER = itemData.StringValue("SNUMBER"), .DCARDEXPIR = itemData.DateTimeValue("DCARDEXPIR"), .DSTARTDATE = itemData.DateTimeValue("DSTARTDATE"), .DTERM_DATE = itemData.DateTimeValue("DTERM_DATE"), .NQUOTA = itemData.NumericValue("NQUOTA"), .NAMOUNT = itemData.NumericValue("NAMOUNT"), .NCURRENCY = itemData.NumericValue("NCURRENCY"), .NINSTRUMENT_TYDesc = itemData.StringValue("NINSTRUMENT_TYDESC"), .NBANK_CODEDesc = itemData.StringValue("NBANK_CODEDESC"), .NCARD_TYPEDesc = itemData.StringValue("NCARD_TYPEDESC"), .NCURRENCYDesc = itemData.StringValue("NCURRENCYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "FINANCIAL_INSTRUMENTSTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (FINANCIAL_INSTRUMENTSTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function FINANCIAL_INSTRUMENTSTblDataCount(FINANCIALINSTRUMENTSSCERTYPE1 As String, FINANCIALINSTRUMENTSNBRANCH2 As String, FINANCIALINSTRUMENTSNPRODUCT3 As String, FINANCIALINSTRUMENTSNPOLICY4 As String, FINANCIALINSTRUMENTSNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactoryinked.LatCombined")
                    .AddParameter("FINANCIAL_INSTRUMENTSSCERTYPE1", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSSCERTYPE1 = String.Empty), FINANCIALINSTRUMENTSSCERTYPE1)
                    .AddParameter("FINANCIAL_INSTRUMENTSNBRANCH2", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSNBRANCH2 = String.Empty), FINANCIALINSTRUMENTSNBRANCH2)
                    .AddParameter("FINANCIAL_INSTRUMENTSNPRODUCT3", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSNPRODUCT3 = String.Empty), FINANCIALINSTRUMENTSNPRODUCT3)
                    .AddParameter("FINANCIAL_INSTRUMENTSNPOLICY4", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSNPOLICY4 = String.Empty), FINANCIALINSTRUMENTSNPOLICY4)
                    .AddParameter("FINANCIAL_INSTRUMENTSNCERTIF5", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSNCERTIF5 = String.Empty), FINANCIALINSTRUMENTSNCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "FINANCIAL_INSTRUMENTSTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (FINANCIAL_INSTRUMENTSTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function FINANCIAL_INSTRUMENTSSelectCommandActionFINANCIAL_INSTRUMENTS(FINANCIALINSTRUMENTSSCERTYPE1 As String, FINANCIALINSTRUMENTSNBRANCH2 As String, FINANCIALINSTRUMENTSNPRODUCT3 As String, FINANCIALINSTRUMENTSNPOLICY4 As String, FINANCIALINSTRUMENTSNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(FINANCIAL_INSTRUMENTS.NCONSECUTIVE) COUNTDATA FROM FINANCIAL_INSTRUMENTS FINANCIAL_INSTRUMENTS LEFT JOIN TABLE5539 TABLE5539 ON TABLE5539.NINSTRUMENT_TY = FINANCIAL_INSTRUMENTS.NINSTRUMENT_TY LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = FINANCIAL_INSTRUMENTS.NBANK_CODE LEFT JOIN TABLE183 TABLE183 ON TABLE183.NCARD_TYPE = FINANCIAL_INSTRUMENTS.NCARD_TYPE LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = FINANCIAL_INSTRUMENTS.NCURRENCY  WHERE FINANCIAL_INSTRUMENTS.SCERTYPE = @:FINANCIAL_INSTRUMENTSSCERTYPE1 AND FINANCIAL_INSTRUMENTS.NBRANCH = @:FINANCIAL_INSTRUMENTSNBRANCH2 AND FINANCIAL_INSTRUMENTS.NPRODUCT = @:FINANCIAL_INSTRUMENTSNPRODUCT3 AND FINANCIAL_INSTRUMENTS.NPOLICY = @:FINANCIAL_INSTRUMENTSNPOLICY4 AND FINANCIAL_INSTRUMENTS.NCERTIF = @:FINANCIAL_INSTRUMENTSNCERTIF5", "FINANCIAL_INSTRUMENTS", "Linked.LatCombined")
                    .AddParameter("FINANCIAL_INSTRUMENTSSCERTYPE1", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSSCERTYPE1 = String.Empty), FINANCIALINSTRUMENTSSCERTYPE1)
                    .AddParameter("FINANCIAL_INSTRUMENTSNBRANCH2", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSNBRANCH2 = String.Empty), FINANCIALINSTRUMENTSNBRANCH2)
                    .AddParameter("FINANCIAL_INSTRUMENTSNPRODUCT3", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSNPRODUCT3 = String.Empty), FINANCIALINSTRUMENTSNPRODUCT3)
                    .AddParameter("FINANCIAL_INSTRUMENTSNPOLICY4", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSNPOLICY4 = String.Empty), FINANCIALINSTRUMENTSNPOLICY4)
                    .AddParameter("FINANCIAL_INSTRUMENTSNCERTIF5", DbType.AnsiStringFixedLength, 0, (FINANCIALINSTRUMENTSNCERTIF5 = String.Empty), FINANCIALINSTRUMENTSNCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "FINANCIAL_INSTRUMENTSSelectCommandActionFINANCIAL_INSTRUMENTS", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (FINANCIAL_INSTRUMENTSSelectCommandActionFINANCIAL_INSTRUMENTS)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function HEALTHTblDataLoad(HEALTHSCERTYPE1 As String, HEALTHNBRANCH2 As String, HEALTHNPRODUCT3 As String, HEALTHNPOLICY4 As String, HEALTHNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.DEFFECDATE = Date.MinValue, .DEXPIRDAT = Date.MinValue, .NCAPITAL = 0, .NPREMIUM = 0, .SCERTYPE = String.Empty, .NBRANCH = 0, .NPRODUCT = 0, .NPOLICY = 0, .NCERTIF = 0}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT HEALTH.DEFFECDATE, HEALTH.DEXPIRDAT, HEALTH.NCAPITAL, HEALTH.NPREMIUM, HEALTH.SCERTYPE, HEALTH.NBRANCH, HEALTH.NPRODUCT, HEALTH.NPOLICY, HEALTH.NCERTIF FROM HEALTH HEALTH  WHERE HEALTH.SCERTYPE = @:HEALTHSCERTYPE1 AND HEALTH.NBRANCH = @:HEALTHNBRANCH2 AND HEALTH.NPRODUCT = @:HEALTHNPRODUCT3 AND HEALTH.NPOLICY = @:HEALTHNPOLICY4 AND HEALTH.NCERTIF = @:HEALTHNCERTIF5", "HEALTH", "Linked.LatCombined")
                    .AddParameter("HEALTHSCERTYPE1", DbType.AnsiStringFixedLength, 0, (HEALTHSCERTYPE1 = String.Empty), HEALTHSCERTYPE1)
                    .AddParameter("HEALTHNBRANCH2", DbType.AnsiStringFixedLength, 0, (HEALTHNBRANCH2 = String.Empty), HEALTHNBRANCH2)
                    .AddParameter("HEALTHNPRODUCT3", DbType.AnsiStringFixedLength, 0, (HEALTHNPRODUCT3 = String.Empty), HEALTHNPRODUCT3)
                    .AddParameter("HEALTHNPOLICY4", DbType.AnsiStringFixedLength, 0, (HEALTHNPOLICY4 = String.Empty), HEALTHNPOLICY4)
                    .AddParameter("HEALTHNCERTIF5", DbType.AnsiStringFixedLength, 0, (HEALTHNCERTIF5 = String.Empty), HEALTHNCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.DEFFECDATE = itemData.DateTimeValue("DEFFECDATE"), .DEXPIRDAT = itemData.DateTimeValue("DEXPIRDAT"), .NCAPITAL = itemData.NumericValue("NCAPITAL"), .NPREMIUM = itemData.NumericValue("NPREMIUM"), .SCERTYPE = itemData.StringValue("SCERTYPE"), .NBRANCH = itemData.NumericValue("NBRANCH"), .NPRODUCT = itemData.NumericValue("NPRODUCT"), .NPOLICY = itemData.NumericValue("NPOLICY"), .NCERTIF = itemData.NumericValue("NCERTIF")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "HEALTHTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (HEALTHTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function HEALTHTblDataCount(HEALTHSCERTYPE1 As String, HEALTHNBRANCH2 As String, HEALTHNPRODUCT3 As String, HEALTHNPOLICY4 As String, HEALTHNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT HEALTH.DEFFECDATE, HEALTH.DEXPIRDAT, HEALTH.NCAPITAL, HEALTH.NPREMIUM, HEALTH.SCERTYPE, HEALTH.NBRANCH, HEALTH.NPRODUCT, HEALTH.NPOLICY, HEALTH.NCERTIF FROM HEALTH HEALTH  WHERE HEALTH.SCERTYPE = @:HEALTHSCERTYPE1 AND HEALTH.NBRANCH = @:HEALTHNBRANCH2 AND HEALTH.NPRODUCT = @:HEALTHNPRODUCT3 AND HEALTH.NPOLICY = @:HEALTHNPOLICY4 AND HEALTH.NCERTIF = @:HEALTHNCERTIF5)", "HEALTH", "Linked.LatCombined")
                    .AddParameter("HEALTHSCERTYPE1", DbType.AnsiStringFixedLength, 0, (HEALTHSCERTYPE1 = String.Empty), HEALTHSCERTYPE1)
                    .AddParameter("HEALTHNBRANCH2", DbType.AnsiStringFixedLength, 0, (HEALTHNBRANCH2 = String.Empty), HEALTHNBRANCH2)
                    .AddParameter("HEALTHNPRODUCT3", DbType.AnsiStringFixedLength, 0, (HEALTHNPRODUCT3 = String.Empty), HEALTHNPRODUCT3)
                    .AddParameter("HEALTHNPOLICY4", DbType.AnsiStringFixedLength, 0, (HEALTHNPOLICY4 = String.Empty), HEALTHNPOLICY4)
                    .AddParameter("HEALTHNCERTIF5", DbType.AnsiStringFixedLength, 0, (HEALTHNCERTIF5 = String.Empty), HEALTHNCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "HEALTHTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (HEALTHTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function HEALTHSelectCommandActionHEALTH(HEALTHSCERTYPE1 As String, HEALTHNBRANCH2 As String, HEALTHNPRODUCT3 As String, HEALTHNPOLICY4 As String, HEALTHNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(HEALTH.NCAPITAL) COUNTDATA FROM HEALTH HEALTH  WHERE HEALTH.SCERTYPE = @:HEALTHSCERTYPE1 AND HEALTH.NBRANCH = @:HEALTHNBRANCH2 AND HEALTH.NPRODUCT = @:HEALTHNPRODUCT3 AND HEALTH.NPOLICY = @:HEALTHNPOLICY4 AND HEALTH.NCERTIF = @:HEALTHNCERTIF5", "HEALTH", "Linked.LatCombined")
                    .AddParameter("HEALTHSCERTYPE1", DbType.AnsiStringFixedLength, 0, (HEALTHSCERTYPE1 = String.Empty), HEALTHSCERTYPE1)
                    .AddParameter("HEALTHNBRANCH2", DbType.AnsiStringFixedLength, 0, (HEALTHNBRANCH2 = String.Empty), HEALTHNBRANCH2)
                    .AddParameter("HEALTHNPRODUCT3", DbType.AnsiStringFixedLength, 0, (HEALTHNPRODUCT3 = String.Empty), HEALTHNPRODUCT3)
                    .AddParameter("HEALTHNPOLICY4", DbType.AnsiStringFixedLength, 0, (HEALTHNPOLICY4 = String.Empty), HEALTHNPOLICY4)
                    .AddParameter("HEALTHNCERTIF5", DbType.AnsiStringFixedLength, 0, (HEALTHNCERTIF5 = String.Empty), HEALTHNCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "HEALTHSelectCommandActionHEALTH", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (HEALTHSelectCommandActionHEALTH)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ROLES2TblDataLoad(ROLESSCERTYPE3 As String, ROLESNBRANCH4 As Decimal, ROLESNPRODUCT5 As Decimal, ROLESNPOLICY6 As Decimal, ROLESNCERTIF7 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NROLE = 0, .SCLIENAME = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT ROLES.NROLE, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM ROLES ROLES JOIN CLIENT CLIENT ON CLIENT.SCLIENT = ROLES.SCLIENT  WHERE ROLES.NROLE <> 1 AND ROLES.NROLE <> 13 AND ROLES.SCERTYPE = @:ROLESSCERTYPE3 AND ROLES.NBRANCH = @:ROLESNBRANCH4 AND ROLES.NPRODUCT = @:ROLESNPRODUCT5 AND ROLES.NPOLICY = @:ROLESNPOLICY6 AND ROLES.NCERTIF = @:ROLESNCERTIF7", "ROLES", "Linked.LatCombined")
                    .AddParameter("ROLESSCERTYPE3", DbType.AnsiStringFixedLength, 0, (ROLESSCERTYPE3 = String.Empty), ROLESSCERTYPE3)
                    .AddParameter("ROLESNBRANCH4", DbType.Decimal, 0, False, ROLESNBRANCH4)
                    .AddParameter("ROLESNPRODUCT5", DbType.Decimal, 0, False, ROLESNPRODUCT5)
                    .AddParameter("ROLESNPOLICY6", DbType.Decimal, 0, False, ROLESNPOLICY6)
                    .AddParameter("ROLESNCERTIF7", DbType.Decimal, 0, False, ROLESNCERTIF7)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NROLE = itemData.NumericValue("NROLE"), .SCLIENAME = itemData.StringValue("SCLIENAME")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ROLES2TblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ROLES2TblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ROLES2TblDataCount(ROLESSCERTYPE3 As String, ROLESNBRANCH4 As Decimal, ROLESNPRODUCT5 As Decimal, ROLESNPOLICY6 As Decimal, ROLESNCERTIF7 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT ROLES.NROLE, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM ROLES ROLES JOIN CLIENT CLIENT ON CLIENT.SCLIENT = ROLES.SCLIENT  WHERE ROLES.NROLE <> 1 AND ROLES.NROLE <> 13 AND ROLES.SCERTYPE = @:ROLESSCERTYPE3 AND ROLES.NBRANCH = @:ROLESNBRANCH4 AND ROLES.NPRODUCT = @:ROLESNPRODUCT5 AND ROLES.NPOLICY = @:ROLESNPOLICY6 AND ROLES.NCERTIF = @:ROLESNCERTIF7)", "ROLES", "Linked.LatCombined")
                    .AddParameter("ROLESSCERTYPE3", DbType.AnsiStringFixedLength, 0, (ROLESSCERTYPE3 = String.Empty), ROLESSCERTYPE3)
                    .AddParameter("ROLESNBRANCH4", DbType.Decimal, 0, False, ROLESNBRANCH4)
                    .AddParameter("ROLESNPRODUCT5", DbType.Decimal, 0, False, ROLESNPRODUCT5)
                    .AddParameter("ROLESNPOLICY6", DbType.Decimal, 0, False, ROLESNPOLICY6)
                    .AddParameter("ROLESNCERTIF7", DbType.Decimal, 0, False, ROLESNCERTIF7)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ROLES2TblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ROLES2TblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function ROLES2SelectCommandActionROLES(ROLESSCERTYPE3 As String, ROLESNBRANCH4 As Decimal, ROLESNPRODUCT5 As Decimal, ROLESNPOLICY6 As Decimal, ROLESNCERTIF7 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(ROLES.NROLE) COUNTDATA FROM ROLES ROLES JOIN CLIENT CLIENT ON CLIENT.SCLIENT = ROLES.SCLIENT  WHERE ROLES.NROLE <> 1 AND ROLES.NROLE <> 13 AND ROLES.SCERTYPE = @:ROLESSCERTYPE3 AND ROLES.NBRANCH = @:ROLESNBRANCH4 AND ROLES.NPRODUCT = @:ROLESNPRODUCT5 AND ROLES.NPOLICY = @:ROLESNPOLICY6 AND ROLES.NCERTIF = @:ROLESNCERTIF7", "ROLES", "Linked.LatCombined")
                    .AddParameter("ROLESSCERTYPE3", DbType.AnsiStringFixedLength, 0, (ROLESSCERTYPE3 = String.Empty), ROLESSCERTYPE3)
                    .AddParameter("ROLESNBRANCH4", DbType.Decimal, 0, False, ROLESNBRANCH4)
                    .AddParameter("ROLESNPRODUCT5", DbType.Decimal, 0, False, ROLESNPRODUCT5)
                    .AddParameter("ROLESNPOLICY6", DbType.Decimal, 0, False, ROLESNPOLICY6)
                    .AddParameter("ROLESNCERTIF7", DbType.Decimal, 0, False, ROLESNCERTIF7)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ROLES2SelectCommandActionROLES", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ROLES2SelectCommandActionROLES)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function BENEFICIARTblDataLoad(BENEFICIARSCERTYPE1 As String, BENEFICIARNBRANCH2 As Decimal, BENEFICIARNPRODUCT3 As Decimal, BENEFICIARNPOLICY4 As Decimal, BENEFICIARNCERTIF5 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nModulec = 0, .nCover = 0, .nRelation = 0, .sIrrevoc = String.Empty, .nParticip = 0, .SCLIENAME = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT BENEFICIAR.NMODULEC, BENEFICIAR.NCOVER, BENEFICIAR.NRELATION, BENEFICIAR.SIRREVOC, BENEFICIAR.NPARTICIP, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM BENEFICIAR BENEFICIAR JOIN CLIENT CLIENT ON CLIENT.SCLIENT = BENEFICIAR.SCLIENT  WHERE BENEFICIAR.SCERTYPE = @:BENEFICIARSCERTYPE1 AND BENEFICIAR.NBRANCH = @:BENEFICIARNBRANCH2 AND BENEFICIAR.NPRODUCT = @:BENEFICIARNPRODUCT3 AND BENEFICIAR.NPOLICY = @:BENEFICIARNPOLICY4 AND BENEFICIAR.NCERTIF = @:BENEFICIARNCERTIF5", "BENEFICIAR", "Linked.LatCombined")
                    .AddParameter("BENEFICIARSCERTYPE1", DbType.AnsiStringFixedLength, 0, (BENEFICIARSCERTYPE1 = String.Empty), BENEFICIARSCERTYPE1)
                    .AddParameter("BENEFICIARNBRANCH2", DbType.Decimal, 0, False, BENEFICIARNBRANCH2)
                    .AddParameter("BENEFICIARNPRODUCT3", DbType.Decimal, 0, False, BENEFICIARNPRODUCT3)
                    .AddParameter("BENEFICIARNPOLICY4", DbType.Decimal, 0, False, BENEFICIARNPOLICY4)
                    .AddParameter("BENEFICIARNCERTIF5", DbType.Decimal, 0, False, BENEFICIARNCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nModulec = itemData.NumericValue("NMODULEC"), .nCover = itemData.NumericValue("NCOVER"), .nRelation = itemData.NumericValue("NRELATION"), .sIrrevoc = itemData.StringValue("SIRREVOC"), .nParticip = itemData.NumericValue("NPARTICIP"), .SCLIENAME = itemData.StringValue("SCLIENAME")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "BENEFICIARTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (BENEFICIARTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function BENEFICIARTblDataCount(BENEFICIARSCERTYPE1 As String, BENEFICIARNBRANCH2 As Decimal, BENEFICIARNPRODUCT3 As Decimal, BENEFICIARNPOLICY4 As Decimal, BENEFICIARNCERTIF5 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT BENEFICIAR.NMODULEC, BENEFICIAR.NCOVER, BENEFICIAR.NRELATION, BENEFICIAR.SIRREVOC, BENEFICIAR.NPARTICIP, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM BENEFICIAR BENEFICIAR JOIN CLIENT CLIENT ON CLIENT.SCLIENT = BENEFICIAR.SCLIENT  WHERE BENEFICIAR.SCERTYPE = @:BENEFICIARSCERTYPE1 AND BENEFICIAR.NBRANCH = @:BENEFICIARNBRANCH2 AND BENEFICIAR.NPRODUCT = @:BENEFICIARNPRODUCT3 AND BENEFICIAR.NPOLICY = @:BENEFICIARNPOLICY4 AND BENEFICIAR.NCERTIF = @:BENEFICIARNCERTIF5)", "BENEFICIAR", "Linked.LatCombined")
                    .AddParameter("BENEFICIARSCERTYPE1", DbType.AnsiStringFixedLength, 0, (BENEFICIARSCERTYPE1 = String.Empty), BENEFICIARSCERTYPE1)
                    .AddParameter("BENEFICIARNBRANCH2", DbType.Decimal, 0, False, BENEFICIARNBRANCH2)
                    .AddParameter("BENEFICIARNPRODUCT3", DbType.Decimal, 0, False, BENEFICIARNPRODUCT3)
                    .AddParameter("BENEFICIARNPOLICY4", DbType.Decimal, 0, False, BENEFICIARNPOLICY4)
                    .AddParameter("BENEFICIARNCERTIF5", DbType.Decimal, 0, False, BENEFICIARNCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "BENEFICIARTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (BENEFICIARTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function BENEFICIARSelectCommandActionBENEFICIAR(BENEFICIARSCERTYPE1 As String, BENEFICIARNBRANCH2 As Decimal, BENEFICIARNPRODUCT3 As Decimal, BENEFICIARNPOLICY4 As Decimal, BENEFICIARNCERTIF5 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(BENEFICIAR.NMODULEC) COUNTDATA FROM BENEFICIAR BENEFICIAR JOIN CLIENT CLIENT ON CLIENT.SCLIENT = BENEFICIAR.SCLIENT  WHERE BENEFICIAR.SCERTYPE = @:BENEFICIARSCERTYPE1 AND BENEFICIAR.NBRANCH = @:BENEFICIARNBRANCH2 AND BENEFICIAR.NPRODUCT = @:BENEFICIARNPRODUCT3 AND BENEFICIAR.NPOLICY = @:BENEFICIARNPOLICY4 AND BENEFICIAR.NCERTIF = @:BENEFICIARNCERTIF5", "BENEFICIAR", "Linked.LatCombined")
                    .AddParameter("BENEFICIARSCERTYPE1", DbType.AnsiStringFixedLength, 0, (BENEFICIARSCERTYPE1 = String.Empty), BENEFICIARSCERTYPE1)
                    .AddParameter("BENEFICIARNBRANCH2", DbType.Decimal, 0, False, BENEFICIARNBRANCH2)
                    .AddParameter("BENEFICIARNPRODUCT3", DbType.Decimal, 0, False, BENEFICIARNPRODUCT3)
                    .AddParameter("BENEFICIARNPOLICY4", DbType.Decimal, 0, False, BENEFICIARNPOLICY4)
                    .AddParameter("BENEFICIARNCERTIF5", DbType.Decimal, 0, False, BENEFICIARNCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "BENEFICIARSelectCommandActionBENEFICIAR", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (BENEFICIARSelectCommandActionBENEFICIAR)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ClauseTblDataLoad(CLAUSESCERTYPE1 As String, CLAUSENBRANCH2 As String, CLAUSENPRODUCT3 As String, CLAUSENPOLICY4 As String, CLAUSENCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nClause = 0, .nNotenum = 0}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLAUSE.NCLAUSE, CLAUSE.NNOTENUM FROM CLAUSE CLAUSE  WHERE CLAUSE.SCERTYPE = @:CLAUSESCERTYPE1 AND CLAUSE.NBRANCH = @:CLAUSENBRANCH2 AND CLAUSE.NPRODUCT = @:CLAUSENPRODUCT3 AND CLAUSE.NPOLICY = @:CLAUSENPOLICY4 AND CLAUSE.NCERTIF = @:CLAUSENCERTIF5", "CLAUSE", "Linked.LatCombined")
                    .AddParameter("CLAUSESCERTYPE1", DbType.AnsiStringFixedLength, 0, (CLAUSESCERTYPE1 = String.Empty), CLAUSESCERTYPE1)
                    .AddParameter("CLAUSENBRANCH2", DbType.AnsiStringFixedLength, 0, (CLAUSENBRANCH2 = String.Empty), CLAUSENBRANCH2)
                    .AddParameter("CLAUSENPRODUCT3", DbType.AnsiStringFixedLength, 0, (CLAUSENPRODUCT3 = String.Empty), CLAUSENPRODUCT3)
                    .AddParameter("CLAUSENPOLICY4", DbType.AnsiStringFixedLength, 0, (CLAUSENPOLICY4 = String.Empty), CLAUSENPOLICY4)
                    .AddParameter("CLAUSENCERTIF5", DbType.AnsiStringFixedLength, 0, (CLAUSENCERTIF5 = String.Empty), CLAUSENCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nClause = itemData.NumericValue("NCLAUSE"), .nNotenum = itemData.NumericValue("NNOTENUM")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ClauseTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ClauseTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ClauseTblDataCount(CLAUSESCERTYPE1 As String, CLAUSENBRANCH2 As String, CLAUSENPRODUCT3 As String, CLAUSENPOLICY4 As String, CLAUSENCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLAUSE.NCLAUSE, CLAUSE.NNOTENUM FROM CLAUSE CLAUSE  WHERE CLAUSE.SCERTYPE = @:CLAUSESCERTYPE1 AND CLAUSE.NBRANCH = @:CLAUSENBRANCH2 AND CLAUSE.NPRODUCT = @:CLAUSENPRODUCT3 AND CLAUSE.NPOLICY = @:CLAUSENPOLICY4 AND CLAUSE.NCERTIF = @:CLAUSENCERTIF5)", "CLAUSE", "Linked.LatCombined")
                    .AddParameter("CLAUSESCERTYPE1", DbType.AnsiStringFixedLength, 0, (CLAUSESCERTYPE1 = String.Empty), CLAUSESCERTYPE1)
                    .AddParameter("CLAUSENBRANCH2", DbType.AnsiStringFixedLength, 0, (CLAUSENBRANCH2 = String.Empty), CLAUSENBRANCH2)
                    .AddParameter("CLAUSENPRODUCT3", DbType.AnsiStringFixedLength, 0, (CLAUSENPRODUCT3 = String.Empty), CLAUSENPRODUCT3)
                    .AddParameter("CLAUSENPOLICY4", DbType.AnsiStringFixedLength, 0, (CLAUSENPOLICY4 = String.Empty), CLAUSENPOLICY4)
                    .AddParameter("CLAUSENCERTIF5", DbType.AnsiStringFixedLength, 0, (CLAUSENCERTIF5 = String.Empty), CLAUSENCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ClauseTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ClauseTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function ClauseSelectCommandActionCLAUSE(CLAUSESCERTYPE1 As String, CLAUSENBRANCH2 As String, CLAUSENPRODUCT3 As String, CLAUSENPOLICY4 As String, CLAUSENCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CLAUSE.NCLAUSE) COUNTDATA FROM CLAUSE CLAUSE  WHERE CLAUSE.SCERTYPE = @:CLAUSESCERTYPE1 AND CLAUSE.NBRANCH = @:CLAUSENBRANCH2 AND CLAUSE.NPRODUCT = @:CLAUSENPRODUCT3 AND CLAUSE.NPOLICY = @:CLAUSENPOLICY4 AND CLAUSE.NCERTIF = @:CLAUSENCERTIF5", "CLAUSE", "Linked.LatCombined")
                    .AddParameter("CLAUSESCERTYPE1", DbType.AnsiStringFixedLength, 0, (CLAUSESCERTYPE1 = String.Empty), CLAUSESCERTYPE1)
                    .AddParameter("CLAUSENBRANCH2", DbType.AnsiStringFixedLength, 0, (CLAUSENBRANCH2 = String.Empty), CLAUSENBRANCH2)
                    .AddParameter("CLAUSENPRODUCT3", DbType.AnsiStringFixedLength, 0, (CLAUSENPRODUCT3 = String.Empty), CLAUSENPRODUCT3)
                    .AddParameter("CLAUSENPOLICY4", DbType.AnsiStringFixedLength, 0, (CLAUSENPOLICY4 = String.Empty), CLAUSENPOLICY4)
                    .AddParameter("CLAUSENCERTIF5", DbType.AnsiStringFixedLength, 0, (CLAUSENCERTIF5 = String.Empty), CLAUSENCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ClauseSelectCommandActionCLAUSE", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ClauseSelectCommandActionCLAUSE)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function POLICY_HISTblDataLoad(POLICYHISSCERTYPE1 As String, POLICYHISNBRANCH2 As String, POLICYHISNPRODUCT3 As String, POLICYHISNPOLICY4 As String, POLICYHISNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NMOVEMENT = 0, .NTYPE_HIST = 0, .DEFFECDATE = Date.MinValue, .NTRANSACTIO = 0, .NRECEIPT = 0, .SNULL_MOVE = String.Empty, .DNULLDATE = Date.MinValue, .NTYPE_HISTDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT POLICY_HIS.NMOVEMENT, POLICY_HIS.NTYPE_HIST, POLICY_HIS.DEFFECDATE, POLICY_HIS.NTRANSACTIO, POLICY_HIS.NRECEIPT, POLICY_HIS.SNULL_MOVE, POLICY_HIS.DNULLDATE, TABLE165.SDESCRIPT NTYPE_HISTDESC FROM POLICY_HIS POLICY_HIS LEFT JOIN TABLE165 TABLE165 ON TABLE165.NTYPE_HIST = POLICY_HIS.NTYPE_HIST  WHERE POLICY_HIS.SCERTYPE = @:POLICY_HISSCERTYPE1 AND POLICY_HIS.NBRANCH = @:POLICY_HISNBRANCH2 AND POLICY_HIS.NPRODUCT = @:POLICY_HISNPRODUCT3 AND POLICY_HIS.NPOLICY = @:POLICY_HISNPOLICY4 AND POLICY_HIS.NCERTIF = @:POLICY_HISNCERTIF5", "POLICY_HIS", "Linked.LatCombined")
                    .AddParameter("POLICY_HISSCERTYPE1", DbType.AnsiStringFixedLength, 0, (POLICYHISSCERTYPE1 = String.Empty), POLICYHISSCERTYPE1)
                    .AddParameter("POLICY_HISNBRANCH2", DbType.AnsiStringFixedLength, 0, (POLICYHISNBRANCH2 = String.Empty), POLICYHISNBRANCH2)
                    .AddParameter("POLICY_HISNPRODUCT3", DbType.AnsiStringFixedLength, 0, (POLICYHISNPRODUCT3 = String.Empty), POLICYHISNPRODUCT3)
                    .AddParameter("POLICY_HISNPOLICY4", DbType.AnsiStringFixedLength, 0, (POLICYHISNPOLICY4 = String.Empty), POLICYHISNPOLICY4)
                    .AddParameter("POLICY_HISNCERTIF5", DbType.AnsiStringFixedLength, 0, (POLICYHISNCERTIF5 = String.Empty), POLICYHISNCERTIF5)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NMOVEMENT = itemData.NumericValue("NMOVEMENT"), .NTYPE_HIST = itemData.NumericValue("NTYPE_HIST"), .DEFFECDATE = itemData.DateTimeValue("DEFFECDATE"), .NTRANSACTIO = itemData.NumericValue("NTRANSACTIO"), .NRECEIPT = itemData.NumericValue("NRECEIPT"), .SNULL_MOVE = itemData.StringValue("SNULL_MOVE"), .DNULLDATE = itemData.DateTimeValue("DNULLDATE"), .NTYPE_HISTDesc = itemData.StringValue("NTYPE_HISTDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "POLICY_HISTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (POLICY_HISTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function POLICY_HISTblDataCount(POLICYHISSCERTYPE1 As String, POLICYHISNBRANCH2 As String, POLICYHISNPRODUCT3 As String, POLICYHISNPOLICY4 As String, POLICYHISNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT POLICY_HIS.NMOVEMENT, POLICY_HIS.NTYPE_HIST, POLICY_HIS.DEFFECDATE, POLICY_HIS.NTRANSACTIO, POLICY_HIS.NRECEIPT, POLICY_HIS.SNULL_MOVE, POLICY_HIS.DNULLDATE, TABLE165.SDESCRIPT NTYPE_HISTDESC FROM POLICY_HIS POLICY_HIS LEFT JOIN TABLE165 TABLE165 ON TABLE165.NTYPE_HIST = POLICY_HIS.NTYPE_HIST  WHERE POLICY_HIS.SCERTYPE = @:POLICY_HISSCERTYPE1 AND POLICY_HIS.NBRANCH = @:POLICY_HISNBRANCH2 AND POLICY_HIS.NPRODUCT = @:POLICY_HISNPRODUCT3 AND POLICY_HIS.NPOLICY = @:POLICY_HISNPOLICY4 AND POLICY_HIS.NCERTIF = @:POLICY_HISNCERTIF5)", "POLICY_HIS", "Linked.LatCombined")
                    .AddParameter("POLICY_HISSCERTYPE1", DbType.AnsiStringFixedLength, 0, (POLICYHISSCERTYPE1 = String.Empty), POLICYHISSCERTYPE1)
                    .AddParameter("POLICY_HISNBRANCH2", DbType.AnsiStringFixedLength, 0, (POLICYHISNBRANCH2 = String.Empty), POLICYHISNBRANCH2)
                    .AddParameter("POLICY_HISNPRODUCT3", DbType.AnsiStringFixedLength, 0, (POLICYHISNPRODUCT3 = String.Empty), POLICYHISNPRODUCT3)
                    .AddParameter("POLICY_HISNPOLICY4", DbType.AnsiStringFixedLength, 0, (POLICYHISNPOLICY4 = String.Empty), POLICYHISNPOLICY4)
                    .AddParameter("POLICY_HISNCERTIF5", DbType.AnsiStringFixedLength, 0, (POLICYHISNCERTIF5 = String.Empty), POLICYHISNCERTIF5)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "POLICY_HISTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (POLICY_HISTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function POLICY_HISSelectCommandActionPOLICY_HIS(POLICYHISSCERTYPE1 As String, POLICYHISNBRANCH2 As String, POLICYHISNPRODUCT3 As String, POLICYHISNPOLICY4 As String, POLICYHISNCERTIF5 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(POLICY_HIS.NMOVEMENT) COUNTDATA FROM POLICY_HIS POLICY_HIS LEFT JOIN TABLE165 TABLE165 ON TABLE165.NTYPE_HIST = POLICY_HIS.NTYPE_HIST  WHERE POLICY_HIS.SCERTYPE = @:POLICY_HISSCERTYPE1 AND POLICY_HIS.NBRANCH = @:POLICY_HISNBRANCH2 AND POLICY_HIS.NPRODUCT = @:POLICY_HISNPRODUCT3 AND POLICY_HIS.NPOLICY = @:POLICY_HISNPOLICY4 AND POLICY_HIS.NCERTIF = @:POLICY_HISNCERTIF5", "POLICY_HIS", "Linked.LatCombined")
                    .AddParameter("POLICY_HISSCERTYPE1", DbType.AnsiStringFixedLength, 0, (POLICYHISSCERTYPE1 = String.Empty), POLICYHISSCERTYPE1)
                    .AddParameter("POLICY_HISNBRANCH2", DbType.AnsiStringFixedLength, 0, (POLICYHISNBRANCH2 = String.Empty), POLICYHISNBRANCH2)
                    .AddParameter("POLICY_HISNPRODUCT3", DbType.AnsiStringFixedLength, 0, (POLICYHISNPRODUCT3 = String.Empty), POLICYHISNPRODUCT3)
                    .AddParameter("POLICY_HISNPOLICY4", DbType.AnsiStringFixedLength, 0, (POLICYHISNPOLICY4 = String.Empty), POLICYHISNPOLICY4)
                    .AddParameter("POLICY_HISNCERTIF5", DbType.AnsiStringFixedLength, 0, (POLICYHISNCERTIF5 = String.Empty), POLICYHISNCERTIF5)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "POLICY_HISSelectCommandActionPOLICY_HIS", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (POLICY_HISSelectCommandActionPOLICY_HIS)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function PremiumTblDataLoad(filter As String, PREMIUMSCLIENT3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nBranch = 0, .nProduct = 0, .nPolicy = 0, .nReceipt = 0, .nTratypei = 0, .nPremium = 0, .nCurrency = 0, .nCollector = 0, .sReject = String.Empty, .dLimitDate = Date.MinValue, .nWay_pay = 0, .NINTERMED = 0, .nParticip = 0, .nComamou = 0, .dIssuedat = Date.MinValue, .dExpirdat = Date.MinValue, .nType = 0, .sStatusva = String.Empty, .nStatus_pre = 0, .sManauti = String.Empty, .SCERTYPE = String.Empty, .NDIGIT = 0, .NPAYNUMBE = 0, .NCONTRAT = 0, .DEFFECDATE = Date.MinValue, .nBranchDesc = String.Empty, .nProductDesc = String.Empty, .nTratypeiDesc = String.Empty, .nCurrencyDesc = String.Empty, .nWay_payDesc = String.Empty, .sStatusvaDesc = String.Empty, .nStatus_preDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT PREMIUM.NBRANCH, PREMIUM.NPRODUCT, PREMIUM.NPOLICY, PREMIUM.NRECEIPT, PREMIUM.NTRATYPEI, PREMIUM.NPREMIUM, PREMIUM.NCURRENCY, PREMIUM.NCOLLECTOR, PREMIUM.SREJECT, PREMIUM.DLIMITDATE, PREMIUM.NWAY_PAY, PREMIUM.NINTERMED, PREMIUM.NPARTICIP, PREMIUM.NCOMAMOU, PREMIUM.DISSUEDAT, PREMIUM.DEXPIRDAT, PREMIUM.NTYPE, PREMIUM.SSTATUSVA, PREMIUM.NSTATUS_PRE, PREMIUM.SMANAUTI, PREMIUM.SCERTYPE, PREMIUM.NDIGIT, PREMIUM.NPAYNUMBE, PREMIUM.NCONTRAT, PREMIUM.DEFFECDATE, TABLE10.SDESCRIPT NBRANCHDESC, PRODMASTER.SDESCRIPT NPRODUCTDESC, TABLE24.SDESCRIPT NTRATYPEIDESC, TABLE11.SDESCRIPT NCURRENCYDESC, TABLE5002.SDESCRIPT NWAY_PAYDESC, TABLE181.SDESCRIPT SSTATUSVADESC, TABLE19.SDESCRIPT NSTATUS_PREDESC FROM PREMIUM PREMIUM LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = PREMIUM.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = PREMIUM.NBRANCH  AND PRODMASTER.NPRODUCT = PREMIUM.NPRODUCT LEFT JOIN TABLE24 TABLE24 ON TABLE24.NTRATYPEI = PREMIUM.NTRATYPEI LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = PREMIUM.NCURRENCY LEFT JOIN TABLE5002 TABLE5002 ON TABLE5002.NWAY_PAY = PREMIUM.NWAY_PAY LEFT JOIN TABLE181 TABLE181 ON TABLE181.SSTATUSVA = PREMIUM.SSTATUSVA LEFT JOIN TABLE19 TABLE19 ON TABLE19.NSTATUS_PRE = PREMIUM.NSTATUS_PRE  WHERE PREMIUM.NDIGIT = 0 AND PREMIUM.SSTATUSVA <> '3' AND PREMIUM.SCLIENT = @:PREMIUMSCLIENT3", "PREMIUM", "Linked.LatCombined")
                    .AddParameter("PREMIUMSCLIENT3", DbType.AnsiStringFixedLength, 0, (PREMIUMSCLIENT3 = String.Empty), PREMIUMSCLIENT3)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nBranch = itemData.NumericValue("NBRANCH"), .nProduct = itemData.NumericValue("NPRODUCT"), .nPolicy = itemData.NumericValue("NPOLICY"), .nReceipt = itemData.NumericValue("NRECEIPT"), .nTratypei = itemData.NumericValue("NTRATYPEI"), .nPremium = itemData.NumericValue("NPREMIUM"), .nCurrency = itemData.NumericValue("NCURRENCY"), .nCollector = itemData.NumericValue("NCOLLECTOR"), .sReject = itemData.StringValue("SREJECT"), .dLimitDate = itemData.DateTimeValue("DLIMITDATE"), .nWay_pay = itemData.NumericValue("NWAY_PAY"), .NINTERMED = itemData.NumericValue("NINTERMED"), .nParticip = itemData.NumericValue("NPARTICIP"), .nComamou = itemData.NumericValue("NCOMAMOU"), .dIssuedat = itemData.DateTimeValue("DISSUEDAT"), .dExpirdat = itemData.DateTimeValue("DEXPIRDAT"), .nType = itemData.NumericValue("NTYPE"), .sStatusva = itemData.StringValue("SSTATUSVA"), .nStatus_pre = itemData.NumericValue("NSTATUS_PRE"), .sManauti = itemData.StringValue("SMANAUTI"), .SCERTYPE = itemData.StringValue("SCERTYPE"), .NDIGIT = itemData.NumericValue("NDIGIT"), .NPAYNUMBE = itemData.NumericValue("NPAYNUMBE"), .NCONTRAT = itemData.NumericValue("NCONTRAT"), .DEFFECDATE = itemData.DateTimeValue("DEFFECDATE"), .nBranchDesc = itemData.StringValue("NBRANCHDESC"), .nProductDesc = itemData.StringValue("NPRODUCTDESC"), .nTratypeiDesc = itemData.StringValue("NTRATYPEIDESC"), .nCurrencyDesc = itemData.StringValue("NCURRENCYDESC"), .nWay_payDesc = itemData.StringValue("NWAY_PAYDESC"), .sStatusvaDesc = itemData.StringValue("SSTATUSVADESC"), .nStatus_preDesc = itemData.StringValue("NSTATUS_PREDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "PremiumTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PremiumTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function PremiumTblDataCount(filter As String, PREMIUMSCLIENT3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT PREMIUM.NBRANCH, PREMIUM.NPRODUCT, PREMIUM.NPOLICY, PREMIUM.NRECEIPT, PREMIUM.NTRATYPEI, PREMIUM.NPREMIUM, PREMIUM.NCURRENCY, PREMIUM.NCOLLECTOR, PREMIUM.SREJECT, PREMIUM.DLIMITDATE, PREMIUM.NWAY_PAY, PREMIUM.NINTERMED, PREMIUM.NPARTICIP, PREMIUM.NCOMAMOU, PREMIUM.DISSUEDAT, PREMIUM.DEXPIRDAT, PREMIUM.NTYPE, PREMIUM.SSTATUSVA, PREMIUM.NSTATUS_PRE, PREMIUM.SMANAUTI, PREMIUM.SCERTYPE, PREMIUM.NDIGIT, PREMIUM.NPAYNUMBE, PREMIUM.NCONTRAT, PREMIUM.DEFFECDATE, TABLE10.SDESCRIPT NBRANCHDESC, PRODMASTER.SDESCRIPT NPRODUCTDESC, TABLE24.SDESCRIPT NTRATYPEIDESC, TABLE11.SDESCRIPT NCURRENCYDESC, TABLE5002.SDESCRIPT NWAY_PAYDESC, TABLE181.SDESCRIPT SSTATUSVADESC, TABLE19.SDESCRIPT NSTATUS_PREDESC FROM PREMIUM PREMIUM LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = PREMIUM.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = PREMIUM.NBRANCH  AND PRODMASTER.NPRODUCT = PREMIUM.NPRODUCT LEFT JOIN TABLE24 TABLE24 ON TABLE24.NTRATYPEI = PREMIUM.NTRATYPEI LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = PREMIUM.NCURRENCY LEFT JOIN TABLE5002 TABLE5002 ON TABLE5002.NWAY_PAY = PREMIUM.NWAY_PAY LEFT JOIN TABLE181 TABLE181 ON TABLE181.SSTATUSVA = PREMIUM.SSTATUSVA LEFT JOIN TABLE19 TABLE19 ON TABLE19.NSTATUS_PRE = PREMIUM.NSTATUS_PRE  WHERE PREMIUM.NDIGIT = 0 AND PREMIUM.SSTATUSVA <> '3' AND PREMIUM.SCLIENT = @:PREMIUMSCLIENT3)", "PREMIUM", "Linked.LatCombined")
                    .AddParameter("PREMIUMSCLIENT3", DbType.AnsiStringFixedLength, 0, (PREMIUMSCLIENT3 = String.Empty), PREMIUMSCLIENT3)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "PremiumTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PremiumTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function PremiumSelectCommandActionPREMIUM(PREMIUMSCLIENT3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(PREMIUM.NBRANCH) COUNTDATA FROM PREMIUM PREMIUM LEFT JOIN TABLE10 TABLE10 ON TABLE10.NBRANCH = PREMIUM.NBRANCH LEFT JOIN PRODMASTER PRODMASTER ON PRODMASTER.NBRANCH = PREMIUM.NBRANCH  AND PRODMASTER.NPRODUCT = PREMIUM.NPRODUCT LEFT JOIN TABLE24 TABLE24 ON TABLE24.NTRATYPEI = PREMIUM.NTRATYPEI LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = PREMIUM.NCURRENCY LEFT JOIN TABLE5002 TABLE5002 ON TABLE5002.NWAY_PAY = PREMIUM.NWAY_PAY LEFT JOIN TABLE181 TABLE181 ON TABLE181.SSTATUSVA = PREMIUM.SSTATUSVA LEFT JOIN TABLE19 TABLE19 ON TABLE19.NSTATUS_PRE = PREMIUM.NSTATUS_PRE  WHERE PREMIUM.NDIGIT = 0 AND PREMIUM.SSTATUSVA <> '3' AND PREMIUM.SCLIENT = @:PREMIUMSCLIENT3", "PREMIUM", "Linked.LatCombined")
                    .AddParameter("PREMIUMSCLIENT3", DbType.AnsiStringFixedLength, 0, (PREMIUMSCLIENT3 = String.Empty), PREMIUMSCLIENT3)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "PremiumSelectCommandActionPREMIUM", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PremiumSelectCommandActionPREMIUM)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Detail_preTblDataLoad(DETAILPRESCERTYPE1 As String, DETAILPRENBRANCH2 As String, DETAILPRENPRODUCT3 As String, DETAILPRENRECEIPT4 As String, DETAILPRENDIGIT5 As String, DETAILPRENPAYNUMBE6 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nReceipt = 0, .sType_detai = String.Empty, .nBill_item = 0, .nPremium = 0, .nCommision = 0, .nPremAnual = 0, .nPremiumE = 0, .nPremiumA = 0, .nDescAmount = 0, .nRecAmount = 0, .nTaxAmount = 0, .nComAnual = 0, .nBill_itemDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT DETAIL_PRE.NRECEIPT, DETAIL_PRE.STYPE_DETAI, DETAIL_PRE.NBILL_ITEM, DETAIL_PRE.NPREMIUM, DETAIL_PRE.NCOMMISION, DETAIL_PRE.NPREMANUAL, DETAIL_PRE.NPREMIUME, DETAIL_PRE.NPREMIUMA, DETAIL_PRE.NDESCAMOUNT, DETAIL_PRE.NRECAMOUNT, DETAIL_PRE.NTAXAMOUNT, DETAIL_PRE.NCOMANUAL, TAB_BILL_I.SDESCRIPT NBILL_ITEMDESC FROM DETAIL_PRE DETAIL_PRE LEFT JOIN TAB_BILL_I TAB_BILL_I ON TAB_BILL_I.NBRANCH = DETAIL_PRE.NBRANCH  AND TAB_BILL_I.NPRODUCT = DETAIL_PRE.NPRODUCT  AND TAB_BILL_I.NBILL_ITEM = DETAIL_PRE.NBILL_ITEM  WHERE DETAIL_PRE.SCERTYPE = @:DETAIL_PRESCERTYPE1 AND DETAIL_PRE.NBRANCH = @:DETAIL_PRENBRANCH2 AND DETAIL_PRE.NPRODUCT = @:DETAIL_PRENPRODUCT3 AND DETAIL_PRE.NRECEIPT = @:DETAIL_PRENRECEIPT4 AND DETAIL_PRE.NDIGIT = @:DETAIL_PRENDIGIT5 AND DETAIL_PRE.NPAYNUMBE = @:DETAIL_PRENPAYNUMBE6", "DETAIL_PRE", "Linked.LatCombined")
                    .AddParameter("DETAIL_PRESCERTYPE1", DbType.AnsiStringFixedLength, 0, (DETAILPRESCERTYPE1 = String.Empty), DETAILPRESCERTYPE1)
                    .AddParameter("DETAIL_PRENBRANCH2", DbType.AnsiStringFixedLength, 0, (DETAILPRENBRANCH2 = String.Empty), DETAILPRENBRANCH2)
                    .AddParameter("DETAIL_PRENPRODUCT3", DbType.AnsiStringFixedLength, 0, (DETAILPRENPRODUCT3 = String.Empty), DETAILPRENPRODUCT3)
                    .AddParameter("DETAIL_PRENRECEIPT4", DbType.AnsiStringFixedLength, 0, (DETAILPRENRECEIPT4 = String.Empty), DETAILPRENRECEIPT4)
                    .AddParameter("DETAIL_PRENDIGIT5", DbType.AnsiStringFixedLength, 0, (DETAILPRENDIGIT5 = String.Empty), DETAILPRENDIGIT5)
                    .AddParameter("DETAIL_PRENPAYNUMBE6", DbType.AnsiStringFixedLength, 0, (DETAILPRENPAYNUMBE6 = String.Empty), DETAILPRENPAYNUMBE6)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nReceipt = itemData.NumericValue("NRECEIPT"), .sType_detai = itemData.StringValue("STYPE_DETAI"), .nBill_item = itemData.NumericValue("NBILL_ITEM"), .nPremium = itemData.NumericValue("NPREMIUM"), .nCommision = itemData.NumericValue("NCOMMISION"), .nPremAnual = itemData.NumericValue("NPREMANUAL"), .nPremiumE = itemData.NumericValue("NPREMIUME"), .nPremiumA = itemData.NumericValue("NPREMIUMA"), .nDescAmount = itemData.NumericValue("NDESCAMOUNT"), .nRecAmount = itemData.NumericValue("NRECAMOUNT"), .nTaxAmount = itemData.NumericValue("NTAXAMOUNT"), .nComAnual = itemData.NumericValue("NCOMANUAL"), .nBill_itemDesc = itemData.StringValue("NBILL_ITEMDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Detail_preTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Detail_preTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Detail_preTblDataCount(DETAILPRESCERTYPE1 As String, DETAILPRENBRANCH2 As String, DETAILPRENPRODUCT3 As String, DETAILPRENRECEIPT4 As String, DETAILPRENDIGIT5 As String, DETAILPRENPAYNUMBE6 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT DETAIL_PRE.NRECEIPT, DETAIL_PRE.STYPE_DETAI, DETAIL_PRE.NBILL_ITEM, DETAIL_PRE.NPREMIUM, DETAIL_PRE.NCOMMISION, DETAIL_PRE.NPREMANUAL, DETAIL_PRE.NPREMIUME, DETAIL_PRE.NPREMIUMA, DETAIL_PRE.NDESCAMOUNT, DETAIL_PRE.NRECAMOUNT, DETAIL_PRE.NTAXAMOUNT, DETAIL_PRE.NCOMANUAL, TAB_BILL_I.SDESCRIPT NBILL_ITEMDESC FROM DETAIL_PRE DETAIL_PRE LEFT JOIN TAB_BILL_I TAB_BILL_I ON TAB_BILL_I.NBRANCH = DETAIL_PRE.NBRANCH  AND TAB_BILL_I.NPRODUCT = DETAIL_PRE.NPRODUCT  AND TAB_BILL_I.NBILL_ITEM = DETAIL_PRE.NBILL_ITEM  WHERE DETAIL_PRE.SCERTYPE = @:DETAIL_PRESCERTYPE1 AND DETAIL_PRE.NBRANCH = @:DETAIL_PRENBRANCH2 AND DETAIL_PRE.NPRODUCT = @:DETAIL_PRENPRODUCT3 AND DETAIL_PRE.NRECEIPT = @:DETAIL_PRENRECEIPT4 AND DETAIL_PRE.NDIGIT = @:DETAIL_PRENDIGIT5 AND DETAIL_PRE.NPAYNUMBE = @:DETAIL_PRENPAYNUMBE6)", "DETAIL_PRE", "Linked.LatCombined")
                    .AddParameter("DETAIL_PRESCERTYPE1", DbType.AnsiStringFixedLength, 0, (DETAILPRESCERTYPE1 = String.Empty), DETAILPRESCERTYPE1)
                    .AddParameter("DETAIL_PRENBRANCH2", DbType.AnsiStringFixedLength, 0, (DETAILPRENBRANCH2 = String.Empty), DETAILPRENBRANCH2)
                    .AddParameter("DETAIL_PRENPRODUCT3", DbType.AnsiStringFixedLength, 0, (DETAILPRENPRODUCT3 = String.Empty), DETAILPRENPRODUCT3)
                    .AddParameter("DETAIL_PRENRECEIPT4", DbType.AnsiStringFixedLength, 0, (DETAILPRENRECEIPT4 = String.Empty), DETAILPRENRECEIPT4)
                    .AddParameter("DETAIL_PRENDIGIT5", DbType.AnsiStringFixedLength, 0, (DETAILPRENDIGIT5 = String.Empty), DETAILPRENDIGIT5)
                    .AddParameter("DETAIL_PRENPAYNUMBE6", DbType.AnsiStringFixedLength, 0, (DETAILPRENPAYNUMBE6 = String.Empty), DETAILPRENPAYNUMBE6)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Detail_preTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Detail_preTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Detail_preSelectCommandActionDETAIL_PRE(DETAILPRESCERTYPE1 As String, DETAILPRENBRANCH2 As String, DETAILPRENPRODUCT3 As String, DETAILPRENRECEIPT4 As String, DETAILPRENDIGIT5 As String, DETAILPRENPAYNUMBE6 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(DETAIL_PRE.NRECEIPT) COUNTDATA FROM DETAIL_PRE DETAIL_PRE LEFT JOIN TAB_BILL_I TAB_BILL_I ON TAB_BILL_I.NBRANCH = DETAIL_PRE.NBRANCH  AND TAB_BILL_I.NPRODUCT = DETAIL_PRE.NPRODUCT  AND TAB_BILL_I.NBILL_ITEM = DETAIL_PRE.NBILL_ITEM  WHERE DETAIL_PRE.SCERTYPE = @:DETAIL_PRESCERTYPE1 AND DETAIL_PRE.NBRANCH = @:DETAIL_PRENBRANCH2 AND DETAIL_PRE.NPRODUCT = @:DETAIL_PRENPRODUCT3 AND DETAIL_PRE.NRECEIPT = @:DETAIL_PRENRECEIPT4 AND DETAIL_PRE.NDIGIT = @:DETAIL_PRENDIGIT5 AND DETAIL_PRE.NPAYNUMBE = @:DETAIL_PRENPAYNUMBE6", "DETAIL_PRE", "Linked.LatCombined")
                    .AddParameter("DETAIL_PRESCERTYPE1", DbType.AnsiStringFixedLength, 0, (DETAILPRESCERTYPE1 = String.Empty), DETAILPRESCERTYPE1)
                    .AddParameter("DETAIL_PRENBRANCH2", DbType.AnsiStringFixedLength, 0, (DETAILPRENBRANCH2 = String.Empty), DETAILPRENBRANCH2)
                    .AddParameter("DETAIL_PRENPRODUCT3", DbType.AnsiStringFixedLength, 0, (DETAILPRENPRODUCT3 = String.Empty), DETAILPRENPRODUCT3)
                    .AddParameter("DETAIL_PRENRECEIPT4", DbType.AnsiStringFixedLength, 0, (DETAILPRENRECEIPT4 = String.Empty), DETAILPRENRECEIPT4)
                    .AddParameter("DETAIL_PRENDIGIT5", DbType.AnsiStringFixedLength, 0, (DETAILPRENDIGIT5 = String.Empty), DETAILPRENDIGIT5)
                    .AddParameter("DETAIL_PRENPAYNUMBE6", DbType.AnsiStringFixedLength, 0, (DETAILPRENPAYNUMBE6 = String.Empty), DETAILPRENPAYNUMBE6)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Detail_preSelectCommandActionDETAIL_PRE", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Detail_preSelectCommandActionDETAIL_PRE)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Commiss_prTblDataLoad(COMMISSPRSCERTYPE1 As String, COMMISSPRNBRANCH2 As String, COMMISSPRNPRODUCT3 As String, COMMISSPRNRECEIPT4 As String, COMMISSPRNDIGIT5 As String, COMMISSPRNPAYNUMBE6 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nIntermed = 0, .nRole = 0, .nShare = 0, .nPercent = 0, .nAmount = 0, .nRoleDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT COMMISS_PR.NINTERMED, COMMISS_PR.NROLE, COMMISS_PR.NSHARE, COMMISS_PR.NPERCENT, COMMISS_PR.NAMOUNT, INTERM_TYP.SDESCRIPT NROLEDESC FROM COMMISS_PR COMMISS_PR LEFT JOIN INTERM_TYP INTERM_TYP ON INTERM_TYP.NINTERTYP = COMMISS_PR.NROLE  WHERE COMMISS_PR.SCERTYPE = @:COMMISS_PRSCERTYPE1 AND COMMISS_PR.NBRANCH = @:COMMISS_PRNBRANCH2 AND COMMISS_PR.NPRODUCT = @:COMMISS_PRNPRODUCT3 AND COMMISS_PR.NRECEIPT = @:COMMISS_PRNRECEIPT4 AND COMMISS_PR.NDIGIT = @:COMMISS_PRNDIGIT5 AND COMMISS_PR.NPAYNUMBE = @:COMMISS_PRNPAYNUMBE6", "COMMISS_PR", "Linked.LatCombined")
                    .AddParameter("COMMISS_PRSCERTYPE1", DbType.AnsiStringFixedLength, 0, (COMMISSPRSCERTYPE1 = String.Empty), COMMISSPRSCERTYPE1)
                    .AddParameter("COMMISS_PRNBRANCH2", DbType.AnsiStringFixedLength, 0, (COMMISSPRNBRANCH2 = String.Empty), COMMISSPRNBRANCH2)
                    .AddParameter("COMMISS_PRNPRODUCT3", DbType.AnsiStringFixedLength, 0, (COMMISSPRNPRODUCT3 = String.Empty), COMMISSPRNPRODUCT3)
                    .AddParameter("COMMISS_PRNRECEIPT4", DbType.AnsiStringFixedLength, 0, (COMMISSPRNRECEIPT4 = String.Empty), COMMISSPRNRECEIPT4)
                    .AddParameter("COMMISS_PRNDIGIT5", DbType.AnsiStringFixedLength, 0, (COMMISSPRNDIGIT5 = String.Empty), COMMISSPRNDIGIT5)
                    .AddParameter("COMMISS_PRNPAYNUMBE6", DbType.AnsiStringFixedLength, 0, (COMMISSPRNPAYNUMBE6 = String.Empty), COMMISSPRNPAYNUMBE6)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nIntermed = itemData.NumericValue("NINTERMED"), .nRole = itemData.NumericValue("NROLE"), .nShare = itemData.NumericValue("NSHARE"), .nPercent = itemData.NumericValue("NPERCENT"), .nAmount = itemData.NumericValue("NAMOUNT"), .nRoleDesc = itemData.StringValue("NROLEDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Commiss_prTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Commiss_prTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Commiss_prTblDataCount(COMMISSPRSCERTYPE1 As String, COMMISSPRNBRANCH2 As String, COMMISSPRNPRODUCT3 As String, COMMISSPRNRECEIPT4 As String, COMMISSPRNDIGIT5 As String, COMMISSPRNPAYNUMBE6 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT COMMISS_PR.NINTERMED, COMMISS_PR.NROLE, COMMISS_PR.NSHARE, COMMISS_PR.NPERCENT, COMMISS_PR.NAMOUNT, INTERM_TYP.SDESCRIPT NROLEDESC FROM COMMISS_PR COMMISS_PR LEFT JOIN INTERM_TYP INTERM_TYP ON INTERM_TYP.NINTERTYP = COMMISS_PR.NROLE  WHERE COMMISS_PR.SCERTYPE = @:COMMISS_PRSCERTYPE1 AND COMMISS_PR.NBRANCH = @:COMMISS_PRNBRANCH2 AND COMMISS_PR.NPRODUCT = @:COMMISS_PRNPRODUCT3 AND COMMISS_PR.NRECEIPT = @:COMMISS_PRNRECEIPT4 AND COMMISS_PR.NDIGIT = @:COMMISS_PRNDIGIT5 AND COMMISS_PR.NPAYNUMBE = @:COMMISS_PRNPAYNUMBE6)", "COMMISS_PR", "Linked.LatCombined")
                    .AddParameter("COMMISS_PRSCERTYPE1", DbType.AnsiStringFixedLength, 0, (COMMISSPRSCERTYPE1 = String.Empty), COMMISSPRSCERTYPE1)
                    .AddParameter("COMMISS_PRNBRANCH2", DbType.AnsiStringFixedLength, 0, (COMMISSPRNBRANCH2 = String.Empty), COMMISSPRNBRANCH2)
                    .AddParameter("COMMISS_PRNPRODUCT3", DbType.AnsiStringFixedLength, 0, (COMMISSPRNPRODUCT3 = String.Empty), COMMISSPRNPRODUCT3)
                    .AddParameter("COMMISS_PRNRECEIPT4", DbType.AnsiStringFixedLength, 0, (COMMISSPRNRECEIPT4 = String.Empty), COMMISSPRNRECEIPT4)
                    .AddParameter("COMMISS_PRNDIGIT5", DbType.AnsiStringFixedLength, 0, (COMMISSPRNDIGIT5 = String.Empty), COMMISSPRNDIGIT5)
                    .AddParameter("COMMISS_PRNPAYNUMBE6", DbType.AnsiStringFixedLength, 0, (COMMISSPRNPAYNUMBE6 = String.Empty), COMMISSPRNPAYNUMBE6)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Commiss_prTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Commiss_prTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Commiss_prSelectCommandActionCOMMISS_PR(COMMISSPRSCERTYPE1 As String, COMMISSPRNBRANCH2 As String, COMMISSPRNPRODUCT3 As String, COMMISSPRNRECEIPT4 As String, COMMISSPRNDIGIT5 As String, COMMISSPRNPAYNUMBE6 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(COMMISS_PR.NINTERMED) COUNTDATA FROM COMMISS_PR COMMISS_PR LEFT JOIN INTERM_TYP INTERM_TYP ON INTERM_TYP.NINTERTYP = COMMISS_PR.NROLE  WHERE COMMISS_PR.SCERTYPE = @:COMMISS_PRSCERTYPE1 AND COMMISS_PR.NBRANCH = @:COMMISS_PRNBRANCH2 AND COMMISS_PR.NPRODUCT = @:COMMISS_PRNPRODUCT3 AND COMMISS_PR.NRECEIPT = @:COMMISS_PRNRECEIPT4 AND COMMISS_PR.NDIGIT = @:COMMISS_PRNDIGIT5 AND COMMISS_PR.NPAYNUMBE = @:COMMISS_PRNPAYNUMBE6", "COMMISS_PR", "Linked.LatCombined")
                    .AddParameter("COMMISS_PRSCERTYPE1", DbType.AnsiStringFixedLength, 0, (COMMISSPRSCERTYPE1 = String.Empty), COMMISSPRSCERTYPE1)
                    .AddParameter("COMMISS_PRNBRANCH2", DbType.AnsiStringFixedLength, 0, (COMMISSPRNBRANCH2 = String.Empty), COMMISSPRNBRANCH2)
                    .AddParameter("COMMISS_PRNPRODUCT3", DbType.AnsiStringFixedLength, 0, (COMMISSPRNPRODUCT3 = String.Empty), COMMISSPRNPRODUCT3)
                    .AddParameter("COMMISS_PRNRECEIPT4", DbType.AnsiStringFixedLength, 0, (COMMISSPRNRECEIPT4 = String.Empty), COMMISSPRNRECEIPT4)
                    .AddParameter("COMMISS_PRNDIGIT5", DbType.AnsiStringFixedLength, 0, (COMMISSPRNDIGIT5 = String.Empty), COMMISSPRNDIGIT5)
                    .AddParameter("COMMISS_PRNPAYNUMBE6", DbType.AnsiStringFixedLength, 0, (COMMISSPRNPAYNUMBE6 = String.Empty), COMMISSPRNPAYNUMBE6)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Commiss_prSelectCommandActionCOMMISS_PR", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Commiss_prSelectCommandActionCOMMISS_PR)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Premium_moTblDataLoad(PREMIUMMOSCERTYPE1 As String, PREMIUMMONBRANCH2 As String, PREMIUMMONPRODUCT3 As String, PREMIUMMONRECEIPT4 As String, PREMIUMMONDIGIT5 As String, PREMIUMMONPAYNUMBE6 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nId = 0, .nTransac = 0, .nType = 0, .dCompdate = Date.MinValue, .nAmount = 0, .nCurrency = 0, .nTypeDesc = String.Empty, .nCurrencyDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT PREMIUM_MO.NID, PREMIUM_MO.NTRANSAC, PREMIUM_MO.NTYPE, PREMIUM_MO.DCOMPDATE, PREMIUM_MO.NAMOUNT, PREMIUM_MO.NCURRENCY, TABLE6.SDESCRIPT NTYPEDESC, TABLE11.SDESCRIPT NCURRENCYDESC FROM PREMIUM_MO PREMIUM_MO LEFT JOIN TABLE6 TABLE6 ON TABLE6.NTYPE_TRAN = PREMIUM_MO.NTYPE LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = PREMIUM_MO.NCURRENCY  WHERE PREMIUM_MO.SCERTYPE = @:PREMIUM_MOSCERTYPE1 AND PREMIUM_MO.NBRANCH = @:PREMIUM_MONBRANCH2 AND PREMIUM_MO.NPRODUCT = @:PREMIUM_MONPRODUCT3 AND PREMIUM_MO.NRECEIPT = @:PREMIUM_MONRECEIPT4 AND PREMIUM_MO.NDIGIT = @:PREMIUM_MONDIGIT5 AND PREMIUM_MO.NPAYNUMBE = @:PREMIUM_MONPAYNUMBE6", "PREMIUM_MO", "Linked.LatCombined")
                    .AddParameter("PREMIUM_MOSCERTYPE1", DbType.AnsiStringFixedLength, 0, (PREMIUMMOSCERTYPE1 = String.Empty), PREMIUMMOSCERTYPE1)
                    .AddParameter("PREMIUM_MONBRANCH2", DbType.AnsiStringFixedLength, 0, (PREMIUMMONBRANCH2 = String.Empty), PREMIUMMONBRANCH2)
                    .AddParameter("PREMIUM_MONPRODUCT3", DbType.AnsiStringFixedLength, 0, (PREMIUMMONPRODUCT3 = String.Empty), PREMIUMMONPRODUCT3)
                    .AddParameter("PREMIUM_MONRECEIPT4", DbType.AnsiStringFixedLength, 0, (PREMIUMMONRECEIPT4 = String.Empty), PREMIUMMONRECEIPT4)
                    .AddParameter("PREMIUM_MONDIGIT5", DbType.AnsiStringFixedLength, 0, (PREMIUMMONDIGIT5 = String.Empty), PREMIUMMONDIGIT5)
                    .AddParameter("PREMIUM_MONPAYNUMBE6", DbType.AnsiStringFixedLength, 0, (PREMIUMMONPAYNUMBE6 = String.Empty), PREMIUMMONPAYNUMBE6)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nId = itemData.NumericValue("NID"), .nTransac = itemData.NumericValue("NTRANSAC"), .nType = itemData.NumericValue("NTYPE"), .dCompdate = itemData.DateTimeValue("DCOMPDATE"), .nAmount = itemData.NumericValue("NAMOUNT"), .nCurrency = itemData.NumericValue("NCURRENCY"), .nTypeDesc = itemData.StringValue("NTYPEDESC"), .nCurrencyDesc = itemData.StringValue("NCURRENCYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Premium_moTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Premium_moTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Premium_moTblDataCount(PREMIUMMOSCERTYPE1 As String, PREMIUMMONBRANCH2 As String, PREMIUMMONPRODUCT3 As String, PREMIUMMONRECEIPT4 As String, PREMIUMMONDIGIT5 As String, PREMIUMMONPAYNUMBE6 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT PREMIUM_MO.NID, PREMIUM_MO.NTRANSAC, PREMIUM_MO.NTYPE, PREMIUM_MO.DCOMPDATE, PREMIUM_MO.NAMOUNT, PREMIUM_MO.NCURRENCY, TABLE6.SDESCRIPT NTYPEDESC, TABLE11.SDESCRIPT NCURRENCYDESC FROM PREMIUM_MO PREMIUM_MO LEFT JOIN TABLE6 TABLE6 ON TABLE6.NTYPE_TRAN = PREMIUM_MO.NTYPE LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = PREMIUM_MO.NCURRENCY  WHERE PREMIUM_MO.SCERTYPE = @:PREMIUM_MOSCERTYPE1 AND PREMIUM_MO.NBRANCH = @:PREMIUM_MONBRANCH2 AND PREMIUM_MO.NPRODUCT = @:PREMIUM_MONPRODUCT3 AND PREMIUM_MO.NRECEIPT = @:PREMIUM_MONRECEIPT4 AND PREMIUM_MO.NDIGIT = @:PREMIUM_MONDIGIT5 AND PREMIUM_MO.NPAYNUMBE = @:PREMIUM_MONPAYNUMBE6)", "PREMIUM_MO", "Linked.LatCombined")
                    .AddParameter("PREMIUM_MOSCERTYPE1", DbType.AnsiStringFixedLength, 0, (PREMIUMMOSCERTYPE1 = String.Empty), PREMIUMMOSCERTYPE1)
                    .AddParameter("PREMIUM_MONBRANCH2", DbType.AnsiStringFixedLength, 0, (PREMIUMMONBRANCH2 = String.Empty), PREMIUMMONBRANCH2)
                    .AddParameter("PREMIUM_MONPRODUCT3", DbType.AnsiStringFixedLength, 0, (PREMIUMMONPRODUCT3 = String.Empty), PREMIUMMONPRODUCT3)
                    .AddParameter("PREMIUM_MONRECEIPT4", DbType.AnsiStringFixedLength, 0, (PREMIUMMONRECEIPT4 = String.Empty), PREMIUMMONRECEIPT4)
                    .AddParameter("PREMIUM_MONDIGIT5", DbType.AnsiStringFixedLength, 0, (PREMIUMMONDIGIT5 = String.Empty), PREMIUMMONDIGIT5)
                    .AddParameter("PREMIUM_MONPAYNUMBE6", DbType.AnsiStringFixedLength, 0, (PREMIUMMONPAYNUMBE6 = String.Empty), PREMIUMMONPAYNUMBE6)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Premium_moTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Premium_moTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Premium_moSelectCommandActionPREMIUM_MO(PREMIUMMOSCERTYPE1 As String, PREMIUMMONBRANCH2 As String, PREMIUMMONPRODUCT3 As String, PREMIUMMONRECEIPT4 As String, PREMIUMMONDIGIT5 As String, PREMIUMMONPAYNUMBE6 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(PREMIUM_MO.NID) COUNTDATA FROM PREMIUM_MO PREMIUM_MO LEFT JOIN TABLE6 TABLE6 ON TABLE6.NTYPE_TRAN = PREMIUM_MO.NTYPE LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = PREMIUM_MO.NCURRENCY  WHERE PREMIUM_MO.SCERTYPE = @:PREMIUM_MOSCERTYPE1 AND PREMIUM_MO.NBRANCH = @:PREMIUM_MONBRANCH2 AND PREMIUM_MO.NPRODUCT = @:PREMIUM_MONPRODUCT3 AND PREMIUM_MO.NRECEIPT = @:PREMIUM_MONRECEIPT4 AND PREMIUM_MO.NDIGIT = @:PREMIUM_MONDIGIT5 AND PREMIUM_MO.NPAYNUMBE = @:PREMIUM_MONPAYNUMBE6", "PREMIUM_MO", "Linked.LatCombined")
                    .AddParameter("PREMIUM_MOSCERTYPE1", DbType.AnsiStringFixedLength, 0, (PREMIUMMOSCERTYPE1 = String.Empty), PREMIUMMOSCERTYPE1)
                    .AddParameter("PREMIUM_MONBRANCH2", DbType.AnsiStringFixedLength, 0, (PREMIUMMONBRANCH2 = String.Empty), PREMIUMMONBRANCH2)
                    .AddParameter("PREMIUM_MONPRODUCT3", DbType.AnsiStringFixedLength, 0, (PREMIUMMONPRODUCT3 = String.Empty), PREMIUMMONPRODUCT3)
                    .AddParameter("PREMIUM_MONRECEIPT4", DbType.AnsiStringFixedLength, 0, (PREMIUMMONRECEIPT4 = String.Empty), PREMIUMMONRECEIPT4)
                    .AddParameter("PREMIUM_MONDIGIT5", DbType.AnsiStringFixedLength, 0, (PREMIUMMONDIGIT5 = String.Empty), PREMIUMMONDIGIT5)
                    .AddParameter("PREMIUM_MONPAYNUMBE6", DbType.AnsiStringFixedLength, 0, (PREMIUMMONPAYNUMBE6 = String.Empty), PREMIUMMONPAYNUMBE6)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Premium_moSelectCommandActionPREMIUM_MO", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Premium_moSelectCommandActionPREMIUM_MO)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function FINANCE_COTblDataLoad(FINANCECONCONTRAT1 As String, FINANCECODEFFECDATE2 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NCONTRAT = 0, .NQ_DRAFT = 0, .NAMOUNT = 0, .NCURRENCY = 0, .NFRECUENCY = 0, .NFRECUENCYDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT FINANCE_CO.NCONTRAT, FINANCE_CO.NQ_DRAFT, FINANCE_CO.NAMOUNT, FINANCE_CO.NCURRENCY, FINANCE_CO.NFRECUENCY, TABLE250.SDESCRIPT NFRECUENCYDESC FROM FINANCE_CO FINANCE_CO LEFT JOIN TABLE250 TABLE250 ON TABLE250.NFRECUENCY = FINANCE_CO.NFRECUENCY  WHERE FINANCE_CO.NCONTRAT = @:FINANCE_CONCONTRAT1 AND FINANCE_CO.DEFFECDATE = @:FINANCE_CODEFFECDATE2", "FINANCE_CO", "Linked.LatCombined")
                    .AddParameter("FINANCE_CONCONTRAT1", DbType.AnsiStringFixedLength, 0, (FINANCECONCONTRAT1 = String.Empty), FINANCECONCONTRAT1)
                    .AddParameter("FINANCE_CODEFFECDATE2", DbType.AnsiStringFixedLength, 0, (FINANCECODEFFECDATE2 = String.Empty), FINANCECODEFFECDATE2)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NCONTRAT = itemData.NumericValue("NCONTRAT"), .NQ_DRAFT = itemData.NumericValue("NQ_DRAFT"), .NAMOUNT = itemData.NumericValue("NAMOUNT"), .NCURRENCY = itemData.NumericValue("NCURRENCY"), .NFRECUENCY = itemData.NumericValue("NFRECUENCY"), .NFRECUENCYDesc = itemData.StringValue("NFRECUENCYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "FINANCE_COTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (FINANCE_COTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function FINANCE_COTblDataCount(FINANCECONCONTRAT1 As String, FINANCECODEFFECDATE2 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT FINANCE_CO.NCONTRAT, FINANCE_CO.NQ_DRAFT, FINANCE_CO.NAMOUNT, FINANCE_CO.NCURRENCY, FINANCE_CO.NFRECUENCY, TABLE250.SDESCRIPT NFRECUENCYDESC FROM FINANCE_CO FINANCE_CO LEFT JOIN TABLE250 TABLE250 ON TABLE250.NFRECUENCY = FINANCE_CO.NFRECUENCY  WHERE FINANCE_CO.NCONTRAT = @:FINANCE_CONCONTRAT1 AND FINANCE_CO.DEFFECDATE = @:FINANCE_CODEFFECDATE2)", "FINANCE_CO", "Linked.LatCombined")
                    .AddParameter("FINANCE_CONCONTRAT1", DbType.AnsiStringFixedLength, 0, (FINANCECONCONTRAT1 = String.Empty), FINANCECONCONTRAT1)
                    .AddParameter("FINANCE_CODEFFECDATE2", DbType.AnsiStringFixedLength, 0, (FINANCECODEFFECDATE2 = String.Empty), FINANCECODEFFECDATE2)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "FINANCE_COTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (FINANCE_COTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function FINANCE_COSelectCommandActionFINANCE_CO(FINANCECONCONTRAT1 As String, FINANCECODEFFECDATE2 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(FINANCE_CO.NCONTRAT) COUNTDATA FROM FINANCE_CO FINANCE_CO LEFT JOIN TABLE250 TABLE250 ON TABLE250.NFRECUENCY = FINANCE_CO.NFRECUENCY  WHERE FINANCE_CO.NCONTRAT = @:FINANCE_CONCONTRAT1 AND FINANCE_CO.DEFFECDATE = @:FINANCE_CODEFFECDATE2", "FINANCE_CO", "Linked.LatCombined")
                    .AddParameter("FINANCE_CONCONTRAT1", DbType.AnsiStringFixedLength, 0, (FINANCECONCONTRAT1 = String.Empty), FINANCECONCONTRAT1)
                    .AddParameter("FINANCE_CODEFFECDATE2", DbType.AnsiStringFixedLength, 0, (FINANCECODEFFECDATE2 = String.Empty), FINANCECODEFFECDATE2)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "FINANCE_COSelectCommandActionFINANCE_CO", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (FINANCE_COSelectCommandActionFINANCE_CO)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function FINANC_DRATblDataLoad(FINANCDRANCONTRAT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NDRAFT = 0, .NSTAT_DRAFT = 0, .NAMOUNT = 0, .NSTAT_DRAFTDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT FINANC_DRA.NDRAFT, FINANC_DRA.NSTAT_DRAFT, FINANC_DRA.NAMOUNT, TABLE253.SDESCRIPT NSTAT_DRAFTDESC FROM FINANC_DRA FINANC_DRA LEFT JOIN TABLE253 TABLE253 ON TABLE253.NSTAT_DRAFT = FINANC_DRA.NSTAT_DRAFT  WHERE FINANC_DRA.NCONTRAT = @:FINANC_DRANCONTRAT1", "FINANC_DRA", "Linked.LatCombined")
                    .AddParameter("FINANC_DRANCONTRAT1", DbType.AnsiStringFixedLength, 0, (FINANCDRANCONTRAT1 = String.Empty), FINANCDRANCONTRAT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NDRAFT = itemData.NumericValue("NDRAFT"), .NSTAT_DRAFT = itemData.NumericValue("NSTAT_DRAFT"), .NAMOUNT = itemData.NumericValue("NAMOUNT"), .NSTAT_DRAFTDesc = itemData.StringValue("NSTAT_DRAFTDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "FINANC_DRATblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (FINANC_DRATblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function FINANC_DRATblDataCount(FINANCDRANCONTRAT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT FINANC_DRA.NDRAFT, FINANC_DRA.NSTAT_DRAFT, FINANC_DRA.NAMOUNT, TABLE253.SDESCRIPT NSTAT_DRAFTDESC FROM FINANC_DRA FINANC_DRA LEFT JOIN TABLE253 TABLE253 ON TABLE253.NSTAT_DRAFT = FINANC_DRA.NSTAT_DRAFT  WHERE FINANC_DRA.NCONTRAT = @:FINANC_DRANCONTRAT1)", "FINANC_DRA", "Linked.LatCombined")
                    .AddParameter("FINANC_DRANCONTRAT1", DbType.AnsiStringFixedLength, 0, (FINANCDRANCONTRAT1 = String.Empty), FINANCDRANCONTRAT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "FINANC_DRATblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (FINANC_DRATblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function FINANC_DRASelectCommandActionFINANC_DRA(FINANCDRANCONTRAT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(FINANC_DRA.NDRAFT) COUNTDATA FROM FINANC_DRA FINANC_DRA LEFT JOIN TABLE253 TABLE253 ON TABLE253.NSTAT_DRAFT = FINANC_DRA.NSTAT_DRAFT  WHERE FINANC_DRA.NCONTRAT = @:FINANC_DRANCONTRAT1", "FINANC_DRA", "Linked.LatCombined")
                    .AddParameter("FINANC_DRANCONTRAT1", DbType.AnsiStringFixedLength, 0, (FINANCDRANCONTRAT1 = String.Empty), FINANCDRANCONTRAT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "FINANC_DRASelectCommandActionFINANC_DRA", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (FINANC_DRASelectCommandActionFINANC_DRA)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ClaimTblDataLoad(filter As String, CLAIMSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nBranch = 0, .nProduct = 0, .nPolicy = 0, .nClaim = 0, .dDecladat = Date.MinValue, .sClaimtyp = String.Empty, .nCausecod = 0, .sStaclaim = String.Empty, .nUnaccode = 0, .dPrescdat = Date.MinValue, .dOccurdat = Date.MinValue, .nLoc_reserv = 0, .nLoc_rec_am = 0, .nLoc_pay_am = 0, .nLoc_out_am = 0, .nLoc_cos_re = 0, .dCompdate = Date.MinValue, .sClaimtypDesc = String.Empty, .nCausecodDesc = String.Empty, .sStaclaimDesc = String.Empty, .nUnaccodeDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLAIM.NBRANCH, CLAIM.NPRODUCT, CLAIM.NPOLICY, CLAIM.NCLAIM, CLAIM.DDECLADAT, CLAIM.SCLAIMTYP, CLAIM.NCAUSECOD, CLAIM.SSTACLAIM, CLAIM.NUNACCODE, CLAIM.DPRESCDAT, CLAIM.DOCCURDAT, CLAIM.NLOC_RESERV, CLAIM.NLOC_REC_AM, CLAIM.NLOC_PAY_AM, CLAIM.NLOC_OUT_AM, CLAIM.NLOC_COS_RE, CLAIM.DCOMPDATE, TABLE132.SDESCRIPT SCLAIMTYPDESC, CLAIM_CAUS.SDESCRIPT NCAUSECODDESC, TABLE135.SDESCRIPT SSTACLAIMDESC, TABLE133.SDESCRIPT NUNACCODEDESC FROM CLAIM CLAIM LEFT JOIN TABLE132 TABLE132 ON TABLE132.SCLAIMTYP = CLAIM.SCLAIMTYP LEFT JOIN CLAIM_CAUS CLAIM_CAUS ON CLAIM_CAUS.NBRANCH = CLAIM.NBRANCH  AND CLAIM_CAUS.NPRODUCT = CLAIM.NPRODUCT  AND CLAIM_CAUS.NCAUSECOD = CLAIM.NCAUSECOD LEFT JOIN TABLE135 TABLE135 ON TABLE135.SSTACLAIM = CLAIM.SSTACLAIM LEFT JOIN TABLE133 TABLE133 ON TABLE133.NUNACCODE = CLAIM.NUNACCODE  WHERE CLAIM.SCLIENT = @:CLAIMSCLIENT1", "CLAIM", "Linked.LatCombined")
                    .AddParameter("CLAIMSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLAIMSCLIENT1 = String.Empty), CLAIMSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nBranch = itemData.NumericValue("NBRANCH"), .nProduct = itemData.NumericValue("NPRODUCT"), .nPolicy = itemData.NumericValue("NPOLICY"), .nClaim = itemData.NumericValue("NCLAIM"), .dDecladat = itemData.DateTimeValue("DDECLADAT"), .sClaimtyp = itemData.StringValue("SCLAIMTYP"), .nCausecod = itemData.NumericValue("NCAUSECOD"), .sStaclaim = itemData.StringValue("SSTACLAIM"), .nUnaccode = itemData.NumericValue("NUNACCODE"), .dPrescdat = itemData.DateTimeValue("DPRESCDAT"), .dOccurdat = itemData.DateTimeValue("DOCCURDAT"), .nLoc_reserv = itemData.NumericValue("NLOC_RESERV"), .nLoc_rec_am = itemData.NumericValue("NLOC_REC_AM"), .nLoc_pay_am = itemData.NumericValue("NLOC_PAY_AM"), .nLoc_out_am = itemData.NumericValue("NLOC_OUT_AM"), .nLoc_cos_re = itemData.NumericValue("NLOC_COS_RE"), .dCompdate = itemData.DateTimeValue("DCOMPDATE"), .sClaimtypDesc = itemData.StringValue("SCLAIMTYPDESC"), .nCausecodDesc = itemData.StringValue("NCAUSECODDESC"), .sStaclaimDesc = itemData.StringValue("SSTACLAIMDESC"), .nUnaccodeDesc = itemData.StringValue("NUNACCODEDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ClaimTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ClaimTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function ClaimTblDataCount(filter As String, CLAIMSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLAIM.NBRANCH, CLAIM.NPRODUCT, CLAIM.NPOLICY, CLAIM.NCLAIM, CLAIM.DDECLADAT, CLAIM.SCLAIMTYP, CLAIM.NCAUSECOD, CLAIM.SSTACLAIM, CLAIM.NUNACCODE, CLAIM.DPRESCDAT, CLAIM.DOCCURDAT, CLAIM.NLOC_RESERV, CLAIM.NLOC_REC_AM, CLAIM.NLOC_PAY_AM, CLAIM.NLOC_OUT_AM, CLAIM.NLOC_COS_RE, CLAIM.DCOMPDATE, TABLE132.SDESCRIPT SCLAIMTYPDESC, CLAIM_CAUS.SDESCRIPT NCAUSECODDESC, TABLE135.SDESCRIPT SSTACLAIMDESC, TABLE133.SDESCRIPT NUNACCODEDESC FROM CLAIM CLAIM LEFT JOIN TABLE132 TABLE132 ON TABLE132.SCLAIMTYP = CLAIM.SCLAIMTYP LEFT JOIN CLAIM_CAUS CLAIM_CAUS ON CLAIM_CAUS.NBRANCH = CLAIM.NBRANCH  AND CLAIM_CAUS.NPRODUCT = CLAIM.NPRODUCT  AND CLAIM_CAUS.NCAUSECOD = CLAIM.NCAUSECOD LEFT JOIN TABLE135 TABLE135 ON TABLE135.SSTACLAIM = CLAIM.SSTACLAIM LEFT JOIN TABLE133 TABLE133 ON TABLE133.NUNACCODE = CLAIM.NUNACCODE  WHERE CLAIM.SCLIENT = @:CLAIMSCLIENT1)", "CLAIM", "Linked.LatCombined")
                    .AddParameter("CLAIMSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLAIMSCLIENT1 = String.Empty), CLAIMSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ClaimTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ClaimTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function ClaimSelectCommandActionCLAIM(CLAIMSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CLAIM.NBRANCH) COUNTDATA FROM CLAIM CLAIM LEFT JOIN TABLE132 TABLE132 ON TABLE132.SCLAIMTYP = CLAIM.SCLAIMTYP LEFT JOIN CLAIM_CAUS CLAIM_CAUS ON CLAIM_CAUS.NBRANCH = CLAIM.NBRANCH  AND CLAIM_CAUS.NPRODUCT = CLAIM.NPRODUCT  AND CLAIM_CAUS.NCAUSECOD = CLAIM.NCAUSECOD LEFT JOIN TABLE135 TABLE135 ON TABLE135.SSTACLAIM = CLAIM.SSTACLAIM LEFT JOIN TABLE133 TABLE133 ON TABLE133.NUNACCODE = CLAIM.NUNACCODE  WHERE CLAIM.SCLIENT = @:CLAIMSCLIENT1", "CLAIM", "Linked.LatCombined")
                    .AddParameter("CLAIMSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLAIMSCLIENT1 = String.Empty), CLAIMSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "ClaimSelectCommandActionCLAIM", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (ClaimSelectCommandActionCLAIM)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLAIM_CASETblDataLoad(CLAIMCASENCLAIM1 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nCase_num = 0, .nDeman_type = 0, .sStaCase = String.Empty, .nNoteDama = 0, .NCLAIM = 0}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLAIM_CASE.NCASE_NUM, CLAIM_CASE.NDEMAN_TYPE, CLAIM_CASE.SSTACASE, CLAIM_CASE.NNOTEDAMA, CLAIM_CASE.NCLAIM FROM CLAIM_CASE CLAIM_CASE  WHERE CLAIM_CASE.NCLAIM = @:CLAIM_CASENCLAIM1", "CLAIM_CASE", "Linked.LatCombined")
                    .AddParameter("CLAIM_CASENCLAIM1", DbType.Decimal, 0, False, CLAIMCASENCLAIM1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nCase_num = itemData.NumericValue("NCASE_NUM"), .nDeman_type = itemData.NumericValue("NDEMAN_TYPE"), .sStaCase = itemData.StringValue("SSTACASE"), .nNoteDama = itemData.NumericValue("NNOTEDAMA"), .NCLAIM = itemData.NumericValue("NCLAIM")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_CASETblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_CASETblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLAIM_CASETblDataCount(CLAIMCASENCLAIM1 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLAIM_CASE.NCASE_NUM, CLAIM_CASE.NDEMAN_TYPE, CLAIM_CASE.SSTACASE, CLAIM_CASE.NNOTEDAMA, CLAIM_CASE.NCLAIM FROM CLAIM_CASE CLAIM_CASE  WHERE CLAIM_CASE.NCLAIM = @:CLAIM_CASENCLAIM1)", "CLAIM_CASE", "Linked.LatCombined")
                    .AddParameter("CLAIM_CASENCLAIM1", DbType.Decimal, 0, False, CLAIMCASENCLAIM1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_CASETblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_CASETblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CLAIM_CASESelectCommandActionCLAIM_CASE(CLAIMCASENCLAIM1 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CLAIM_CASE.NCASE_NUM) COUNTDATA FROM CLAIM_CASE CLAIM_CASE  WHERE CLAIM_CASE.NCLAIM = @:CLAIM_CASENCLAIM1", "CLAIM_CASE", "Linked.LatCombined")
                    .AddParameter("CLAIM_CASENCLAIM1", DbType.Decimal, 0, False, CLAIMCASENCLAIM1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_CASESelectCommandActionCLAIM_CASE", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_CASESelectCommandActionCLAIM_CASE)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CL_COVERTblDataLoad(CLCOVERNCLAIM1 As Decimal, CLCOVERNCASENUM2 As Decimal, CLCOVERNDEMANTYPE3 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nCase_num = 0, .nModulec = 0, .nCover = 0, .nDeman_type = 0, .nDamProf = 0, .sReservstat = String.Empty, .nReserve = 0, .nCurrency = 0, .nRec_amount = 0, .nPay_amount = 0, .nLoc_cos_re = 0, .sFrantype = String.Empty, .nFra_amount = 0, .SCLIENAME = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CL_COVER.NCASE_NUM, CL_COVER.NMODULEC, CL_COVER.NCOVER, CL_COVER.NDEMAN_TYPE, CL_COVER.NDAMPROF, CL_COVER.SRESERVSTAT, CL_COVER.NRESERVE, CL_COVER.NCURRENCY, CL_COVER.NREC_AMOUNT, CL_COVER.NPAY_AMOUNT, CL_COVER.NLOC_COS_RE, CL_COVER.SFRANTYPE, CL_COVER.NFRA_AMOUNT, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM CL_COVER CL_COVER JOIN CLIENT CLIENT ON CLIENT.SCLIENT = CL_COVER.SCLIENT  WHERE CL_COVER.NCLAIM = @:CL_COVERNCLAIM1 AND CL_COVER.NCASE_NUM = @:CL_COVERNCASE_NUM2 AND CL_COVER.NDEMAN_TYPE = @:CL_COVERNDEMAN_TYPE3", "CL_COVER", "Linked.LatCombined")
                    .AddParameter("CL_COVERNCLAIM1", DbType.Decimal, 0, False, CLCOVERNCLAIM1)
                    .AddParameter("CL_COVERNCASE_NUM2", DbType.Decimal, 0, False, CLCOVERNCASENUM2)
                    .AddParameter("CL_COVERNDEMAN_TYPE3", DbType.Decimal, 0, False, CLCOVERNDEMANTYPE3)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nCase_num = itemData.NumericValue("NCASE_NUM"), .nModulec = itemData.NumericValue("NMODULEC"), .nCover = itemData.NumericValue("NCOVER"), .nDeman_type = itemData.NumericValue("NDEMAN_TYPE"), .nDamProf = itemData.NumericValue("NDAMPROF"), .sReservstat = itemData.StringValue("SRESERVSTAT"), .nReserve = itemData.NumericValue("NRESERVE"), .nCurrency = itemData.NumericValue("NCURRENCY"), .nRec_amount = itemData.NumericValue("NREC_AMOUNT"), .nPay_amount = itemData.NumericValue("NPAY_AMOUNT"), .nLoc_cos_re = itemData.NumericValue("NLOC_COS_RE"), .sFrantype = itemData.StringValue("SFRANTYPE"), .nFra_amount = itemData.NumericValue("NFRA_AMOUNT"), .SCLIENAME = itemData.StringValue("SCLIENAME")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CL_COVERTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CL_COVERTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CL_COVERTblDataCount(CLCOVERNCLAIM1 As Decimal, CLCOVERNCASENUM2 As Decimal, CLCOVERNDEMANTYPE3 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CL_COVER.NCASE_NUM, CL_COVER.NMODULEC, CL_COVER.NCOVER, CL_COVER.NDEMAN_TYPE, CL_COVER.NDAMPROF, CL_COVER.SRESERVSTAT, CL_COVER.NRESERVE, CL_COVER.NCURRENCY, CL_COVER.NREC_AMOUNT, CL_COVER.NPAY_AMOUNT, CL_COVER.NLOC_COS_RE, CL_COVER.SFRANTYPE, CL_COVER.NFRA_AMOUNT, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM CL_COVER CL_COVER JOIN CLIENT CLIENT ON CLIENT.SCLIENT = CL_COVER.SCLIENT  WHERE CL_COVER.NCLAIM = @:CL_COVERNCLAIM1 AND CL_COVER.NCASE_NUM = @:CL_COVERNCASE_NUM2 AND CL_COVER.NDEMAN_TYPE = @:CL_COVERNDEMAN_TYPE3)", "CL_COVER", "Linked.LatCombined")
                    .AddParameter("CL_COVERNCLAIM1", DbType.Decimal, 0, False, CLCOVERNCLAIM1)
                    .AddParameter("CL_COVERNCASE_NUM2", DbType.Decimal, 0, False, CLCOVERNCASENUM2)
                    .AddParameter("CL_COVERNDEMAN_TYPE3", DbType.Decimal, 0, False, CLCOVERNDEMANTYPE3)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CL_COVERTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CL_COVERTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CL_COVERSelectCommandActionCL_COVER(CLCOVERNCLAIM1 As Decimal, CLCOVERNCASENUM2 As Decimal, CLCOVERNDEMANTYPE3 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CL_COVER.NCASE_NUM) COUNTDATA FROM CL_COVER CL_COVER JOIN CLIENT CLIENT ON CLIENT.SCLIENT = CL_COVER.SCLIENT  WHERE CL_COVER.NCLAIM = @:CL_COVERNCLAIM1 AND CL_COVER.NCASE_NUM = @:CL_COVERNCASE_NUM2 AND CL_COVER.NDEMAN_TYPE = @:CL_COVERNDEMAN_TYPE3", "CL_COVER", "Linked.LatCombined")
                    .AddParameter("CL_COVERNCLAIM1", DbType.Decimal, 0, False, CLCOVERNCLAIM1)
                    .AddParameter("CL_COVERNCASE_NUM2", DbType.Decimal, 0, False, CLCOVERNCASENUM2)
                    .AddParameter("CL_COVERNDEMAN_TYPE3", DbType.Decimal, 0, False, CLCOVERNDEMANTYPE3)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CL_COVERSelectCommandActionCL_COVER", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CL_COVERSelectCommandActionCL_COVER)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLAIM_ATTMTblDataLoad(CLAIMATTMNCLAIM1 As Decimal, CLAIMATTMNCASENUM2 As Decimal, CLAIMATTMNDEMANTYPE3 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nCase_num = 0, .nDeman_type = 0, .sClient = String.Empty, .nService = 0, .sIllness = String.Empty, .sClientProf = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLAIM_ATTM.NCASE_NUM, CLAIM_ATTM.NDEMAN_TYPE, CLAIM_ATTM.SCLIENT, CLAIM_ATTM.NSERVICE, CLAIM_ATTM.SILLNESS, CLAIM_ATTM.SCLIENTPROF FROM CLAIM_ATTM CLAIM_ATTM  WHERE CLAIM_ATTM.NCLAIM = @:CLAIM_ATTMNCLAIM1 AND CLAIM_ATTM.NCASE_NUM = @:CLAIM_ATTMNCASE_NUM2 AND CLAIM_ATTM.NDEMAN_TYPE = @:CLAIM_ATTMNDEMAN_TYPE3", "CLAIM_ATTM", "Linked.LatCombined")
                    .AddParameter("CLAIM_ATTMNCLAIM1", DbType.Decimal, 0, False, CLAIMATTMNCLAIM1)
                    .AddParameter("CLAIM_ATTMNCASE_NUM2", DbType.Decimal, 0, False, CLAIMATTMNCASENUM2)
                    .AddParameter("CLAIM_ATTMNDEMAN_TYPE3", DbType.Decimal, 0, False, CLAIMATTMNDEMANTYPE3)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nCase_num = itemData.NumericValue("NCASE_NUM"), .nDeman_type = itemData.NumericValue("NDEMAN_TYPE"), .sClient = itemData.StringValue("SCLIENT"), .nService = itemData.NumericValue("NSERVICE"), .sIllness = itemData.StringValue("SILLNESS"), .sClientProf = itemData.StringValue("SCLIENTPROF")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_ATTMTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_ATTMTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLAIM_ATTMTblDataCount(CLAIMATTMNCLAIM1 As Decimal, CLAIMATTMNCASENUM2 As Decimal, CLAIMATTMNDEMANTYPE3 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLAIM_ATTM.NCASE_NUM, CLAIM_ATTM.NDEMAN_TYPE, CLAIM_ATTM.SCLIENT, CLAIM_ATTM.NSERVICE, CLAIM_ATTM.SILLNESS, CLAIM_ATTM.SCLIENTPROF FROM CLAIM_ATTM CLAIM_ATTM  WHERE CLAIM_ATTM.NCLAIM = @:CLAIM_ATTMNCLAIM1 AND CLAIM_ATTM.NCASE_NUM = @:CLAIM_ATTMNCASE_NUM2 AND CLAIM_ATTM.NDEMAN_TYPE = @:CLAIM_ATTMNDEMAN_TYPE3)", "CLAIM_ATTM", "Linked.LatCombined")
                    .AddParameter("CLAIM_ATTMNCLAIM1", DbType.Decimal, 0, False, CLAIMATTMNCLAIM1)
                    .AddParameter("CLAIM_ATTMNCASE_NUM2", DbType.Decimal, 0, False, CLAIMATTMNCASENUM2)
                    .AddParameter("CLAIM_ATTMNDEMAN_TYPE3", DbType.Decimal, 0, False, CLAIMATTMNDEMANTYPE3)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_ATTMTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_ATTMTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CLAIM_ATTMSelectCommandActionCLAIM_ATTM(CLAIMATTMNCLAIM1 As Decimal, CLAIMATTMNCASENUM2 As Decimal, CLAIMATTMNDEMANTYPE3 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CLAIM_ATTM.NCASE_NUM) COUNTDATA FROM CLAIM_ATTM CLAIM_ATTM  WHERE CLAIM_ATTM.NCLAIM = @:CLAIM_ATTMNCLAIM1 AND CLAIM_ATTM.NCASE_NUM = @:CLAIM_ATTMNCASE_NUM2 AND CLAIM_ATTM.NDEMAN_TYPE = @:CLAIM_ATTMNDEMAN_TYPE3", "CLAIM_ATTM", "Linked.LatCombined")
                    .AddParameter("CLAIM_ATTMNCLAIM1", DbType.Decimal, 0, False, CLAIMATTMNCLAIM1)
                    .AddParameter("CLAIM_ATTMNCASE_NUM2", DbType.Decimal, 0, False, CLAIMATTMNCASENUM2)
                    .AddParameter("CLAIM_ATTMNDEMAN_TYPE3", DbType.Decimal, 0, False, CLAIMATTMNDEMANTYPE3)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_ATTMSelectCommandActionCLAIM_ATTM", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_ATTMSelectCommandActionCLAIM_ATTM)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Claim_autoTblDataLoad(CLAIMAUTONCLAIM1 As String, CLAIMAUTONCASENUM2 As String, CLAIMAUTONDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nCase_num = 0, .nDeman_type = 0, .sAlcoholic = String.Empty, .sPoliceDem = String.Empty, .nInfraction = 0, .nAuto_quant = 0, .nNotenum = 0, .nDeman_typeDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLAIM_AUTO.NCASE_NUM, CLAIM_AUTO.NDEMAN_TYPE, CLAIM_AUTO.SALCOHOLIC, CLAIM_AUTO.SPOLICEDEM, CLAIM_AUTO.NINFRACTION, CLAIM_AUTO.NAUTO_QUANT, CLAIM_AUTO.NNOTENUM, TABLE692.SDESCRIPT NDEMAN_TYPEDESC FROM CLAIM_AUTO CLAIM_AUTO LEFT JOIN TABLE692 TABLE692 ON TABLE692.NDEMAN_TYPE = CLAIM_AUTO.NDEMAN_TYPE  WHERE CLAIM_AUTO.NCLAIM = @:CLAIM_AUTONCLAIM1 AND CLAIM_AUTO.NCASE_NUM = @:CLAIM_AUTONCASE_NUM2 AND CLAIM_AUTO.NDEMAN_TYPE = @:CLAIM_AUTONDEMAN_TYPE3", "CLAIM_AUTO", "Linked.LatCombined")
                    .AddParameter("CLAIM_AUTONCLAIM1", DbType.AnsiStringFixedLength, 0, (CLAIMAUTONCLAIM1 = String.Empty), CLAIMAUTONCLAIM1)
                    .AddParameter("CLAIM_AUTONCASE_NUM2", DbType.AnsiStringFixedLength, 0, (CLAIMAUTONCASENUM2 = String.Empty), CLAIMAUTONCASENUM2)
                    .AddParameter("CLAIM_AUTONDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (CLAIMAUTONDEMANTYPE3 = String.Empty), CLAIMAUTONDEMANTYPE3)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nCase_num = itemData.NumericValue("NCASE_NUM"), .nDeman_type = itemData.NumericValue("NDEMAN_TYPE"), .sAlcoholic = itemData.StringValue("SALCOHOLIC"), .sPoliceDem = itemData.StringValue("SPOLICEDEM"), .nInfraction = itemData.NumericValue("NINFRACTION"), .nAuto_quant = itemData.NumericValue("NAUTO_QUANT"), .nNotenum = itemData.NumericValue("NNOTENUM"), .nDeman_typeDesc = itemData.StringValue("NDEMAN_TYPEDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Claim_autoTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Claim_autoTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Claim_autoTblDataCount(CLAIMAUTONCLAIM1 As String, CLAIMAUTONCASENUM2 As String, CLAIMAUTONDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLAIM_AUTO.NCASE_NUM, CLAIM_AUTO.NDEMAN_TYPE, CLAIM_AUTO.SALCOHOLIC, CLAIM_AUTO.SPOLICEDEM, CLAIM_AUTO.NINFRACTION, CLAIM_AUTO.NAUTO_QUANT, CLAIM_AUTO.NNOTENUM, TABLE692.SDESCRIPT NDEMAN_TYPEDESC FROM CLAIM_AUTO CLAIM_AUTO LEFT JOIN TABLE692 TABLE692 ON TABLE692.NDEMAN_TYPE = CLAIM_AUTO.NDEMAN_TYPE  WHERE CLAIM_AUTO.NCLAIM = @:CLAIM_AUTONCLAIM1 AND CLAIM_AUTO.NCASE_NUM = @:CLAIM_AUTONCASE_NUM2 AND CLAIM_AUTO.NDEMAN_TYPE = @:CLAIM_AUTONDEMAN_TYPE3)", "CLAIM_AUTO", "Linked.LatCombined")
                    .AddParameter("CLAIM_AUTONCLAIM1", DbType.AnsiStringFixedLength, 0, (CLAIMAUTONCLAIM1 = String.Empty), CLAIMAUTONCLAIM1)
                    .AddParameter("CLAIM_AUTONCASE_NUM2", DbType.AnsiStringFixedLength, 0, (CLAIMAUTONCASENUM2 = String.Empty), CLAIMAUTONCASENUM2)
                    .AddParameter("CLAIM_AUTONDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (CLAIMAUTONDEMANTYPE3 = String.Empty), CLAIMAUTONDEMANTYPE3)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Claim_autoTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Claim_autoTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Claim_autoSelectCommandActionCLAIM_AUTO(CLAIMAUTONCLAIM1 As String, CLAIMAUTONCASENUM2 As String, CLAIMAUTONDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CLAIM_AUTO.NCASE_NUM) COUNTDATA FROM CLAIM_AUTO CLAIM_AUTO LEFT JOIN TABLE692 TABLE692 ON TABLE692.NDEMAN_TYPE = CLAIM_AUTO.NDEMAN_TYPE  WHERE CLAIM_AUTO.NCLAIM = @:CLAIM_AUTONCLAIM1 AND CLAIM_AUTO.NCASE_NUM = @:CLAIM_AUTONCASE_NUM2 AND CLAIM_AUTO.NDEMAN_TYPE = @:CLAIM_AUTONDEMAN_TYPE3", "CLAIM_AUTO", "Linked.LatCombined")
                    .AddParameter("CLAIM_AUTONCLAIM1", DbType.AnsiStringFixedLength, 0, (CLAIMAUTONCLAIM1 = String.Empty), CLAIMAUTONCLAIM1)
                    .AddParameter("CLAIM_AUTONCASE_NUM2", DbType.AnsiStringFixedLength, 0, (CLAIMAUTONCASENUM2 = String.Empty), CLAIMAUTONCASENUM2)
                    .AddParameter("CLAIM_AUTONDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (CLAIMAUTONDEMANTYPE3 = String.Empty), CLAIMAUTONDEMANTYPE3)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Claim_autoSelectCommandActionCLAIM_AUTO", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Claim_autoSelectCommandActionCLAIM_AUTO)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLAIM_DAMATblDataLoad(CLAIMDAMANCLAIM1 As String, CLAIMDAMANCASENUM2 As String, CLAIMDAMANDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NDAMAGE_COD = 0, .NMAG_DAM = 0, .NAMOUNT = 0, .NDAMAGE_CODDesc = String.Empty, .NMAG_DAMDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLAIM_DAMA.NDAMAGE_COD, CLAIM_DAMA.NMAG_DAM, CLAIM_DAMA.NAMOUNT, TABLE5579.SDESCRIPT NDAMAGE_CODDESC, TABLE5674.SDESCRIPT NMAG_DAMDESC FROM CLAIM_DAMA CLAIM_DAMA LEFT JOIN TABLE5579 TABLE5579 ON TABLE5579.NAUTO_PART = CLAIM_DAMA.NDAMAGE_COD LEFT JOIN TABLE5674 TABLE5674 ON TABLE5674.NMAG_DAM = CLAIM_DAMA.NMAG_DAM  WHERE CLAIM_DAMA.NCLAIM = @:CLAIM_DAMANCLAIM1 AND CLAIM_DAMA.NCASE_NUM = @:CLAIM_DAMANCASE_NUM2 AND CLAIM_DAMA.NDEMAN_TYPE = @:CLAIM_DAMANDEMAN_TYPE3", "CLAIM_DAMA", "Linked.LatCombined")
                    .AddParameter("CLAIM_DAMANCLAIM1", DbType.AnsiStringFixedLength, 0, (CLAIMDAMANCLAIM1 = String.Empty), CLAIMDAMANCLAIM1)
                    .AddParameter("CLAIM_DAMANCASE_NUM2", DbType.AnsiStringFixedLength, 0, (CLAIMDAMANCASENUM2 = String.Empty), CLAIMDAMANCASENUM2)
                    .AddParameter("CLAIM_DAMANDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (CLAIMDAMANDEMANTYPE3 = String.Empty), CLAIMDAMANDEMANTYPE3)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NDAMAGE_COD = itemData.NumericValue("NDAMAGE_COD"), .NMAG_DAM = itemData.NumericValue("NMAG_DAM"), .NAMOUNT = itemData.NumericValue("NAMOUNT"), .NDAMAGE_CODDesc = itemData.StringValue("NDAMAGE_CODDESC"), .NMAG_DAMDesc = itemData.StringValue("NMAG_DAMDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_DAMATblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_DAMATblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLAIM_DAMATblDataCount(CLAIMDAMANCLAIM1 As String, CLAIMDAMANCASENUM2 As String, CLAIMDAMANDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLAIM_DAMA.NDAMAGE_COD, CLAIM_DAMA.NMAG_DAM, CLAIM_DAMA.NAMOUNT, TABLE5579.SDESCRIPT NDAMAGE_CODDESC, TABLE5674.SDESCRIPT NMAG_DAMDESC FROM CLAIM_DAMA CLAIM_DAMA LEFT JOIN TABLE5579 TABLE5579 ON TABLE5579.NAUTO_PART = CLAIM_DAMA.NDAMAGE_COD LEFT JOIN TABLE5674 TABLE5674 ON TABLE5674.NMAG_DAM = CLAIM_DAMA.NMAG_DAM  WHERE CLAIM_DAMA.NCLAIM = @:CLAIM_DAMANCLAIM1 AND CLAIM_DAMA.NCASE_NUM = @:CLAIM_DAMANCASE_NUM2 AND CLAIM_DAMA.NDEMAN_TYPE = @:CLAIM_DAMANDEMAN_TYPE3)", "CLAIM_DAMA", "Linked.LatCombined")
                    .AddParameter("CLAIM_DAMANCLAIM1", DbType.AnsiStringFixedLength, 0, (CLAIMDAMANCLAIM1 = String.Empty), CLAIMDAMANCLAIM1)
                    .AddParameter("CLAIM_DAMANCASE_NUM2", DbType.AnsiStringFixedLength, 0, (CLAIMDAMANCASENUM2 = String.Empty), CLAIMDAMANCASENUM2)
                    .AddParameter("CLAIM_DAMANDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (CLAIMDAMANDEMANTYPE3 = String.Empty), CLAIMDAMANDEMANTYPE3)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_DAMATblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_DAMATblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CLAIM_DAMASelectCommandActionCLAIM_DAMA(CLAIMDAMANCLAIM1 As String, CLAIMDAMANCASENUM2 As String, CLAIMDAMANDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CLAIM_DAMA.NDAMAGE_COD) COUNTDATA FROM CLAIM_DAMA CLAIM_DAMA LEFT JOIN TABLE5579 TABLE5579 ON TABLE5579.NAUTO_PART = CLAIM_DAMA.NDAMAGE_COD LEFT JOIN TABLE5674 TABLE5674 ON TABLE5674.NMAG_DAM = CLAIM_DAMA.NMAG_DAM  WHERE CLAIM_DAMA.NCLAIM = @:CLAIM_DAMANCLAIM1 AND CLAIM_DAMA.NCASE_NUM = @:CLAIM_DAMANCASE_NUM2 AND CLAIM_DAMA.NDEMAN_TYPE = @:CLAIM_DAMANDEMAN_TYPE3", "CLAIM_DAMA", "Linked.LatCombined")
                    .AddParameter("CLAIM_DAMANCLAIM1", DbType.AnsiStringFixedLength, 0, (CLAIMDAMANCLAIM1 = String.Empty), CLAIMDAMANCLAIM1)
                    .AddParameter("CLAIM_DAMANCASE_NUM2", DbType.AnsiStringFixedLength, 0, (CLAIMDAMANCASENUM2 = String.Empty), CLAIMDAMANCASENUM2)
                    .AddParameter("CLAIM_DAMANDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (CLAIMDAMANDEMANTYPE3 = String.Empty), CLAIMDAMANDEMANTYPE3)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_DAMASelectCommandActionCLAIM_DAMA", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_DAMASelectCommandActionCLAIM_DAMA)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLAIM_THIRTblDataLoad(CLAIMTHIRNCLAIM1 As String, CLAIMTHIRNCASENUM2 As String, CLAIMTHIRNDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.SLICENSE_TY = String.Empty, .SREGIST = String.Empty, .SCHASSIS = String.Empty, .SMOTOR = String.Empty, .STHIR_POLIC = String.Empty, .STHIR_CLAIM = String.Empty, .SRECOV_IND = String.Empty, .NTHIR_COMP = 0, .NBLAME = 0, .SLICENSE_TYDesc = String.Empty, .NBLAMEDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLAIM_THIR.SLICENSE_TY, CLAIM_THIR.SREGIST, CLAIM_THIR.SCHASSIS, CLAIM_THIR.SMOTOR, CLAIM_THIR.STHIR_POLIC, CLAIM_THIR.STHIR_CLAIM, CLAIM_THIR.SRECOV_IND, CLAIM_THIR.NTHIR_COMP, CLAIM_THIR.NBLAME, TABLE80.SDESCRIPT SLICENSE_TYDESC, TABLE204.SDESCRIPT NBLAMEDESC FROM CLAIM_THIR CLAIM_THIR LEFT JOIN TABLE80 TABLE80 ON TABLE80.SLICENSE_TY = CLAIM_THIR.SLICENSE_TY LEFT JOIN TABLE204 TABLE204 ON TABLE204.NBLAME = CLAIM_THIR.NBLAME  WHERE CLAIM_THIR.NCLAIM = @:CLAIM_THIRNCLAIM1 AND CLAIM_THIR.NCASE_NUM = @:CLAIM_THIRNCASE_NUM2 AND CLAIM_THIR.NDEMAN_TYPE = @:CLAIM_THIRNDEMAN_TYPE3", "CLAIM_THIR", "Linked.LatCombined")
                    .AddParameter("CLAIM_THIRNCLAIM1", DbType.AnsiStringFixedLength, 0, (CLAIMTHIRNCLAIM1 = String.Empty), CLAIMTHIRNCLAIM1)
                    .AddParameter("CLAIM_THIRNCASE_NUM2", DbType.AnsiStringFixedLength, 0, (CLAIMTHIRNCASENUM2 = String.Empty), CLAIMTHIRNCASENUM2)
                    .AddParameter("CLAIM_THIRNDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (CLAIMTHIRNDEMANTYPE3 = String.Empty), CLAIMTHIRNDEMANTYPE3)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.SLICENSE_TY = itemData.StringValue("SLICENSE_TY"), .SREGIST = itemData.StringValue("SREGIST"), .SCHASSIS = itemData.StringValue("SCHASSIS"), .SMOTOR = itemData.StringValue("SMOTOR"), .STHIR_POLIC = itemData.StringValue("STHIR_POLIC"), .STHIR_CLAIM = itemData.StringValue("STHIR_CLAIM"), .SRECOV_IND = itemData.StringValue("SRECOV_IND"), .NTHIR_COMP = itemData.NumericValue("NTHIR_COMP"), .NBLAME = itemData.NumericValue("NBLAME"), .SLICENSE_TYDesc = itemData.StringValue("SLICENSE_TYDESC"), .NBLAMEDesc = itemData.StringValue("NBLAMEDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_THIRTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_THIRTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLAIM_THIRTblDataCount(CLAIMTHIRNCLAIM1 As String, CLAIMTHIRNCASENUM2 As String, CLAIMTHIRNDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLAIM_THIR.SLICENSE_TY, CLAIM_THIR.SREGIST, CLAIM_THIR.SCHASSIS, CLAIM_THIR.SMOTOR, CLAIM_THIR.STHIR_POLIC, CLAIM_THIR.STHIR_CLAIM, CLAIM_THIR.SRECOV_IND, CLAIM_THIR.NTHIR_COMP, CLAIM_THIR.NBLAME, TABLE80.SDESCRIPT SLICENSE_TYDESC, TABLE204.SDESCRIPT NBLAMEDESC FROM CLAIM_THIR CLAIM_THIR LEFT JOIN TABLE80 TABLE80 ON TABLE80.SLICENSE_TY = CLAIM_THIR.SLICENSE_TY LEFT JOIN TABLE204 TABLE204 ON TABLE204.NBLAME = CLAIM_THIR.NBLAME  WHERE CLAIM_THIR.NCLAIM = @:CLAIM_THIRNCLAIM1 AND CLAIM_THIR.NCASE_NUM = @:CLAIM_THIRNCASE_NUM2 AND CLAIM_THIR.NDEMAN_TYPE = @:CLAIM_THIRNDEMAN_TYPE3)", "CLAIM_THIR", "Linked.LatCombined")
                    .AddParameter("CLAIM_THIRNCLAIM1", DbType.AnsiStringFixedLength, 0, (CLAIMTHIRNCLAIM1 = String.Empty), CLAIMTHIRNCLAIM1)
                    .AddParameter("CLAIM_THIRNCASE_NUM2", DbType.AnsiStringFixedLength, 0, (CLAIMTHIRNCASENUM2 = String.Empty), CLAIMTHIRNCASENUM2)
                    .AddParameter("CLAIM_THIRNDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (CLAIMTHIRNDEMANTYPE3 = String.Empty), CLAIMTHIRNDEMANTYPE3)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_THIRTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_THIRTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CLAIM_THIRSelectCommandActionCLAIM_THIR(CLAIMTHIRNCLAIM1 As String, CLAIMTHIRNCASENUM2 As String, CLAIMTHIRNDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CLAIM_THIR.NTHIR_COMP) COUNTDATA FROM CLAIM_THIR CLAIM_THIR LEFT JOIN TABLE80 TABLE80 ON TABLE80.SLICENSE_TY = CLAIM_THIR.SLICENSE_TY LEFT JOIN TABLE204 TABLE204 ON TABLE204.NBLAME = CLAIM_THIR.NBLAME  WHERE CLAIM_THIR.NCLAIM = @:CLAIM_THIRNCLAIM1 AND CLAIM_THIR.NCASE_NUM = @:CLAIM_THIRNCASE_NUM2 AND CLAIM_THIR.NDEMAN_TYPE = @:CLAIM_THIRNDEMAN_TYPE3", "CLAIM_THIR", "Linked.LatCombined")
                    .AddParameter("CLAIM_THIRNCLAIM1", DbType.AnsiStringFixedLength, 0, (CLAIMTHIRNCLAIM1 = String.Empty), CLAIMTHIRNCLAIM1)
                    .AddParameter("CLAIM_THIRNCASE_NUM2", DbType.AnsiStringFixedLength, 0, (CLAIMTHIRNCASENUM2 = String.Empty), CLAIMTHIRNCASENUM2)
                    .AddParameter("CLAIM_THIRNDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (CLAIMTHIRNDEMANTYPE3 = String.Empty), CLAIMTHIRNDEMANTYPE3)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_THIRSelectCommandActionCLAIM_THIR", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_THIRSelectCommandActionCLAIM_THIR)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Life_claimTblDataLoad(LIFECLAIMNCLAIM1 As String, LIFECLAIMNCASENUM2 As String, LIFECLAIMNDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nCase_num = 0, .nDeman_type = 0, .nIn_lif_typ = 0, .nCla_li_typ = 0, .nMonth_amou = 0, .dEnd_date = Date.MinValue, .nDeman_typeDesc = String.Empty, .nIn_lif_typDesc = String.Empty, .nCla_li_typDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT LIFE_CLAIM.NCASE_NUM, LIFE_CLAIM.NDEMAN_TYPE, LIFE_CLAIM.NIN_LIF_TYP, LIFE_CLAIM.NCLA_LI_TYP, LIFE_CLAIM.NMONTH_AMOU, LIFE_CLAIM.DEND_DATE, TABLE692.SDESCRIPT NDEMAN_TYPEDESC, TABLE211.SDESCRIPT NIN_LIF_TYPDESC, TABLE210.SDESCRIPT NCLA_LI_TYPDESC FROM LIFE_CLAIM LIFE_CLAIM LEFT JOIN TABLE692 TABLE692 ON TABLE692.NDEMAN_TYPE = LIFE_CLAIM.NDEMAN_TYPE LEFT JOIN TABLE211 TABLE211 ON TABLE211.NIN_LIF_TYP = LIFE_CLAIM.NIN_LIF_TYP LEFT JOIN TABLE210 TABLE210 ON TABLE210.NCLA_LI_TYP = LIFE_CLAIM.NCLA_LI_TYP  WHERE LIFE_CLAIM.NCLAIM = @:LIFE_CLAIMNCLAIM1 AND LIFE_CLAIM.NCASE_NUM = @:LIFE_CLAIMNCASE_NUM2 AND LIFE_CLAIM.NDEMAN_TYPE = @:LIFE_CLAIMNDEMAN_TYPE3", "LIFE_CLAIM", "Linked.LatCombined")
                    .AddParameter("LIFE_CLAIMNCLAIM1", DbType.AnsiStringFixedLength, 0, (LIFECLAIMNCLAIM1 = String.Empty), LIFECLAIMNCLAIM1)
                    .AddParameter("LIFE_CLAIMNCASE_NUM2", DbType.AnsiStringFixedLength, 0, (LIFECLAIMNCASENUM2 = String.Empty), LIFECLAIMNCASENUM2)
                    .AddParameter("LIFE_CLAIMNDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (LIFECLAIMNDEMANTYPE3 = String.Empty), LIFECLAIMNDEMANTYPE3)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nCase_num = itemData.NumericValue("NCASE_NUM"), .nDeman_type = itemData.NumericValue("NDEMAN_TYPE"), .nIn_lif_typ = itemData.NumericValue("NIN_LIF_TYP"), .nCla_li_typ = itemData.NumericValue("NCLA_LI_TYP"), .nMonth_amou = itemData.NumericValue("NMONTH_AMOU"), .dEnd_date = itemData.DateTimeValue("DEND_DATE"), .nDeman_typeDesc = itemData.StringValue("NDEMAN_TYPEDESC"), .nIn_lif_typDesc = itemData.StringValue("NIN_LIF_TYPDESC"), .nCla_li_typDesc = itemData.StringValue("NCLA_LI_TYPDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Life_claimTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Life_claimTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Life_claimTblDataCount(LIFECLAIMNCLAIM1 As String, LIFECLAIMNCASENUM2 As String, LIFECLAIMNDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT LIFE_CLAIM.NCASE_NUM, LIFE_CLAIM.NDEMAN_TYPE, LIFE_CLAIM.NIN_LIF_TYP, LIFE_CLAIM.NCLA_LI_TYP, LIFE_CLAIM.NMONTH_AMOU, LIFE_CLAIM.DEND_DATE, TABLE692.SDESCRIPT NDEMAN_TYPEDESC, TABLE211.SDESCRIPT NIN_LIF_TYPDESC, TABLE210.SDESCRIPT NCLA_LI_TYPDESC FROM LIFE_CLAIM LIFE_CLAIM LEFT JOIN TABLE692 TABLE692 ON TABLE692.NDEMAN_TYPE = LIFE_CLAIM.NDEMAN_TYPE LEFT JOIN TABLE211 TABLE211 ON TABLE211.NIN_LIF_TYP = LIFE_CLAIM.NIN_LIF_TYP LEFT JOIN TABLE210 TABLE210 ON TABLE210.NCLA_LI_TYP = LIFE_CLAIM.NCLA_LI_TYP  WHERE LIFE_CLAIM.NCLAIM = @:LIFE_CLAIMNCLAIM1 AND LIFE_CLAIM.NCASE_NUM = @:LIFE_CLAIMNCASE_NUM2 AND LIFE_CLAIM.NDEMAN_TYPE = @:LIFE_CLAIMNDEMAN_TYPE3)", "LIFE_CLAIM", "Linked.LatCombined")
                    .AddParameter("LIFE_CLAIMNCLAIM1", DbType.AnsiStringFixedLength, 0, (LIFECLAIMNCLAIM1 = String.Empty), LIFECLAIMNCLAIM1)
                    .AddParameter("LIFE_CLAIMNCASE_NUM2", DbType.AnsiStringFixedLength, 0, (LIFECLAIMNCASENUM2 = String.Empty), LIFECLAIMNCASENUM2)
                    .AddParameter("LIFE_CLAIMNDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (LIFECLAIMNDEMANTYPE3 = String.Empty), LIFECLAIMNDEMANTYPE3)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Life_claimTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Life_claimTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Life_claimSelectCommandActionLIFE_CLAIM(LIFECLAIMNCLAIM1 As String, LIFECLAIMNCASENUM2 As String, LIFECLAIMNDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(LIFE_CLAIM.NCASE_NUM) COUNTDATA FROM LIFE_CLAIM LIFE_CLAIM LEFT JOIN TABLE692 TABLE692 ON TABLE692.NDEMAN_TYPE = LIFE_CLAIM.NDEMAN_TYPE LEFT JOIN TABLE211 TABLE211 ON TABLE211.NIN_LIF_TYP = LIFE_CLAIM.NIN_LIF_TYP LEFT JOIN TABLE210 TABLE210 ON TABLE210.NCLA_LI_TYP = LIFE_CLAIM.NCLA_LI_TYP  WHERE LIFE_CLAIM.NCLAIM = @:LIFE_CLAIMNCLAIM1 AND LIFE_CLAIM.NCASE_NUM = @:LIFE_CLAIMNCASE_NUM2 AND LIFE_CLAIM.NDEMAN_TYPE = @:LIFE_CLAIMNDEMAN_TYPE3", "LIFE_CLAIM", "Linked.LatCombined")
                    .AddParameter("LIFE_CLAIMNCLAIM1", DbType.AnsiStringFixedLength, 0, (LIFECLAIMNCLAIM1 = String.Empty), LIFECLAIMNCLAIM1)
                    .AddParameter("LIFE_CLAIMNCASE_NUM2", DbType.AnsiStringFixedLength, 0, (LIFECLAIMNCASENUM2 = String.Empty), LIFECLAIMNCASENUM2)
                    .AddParameter("LIFE_CLAIMNDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (LIFECLAIMNDEMANTYPE3 = String.Empty), LIFECLAIMNDEMANTYPE3)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Life_claimSelectCommandActionLIFE_CLAIM", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Life_claimSelectCommandActionLIFE_CLAIM)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLAIMBENEFTblDataLoad(CLAIMBENEFNCLAIM1 As String, CLAIMBENEFNCASENUM2 As String, CLAIMBENEFNDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NBENE_TYPE = 0, .SCLIENT = String.Empty, .NRELATION = 0, .NPARTICIP = 0, .SDEMANDANT = String.Empty, .NOFFICE_PAY = 0, .SCLIENT_REP = String.Empty, .NOFFICEAGEN_PAY = 0, .NBENE_TYPEDesc = String.Empty, .NRELATIONDesc = String.Empty, .NOFFICE_PAYDesc = String.Empty, .NOFFICEAGEN_PAYDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLAIMBENEF.NBENE_TYPE, CLAIMBENEF.SCLIENT, CLAIMBENEF.NRELATION, CLAIMBENEF.NPARTICIP, CLAIMBENEF.SDEMANDANT, CLAIMBENEF.NOFFICE_PAY, CLAIMBENEF.SCLIENT_REP, CLAIMBENEF.NOFFICEAGEN_PAY, TABLE184.SDESCRIPT NBENE_TYPEDESC, TABLE15.SDESCRIPT NRELATIONDESC, TABLE9.SDESCRIPT NOFFICE_PAYDESC, TABLE5556.SDESCRIPT NOFFICEAGEN_PAYDESC FROM CLAIMBENEF CLAIMBENEF LEFT JOIN TABLE184 TABLE184 ON TABLE184.NBENE_TYPE = CLAIMBENEF.NBENE_TYPE LEFT JOIN TABLE15 TABLE15 ON TABLE15.NRELASHIP = CLAIMBENEF.NRELATION LEFT JOIN TABLE9 TABLE9 ON TABLE9.NOFFICE = CLAIMBENEF.NOFFICE_PAY LEFT JOIN TABLE5556 TABLE5556 ON TABLE5556.NOFFICEAGEN = CLAIMBENEF.NOFFICEAGEN_PAY  WHERE CLAIMBENEF.NCLAIM = @:CLAIMBENEFNCLAIM1 AND CLAIMBENEF.NCASE_NUM = @:CLAIMBENEFNCASE_NUM2 AND CLAIMBENEF.NDEMAN_TYPE = @:CLAIMBENEFNDEMAN_TYPE3", "CLAIMBENEF", "Linked.LatCombined")
                    .AddParameter("CLAIMBENEFNCLAIM1", DbType.AnsiStringFixedLength, 0, (CLAIMBENEFNCLAIM1 = String.Empty), CLAIMBENEFNCLAIM1)
                    .AddParameter("CLAIMBENEFNCASE_NUM2", DbType.AnsiStringFixedLength, 0, (CLAIMBENEFNCASENUM2 = String.Empty), CLAIMBENEFNCASENUM2)
                    .AddParameter("CLAIMBENEFNDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (CLAIMBENEFNDEMANTYPE3 = String.Empty), CLAIMBENEFNDEMANTYPE3)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NBENE_TYPE = itemData.NumericValue("NBENE_TYPE"), .SCLIENT = itemData.StringValue("SCLIENT"), .NRELATION = itemData.NumericValue("NRELATION"), .NPARTICIP = itemData.NumericValue("NPARTICIP"), .SDEMANDANT = itemData.StringValue("SDEMANDANT"), .NOFFICE_PAY = itemData.NumericValue("NOFFICE_PAY"), .SCLIENT_REP = itemData.StringValue("SCLIENT_REP"), .NOFFICEAGEN_PAY = itemData.NumericValue("NOFFICEAGEN_PAY"), .NBENE_TYPEDesc = itemData.StringValue("NBENE_TYPEDESC"), .NRELATIONDesc = itemData.StringValue("NRELATIONDESC"), .NOFFICE_PAYDesc = itemData.StringValue("NOFFICE_PAYDESC"), .NOFFICEAGEN_PAYDesc = itemData.StringValue("NOFFICEAGEN_PAYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIMBENEFTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIMBENEFTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLAIMBENEFTblDataCount(CLAIMBENEFNCLAIM1 As String, CLAIMBENEFNCASENUM2 As String, CLAIMBENEFNDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLAIMBENEF.NBENE_TYPE, CLAIMBENEF.SCLIENT, CLAIMBENEF.NRELATION, CLAIMBENEF.NPARTICIP, CLAIMBENEF.SDEMANDANT, CLAIMBENEF.NOFFICE_PAY, CLAIMBENEF.SCLIENT_REP, CLAIMBENEF.NOFFICEAGEN_PAY, TABLE184.SDESCRIPT NBENE_TYPEDESC, TABLE15.SDESCRIPT NRELATIONDESC, TABLE9.SDESCRIPT NOFFICE_PAYDESC, TABLE5556.SDESCRIPT NOFFICEAGEN_PAYDESC FROM CLAIMBENEF CLAIMBENEF LEFT JOIN TABLE184 TABLE184 ON TABLE184.NBENE_TYPE = CLAIMBENEF.NBENE_TYPE LEFT JOIN TABLE15 TABLE15 ON TABLE15.NRELASHIP = CLAIMBENEF.NRELATION LEFT JOIN TABLE9 TABLE9 ON TABLE9.NOFFICE = CLAIMBENEF.NOFFICE_PAY LEFT JOIN TABLE5556 TABLE5556 ON TABLE5556.NOFFICEAGEN = CLAIMBENEF.NOFFICEAGEN_PAY  WHERE CLAIMBENEF.NCLAIM = @:CLAIMBENEFNCLAIM1 AND CLAIMBENEF.NCASE_NUM = @:CLAIMBENEFNCASE_NUM2 AND CLAIMBENEF.NDEMAN_TYPE = @:CLAIMBENEFNDEMAN_TYPE3)", "CLAIMBENEF", "Linked.LatCombined")
                    .AddParameter("CLAIMBENEFNCLAIM1", DbType.AnsiStringFixedLength, 0, (CLAIMBENEFNCLAIM1 = String.Empty), CLAIMBENEFNCLAIM1)
                    .AddParameter("CLAIMBENEFNCASE_NUM2", DbType.AnsiStringFixedLength, 0, (CLAIMBENEFNCASENUM2 = String.Empty), CLAIMBENEFNCASENUM2)
                    .AddParameter("CLAIMBENEFNDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (CLAIMBENEFNDEMANTYPE3 = String.Empty), CLAIMBENEFNDEMANTYPE3)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIMBENEFTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIMBENEFTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CLAIMBENEFSelectCommandActionCLAIMBENEF(CLAIMBENEFNCLAIM1 As String, CLAIMBENEFNCASENUM2 As String, CLAIMBENEFNDEMANTYPE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CLAIMBENEF.NBENE_TYPE) COUNTDATA FROM CLAIMBENEF CLAIMBENEF LEFT JOIN TABLE184 TABLE184 ON TABLE184.NBENE_TYPE = CLAIMBENEF.NBENE_TYPE LEFT JOIN TABLE15 TABLE15 ON TABLE15.NRELASHIP = CLAIMBENEF.NRELATION LEFT JOIN TABLE9 TABLE9 ON TABLE9.NOFFICE = CLAIMBENEF.NOFFICE_PAY LEFT JOIN TABLE5556 TABLE5556 ON TABLE5556.NOFFICEAGEN = CLAIMBENEF.NOFFICEAGEN_PAY  WHERE CLAIMBENEF.NCLAIM = @:CLAIMBENEFNCLAIM1 AND CLAIMBENEF.NCASE_NUM = @:CLAIMBENEFNCASE_NUM2 AND CLAIMBENEF.NDEMAN_TYPE = @:CLAIMBENEFNDEMAN_TYPE3", "CLAIMBENEF", "Linked.LatCombined")
                    .AddParameter("CLAIMBENEFNCLAIM1", DbType.AnsiStringFixedLength, 0, (CLAIMBENEFNCLAIM1 = String.Empty), CLAIMBENEFNCLAIM1)
                    .AddParameter("CLAIMBENEFNCASE_NUM2", DbType.AnsiStringFixedLength, 0, (CLAIMBENEFNCASENUM2 = String.Empty), CLAIMBENEFNCASENUM2)
                    .AddParameter("CLAIMBENEFNDEMAN_TYPE3", DbType.AnsiStringFixedLength, 0, (CLAIMBENEFNDEMANTYPE3 = String.Empty), CLAIMBENEFNDEMANTYPE3)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIMBENEFSelectCommandActionCLAIMBENEF", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIMBENEFSelectCommandActionCLAIMBENEF)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLAIM_HISTblDataLoad(CLAIMHISNCLAIM1 As Decimal, CLAIMHISNCASENUM2 As Decimal, CLAIMHISNDEMANTYPE3 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nCase_num = 0, .dOperdate = Date.MinValue, .nTransac = 0, .nOper_type = 0, .nPay_type = 0, .nPay_form = 0, .nServ_order = 0, .sInd_order = String.Empty, .sOrder_num = String.Empty, .sExecuted = String.Empty, .nAmount = 0, .nCurrency = 0, .SCLIENAME = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLAIM_HIS.NCASE_NUM, CLAIM_HIS.DOPERDATE, CLAIM_HIS.NTRANSAC, CLAIM_HIS.NOPER_TYPE, CLAIM_HIS.NPAY_TYPE, CLAIM_HIS.NPAY_FORM, CLAIM_HIS.NSERV_ORDER, CLAIM_HIS.SIND_ORDER, CLAIM_HIS.SORDER_NUM, CLAIM_HIS.SEXECUTED, CLAIM_HIS.NAMOUNT, CLAIM_HIS.NCURRENCY, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM CLAIM_HIS CLAIM_HIS JOIN CLIENT CLIENT ON CLIENT.SCLIENT = CLAIM_HIS.SCLIENT  WHERE CLAIM_HIS.NCLAIM = @:CLAIM_HISNCLAIM1 AND CLAIM_HIS.NCASE_NUM = @:CLAIM_HISNCASE_NUM2 AND CLAIM_HIS.NDEMAN_TYPE = @:CLAIM_HISNDEMAN_TYPE3", "CLAIM_HIS", "Linked.LatCombined")
                    .AddParameter("CLAIM_HISNCLAIM1", DbType.Decimal, 0, False, CLAIMHISNCLAIM1)
                    .AddParameter("CLAIM_HISNCASE_NUM2", DbType.Decimal, 0, False, CLAIMHISNCASENUM2)
                    .AddParameter("CLAIM_HISNDEMAN_TYPE3", DbType.Decimal, 0, False, CLAIMHISNDEMANTYPE3)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nCase_num = itemData.NumericValue("NCASE_NUM"), .dOperdate = itemData.DateTimeValue("DOPERDATE"), .nTransac = itemData.NumericValue("NTRANSAC"), .nOper_type = itemData.NumericValue("NOPER_TYPE"), .nPay_type = itemData.NumericValue("NPAY_TYPE"), .nPay_form = itemData.NumericValue("NPAY_FORM"), .nServ_order = itemData.NumericValue("NSERV_ORDER"), .sInd_order = itemData.StringValue("SIND_ORDER"), .sOrder_num = itemData.StringValue("SORDER_NUM"), .sExecuted = itemData.StringValue("SEXECUTED"), .nAmount = itemData.NumericValue("NAMOUNT"), .nCurrency = itemData.NumericValue("NCURRENCY"), .SCLIENAME = itemData.StringValue("SCLIENAME")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_HISTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_HISTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLAIM_HISTblDataCount(CLAIMHISNCLAIM1 As Decimal, CLAIMHISNCASENUM2 As Decimal, CLAIMHISNDEMANTYPE3 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLAIM_HIS.NCASE_NUM, CLAIM_HIS.DOPERDATE, CLAIM_HIS.NTRANSAC, CLAIM_HIS.NOPER_TYPE, CLAIM_HIS.NPAY_TYPE, CLAIM_HIS.NPAY_FORM, CLAIM_HIS.NSERV_ORDER, CLAIM_HIS.SIND_ORDER, CLAIM_HIS.SORDER_NUM, CLAIM_HIS.SEXECUTED, CLAIM_HIS.NAMOUNT, CLAIM_HIS.NCURRENCY, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM CLAIM_HIS CLAIM_HIS JOIN CLIENT CLIENT ON CLIENT.SCLIENT = CLAIM_HIS.SCLIENT  WHERE CLAIM_HIS.NCLAIM = @:CLAIM_HISNCLAIM1 AND CLAIM_HIS.NCASE_NUM = @:CLAIM_HISNCASE_NUM2 AND CLAIM_HIS.NDEMAN_TYPE = @:CLAIM_HISNDEMAN_TYPE3)", "CLAIM_HIS", "Linked.LatCombined")
                    .AddParameter("CLAIM_HISNCLAIM1", DbType.Decimal, 0, False, CLAIMHISNCLAIM1)
                    .AddParameter("CLAIM_HISNCASE_NUM2", DbType.Decimal, 0, False, CLAIMHISNCASENUM2)
                    .AddParameter("CLAIM_HISNDEMAN_TYPE3", DbType.Decimal, 0, False, CLAIMHISNDEMANTYPE3)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_HISTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_HISTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CLAIM_HISSelectCommandActionCLAIM_HIS(CLAIMHISNCLAIM1 As Decimal, CLAIMHISNCASENUM2 As Decimal, CLAIMHISNDEMANTYPE3 As Decimal) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CLAIM_HIS.NCASE_NUM) COUNTDATA FROM CLAIM_HIS CLAIM_HIS JOIN CLIENT CLIENT ON CLIENT.SCLIENT = CLAIM_HIS.SCLIENT  WHERE CLAIM_HIS.NCLAIM = @:CLAIM_HISNCLAIM1 AND CLAIM_HIS.NCASE_NUM = @:CLAIM_HISNCASE_NUM2 AND CLAIM_HIS.NDEMAN_TYPE = @:CLAIM_HISNDEMAN_TYPE3", "CLAIM_HIS", "Linked.LatCombined")
                    .AddParameter("CLAIM_HISNCLAIM1", DbType.Decimal, 0, False, CLAIMHISNCLAIM1)
                    .AddParameter("CLAIM_HISNCASE_NUM2", DbType.Decimal, 0, False, CLAIMHISNCASENUM2)
                    .AddParameter("CLAIM_HISNDEMAN_TYPE3", DbType.Decimal, 0, False, CLAIMHISNDEMANTYPE3)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLAIM_HISSelectCommandActionCLAIM_HIS", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLAIM_HISSelectCommandActionCLAIM_HIS)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function AddressTblDataLoad(ADDRESSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.SRECTYPE = String.Empty, .nProvince = 0, .nLocal = 0, .nCountry = 0, .nMunicipality = 0, .sDescAdd = String.Empty, .sE_mail = String.Empty, .sStreet = String.Empty, .sStreet1 = String.Empty, .sBuild = String.Empty, .sDepartment = String.Empty, .sPobox = String.Empty, .NRECOWNER = 0, .SKEYADDRESS = String.Empty, .DEFFECDATE = Date.MinValue, .nProvinceDesc = String.Empty, .nLocalDesc = String.Empty, .nCountryDesc = String.Empty, .nMunicipalityDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT ADDRESS.SRECTYPE, ADDRESS.NPROVINCE, ADDRESS.NLOCAL, ADDRESS.NCOUNTRY, ADDRESS.NMUNICIPALITY, ADDRESS.SDESCADD, ADDRESS.SE_MAIL, ADDRESS.SSTREET, ADDRESS.SSTREET1, ADDRESS.SBUILD, ADDRESS.SDEPARTMENT, ADDRESS.SPOBOX, ADDRESS.NRECOWNER, ADDRESS.SKEYADDRESS, ADDRESS.DEFFECDATE, PROVINCE.SDESCRIPT NPROVINCEDESC, TAB_LOCAT.SDESCRIPT NLOCALDESC, TABLE66.SDESCRIPT NCOUNTRYDESC, MUNICIPALITY.SDESCRIPT NMUNICIPALITYDESC FROM ADDRESS ADDRESS LEFT JOIN PROVINCE PROVINCE ON PROVINCE.NPROVINCE = ADDRESS.NPROVINCE LEFT JOIN TAB_LOCAT TAB_LOCAT ON TAB_LOCAT.NLOCAL = ADDRESS.NLOCAL LEFT JOIN TABLE66 TABLE66 ON TABLE66.NCOUNTRY = ADDRESS.NCOUNTRY LEFT JOIN MUNICIPALITY MUNICIPALITY ON MUNICIPALITY.NMUNICIPALITY = ADDRESS.NMUNICIPALITY  WHERE ADDRESS.SCLIENT = @:ADDRESSSCLIENT1", "ADDRESS", "Linked.LatCombined")
                    .AddParameter("ADDRESSSCLIENT1", DbType.AnsiStringFixedLength, 0, (ADDRESSSCLIENT1 = String.Empty), ADDRESSSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.SRECTYPE = itemData.StringValue("SRECTYPE"), .nProvince = itemData.NumericValue("NPROVINCE"), .nLocal = itemData.NumericValue("NLOCAL"), .nCountry = itemData.NumericValue("NCOUNTRY"), .nMunicipality = itemData.NumericValue("NMUNICIPALITY"), .sDescAdd = itemData.StringValue("SDESCADD"), .sE_mail = itemData.StringValue("SE_MAIL"), .sStreet = itemData.StringValue("SSTREET"), .sStreet1 = itemData.StringValue("SSTREET1"), .sBuild = itemData.StringValue("SBUILD"), .sDepartment = itemData.StringValue("SDEPARTMENT"), .sPobox = itemData.StringValue("SPOBOX"), .NRECOWNER = itemData.NumericValue("NRECOWNER"), .SKEYADDRESS = itemData.StringValue("SKEYADDRESS"), .DEFFECDATE = itemData.DateTimeValue("DEFFECDATE"), .nProvinceDesc = itemData.StringValue("NPROVINCEDESC"), .nLocalDesc = itemData.StringValue("NLOCALDESC"), .nCountryDesc = itemData.StringValue("NCOUNTRYDESC"), .nMunicipalityDesc = itemData.StringValue("NMUNICIPALITYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "AddressTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (AddressTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function AddressTblDataCount(ADDRESSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT ADDRESS.SRECTYPE, ADDRESS.NPROVINCE, ADDRESS.NLOCAL, ADDRESS.NCOUNTRY, ADDRESS.NMUNICIPALITY, ADDRESS.SDESCADD, ADDRESS.SE_MAIL, ADDRESS.SSTREET, ADDRESS.SSTREET1, ADDRESS.SBUILD, ADDRESS.SDEPARTMENT, ADDRESS.SPOBOX, ADDRESS.NRECOWNER, ADDRESS.SKEYADDRESS, ADDRESS.DEFFECDATE, PROVINCE.SDESCRIPT NPROVINCEDESC, TAB_LOCAT.SDESCRIPT NLOCALDESC, TABLE66.SDESCRIPT NCOUNTRYDESC, MUNICIPALITY.SDESCRIPT NMUNICIPALITYDESC FROM ADDRESS ADDRESS LEFT JOIN PROVINCE PROVINCE ON PROVINCE.NPROVINCE = ADDRESS.NPROVINCE LEFT JOIN TAB_LOCAT TAB_LOCAT ON TAB_LOCAT.NLOCAL = ADDRESS.NLOCAL LEFT JOIN TABLE66 TABLE66 ON TABLE66.NCOUNTRY = ADDRESS.NCOUNTRY LEFT JOIN MUNICIPALITY MUNICIPALITY ON MUNICIPALITY.NMUNICIPALITY = ADDRESS.NMUNICIPALITY  WHERE ADDRESS.SCLIENT = @:ADDRESSSCLIENT1)", "ADDRESS", "Linked.LatCombined")
                    .AddParameter("ADDRESSSCLIENT1", DbType.AnsiStringFixedLength, 0, (ADDRESSSCLIENT1 = String.Empty), ADDRESSSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "AddressTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (AddressTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function AddressSelectCommandActionADDRESS(ADDRESSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(ADDRESS.NPROVINCE) COUNTDATA FROM ADDRESS ADDRESS LEFT JOIN PROVINCE PROVINCE ON PROVINCE.NPROVINCE = ADDRESS.NPROVINCE LEFT JOIN TAB_LOCAT TAB_LOCAT ON TAB_LOCAT.NLOCAL = ADDRESS.NLOCAL LEFT JOIN TABLE66 TABLE66 ON TABLE66.NCOUNTRY = ADDRESS.NCOUNTRY LEFT JOIN MUNICIPALITY MUNICIPALITY ON MUNICIPALITY.NMUNICIPALITY = ADDRESS.NMUNICIPALITY  WHERE ADDRESS.SCLIENT = @:ADDRESSSCLIENT1", "ADDRESS", "Linked.LatCombined")
                    .AddParameter("ADDRESSSCLIENT1", DbType.AnsiStringFixedLength, 0, (ADDRESSSCLIENT1 = String.Empty), ADDRESSSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "AddressSelectCommandActionADDRESS", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (AddressSelectCommandActionADDRESS)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function PHONESTblDataLoad(PHONESNRECOWNER1 As String, PHONESSKEYADDRESS2 As String, PHONESDEFFECDATE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NPHONE_TYPE = 0, .NAREA_CODE = 0, .SPHONE = String.Empty, .NEXTENS1 = 0, .NEXTENS2 = 0, .NBESTTIMETOCALL = 0, .NPHONE_TYPEDesc = String.Empty, .NBESTTIMETOCALLDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT PHONES.NPHONE_TYPE, PHONES.NAREA_CODE, PHONES.SPHONE, PHONES.NEXTENS1, PHONES.NEXTENS2, PHONES.NBESTTIMETOCALL, TABLE564.SDESCRIPT NPHONE_TYPEDESC, TABLE8060.SDESCRIPT NBESTTIMETOCALLDESC FROM PHONES PHONES LEFT JOIN TABLE564 TABLE564 ON TABLE564.NPHONE_TYPE = PHONES.NPHONE_TYPE LEFT JOIN TABLE8060 TABLE8060 ON TABLE8060.NBESTTIMETOCALL = PHONES.NBESTTIMETOCALL  WHERE PHONES.NRECOWNER = @:PHONESNRECOWNER1 AND PHONES.SKEYADDRESS = @:PHONESSKEYADDRESS2 AND PHONES.DEFFECDATE = @:PHONESDEFFECDATE3", "PHONES", "Linked.LatCombined")
                    .AddParameter("PHONESNRECOWNER1", DbType.AnsiStringFixedLength, 0, (PHONESNRECOWNER1 = String.Empty), PHONESNRECOWNER1)
                    .AddParameter("PHONESSKEYADDRESS2", DbType.AnsiStringFixedLength, 0, (PHONESSKEYADDRESS2 = String.Empty), PHONESSKEYADDRESS2)
                    .AddParameter("PHONESDEFFECDATE3", DbType.AnsiStringFixedLength, 0, (PHONESDEFFECDATE3 = String.Empty), PHONESDEFFECDATE3)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NPHONE_TYPE = itemData.NumericValue("NPHONE_TYPE"), .NAREA_CODE = itemData.NumericValue("NAREA_CODE"), .SPHONE = itemData.StringValue("SPHONE"), .NEXTENS1 = itemData.NumericValue("NEXTENS1"), .NEXTENS2 = itemData.NumericValue("NEXTENS2"), .NBESTTIMETOCALL = itemData.NumericValue("NBESTTIMETOCALL"), .NPHONE_TYPEDesc = itemData.StringValue("NPHONE_TYPEDESC"), .NBESTTIMETOCALLDesc = itemData.StringValue("NBESTTIMETOCALLDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "PHONESTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PHONESTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function PHONESTblDataCount(PHONESNRECOWNER1 As String, PHONESSKEYADDRESS2 As String, PHONESDEFFECDATE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT PHONES.NPHONE_TYPE, PHONES.NAREA_CODE, PHONES.SPHONE, PHONES.NEXTENS1, PHONES.NEXTENS2, PHONES.NBESTTIMETOCALL, TABLE564.SDESCRIPT NPHONE_TYPEDESC, TABLE8060.SDESCRIPT NBESTTIMETOCALLDESC FROM PHONES PHONES LEFT JOIN TABLE564 TABLE564 ON TABLE564.NPHONE_TYPE = PHONES.NPHONE_TYPE LEFT JOIN TABLE8060 TABLE8060 ON TABLE8060.NBESTTIMETOCALL = PHONES.NBESTTIMETOCALL  WHERE PHONES.NRECOWNER = @:PHONESNRECOWNER1 AND PHONES.SKEYADDRESS = @:PHONESSKEYADDRESS2 AND PHONES.DEFFECDATE = @:PHONESDEFFECDATE3)", "PHONES", "Linked.LatCombined")
                    .AddParameter("PHONESNRECOWNER1", DbType.AnsiStringFixedLength, 0, (PHONESNRECOWNER1 = String.Empty), PHONESNRECOWNER1)
                    .AddParameter("PHONESSKEYADDRESS2", DbType.AnsiStringFixedLength, 0, (PHONESSKEYADDRESS2 = String.Empty), PHONESSKEYADDRESS2)
                    .AddParameter("PHONESDEFFECDATE3", DbType.AnsiStringFixedLength, 0, (PHONESDEFFECDATE3 = String.Empty), PHONESDEFFECDATE3)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "PHONESTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PHONESTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function PHONESSelectCommandActionPHONES(PHONESNRECOWNER1 As String, PHONESSKEYADDRESS2 As String, PHONESDEFFECDATE3 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(PHONES.NPHONE_TYPE) COUNTDATA FROM PHONES PHONES LEFT JOIN TABLE564 TABLE564 ON TABLE564.NPHONE_TYPE = PHONES.NPHONE_TYPE LEFT JOIN TABLE8060 TABLE8060 ON TABLE8060.NBESTTIMETOCALL = PHONES.NBESTTIMETOCALL  WHERE PHONES.NRECOWNER = @:PHONESNRECOWNER1 AND PHONES.SKEYADDRESS = @:PHONESSKEYADDRESS2 AND PHONES.DEFFECDATE = @:PHONESDEFFECDATE3", "PHONES", "Linked.LatCombined")
                    .AddParameter("PHONESNRECOWNER1", DbType.AnsiStringFixedLength, 0, (PHONESNRECOWNER1 = String.Empty), PHONESNRECOWNER1)
                    .AddParameter("PHONESSKEYADDRESS2", DbType.AnsiStringFixedLength, 0, (PHONESSKEYADDRESS2 = String.Empty), PHONESSKEYADDRESS2)
                    .AddParameter("PHONESDEFFECDATE3", DbType.AnsiStringFixedLength, 0, (PHONESDEFFECDATE3 = String.Empty), PHONESDEFFECDATE3)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "PHONESSelectCommandActionPHONES", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (PHONESSelectCommandActionPHONES)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLIDOCUMENTSTblDataLoad(CLIDOCUMENTSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NTYPCLIENTDOC = 0, .SCLINUMDOCU = String.Empty, .DISSUEDAT = Date.MinValue, .DEXPIRDAT = Date.MinValue}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CLIDOCUMENTS.NTYPCLIENTDOC, CLIDOCUMENTS.SCLINUMDOCU, CLIDOCUMENTS.DISSUEDAT, CLIDOCUMENTS.DEXPIRDAT FROM CLIDOCUMENTS CLIDOCUMENTS  WHERE CLIDOCUMENTS.SCLIENT = @:CLIDOCUMENTSSCLIENT1", "CLIDOCUMENTS", "Linked.LatCombined")
                    .AddParameter("CLIDOCUMENTSSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLIDOCUMENTSSCLIENT1 = String.Empty), CLIDOCUMENTSSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NTYPCLIENTDOC = itemData.NumericValue("NTYPCLIENTDOC"), .SCLINUMDOCU = itemData.StringValue("SCLINUMDOCU"), .DISSUEDAT = itemData.DateTimeValue("DISSUEDAT"), .DEXPIRDAT = itemData.DateTimeValue("DEXPIRDAT")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLIDOCUMENTSTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLIDOCUMENTSTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CLIDOCUMENTSTblDataCount(CLIDOCUMENTSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CLIDOCUMENTS.NTYPCLIENTDOC, CLIDOCUMENTS.SCLINUMDOCU, CLIDOCUMENTS.DISSUEDAT, CLIDOCUMENTS.DEXPIRDAT FROM CLIDOCUMENTS CLIDOCUMENTS  WHERE CLIDOCUMENTS.SCLIENT = @:CLIDOCUMENTSSCLIENT1)", "CLIDOCUMENTS", "Linked.LatCombined")
                    .AddParameter("CLIDOCUMENTSSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLIDOCUMENTSSCLIENT1 = String.Empty), CLIDOCUMENTSSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLIDOCUMENTSTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLIDOCUMENTSTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CLIDOCUMENTSSelectCommandActionCLIDOCUMENTS(CLIDOCUMENTSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CLIDOCUMENTS.NTYPCLIENTDOC) COUNTDATA FROM CLIDOCUMENTS CLIDOCUMENTS  WHERE CLIDOCUMENTS.SCLIENT = @:CLIDOCUMENTSSCLIENT1", "CLIDOCUMENTS", "Linked.LatCombined")
                    .AddParameter("CLIDOCUMENTSSCLIENT1", DbType.AnsiStringFixedLength, 0, (CLIDOCUMENTSSCLIENT1 = String.Empty), CLIDOCUMENTSSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CLIDOCUMENTSSelectCommandActionCLIDOCUMENTS", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CLIDOCUMENTSSelectCommandActionCLIDOCUMENTS)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function DIR_DEBIT_CLITblDataLoad(DIRDEBITCLISCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.NBANKEXT = 0, .SACCOUNT = String.Empty, .NBILL_DAY = 0, .DNULLDATE = Date.MinValue, .DEFFECDATE = Date.MinValue, .NBANKEXTDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT DIR_DEBIT_CLI.NBANKEXT, DIR_DEBIT_CLI.SACCOUNT, DIR_DEBIT_CLI.NBILL_DAY, DIR_DEBIT_CLI.DNULLDATE, DIR_DEBIT_CLI.DEFFECDATE, TABLE7.SDESCRIPT NBANKEXTDESC FROM DIR_DEBIT_CLI DIR_DEBIT_CLI LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = DIR_DEBIT_CLI.NBANKEXT  WHERE DIR_DEBIT_CLI.SCLIENT = @:DIR_DEBIT_CLISCLIENT1", "DIR_DEBIT_CLI", "Linked.LatCombined")
                    .AddParameter("DIR_DEBIT_CLISCLIENT1", DbType.AnsiStringFixedLength, 0, (DIRDEBITCLISCLIENT1 = String.Empty), DIRDEBITCLISCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.NBANKEXT = itemData.NumericValue("NBANKEXT"), .SACCOUNT = itemData.StringValue("SACCOUNT"), .NBILL_DAY = itemData.NumericValue("NBILL_DAY"), .DNULLDATE = itemData.DateTimeValue("DNULLDATE"), .DEFFECDATE = itemData.DateTimeValue("DEFFECDATE"), .NBANKEXTDesc = itemData.StringValue("NBANKEXTDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "DIR_DEBIT_CLITblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (DIR_DEBIT_CLITblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function DIR_DEBIT_CLITblDataCount(DIRDEBITCLISCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT DIR_DEBIT_CLI.NBANKEXT, DIR_DEBIT_CLI.SACCOUNT, DIR_DEBIT_CLI.NBILL_DAY, DIR_DEBIT_CLI.DNULLDATE, DIR_DEBIT_CLI.DEFFECDATE, TABLE7.SDESCRIPT NBANKEXTDESC FROM DIR_DEBIT_CLI DIR_DEBIT_CLI LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = DIR_DEBIT_CLI.NBANKEXT  WHERE DIR_DEBIT_CLI.SCLIENT = @:DIR_DEBIT_CLISCLIENT1)", "DIR_DEBIT_CLI", "Linked.LatCombined")
                    .AddParameter("DIR_DEBIT_CLISCLIENT1", DbType.AnsiStringFixedLength, 0, (DIRDEBITCLISCLIENT1 = String.Empty), DIRDEBITCLISCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "DIR_DEBIT_CLITblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (DIR_DEBIT_CLITblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function DIR_DEBIT_CLISelectCommandActionDIR_DEBIT_CLI(DIRDEBITCLISCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(DIR_DEBIT_CLI.NBANKEXT) COUNTDATA FROM DIR_DEBIT_CLI DIR_DEBIT_CLI LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = DIR_DEBIT_CLI.NBANKEXT  WHERE DIR_DEBIT_CLI.SCLIENT = @:DIR_DEBIT_CLISCLIENT1", "DIR_DEBIT_CLI", "Linked.LatCombined")
                    .AddParameter("DIR_DEBIT_CLISCLIENT1", DbType.AnsiStringFixedLength, 0, (DIRDEBITCLISCLIENT1 = String.Empty), DIRDEBITCLISCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "DIR_DEBIT_CLISelectCommandActionDIR_DEBIT_CLI", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (DIR_DEBIT_CLISelectCommandActionDIR_DEBIT_CLI)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Bk_accountTblDataLoad(BKACCOUNTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nTyp_acc = 0, .nBankExt = 0, .sAccount = String.Empty, .sStatregt = String.Empty, .nTyp_accDesc = String.Empty, .nBankExtDesc = String.Empty, .sStatregtDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT BK_ACCOUNT.NTYP_ACC, BK_ACCOUNT.NBANKEXT, BK_ACCOUNT.SACCOUNT, BK_ACCOUNT.SSTATREGT, TABLE190.SDESCRIPT NTYP_ACCDESC, TABLE7.SDESCRIPT NBANKEXTDESC, TABLE26.SDESCRIPT SSTATREGTDESC FROM BK_ACCOUNT BK_ACCOUNT LEFT JOIN TABLE190 TABLE190 ON TABLE190.NACC_TYPE = BK_ACCOUNT.NTYP_ACC LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = BK_ACCOUNT.NBANKEXT LEFT JOIN TABLE26 TABLE26 ON TABLE26.NCODIGINT = BK_ACCOUNT.SSTATREGT  WHERE BK_ACCOUNT.SCLIENT = @:BK_ACCOUNTSCLIENT1", "BK_ACCOUNT", "Linked.LatCombined")
                    .AddParameter("BK_ACCOUNTSCLIENT1", DbType.AnsiStringFixedLength, 0, (BKACCOUNTSCLIENT1 = String.Empty), BKACCOUNTSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nTyp_acc = itemData.NumericValue("NTYP_ACC"), .nBankExt = itemData.NumericValue("NBANKEXT"), .sAccount = itemData.StringValue("SACCOUNT"), .sStatregt = itemData.StringValue("SSTATREGT"), .nTyp_accDesc = itemData.StringValue("NTYP_ACCDESC"), .nBankExtDesc = itemData.StringValue("NBANKEXTDESC"), .sStatregtDesc = itemData.StringValue("SSTATREGTDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Bk_accountTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Bk_accountTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Bk_accountTblDataCount(BKACCOUNTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT BK_ACCOUNT.NTYP_ACC, BK_ACCOUNT.NBANKEXT, BK_ACCOUNT.SACCOUNT, BK_ACCOUNT.SSTATREGT, TABLE190.SDESCRIPT NTYP_ACCDESC, TABLE7.SDESCRIPT NBANKEXTDESC, TABLE26.SDESCRIPT SSTATREGTDESC FROM BK_ACCOUNT BK_ACCOUNT LEFT JOIN TABLE190 TABLE190 ON TABLE190.NACC_TYPE = BK_ACCOUNT.NTYP_ACC LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = BK_ACCOUNT.NBANKEXT LEFT JOIN TABLE26 TABLE26 ON TABLE26.NCODIGINT = BK_ACCOUNT.SSTATREGT  WHERE BK_ACCOUNT.SCLIENT = @:BK_ACCOUNTSCLIENT1)", "BK_ACCOUNT", "Linked.LatCombined")
                    .AddParameter("BK_ACCOUNTSCLIENT1", DbType.AnsiStringFixedLength, 0, (BKACCOUNTSCLIENT1 = String.Empty), BKACCOUNTSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Bk_accountTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Bk_accountTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Bk_accountSelectCommandActionBK_ACCOUNT(BKACCOUNTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(BK_ACCOUNT.NTYP_ACC) COUNTDATA FROM BK_ACCOUNT BK_ACCOUNT LEFT JOIN TABLE190 TABLE190 ON TABLE190.NACC_TYPE = BK_ACCOUNT.NTYP_ACC LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = BK_ACCOUNT.NBANKEXT LEFT JOIN TABLE26 TABLE26 ON TABLE26.NCODIGINT = BK_ACCOUNT.SSTATREGT  WHERE BK_ACCOUNT.SCLIENT = @:BK_ACCOUNTSCLIENT1", "BK_ACCOUNT", "Linked.LatCombined")
                    .AddParameter("BK_ACCOUNTSCLIENT1", DbType.AnsiStringFixedLength, 0, (BKACCOUNTSCLIENT1 = String.Empty), BKACCOUNTSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Bk_accountSelectCommandActionBK_ACCOUNT", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Bk_accountSelectCommandActionBK_ACCOUNT)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Cred_cardTblDataLoad(CREDCARDSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.sCredi_Card = String.Empty, .nCard_type = 0, .nBankExt = 0, .dCardExpir = Date.MinValue, .nCard_typeDesc = String.Empty, .nBankExtDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CRED_CARD.SCREDI_CARD, CRED_CARD.NCARD_TYPE, CRED_CARD.NBANKEXT, CRED_CARD.DCARDEXPIR, TABLE183.SDESCRIPT NCARD_TYPEDESC, TABLE7.SDESCRIPT NBANKEXTDESC FROM CRED_CARD CRED_CARD LEFT JOIN TABLE183 TABLE183 ON TABLE183.NCARD_TYPE = CRED_CARD.NCARD_TYPE LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = CRED_CARD.NBANKEXT  WHERE CRED_CARD.SCLIENT = @:CRED_CARDSCLIENT1", "CRED_CARD", "Linked.LatCombined")
                    .AddParameter("CRED_CARDSCLIENT1", DbType.AnsiStringFixedLength, 0, (CREDCARDSCLIENT1 = String.Empty), CREDCARDSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.sCredi_Card = itemData.StringValue("SCREDI_CARD"), .nCard_type = itemData.NumericValue("NCARD_TYPE"), .nBankExt = itemData.NumericValue("NBANKEXT"), .dCardExpir = itemData.DateTimeValue("DCARDEXPIR"), .nCard_typeDesc = itemData.StringValue("NCARD_TYPEDESC"), .nBankExtDesc = itemData.StringValue("NBANKEXTDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Cred_cardTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Cred_cardTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Cred_cardTblDataCount(CREDCARDSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CRED_CARD.SCREDI_CARD, CRED_CARD.NCARD_TYPE, CRED_CARD.NBANKEXT, CRED_CARD.DCARDEXPIR, TABLE183.SDESCRIPT NCARD_TYPEDESC, TABLE7.SDESCRIPT NBANKEXTDESC FROM CRED_CARD CRED_CARD LEFT JOIN TABLE183 TABLE183 ON TABLE183.NCARD_TYPE = CRED_CARD.NCARD_TYPE LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = CRED_CARD.NBANKEXT  WHERE CRED_CARD.SCLIENT = @:CRED_CARDSCLIENT1)", "CRED_CARD", "Linked.LatCombined")
                    .AddParameter("CRED_CARDSCLIENT1", DbType.AnsiStringFixedLength, 0, (CREDCARDSCLIENT1 = String.Empty), CREDCARDSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Cred_cardTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Cred_cardTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Cred_cardSelectCommandActionCRED_CARD(CREDCARDSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CRED_CARD.NCARD_TYPE) COUNTDATA FROM CRED_CARD CRED_CARD LEFT JOIN TABLE183 TABLE183 ON TABLE183.NCARD_TYPE = CRED_CARD.NCARD_TYPE LEFT JOIN TABLE7 TABLE7 ON TABLE7.NBANK_CODE = CRED_CARD.NBANKEXT  WHERE CRED_CARD.SCLIENT = @:CRED_CARDSCLIENT1", "CRED_CARD", "Linked.LatCombined")
                    .AddParameter("CRED_CARDSCLIENT1", DbType.AnsiStringFixedLength, 0, (CREDCARDSCLIENT1 = String.Empty), CREDCARDSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Cred_cardSelectCommandActionCRED_CARD", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Cred_cardSelectCommandActionCRED_CARD)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Curr_accTblDataLoad(CURRACCSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nTyp_acco = 0, .nDebit = 0, .nCredit = 0, .nBalance = 0, .nCurrency = 0, .nTyp_accoDesc = String.Empty, .nCurrencyDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CURR_ACC.NTYP_ACCO, CURR_ACC.NDEBIT, CURR_ACC.NCREDIT, CURR_ACC.NBALANCE, CURR_ACC.NCURRENCY, TABLE400.SDESCRIPT NTYP_ACCODESC, TABLE11.SDESCRIPT NCURRENCYDESC FROM CURR_ACC CURR_ACC LEFT JOIN TABLE400 TABLE400 ON TABLE400.NTYP_ACCO = CURR_ACC.NTYP_ACCO LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = CURR_ACC.NCURRENCY  WHERE CURR_ACC.SCLIENT = @:CURR_ACCSCLIENT1", "CURR_ACC", "Linked.LatCombined")
                    .AddParameter("CURR_ACCSCLIENT1", DbType.AnsiStringFixedLength, 0, (CURRACCSCLIENT1 = String.Empty), CURRACCSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nTyp_acco = itemData.NumericValue("NTYP_ACCO"), .nDebit = itemData.NumericValue("NDEBIT"), .nCredit = itemData.NumericValue("NCREDIT"), .nBalance = itemData.NumericValue("NBALANCE"), .nCurrency = itemData.NumericValue("NCURRENCY"), .nTyp_accoDesc = itemData.StringValue("NTYP_ACCODESC"), .nCurrencyDesc = itemData.StringValue("NCURRENCYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Curr_accTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Curr_accTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Curr_accTblDataCount(CURRACCSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CURR_ACC.NTYP_ACCO, CURR_ACC.NDEBIT, CURR_ACC.NCREDIT, CURR_ACC.NBALANCE, CURR_ACC.NCURRENCY, TABLE400.SDESCRIPT NTYP_ACCODESC, TABLE11.SDESCRIPT NCURRENCYDESC FROM CURR_ACC CURR_ACC LEFT JOIN TABLE400 TABLE400 ON TABLE400.NTYP_ACCO = CURR_ACC.NTYP_ACCO LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = CURR_ACC.NCURRENCY  WHERE CURR_ACC.SCLIENT = @:CURR_ACCSCLIENT1)", "CURR_ACC", "Linked.LatCombined")
                    .AddParameter("CURR_ACCSCLIENT1", DbType.AnsiStringFixedLength, 0, (CURRACCSCLIENT1 = String.Empty), CURRACCSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Curr_accTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Curr_accTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Curr_accSelectCommandActionCURR_ACC(CURRACCSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CURR_ACC.NTYP_ACCO) COUNTDATA FROM CURR_ACC CURR_ACC LEFT JOIN TABLE400 TABLE400 ON TABLE400.NTYP_ACCO = CURR_ACC.NTYP_ACCO LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = CURR_ACC.NCURRENCY  WHERE CURR_ACC.SCLIENT = @:CURR_ACCSCLIENT1", "CURR_ACC", "Linked.LatCombined")
                    .AddParameter("CURR_ACCSCLIENT1", DbType.AnsiStringFixedLength, 0, (CURRACCSCLIENT1 = String.Empty), CURRACCSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Curr_accSelectCommandActionCURR_ACC", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Curr_accSelectCommandActionCURR_ACC)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function SportTblDataLoad(SPORTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nSport = 0, .nSportDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT SPORT.NSPORT, TABLE512.SDESCRIPT NSPORTDESC FROM SPORT SPORT LEFT JOIN TABLE512 TABLE512 ON TABLE512.NSPORT = SPORT.NSPORT  WHERE SPORT.SCLIENT = @:SPORTSCLIENT1", "SPORT", "Linked.LatCombined")
                    .AddParameter("SPORTSCLIENT1", DbType.AnsiStringFixedLength, 0, (SPORTSCLIENT1 = String.Empty), SPORTSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nSport = itemData.NumericValue("NSPORT"), .nSportDesc = itemData.StringValue("NSPORTDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "SportTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (SportTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function SportTblDataCount(SPORTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT SPORT.NSPORT, TABLE512.SDESCRIPT NSPORTDESC FROM SPORT SPORT LEFT JOIN TABLE512 TABLE512 ON TABLE512.NSPORT = SPORT.NSPORT  WHERE SPORT.SCLIENT = @:SPORTSCLIENT1)", "SPORT", "Linked.LatCombined")
                    .AddParameter("SPORTSCLIENT1", DbType.AnsiStringFixedLength, 0, (SPORTSCLIENT1 = String.Empty), SPORTSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "SportTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (SportTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function SportSelectCommandActionSPORT(SPORTSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(SPORT.NSPORT) COUNTDATA FROM SPORT SPORT LEFT JOIN TABLE512 TABLE512 ON TABLE512.NSPORT = SPORT.NSPORT  WHERE SPORT.SCLIENT = @:SPORTSCLIENT1", "SPORT", "Linked.LatCombined")
                    .AddParameter("SPORTSCLIENT1", DbType.AnsiStringFixedLength, 0, (SPORTSCLIENT1 = String.Empty), SPORTSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "SportSelectCommandActionSPORT", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (SportSelectCommandActionSPORT)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function HobbyTblDataLoad(HOBBYSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nHobby = 0, .nHobbyDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT HOBBY.NHOBBY, TABLE5506.SDESCRIPT NHOBBYDESC FROM HOBBY HOBBY LEFT JOIN TABLE5506 TABLE5506 ON TABLE5506.NHOBBY = HOBBY.NHOBBY  WHERE HOBBY.SCLIENT = @:HOBBYSCLIENT1", "HOBBY", "Linked.LatCombined")
                    .AddParameter("HOBBYSCLIENT1", DbType.AnsiStringFixedLength, 0, (HOBBYSCLIENT1 = String.Empty), HOBBYSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nHobby = itemData.NumericValue("NHOBBY"), .nHobbyDesc = itemData.StringValue("NHOBBYDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "HobbyTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (HobbyTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function HobbyTblDataCount(HOBBYSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT HOBBY.NHOBBY, TABLE5506.SDESCRIPT NHOBBYDESC FROM HOBBY HOBBY LEFT JOIN TABLE5506 TABLE5506 ON TABLE5506.NHOBBY = HOBBY.NHOBBY  WHERE HOBBY.SCLIENT = @:HOBBYSCLIENT1)", "HOBBY", "Linked.LatCombined")
                    .AddParameter("HOBBYSCLIENT1", DbType.AnsiStringFixedLength, 0, (HOBBYSCLIENT1 = String.Empty), HOBBYSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "HobbyTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (HobbyTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function HobbySelectCommandActionHOBBY(HOBBYSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(HOBBY.NHOBBY) COUNTDATA FROM HOBBY HOBBY LEFT JOIN TABLE5506 TABLE5506 ON TABLE5506.NHOBBY = HOBBY.NHOBBY  WHERE HOBBY.SCLIENT = @:HOBBYSCLIENT1", "HOBBY", "Linked.LatCombined")
                    .AddParameter("HOBBYSCLIENT1", DbType.AnsiStringFixedLength, 0, (HOBBYSCLIENT1 = String.Empty), HOBBYSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "HobbySelectCommandActionHOBBY", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (HobbySelectCommandActionHOBBY)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Financ_cliTblDataLoad(FINANCCLISCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nConcept = 0, .nAmount = 0, .nCurrency = 0, .nUnits = 0, .nFinanStat = 0, .nConceptDesc = String.Empty, .nCurrencyDesc = String.Empty, .nFinanStatDesc = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT FINANC_CLI.NCONCEPT, FINANC_CLI.NAMOUNT, FINANC_CLI.NCURRENCY, FINANC_CLI.NUNITS, FINANC_CLI.NFINANSTAT, TABLE416.SDESCRIPT NCONCEPTDESC, TABLE11.SDESCRIPT NCURRENCYDESC, TABLE185.SDESCRIPT NFINANSTATDESC FROM FINANC_CLI FINANC_CLI LEFT JOIN TABLE416 TABLE416 ON TABLE416.NCONCEPT = FINANC_CLI.NCONCEPT LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = FINANC_CLI.NCURRENCY LEFT JOIN TABLE185 TABLE185 ON TABLE185.NFINANSTAT = FINANC_CLI.NFINANSTAT  WHERE FINANC_CLI.SCLIENT = @:FINANC_CLISCLIENT1", "FINANC_CLI", "Linked.LatCombined")
                    .AddParameter("FINANC_CLISCLIENT1", DbType.AnsiStringFixedLength, 0, (FINANCCLISCLIENT1 = String.Empty), FINANCCLISCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nConcept = itemData.NumericValue("NCONCEPT"), .nAmount = itemData.NumericValue("NAMOUNT"), .nCurrency = itemData.NumericValue("NCURRENCY"), .nUnits = itemData.NumericValue("NUNITS"), .nFinanStat = itemData.NumericValue("NFINANSTAT"), .nConceptDesc = itemData.StringValue("NCONCEPTDESC"), .nCurrencyDesc = itemData.StringValue("NCURRENCYDESC"), .nFinanStatDesc = itemData.StringValue("NFINANSTATDESC")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Financ_cliTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Financ_cliTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Financ_cliTblDataCount(FINANCCLISCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT FINANC_CLI.NCONCEPT, FINANC_CLI.NAMOUNT, FINANC_CLI.NCURRENCY, FINANC_CLI.NUNITS, FINANC_CLI.NFINANSTAT, TABLE416.SDESCRIPT NCONCEPTDESC, TABLE11.SDESCRIPT NCURRENCYDESC, TABLE185.SDESCRIPT NFINANSTATDESC FROM FINANC_CLI FINANC_CLI LEFT JOIN TABLE416 TABLE416 ON TABLE416.NCONCEPT = FINANC_CLI.NCONCEPT LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = FINANC_CLI.NCURRENCY LEFT JOIN TABLE185 TABLE185 ON TABLE185.NFINANSTAT = FINANC_CLI.NFINANSTAT  WHERE FINANC_CLI.SCLIENT = @:FINANC_CLISCLIENT1)", "FINANC_CLI", "Linked.LatCombined")
                    .AddParameter("FINANC_CLISCLIENT1", DbType.AnsiStringFixedLength, 0, (FINANCCLISCLIENT1 = String.Empty), FINANCCLISCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Financ_cliTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Financ_cliTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function Financ_cliSelectCommandActionFINANC_CLI(FINANCCLISCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(FINANC_CLI.NCONCEPT) COUNTDATA FROM FINANC_CLI FINANC_CLI LEFT JOIN TABLE416 TABLE416 ON TABLE416.NCONCEPT = FINANC_CLI.NCONCEPT LEFT JOIN TABLE11 TABLE11 ON TABLE11.NCODIGINT = FINANC_CLI.NCURRENCY LEFT JOIN TABLE185 TABLE185 ON TABLE185.NFINANSTAT = FINANC_CLI.NFINANSTAT  WHERE FINANC_CLI.SCLIENT = @:FINANC_CLISCLIENT1", "FINANC_CLI", "Linked.LatCombined")
                    .AddParameter("FINANC_CLISCLIENT1", DbType.AnsiStringFixedLength, 0, (FINANCCLISCLIENT1 = String.Empty), FINANCCLISCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Financ_cliSelectCommandActionFINANC_CLI", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Financ_cliSelectCommandActionFINANC_CLI)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function RELATIONSTblDataLoad(RELATIONSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.nRelaship = 0, .SCLIENAME = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT RELATIONS.NRELASHIP, RELATIONS.SCLIENTR, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM RELATIONS RELATIONS JOIN CLIENT CLIENT ON CLIENT.SCLIENT = RELATIONS.SCLIENTR  WHERE RELATIONS.SCLIENT = @:RELATIONSSCLIENT1", "RELATIONS", "Linked.LatCombined")
                    .AddParameter("RELATIONSSCLIENT1", DbType.AnsiStringFixedLength, 0, (RELATIONSSCLIENT1 = String.Empty), RELATIONSSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.nRelaship = itemData.NumericValue("NRELASHIP"), .SCLIENAME = itemData.StringValue("SCLIENAME")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "RELATIONSTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (RELATIONSTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function RELATIONSTblDataCount(RELATIONSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT RELATIONS.NRELASHIP, RELATIONS.SCLIENTR, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM RELATIONS RELATIONS JOIN CLIENT CLIENT ON CLIENT.SCLIENT = RELATIONS.SCLIENTR  WHERE RELATIONS.SCLIENT = @:RELATIONSSCLIENT1)", "RELATIONS", "Linked.LatCombined")
                    .AddParameter("RELATIONSSCLIENT1", DbType.AnsiStringFixedLength, 0, (RELATIONSSCLIENT1 = String.Empty), RELATIONSSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "RELATIONSTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (RELATIONSTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function RELATIONSSelectCommandActionRELATIONS(RELATIONSSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(RELATIONS.NRELASHIP) COUNTDATA FROM RELATIONS RELATIONS JOIN CLIENT CLIENT ON CLIENT.SCLIENT = RELATIONS.SCLIENTR  WHERE RELATIONS.SCLIENT = @:RELATIONSSCLIENT1", "RELATIONS", "Linked.LatCombined")
                    .AddParameter("RELATIONSSCLIENT1", DbType.AnsiStringFixedLength, 0, (RELATIONSSCLIENT1 = String.Empty), RELATIONSSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "RELATIONSSelectCommandActionRELATIONS", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (RELATIONSSelectCommandActionRELATIONS)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CHEQUESTblDataLoad(CHEQUESSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.SREQUEST_TY = String.Empty, .NREQUEST_NU = 0, .SCHEQUE = String.Empty, .NAMOUNT = 0, .NCURRENCYPAY = 0, .NCONCEPT = 0, .NSTA_CHEQUE = 0, .NOFFICE = 0, .NOFFICEAGEN = 0, .NAGENCY = 0, .NTYPESUPPORT = 0, .NDOCSUPPORT = 0, .DSTAT_DATE = Date.MinValue, .SDESCRIPT = String.Empty, .SCLIENAME = String.Empty}
            Dim selectDataTableItem As DataTable
            Dim responseList As New List(Of Object)

            Try

                With New DataManagerFactory("SELECT CHEQUES.SREQUEST_TY, CHEQUES.NREQUEST_NU, CHEQUES.SCHEQUE, CHEQUES.NAMOUNT, CHEQUES.NCURRENCYPAY, CHEQUES.NCONCEPT, CHEQUES.NSTA_CHEQUE, CHEQUES.NOFFICE, CHEQUES.NOFFICEAGEN, CHEQUES.NAGENCY, CHEQUES.NTYPESUPPORT, CHEQUES.NDOCSUPPORT, CHEQUES.DSTAT_DATE, CHEQUES.SDESCRIPT, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM CHEQUES CHEQUES LEFT JOIN CLIENT CLIENT ON CLIENT.SCLIENT = CHEQUES.SINTER_PAY  WHERE CHEQUES.SCLIENT = @:CHEQUESSCLIENT1", "CHEQUES", "Linked.LatCombined")
                    .AddParameter("CHEQUESSCLIENT1", DbType.AnsiStringFixedLength, 0, (CHEQUESSCLIENT1 = String.Empty), CHEQUESSCLIENT1)

                    .MaxNumberOfRecord = 2000
                    selectDataTableItem = .QueryExecuteToTable(True)
                End With
                With selectDataTableItem
                    If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                        For Each itemData As DataRow In .Rows
                            response = New With {.SREQUEST_TY = itemData.StringValue("SREQUEST_TY"), .NREQUEST_NU = itemData.NumericValue("NREQUEST_NU"), .SCHEQUE = itemData.StringValue("SCHEQUE"), .NAMOUNT = itemData.NumericValue("NAMOUNT"), .NCURRENCYPAY = itemData.NumericValue("NCURRENCYPAY"), .NCONCEPT = itemData.NumericValue("NCONCEPT"), .NSTA_CHEQUE = itemData.NumericValue("NSTA_CHEQUE"), .NOFFICE = itemData.NumericValue("NOFFICE"), .NOFFICEAGEN = itemData.NumericValue("NOFFICEAGEN"), .NAGENCY = itemData.NumericValue("NAGENCY"), .NTYPESUPPORT = itemData.NumericValue("NTYPESUPPORT"), .NDOCSUPPORT = itemData.NumericValue("NDOCSUPPORT"), .DSTAT_DATE = itemData.DateTimeValue("DSTAT_DATE"), .SDESCRIPT = itemData.StringValue("SDESCRIPT"), .SCLIENAME = itemData.StringValue("SCLIENAME")}

                            responseList.Add(response)
                        Next

                        With resultData
                            .Count = responseList.Count
                            .Data = responseList
                        End With
                    End If
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CHEQUESTblDataLoad", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CHEQUESTblDataLoad)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function CHEQUESTblDataCount(CHEQUESSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                Dim recordCount As Integer = 0                

                With New DataManagerFactory("SELECT COUNT(*) FROM (SELECT CHEQUES.SREQUEST_TY, CHEQUES.NREQUEST_NU, CHEQUES.SCHEQUE, CHEQUES.NAMOUNT, CHEQUES.NCURRENCYPAY, CHEQUES.NCONCEPT, CHEQUES.NSTA_CHEQUE, CHEQUES.NOFFICE, CHEQUES.NOFFICEAGEN, CHEQUES.NAGENCY, CHEQUES.NTYPESUPPORT, CHEQUES.NDOCSUPPORT, CHEQUES.DSTAT_DATE, CHEQUES.SDESCRIPT, TRIM(CLIENT.SCLIENAME) SCLIENAME FROM CHEQUES CHEQUES LEFT JOIN CLIENT CLIENT ON CLIENT.SCLIENT = CHEQUES.SINTER_PAY  WHERE CHEQUES.SCLIENT = @:CHEQUESSCLIENT1)", "CHEQUES", "Linked.LatCombined")
                    .AddParameter("CHEQUESSCLIENT1", DbType.AnsiStringFixedLength, 0, (CHEQUESSCLIENT1 = String.Empty), CHEQUESSCLIENT1)

                    recordCount = .QueryExecuteScalarToInteger()
                End With

                With resultData
                    .Count = recordCount
                    .Data = recordCount
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CHEQUESTblDataCount", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CHEQUESTblDataCount)", ex.Message)
                End With
            End Try

            Return resultData
        End Function
        <WebMethod()>
        Public Shared Function CHEQUESSelectCommandActionCHEQUES(CHEQUESSCLIENT1 As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}
            Dim response As Object = New With {.Result = 0}

            Try

                With New DataManagerFactory("Select COUNT(CHEQUES.NREQUEST_NU) COUNTDATA FROM CHEQUES CHEQUES LEFT JOIN CLIENT CLIENT ON CLIENT.SCLIENT = CHEQUES.SINTER_PAY  WHERE CHEQUES.SCLIENT = @:CHEQUESSCLIENT1", "CHEQUES", "Linked.LatCombined")
                    .AddParameter("CHEQUESSCLIENT1", DbType.AnsiStringFixedLength, 0, (CHEQUESSCLIENT1 = String.Empty), CHEQUESSCLIENT1)

                    response.Result = .QueryExecuteScalarToInteger()
                End With
                With resultData
                    .Count = 1
                    .Data = response
                End With

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "CHEQUESSelectCommandActionCHEQUES", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (CHEQUESSelectCommandActionCHEQUES)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

        <WebMethod()>
        Public Shared Function Client(filter As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim resultData As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True, .Count = 0}

            Try
                resultData = InMotionGIT.BackOffice.Support.Connection.Client.Lookup(filter, 1, 20)
            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "Client", ex)

                With resultData
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} (Client)", ex.Message)
                End With
            End Try

            Return resultData
        End Function

#End Region

#Region "Lookups Web Methods"


        <WebMethod()>
        Public Shared Function LookUpForROLESnRole(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE12.NROLE, TABLE12.SDESCRIPT FROM TABLE12 TABLE12    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE12", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NROLE"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForROLESnRole", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForROLESnRole")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForROLESnStatusRol(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE5561.NSTATUSROL, TABLE5561.SDESCRIPT FROM TABLE5561 TABLE5561    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE5561", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NSTATUSROL"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForROLESnStatusRol", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForROLESnStatusRol")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForROLESsSexClien(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE18.SSEXCLIEN, TABLE18.SDESCRIPT FROM TABLE18 TABLE18    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE18", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.StringValue("SSEXCLIEN"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForROLESsSexClien", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForROLESsSexClien")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForROLESnTypeRisk(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE5639.NTYPERISK, TABLE5639.SDESCRIPT FROM TABLE5639 TABLE5639    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE5639", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NTYPERISK"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForROLESnTypeRisk", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForROLESnTypeRisk")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCOVERnModulec(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TAB_MODUL.NBRANCH, TAB_MODUL.SDESCRIPT FROM TAB_MODUL TAB_MODUL    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TAB_MODUL", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NBRANCH"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCOVERnModulec", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCOVERnModulec")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCOVERnCover(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  GCV_COVERAGEDESCRIPTION.NBRANCH, GCV_COVERAGEDESCRIPTION.SDESCRIPT FROM GCV_COVERAGEDESCRIPTION GCV_COVERAGEDESCRIPTION    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "GCV_COVERAGEDESCRIPTION", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NBRANCH"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCOVERnCover", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCOVERnCover")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCOVERnRole(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE12.NROLE, TABLE12.SDESCRIPT FROM TABLE12 TABLE12    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE12", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NROLE"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCOVERnRole", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCOVERnRole")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCOVERnCurrency(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE11.NCODIGINT, TABLE11.SDESCRIPT FROM TABLE11 TABLE11    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE11", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NCODIGINT"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCOVERnCurrency", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCOVERnCurrency")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForBENEFICIARnModulec(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TAB_MODUL.NBRANCH, TAB_MODUL.SDESCRIPT FROM TAB_MODUL TAB_MODUL    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TAB_MODUL", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NBRANCH"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForBENEFICIARnModulec", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForBENEFICIARnModulec")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForBENEFICIARnRelation(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE15.NRELASHIP, TABLE15.SDESCRIPT FROM TABLE15 TABLE15    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE15", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NRELASHIP"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForBENEFICIARnRelation", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForBENEFICIARnRelation")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCLAIM_CASEnDeman_type(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE692.NDEMAN_TYPE, TABLE692.SDESCRIPT FROM TABLE692 TABLE692    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE692", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NDEMAN_TYPE"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCLAIM_CASEnDeman_type", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCLAIM_CASEnDeman_type")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCLAIM_CASEsStaCase(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE135.SSTACLAIM, TABLE135.SDESCRIPT FROM TABLE135 TABLE135    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE135", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.StringValue("SSTACLAIM"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCLAIM_CASEsStaCase", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCLAIM_CASEsStaCase")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCL_COVERnDeman_type(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE692.NDEMAN_TYPE, TABLE692.SDESCRIPT FROM TABLE692 TABLE692    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE692", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NDEMAN_TYPE"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCL_COVERnDeman_type", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCL_COVERnDeman_type")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCL_COVERnCurrency(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE11.NCODIGINT, TABLE11.SDESCRIPT FROM TABLE11 TABLE11    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE11", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NCODIGINT"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCL_COVERnCurrency", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCL_COVERnCurrency")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCL_COVERsFrantype(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE64.SFRANTYPE, TABLE64.SDESCRIPT FROM TABLE64 TABLE64    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE64", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.StringValue("SFRANTYPE"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCL_COVERsFrantype", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCL_COVERsFrantype")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCLAIM_ATTMnDeman_type(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE692.NDEMAN_TYPE, TABLE692.SDESCRIPT FROM TABLE692 TABLE692    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE692", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NDEMAN_TYPE"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCLAIM_ATTMnDeman_type", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCLAIM_ATTMnDeman_type")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCLAIM_ATTMsIllness(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TAB_AM_ILL.SILLNESS, TAB_AM_ILL.SDESCRIPT FROM TAB_AM_ILL TAB_AM_ILL    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TAB_AM_ILL", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.StringValue("SILLNESS"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCLAIM_ATTMsIllness", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCLAIM_ATTMsIllness")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCLAIM_HISnOper_type(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE140.NOPER_TYPE, TABLE140.SDESCRIPT FROM TABLE140 TABLE140    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE140", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NOPER_TYPE"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCLAIM_HISnOper_type", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCLAIM_HISnOper_type")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCLAIM_HISnPay_type(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE199.NPAY_TYPE, TABLE199.SDESCRIPT FROM TABLE199 TABLE199    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE199", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NPAY_TYPE"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCLAIM_HISnPay_type", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCLAIM_HISnPay_type")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCLAIM_HISnPay_form(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE138.NPAY_FORM, TABLE138.SDESCRIPT FROM TABLE138 TABLE138    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE138", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NPAY_FORM"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCLAIM_HISnPay_form", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCLAIM_HISnPay_form")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCLAIM_HISnCurrency(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE11.NCODIGINT, TABLE11.SDESCRIPT FROM TABLE11 TABLE11    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE11", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NCODIGINT"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCLAIM_HISnCurrency", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCLAIM_HISnCurrency")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForRELATIONSnRelaship(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE15.NRELASHIP, TABLE15.SDESCRIPT FROM TABLE15 TABLE15    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE15", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NRELASHIP"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForRELATIONSnRelaship", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForRELATIONSnRelaship")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCHEQUESSREQUEST_TY(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE193.SREQUEST_TY, TABLE193.SDESCRIPT FROM TABLE193 TABLE193    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE193", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.StringValue("SREQUEST_TY"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCHEQUESSREQUEST_TY", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCHEQUESSREQUEST_TY")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCHEQUESNCURRENCYPAY(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE11.NCODIGINT, TABLE11.SDESCRIPT FROM TABLE11 TABLE11    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE11", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NCODIGINT"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCHEQUESNCURRENCYPAY", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCHEQUESNCURRENCYPAY")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCHEQUESNCONCEPT(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE293.NCONCEPT, TABLE293.SDESCRIPT FROM TABLE293 TABLE293    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE293", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NCONCEPT"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCHEQUESNCONCEPT", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCHEQUESNCONCEPT")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCHEQUESNSTA_CHEQUE(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE187.NSTA_CHEQUE, TABLE187.SDESCRIPT FROM TABLE187 TABLE187    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE187", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NSTA_CHEQUE"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCHEQUESNSTA_CHEQUE", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCHEQUESNSTA_CHEQUE")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCHEQUESNOFFICE(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE9.NOFFICE, TABLE9.SDESCRIPT FROM TABLE9 TABLE9    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE9", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NOFFICE"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCHEQUESNOFFICE", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCHEQUESNOFFICE")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCHEQUESNOFFICEAGEN(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE5556.NOFFICEAGEN, TABLE5556.SDESCRIPT FROM TABLE5556 TABLE5556    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE5556", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NOFFICEAGEN"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCHEQUESNOFFICEAGEN", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCHEQUESNOFFICEAGEN")
                End With
            End Try
            Return result
        End Function

        <WebMethod()>
        Public Shared Function LookUpForCHEQUESNTYPESUPPORT(id As String) As InMotionGIT.FrontOffice.Support.DataType.ClientActionResult
            Dim result As New InMotionGIT.FrontOffice.Support.DataType.ClientActionResult With {.Success = True}
            Dim resultData As DataTable = Nothing
            Dim newLookupList As New List(Of InMotionGIT.Common.DataType.LookUpValue)
            
            
            Try
                
                With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                          "SELECT  TABLE5570.NTYPESUPPORT, TABLE5570.SDESCRIPT FROM TABLE5570 TABLE5570    WHERE NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", ""), 
                                            "TABLE5570", "Linked.LatCombined")

                    
                    resultData = .QueryExecuteToTable(True)
                End With

                If Not IsNothing(resultData) Then
                    For Each item As DataRow In resultData.Rows
                        newLookupList.Add(New InMotionGIT.Common.DataType.LookUpValue With {.Code = item.NumericValue("NTYPESUPPORT"),
                                                                                            .Description = item.StringValue("SDESCRIPT")})
                    Next
                End If

                result.Data = newLookupList

            Catch ex As Exception
                LogHandler.ErrorLog("HT5ConsultaClientesSegunClienteIndicado", "LookUpForCHEQUESNTYPESUPPORT", ex)

                With result
                    .Success = False
                    .Reason = String.Format(CultureInfo.InvariantCulture, "{0} ({1})", ex.Message, "LookUpForCHEQUESNTYPESUPPORT")
                End With
            End Try
            Return result
        End Function

#End Region

#Region "Form Actions"


#End Region





#Region "Common Utilities"

        Private Shared Sub SetDefaultValuesFromQueryString(formData As EntryData)
            If HttpContext.Current.Request.QueryString("Client").IsNotEmpty Then
                formData.Client = HttpContext.Current.Request.QueryString("Client")
            End If
            If HttpContext.Current.Request.QueryString("RecordEffectiveDate").IsNotEmpty Then
                formData.RecordEffectiveDate = HttpContext.Current.Request.QueryString("RecordEffectiveDate")
            End If
        End Sub	


#End Region

#Region "Form Contracts"

        <Serializable()>
        <DataContract()>
        Public Class EntryData

            <DataMember()> Public Property InstanceFormId As String
            <DataMember()> Public Property Client As System.String
            <DataMember()> Public Property RecordEffectiveDate As DateTime
            <DataMember()> Public Property RootItemsSCLIENT As System.String
            <DataMember()> Public Property RootItemssCliename As System.String
            <DataMember()> Public Property RootItemssFirstname As System.String
            <DataMember()> Public Property RootItemssLastname As System.String
            <DataMember()> Public Property RootItemssLastName2 As System.String
            <DataMember()> Public Property RootItemssSexClien As System.String
            <DataMember()> Public Property RootItemsnCivilSta As System.Int32
            <DataMember()> Public Property RootItemsnWeight As System.Int32
            <DataMember()> Public Property RootItemsnHeight As System.Int32
            <DataMember()> Public Property RootItemsdBirthdat As System.DateTime
            <DataMember()> Public Property RootItemsdDeathdat As System.DateTime
            <DataMember()> Public Property RootItemssSmoking As System.String
            <DataMember()> Public Property RootItemsnLanguage As System.Int32
            <DataMember()> Public Property RootItemsnMailingPref As System.Int32
            <DataMember()> Public Property RootItemsnTitle As System.Int32
            <DataMember()> Public Property RootItemsnSpeciality As System.Int32
            <DataMember()> Public Property RootItemsnNationality As System.Int32
            <DataMember()> Public Property RootItemsnClass As System.Int32
            <DataMember()> Public Property RootItemsdDependant As System.DateTime
            <DataMember()> Public Property RootItemsdIndependant As System.DateTime
            <DataMember()> Public Property RootItemsdInpdate As System.DateTime
            <DataMember()> Public Property RootItemsSDIGIT As System.String
            <DataMember()> Public Property RootItemsCertificatnBranch As System.Int32
            <DataMember()> Public Property RootItemsCertificatnProduct As System.Int32
            <DataMember()> Public Property RootItemsCertificatnPolicy As System.Int32
            <DataMember()> Public Property RootItemsCertificatnCapital As System.Int32
            <DataMember()> Public Property RootItemsCertificatnPayfreq As System.Int32
            <DataMember()> Public Property RootItemsCertificatsStatusva As System.String
            <DataMember()> Public Property RootItemsCertificatdIssuedat As System.DateTime
            <DataMember()> Public Property RootItemsCertificatnWait_code As System.Int32
            <DataMember()> Public Property RootItemsCertificatdStartdate As System.DateTime
            <DataMember()> Public Property RootItemsCertificatsRenewal As System.String
            <DataMember()> Public Property RootItemsCertificatdNulldate As System.DateTime
            <DataMember()> Public Property RootItemsCertificatnNullcode As System.Int32
            <DataMember()> Public Property RootItemsCertificatdExpirdat As System.DateTime
            <DataMember()> Public Property RootItemsCertificatdChangdat As System.DateTime
            <DataMember()> Public Property RootItemsCertificatSCERTYPE As System.String
            <DataMember()> Public Property RootItemsCertificatNCERTIF As System.Int32
            <DataMember()> Public Property RootItemsCertificatCurren_polnCurrency As System.Int32
            <DataMember()> Public Property Curren_pol_Curren_pol As List(Of Curren_pol_Curren_polItem)
            <DataMember()> Public Property RootItemsCertificatROLESnRole As System.Int32
            <DataMember()> Public Property RootItemsCertificatROLESSCLIENAME As System.String
            <DataMember()> Public Property RootItemsCertificatROLESnStatusRol As System.Int32
            <DataMember()> Public Property RootItemsCertificatROLESsSexClien As System.String
            <DataMember()> Public Property RootItemsCertificatROLESdBirthDate As System.DateTime
            <DataMember()> Public Property RootItemsCertificatROLESnTypeRisk As System.Int32
            <DataMember()> Public Property RootItemsCertificatROLESnRating As System.Int32
            <DataMember()> Public Property ROLES_ROLES As List(Of ROLES_ROLESItem)
            <DataMember()> Public Property RootItemsCertificatSUM_INSURNSUMINS_COD As System.Int32
            <DataMember()> Public Property RootItemsCertificatSUM_INSURNSUMINS_REAL As System.Int32
            <DataMember()> Public Property RootItemsCertificatSUM_INSURNCOINSURAN As System.Int32
            <DataMember()> Public Property RootItemsCertificatSUM_INSURNSUM_INSUR As System.Int32
            <DataMember()> Public Property SUM_INSUR_SUM_INSUR As List(Of SUM_INSUR_SUM_INSURItem)
            <DataMember()> Public Property RootItemsCertificatCOVERnModulec As System.Int32
            <DataMember()> Public Property RootItemsCertificatCOVERnCover As System.Int32
            <DataMember()> Public Property RootItemsCertificatCOVERnRole As System.Int32
            <DataMember()> Public Property RootItemsCertificatCOVERSCLIENAME As System.String
            <DataMember()> Public Property RootItemsCertificatCOVERnCurrency As System.Int32
            <DataMember()> Public Property RootItemsCertificatCOVERnCapital As System.Int32
            <DataMember()> Public Property RootItemsCertificatCOVERnPremium As System.Int32
            <DataMember()> Public Property COVER_COVER As List(Of COVER_COVERItem)
            <DataMember()> Public Property RootItemsCertificatREINSURANNBRANCH_REI As System.Int32
            <DataMember()> Public Property RootItemsCertificatREINSURANNTYPE_REIN As System.Int32
            <DataMember()> Public Property RootItemsCertificatREINSURANNCAPITAL As System.Int32
            <DataMember()> Public Property RootItemsCertificatREINSURANNCURRENCY As System.Int32
            <DataMember()> Public Property RootItemsCertificatREINSURANNSHARE As System.Int32
            <DataMember()> Public Property REINSURAN_REINSURAN As List(Of REINSURAN_REINSURANItem)
            <DataMember()> Public Property RootItemsCertificatREINSURAN2NBRANCH_REI As System.Int32
            <DataMember()> Public Property RootItemsCertificatREINSURAN2NCOMPANY As System.Int32
            <DataMember()> Public Property RootItemsCertificatREINSURAN2NCAPITAL As System.Int32
            <DataMember()> Public Property RootItemsCertificatREINSURAN2NCURRENCY As System.Int32
            <DataMember()> Public Property RootItemsCertificatREINSURAN2NSHARE As System.Int32
            <DataMember()> Public Property RootItemsCertificatREINSURAN2NCOMMISSI As System.Int32
            <DataMember()> Public Property REINSURAN2_REINSURAN2 As List(Of REINSURAN2_REINSURAN2Item)
            <DataMember()> Public Property RootItemsCertificatDisc_xpremnDisc_code As System.Int32
            <DataMember()> Public Property RootItemsCertificatDisc_xpremsAgree As System.String
            <DataMember()> Public Property RootItemsCertificatDisc_xpremnCause As System.Int32
            <DataMember()> Public Property RootItemsCertificatDisc_xpremnPercent As System.Int32
            <DataMember()> Public Property RootItemsCertificatDisc_xpremnCurrency As System.Int32
            <DataMember()> Public Property RootItemsCertificatDisc_xpremnAmount As System.Int32
            <DataMember()> Public Property Disc_xprem_Disc_xprem As List(Of Disc_xprem_Disc_xpremItem)
            <DataMember()> Public Property RootItemsCertificatAutosRegist As System.String
            <DataMember()> Public Property RootItemsCertificatAutosLicense_ty As System.String
            <DataMember()> Public Property RootItemsCertificatAutonVehType As System.Int32
            <DataMember()> Public Property RootItemsCertificatAutosMotor As System.String
            <DataMember()> Public Property RootItemsCertificatAutosChassis As System.String
            <DataMember()> Public Property RootItemsCertificatAutosColor As System.String
            <DataMember()> Public Property RootItemsCertificatAutonCapital As System.Int32
            <DataMember()> Public Property RootItemsCertificatAutonVeh_valor As System.Int32
            <DataMember()> Public Property RootItemsCertificatAutonYear As System.Int32
            <DataMember()> Public Property RootItemsCertificatAutonAutoZone As System.Int32
            <DataMember()> Public Property RootItemsCertificatAutonUse As System.Int32
            <DataMember()> Public Property Auto_Auto As List(Of Auto_AutoItem)
            <DataMember()> Public Property RootItemsCertificatFirenConstCat As System.Int32
            <DataMember()> Public Property RootItemsCertificatFirenActivityCat As System.Int32
            <DataMember()> Public Property RootItemsCertificatFirenFloor_quan As System.Int32
            <DataMember()> Public Property RootItemsCertificatFirenRoofType As System.Int32
            <DataMember()> Public Property RootItemsCertificatFirenSeismicZone As System.Int32
            <DataMember()> Public Property RootItemsCertificatFirenBuildType As System.Int32
            <DataMember()> Public Property RootItemsCertificatFirenSpCombType As System.Int32
            <DataMember()> Public Property RootItemsCertificatFiresDescBussi As System.String
            <DataMember()> Public Property RootItemsCertificatFirenHurrican_zone As System.Int32
            <DataMember()> Public Property RootItemsCertificatFirenSideCloseType As System.Int32
            <DataMember()> Public Property Fire_Fire As List(Of Fire_FireItem)
            <DataMember()> Public Property RootItemsCertificatHomeOwnernOwnerShip As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernDwellingType As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnerNSEISMICZONE As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernYear_built As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnerdDate_purch As System.DateTime
            <DataMember()> Public Property RootItemsCertificatHomeOwnernPrice_purch As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernCurrency_purch As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernLandSuper As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernHomeSuper As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernRoofType As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernRoofYear As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernFloodZone As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernFoundType As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnersSprinkSys As System.String
            <DataMember()> Public Property RootItemsCertificatHomeOwnernAirType As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernStories As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernHalfBath As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernFullBath As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernBedrooms As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernFirePlace As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernGarage As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnersAnimalsDes As System.String
            <DataMember()> Public Property RootItemsCertificatHomeOwnernDist_Fire As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnersAlarm_comp As System.String
            <DataMember()> Public Property RootItemsCertificatHomeOwnersFencePool As System.String
            <DataMember()> Public Property RootItemsCertificatHomeOwnernSwimPool As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernFenceHeight As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnersPolicy_other As System.String
            <DataMember()> Public Property RootItemsCertificatHomeOwnernCap_other As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnernCurrency_other As System.Int32
            <DataMember()> Public Property RootItemsCertificatHomeOwnerdExpir_other As System.DateTime
            <DataMember()> Public Property HomeOwner_HomeOwner As List(Of HomeOwner_HomeOwnerItem)
            <DataMember()> Public Property RootItemsCertificatLifenTypDurPay As System.Int32
            <DataMember()> Public Property RootItemsCertificatLifenPay_time As System.Int32
            <DataMember()> Public Property RootItemsCertificatLifenTypDurIns As System.Int32
            <DataMember()> Public Property RootItemsCertificatLifenInsur_time As System.Int32
            <DataMember()> Public Property RootItemsCertificatLifenXprem_time As System.Int32
            <DataMember()> Public Property RootItemsCertificatLifenAge_limit As System.Int32
            <DataMember()> Public Property RootItemsCertificatLifeNAGE_REINSU As System.Int32
            <DataMember()> Public Property RootItemsCertificatLifeNAGE As System.Int32
            <DataMember()> Public Property Life_Life As List(Of Life_LifeItem)
            <DataMember()> Public Property RootItemsCertificatTHEFTDSTARTDATE As System.DateTime
            <DataMember()> Public Property RootItemsCertificatTHEFTDEXPIRDAT As System.DateTime
            <DataMember()> Public Property RootItemsCertificatTHEFTNCOMMERGRP As System.Int32
            <DataMember()> Public Property RootItemsCertificatTHEFTSDESCBUSSI As System.String
            <DataMember()> Public Property RootItemsCertificatTHEFTNINSURED As System.Int32
            <DataMember()> Public Property RootItemsCertificatTHEFTNEMPLOYEES As System.Int32
            <DataMember()> Public Property RootItemsCertificatTHEFTNAREA As System.Int32
            <DataMember()> Public Property RootItemsCertificatTHEFTNVIGILANCE As System.Int32
            <DataMember()> Public Property RootItemsCertificatTHEFTNCAPITAL As System.Int32
            <DataMember()> Public Property RootItemsCertificatTHEFTDNULLDATE As System.DateTime
            <DataMember()> Public Property RootItemsCertificatTHEFTNNULLCODE As System.Int32
            <DataMember()> Public Property THEFT_THEFT As List(Of THEFT_THEFTItem)
            <DataMember()> Public Property RootItemsCertificatFINANCIAL_INSTRUMENTSNCONSECUTIVE As System.Int32
            <DataMember()> Public Property RootItemsCertificatFINANCIAL_INSTRUMENTSNINSTRUMENT_TY As System.Int32
            <DataMember()> Public Property RootItemsCertificatFINANCIAL_INSTRUMENTSNBANK_CODE As System.Int32
            <DataMember()> Public Property RootItemsCertificatFINANCIAL_INSTRUMENTSNCARD_TYPE As System.Int32
            <DataMember()> Public Property RootItemsCertificatFINANCIAL_INSTRUMENTSSNUMBER As System.String
            <DataMember()> Public Property RootItemsCertificatFINANCIAL_INSTRUMENTSDCARDEXPIR As System.DateTime
            <DataMember()> Public Property RootItemsCertificatFINANCIAL_INSTRUMENTSDSTARTDATE As System.DateTime
            <DataMember()> Public Property RootItemsCertificatFINANCIAL_INSTRUMENTSDTERM_DATE As System.DateTime
            <DataMember()> Public Property RootItemsCertificatFINANCIAL_INSTRUMENTSNQUOTA As System.Int32
            <DataMember()> Public Property RootItemsCertificatFINANCIAL_INSTRUMENTSNAMOUNT As System.Decimal
            <DataMember()> Public Property RootItemsCertificatFINANCIAL_INSTRUMENTSNCURRENCY As System.Int32
            <DataMember()> Public Property FINANCIAL_INSTRUMENTS_FINANCIAL_INSTRUMENTS As List(Of FINANCIAL_INSTRUMENTS_FINANCIAL_INSTRUMENTSItem)
            <DataMember()> Public Property RootItemsCertificatHEALTHDEFFECDATE As System.DateTime
            <DataMember()> Public Property RootItemsCertificatHEALTHDEXPIRDAT As System.DateTime
            <DataMember()> Public Property RootItemsCertificatHEALTHNCAPITAL As System.Int32
            <DataMember()> Public Property RootItemsCertificatHEALTHNPREMIUM As System.Int32
            <DataMember()> Public Property RootItemsCertificatHEALTHSCERTYPE As System.String
            <DataMember()> Public Property RootItemsCertificatHEALTHNBRANCH As System.Int32
            <DataMember()> Public Property RootItemsCertificatHEALTHNPRODUCT As System.Int32
            <DataMember()> Public Property RootItemsCertificatHEALTHNPOLICY As System.Int32
            <DataMember()> Public Property RootItemsCertificatHEALTHNCERTIF As System.Int32
            <DataMember()> Public Property RootItemsCertificatHEALTHROLES2NROLE As System.Int32
            <DataMember()> Public Property RootItemsCertificatHEALTHROLES2SCLIENAME As System.String
            <DataMember()> Public Property ROLES2_ROLES2 As List(Of ROLES2_ROLES2Item)
            <DataMember()> Public Property HEALTH_HEALTH As List(Of HEALTH_HEALTHItem)
            <DataMember()> Public Property RootItemsCertificatBENEFICIARSCLIENAME As System.String
            <DataMember()> Public Property RootItemsCertificatBENEFICIARnModulec As System.Int32
            <DataMember()> Public Property RootItemsCertificatBENEFICIARnCover As System.Int32
            <DataMember()> Public Property RootItemsCertificatBENEFICIARnRelation As System.Int32
            <DataMember()> Public Property RootItemsCertificatBENEFICIARsIrrevoc As System.String
            <DataMember()> Public Property RootItemsCertificatBENEFICIARnParticip As System.Int32
            <DataMember()> Public Property BENEFICIAR_BENEFICIAR As List(Of BENEFICIAR_BENEFICIARItem)
            <DataMember()> Public Property RootItemsCertificatClausenClause As System.Int32
            <DataMember()> Public Property RootItemsCertificatClausenNotenum As System.Int32
            <DataMember()> Public Property Clause_Clause As List(Of Clause_ClauseItem)
            <DataMember()> Public Property RootItemsCertificatPOLICY_HISNMOVEMENT As System.Int32
            <DataMember()> Public Property RootItemsCertificatPOLICY_HISNTYPE_HIST As System.Int32
            <DataMember()> Public Property RootItemsCertificatPOLICY_HISDEFFECDATE As System.DateTime
            <DataMember()> Public Property RootItemsCertificatPOLICY_HISNTRANSACTIO As System.Int32
            <DataMember()> Public Property RootItemsCertificatPOLICY_HISNRECEIPT As System.Int32
            <DataMember()> Public Property RootItemsCertificatPOLICY_HISSNULL_MOVE As System.String
            <DataMember()> Public Property RootItemsCertificatPOLICY_HISDNULLDATE As System.DateTime
            <DataMember()> Public Property POLICY_HIS_POLICY_HIS As List(Of POLICY_HIS_POLICY_HISItem)
            <DataMember()> Public Property Certificat_Certificat As List(Of Certificat_CertificatItem)
            <DataMember()> Public Property RootItemsPremiumnBranch As System.Int32
            <DataMember()> Public Property RootItemsPremiumnProduct As System.Int32
            <DataMember()> Public Property RootItemsPremiumnPolicy As System.Int32
            <DataMember()> Public Property RootItemsPremiumnReceipt As System.Int32
            <DataMember()> Public Property RootItemsPremiumnTratypei As System.Int32
            <DataMember()> Public Property RootItemsPremiumnPremium As System.Int32
            <DataMember()> Public Property RootItemsPremiumnCurrency As System.Int32
            <DataMember()> Public Property RootItemsPremiumnCollector As System.Int32
            <DataMember()> Public Property RootItemsPremiumsReject As System.String
            <DataMember()> Public Property RootItemsPremiumdLimitDate As System.DateTime
            <DataMember()> Public Property RootItemsPremiumnWay_pay As System.Int32
            <DataMember()> Public Property RootItemsPremiumNINTERMED As System.Int32
            <DataMember()> Public Property RootItemsPremiumnParticip As System.Int32
            <DataMember()> Public Property RootItemsPremiumnComamou As System.Int32
            <DataMember()> Public Property RootItemsPremiumdIssuedat As System.DateTime
            <DataMember()> Public Property RootItemsPremiumdExpirdat As System.DateTime
            <DataMember()> Public Property RootItemsPremiumnType As System.Int32
            <DataMember()> Public Property RootItemsPremiumsStatusva As System.String
            <DataMember()> Public Property RootItemsPremiumnStatus_pre As System.Int32
            <DataMember()> Public Property RootItemsPremiumsManauti As System.String
            <DataMember()> Public Property RootItemsPremiumSCERTYPE As System.String
            <DataMember()> Public Property RootItemsPremiumNDIGIT As System.Int32
            <DataMember()> Public Property RootItemsPremiumNPAYNUMBE As System.Int32
            <DataMember()> Public Property RootItemsPremiumNCONTRAT As System.Int32
            <DataMember()> Public Property RootItemsPremiumDEFFECDATE As System.DateTime
            <DataMember()> Public Property RootItemsPremiumDetail_prenReceipt As System.Int32
            <DataMember()> Public Property RootItemsPremiumDetail_presType_detai As System.String
            <DataMember()> Public Property RootItemsPremiumDetail_prenBill_item As System.Int32
            <DataMember()> Public Property RootItemsPremiumDetail_prenPremium As System.Int32
            <DataMember()> Public Property RootItemsPremiumDetail_prenCommision As System.Int32
            <DataMember()> Public Property RootItemsPremiumDetail_prenPremAnual As System.Int32
            <DataMember()> Public Property RootItemsPremiumDetail_prenPremiumE As System.Int32
            <DataMember()> Public Property RootItemsPremiumDetail_prenPremiumA As System.Int32
            <DataMember()> Public Property RootItemsPremiumDetail_prenDescAmount As System.Int32
            <DataMember()> Public Property RootItemsPremiumDetail_prenRecAmount As System.Int32
            <DataMember()> Public Property RootItemsPremiumDetail_prenTaxAmount As System.Int32
            <DataMember()> Public Property RootItemsPremiumDetail_prenComAnual As System.Int32
            <DataMember()> Public Property Detail_pre_Detail_pre As List(Of Detail_pre_Detail_preItem)
            <DataMember()> Public Property RootItemsPremiumCommiss_prnIntermed As System.Int32
            <DataMember()> Public Property RootItemsPremiumCommiss_prnRole As System.Int32
            <DataMember()> Public Property RootItemsPremiumCommiss_prnShare As System.Int32
            <DataMember()> Public Property RootItemsPremiumCommiss_prnPercent As System.Int32
            <DataMember()> Public Property RootItemsPremiumCommiss_prnAmount As System.Int32
            <DataMember()> Public Property Commiss_pr_Commiss_pr As List(Of Commiss_pr_Commiss_prItem)
            <DataMember()> Public Property RootItemsPremiumPremium_monId As System.Int32
            <DataMember()> Public Property RootItemsPremiumPremium_monTransac As System.Int32
            <DataMember()> Public Property RootItemsPremiumPremium_monType As System.Int32
            <DataMember()> Public Property RootItemsPremiumPremium_modCompdate As System.DateTime
            <DataMember()> Public Property RootItemsPremiumPremium_monAmount As System.Int32
            <DataMember()> Public Property RootItemsPremiumPremium_monCurrency As System.Int32
            <DataMember()> Public Property Premium_mo_Premium_mo As List(Of Premium_mo_Premium_moItem)
            <DataMember()> Public Property RootItemsPremiumFINANCE_CONCONTRAT As System.Int32
            <DataMember()> Public Property RootItemsPremiumFINANCE_CONQ_DRAFT As System.Int32
            <DataMember()> Public Property RootItemsPremiumFINANCE_CONAMOUNT As System.Int32
            <DataMember()> Public Property RootItemsPremiumFINANCE_CONCURRENCY As System.Int32
            <DataMember()> Public Property RootItemsPremiumFINANCE_CONFRECUENCY As System.Int32
            <DataMember()> Public Property RootItemsPremiumFINANCE_COFINANC_DRANDRAFT As System.Int32
            <DataMember()> Public Property RootItemsPremiumFINANCE_COFINANC_DRANSTAT_DRAFT As System.Int32
            <DataMember()> Public Property RootItemsPremiumFINANCE_COFINANC_DRANAMOUNT As System.Int32
            <DataMember()> Public Property FINANC_DRA_FINANC_DRA As List(Of FINANC_DRA_FINANC_DRAItem)
            <DataMember()> Public Property FINANCE_CO_FINANCE_CO As List(Of FINANCE_CO_FINANCE_COItem)
            <DataMember()> Public Property Premium_Premium As List(Of Premium_PremiumItem)
            <DataMember()> Public Property RootItemsClaimnBranch As System.Int32
            <DataMember()> Public Property RootItemsClaimnProduct As System.Int32
            <DataMember()> Public Property RootItemsClaimnPolicy As System.Int32
            <DataMember()> Public Property RootItemsClaimnClaim As System.Int32
            <DataMember()> Public Property RootItemsClaimdDecladat As System.DateTime
            <DataMember()> Public Property RootItemsClaimsClaimtyp As System.String
            <DataMember()> Public Property RootItemsClaimnCausecod As System.Int32
            <DataMember()> Public Property RootItemsClaimsStaclaim As System.String
            <DataMember()> Public Property RootItemsClaimnUnaccode As System.Int32
            <DataMember()> Public Property RootItemsClaimdPrescdat As System.DateTime
            <DataMember()> Public Property RootItemsClaimdOccurdat As System.DateTime
            <DataMember()> Public Property RootItemsClaimnLoc_reserv As System.Int32
            <DataMember()> Public Property RootItemsClaimnLoc_rec_am As System.Int32
            <DataMember()> Public Property RootItemsClaimnLoc_pay_am As System.Int32
            <DataMember()> Public Property RootItemsClaimnLoc_out_am As System.Int32
            <DataMember()> Public Property RootItemsClaimnLoc_cos_re As System.Int32
            <DataMember()> Public Property RootItemsClaimdCompdate As System.DateTime
            <DataMember()> Public Property RootItemsClaimCLAIM_CASEnCase_num As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASEnDeman_type As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASEsStaCase As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASEnNoteDama As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASENCLAIM As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERnCase_num As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERnModulec As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERnCover As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERnDeman_type As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERSCLIENAME As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERnDamProf As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERsReservstat As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERnReserve As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERnCurrency As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERnRec_amount As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERnPay_amount As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERnLoc_cos_re As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERsFrantype As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECL_COVERnFra_amount As System.Int32
            <DataMember()> Public Property CL_COVER_CL_COVER As List(Of CL_COVER_CL_COVERItem)
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_ATTMnCase_num As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_ATTMnDeman_type As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_ATTMsClient As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_ATTMnService As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_ATTMsIllness As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_ATTMsClientProf As System.String
            <DataMember()> Public Property CLAIM_ATTM_CLAIM_ATTM As List(Of CLAIM_ATTM_CLAIM_ATTMItem)
            <DataMember()> Public Property RootItemsClaimCLAIM_CASEClaim_autonCase_num As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASEClaim_autonDeman_type As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASEClaim_autosAlcoholic As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASEClaim_autosPoliceDem As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASEClaim_autonInfraction As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASEClaim_autonAuto_quant As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASEClaim_autonNotenum As System.Int32
            <DataMember()> Public Property Claim_auto_Claim_auto As List(Of Claim_auto_Claim_autoItem)
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_DAMANDAMAGE_COD As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_DAMANMAG_DAM As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_DAMANAMOUNT As System.Int32
            <DataMember()> Public Property CLAIM_DAMA_CLAIM_DAMA As List(Of CLAIM_DAMA_CLAIM_DAMAItem)
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_THIRSLICENSE_TY As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_THIRSREGIST As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_THIRSCHASSIS As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_THIRSMOTOR As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_THIRSTHIR_POLIC As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_THIRSTHIR_CLAIM As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_THIRSRECOV_IND As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_THIRNTHIR_COMP As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_THIRNBLAME As System.Int32
            <DataMember()> Public Property CLAIM_THIR_CLAIM_THIR As List(Of CLAIM_THIR_CLAIM_THIRItem)
            <DataMember()> Public Property RootItemsClaimCLAIM_CASELife_claimnCase_num As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASELife_claimnDeman_type As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASELife_claimnIn_lif_typ As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASELife_claimnCla_li_typ As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASELife_claimnMonth_amou As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASELife_claimdEnd_date As System.DateTime
            <DataMember()> Public Property Life_claim_Life_claim As List(Of Life_claim_Life_claimItem)
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIMBENEFNBENE_TYPE As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIMBENEFSCLIENT As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIMBENEFNRELATION As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIMBENEFNPARTICIP As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIMBENEFSDEMANDANT As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIMBENEFNOFFICE_PAY As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIMBENEFSCLIENT_REP As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIMBENEFNOFFICEAGEN_PAY As System.Int32
            <DataMember()> Public Property CLAIMBENEF_CLAIMBENEF As List(Of CLAIMBENEF_CLAIMBENEFItem)
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_HISnCase_num As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_HISdOperdate As System.DateTime
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_HISnTransac As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_HISSCLIENAME As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_HISnOper_type As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_HISnPay_type As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_HISnPay_form As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_HISnServ_order As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_HISsInd_order As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_HISsOrder_num As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_HISsExecuted As System.String
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_HISnAmount As System.Int32
            <DataMember()> Public Property RootItemsClaimCLAIM_CASECLAIM_HISnCurrency As System.Int32
            <DataMember()> Public Property CLAIM_HIS_CLAIM_HIS As List(Of CLAIM_HIS_CLAIM_HISItem)
            <DataMember()> Public Property CLAIM_CASE_CLAIM_CASE As List(Of CLAIM_CASE_CLAIM_CASEItem)
            <DataMember()> Public Property Claim_Claim As List(Of Claim_ClaimItem)
            <DataMember()> Public Property RootItemsAddressSRECTYPE As System.String
            <DataMember()> Public Property RootItemsAddressnProvince As System.Int32
            <DataMember()> Public Property RootItemsAddressnLocal As System.Int32
            <DataMember()> Public Property RootItemsAddressnCountry As System.Int32
            <DataMember()> Public Property RootItemsAddressnMunicipality As System.Int32
            <DataMember()> Public Property RootItemsAddresssDescAdd As System.String
            <DataMember()> Public Property RootItemsAddresssE_mail As System.String
            <DataMember()> Public Property RootItemsAddresssStreet As System.String
            <DataMember()> Public Property RootItemsAddresssStreet1 As System.String
            <DataMember()> Public Property RootItemsAddresssBuild As System.String
            <DataMember()> Public Property RootItemsAddresssDepartment As System.String
            <DataMember()> Public Property RootItemsAddresssPobox As System.String
            <DataMember()> Public Property RootItemsAddressNRECOWNER As System.Int32
            <DataMember()> Public Property RootItemsAddressSKEYADDRESS As System.String
            <DataMember()> Public Property RootItemsAddressDEFFECDATE As System.DateTime
            <DataMember()> Public Property RootItemsAddressPHONESNPHONE_TYPE As System.Int32
            <DataMember()> Public Property RootItemsAddressPHONESNAREA_CODE As System.Int32
            <DataMember()> Public Property RootItemsAddressPHONESSPHONE As System.String
            <DataMember()> Public Property RootItemsAddressPHONESNEXTENS1 As System.Int32
            <DataMember()> Public Property RootItemsAddressPHONESNEXTENS2 As System.Int32
            <DataMember()> Public Property RootItemsAddressPHONESNBESTTIMETOCALL As System.Int32
            <DataMember()> Public Property PHONES_PHONES As List(Of PHONES_PHONESItem)
            <DataMember()> Public Property Address_Address As List(Of Address_AddressItem)
            <DataMember()> Public Property RootItemsCLIDOCUMENTSNTYPCLIENTDOC As System.Int32
            <DataMember()> Public Property RootItemsCLIDOCUMENTSSCLINUMDOCU As System.String
            <DataMember()> Public Property RootItemsCLIDOCUMENTSDISSUEDAT As System.DateTime
            <DataMember()> Public Property RootItemsCLIDOCUMENTSDEXPIRDAT As System.DateTime
            <DataMember()> Public Property CLIDOCUMENTS_CLIDOCUMENTS As List(Of CLIDOCUMENTS_CLIDOCUMENTSItem)
            <DataMember()> Public Property RootItemsDIR_DEBIT_CLINBANKEXT As System.Int32
            <DataMember()> Public Property RootItemsDIR_DEBIT_CLISACCOUNT As System.String
            <DataMember()> Public Property RootItemsDIR_DEBIT_CLINBILL_DAY As System.Int32
            <DataMember()> Public Property RootItemsDIR_DEBIT_CLIDNULLDATE As System.DateTime
            <DataMember()> Public Property RootItemsDIR_DEBIT_CLIDEFFECDATE As System.DateTime
            <DataMember()> Public Property DIR_DEBIT_CLI_DIR_DEBIT_CLI As List(Of DIR_DEBIT_CLI_DIR_DEBIT_CLIItem)
            <DataMember()> Public Property RootItemsBk_accountnTyp_acc As System.Int32
            <DataMember()> Public Property RootItemsBk_accountnBankExt As System.Int32
            <DataMember()> Public Property RootItemsBk_accountsAccount As System.String
            <DataMember()> Public Property RootItemsBk_accountsStatregt As System.String
            <DataMember()> Public Property Bk_account_Bk_account As List(Of Bk_account_Bk_accountItem)
            <DataMember()> Public Property RootItemsCred_cardsCredi_Card As System.String
            <DataMember()> Public Property RootItemsCred_cardnCard_type As System.Int32
            <DataMember()> Public Property RootItemsCred_cardnBankExt As System.Int32
            <DataMember()> Public Property RootItemsCred_carddCardExpir As System.DateTime
            <DataMember()> Public Property Cred_card_Cred_card As List(Of Cred_card_Cred_cardItem)
            <DataMember()> Public Property RootItemsCurr_accnTyp_acco As System.Int32
            <DataMember()> Public Property RootItemsCurr_accnDebit As System.Int32
            <DataMember()> Public Property RootItemsCurr_accnCredit As System.Int32
            <DataMember()> Public Property RootItemsCurr_accnBalance As System.Int32
            <DataMember()> Public Property RootItemsCurr_accnCurrency As System.Int32
            <DataMember()> Public Property Curr_acc_Curr_acc As List(Of Curr_acc_Curr_accItem)
            <DataMember()> Public Property RootItemsSportnSport As System.Int32
            <DataMember()> Public Property Sport_Sport As List(Of Sport_SportItem)
            <DataMember()> Public Property RootItemsHobbynHobby As System.Int32
            <DataMember()> Public Property Hobby_Hobby As List(Of Hobby_HobbyItem)
            <DataMember()> Public Property RootItemsFinanc_clinConcept As System.Int32
            <DataMember()> Public Property RootItemsFinanc_clinAmount As System.Int32
            <DataMember()> Public Property RootItemsFinanc_clinCurrency As System.Int32
            <DataMember()> Public Property RootItemsFinanc_clinUnits As System.Int32
            <DataMember()> Public Property RootItemsFinanc_clinFinanStat As System.Int32
            <DataMember()> Public Property Financ_cli_Financ_cli As List(Of Financ_cli_Financ_cliItem)
            <DataMember()> Public Property RootItemsRELATIONSnRelaship As System.Int32
            <DataMember()> Public Property RootItemsRELATIONSSCLIENAME As System.String
            <DataMember()> Public Property RELATIONS_RELATIONS As List(Of RELATIONS_RELATIONSItem)
            <DataMember()> Public Property RootItemsCHEQUESSREQUEST_TY As System.String
            <DataMember()> Public Property RootItemsCHEQUESNREQUEST_NU As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESSCHEQUE As System.String
            <DataMember()> Public Property RootItemsCHEQUESNAMOUNT As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNCURRENCYPAY As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNCONCEPT As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNSTA_CHEQUE As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESSCLIENAME As System.String
            <DataMember()> Public Property RootItemsCHEQUESNOFFICE As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNOFFICEAGEN As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNAGENCY As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNTYPESUPPORT As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESNDOCSUPPORT As System.Int32
            <DataMember()> Public Property RootItemsCHEQUESDSTAT_DATE As System.DateTime
            <DataMember()> Public Property RootItemsCHEQUESSDESCRIPT As System.String
            <DataMember()> Public Property CHEQUES_CHEQUES As List(Of CHEQUES_CHEQUESItem)
            <DataMember()> Public Property Items_Item As List(Of Items_ItemItem)

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Curren_pol_Curren_polItem

            <DataMember()> Public Property nCurrency As System.Int32
            <DataMember()> Public Property nCurrencyDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class ROLES_ROLESItem

            <DataMember()> Public Property nRole As System.Int32
            <DataMember()> Public Property SCLIENAME As System.String
            <DataMember()> Public Property nStatusRol As System.Int32
            <DataMember()> Public Property sSexClien As System.String
            <DataMember()> Public Property dBirthDate As System.DateTime
            <DataMember()> Public Property nTypeRisk As System.Int32
            <DataMember()> Public Property nRating As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class SUM_INSUR_SUM_INSURItem

            <DataMember()> Public Property NSUMINS_COD As System.Int32
            <DataMember()> Public Property NSUMINS_CODDesc As System.String
            <DataMember()> Public Property NSUMINS_REAL As System.Int32
            <DataMember()> Public Property NCOINSURAN As System.Int32
            <DataMember()> Public Property NSUM_INSUR As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class COVER_COVERItem

            <DataMember()> Public Property nModulec As System.Int32
            <DataMember()> Public Property nCover As System.Int32
            <DataMember()> Public Property nRole As System.Int32
            <DataMember()> Public Property SCLIENAME As System.String
            <DataMember()> Public Property nCurrency As System.Int32
            <DataMember()> Public Property nCapital As System.Int32
            <DataMember()> Public Property nPremium As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class REINSURAN_REINSURANItem

            <DataMember()> Public Property NBRANCH_REI As System.Int32
            <DataMember()> Public Property NBRANCH_REIDesc As System.String
            <DataMember()> Public Property NTYPE_REIN As System.Int32
            <DataMember()> Public Property NTYPE_REINDesc As System.String
            <DataMember()> Public Property NCAPITAL As System.Int32
            <DataMember()> Public Property NCURRENCY As System.Int32
            <DataMember()> Public Property NCURRENCYDesc As System.String
            <DataMember()> Public Property NSHARE As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class REINSURAN2_REINSURAN2Item

            <DataMember()> Public Property NBRANCH_REI As System.Int32
            <DataMember()> Public Property NBRANCH_REIDesc As System.String
            <DataMember()> Public Property NCOMPANY As System.Int32
            <DataMember()> Public Property NCAPITAL As System.Int32
            <DataMember()> Public Property NCURRENCY As System.Int32
            <DataMember()> Public Property NCURRENCYDesc As System.String
            <DataMember()> Public Property NSHARE As System.Int32
            <DataMember()> Public Property NCOMMISSI As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Disc_xprem_Disc_xpremItem

            <DataMember()> Public Property nDisc_code As System.Int32
            <DataMember()> Public Property nDisc_codeDesc As System.String
            <DataMember()> Public Property sAgree As System.String
            <DataMember()> Public Property nCause As System.Int32
            <DataMember()> Public Property nCauseDesc As System.String
            <DataMember()> Public Property nPercent As System.Int32
            <DataMember()> Public Property nCurrency As System.Int32
            <DataMember()> Public Property nCurrencyDesc As System.String
            <DataMember()> Public Property nAmount As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Auto_AutoItem

            <DataMember()> Public Property sRegist As System.String
            <DataMember()> Public Property sLicense_ty As System.String
            <DataMember()> Public Property sLicense_tyDesc As System.String
            <DataMember()> Public Property nVehType As System.Int32
            <DataMember()> Public Property nVehTypeDesc As System.String
            <DataMember()> Public Property sMotor As System.String
            <DataMember()> Public Property sChassis As System.String
            <DataMember()> Public Property sColor As System.String
            <DataMember()> Public Property nCapital As System.Int32
            <DataMember()> Public Property nVeh_valor As System.Int32
            <DataMember()> Public Property nYear As System.Int32
            <DataMember()> Public Property nAutoZone As System.Int32
            <DataMember()> Public Property nAutoZoneDesc As System.String
            <DataMember()> Public Property nUse As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Fire_FireItem

            <DataMember()> Public Property nConstCat As System.Int32
            <DataMember()> Public Property nConstCatDesc As System.String
            <DataMember()> Public Property nActivityCat As System.Int32
            <DataMember()> Public Property nActivityCatDesc As System.String
            <DataMember()> Public Property nFloor_quan As System.Int32
            <DataMember()> Public Property nRoofType As System.Int32
            <DataMember()> Public Property nRoofTypeDesc As System.String
            <DataMember()> Public Property nSeismicZone As System.Int32
            <DataMember()> Public Property nSeismicZoneDesc As System.String
            <DataMember()> Public Property nBuildType As System.Int32
            <DataMember()> Public Property nBuildTypeDesc As System.String
            <DataMember()> Public Property nSpCombType As System.Int32
            <DataMember()> Public Property nSpCombTypeDesc As System.String
            <DataMember()> Public Property sDescBussi As System.String
            <DataMember()> Public Property nHurrican_zone As System.Int32
            <DataMember()> Public Property nSideCloseType As System.Int32
            <DataMember()> Public Property nSideCloseTypeDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class HomeOwner_HomeOwnerItem

            <DataMember()> Public Property nOwnerShip As System.Int32
            <DataMember()> Public Property nOwnerShipDesc As System.String
            <DataMember()> Public Property nDwellingType As System.Int32
            <DataMember()> Public Property nDwellingTypeDesc As System.String
            <DataMember()> Public Property NSEISMICZONE As System.Int32
            <DataMember()> Public Property nYear_built As System.Int32
            <DataMember()> Public Property dDate_purch As System.DateTime
            <DataMember()> Public Property nPrice_purch As System.Int32
            <DataMember()> Public Property nCurrency_purch As System.Int32
            <DataMember()> Public Property nCurrency_purchDesc As System.String
            <DataMember()> Public Property nLandSuper As System.Int32
            <DataMember()> Public Property nHomeSuper As System.Int32
            <DataMember()> Public Property nRoofType As System.Int32
            <DataMember()> Public Property nRoofTypeDesc As System.String
            <DataMember()> Public Property nRoofYear As System.Int32
            <DataMember()> Public Property nFloodZone As System.Int32
            <DataMember()> Public Property nFloodZoneDesc As System.String
            <DataMember()> Public Property nFoundType As System.Int32
            <DataMember()> Public Property sSprinkSys As System.String
            <DataMember()> Public Property nAirType As System.Int32
            <DataMember()> Public Property nAirTypeDesc As System.String
            <DataMember()> Public Property nStories As System.Int32
            <DataMember()> Public Property nHalfBath As System.Int32
            <DataMember()> Public Property nFullBath As System.Int32
            <DataMember()> Public Property nBedrooms As System.Int32
            <DataMember()> Public Property nFirePlace As System.Int32
            <DataMember()> Public Property nGarage As System.Int32
            <DataMember()> Public Property sAnimalsDes As System.String
            <DataMember()> Public Property nDist_Fire As System.Int32
            <DataMember()> Public Property sAlarm_comp As System.String
            <DataMember()> Public Property sFencePool As System.String
            <DataMember()> Public Property nSwimPool As System.Int32
            <DataMember()> Public Property nSwimPoolDesc As System.String
            <DataMember()> Public Property nFenceHeight As System.Int32
            <DataMember()> Public Property sPolicy_other As System.String
            <DataMember()> Public Property nCap_other As System.Int32
            <DataMember()> Public Property nCurrency_other As System.Int32
            <DataMember()> Public Property nCurrency_otherDesc As System.String
            <DataMember()> Public Property dExpir_other As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Life_LifeItem

            <DataMember()> Public Property nTypDurPay As System.Int32
            <DataMember()> Public Property nTypDurPayDesc As System.String
            <DataMember()> Public Property nPay_time As System.Int32
            <DataMember()> Public Property nTypDurIns As System.Int32
            <DataMember()> Public Property nTypDurInsDesc As System.String
            <DataMember()> Public Property nInsur_time As System.Int32
            <DataMember()> Public Property nXprem_time As System.Int32
            <DataMember()> Public Property nAge_limit As System.Int32
            <DataMember()> Public Property NAGE_REINSU As System.Int32
            <DataMember()> Public Property NAGE As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class THEFT_THEFTItem

            <DataMember()> Public Property DSTARTDATE As System.DateTime
            <DataMember()> Public Property DEXPIRDAT As System.DateTime
            <DataMember()> Public Property NCOMMERGRP As System.Int32
            <DataMember()> Public Property NCOMMERGRPDesc As System.String
            <DataMember()> Public Property SDESCBUSSI As System.String
            <DataMember()> Public Property NINSURED As System.Int32
            <DataMember()> Public Property NEMPLOYEES As System.Int32
            <DataMember()> Public Property NAREA As System.Int32
            <DataMember()> Public Property NVIGILANCE As System.Int32
            <DataMember()> Public Property NCAPITAL As System.Int32
            <DataMember()> Public Property DNULLDATE As System.DateTime
            <DataMember()> Public Property NNULLCODE As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class FINANCIAL_INSTRUMENTS_FINANCIAL_INSTRUMENTSItem

            <DataMember()> Public Property NCONSECUTIVE As System.Int32
            <DataMember()> Public Property NINSTRUMENT_TY As System.Int32
            <DataMember()> Public Property NINSTRUMENT_TYDesc As System.String
            <DataMember()> Public Property NBANK_CODE As System.Int32
            <DataMember()> Public Property NBANK_CODEDesc As System.String
            <DataMember()> Public Property NCARD_TYPE As System.Int32
            <DataMember()> Public Property NCARD_TYPEDesc As System.String
            <DataMember()> Public Property SNUMBER As System.String
            <DataMember()> Public Property DCARDEXPIR As System.DateTime
            <DataMember()> Public Property DSTARTDATE As System.DateTime
            <DataMember()> Public Property DTERM_DATE As System.DateTime
            <DataMember()> Public Property NQUOTA As System.Int32
            <DataMember()> Public Property NAMOUNT As System.Decimal
            <DataMember()> Public Property NCURRENCY As System.Int32
            <DataMember()> Public Property NCURRENCYDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class ROLES2_ROLES2Item

            <DataMember()> Public Property NROLE As System.Int32
            <DataMember()> Public Property SCLIENAME As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class HEALTH_HEALTHItem

            <DataMember()> Public Property DEFFECDATE As System.DateTime
            <DataMember()> Public Property DEXPIRDAT As System.DateTime
            <DataMember()> Public Property NCAPITAL As System.Int32
            <DataMember()> Public Property NPREMIUM As System.Int32
            <DataMember()> Public Property SCERTYPE As System.String
            <DataMember()> Public Property NBRANCH As System.Int32
            <DataMember()> Public Property NPRODUCT As System.Int32
            <DataMember()> Public Property NPOLICY As System.Int32
            <DataMember()> Public Property NCERTIF As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class BENEFICIAR_BENEFICIARItem

            <DataMember()> Public Property SCLIENAME As System.String
            <DataMember()> Public Property nModulec As System.Int32
            <DataMember()> Public Property nCover As System.Int32
            <DataMember()> Public Property nRelation As System.Int32
            <DataMember()> Public Property sIrrevoc As System.String
            <DataMember()> Public Property nParticip As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Clause_ClauseItem

            <DataMember()> Public Property nClause As System.Int32
            <DataMember()> Public Property nNotenum As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class POLICY_HIS_POLICY_HISItem

            <DataMember()> Public Property NMOVEMENT As System.Int32
            <DataMember()> Public Property NTYPE_HIST As System.Int32
            <DataMember()> Public Property NTYPE_HISTDesc As System.String
            <DataMember()> Public Property DEFFECDATE As System.DateTime
            <DataMember()> Public Property NTRANSACTIO As System.Int32
            <DataMember()> Public Property NRECEIPT As System.Int32
            <DataMember()> Public Property SNULL_MOVE As System.String
            <DataMember()> Public Property DNULLDATE As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Certificat_CertificatItem

            <DataMember()> Public Property nBranch As System.Int32
            <DataMember()> Public Property nBranchDesc As System.String
            <DataMember()> Public Property nProduct As System.Int32
            <DataMember()> Public Property nProductDesc As System.String
            <DataMember()> Public Property nPolicy As System.Int32
            <DataMember()> Public Property nCapital As System.Int32
            <DataMember()> Public Property nPayfreq As System.Int32
            <DataMember()> Public Property nPayfreqDesc As System.String
            <DataMember()> Public Property sStatusva As System.String
            <DataMember()> Public Property sStatusvaDesc As System.String
            <DataMember()> Public Property dIssuedat As System.DateTime
            <DataMember()> Public Property nWait_code As System.Int32
            <DataMember()> Public Property nWait_codeDesc As System.String
            <DataMember()> Public Property dStartdate As System.DateTime
            <DataMember()> Public Property sRenewal As System.String
            <DataMember()> Public Property dNulldate As System.DateTime
            <DataMember()> Public Property nNullcode As System.Int32
            <DataMember()> Public Property nNullcodeDesc As System.String
            <DataMember()> Public Property dExpirdat As System.DateTime
            <DataMember()> Public Property dChangdat As System.DateTime
            <DataMember()> Public Property SCERTYPE As System.String
            <DataMember()> Public Property NCERTIF As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Detail_pre_Detail_preItem

            <DataMember()> Public Property nReceipt As System.Int32
            <DataMember()> Public Property sType_detai As System.String
            <DataMember()> Public Property nBill_item As System.Int32
            <DataMember()> Public Property nBill_itemDesc As System.String
            <DataMember()> Public Property nPremium As System.Int32
            <DataMember()> Public Property nCommision As System.Int32
            <DataMember()> Public Property nPremAnual As System.Int32
            <DataMember()> Public Property nPremiumE As System.Int32
            <DataMember()> Public Property nPremiumA As System.Int32
            <DataMember()> Public Property nDescAmount As System.Int32
            <DataMember()> Public Property nRecAmount As System.Int32
            <DataMember()> Public Property nTaxAmount As System.Int32
            <DataMember()> Public Property nComAnual As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Commiss_pr_Commiss_prItem

            <DataMember()> Public Property nIntermed As System.Int32
            <DataMember()> Public Property nRole As System.Int32
            <DataMember()> Public Property nRoleDesc As System.String
            <DataMember()> Public Property nShare As System.Int32
            <DataMember()> Public Property nPercent As System.Int32
            <DataMember()> Public Property nAmount As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Premium_mo_Premium_moItem

            <DataMember()> Public Property nId As System.Int32
            <DataMember()> Public Property nTransac As System.Int32
            <DataMember()> Public Property nType As System.Int32
            <DataMember()> Public Property nTypeDesc As System.String
            <DataMember()> Public Property dCompdate As System.DateTime
            <DataMember()> Public Property nAmount As System.Int32
            <DataMember()> Public Property nCurrency As System.Int32
            <DataMember()> Public Property nCurrencyDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class FINANC_DRA_FINANC_DRAItem

            <DataMember()> Public Property NDRAFT As System.Int32
            <DataMember()> Public Property NSTAT_DRAFT As System.Int32
            <DataMember()> Public Property NSTAT_DRAFTDesc As System.String
            <DataMember()> Public Property NAMOUNT As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class FINANCE_CO_FINANCE_COItem

            <DataMember()> Public Property NCONTRAT As System.Int32
            <DataMember()> Public Property NQ_DRAFT As System.Int32
            <DataMember()> Public Property NAMOUNT As System.Int32
            <DataMember()> Public Property NCURRENCY As System.Int32
            <DataMember()> Public Property NFRECUENCY As System.Int32
            <DataMember()> Public Property NFRECUENCYDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Premium_PremiumItem

            <DataMember()> Public Property nBranch As System.Int32
            <DataMember()> Public Property nBranchDesc As System.String
            <DataMember()> Public Property nProduct As System.Int32
            <DataMember()> Public Property nProductDesc As System.String
            <DataMember()> Public Property nPolicy As System.Int32
            <DataMember()> Public Property nReceipt As System.Int32
            <DataMember()> Public Property nTratypei As System.Int32
            <DataMember()> Public Property nTratypeiDesc As System.String
            <DataMember()> Public Property nPremium As System.Int32
            <DataMember()> Public Property nCurrency As System.Int32
            <DataMember()> Public Property nCurrencyDesc As System.String
            <DataMember()> Public Property nCollector As System.Int32
            <DataMember()> Public Property sReject As System.String
            <DataMember()> Public Property dLimitDate As System.DateTime
            <DataMember()> Public Property nWay_pay As System.Int32
            <DataMember()> Public Property nWay_payDesc As System.String
            <DataMember()> Public Property NINTERMED As System.Int32
            <DataMember()> Public Property nParticip As System.Int32
            <DataMember()> Public Property nComamou As System.Int32
            <DataMember()> Public Property dIssuedat As System.DateTime
            <DataMember()> Public Property dExpirdat As System.DateTime
            <DataMember()> Public Property nType As System.Int32
            <DataMember()> Public Property sStatusva As System.String
            <DataMember()> Public Property sStatusvaDesc As System.String
            <DataMember()> Public Property nStatus_pre As System.Int32
            <DataMember()> Public Property nStatus_preDesc As System.String
            <DataMember()> Public Property sManauti As System.String
            <DataMember()> Public Property SCERTYPE As System.String
            <DataMember()> Public Property NDIGIT As System.Int32
            <DataMember()> Public Property NPAYNUMBE As System.Int32
            <DataMember()> Public Property NCONTRAT As System.Int32
            <DataMember()> Public Property DEFFECDATE As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CL_COVER_CL_COVERItem

            <DataMember()> Public Property nCase_num As System.Int32
            <DataMember()> Public Property nModulec As System.Int32
            <DataMember()> Public Property nCover As System.Int32
            <DataMember()> Public Property nDeman_type As System.Int32
            <DataMember()> Public Property SCLIENAME As System.String
            <DataMember()> Public Property nDamProf As System.Int32
            <DataMember()> Public Property sReservstat As System.String
            <DataMember()> Public Property nReserve As System.Int32
            <DataMember()> Public Property nCurrency As System.Int32
            <DataMember()> Public Property nRec_amount As System.Int32
            <DataMember()> Public Property nPay_amount As System.Int32
            <DataMember()> Public Property nLoc_cos_re As System.Int32
            <DataMember()> Public Property sFrantype As System.String
            <DataMember()> Public Property nFra_amount As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CLAIM_ATTM_CLAIM_ATTMItem

            <DataMember()> Public Property nCase_num As System.Int32
            <DataMember()> Public Property nDeman_type As System.Int32
            <DataMember()> Public Property sClient As System.String
            <DataMember()> Public Property nService As System.Int32
            <DataMember()> Public Property sIllness As System.String
            <DataMember()> Public Property sClientProf As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Claim_auto_Claim_autoItem

            <DataMember()> Public Property nCase_num As System.Int32
            <DataMember()> Public Property nDeman_type As System.Int32
            <DataMember()> Public Property nDeman_typeDesc As System.String
            <DataMember()> Public Property sAlcoholic As System.String
            <DataMember()> Public Property sPoliceDem As System.String
            <DataMember()> Public Property nInfraction As System.Int32
            <DataMember()> Public Property nAuto_quant As System.Int32
            <DataMember()> Public Property nNotenum As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CLAIM_DAMA_CLAIM_DAMAItem

            <DataMember()> Public Property NDAMAGE_COD As System.Int32
            <DataMember()> Public Property NDAMAGE_CODDesc As System.String
            <DataMember()> Public Property NMAG_DAM As System.Int32
            <DataMember()> Public Property NMAG_DAMDesc As System.String
            <DataMember()> Public Property NAMOUNT As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CLAIM_THIR_CLAIM_THIRItem

            <DataMember()> Public Property SLICENSE_TY As System.String
            <DataMember()> Public Property SLICENSE_TYDesc As System.String
            <DataMember()> Public Property SREGIST As System.String
            <DataMember()> Public Property SCHASSIS As System.String
            <DataMember()> Public Property SMOTOR As System.String
            <DataMember()> Public Property STHIR_POLIC As System.String
            <DataMember()> Public Property STHIR_CLAIM As System.String
            <DataMember()> Public Property SRECOV_IND As System.String
            <DataMember()> Public Property NTHIR_COMP As System.Int32
            <DataMember()> Public Property NBLAME As System.Int32
            <DataMember()> Public Property NBLAMEDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Life_claim_Life_claimItem

            <DataMember()> Public Property nCase_num As System.Int32
            <DataMember()> Public Property nDeman_type As System.Int32
            <DataMember()> Public Property nDeman_typeDesc As System.String
            <DataMember()> Public Property nIn_lif_typ As System.Int32
            <DataMember()> Public Property nIn_lif_typDesc As System.String
            <DataMember()> Public Property nCla_li_typ As System.Int32
            <DataMember()> Public Property nCla_li_typDesc As System.String
            <DataMember()> Public Property nMonth_amou As System.Int32
            <DataMember()> Public Property dEnd_date As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CLAIMBENEF_CLAIMBENEFItem

            <DataMember()> Public Property NBENE_TYPE As System.Int32
            <DataMember()> Public Property NBENE_TYPEDesc As System.String
            <DataMember()> Public Property SCLIENT As System.String
            <DataMember()> Public Property NRELATION As System.Int32
            <DataMember()> Public Property NRELATIONDesc As System.String
            <DataMember()> Public Property NPARTICIP As System.Int32
            <DataMember()> Public Property SDEMANDANT As System.String
            <DataMember()> Public Property NOFFICE_PAY As System.Int32
            <DataMember()> Public Property NOFFICE_PAYDesc As System.String
            <DataMember()> Public Property SCLIENT_REP As System.String
            <DataMember()> Public Property NOFFICEAGEN_PAY As System.Int32
            <DataMember()> Public Property NOFFICEAGEN_PAYDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CLAIM_HIS_CLAIM_HISItem

            <DataMember()> Public Property nCase_num As System.Int32
            <DataMember()> Public Property dOperdate As System.DateTime
            <DataMember()> Public Property nTransac As System.Int32
            <DataMember()> Public Property SCLIENAME As System.String
            <DataMember()> Public Property nOper_type As System.Int32
            <DataMember()> Public Property nPay_type As System.Int32
            <DataMember()> Public Property nPay_form As System.Int32
            <DataMember()> Public Property nServ_order As System.Int32
            <DataMember()> Public Property sInd_order As System.String
            <DataMember()> Public Property sOrder_num As System.String
            <DataMember()> Public Property sExecuted As System.String
            <DataMember()> Public Property nAmount As System.Int32
            <DataMember()> Public Property nCurrency As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CLAIM_CASE_CLAIM_CASEItem

            <DataMember()> Public Property nCase_num As System.Int32
            <DataMember()> Public Property nDeman_type As System.Int32
            <DataMember()> Public Property sStaCase As System.String
            <DataMember()> Public Property nNoteDama As System.Int32
            <DataMember()> Public Property NCLAIM As System.Int32

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Claim_ClaimItem

            <DataMember()> Public Property nBranch As System.Int32
            <DataMember()> Public Property nProduct As System.Int32
            <DataMember()> Public Property nPolicy As System.Int32
            <DataMember()> Public Property nClaim As System.Int32
            <DataMember()> Public Property dDecladat As System.DateTime
            <DataMember()> Public Property sClaimtyp As System.String
            <DataMember()> Public Property sClaimtypDesc As System.String
            <DataMember()> Public Property nCausecod As System.Int32
            <DataMember()> Public Property nCausecodDesc As System.String
            <DataMember()> Public Property sStaclaim As System.String
            <DataMember()> Public Property sStaclaimDesc As System.String
            <DataMember()> Public Property nUnaccode As System.Int32
            <DataMember()> Public Property nUnaccodeDesc As System.String
            <DataMember()> Public Property dPrescdat As System.DateTime
            <DataMember()> Public Property dOccurdat As System.DateTime
            <DataMember()> Public Property nLoc_reserv As System.Int32
            <DataMember()> Public Property nLoc_rec_am As System.Int32
            <DataMember()> Public Property nLoc_pay_am As System.Int32
            <DataMember()> Public Property nLoc_out_am As System.Int32
            <DataMember()> Public Property nLoc_cos_re As System.Int32
            <DataMember()> Public Property dCompdate As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class PHONES_PHONESItem

            <DataMember()> Public Property NPHONE_TYPE As System.Int32
            <DataMember()> Public Property NPHONE_TYPEDesc As System.String
            <DataMember()> Public Property NAREA_CODE As System.Int32
            <DataMember()> Public Property SPHONE As System.String
            <DataMember()> Public Property NEXTENS1 As System.Int32
            <DataMember()> Public Property NEXTENS2 As System.Int32
            <DataMember()> Public Property NBESTTIMETOCALL As System.Int32
            <DataMember()> Public Property NBESTTIMETOCALLDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Address_AddressItem

            <DataMember()> Public Property SRECTYPE As System.String
            <DataMember()> Public Property nProvince As System.Int32
            <DataMember()> Public Property nProvinceDesc As System.String
            <DataMember()> Public Property nLocal As System.Int32
            <DataMember()> Public Property nLocalDesc As System.String
            <DataMember()> Public Property nCountry As System.Int32
            <DataMember()> Public Property nCountryDesc As System.String
            <DataMember()> Public Property nMunicipality As System.Int32
            <DataMember()> Public Property nMunicipalityDesc As System.String
            <DataMember()> Public Property sDescAdd As System.String
            <DataMember()> Public Property sE_mail As System.String
            <DataMember()> Public Property sStreet As System.String
            <DataMember()> Public Property sStreet1 As System.String
            <DataMember()> Public Property sBuild As System.String
            <DataMember()> Public Property sDepartment As System.String
            <DataMember()> Public Property sPobox As System.String
            <DataMember()> Public Property NRECOWNER As System.Int32
            <DataMember()> Public Property SKEYADDRESS As System.String
            <DataMember()> Public Property DEFFECDATE As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CLIDOCUMENTS_CLIDOCUMENTSItem

            <DataMember()> Public Property NTYPCLIENTDOC As System.Int32
            <DataMember()> Public Property SCLINUMDOCU As System.String
            <DataMember()> Public Property DISSUEDAT As System.DateTime
            <DataMember()> Public Property DEXPIRDAT As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class DIR_DEBIT_CLI_DIR_DEBIT_CLIItem

            <DataMember()> Public Property NBANKEXT As System.Int32
            <DataMember()> Public Property NBANKEXTDesc As System.String
            <DataMember()> Public Property SACCOUNT As System.String
            <DataMember()> Public Property NBILL_DAY As System.Int32
            <DataMember()> Public Property DNULLDATE As System.DateTime
            <DataMember()> Public Property DEFFECDATE As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Bk_account_Bk_accountItem

            <DataMember()> Public Property nTyp_acc As System.Int32
            <DataMember()> Public Property nTyp_accDesc As System.String
            <DataMember()> Public Property nBankExt As System.Int32
            <DataMember()> Public Property nBankExtDesc As System.String
            <DataMember()> Public Property sAccount As System.String
            <DataMember()> Public Property sStatregt As System.String
            <DataMember()> Public Property sStatregtDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Cred_card_Cred_cardItem

            <DataMember()> Public Property sCredi_Card As System.String
            <DataMember()> Public Property nCard_type As System.Int32
            <DataMember()> Public Property nCard_typeDesc As System.String
            <DataMember()> Public Property nBankExt As System.Int32
            <DataMember()> Public Property nBankExtDesc As System.String
            <DataMember()> Public Property dCardExpir As System.DateTime

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Curr_acc_Curr_accItem

            <DataMember()> Public Property nTyp_acco As System.Int32
            <DataMember()> Public Property nTyp_accoDesc As System.String
            <DataMember()> Public Property nDebit As System.Int32
            <DataMember()> Public Property nCredit As System.Int32
            <DataMember()> Public Property nBalance As System.Int32
            <DataMember()> Public Property nCurrency As System.Int32
            <DataMember()> Public Property nCurrencyDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Sport_SportItem

            <DataMember()> Public Property nSport As System.Int32
            <DataMember()> Public Property nSportDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Hobby_HobbyItem

            <DataMember()> Public Property nHobby As System.Int32
            <DataMember()> Public Property nHobbyDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Financ_cli_Financ_cliItem

            <DataMember()> Public Property nConcept As System.Int32
            <DataMember()> Public Property nConceptDesc As System.String
            <DataMember()> Public Property nAmount As System.Int32
            <DataMember()> Public Property nCurrency As System.Int32
            <DataMember()> Public Property nCurrencyDesc As System.String
            <DataMember()> Public Property nUnits As System.Int32
            <DataMember()> Public Property nFinanStat As System.Int32
            <DataMember()> Public Property nFinanStatDesc As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class RELATIONS_RELATIONSItem

            <DataMember()> Public Property nRelaship As System.Int32
            <DataMember()> Public Property SCLIENAME As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class CHEQUES_CHEQUESItem

            <DataMember()> Public Property SREQUEST_TY As System.String
            <DataMember()> Public Property NREQUEST_NU As System.Int32
            <DataMember()> Public Property SCHEQUE As System.String
            <DataMember()> Public Property NAMOUNT As System.Int32
            <DataMember()> Public Property NCURRENCYPAY As System.Int32
            <DataMember()> Public Property NCONCEPT As System.Int32
            <DataMember()> Public Property NSTA_CHEQUE As System.Int32
            <DataMember()> Public Property SCLIENAME As System.String
            <DataMember()> Public Property NOFFICE As System.Int32
            <DataMember()> Public Property NOFFICEAGEN As System.Int32
            <DataMember()> Public Property NAGENCY As System.Int32
            <DataMember()> Public Property NTYPESUPPORT As System.Int32
            <DataMember()> Public Property NDOCSUPPORT As System.Int32
            <DataMember()> Public Property DSTAT_DATE As System.DateTime
            <DataMember()> Public Property SDESCRIPT As System.String

        End Class

        <Serializable()>
        <DataContract()>
        Public Class Items_ItemItem

            <DataMember()> Public Property SCLIENT As System.String
            <DataMember()> Public Property sCliename As System.String
            <DataMember()> Public Property sFirstname As System.String
            <DataMember()> Public Property sLastname As System.String
            <DataMember()> Public Property sLastName2 As System.String
            <DataMember()> Public Property sSexClien As System.String
            <DataMember()> Public Property sSexClienDesc As System.String
            <DataMember()> Public Property nCivilSta As System.Int32
            <DataMember()> Public Property nCivilStaDesc As System.String
            <DataMember()> Public Property nWeight As System.Int32
            <DataMember()> Public Property nHeight As System.Int32
            <DataMember()> Public Property dBirthdat As System.DateTime
            <DataMember()> Public Property dDeathdat As System.DateTime
            <DataMember()> Public Property sSmoking As System.String
            <DataMember()> Public Property nLanguage As System.Int32
            <DataMember()> Public Property nLanguageDesc As System.String
            <DataMember()> Public Property nMailingPref As System.Int32
            <DataMember()> Public Property nMailingPrefDesc As System.String
            <DataMember()> Public Property nTitle As System.Int32
            <DataMember()> Public Property nTitleDesc As System.String
            <DataMember()> Public Property nSpeciality As System.Int32
            <DataMember()> Public Property nSpecialityDesc As System.String
            <DataMember()> Public Property nNationality As System.Int32
            <DataMember()> Public Property nNationalityDesc As System.String
            <DataMember()> Public Property nClass As System.Int32
            <DataMember()> Public Property nClassDesc As System.String
            <DataMember()> Public Property dDependant As System.DateTime
            <DataMember()> Public Property dIndependant As System.DateTime
            <DataMember()> Public Property dInpdate As System.DateTime
            <DataMember()> Public Property SDIGIT As System.String

        End Class


#End Region

    End Class

End Namespace