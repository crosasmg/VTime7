<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="anchorCargarInformacionManual" xml:space="preserve">
    <value>Load manual information </value>
  </data>
  <data name="anchorVerDocumento" xml:space="preserve">
    <value>Document</value>
  </data>
  <data name="txtRequirementID" xml:space="preserve">
    <value>Requirement Id</value>
  </data>
  <data name="txtRequirementIDToolTip" xml:space="preserve">
    <value>Requirement Id</value>
  </data>
  <data name="ddlAlarma" xml:space="preserve">
    <value>Alarm Type</value>
  </data>
  <data name="ddlAlarmaToolTip" xml:space="preserve">
    <value>Action to be taken if the alarm type is not set to ok.</value>
  </data>
  <data name="ddlAreaDeSuscripcion" xml:space="preserve">
    <value>Underwriting Area</value>
  </data>
  <data name="ddlAreaDeSuscripcionToolTip" xml:space="preserve">
    <value>Underwriting Area on which the requirement applies: medical to know the health status of the customer, financial, etc.</value>
  </data>
  <data name="ddlPagador" xml:space="preserve">
    <value>Payer</value>
  </data>
  <data name="ddlPagadorToolTip" xml:space="preserve">
    <value>Person or Institution that pays the cost of the request.</value>
  </data>
  <data name="ddlProveedor" xml:space="preserve">
    <value>Provider</value>
  </data>
  <data name="ddlProveedorToolTip" xml:space="preserve">
    <value>Provider that offers the service to make exam, revision, etc.</value>
  </data>
  <data name="ddlSolicitadoA" xml:space="preserve">
    <value>Requested to</value>
  </data>
  <data name="ddlSolicitadoAToolTip" xml:space="preserve">
    <value>Person or Company to which the requirement is requested.</value>
  </data>
  <data name="ddlStatus" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="ddlStatusToolTip" xml:space="preserve">
    <value>State of the Requirement.</value>
  </data>
  <data name="ddlTipoDeProceso" xml:space="preserve">
    <value>Process Type</value>
  </data>
  <data name="ddlTipoDeProcesoToolTip" xml:space="preserve">
    <value>Field indicating how it will be processed the request, may be by a person, by a workflow or both, etc.</value>
  </data>
  <data name="ddlTipoDeRequerimiento" xml:space="preserve">
    <value>Requirement Type</value>
  </data>
  <data name="ddlTipoDeRequerimientoToolTip" xml:space="preserve">
    <value>Case Requirement Type: blood test, health questionnaire, etc.</value>
  </data>
  <data name="title" xml:space="preserve">
    <value>General Information</value>
  </data>
  <data name="txtBalance" xml:space="preserve">
    <value>Balance</value>
  </data>
  <data name="txtBalanceToolTip" xml:space="preserve">
    <value>Result of points between debits and credits.</value>
  </data>
  <data name="txtCodigoAcord" xml:space="preserve">
    <value>Acord Code</value>
  </data>
  <data name="txtCodigoAcordToolTip" xml:space="preserve">
    <value>Acord Code associated with the requirement.</value>
  </data>
  <data name="txtCosto" xml:space="preserve">
    <value>Cost</value>
  </data>
  <data name="txtCostoToolTip" xml:space="preserve">
    <value>Cost by the realization of the requirement.</value>
  </data>
  <data name="txtCreditos" xml:space="preserve">
    <value>Credits</value>
  </data>
  <data name="txtCreditosToopTip" xml:space="preserve">
    <value>Points increasing the insurance risk, that is computed by analyzing the various sources of information.</value>
  </data>
  <data name="txtDebitos" xml:space="preserve">
    <value>Debits</value>
  </data>
  <data name="txtDebitosToolTip" xml:space="preserve">
    <value>Points decreasing the insurance risk, that is computed by analyzing the various sources of information.</value>
  </data>
  <data name="txtFaltaPorPagar" xml:space="preserve">
    <value>Pending Payments</value>
  </data>
  <data name="txtFaltaPorPagarToolTip" xml:space="preserve">
    <value>Outstanding amount payable of the cost of the request.</value>
  </data>
  <data name="txtFechaDeRecepcion" xml:space="preserve">
    <value>Reception Date</value>
  </data>
  <data name="txtFechaDeRecepcionToolTip" xml:space="preserve">
    <value>Date on The customer delivery requirement.</value>
  </data>
  <data name="txtFechaDeSolicitud" xml:space="preserve">
    <value>Requested Date</value>
  </data>
  <data name="txtFechaDeSolicitudToolTip" xml:space="preserve">
    <value>Date on the requirement is requested.</value>
  </data>
  <data name="txtEnlaces" xml:space="preserve">
    <value>Links</value>
  </data>
</root>