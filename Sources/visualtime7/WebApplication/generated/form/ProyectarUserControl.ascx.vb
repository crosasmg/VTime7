'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer Oracle v7.1.75 at 2016/10/16 model release 2
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"
    
Imports Artem.Google.UI
Imports DashboardBusiness.Helpers
Imports DevExpress.Web
Imports DevExpress.Web.ASPxClasses
Imports DevExpress.Web.ASPxEditors
Imports DevExpress.Web.ASPxGridView
Imports GIT.Core
Imports InMotionGIT.FrontOffice.Support.Enumerations
Imports InMotionGIT.FrontOffice.Support.Helpers.ControlHandler
Imports InMotionGIT.BarCode
Imports InMotionGIT.BarCode.Enumerations
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo
Imports System.IO
Imports InMotionGIT.FrontOffice.Support
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data
Imports System.Data.Common
Imports System.Globalization
Imports System.Linq
Imports System.Threading.Thread
Imports System.Xml.Linq


#End Region

Partial Public Class ProyectarUserControl
    Inherits GIT.Core.UserControlBase
    Implements Dropthings.Widget.Framework.IWidget

#Region "IWidget Members"
    
    
    

    Public Sub Closed() Implements Dropthings.Widget.Framework.IWidget.Closed
    End Sub

    Public Sub HideSettings() Implements Dropthings.Widget.Framework.IWidget.HideSettings

    End Sub

    Public Sub Init1(host As Dropthings.Widget.Framework.IWidgetHost) Implements Dropthings.Widget.Framework.IWidget.Init

    End Sub

    Public Sub Maximized() Implements Dropthings.Widget.Framework.IWidget.Maximized

    End Sub

    Public Sub Minimized() Implements Dropthings.Widget.Framework.IWidget.Minimized

    End Sub

    Public Sub ShowSettings() Implements Dropthings.Widget.Framework.IWidget.ShowSettings

    End Sub

#End Region

#Region "Private fields"

    Private _formData As ProyectarParameter = Nothing
    Private _CurrentParameterInstance As Boolean = False
    Private _loading As Boolean = False
    Private _loadcompleted As Boolean = False
    Private _webTransfer as String  
    
        
#End Region

#Region "Public properties"

    Public Property FormData() As ProyectarParameter
        Get
            Dim formDefinition As String = String.Empty               
             
            If IsNothing(_formData) Then
                If Not IsPostBack Then
                    If Not String.IsNullOrEmpty(Request.QueryString("id")) Then
                        Dim _id As Guid
                        
                        If Guid.TryParse(Request.QueryString("id"), _id) Then
		                        _FormID.Text = Request.QueryString("id")  
                            
                            formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
If Not String.IsNullOrEmpty(formDefinition) Then
      _formData = Serialize.Deserialize(Of ProyectarParameter)(formDefinition)
End If
                        End If
                    End If

                    If IsNothing(_formData) Then
                        _formData = New ProyectarParameter
                       
                        If String.IsNullOrEmpty(_FormID.Text) Then
                        	_FormID.Text = System.Guid.NewGuid().ToString                       
                        End If
											
                        _formData.InternalId = _FormID.Text
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) OrElse
                           Not String.IsNullOrEmpty(Session("fromid")) Then
                           
                            GetTransferParameters()
                        End If
                        
                        SetDefaultValuesFromQueryString()
                        ValidateParametersInstance(_formData)
                        
                        popupNotifyMessage.ShowOnPageLoad = false                        
                        
                        ControlsInitialization()
                        
                         
                        If Not String.IsNullOrEmpty(Request.QueryString("readonly")) Then
                            BehaviorControls(ProyectarTablePage, False)
                        End If
                        

                    Else
                    		SetDefaultValuesFromQueryString()
                        
                    End If

                Else
                     formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
If Not String.IsNullOrEmpty(formDefinition) Then
      _formData = Serialize.Deserialize(Of ProyectarParameter)(formDefinition)
End If                    

                    If IsNothing(_formData) Then
                        _formData = New ProyectarParameter
                    End If
                End If
            End If

            Return _formData
        End Get

        Set(value As ProyectarParameter)
            _formData = value
        End Set
    End Property
    
#End Region

#Region "Form Events"

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        ErrorsGridView.Visible = False
        
        If Not InMotionGIT.FrontOffice.Proxy.Helpers.RoleManager.ValidateAccess(UserInfo.UserName, "INTER;EASE1;Suscriptor") AndAlso
          (Request.QueryString.IsEmpty OrElse Request.QueryString("Key").IsEmpty OrElse Not KeyValidator.KeyValidator(Request.QueryString("Key"))) Then

            Response.Redirect(String.Format(CultureInfo.InvariantCulture, "~/dropthings/Error.aspx?id={0}", GetGlobalResourceObject("Resource", "DeniedAccess")))
        End If
        
        Dim formData As ProyectarParameter = Me.FormData        
           
        If Not IsPostBack  AndAlso Not GridViewPostBack() Then                     
            
            
            _loadcompleted = True
            
            
            If IsPostBack And Not _CurrentParameterInstance Then
                MapPageToClass(formData)
                _CurrentParameterInstance = True
            End If

            MapClassToPage(formData)
            VerifySecurityLevel()
            
            
        Else
            
            
            
        End If        
        
        
        
        
    End Sub    

    Protected Sub Page_Unload(sender As Object, e As EventArgs) Handles Me.Unload        
        If Not IsNothing(_formData) Then
      Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text)) = Serialize.Serialize(Of ProyectarParameter)(_formData)
      Session(String.Format(CultureInfo.InvariantCulture, "FormTitle.{0}", _FormID.Text)) = Page.Title
End If                  
    End Sub

#End Region

#Region "Controls Events"


    Private Function GridViewPostBack() As Boolean
        For index As Integer = 0 To Request.Params.Count - 1
            If Request.Params(index).EndsWith("$ProductMaster")  Then
                Return True
            End If
        Next
        
        Return False
    End Function    
        
    
    
#End Region


#Region "PopupMenu Events"

    
    
#End Region

#Region "Mapping methods"

    Public Sub ValidateParametersInstance(ByRef ProyectarParameterInstance As ProyectarParameter)
   
    End Sub
    
    ''' <summary>
    ''' This method moves the data from the class to the page
    ''' </summary>
    ''' <param name="ProyectarParameterInstance"></param>
    ''' <remarks></remarks>
    Public Sub MapClassToPage(ByRef ProyectarParameterInstance As ProyectarParameter, Optional calledBy As String = "")

        ValidateParametersInstance(ProyectarParameterInstance)

        
       
        With ProyectarParameterInstance
          
          

            MutualFondoDeInversión.NavigateUrl = String.Format(CultureInfo.InvariantCulture, "{0}/FormaDummy.aspx", ConfigurationManager.AppSettings("Url.Form"), "") 


                      If IsNothing(.ProductMasterCollection) Then
                .ProductMasterCollection = New InMotionGIT.Product.Entity.Contracts.ProductMasterCollection()
            End If

            _ProductMasterList = .ProductMasterCollection
            ProductMaster.DataSource = _ProductMasterList
            ProductMaster.DataBind()
    
                  
          
          
               
            
            
       End With


if (Not ("ProductMaster".IndexOf(calledBy) > -1)) Or String.IsNullOrEmpty(calledBy) then        
            
         

        End If          
    End Sub

    ''' <summary>
    ''' This method moves the data from the page to the class
    ''' </summary>
    ''' <param name="ProyectarParameterInstance"></param>
    Public Sub MapPageToClass(ByRef ProyectarParameterInstance As ProyectarParameter)
        _loading = True

        ValidateParametersInstance(ProyectarParameterInstance)

        With ProyectarParameterInstance


        'GetViewStateProductMasterList()
        '.ProductMasterCollection = _ProductMasterList
        '.ProductMasterCollection.CurrentIndex= ProductMaster.EditIndex
        'ViewState.Remove("ProductMasterList")



        End With




        _loading = False
    End Sub

#End Region

#Region "ProductMaster GridView Controls with dependencies Events"
    


#End Region

#Region "ProductMaster GridView editing support"

    Private _ProductMasterList As InMotionGIT.Product.Entity.Contracts.ProductMasterCollection = Nothing

    Protected Sub ProductMaster_DataBinding(sender As Object, e As EventArgs) Handles ProductMaster.DataBinding        
 
            If IsNothing(FormData.ProductMasterCollection) Then
                FormData.ProductMasterCollection = New InMotionGIT.Product.Entity.Contracts.ProductMasterCollection()
            End If

        _ProductMasterList = FormData.ProductMasterCollection
        ProductMaster.DataSource = _ProductMasterList      
    End Sub
    
    Protected Sub ProductMaster_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles ProductMaster.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub
    
    Protected Sub ProductMaster_CellEditorInitialize(sender As Object, e As DevExpress.Web.ASPxGridView.ASPxGridViewEditorEventArgs) Handles ProductMaster.CellEditorInitialize
        If ProductMaster.IsNewRowEditing Then
            Select Case e.Column.FieldName



                Case "Description"                     
                       e.Editor.Focus()               
            End Select

        Else
            Select Case e.Column.FieldName
                   


                Case "Description"                     
                       e.Editor.Focus() 
            End Select
        End If
        
        Select Case e.Column.FieldName

            Case "Description"
                  
                 

        End Select
    End Sub      
            
    Protected Sub ProductMaster_ParseValue(sender As Object, e As DevExpress.Web.Data.ASPxParseValueEventArgs) Handles ProductMaster.ParseValue
        Select Case e.FieldName

        End Select
    End Sub    
    
 
    
    Protected Sub ProductMaster_RowInserting(sender As Object, e As DevExpress.Web.Data.ASPxDataInsertingEventArgs) Handles ProductMaster.RowInserting
        Dim ProductMasterItem As InMotionGIT.Product.Entity.Contracts.ProductMaster = New InMotionGIT.Product.Entity.Contracts.ProductMaster()
        GetViewStateProductMasterList()
        
        With ProductMasterItem
            .ProductCode = _ProductMasterList.Count
                    .Description = e.NewValues("Description") 


        End With

        _ProductMasterList.Add(ProductMasterItem)
         ProductMaster.CancelEdit()
        
        If ViewState("ProductMasterOperationType") = "Add" Then
            ProductMaster.AddNewRow()
        End If

        e.Cancel = True
        SetProductMasterListDataBind()
    End Sub
    
    Protected Sub ProductMaster_RowUpdating(sender As Object, e As DevExpress.Web.Data.ASPxDataUpdatingEventArgs) Handles ProductMaster.RowUpdating
        Dim ProductMasterItem As InMotionGIT.Product.Entity.Contracts.ProductMaster = New InMotionGIT.Product.Entity.Contracts.ProductMaster() 
        Dim ProductCode As String = e.Keys("ProductCode")
        
        GetViewStateProductMasterList()
                   
        For index As Integer = 0 To _ProductMasterList.Count - 1
            If _ProductMasterList(index).ProductCode = ProductCode Then
                
                With _ProductMasterList(index)
                    .Description = e.NewValues("Description") 

                
                End With
                
                Exit For
            End If
        Next

        SetProductMasterListDataBind()

        ProductMaster.CancelEdit()
        e.Cancel = True
    End Sub

    Protected Sub ProductMaster_RowDeleting(sender As Object, e As DevExpress.Web.Data.ASPxDataDeletingEventArgs) Handles ProductMaster.RowDeleting
       Dim ProductCode As String = e.Keys("ProductCode")
       
       GetViewStateProductMasterList()
       
       For index As Integer = 0 To _ProductMasterList.Count - 1
           If _ProductMasterList(index).ProductCode = ProductCode Then
             _ProductMasterList.RemoveAt(index)
             
             Exit For
           End If
       Next       
       
        SetProductMasterListDataBind()
        e.Cancel = True        
    End Sub

    Private Sub SetProductMasterListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As ProyectarParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.ProductMasterCollection = _ProductMasterList
        ProductMaster.DataSource = _ProductMasterList
        ProductMaster.DataBind()
   End Sub

    Private Sub GetViewStateProductMasterList()
        Dim FormData As ProyectarParameter

         GetCurrentParameterInstance(FormData, True)

        _ProductMasterList = FormData.ProductMasterCollection

        If IsNothing(_ProductMasterList) Then
            _ProductMasterList = New InMotionGIT.Product.Entity.Contracts.ProductMasterCollection()
        End If        
    End Sub
     
    
    
#End Region







#Region "AutoPostBack Events Handles"

Protected Sub MutualFondoDeInversión_TextChanged(sender As Object, e As EventArgs)  
        Dim ProyectarParameterInstance As ProyectarParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = String.Empty
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(ProyectarParameterInstance, True)
         
           parametersDictionary = ParametersToDictionary()  
        
                       currentAction = "3. The message 'No funcionaaaaaaa...' will displayed as 'Popup'" 
            messageAction = "No funcionaaaaaaa" 
            messageAction = InMotionGIT.Correspondence.Support.Merge.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(ProyectarParameterInstance,"ProductMaster")
          
        
          If ProyectarParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(ProyectarParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(ProyectarParameterInstance.NotifyMessage)
             End If           
            
             ProyectarParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(ProyectarParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(ProyectarParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("_debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If 
      End Try         
    End Sub


#End Region

#Region "UserControls Events Handles"

    



#End Region

#Region "Form Manager"

    Private Sub VerifySecurityLevel()


    End Sub

      

    Private Sub GetCurrentParameterInstance(ByRef ProyectarParameterInstance As ProyectarParameter, force As Boolean)
        If _loadcompleted Or force Then
            If Not _CurrentParameterInstance Then

                ProyectarParameterInstance = FormData

                If Page.IsPostBack Then
                    MapPageToClass(ProyectarParameterInstance)
                End If

                _CurrentParameterInstance = True
            Else
                ProyectarParameterInstance = _formData
            End If
        Else
            ProyectarParameterInstance = Nothing
        End If
    End Sub

    Protected Sub SetCurrentParameterInstance(ByRef ProyectarParameterInstance As ProyectarParameter, calledBy As String)
        FormData = ProyectarParameterInstance
        MapClassToPage(ProyectarParameterInstance,calledBy)
    End Sub

    Protected Sub SetErrors(errors As InMotionGIT.Common.Contracts.Errors.ErrorCollection)
        Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

        If IsNothing(errorList) Then
            errorList = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
        End If

        errorList = errors

        ViewState("Errors") = errorList
        ShowErrors()
    End Sub

    Public Sub ShowErrors()
        If Not IsNothing(ViewState("Errors")) Then
            Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

            Dim queryOut = From lst In errorList Select lst Order By lst.ErrorId

            ErrorsGridView.Visible = True
            ErrorsGridView.DataSource = queryOut.ToList
            ErrorsGridView.DataBind()
            UpdatePanelErrors.Update()
        End If
    End Sub
   
    Private Sub ShowWindowPopupMessage(message As String)
        NotifyMessageLabel.Text = message
        popupNotifyMessage.ShowOnPageLoad = True
    End Sub

    Private Sub ClosePopupWindow()
        popControl.Windows(0).ShowOnPageLoad = False
    End Sub

    Private Sub GetTransferParameters()
        Dim fromDocumentCache As Object = Nothing

        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) Then
            fromDocumentCache = Session( Request.QueryString("fromid"))
            Session.Remove(Request.QueryString("fromid"))
            
        Else
            fromDocumentCache = Session(Session("fromid"))
            Session.Remove(Session("fromid"))
            Session.Remove("fromid")   
        End If
        
        If Not IsNothing(fromDocumentCache) Then
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ImLogo", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProductMasterCollection", fromDocumentCache, _formData)
            
        End If
    End Sub
    
    Private Sub SetDefaultValuesFromQueryString()

        If Request.Form("ImLogo").IsNotEmpty Then
                FormData.ImLogo = Request.Form("ImLogo") 

ElseIf Request.QueryString("ImLogo").IsNotEmpty Then
                FormData.ImLogo = Request.QueryString("ImLogo") 
End If 


    End Sub
    
    Private Sub BehaviorControls(parent As Control, isEnable As Boolean)
        For Each controlItem As Control In parent.Controls
			InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValueSimple("Enabled", controlItem, isEnable)


            With controlItem
                If Not IsNothing(.Controls) AndAlso .Controls.Count > 0 Then
                    BehaviorControls(controlItem, isEnable)
                End If
            End With
        Next
    End Sub
    
#End Region

#Region "Actions Page Methods"

    Private Sub ControlsInitialization()
        ProductMaster.ClientVisible = True
        ProductMaster.Enabled = True

    End Sub     
  
    Private Function ParametersToDictionary() As Dictionary(Of String, Object)
        Dim target As New Dictionary(Of String, Object)

        target.Add("ImLogo", _formData.ImLogo) 
        target.Add("ProductMasterCollection", _formData.ProductMasterCollection) 
        
        Return target
    End Function
    
    
    
    

    
#End Region






End Class

<Serializable()>
Public Class ProyectarParameter
    Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of  ProyectarParameter)

    ' Methods
    Public Sub New()
        MyBase.New()
    End Sub

    ' Properties
    Public Property ImLogo As String
    Public Property ProductMasterCollection As InMotionGIT.Product.Entity.Contracts.ProductMasterCollection


End Class