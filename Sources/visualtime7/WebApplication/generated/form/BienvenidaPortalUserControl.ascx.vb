'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer Oracle v7.3.1 at 2019-07-05 model release 1
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"
    
Imports Artem.Google.UI
Imports DashboardBusiness.Helpers
Imports DevExpress.Web
Imports DevExpress.Web.ASPxClasses
Imports DevExpress.Web.ASPxEditors
Imports DevExpress.Web.ASPxGridView
Imports GIT.Core
Imports InMotionGIT.FrontOffice.Support.Enumerations
Imports InMotionGIT.FrontOffice.Support.Helpers.ControlHandler
Imports InMotionGIT.BarCode
Imports InMotionGIT.BarCode.Enumerations
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo
Imports System.IO
Imports InMotionGIT.FrontOffice.Support
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data
Imports System.Data.Common
Imports System.Globalization
Imports System.Linq
Imports System.Threading.Thread
Imports System.Xml.Linq
Imports System.Net


#End Region

Partial Public Class BienvenidaPortalUserControl
    Inherits GIT.Core.UserControlBase
    Implements Dropthings.Widget.Framework.IWidget

#Region "IWidget Members"
    
    
    

    Public Sub Closed() Implements Dropthings.Widget.Framework.IWidget.Closed
    End Sub

    Public Sub HideSettings() Implements Dropthings.Widget.Framework.IWidget.HideSettings

    End Sub

    Public Sub Init1(host As Dropthings.Widget.Framework.IWidgetHost) Implements Dropthings.Widget.Framework.IWidget.Init

    End Sub

    Public Sub Maximized() Implements Dropthings.Widget.Framework.IWidget.Maximized

    End Sub

    Public Sub Minimized() Implements Dropthings.Widget.Framework.IWidget.Minimized

    End Sub

    Public Sub ShowSettings() Implements Dropthings.Widget.Framework.IWidget.ShowSettings

    End Sub

#End Region

#Region "Private fields"

    Private _formData As BienvenidaPortalParameter = Nothing
    Private _CurrentParameterInstance As Boolean = False
    Private _loading As Boolean = False
    Private _loadcompleted As Boolean = False
    Private _webTransfer as String  
    
        
#End Region

#Region "Public properties"

    Public Property FormData() As BienvenidaPortalParameter
        Get
            Dim formDefinition As String = String.Empty               
             
            If IsNothing(_formData) Then
                If Not IsPostBack Then
                    If Not String.IsNullOrEmpty(Request.QueryString("id")) Then
                        Dim _id As Guid
                        
                        If Guid.TryParse(Request.QueryString("id"), _id) Then
		                        _FormID.Text = Request.QueryString("id")  
                            
                            formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
           If Not String.IsNullOrEmpty(formDefinition) Then
              _formData = Serialize.Deserialize(Of BienvenidaPortalParameter)(formDefinition)
           End If
                        End If
                    End If

                    If IsNothing(_formData) Then
                        _formData = New BienvenidaPortalParameter
                       
                        If String.IsNullOrEmpty(_FormID.Text) Then
                        	_FormID.Text = System.Guid.NewGuid().ToString                       
                        End If
											
                        _formData.InternalId = _FormID.Text
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) OrElse
                           Not String.IsNullOrEmpty(Session("fromid")) Then
                           
                            GetTransferParameters()
                        End If
                        
                        
                        
                        SetDefaultValuesFromQueryString()
                        ValidateParametersInstance(_formData)
                        
                        popupNotifyMessage.ShowOnPageLoad = false                        
                        
                        ControlsInitialization()
                        ExecuteActionsInitializationForm()
                         
                        If Not String.IsNullOrEmpty(Request.QueryString("readonly")) Then
                            SetReadOnlyControls()
                        End If
                        

                    Else
                    		SetDefaultValuesFromQueryString()
                        
                    End If

                Else
                     formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
           If Not String.IsNullOrEmpty(formDefinition) Then
              _formData = Serialize.Deserialize(Of BienvenidaPortalParameter)(formDefinition)
           End If                    

                    If IsNothing(_formData) Then
                        _formData = New BienvenidaPortalParameter
                    End If
                End If
            End If

            Return _formData
        End Get

        Set(value As BienvenidaPortalParameter)
            _formData = value
        End Set
    End Property
    
#End Region

#Region "Form Events"

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        ErrorsGridView.Visible = False
        
        
        
        Dim formData As BienvenidaPortalParameter = Me.FormData        
           
        If Not IsPostBack  AndAlso Not GridViewPostBack() Then                     
            
            
            _loadcompleted = True
            
            
            If IsPostBack And Not _CurrentParameterInstance Then
                MapPageToClass(formData)
                _CurrentParameterInstance = True
            End If

            MapClassToPage(formData)
            VerifySecurityLevel()
            
            
        Else
            
            
            
        End If        
        
        
        
        
    End Sub    

    Protected Sub Page_Unload(sender As Object, e As EventArgs) Handles Me.Unload        
        If Not IsNothing(_formData) Then  
                       Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text)) = Serialize.Serialize(Of BienvenidaPortalParameter)(_formData)
                       Session(String.Format(CultureInfo.InvariantCulture, "FormTitle.{0}", _FormID.Text)) = Page.Title
        End If 
        
        If Not IsNothing(_formData) Then
             If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
                 Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = _formData
             End If   
       
             If Not IsNothing(Session("Form.Track.Parameters")) AndAlso Session("Form.Track.Parameters").ToString.ToLower = "true" Then
                  InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of BienvenidaPortalParameter) _
                  (formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.BienvenidaPortal.xml",  ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
             End If        
        End If  
   End Sub

#End Region

#Region "Controls Events"


    Private Function GridViewPostBack() As Boolean
        For index As Integer = 0 To Request.Params.Count - 1
            If Request.Params(index).EndsWith("$")  Then
                Return True
            End If
        Next
        
        Return False
    End Function    
        
    
    
#End Region


#Region "PopupMenu Events"

    
    
#End Region

#Region "Mapping methods"

    Public Sub ValidateParametersInstance(ByRef BienvenidaPortalParameterInstance As BienvenidaPortalParameter)
        If IsNothing(BienvenidaPortalParameterInstance.Client) Then
            BienvenidaPortalParameterInstance.Client = New InMotionGIT.Client.Entity.Contracts.Client
        End If
   
    End Sub
    
    ''' <summary>
    ''' This method moves the data from the class to the page
    ''' </summary>
    ''' <param name="BienvenidaPortalParameterInstance"></param>
    ''' <remarks></remarks>
    Public Sub MapClassToPage(ByRef BienvenidaPortalParameterInstance As BienvenidaPortalParameter, Optional calledBy As String = "")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
        ValidateParametersInstance(BienvenidaPortalParameterInstance)

        
       
        With BienvenidaPortalParameterInstance
          
                      CompleteClientName.Text = .Client.CompleteClientName

              
                  
          
          
               
            
            
       End With


if (Not ("".IndexOf(calledBy) > -1)) Or String.IsNullOrEmpty(calledBy) then        
            
         

        End If          
    End Sub

    ''' <summary>
    ''' This method moves the data from the page to the class
    ''' </summary>
    ''' <param name="BienvenidaPortalParameterInstance"></param>
    Public Sub MapPageToClass(ByRef BienvenidaPortalParameterInstance As BienvenidaPortalParameter)
        _loading = True

        ValidateParametersInstance(BienvenidaPortalParameterInstance)

        With BienvenidaPortalParameterInstance
            .Client.CompleteClientName = CompleteClientName.Text.Trim()





        End With




        _loading = False
    End Sub

#End Region








#Region "AutoPostBack Events Handles"



#End Region

#Region "UserControls Events Handles"

    



#End Region

#Region "Form Manager"

    Private Sub VerifySecurityLevel()

    End Sub

      

    Private Sub GetCurrentParameterInstance(ByRef BienvenidaPortalParameterInstance As BienvenidaPortalParameter, force As Boolean)
        If _loadcompleted Or force Then
            If Not _CurrentParameterInstance Then

                BienvenidaPortalParameterInstance = FormData

                If Page.IsPostBack Then
                    MapPageToClass(BienvenidaPortalParameterInstance)
                End If

                _CurrentParameterInstance = True
            Else
                BienvenidaPortalParameterInstance = _formData
            End If
        Else
            BienvenidaPortalParameterInstance = Nothing
        End If
    End Sub

    Protected Sub SetCurrentParameterInstance(ByRef BienvenidaPortalParameterInstance As BienvenidaPortalParameter, calledBy As String)
        FormData = BienvenidaPortalParameterInstance
        MapClassToPage(BienvenidaPortalParameterInstance,calledBy)
    End Sub

    Protected Sub SetErrors(errors As InMotionGIT.Common.Contracts.Errors.ErrorCollection)
        Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

        If IsNothing(errorList) Then
            errorList = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
        End If

        errorList = errors

        ViewState("Errors") = errorList
        ShowErrors()
    End Sub

    Public Sub ShowErrors()
        If Not IsNothing(ViewState("Errors")) Then
            Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

            Dim queryOut = From lst In errorList Select lst Order By lst.ErrorId

            ErrorsGridView.Visible = True
            ErrorsGridView.DataSource = queryOut.ToList
            ErrorsGridView.DataBind()
            UpdatePanelErrors.Update()
        End If
    End Sub
   
    Private Sub ShowWindowPopupMessage(message As String)
        NotifyMessageLabel.Text = message
        popupNotifyMessage.ShowOnPageLoad = True
    End Sub

    Private Sub ClosePopupWindow()
        popControl.Windows(0).ShowOnPageLoad = False
    End Sub

    Private Sub GetTransferParameters()
        Dim fromDocumentCache As Object = Nothing

        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) Then
            fromDocumentCache = Session( Request.QueryString("fromid"))
            Session.Remove(Request.QueryString("fromid"))
            
        Else
            fromDocumentCache = Session(Session("fromid"))
            Session.Remove(Session("fromid"))
            Session.Remove("fromid")   
        End If
        
        If Not IsNothing(fromDocumentCache) Then
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Client", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("EsCliente", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("EsEmpleado", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("EsProductor", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("EsAnonimo", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IdiomaID", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProducerCode", fromDocumentCache, _formData)
            
        End If
    End Sub
    
    

    Private Sub SetDefaultValuesFromQueryString()

        If Request.Form("EsCliente").IsNotEmpty Then
                FormData.EsCliente = Request.Form("EsCliente") 

ElseIf Request.QueryString("EsCliente").IsNotEmpty Then
                FormData.EsCliente = Request.QueryString("EsCliente") 
End If 

If Request.Form("EsEmpleado").IsNotEmpty Then
                FormData.EsEmpleado = Request.Form("EsEmpleado") 

ElseIf Request.QueryString("EsEmpleado").IsNotEmpty Then
                FormData.EsEmpleado = Request.QueryString("EsEmpleado") 
End If 

If Request.Form("EsProductor").IsNotEmpty Then
                FormData.EsProductor = Request.Form("EsProductor") 

ElseIf Request.QueryString("EsProductor").IsNotEmpty Then
                FormData.EsProductor = Request.QueryString("EsProductor") 
End If 

If Request.Form("EsAnonimo").IsNotEmpty Then
                FormData.EsAnonimo = Request.Form("EsAnonimo") 

ElseIf Request.QueryString("EsAnonimo").IsNotEmpty Then
                FormData.EsAnonimo = Request.QueryString("EsAnonimo") 
End If 

If Request.Form("IdiomaID").IsNotEmpty Then
                FormData.IdiomaID = Request.Form("IdiomaID") 

ElseIf Request.QueryString("IdiomaID").IsNotEmpty Then
                FormData.IdiomaID = Request.QueryString("IdiomaID") 
End If 

If Request.Form("ProducerCode").IsNotEmpty Then
                FormData.ProducerCode = Request.Form("ProducerCode") 

ElseIf Request.QueryString("ProducerCode").IsNotEmpty Then
                FormData.ProducerCode = Request.QueryString("ProducerCode") 
End If 


    End Sub
    
    Private Sub BehaviorControls(controlItem As Control, isEnable As Boolean)
        InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValueSimple("Enabled", controlItem, isEnable)           
    End Sub
    
    Private Sub SetReadOnlyControls()
    
    
    End Sub
     
#End Region

#Region "Actions Data Methods"

    Private Function SessionTrace(message As String) As String

        If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
            Dim tracelog As String = Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath)))

            tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
            Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = tracelog
        End If

        Return message
    End Function
    
    Private Sub ControlsInitialization()

    End Sub     
  
    Private Sub ParametersToDictionary(ByRef target As Dictionary(Of String, Object))
        If IsNothing(target) Then
            target = New Dictionary(Of String, Object)

            target.Add("Client", _formData.Client) 
            target.Add("EsCliente", _formData.EsCliente) 
            target.Add("EsEmpleado", _formData.EsEmpleado) 
            target.Add("EsProductor", _formData.EsProductor) 
            target.Add("EsAnonimo", _formData.EsAnonimo) 
            target.Add("IdiomaID", _formData.IdiomaID) 
            target.Add("ProducerCode", _formData.ProducerCode) 

        Else
            target("Client") = _formData.Client 
            target("EsCliente") = _formData.EsCliente 
            target("EsEmpleado") = _formData.EsEmpleado 
            target("EsProductor") = _formData.EsProductor 
            target("EsAnonimo") = _formData.EsAnonimo 
            target("IdiomaID") = _formData.IdiomaID 
            target("ProducerCode") = _formData.ProducerCode 

        End If     
    End Sub
    
    
    Private Sub ExecuteActionsInitializationForm()
                    Dim currentAction As String = SessionTrace("ActionsInitializationForm")
                    
                    Try                          
                        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
                        Dim messageAction As String = String.Empty
                        Dim lastURL As String = String.Empty
                        Dim isNullResult As Boolean = True 
                        Dim isFoundData As Boolean  = False 
                        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
                        
                        ParametersToDictionary(parametersDictionary)
                         
                        
                                    currentAction = SessionTrace("1. Call Shared Function 'User Profile' without parameters") 
            Dim _Client_45ce903fcb5a44f7920e1eec9a7ba540 As InMotionGIT.Client.Entity.Contracts.Client 
            

      If Not IsNothing(UserInfo) AndAlso Not IsNothing(UserInfo.User) then
         _Client_45ce903fcb5a44f7920e1eec9a7ba540 = New InMotionGIT.Client.Entity.Contracts.Client

         With _Client_45ce903fcb5a44f7920e1eec9a7ba540
             .ClientID = UserInfo.User.ClientID
             .FirstName = UserInfo.User.FirstName
             .LastName = UserInfo.User.LastName
             .LastName2 = UserInfo.User.SecondLastName
             .BirthDate = UserInfo.User.DateOfBirth
             .LegalName = UserInfo.User.CompanyName
             .GenderEnum = IIf(UserInfo.User.Gender = "Male", InMotionGIT.Common.Contracts.Enumerations.EnumGender.Male, InMotionGIT.Common.Contracts.Enumerations.EnumGender.Female)
             .eMailAddressDefault = UserInfo.User.Email
             .CompleteClientName = .CompleteClientNameValid
         End With

	isNullResult = (IsNothing(_Client_45ce903fcb5a44f7920e1eec9a7ba540))
	isFoundData  = Not isNullResult
      End If
     
            _formData.Client = _Client_45ce903fcb5a44f7920e1eec9a7ba540 

            currentAction = SessionTrace("2. _formData.EsAnonimo = Profile.IsAnonymous...") 
 
            currentAction = SessionTrace("2.1. _formData.EsAnonimo = Profile.IsAnonymous...")

 _formData.EsAnonimo = Profile.IsAnonymous 
            currentAction = SessionTrace("2.2. _formData.EsCliente = Security.IsClient()...")

 _formData.EsCliente = Security.IsClient() 
            currentAction = SessionTrace("2.3. _formData.EsEmpleado = Security.IsEmployee()...")

 _formData.EsEmpleado = Security.IsEmployee() 
            currentAction = SessionTrace("2.4. _formData.EsProductor = Security.IsProducer()...")

 _formData.EsProductor = Security.IsProducer() 
            currentAction = SessionTrace("2.5. _formData.IdiomaID = LanguageHelper.CurrentCultureToLang...")

 _formData.IdiomaID = LanguageHelper.CurrentCultureToLanguage 
            currentAction = SessionTrace("2.6. _formData.ProducerCode = UserInfo.ProducerID...")

 _formData.ProducerCode = UserInfo.ProducerID 

            currentAction = SessionTrace("3. If _formData.EsCliente = false AND _formData.EsEmpleado = false AND ... Then") 
If _formData.EsCliente = false AndAlso _formData.EsEmpleado = false AndAlso _formData.EsProductor = false Then

            currentAction = SessionTrace("4. CompleteClientName.Visible = false") 
            currentAction = SessionTrace("4.1. CompleteClientName.Visible = false...")
BehaviorShowControls("CompleteClientName,Hidden")

            End If
            currentAction = SessionTrace("5. If _formData.IdiomaID = 2 Then") 
If _formData.IdiomaID = 2 Then

            currentAction = SessionTrace("6. image0Bienvenido.Visible = true, image2Welcome.Visible = false") 
            currentAction = SessionTrace("6.1. image0Bienvenido.Visible = true...")
BehaviorShowControls("image0Bienvenido,Visible")
            currentAction = SessionTrace("6.2. image2Welcome.Visible = false...")
BehaviorShowControls("image2Welcome,Hidden")

        Else 
            currentAction = SessionTrace("7. image0Bienvenido.Visible = false, image2Welcome.Visible = true") 
            currentAction = SessionTrace("7.1. image0Bienvenido.Visible = false...")
BehaviorShowControls("image0Bienvenido,Hidden")
            currentAction = SessionTrace("7.2. image2Welcome.Visible = true...")
BehaviorShowControls("image2Welcome,Visible")

            End If

                        
                        currentAction = String.Empty
                         
                    Catch ex As Exception
                        InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
						_formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

                        If Request.QueryString("debug").IsNotEmpty Then
                            FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                            FormMessageLabel.ForeColor = Drawing.Color.Black
                            FormMessageLabel.Font.Bold = True
                            MessageTable.Visible = True
                        End If
                        
                    Finally                     
                        If _formData.Errors.Count > 0 Then
                            SetErrors(_formData.Errors)
                        End If
                        
                        If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                            If Page.IsCallback Then
                                DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                            Else
                                Response.Redirect(_webTransfer)
                            End If
                        End If
                   End Try
                   
               End Sub
    
    
#End Region






End Class

<Serializable()>
Public Class BienvenidaPortalParameter
    Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of  BienvenidaPortalParameter)

    ' Methods
    Public Sub New()
        MyBase.New()
    End Sub

    ' Properties
    Public Property Client As InMotionGIT.Client.Entity.Contracts.Client
    Public Property EsCliente As Boolean
    Public Property EsEmpleado As Boolean
    Public Property EsProductor As Boolean
    Public Property EsAnonimo As Boolean
    Public Property IdiomaID As Int32
    Public Property ProducerCode As Int32


End Class