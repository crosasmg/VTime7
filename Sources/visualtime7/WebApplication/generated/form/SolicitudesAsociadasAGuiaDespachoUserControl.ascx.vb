'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer Oracle v7.1.111 at 2017/02/10 model release 8
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"
    
Imports Artem.Google.UI
Imports DashboardBusiness.Helpers
Imports DevExpress.Web
Imports DevExpress.Web.ASPxClasses
Imports DevExpress.Web.ASPxEditors
Imports DevExpress.Web.ASPxGridView
Imports GIT.Core
Imports InMotionGIT.FrontOffice.Support.Enumerations
Imports InMotionGIT.FrontOffice.Support.Helpers.ControlHandler
Imports InMotionGIT.BarCode
Imports InMotionGIT.BarCode.Enumerations
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo
Imports System.IO
Imports InMotionGIT.FrontOffice.Support
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data
Imports System.Data.Common
Imports System.Globalization
Imports System.Linq
Imports System.Threading.Thread
Imports System.Xml.Linq


#End Region

Partial Public Class SolicitudesAsociadasAGuiaDespachoUserControl
    Inherits GIT.Core.UserControlBase
    Implements Dropthings.Widget.Framework.IWidget

#Region "IWidget Members"
    
    
    

    Public Sub Closed() Implements Dropthings.Widget.Framework.IWidget.Closed
    End Sub

    Public Sub HideSettings() Implements Dropthings.Widget.Framework.IWidget.HideSettings

    End Sub

    Public Sub Init1(host As Dropthings.Widget.Framework.IWidgetHost) Implements Dropthings.Widget.Framework.IWidget.Init

    End Sub

    Public Sub Maximized() Implements Dropthings.Widget.Framework.IWidget.Maximized

    End Sub

    Public Sub Minimized() Implements Dropthings.Widget.Framework.IWidget.Minimized

    End Sub

    Public Sub ShowSettings() Implements Dropthings.Widget.Framework.IWidget.ShowSettings

    End Sub

#End Region

#Region "Private fields"

    Private _formData As SolicitudesAsociadasAGuiaDespachoParameter = Nothing
    Private _CurrentParameterInstance As Boolean = False
    Private _loading As Boolean = False
    Private _loadcompleted As Boolean = False
    Private _webTransfer as String  
    
        
#End Region

#Region "Public properties"

    Public Property FormData() As SolicitudesAsociadasAGuiaDespachoParameter
        Get
            Dim formDefinition As String = String.Empty               
             
            If IsNothing(_formData) Then
                If Not IsPostBack Then
                    If Not String.IsNullOrEmpty(Request.QueryString("id")) Then
                        Dim _id As Guid
                        
                        If Guid.TryParse(Request.QueryString("id"), _id) Then
		                        _FormID.Text = Request.QueryString("id")  
                            
                            formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
           If Not String.IsNullOrEmpty(formDefinition) Then
              _formData = Serialize.Deserialize(Of SolicitudesAsociadasAGuiaDespachoParameter)(formDefinition)
           End If
                        End If
                    End If

                    If IsNothing(_formData) Then
                        _formData = New SolicitudesAsociadasAGuiaDespachoParameter
                       
                        If String.IsNullOrEmpty(_FormID.Text) Then
                        	_FormID.Text = System.Guid.NewGuid().ToString                       
                        End If
											
                        _formData.InternalId = _FormID.Text
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) OrElse
                           Not String.IsNullOrEmpty(Session("fromid")) Then
                           
                            GetTransferParameters()
                        End If
                        
                        
                        
                        SetDefaultValuesFromQueryString()
                        ValidateParametersInstance(_formData)
                        
                        popupNotifyMessage.ShowOnPageLoad = false                        
                        
                        ControlsInitialization()
                        ExecuteActionsInitializationForm()
                         
                        If Not String.IsNullOrEmpty(Request.QueryString("readonly")) Then
                            BehaviorControls(SolicitudesAsociadasAGuiaDespachoTablePage, False)
                        End If
                        

                    Else
                    		SetDefaultValuesFromQueryString()
                        
                    End If

                Else
                     formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
           If Not String.IsNullOrEmpty(formDefinition) Then
              _formData = Serialize.Deserialize(Of SolicitudesAsociadasAGuiaDespachoParameter)(formDefinition)
           End If                    

                    If IsNothing(_formData) Then
                        _formData = New SolicitudesAsociadasAGuiaDespachoParameter
                    End If
                End If
            End If

            Return _formData
        End Get

        Set(value As SolicitudesAsociadasAGuiaDespachoParameter)
            _formData = value
        End Set
    End Property
    
#End Region

#Region "Form Events"

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        ErrorsGridView.Visible = False
        
        
        
        Dim formData As SolicitudesAsociadasAGuiaDespachoParameter = Me.FormData        
           
        If Not IsPostBack  AndAlso Not GridViewPostBack() Then                     
            
            
            _loadcompleted = True
            
            
            If IsPostBack And Not _CurrentParameterInstance Then
                MapPageToClass(formData)
                _CurrentParameterInstance = True
            End If

            MapClassToPage(formData)
            VerifySecurityLevel()
            
            
        Else
            
            
            
        End If        
        
        
        
        
    End Sub    

    Protected Sub Page_Unload(sender As Object, e As EventArgs) Handles Me.Unload        
        If Not IsNothing(_formData) Then
              Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text)) = Serialize.Serialize(Of SolicitudesAsociadasAGuiaDespachoParameter)(_formData)
              Session(String.Format(CultureInfo.InvariantCulture, "FormTitle.{0}", _FormID.Text)) = Page.Title
              
             'Si el modo de trabajo es desarrollo se coloca el objeto directo en al sesión para que pueda ser examinado usando la pagina /support/SessionDump.aspx?form
              If ConfigurationManager.AppSettings("Working.Mode") = "Development" Then
                 Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = _formData
              End If
           End If                  
    End Sub

#End Region

#Region "Controls Events"


    Private Function GridViewPostBack() As Boolean
        For index As Integer = 0 To Request.Params.Count - 1
            If Request.Params(index).EndsWith("$UnderwritingCaseForGuide")  Then
                Return True
            End If
        Next
        
        Return False
    End Function    
        
        Protected Sub Guidestatuscode_DataBinding(sender As Object, e As EventArgs) Handles Guidestatuscode.DataBinding
           With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                    "SELECT  TRANSGUIDESTATUS.GUIDESTATUS, TRANSGUIDESTATUS.LANGUAGEID, TRANSGUIDESTATUS.DESCRIPTION FROM TRANSGUIDESTATUS TRANSGUIDESTATUS  WHERE TRANSGUIDESTATUS.LANGUAGEID = {0}  ORDER BY TransGuideStatus.Description ASC", LanguageHelper.CurrentCultureToLanguage), 
                                                    "TransGuideStatus", "Linked.Underwriting")                                                                      
                     
                  .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                  Guidestatuscode.DataSource = .QueryExecuteToTable(True)
           End With  
    End Sub
    Protected Sub text0_DataBinding(sender As Object, e As EventArgs) Handles text0.DataBinding
           With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                    "SELECT  USERS.NUSERCODE, USERS.SCLIENT, CLIENT.SCLIENT, CLIENT.SCLIENAME FROM USERS USERS JOIN CLIENT CLIENT ON CLIENT.SCLIENT = USERS.SCLIENT    WHERE NOT CLIENT.SCLIENAME IS NULL ORDER BY CLIENT.SCLIENAME", ""), 
                                                    "USERS", "Linked.LatCombined")                                                                      
                     
                  .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                  text0.DataSource = .QueryExecuteToTable(True)
           End With  
    End Sub

    
#End Region


#Region "PopupMenu Events"

    
    
#End Region

#Region "Mapping methods"

    Public Sub ValidateParametersInstance(ByRef SolicitudesAsociadasAGuiaDespachoParameterInstance As SolicitudesAsociadasAGuiaDespachoParameter)
        If IsNothing(SolicitudesAsociadasAGuiaDespachoParameterInstance.Guide) Then
            SolicitudesAsociadasAGuiaDespachoParameterInstance.Guide = New InMotionGIT.Underwriting.Contracts.Guide
        End If
   
    End Sub
    
    ''' <summary>
    ''' This method moves the data from the class to the page
    ''' </summary>
    ''' <param name="SolicitudesAsociadasAGuiaDespachoParameterInstance"></param>
    ''' <remarks></remarks>
    Public Sub MapClassToPage(ByRef SolicitudesAsociadasAGuiaDespachoParameterInstance As SolicitudesAsociadasAGuiaDespachoParameter, Optional calledBy As String = "")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
        ValidateParametersInstance(SolicitudesAsociadasAGuiaDespachoParameterInstance)

        Guidestatuscode.DataBind()
text0.DataBind()

       
        With SolicitudesAsociadasAGuiaDespachoParameterInstance
          
                      UnderwritingCaseGuideGuideId.Text = .Guide.GuideId
            Guidestatuscode.SelectedItem = Guidestatuscode.Items.FindByValue(.Guide.Guidestatuscode)
            text0.SelectedItem = text0.Items.FindByValue(.Guide.CreatorUserCode)

                      If IsNothing(.UnderwritingCaseForGuideCollection) Then
                .UnderwritingCaseForGuideCollection = New InMotionGIT.Mutual.Contracts.UnderwritingCaseForGuideCollection()
            End If

            _UnderwritingCaseForGuideList = .UnderwritingCaseForGuideCollection
            UnderwritingCaseForGuide.DataSource = _UnderwritingCaseForGuideList
            UnderwritingCaseForGuide.DataBind()
    
                  
           
  
 
          
               
            
            
       End With


if (Not ("UnderwritingCaseForGuide".IndexOf(calledBy) > -1)) Or String.IsNullOrEmpty(calledBy) then        
            
         

        End If          
    End Sub

    ''' <summary>
    ''' This method moves the data from the page to the class
    ''' </summary>
    ''' <param name="SolicitudesAsociadasAGuiaDespachoParameterInstance"></param>
    Public Sub MapPageToClass(ByRef SolicitudesAsociadasAGuiaDespachoParameterInstance As SolicitudesAsociadasAGuiaDespachoParameter)
        _loading = True

        ValidateParametersInstance(SolicitudesAsociadasAGuiaDespachoParameterInstance)

        With SolicitudesAsociadasAGuiaDespachoParameterInstance
            .Guide.GuideId = UnderwritingCaseGuideGuideId.Text
            .Guide.Guidestatuscode = Guidestatuscode.Value
            .Guide.CreatorUserCode = text0.Value


        'GetViewStateUnderwritingCaseForGuideList()
        '.UnderwritingCaseForGuideCollection = _UnderwritingCaseForGuideList
        '.UnderwritingCaseForGuideCollection.CurrentIndex= UnderwritingCaseForGuide.EditIndex
        'ViewState.Remove("UnderwritingCaseForGuideList")



        End With




        _loading = False
    End Sub

#End Region

#Region "UnderwritingCaseForGuide GridView Controls with dependencies Events"
    
    Private Sub productCode_OnCallback(source As Object, e As CallbackEventArgsBase)
        productCode_Fill(DirectCast(source, ASPxComboBox), e.Parameter)
    End Sub

    Private Sub productCode_Fill(control As ASPxComboBox, NBRANCH As Integer)
        With New DataManagerFactory("SELECT  PRODMASTER.NBRANCH, PRODMASTER.NPRODUCT, PRODMASTER.SDESCRIPT FROM PRODMASTER PRODMASTER  WHERE PRODMASTER.SSTATREGT = '1'  AND (PRODMASTER.NBRANCH = @:PRODMASTERNBRANCHDependen AND NOT PRODMASTER.SDESCRIPT IS NULL) ORDER BY PRODMASTER.SDESCRIPT ", "PRODMASTER", "Linked.LatCombined")                                       
            .AddParameter("PRODMASTERNBRANCHDependen", DbType.Int32, 0, False, NBRANCH)

            .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
            control.DataSource = .QueryExecuteToTable(True)
            control.DataBindItems()
        End With        
    End Sub

#End Region

#Region "UnderwritingCaseForGuide GridView editing support"

    Private _UnderwritingCaseForGuideList As InMotionGIT.Mutual.Contracts.UnderwritingCaseForGuideCollection = Nothing

    Protected Sub UnderwritingCaseForGuide_DataBinding(sender As Object, e As EventArgs) Handles UnderwritingCaseForGuide.DataBinding        
            With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
                                                                 "SELECT  PRODMASTER.NBRANCH, PRODMASTER.NPRODUCT, PRODMASTER.SDESCRIPT FROM PRODMASTER PRODMASTER  WHERE PRODMASTER.SSTATREGT = '1'  ", "1"), "PRODMASTER", "Linked.LatCombined")
                        
                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                    DirectCast(UnderwritingCaseForGuide.Columns("productCode"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
            End With    
            With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
                                                                 "SELECT  CLIENT.SCLIENT, CLIENT.SCLIENAME FROM CLIENT CLIENT    WHERE NOT CLIENT.SCLIENAME IS NULL ORDER BY CLIENT.SCLIENAME", ""), "CLIENT", "Linked.LatCombined")
                        
                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                    DirectCast(UnderwritingCaseForGuide.Columns("clientID"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
            End With    
 
            If IsNothing(FormData.UnderwritingCaseForGuideCollection) Then
                FormData.UnderwritingCaseForGuideCollection = New InMotionGIT.Mutual.Contracts.UnderwritingCaseForGuideCollection()
            End If

        _UnderwritingCaseForGuideList = FormData.UnderwritingCaseForGuideCollection
        UnderwritingCaseForGuide.DataSource = _UnderwritingCaseForGuideList      
    End Sub
    
    Protected Sub UnderwritingCaseForGuide_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles UnderwritingCaseForGuide.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
            Case "productCode"                
                data = DirectCast(UnderwritingCaseForGuide.Columns("productCode"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource 
                
                rows = data.Select(String.Format(CultureInfo.InvariantCulture, "NBRANCH = {0} AND NPRODUCT = {1}", e.GetFieldValue("lineOfBusiness"), e.Value))

                If rows.Count > 0 Then
                    e.DisplayText = rows(0)("SDESCRIPT")
                End If
      
            Case Else
          End Select
    End Sub
    
    Protected Sub UnderwritingCaseForGuide_CellEditorInitialize(sender As Object, e As DevExpress.Web.ASPxGridView.ASPxGridViewEditorEventArgs) Handles UnderwritingCaseForGuide.CellEditorInitialize
        If UnderwritingCaseForGuide.IsNewRowEditing Then
            Select Case e.Column.FieldName

                Case "productCode"
     AddHandler DirectCast(e.Editor, ASPxComboBox).Callback, AddressOf productCode_OnCallback 


                Case "fullProposalID"                     
                       e.Editor.Focus()               
            End Select

        Else
            Select Case e.Column.FieldName
                   
                Case "productCode"
     productCode_Fill(e.Editor, UnderwritingCaseForGuide.GetRowValues(e.VisibleIndex, "lineOfBusiness")) 
     AddHandler DirectCast(e.Editor, ASPxComboBox).Callback, AddressOf productCode_OnCallback 


                Case "fullProposalID"                     
                       e.Editor.Focus() 
            End Select
        End If
        
        Select Case e.Column.FieldName

            Case "fullProposalID"
                  
                 
                Case "productCode"
     DirectCast(e.Editor, ASPxComboBox).DataBindItems() 
                Case "clientID"
     DirectCast(e.Editor, ASPxComboBox).DataBindItems() 

        End Select
    End Sub      
            
    Protected Sub UnderwritingCaseForGuide_ParseValue(sender As Object, e As DevExpress.Web.Data.ASPxParseValueEventArgs) Handles UnderwritingCaseForGuide.ParseValue
        Select Case e.FieldName

        End Select
    End Sub    
    
 
    
    Protected Sub UnderwritingCaseForGuide_RowInserting(sender As Object, e As DevExpress.Web.Data.ASPxDataInsertingEventArgs) Handles UnderwritingCaseForGuide.RowInserting
        Dim UnderwritingCaseForGuideItem As InMotionGIT.Mutual.Contracts.UnderwritingCaseForGuide = New InMotionGIT.Mutual.Contracts.UnderwritingCaseForGuide()
        GetViewStateUnderwritingCaseForGuideList()
        
        With UnderwritingCaseForGuideItem
            .underwritingCaseId = _UnderwritingCaseForGuideList.Count
                    .fullProposalID = e.NewValues("fullProposalID") 

                    .productCode = e.NewValues("productCode") 

                    .clientID = e.NewValues("clientID") 

                    .stageDescription = e.NewValues("stageDescription") 

                    .faceAmount = e.NewValues("faceAmount") 

                    .premium = e.NewValues("premium") 

                    .lineOfBusiness = e.NewValues("lineOfBusiness") 


        End With

        _UnderwritingCaseForGuideList.Add(UnderwritingCaseForGuideItem)
         UnderwritingCaseForGuide.CancelEdit()
        
        If ViewState("UnderwritingCaseForGuideOperationType") = "Add" Then
            UnderwritingCaseForGuide.AddNewRow()
        End If

        e.Cancel = True
        SetUnderwritingCaseForGuideListDataBind()
    End Sub
    
    Protected Sub UnderwritingCaseForGuide_RowUpdating(sender As Object, e As DevExpress.Web.Data.ASPxDataUpdatingEventArgs) Handles UnderwritingCaseForGuide.RowUpdating
        Dim UnderwritingCaseForGuideItem As InMotionGIT.Mutual.Contracts.UnderwritingCaseForGuide = New InMotionGIT.Mutual.Contracts.UnderwritingCaseForGuide() 
        Dim underwritingCaseId As String = e.Keys("underwritingCaseId")
        
        GetViewStateUnderwritingCaseForGuideList()
                   
        For index As Integer = 0 To _UnderwritingCaseForGuideList.Count - 1
            If _UnderwritingCaseForGuideList(index).underwritingCaseId = underwritingCaseId Then
                
                With _UnderwritingCaseForGuideList(index)
                    .fullProposalID = e.NewValues("fullProposalID") 

                    .productCode = e.NewValues("productCode") 

                    .clientID = e.NewValues("clientID") 

                    .stageDescription = e.NewValues("stageDescription") 

                    .faceAmount = e.NewValues("faceAmount") 

                    .premium = e.NewValues("premium") 

                    .lineOfBusiness = e.NewValues("lineOfBusiness") 

                
                End With
                
                Exit For
            End If
        Next

        SetUnderwritingCaseForGuideListDataBind()

        UnderwritingCaseForGuide.CancelEdit()
        e.Cancel = True
    End Sub

    Protected Sub UnderwritingCaseForGuide_RowDeleting(sender As Object, e As DevExpress.Web.Data.ASPxDataDeletingEventArgs) Handles UnderwritingCaseForGuide.RowDeleting
       Dim underwritingCaseId As String = e.Keys("underwritingCaseId")
       
       GetViewStateUnderwritingCaseForGuideList()
       
       For index As Integer = 0 To _UnderwritingCaseForGuideList.Count - 1
           If _UnderwritingCaseForGuideList(index).underwritingCaseId = underwritingCaseId Then
             _UnderwritingCaseForGuideList.RemoveAt(index)
             
             Exit For
           End If
       Next       
       
        SetUnderwritingCaseForGuideListDataBind()
        e.Cancel = True        
    End Sub

    Private Sub SetUnderwritingCaseForGuideListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As SolicitudesAsociadasAGuiaDespachoParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.UnderwritingCaseForGuideCollection = _UnderwritingCaseForGuideList
        UnderwritingCaseForGuide.DataSource = _UnderwritingCaseForGuideList
        UnderwritingCaseForGuide.DataBind()
   End Sub

    Private Sub GetViewStateUnderwritingCaseForGuideList()
        Dim FormData As SolicitudesAsociadasAGuiaDespachoParameter

         GetCurrentParameterInstance(FormData, True)

        _UnderwritingCaseForGuideList = FormData.UnderwritingCaseForGuideCollection

        If IsNothing(_UnderwritingCaseForGuideList) Then
            _UnderwritingCaseForGuideList = New InMotionGIT.Mutual.Contracts.UnderwritingCaseForGuideCollection()
        End If        
    End Sub
     
    
        
    
#End Region







#Region "AutoPostBack Events Handles"



#End Region

#Region "UserControls Events Handles"

    



#End Region

#Region "Form Manager"

    Private Sub VerifySecurityLevel()





    End Sub

      

    Private Sub GetCurrentParameterInstance(ByRef SolicitudesAsociadasAGuiaDespachoParameterInstance As SolicitudesAsociadasAGuiaDespachoParameter, force As Boolean)
        If _loadcompleted Or force Then
            If Not _CurrentParameterInstance Then

                SolicitudesAsociadasAGuiaDespachoParameterInstance = FormData

                If Page.IsPostBack Then
                    MapPageToClass(SolicitudesAsociadasAGuiaDespachoParameterInstance)
                End If

                _CurrentParameterInstance = True
            Else
                SolicitudesAsociadasAGuiaDespachoParameterInstance = _formData
            End If
        Else
            SolicitudesAsociadasAGuiaDespachoParameterInstance = Nothing
        End If
    End Sub

    Protected Sub SetCurrentParameterInstance(ByRef SolicitudesAsociadasAGuiaDespachoParameterInstance As SolicitudesAsociadasAGuiaDespachoParameter, calledBy As String)
        FormData = SolicitudesAsociadasAGuiaDespachoParameterInstance
        MapClassToPage(SolicitudesAsociadasAGuiaDespachoParameterInstance,calledBy)
    End Sub

    Protected Sub SetErrors(errors As InMotionGIT.Common.Contracts.Errors.ErrorCollection)
        Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

        If IsNothing(errorList) Then
            errorList = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
        End If

        errorList = errors

        ViewState("Errors") = errorList
        ShowErrors()
    End Sub

    Public Sub ShowErrors()
        If Not IsNothing(ViewState("Errors")) Then
            Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

            Dim queryOut = From lst In errorList Select lst Order By lst.ErrorId

            ErrorsGridView.Visible = True
            ErrorsGridView.DataSource = queryOut.ToList
            ErrorsGridView.DataBind()
            UpdatePanelErrors.Update()
        End If
    End Sub
   
    Private Sub ShowWindowPopupMessage(message As String)
        NotifyMessageLabel.Text = message
        popupNotifyMessage.ShowOnPageLoad = True
    End Sub

    Private Sub ClosePopupWindow()
        popControl.Windows(0).ShowOnPageLoad = False
    End Sub

    Private Sub GetTransferParameters()
        Dim fromDocumentCache As Object = Nothing

        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) Then
            fromDocumentCache = Session( Request.QueryString("fromid"))
            Session.Remove(Request.QueryString("fromid"))
            
        Else
            fromDocumentCache = Session(Session("fromid"))
            Session.Remove(Session("fromid"))
            Session.Remove("fromid")   
        End If
        
        If Not IsNothing(fromDocumentCache) Then
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CasesQuantity", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("TotInsAmount", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("TotPremium", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Guide", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UnderwritingCaseForGuideCollection", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Guia", fromDocumentCache, _formData)
            
        End If
    End Sub
    
    

    Private Sub SetDefaultValuesFromQueryString()

        If Request.Form("CasesQuantity").IsNotEmpty Then
                FormData.CasesQuantity = Request.Form("CasesQuantity") 

ElseIf Request.QueryString("CasesQuantity").IsNotEmpty Then
                FormData.CasesQuantity = Request.QueryString("CasesQuantity") 
End If 

If Request.Form("TotInsAmount").IsNotEmpty Then
                FormData.TotInsAmount = Request.Form("TotInsAmount") 

ElseIf Request.QueryString("TotInsAmount").IsNotEmpty Then
                FormData.TotInsAmount = Request.QueryString("TotInsAmount") 
End If 

If Request.Form("TotPremium").IsNotEmpty Then
                FormData.TotPremium = Request.Form("TotPremium") 

ElseIf Request.QueryString("TotPremium").IsNotEmpty Then
                FormData.TotPremium = Request.QueryString("TotPremium") 
End If 

If Request.Form("Guia").IsNotEmpty Then
                FormData.Guia = Request.Form("Guia") 

ElseIf Request.QueryString("Guia").IsNotEmpty Then
                FormData.Guia = Request.QueryString("Guia") 
End If 


    End Sub
    
    Private Sub BehaviorControls(parent As Control, isEnable As Boolean)
        For Each controlItem As Control In parent.Controls
			InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValueSimple("Enabled", controlItem, isEnable)


            With controlItem
                If Not IsNothing(.Controls) AndAlso .Controls.Count > 0 Then
                    BehaviorControls(controlItem, isEnable)
                End If
            End With
        Next
    End Sub
    
#End Region

#Region "Actions Page Methods"

    Private Sub ControlsInitialization()
        UnderwritingCaseForGuide.ClientVisible = True
        UnderwritingCaseForGuide.Enabled = False

    End Sub     
  
    Private Sub ParametersToDictionary(ByRef target As Dictionary(Of String, Object))
        If IsNothing(target) Then
            target = New Dictionary(Of String, Object)

            target.Add("CasesQuantity", _formData.CasesQuantity) 
            target.Add("TotInsAmount", _formData.TotInsAmount) 
            target.Add("TotPremium", _formData.TotPremium) 
            target.Add("Guide", _formData.Guide) 
            target.Add("UnderwritingCaseForGuideCollection", _formData.UnderwritingCaseForGuideCollection) 
            target.Add("Guia", _formData.Guia) 

        Else
            target("CasesQuantity") = _formData.CasesQuantity 
            target("TotInsAmount") = _formData.TotInsAmount 
            target("TotPremium") = _formData.TotPremium 
            target("Guide") = _formData.Guide 
            target("UnderwritingCaseForGuideCollection") = _formData.UnderwritingCaseForGuideCollection 
            target("Guia") = _formData.Guia 

        End If     
    End Sub
    
    
    Private Sub ExecuteActionsInitializationForm()
                    Dim currentAction As String = String.Empty
                    
                    Try                          
                        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)                          
                        Dim messageAction As String = String.Empty
                        Dim lastURL As String = String.Empty
                        Dim isNullResult As Boolean = True 
                        Dim isFoundData As Boolean  = False 
                        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
                        
                        ParametersToDictionary(parametersDictionary)
                         
                        
                                    currentAction = "1. '_formData.Guide' = New 'InMotionGIT.Underwriting.'...'" 
             _formData.Guide = New InMotionGIT.Underwriting.Contracts.Guide

            currentAction = "2. If _formData.Guia Is Null Or Empty  OR _formData.Guia = 0 Then" 
        If IsNothing(_formData.Guia) OrElse _formData.Guia = 0 Then 

            currentAction = "3. _formData.Guia = 4..." 
 

 _formData.Guia = 4 

            End If
            currentAction = "4. _formData.Guide.GuideId = _formData.Guia..." 
 
If IsNothing(_formData.Guide) Then
   _formData.Guide = New InMotionGIT.Underwriting.Contracts.Guide
End If 

 _formData.Guide.GuideId = _formData.Guia 

            currentAction = "5. Call Shared Function 'RetrieveGuide' with parameters (guideID, guideType, atDate, withLookups, languageID)" 
            Dim _Guide_7c5b38427a6d47ca89284ae6829f07b6 As InMotionGIT.Underwriting.Contracts.Guide 
            _Guide_7c5b38427a6d47ca89284ae6829f07b6 = InMotionGIT.Underwriting.Proxy.Manager.RetrieveGuide            (guideID:=_formData.Guide.GuideId, guideType:=1, atDate:=Date.Today, withLookups:=False, languageID:=LanguageHelper.CurrentCultureToLanguage) 
             
            _formData.Guide = _Guide_7c5b38427a6d47ca89284ae6829f07b6 
            isNullResult = (IsNothing(_Guide_7c5b38427a6d47ca89284ae6829f07b6)) 

            currentAction = "9. _formData.Guide.Codeofguidetype = 1..." 
 
If IsNothing(_formData.Guide) Then
   _formData.Guide = New InMotionGIT.Underwriting.Contracts.Guide
End If 

 _formData.Guide.Codeofguidetype = 1 

            currentAction = "10. Call Function 'RetrieveUnderwritingCasesForGuidesByGuide' with parameters (guideID, guideType, languageID)" 
            Dim _UnderwritingCaseForGuideCollection_ca4f5b10c26f4009bd7e92758976fd33 As InMotionGIT.Mutual.Contracts.UnderwritingCaseForGuideCollection 
            _UnderwritingCaseForGuideCollection_ca4f5b10c26f4009bd7e92758976fd33 = (New InMotionGIT.Mutual.Service.MutualManager).RetrieveUnderwritingCasesForGuidesByGuide            (guideID:=_formData.Guide.GuideId, guideType:=_formData.Guide.Codeofguidetype, languageID:=UserInfo.LanguageId) 
             
            If Not IsNothing(_UnderwritingCaseForGuideCollection_ca4f5b10c26f4009bd7e92758976fd33) Then 
               _formData.UnderwritingCaseForGuideCollection = _UnderwritingCaseForGuideCollection_ca4f5b10c26f4009bd7e92758976fd33 
            End If 
            isNullResult = (IsNothing(_UnderwritingCaseForGuideCollection_ca4f5b10c26f4009bd7e92758976fd33)) 


                        
                        currentAction = String.Empty
                         
                    Catch ex As Exception
                        InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
						_formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

                        If Request.QueryString("debug").IsNotEmpty Then
                            FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                            FormMessageLabel.ForeColor = Drawing.Color.Black
                            FormMessageLabel.Font.Bold = True
                            MessageTable.Visible = True
                        End If
                        
                    Finally                     
                        If _formData.Errors.Count > 0 Then
                            SetErrors(_formData.Errors)
                        End If
                        
                        If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                            If Page.IsCallback Then
                                DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                            Else
                                Response.ClearHeaders()
                                Response.ClearContent()
                                Response.Redirect(_webTransfer)
                            End If
                        End If
                   End Try
               End Sub
    

    
#End Region






End Class

<Serializable()>
Public Class SolicitudesAsociadasAGuiaDespachoParameter
    Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of  SolicitudesAsociadasAGuiaDespachoParameter)

    ' Methods
    Public Sub New()
        MyBase.New()
    End Sub

    ' Properties
    Public Property CasesQuantity As Int64
    Public Property TotInsAmount As Decimal
    Public Property TotPremium As Decimal
    Public Property Guide As InMotionGIT.Underwriting.Contracts.Guide
    Public Property UnderwritingCaseForGuideCollection As InMotionGIT.Mutual.Contracts.UnderwritingCaseForGuideCollection
    Public Property Guia As Int64


End Class