'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer Oracle v7.1.2 at 2019/04/12 model release 2
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"
    
Imports Artem.Google.UI
Imports DashboardBusiness.Helpers
Imports DevExpress.Web
Imports DevExpress.Web.ASPxClasses
Imports DevExpress.Web.ASPxEditors
Imports DevExpress.Web.ASPxGridView
Imports GIT.Core
Imports InMotionGIT.FrontOffice.Support.Enumerations
Imports InMotionGIT.FrontOffice.Support.Helpers.ControlHandler
Imports InMotionGIT.BarCode
Imports InMotionGIT.BarCode.Enumerations
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo
Imports System.IO
Imports InMotionGIT.FrontOffice.Support
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data
Imports System.Data.Common
Imports System.Globalization
Imports System.Linq
Imports System.Threading.Thread
Imports System.Xml.Linq
Imports System.Net


#End Region

Partial Public Class NNCotizacionMiVidaValeViewUserControl
    Inherits GIT.Core.UserControlBase
    Implements Dropthings.Widget.Framework.IWidget

#Region "IWidget Members"
    
    
    

    Public Sub Closed() Implements Dropthings.Widget.Framework.IWidget.Closed
    End Sub

    Public Sub HideSettings() Implements Dropthings.Widget.Framework.IWidget.HideSettings

    End Sub

    Public Sub Init1(host As Dropthings.Widget.Framework.IWidgetHost) Implements Dropthings.Widget.Framework.IWidget.Init

    End Sub

    Public Sub Maximized() Implements Dropthings.Widget.Framework.IWidget.Maximized

    End Sub

    Public Sub Minimized() Implements Dropthings.Widget.Framework.IWidget.Minimized

    End Sub

    Public Sub ShowSettings() Implements Dropthings.Widget.Framework.IWidget.ShowSettings

    End Sub

#End Region

#Region "Private fields"

    Private _formData As NNCotizacionMiVidaValeViewParameter = Nothing
    Private _CurrentParameterInstance As Boolean = False
    Private _loading As Boolean = False
    Private _loadcompleted As Boolean = False
    Private _webTransfer as String  
    
    Private _ImpairmentExclusionForAmendmentList As InMotionGIT.Policy.Entity.Contracts.ImpairmentExclusionForAmendmentCollection = Nothing
Private _ClauseForAmendmentList As InMotionGIT.Policy.Entity.Contracts.ClauseForAmendmentCollection = Nothing
Private _CoverageForAmendmentList As InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection = Nothing
    
#End Region

#Region "Public properties"

    Public Property FormData() As NNCotizacionMiVidaValeViewParameter
        Get
            Dim formDefinition As String = String.Empty               
             
            If IsNothing(_formData) Then
                If Not IsPostBack Then
                    If Not String.IsNullOrEmpty(Request.QueryString("id")) Then
                        Dim _id As Guid
                        
                        If Guid.TryParse(Request.QueryString("id"), _id) Then
		                        _FormID.Text = Request.QueryString("id")  
                            
                            formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
           If Not String.IsNullOrEmpty(formDefinition) Then
              _formData = Serialize.Deserialize(Of NNCotizacionMiVidaValeViewParameter)(formDefinition)
           End If
                        End If
                    End If

                    If IsNothing(_formData) Then
                        _formData = New NNCotizacionMiVidaValeViewParameter
                       
                        If String.IsNullOrEmpty(_FormID.Text) Then
                        	_FormID.Text = System.Guid.NewGuid().ToString                       
                        End If
											
                        _formData.InternalId = _FormID.Text
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) OrElse
                           Not String.IsNullOrEmpty(Session("fromid")) Then
                           
                            GetTransferParameters()
                        End If
                        
                        
                        
                        SetDefaultValuesFromQueryString()
                        ValidateParametersInstance(_formData)
                        
                        popupNotifyMessage.ShowOnPageLoad = false                        
                        
                        ControlsInitialization()
                        ExecuteActionsInitializationForm()
                         
                        If Not String.IsNullOrEmpty(Request.QueryString("readonly")) Then
                            SetReadOnlyControls()
                        End If
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("button0Finaliza")) Then
                            button0Finaliza_Click(nothing, nothing)
                        End If

                    Else
                    		SetDefaultValuesFromQueryString()
                        
                    End If

                Else
                     formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
           If Not String.IsNullOrEmpty(formDefinition) Then
              _formData = Serialize.Deserialize(Of NNCotizacionMiVidaValeViewParameter)(formDefinition)
           End If                    

                    If IsNothing(_formData) Then
                        _formData = New NNCotizacionMiVidaValeViewParameter
                    End If
                End If
            End If

            Return _formData
        End Get

        Set(value As NNCotizacionMiVidaValeViewParameter)
            _formData = value
        End Set
    End Property
    
#End Region

#Region "Form Events"

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        ErrorsGridView.Visible = False
        
        
        
        Dim formData As NNCotizacionMiVidaValeViewParameter = Me.FormData        
           
        If Not IsPostBack  AndAlso Not GridViewPostBack() Then                     
            
            
            _loadcompleted = True
            
            
            If IsPostBack And Not _CurrentParameterInstance Then
                MapPageToClass(formData)
                _CurrentParameterInstance = True
            End If

            MapClassToPage(formData)
            VerifySecurityLevel()
            
            
        Else
            
            
            
        End If        
        
        
        
        
    End Sub    

    Protected Sub Page_Unload(sender As Object, e As EventArgs) Handles Me.Unload        
        If Not IsNothing(_formData) Then  
                       Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text)) = Serialize.Serialize(Of NNCotizacionMiVidaValeViewParameter)(_formData)
                       Session(String.Format(CultureInfo.InvariantCulture, "FormTitle.{0}", _FormID.Text)) = Page.Title
        End If 
        
        If Not IsNothing(_formData) Then
             If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
                 Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = _formData
             End If   
       
             If Not IsNothing(Session("Form.Track.Parameters")) AndAlso Session("Form.Track.Parameters").ToString.ToLower = "true" Then
                  InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of NNCotizacionMiVidaValeViewParameter) _
                  (formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.NNCotizacionMiVidaValeView.xml",  ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
             End If        
        End If  
   End Sub

#End Region

#Region "Controls Events"


    Private Function GridViewPostBack() As Boolean
        For index As Integer = 0 To Request.Params.Count - 1
            If Request.Params(index).EndsWith("$ImpairmentExclusionForAmendment") or Request.Params(index).EndsWith("$ClauseForAmendment") or Request.Params(index).EndsWith("$ExtraPremiumDiscountForAmendment") or Request.Params(index).EndsWith("$CoverageForAmendment") or Request.Params(index).EndsWith("$DiscountSurchargeAmendment")  Then
                Return True
            End If
        Next
        
        Return False
    End Function    
    Protected Sub RiskInformationProductCode_Callback(sender As Object, e As CallbackEventArgsBase) Handles RiskInformationProductCode.Callback
               
               If Not String.IsNullOrEmpty(e.Parameter) Then
                   Dim parameters As String() = e.Parameter.Split(",")
                   Dim value As Integer = 0
                   
                   For index As Integer = 0 To parameters.Length - 1
                      Select Case index
                    Case 0
                        FormData.RiskInformation.LineOfBusiness = parameters(index)
                    Case 1
                        value = parameters(index)

                          
                      End Select                  
                   Next
               
                   RiskInformationProductCode_DataBinding(RiskInformationProductCode, New CallbackEventArgsBase(String.Empty))
                  RiskInformationProductCode.DataBind()  
                  
                   If value.IsNotEmpty Then
                       RiskInformationProductCode.SelectedItem = RiskInformationProductCode.Items.FindByValue(value)
                   End If
              End If
              
  End Sub
    
    Protected Sub Currency_DataBinding(sender As Object, e As EventArgs) Handles Currency.DataBinding
	Dim source As DataTable = Nothing
  
	With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
											  "SELECT  TABLE11.NCODIGINT, TABLE11.SDESCRIPT, TABLE11.SSTATREGT, TABLE11.SSHORT_DES FROM TABLE11 TABLE11  WHERE TABLE11.SSTATREGT = 1  ORDER BY TABLE11.SDESCRIPT ASC", "1"), "TABLE11", "Linked.LatCombined")

		
		.Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
		source = .QueryExecuteToTable(True)
		Currency.DataSource = source
	End With
  
End Sub
Protected Sub RiskInformationProductCode_DataBinding(sender As Object, e As EventArgs) Handles RiskInformationProductCode.DataBinding
	Dim source As DataTable = Nothing
  
	With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
											  "SELECT  PRODMASTER.NBRANCH, PRODMASTER.NPRODUCT, PRODMASTER.SDESCRIPT FROM PRODMASTER PRODMASTER  WHERE PRODMASTER.SSTATREGT = 1  AND (PRODMASTER.NBRANCH = @:PRODMASTERNBRANCHDependen AND NOT SDESCRIPT IS NULL) ORDER BY SDESCRIPT ", "1"), "PRODMASTER", "Linked.LatCombined")

		.AddParameter("PRODMASTERNBRANCHDependen", DbType.Int32, 0, False, FormData.RiskInformation.LineOfBusiness)

		.Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
		source = .QueryExecuteToTable(True)
		RiskInformationProductCode.DataSource = source
	End With
  
End Sub
Protected Sub LineOfBusiness_DataBinding(sender As Object, e As EventArgs) Handles LineOfBusiness.DataBinding
	Dim source As DataTable = Nothing
  
	With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
											  "SELECT  TABLE10.NBRANCH, TABLE10.SDESCRIPT FROM TABLE10 TABLE10  WHERE  ( TABLE10.SSTATREGT = 1 )   AND NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", "1"), "TABLE10", "Linked.LatCombined")

		
		.Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
		source = .QueryExecuteToTable(True)
		LineOfBusiness.DataSource = source
	End With
  
End Sub

    
#End Region


#Region "PopupMenu Events"

    
    
#End Region

#Region "Mapping methods"

    Public Sub ValidateParametersInstance(ByRef NNCotizacionMiVidaValeViewParameterInstance As NNCotizacionMiVidaValeViewParameter)
        If IsNothing(NNCotizacionMiVidaValeViewParameterInstance.RiskInformation) Then
            NNCotizacionMiVidaValeViewParameterInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
        End If
        If IsNothing(NNCotizacionMiVidaValeViewParameterInstance.RiskInformation.PrimaryInsured) Then
            NNCotizacionMiVidaValeViewParameterInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
        End If
        If IsNothing(NNCotizacionMiVidaValeViewParameterInstance.RiskInformation.PrimaryInsured.Client) Then
            NNCotizacionMiVidaValeViewParameterInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
        End If
        If IsNothing(NNCotizacionMiVidaValeViewParameterInstance.AddresseMailDLI) Then
            NNCotizacionMiVidaValeViewParameterInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
        End If
        If IsNothing(NNCotizacionMiVidaValeViewParameterInstance.AddresseMailDLI.eMailAddress) Then
            NNCotizacionMiVidaValeViewParameterInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
        End If
   
    End Sub
    
    ''' <summary>
    ''' This method moves the data from the class to the page
    ''' </summary>
    ''' <param name="NNCotizacionMiVidaValeViewParameterInstance"></param>
    ''' <remarks></remarks>
    Public Sub MapClassToPage(ByRef NNCotizacionMiVidaValeViewParameterInstance As NNCotizacionMiVidaValeViewParameter, Optional calledBy As String = "")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
        ValidateParametersInstance(NNCotizacionMiVidaValeViewParameterInstance)

        RiskInformationProductCode.DataBind()
LineOfBusiness.DataBind()
Gender.DataBind()
SmokerIndicator.DataBind()
Currency.DataBind()

       
        With NNCotizacionMiVidaValeViewParameterInstance
          
                      RiskInformationEffectiveDate.Value = .RiskInformation.EffectiveDate
            RiskInformationProductCode.SelectedItem = RiskInformationProductCode.Items.FindByValue(.RiskInformation.ProductCode)
            uwcaseid.Text = .uwcaseid
            LineOfBusiness.SelectedItem = LineOfBusiness.Items.FindByValue(.RiskInformation.LineOfBusiness)
            ClientID.Text = .RiskInformation.PrimaryInsured.Client.ClientID
            Gender.SelectedItem = Gender.Items.FindByValue(.RiskInformation.PrimaryInsured.Client.Gender)
            SmokerIndicator.SelectedItem = SmokerIndicator.Items.FindByValue(.RiskInformation.PrimaryInsured.Client.SmokerIndicator)
            If .RiskInformation.PrimaryInsured.Client.BirthDate.IsNotEmpty Then
                BirthDate.Value = .RiskInformation.PrimaryInsured.Client.BirthDate
            Else
                BirthDate.Value = Nothing
                
            End If
            Height.Text = .RiskInformation.PrimaryInsured.Client.Height
            Weight.Text = .RiskInformation.PrimaryInsured.Client.Weight
            FirstName.Text = .RiskInformation.PrimaryInsured.Client.FirstName
            LastName.Text = .RiskInformation.PrimaryInsured.Client.LastName
            LastName2.Text = .RiskInformation.PrimaryInsured.Client.LastName2
            eMail.Text = .AddresseMailDLI.eMailAddress.eMail
            InsuredAmount.Text = .RiskInformation.InsuredAmount
            Currency.SelectedItem = Currency.Items.FindByValue(.RiskInformation.Currency)
            CompleteClientName.Text = .RiskInformation.PrimaryInsured.Client.CompleteClientName

                      If IsNothing(.RiskInformation) Then
                .RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation) Then
                .RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation.ImpairmentsExcluded) Then
                .RiskInformation.AmendmentInformation.ImpairmentsExcluded = New InMotionGIT.Policy.Entity.Contracts.ImpairmentExclusionForAmendmentCollection()
            End If
            If IsNothing(.RiskInformation) Then
                .RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation) Then
                .RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation.Clauses) Then
                .RiskInformation.AmendmentInformation.Clauses = New InMotionGIT.Policy.Entity.Contracts.ClauseForAmendmentCollection()
            End If
            If IsNothing(.RiskInformation) Then
                .RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation) Then
                .RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts) Then
                .RiskInformation.AmendmentInformation.ExtraPremiumDiscounts = New InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountForAmendmentCollection()
            End If
            If IsNothing(.RiskInformation) Then
                .RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation) Then
                .RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation.Coverages) Then
                .RiskInformation.AmendmentInformation.Coverages = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection()
            End If
            If IsNothing(.DiscountSurchargeAmendmentCollection) Then
                .DiscountSurchargeAmendmentCollection = New InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendmentCollection()
            End If

            _ImpairmentExclusionForAmendmentList = .RiskInformation.AmendmentInformation.ImpairmentsExcluded
            ImpairmentExclusionForAmendment.DataSource = _ImpairmentExclusionForAmendmentList
            ImpairmentExclusionForAmendment.DataBind()
            If IsNothing(.RiskInformation) Then
                .RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation) Then
                .RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation.Clauses) Then
                .RiskInformation.AmendmentInformation.Clauses = New InMotionGIT.Policy.Entity.Contracts.ClauseForAmendmentCollection()
            End If
            If IsNothing(.RiskInformation) Then
                .RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation) Then
                .RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts) Then
                .RiskInformation.AmendmentInformation.ExtraPremiumDiscounts = New InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountForAmendmentCollection()
            End If
            If IsNothing(.RiskInformation) Then
                .RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation) Then
                .RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation.Coverages) Then
                .RiskInformation.AmendmentInformation.Coverages = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection()
            End If
            If IsNothing(.DiscountSurchargeAmendmentCollection) Then
                .DiscountSurchargeAmendmentCollection = New InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendmentCollection()
            End If

            _ClauseForAmendmentList = .RiskInformation.AmendmentInformation.Clauses
            ClauseForAmendment.DataSource = _ClauseForAmendmentList
            ClauseForAmendment.DataBind()
            If IsNothing(.RiskInformation) Then
                .RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation) Then
                .RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts) Then
                .RiskInformation.AmendmentInformation.ExtraPremiumDiscounts = New InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountForAmendmentCollection()
            End If
            If IsNothing(.RiskInformation) Then
                .RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation) Then
                .RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation.Coverages) Then
                .RiskInformation.AmendmentInformation.Coverages = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection()
            End If
            If IsNothing(.DiscountSurchargeAmendmentCollection) Then
                .DiscountSurchargeAmendmentCollection = New InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendmentCollection()
            End If

            _ExtraPremiumDiscountForAmendmentList = .RiskInformation.AmendmentInformation.ExtraPremiumDiscounts
            ExtraPremiumDiscountForAmendment.DataSource = _ExtraPremiumDiscountForAmendmentList
            ExtraPremiumDiscountForAmendment.DataBind()
            If IsNothing(.RiskInformation) Then
                .RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation) Then
                .RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation.Coverages) Then
                .RiskInformation.AmendmentInformation.Coverages = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection()
            End If
            If IsNothing(.DiscountSurchargeAmendmentCollection) Then
                .DiscountSurchargeAmendmentCollection = New InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendmentCollection()
            End If

            _CoverageForAmendmentList = .RiskInformation.AmendmentInformation.Coverages
            CoverageForAmendment.DataSource = _CoverageForAmendmentList
            CoverageForAmendment.DataBind()
            If IsNothing(.DiscountSurchargeAmendmentCollection) Then
                .DiscountSurchargeAmendmentCollection = New InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendmentCollection()
            End If

            _DiscountSurchargeAmendmentList = .DiscountSurchargeAmendmentCollection
            DiscountSurchargeAmendment.DataSource = _DiscountSurchargeAmendmentList
            DiscountSurchargeAmendment.DataBind()
    
          ImpairmentExclusionForAmendment.FilterExpression = String.Format(CultureInfo.InvariantCulture,"Selected = {0}",true) 
ClauseForAmendment.FilterExpression = String.Format(CultureInfo.InvariantCulture,"Selected = {0}",true) 
CoverageForAmendment.FilterExpression = String.Format(CultureInfo.InvariantCulture,"Selected = {0}",true) 
        
                      If Not IsNothing(LineOfBusiness.SelectedItem) Then
                RiskInformationProductCode_Callback(RiskInformationProductCode, New CallbackEventArgsBase(LineOfBusiness.SelectedItem.Value))
                If .RiskInformation.ProductCode.IsNotEmpty  Then
                RiskInformationProductCode.SelectedItem = RiskInformationProductCode.Items.FindByValue(.RiskInformation.ProductCode)
                Else
                RiskInformationProductCode.SelectedItem = Nothing
                End If
            End If 
  
  
 
          
               
            
            
       End With


if (Not ("ImpairmentExclusionForAmendment|ClauseForAmendment|ExtraPremiumDiscountForAmendment|CoverageForAmendment|DiscountSurchargeAmendment".IndexOf(calledBy) > -1)) Or String.IsNullOrEmpty(calledBy) then        
            
         

        End If          
    End Sub

    ''' <summary>
    ''' This method moves the data from the page to the class
    ''' </summary>
    ''' <param name="NNCotizacionMiVidaValeViewParameterInstance"></param>
    Public Sub MapPageToClass(ByRef NNCotizacionMiVidaValeViewParameterInstance As NNCotizacionMiVidaValeViewParameter)
        _loading = True

        ValidateParametersInstance(NNCotizacionMiVidaValeViewParameterInstance)

        With NNCotizacionMiVidaValeViewParameterInstance
            .RiskInformation.EffectiveDate = RiskInformationEffectiveDate.Value
            .RiskInformation.ProductCode = RiskInformationProductCode.Value
            .uwcaseid = uwcaseid.Text
            .RiskInformation.LineOfBusiness = LineOfBusiness.Value
            .RiskInformation.PrimaryInsured.Client.ClientID = ClientID.Text.Trim()
            .RiskInformation.PrimaryInsured.Client.Gender = Gender.Value
            .RiskInformation.PrimaryInsured.Client.SmokerIndicator = SmokerIndicator.Value
            .RiskInformation.PrimaryInsured.Client.BirthDate = BirthDate.Value
            .RiskInformation.PrimaryInsured.Client.Height = Height.Text
            .RiskInformation.PrimaryInsured.Client.Weight = Weight.Text
            .RiskInformation.PrimaryInsured.Client.FirstName = FirstName.Text.Trim().ToUpper()
            .RiskInformation.PrimaryInsured.Client.LastName = LastName.Text.Trim().ToUpper()
            .RiskInformation.PrimaryInsured.Client.LastName2 = LastName2.Text.Trim().ToUpper()
            .AddresseMailDLI.eMailAddress.eMail = eMail.Text
            .RiskInformation.InsuredAmount = InsuredAmount.Text
            .RiskInformation.Currency = Currency.Value
            .RiskInformation.PrimaryInsured.Client.CompleteClientName = CompleteClientName.Text.Trim()


        'GetViewStateImpairmentExclusionForAmendmentList()
        '.RiskInformation.AmendmentInformation.ImpairmentsExcluded = _ImpairmentExclusionForAmendmentList
        '.RiskInformation.AmendmentInformation.ImpairmentsExcluded.CurrentIndex= ImpairmentExclusionForAmendment.EditIndex
        'ViewState.Remove("ImpairmentExclusionForAmendmentList")
        'GetViewStateClauseForAmendmentList()
        '.RiskInformation.AmendmentInformation.Clauses = _ClauseForAmendmentList
        '.RiskInformation.AmendmentInformation.Clauses.CurrentIndex= ClauseForAmendment.EditIndex
        'ViewState.Remove("ClauseForAmendmentList")
        'GetViewStateExtraPremiumDiscountForAmendmentList()
        '.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts = _ExtraPremiumDiscountForAmendmentList
        '.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts.CurrentIndex= ExtraPremiumDiscountForAmendment.EditIndex
        'ViewState.Remove("ExtraPremiumDiscountForAmendmentList")
        'GetViewStateCoverageForAmendmentList()
        '.RiskInformation.AmendmentInformation.Coverages = _CoverageForAmendmentList
        '.RiskInformation.AmendmentInformation.Coverages.CurrentIndex= CoverageForAmendment.EditIndex
        'ViewState.Remove("CoverageForAmendmentList")
        'GetViewStateDiscountSurchargeAmendmentList()
        '.DiscountSurchargeAmendmentCollection = _DiscountSurchargeAmendmentList
        '.DiscountSurchargeAmendmentCollection.CurrentIndex= DiscountSurchargeAmendment.EditIndex
        'ViewState.Remove("DiscountSurchargeAmendmentList")



        End With




        _loading = False
    End Sub

#End Region

#Region "ImpairmentExclusionForAmendment GridView Controls with dependencies Events"
    


#End Region

#Region "ImpairmentExclusionForAmendment GridView editing support"    

    Protected Sub ImpairmentExclusionForAmendment_DataBinding(sender As Object, e As EventArgs) Handles ImpairmentExclusionForAmendment.DataBinding
         
            If IsNothing(FormData.ClientCollection) Then
                FormData.ClientCollection = New InMotionGIT.Client.Entity.Contracts.ClientCollection()
            End If
        DirectCast(ImpairmentExclusionForAmendment.Columns("ClientID"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = FormData.ClientCollection
            With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
                                                                 "SELECT  TABLE271.NEXC_CODE, TABLE271.SSTATREGT, TABLE271.SDESCRIPT FROM TABLE271 TABLE271  WHERE TABLE271.SSTATREGT = '{0}'  AND NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", "1"), "TABLE271", "Linked.LatCombined")
                        
                    
                    DirectCast(ImpairmentExclusionForAmendment.Columns("ExclusionCause"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
            End With    
 
            If IsNothing(FormData.RiskInformation) Then
                FormData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(FormData.RiskInformation.AmendmentInformation) Then
                FormData.RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(FormData.RiskInformation.AmendmentInformation.ImpairmentsExcluded) Then
                FormData.RiskInformation.AmendmentInformation.ImpairmentsExcluded = New InMotionGIT.Policy.Entity.Contracts.ImpairmentExclusionForAmendmentCollection()
            End If

        _ImpairmentExclusionForAmendmentList = FormData.RiskInformation.AmendmentInformation.ImpairmentsExcluded
        ImpairmentExclusionForAmendment.DataSource = _ImpairmentExclusionForAmendmentList
              
    End Sub
    
    Protected Sub ImpairmentExclusionForAmendment_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles ImpairmentExclusionForAmendment.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub 
    
    Private Sub SetImpairmentExclusionForAmendmentListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As NNCotizacionMiVidaValeViewParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.RiskInformation.AmendmentInformation.ImpairmentsExcluded = _ImpairmentExclusionForAmendmentList
        ImpairmentExclusionForAmendment.DataSource = _ImpairmentExclusionForAmendmentList
        ImpairmentExclusionForAmendment.DataBind()
    End Sub
   
    Private Sub GetViewStateImpairmentExclusionForAmendmentList()
        Dim FormData As NNCotizacionMiVidaValeViewParameter

         GetCurrentParameterInstance(FormData, True)

        _ImpairmentExclusionForAmendmentList = FormData.RiskInformation.AmendmentInformation.ImpairmentsExcluded

        If IsNothing(_ImpairmentExclusionForAmendmentList) Then
            _ImpairmentExclusionForAmendmentList = New InMotionGIT.Policy.Entity.Contracts.ImpairmentExclusionForAmendmentCollection()
        End If        
    End Sub
    
    
    
    
#End Region
#Region "ClauseForAmendment GridView Controls with dependencies Events"
    


#End Region

#Region "ClauseForAmendment GridView editing support"    

    Protected Sub ClauseForAmendment_DataBinding(sender As Object, e As EventArgs) Handles ClauseForAmendment.DataBinding
         
 
            If IsNothing(FormData.RiskInformation) Then
                FormData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(FormData.RiskInformation.AmendmentInformation) Then
                FormData.RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(FormData.RiskInformation.AmendmentInformation.Clauses) Then
                FormData.RiskInformation.AmendmentInformation.Clauses = New InMotionGIT.Policy.Entity.Contracts.ClauseForAmendmentCollection()
            End If

        _ClauseForAmendmentList = FormData.RiskInformation.AmendmentInformation.Clauses
        ClauseForAmendment.DataSource = _ClauseForAmendmentList
              
    End Sub
    
    Protected Sub ClauseForAmendment_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles ClauseForAmendment.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub 
    
    Private Sub SetClauseForAmendmentListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As NNCotizacionMiVidaValeViewParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.RiskInformation.AmendmentInformation.Clauses = _ClauseForAmendmentList
        ClauseForAmendment.DataSource = _ClauseForAmendmentList
        ClauseForAmendment.DataBind()
    End Sub
   
    Private Sub GetViewStateClauseForAmendmentList()
        Dim FormData As NNCotizacionMiVidaValeViewParameter

         GetCurrentParameterInstance(FormData, True)

        _ClauseForAmendmentList = FormData.RiskInformation.AmendmentInformation.Clauses

        If IsNothing(_ClauseForAmendmentList) Then
            _ClauseForAmendmentList = New InMotionGIT.Policy.Entity.Contracts.ClauseForAmendmentCollection()
        End If        
    End Sub
    
    
    
    
#End Region
#Region "ExtraPremiumDiscountForAmendment GridView Controls with dependencies Events"
    


#End Region

#Region "ExtraPremiumDiscountForAmendment GridView editing support"

    Private _ExtraPremiumDiscountForAmendmentList As InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountForAmendmentCollection = Nothing

    Protected Sub ExtraPremiumDiscountForAmendment_DataBinding(sender As Object, e As EventArgs) Handles ExtraPremiumDiscountForAmendment.DataBinding
        
 
            If IsNothing(FormData.RiskInformation) Then
                FormData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(FormData.RiskInformation.AmendmentInformation) Then
                FormData.RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(FormData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts) Then
                FormData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts = New InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountForAmendmentCollection()
            End If

        _ExtraPremiumDiscountForAmendmentList = FormData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts
        ExtraPremiumDiscountForAmendment.DataSource = _ExtraPremiumDiscountForAmendmentList
        
    End Sub
    
    Protected Sub ExtraPremiumDiscountForAmendment_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles ExtraPremiumDiscountForAmendment.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub
    
    Protected Sub ExtraPremiumDiscountForAmendment_CellEditorInitialize(sender As Object, e As DevExpress.Web.ASPxGridView.ASPxGridViewEditorEventArgs) Handles ExtraPremiumDiscountForAmendment.CellEditorInitialize
        If ExtraPremiumDiscountForAmendment.IsNewRowEditing Then
            Select Case e.Column.FieldName



                Case "Description"                     
                       e.Editor.Focus()               
            End Select

        Else
            Select Case e.Column.FieldName
                   


                Case "Description"                     
                       e.Editor.Focus() 
            End Select
        End If
        
        Select Case e.Column.FieldName

            Case "Description"
                  
                 
                Case "ExtraPremiumPermanentOrTemporary"
     DirectCast(e.Editor, ASPxComboBox).DataBindItems() 

        End Select
    End Sub      
            
    Protected Sub ExtraPremiumDiscountForAmendment_ParseValue(sender As Object, e As DevExpress.Web.Data.ASPxParseValueEventArgs) Handles ExtraPremiumDiscountForAmendment.ParseValue
        Select Case e.FieldName

        End Select
    End Sub    
    
 
  
  
    Protected Sub ExtraPremiumDiscountForAmendment_RowInserting(sender As Object, e As DevExpress.Web.Data.ASPxDataInsertingEventArgs) Handles ExtraPremiumDiscountForAmendment.RowInserting
        Dim ExtraPremiumDiscountForAmendmentItem As InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountForAmendment = New InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountForAmendment()
        GetViewStateExtraPremiumDiscountForAmendmentList()
        
        With ExtraPremiumDiscountForAmendmentItem
             If _ExtraPremiumDiscountForAmendmentList.Count = 0 Then
              .Consecutive = 1
           Else
              .Consecutive = (Aggregate _itemData In _ExtraPremiumDiscountForAmendmentList Into Max(_itemData.Consecutive)) + 1
          End If            
                    .Description = e.NewValues("Description") 

                    .Amount = e.NewValues("Amount") 

                    .Rate = e.NewValues("Rate") 

                    .ExtraPremiumPermanentOrTemporary = e.NewValues("ExtraPremiumPermanentOrTemporary") 

                    .ExtraPremiumOrDiscountEffectiveDate = e.NewValues("ExtraPremiumOrDiscountEffectiveDate") 

                    .EndingDateOfExtraPremiumOrDiscount = e.NewValues("EndingDateOfExtraPremiumOrDiscount") 


        End With

        _ExtraPremiumDiscountForAmendmentList.Add(ExtraPremiumDiscountForAmendmentItem)
         ExtraPremiumDiscountForAmendment.CancelEdit()
        
        If ViewState("ExtraPremiumDiscountForAmendmentOperationType") = "Add" Then
            ExtraPremiumDiscountForAmendment.AddNewRow()
        End If

        e.Cancel = True
        SetExtraPremiumDiscountForAmendmentListDataBind()
    End Sub
    
    Protected Sub ExtraPremiumDiscountForAmendment_RowUpdating(sender As Object, e As DevExpress.Web.Data.ASPxDataUpdatingEventArgs) Handles ExtraPremiumDiscountForAmendment.RowUpdating
        Dim ExtraPremiumDiscountForAmendmentItem As InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountForAmendment = New InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountForAmendment() 
        Dim Consecutive As String = e.Keys("Consecutive")
        
        GetViewStateExtraPremiumDiscountForAmendmentList()
                   
        For index As Integer = 0 To _ExtraPremiumDiscountForAmendmentList.Count - 1
            If _ExtraPremiumDiscountForAmendmentList(index).Consecutive = Consecutive Then
                
                With _ExtraPremiumDiscountForAmendmentList(index)
                    .Description = e.NewValues("Description") 

                    .Amount = e.NewValues("Amount") 

                    .Rate = e.NewValues("Rate") 

                    .ExtraPremiumPermanentOrTemporary = e.NewValues("ExtraPremiumPermanentOrTemporary") 

                    .ExtraPremiumOrDiscountEffectiveDate = e.NewValues("ExtraPremiumOrDiscountEffectiveDate") 

                    .EndingDateOfExtraPremiumOrDiscount = e.NewValues("EndingDateOfExtraPremiumOrDiscount") 

                
                End With
                
                Exit For
            End If
        Next

        SetExtraPremiumDiscountForAmendmentListDataBind()

        ExtraPremiumDiscountForAmendment.CancelEdit()
        e.Cancel = True
    End Sub

    Protected Sub ExtraPremiumDiscountForAmendment_RowDeleting(sender As Object, e As DevExpress.Web.Data.ASPxDataDeletingEventArgs) Handles ExtraPremiumDiscountForAmendment.RowDeleting
       Dim Consecutive As String = e.Keys("Consecutive")
       
       GetViewStateExtraPremiumDiscountForAmendmentList()
       
       For index As Integer = 0 To _ExtraPremiumDiscountForAmendmentList.Count - 1
           If _ExtraPremiumDiscountForAmendmentList(index).Consecutive = Consecutive Then
             _ExtraPremiumDiscountForAmendmentList.RemoveAt(index)
             
             Exit For
           End If
       Next       
       
        SetExtraPremiumDiscountForAmendmentListDataBind()
        e.Cancel = True        
    End Sub

    Private Sub SetExtraPremiumDiscountForAmendmentListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As NNCotizacionMiVidaValeViewParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts = _ExtraPremiumDiscountForAmendmentList
        ExtraPremiumDiscountForAmendment.DataSource = _ExtraPremiumDiscountForAmendmentList
        ExtraPremiumDiscountForAmendment.DataBind()
   End Sub

    Private Sub GetViewStateExtraPremiumDiscountForAmendmentList()
        Dim FormData As NNCotizacionMiVidaValeViewParameter

         GetCurrentParameterInstance(FormData, True)

        _ExtraPremiumDiscountForAmendmentList = FormData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts

        If IsNothing(_ExtraPremiumDiscountForAmendmentList) Then
            _ExtraPremiumDiscountForAmendmentList = New InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountForAmendmentCollection()
        End If        
    End Sub
     
    
        
    
#End Region
#Region "CoverageForAmendment GridView Controls with dependencies Events"
    


#End Region

#Region "CoverageForAmendment GridView editing support"    

    Protected Sub CoverageForAmendment_DataBinding(sender As Object, e As EventArgs) Handles CoverageForAmendment.DataBinding
         
 
            If IsNothing(FormData.RiskInformation) Then
                FormData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(FormData.RiskInformation.AmendmentInformation) Then
                FormData.RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(FormData.RiskInformation.AmendmentInformation.Coverages) Then
                FormData.RiskInformation.AmendmentInformation.Coverages = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection()
            End If

        _CoverageForAmendmentList = FormData.RiskInformation.AmendmentInformation.Coverages
        CoverageForAmendment.DataSource = _CoverageForAmendmentList
              
    End Sub
    
    Protected Sub CoverageForAmendment_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles CoverageForAmendment.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub 
    
    Private Sub SetCoverageForAmendmentListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As NNCotizacionMiVidaValeViewParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.RiskInformation.AmendmentInformation.Coverages = _CoverageForAmendmentList
        CoverageForAmendment.DataSource = _CoverageForAmendmentList
        CoverageForAmendment.DataBind()
    End Sub
   
    Private Sub GetViewStateCoverageForAmendmentList()
        Dim FormData As NNCotizacionMiVidaValeViewParameter

         GetCurrentParameterInstance(FormData, True)

        _CoverageForAmendmentList = FormData.RiskInformation.AmendmentInformation.Coverages

        If IsNothing(_CoverageForAmendmentList) Then
            _CoverageForAmendmentList = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection()
        End If        
    End Sub
    
    
    
    
#End Region
#Region "DiscountSurchargeAmendment GridView Controls with dependencies Events"
    


#End Region

#Region "DiscountSurchargeAmendment GridView editing support"

    Private _DiscountSurchargeAmendmentList As InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendmentCollection = Nothing

    Protected Sub DiscountSurchargeAmendment_DataBinding(sender As Object, e As EventArgs) Handles DiscountSurchargeAmendment.DataBinding
        
 
            If IsNothing(FormData.DiscountSurchargeAmendmentCollection) Then
                FormData.DiscountSurchargeAmendmentCollection = New InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendmentCollection()
            End If

        _DiscountSurchargeAmendmentList = FormData.DiscountSurchargeAmendmentCollection
        DiscountSurchargeAmendment.DataSource = _DiscountSurchargeAmendmentList
        
    End Sub
    
    Protected Sub DiscountSurchargeAmendment_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles DiscountSurchargeAmendment.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub
    
    Protected Sub DiscountSurchargeAmendment_CellEditorInitialize(sender As Object, e As DevExpress.Web.ASPxGridView.ASPxGridViewEditorEventArgs) Handles DiscountSurchargeAmendment.CellEditorInitialize
        If DiscountSurchargeAmendment.IsNewRowEditing Then
            Select Case e.Column.FieldName



                Case "AcceptedSurcharge"                     
                       e.Editor.Focus()               
            End Select

        Else
            Select Case e.Column.FieldName
                   


                Case "AcceptedSurcharge"                     
                       e.Editor.Focus() 
            End Select
        End If
        
        Select Case e.Column.FieldName

            Case "AcceptedSurcharge"
                  
                 

        End Select
    End Sub      
            
    Protected Sub DiscountSurchargeAmendment_ParseValue(sender As Object, e As DevExpress.Web.Data.ASPxParseValueEventArgs) Handles DiscountSurchargeAmendment.ParseValue
        Select Case e.FieldName

        End Select
    End Sub    
    
 
  
  
    Protected Sub DiscountSurchargeAmendment_RowInserting(sender As Object, e As DevExpress.Web.Data.ASPxDataInsertingEventArgs) Handles DiscountSurchargeAmendment.RowInserting
        Dim DiscountSurchargeAmendmentItem As InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendment = New InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendment()
        GetViewStateDiscountSurchargeAmendmentList()
        
        With DiscountSurchargeAmendmentItem
             .Description = e.NewValues("Description")            
                    .AcceptedSurcharge = e.NewValues("AcceptedSurcharge") 

                    .Amount = e.NewValues("Amount") 

                    .Percentage = e.NewValues("Percentage") 


        End With

        _DiscountSurchargeAmendmentList.Add(DiscountSurchargeAmendmentItem)
         DiscountSurchargeAmendment.CancelEdit()
        
        If ViewState("DiscountSurchargeAmendmentOperationType") = "Add" Then
            DiscountSurchargeAmendment.AddNewRow()
        End If

        e.Cancel = True
        SetDiscountSurchargeAmendmentListDataBind()
    End Sub
    
    Protected Sub DiscountSurchargeAmendment_RowUpdating(sender As Object, e As DevExpress.Web.Data.ASPxDataUpdatingEventArgs) Handles DiscountSurchargeAmendment.RowUpdating
        Dim DiscountSurchargeAmendmentItem As InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendment = New InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendment() 
        Dim Description As String = e.Keys("Description")
        
        GetViewStateDiscountSurchargeAmendmentList()
                   
        For index As Integer = 0 To _DiscountSurchargeAmendmentList.Count - 1
            If _DiscountSurchargeAmendmentList(index).Description = Description Then
                
                With _DiscountSurchargeAmendmentList(index)
                    .AcceptedSurcharge = e.NewValues("AcceptedSurcharge") 

                    .Amount = e.NewValues("Amount") 

                    .Percentage = e.NewValues("Percentage") 

                
                End With
                
                Exit For
            End If
        Next

        SetDiscountSurchargeAmendmentListDataBind()

        DiscountSurchargeAmendment.CancelEdit()
        e.Cancel = True
    End Sub

    Protected Sub DiscountSurchargeAmendment_RowDeleting(sender As Object, e As DevExpress.Web.Data.ASPxDataDeletingEventArgs) Handles DiscountSurchargeAmendment.RowDeleting
       Dim Description As String = e.Keys("Description")
       
       GetViewStateDiscountSurchargeAmendmentList()
       
       For index As Integer = 0 To _DiscountSurchargeAmendmentList.Count - 1
           If _DiscountSurchargeAmendmentList(index).Description = Description Then
             _DiscountSurchargeAmendmentList.RemoveAt(index)
             
             Exit For
           End If
       Next       
       
        SetDiscountSurchargeAmendmentListDataBind()
        e.Cancel = True        
    End Sub

    Private Sub SetDiscountSurchargeAmendmentListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As NNCotizacionMiVidaValeViewParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.DiscountSurchargeAmendmentCollection = _DiscountSurchargeAmendmentList
        DiscountSurchargeAmendment.DataSource = _DiscountSurchargeAmendmentList
        DiscountSurchargeAmendment.DataBind()
   End Sub

    Private Sub GetViewStateDiscountSurchargeAmendmentList()
        Dim FormData As NNCotizacionMiVidaValeViewParameter

         GetCurrentParameterInstance(FormData, True)

        _DiscountSurchargeAmendmentList = FormData.DiscountSurchargeAmendmentCollection

        If IsNothing(_DiscountSurchargeAmendmentList) Then
            _DiscountSurchargeAmendmentList = New InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendmentCollection()
        End If        
    End Sub
     
    
        
    
#End Region







#Region "AutoPostBack Events Handles"

Protected Sub button0Finaliza_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeViewParameterInstance As NNCotizacionMiVidaValeViewParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
        Dim currentAction As String = SessionTrace("button0Finaliza_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeViewParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. Url: '#setting.Url.WebApplication#/Underwriting/UnderwritingPanel.aspx' with transferring parameters") 
Session(_FormID.Text) = _formData 
 Session("fromid") = _FormID.Text 
     
_webtransfer = String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") +"/Underwriting/UnderwritingPanel.aspx"+"?uwcaseid={0}&closeWindow={1}",_formData.uwcaseid, "1") 


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeViewParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeViewParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeViewParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeViewParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeViewParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeViewParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeViewParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeViewUpdatePanel.Update
      End Try
      
    End Sub


#End Region

#Region "UserControls Events Handles"

    



#End Region

#Region "Form Manager"

    Private Sub VerifySecurityLevel()














    End Sub

      

    Private Sub GetCurrentParameterInstance(ByRef NNCotizacionMiVidaValeViewParameterInstance As NNCotizacionMiVidaValeViewParameter, force As Boolean)
        If _loadcompleted Or force Then
            If Not _CurrentParameterInstance Then

                NNCotizacionMiVidaValeViewParameterInstance = FormData

                If Page.IsPostBack Then
                    MapPageToClass(NNCotizacionMiVidaValeViewParameterInstance)
                End If

                _CurrentParameterInstance = True
            Else
                NNCotizacionMiVidaValeViewParameterInstance = _formData
            End If
        Else
            NNCotizacionMiVidaValeViewParameterInstance = Nothing
        End If
    End Sub

    Protected Sub SetCurrentParameterInstance(ByRef NNCotizacionMiVidaValeViewParameterInstance As NNCotizacionMiVidaValeViewParameter, calledBy As String)
        FormData = NNCotizacionMiVidaValeViewParameterInstance
        MapClassToPage(NNCotizacionMiVidaValeViewParameterInstance,calledBy)
    End Sub

    Protected Sub SetErrors(errors As InMotionGIT.Common.Contracts.Errors.ErrorCollection)
        Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

        If IsNothing(errorList) Then
            errorList = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
        End If

        errorList = errors

        ViewState("Errors") = errorList
        ShowErrors()
    End Sub

    Public Sub ShowErrors()
        If Not IsNothing(ViewState("Errors")) Then
            Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

            Dim queryOut = From lst In errorList Select lst Order By lst.ErrorId

            ErrorsGridView.Visible = True
            ErrorsGridView.DataSource = queryOut.ToList
            ErrorsGridView.DataBind()
            UpdatePanelErrors.Update()
        End If
    End Sub
   
    Private Sub ShowWindowPopupMessage(message As String)
        NotifyMessageLabel.Text = message
        popupNotifyMessage.ShowOnPageLoad = True
    End Sub

    Private Sub ClosePopupWindow()
        popControl.Windows(0).ShowOnPageLoad = False
    End Sub

    Private Sub GetTransferParameters()
        Dim fromDocumentCache As Object = Nothing

        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) Then
            fromDocumentCache = Session( Request.QueryString("fromid"))
            Session.Remove(Request.QueryString("fromid"))
            
        Else
            fromDocumentCache = Session(Session("fromid"))
            Session.Remove(Session("fromid"))
            Session.Remove("fromid")   
        End If
        
        If Not IsNothing(fromDocumentCache) Then
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InsuredAmount", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InsuredAmountSelected", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PlanType", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientExistInDB", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("eMail", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Currency", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QueryType", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MasaCorporal", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Age", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MessagePopUp", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MessageIndicator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QuestionnairesAvailable", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProducerClientID", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("BeneficiaryType", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("DefaultAddresses", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("LaboratoryRequired", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("LaboratorySelectedByUser", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PrimaryInsured", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("SendMailIndicator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MailToProducerIndicator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InRuleErros", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AccumulatedAmount", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CancelledPoliciesQuantity", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OtherPoliciesSameRiskQuantity", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InRuleMessage", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ConsumerInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrintIndicator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrintResult", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PolicyDocument", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ErrorsFound", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ReportURL", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FormStatus", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrint", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRun", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusCase", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RecoveryCaseIndicator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnswerDiabetes", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnswerHeart", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnswerCancer", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("SumInsuredToOffer", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PaymentMethod", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProductMasterDescription", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AddressPhysicalAddressDLI", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PreviousPayment", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClienteIndicado", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ServiceResultData", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CompleteAddress", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AddresseMailDLI", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AddressDLICollection", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ErroresActualizacion", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UnderwritingCase", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ExcluirEnfermedades", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClausulasSeleccionadas", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("EnfermedadesSeleccionadas", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwRelease", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwCaseIdInt64", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformationBuffer", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("recargosPorAsegurado", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Client", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientCollection", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("DiscountSurchargeAmendmentCollection", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("DiscountSurchargeAmendment", fromDocumentCache, _formData)
            
        End If
    End Sub
    
    

    Private Sub SetDefaultValuesFromQueryString()

        If Request.Form("uwcaseid").IsNotEmpty Then
                FormData.uwcaseid = Request.Form("uwcaseid") 

ElseIf Request.QueryString("uwcaseid").IsNotEmpty Then
                FormData.uwcaseid = Request.QueryString("uwcaseid") 
End If 

If Request.Form("uwreqid").IsNotEmpty Then
                FormData.uwreqid = Request.Form("uwreqid") 

ElseIf Request.QueryString("uwreqid").IsNotEmpty Then
                FormData.uwreqid = Request.QueryString("uwreqid") 
End If 

If Request.Form("InsuredAmount").IsNotEmpty Then
                FormData.InsuredAmount = Request.Form("InsuredAmount") 

ElseIf Request.QueryString("InsuredAmount").IsNotEmpty Then
                FormData.InsuredAmount = Request.QueryString("InsuredAmount") 
End If 

If Request.Form("InsuredAmountSelected").IsNotEmpty Then
                FormData.InsuredAmountSelected = Request.Form("InsuredAmountSelected") 

ElseIf Request.QueryString("InsuredAmountSelected").IsNotEmpty Then
                FormData.InsuredAmountSelected = Request.QueryString("InsuredAmountSelected") 
End If 

If Request.Form("PlanType").IsNotEmpty Then
                FormData.PlanType = Request.Form("PlanType") 

ElseIf Request.QueryString("PlanType").IsNotEmpty Then
                FormData.PlanType = Request.QueryString("PlanType") 
End If 

If Request.Form("ClientExistInDB").IsNotEmpty Then
                FormData.ClientExistInDB = Request.Form("ClientExistInDB") 

ElseIf Request.QueryString("ClientExistInDB").IsNotEmpty Then
                FormData.ClientExistInDB = Request.QueryString("ClientExistInDB") 
End If 

If Request.Form("eMail").IsNotEmpty Then
                FormData.eMail = Request.Form("eMail") 

ElseIf Request.QueryString("eMail").IsNotEmpty Then
                FormData.eMail = Request.QueryString("eMail") 
End If 

If Request.Form("Currency").IsNotEmpty Then
                FormData.Currency = Request.Form("Currency") 

ElseIf Request.QueryString("Currency").IsNotEmpty Then
                FormData.Currency = Request.QueryString("Currency") 
End If 

If Request.Form("QueryType").IsNotEmpty Then
                FormData.QueryType = Request.Form("QueryType") 

ElseIf Request.QueryString("QueryType").IsNotEmpty Then
                FormData.QueryType = Request.QueryString("QueryType") 
End If 

If Request.Form("MasaCorporal").IsNotEmpty Then
                FormData.MasaCorporal = Request.Form("MasaCorporal") 

ElseIf Request.QueryString("MasaCorporal").IsNotEmpty Then
                FormData.MasaCorporal = Request.QueryString("MasaCorporal") 
End If 

If Request.Form("Age").IsNotEmpty Then
                FormData.Age = Request.Form("Age") 

ElseIf Request.QueryString("Age").IsNotEmpty Then
                FormData.Age = Request.QueryString("Age") 
End If 

If Request.Form("MessagePopUp").IsNotEmpty Then
                FormData.MessagePopUp = Request.Form("MessagePopUp") 

ElseIf Request.QueryString("MessagePopUp").IsNotEmpty Then
                FormData.MessagePopUp = Request.QueryString("MessagePopUp") 
End If 

If Request.Form("MessageIndicator").IsNotEmpty Then
                FormData.MessageIndicator = Request.Form("MessageIndicator") 

ElseIf Request.QueryString("MessageIndicator").IsNotEmpty Then
                FormData.MessageIndicator = Request.QueryString("MessageIndicator") 
End If 

If Request.Form("ProducerClientID").IsNotEmpty Then
                FormData.ProducerClientID = Request.Form("ProducerClientID") 

ElseIf Request.QueryString("ProducerClientID").IsNotEmpty Then
                FormData.ProducerClientID = Request.QueryString("ProducerClientID") 
End If 

If Request.Form("BeneficiaryType").IsNotEmpty Then
                FormData.BeneficiaryType = Request.Form("BeneficiaryType") 

ElseIf Request.QueryString("BeneficiaryType").IsNotEmpty Then
                FormData.BeneficiaryType = Request.QueryString("BeneficiaryType") 
End If 

If Request.Form("DefaultAddresses").IsNotEmpty Then
                FormData.DefaultAddresses = Request.Form("DefaultAddresses") 

ElseIf Request.QueryString("DefaultAddresses").IsNotEmpty Then
                FormData.DefaultAddresses = Request.QueryString("DefaultAddresses") 
End If 

If Request.Form("LaboratoryRequired").IsNotEmpty Then
                FormData.LaboratoryRequired = Request.Form("LaboratoryRequired") 

ElseIf Request.QueryString("LaboratoryRequired").IsNotEmpty Then
                FormData.LaboratoryRequired = Request.QueryString("LaboratoryRequired") 
End If 

If Request.Form("LaboratorySelectedByUser").IsNotEmpty Then
                FormData.LaboratorySelectedByUser = Request.Form("LaboratorySelectedByUser") 

ElseIf Request.QueryString("LaboratorySelectedByUser").IsNotEmpty Then
                FormData.LaboratorySelectedByUser = Request.QueryString("LaboratorySelectedByUser") 
End If 

If Request.Form("PrimaryInsured").IsNotEmpty Then
                FormData.PrimaryInsured = Request.Form("PrimaryInsured") 

ElseIf Request.QueryString("PrimaryInsured").IsNotEmpty Then
                FormData.PrimaryInsured = Request.QueryString("PrimaryInsured") 
End If 

If Request.Form("SendMailIndicator").IsNotEmpty Then
                FormData.SendMailIndicator = Request.Form("SendMailIndicator") 

ElseIf Request.QueryString("SendMailIndicator").IsNotEmpty Then
                FormData.SendMailIndicator = Request.QueryString("SendMailIndicator") 
End If 

If Request.Form("MailToProducerIndicator").IsNotEmpty Then
                FormData.MailToProducerIndicator = Request.Form("MailToProducerIndicator") 

ElseIf Request.QueryString("MailToProducerIndicator").IsNotEmpty Then
                FormData.MailToProducerIndicator = Request.QueryString("MailToProducerIndicator") 
End If 

If Request.Form("InRuleErros").IsNotEmpty Then
                FormData.InRuleErros = Request.Form("InRuleErros") 

ElseIf Request.QueryString("InRuleErros").IsNotEmpty Then
                FormData.InRuleErros = Request.QueryString("InRuleErros") 
End If 

If Request.Form("AccumulatedAmount").IsNotEmpty Then
                FormData.AccumulatedAmount = Request.Form("AccumulatedAmount") 

ElseIf Request.QueryString("AccumulatedAmount").IsNotEmpty Then
                FormData.AccumulatedAmount = Request.QueryString("AccumulatedAmount") 
End If 

If Request.Form("CancelledPoliciesQuantity").IsNotEmpty Then
                FormData.CancelledPoliciesQuantity = Request.Form("CancelledPoliciesQuantity") 

ElseIf Request.QueryString("CancelledPoliciesQuantity").IsNotEmpty Then
                FormData.CancelledPoliciesQuantity = Request.QueryString("CancelledPoliciesQuantity") 
End If 

If Request.Form("OtherPoliciesSameRiskQuantity").IsNotEmpty Then
                FormData.OtherPoliciesSameRiskQuantity = Request.Form("OtherPoliciesSameRiskQuantity") 

ElseIf Request.QueryString("OtherPoliciesSameRiskQuantity").IsNotEmpty Then
                FormData.OtherPoliciesSameRiskQuantity = Request.QueryString("OtherPoliciesSameRiskQuantity") 
End If 

If Request.Form("InRuleMessage").IsNotEmpty Then
                FormData.InRuleMessage = Request.Form("InRuleMessage") 

ElseIf Request.QueryString("InRuleMessage").IsNotEmpty Then
                FormData.InRuleMessage = Request.QueryString("InRuleMessage") 
End If 

If Request.Form("OnLinePrintIndicator").IsNotEmpty Then
                FormData.OnLinePrintIndicator = Request.Form("OnLinePrintIndicator") 

ElseIf Request.QueryString("OnLinePrintIndicator").IsNotEmpty Then
                FormData.OnLinePrintIndicator = Request.QueryString("OnLinePrintIndicator") 
End If 

If Request.Form("OnLinePrintResult").IsNotEmpty Then
                FormData.OnLinePrintResult = Request.Form("OnLinePrintResult") 

ElseIf Request.QueryString("OnLinePrintResult").IsNotEmpty Then
                FormData.OnLinePrintResult = Request.QueryString("OnLinePrintResult") 
End If 

If Request.Form("PolicyDocument").IsNotEmpty Then
                FormData.PolicyDocument = Request.Form("PolicyDocument") 

ElseIf Request.QueryString("PolicyDocument").IsNotEmpty Then
                FormData.PolicyDocument = Request.QueryString("PolicyDocument") 
End If 

If Request.Form("ErrorsFound").IsNotEmpty Then
                FormData.ErrorsFound = Request.Form("ErrorsFound") 

ElseIf Request.QueryString("ErrorsFound").IsNotEmpty Then
                FormData.ErrorsFound = Request.QueryString("ErrorsFound") 
End If 

If Request.Form("ReportURL").IsNotEmpty Then
                FormData.ReportURL = Request.Form("ReportURL") 

ElseIf Request.QueryString("ReportURL").IsNotEmpty Then
                FormData.ReportURL = Request.QueryString("ReportURL") 
End If 

If Request.Form("FormStatus").IsNotEmpty Then
                FormData.FormStatus = Request.Form("FormStatus") 

ElseIf Request.QueryString("FormStatus").IsNotEmpty Then
                FormData.FormStatus = Request.QueryString("FormStatus") 
End If 

If Request.Form("OnLinePrint").IsNotEmpty Then
                FormData.OnLinePrint = Request.Form("OnLinePrint") 

ElseIf Request.QueryString("OnLinePrint").IsNotEmpty Then
                FormData.OnLinePrint = Request.QueryString("OnLinePrint") 
End If 

If Request.Form("StatusRun").IsNotEmpty Then
                FormData.StatusRun = Request.Form("StatusRun") 

ElseIf Request.QueryString("StatusRun").IsNotEmpty Then
                FormData.StatusRun = Request.QueryString("StatusRun") 
End If 

If Request.Form("StatusCase").IsNotEmpty Then
                FormData.StatusCase = Request.Form("StatusCase") 

ElseIf Request.QueryString("StatusCase").IsNotEmpty Then
                FormData.StatusCase = Request.QueryString("StatusCase") 
End If 

If Request.Form("RecoveryCaseIndicator").IsNotEmpty Then
                FormData.RecoveryCaseIndicator = Request.Form("RecoveryCaseIndicator") 

ElseIf Request.QueryString("RecoveryCaseIndicator").IsNotEmpty Then
                FormData.RecoveryCaseIndicator = Request.QueryString("RecoveryCaseIndicator") 
End If 

If Request.Form("AnswerDiabetes").IsNotEmpty Then
                FormData.AnswerDiabetes = Request.Form("AnswerDiabetes") 

ElseIf Request.QueryString("AnswerDiabetes").IsNotEmpty Then
                FormData.AnswerDiabetes = Request.QueryString("AnswerDiabetes") 
End If 

If Request.Form("AnswerHeart").IsNotEmpty Then
                FormData.AnswerHeart = Request.Form("AnswerHeart") 

ElseIf Request.QueryString("AnswerHeart").IsNotEmpty Then
                FormData.AnswerHeart = Request.QueryString("AnswerHeart") 
End If 

If Request.Form("AnswerCancer").IsNotEmpty Then
                FormData.AnswerCancer = Request.Form("AnswerCancer") 

ElseIf Request.QueryString("AnswerCancer").IsNotEmpty Then
                FormData.AnswerCancer = Request.QueryString("AnswerCancer") 
End If 

If Request.Form("PaymentMethod").IsNotEmpty Then
                FormData.PaymentMethod = Request.Form("PaymentMethod") 

ElseIf Request.QueryString("PaymentMethod").IsNotEmpty Then
                FormData.PaymentMethod = Request.QueryString("PaymentMethod") 
End If 

If Request.Form("ProductMasterDescription").IsNotEmpty Then
                FormData.ProductMasterDescription = Request.Form("ProductMasterDescription") 

ElseIf Request.QueryString("ProductMasterDescription").IsNotEmpty Then
                FormData.ProductMasterDescription = Request.QueryString("ProductMasterDescription") 
End If 

If Request.Form("PreviousPayment").IsNotEmpty Then
                FormData.PreviousPayment = Request.Form("PreviousPayment") 

ElseIf Request.QueryString("PreviousPayment").IsNotEmpty Then
                FormData.PreviousPayment = Request.QueryString("PreviousPayment") 
End If 

If Request.Form("ClienteIndicado").IsNotEmpty Then
                FormData.ClienteIndicado = Request.Form("ClienteIndicado") 

ElseIf Request.QueryString("ClienteIndicado").IsNotEmpty Then
                FormData.ClienteIndicado = Request.QueryString("ClienteIndicado") 
End If 

If Request.Form("CompleteAddress").IsNotEmpty Then
                FormData.CompleteAddress = Request.Form("CompleteAddress") 

ElseIf Request.QueryString("CompleteAddress").IsNotEmpty Then
                FormData.CompleteAddress = Request.QueryString("CompleteAddress") 
End If 

If Request.Form("ExcluirEnfermedades").IsNotEmpty Then
                FormData.ExcluirEnfermedades = Request.Form("ExcluirEnfermedades") 

ElseIf Request.QueryString("ExcluirEnfermedades").IsNotEmpty Then
                FormData.ExcluirEnfermedades = Request.QueryString("ExcluirEnfermedades") 
End If 

If Request.Form("ClausulasSeleccionadas").IsNotEmpty Then
                FormData.ClausulasSeleccionadas = Request.Form("ClausulasSeleccionadas") 

ElseIf Request.QueryString("ClausulasSeleccionadas").IsNotEmpty Then
                FormData.ClausulasSeleccionadas = Request.QueryString("ClausulasSeleccionadas") 
End If 

If Request.Form("EnfermedadesSeleccionadas").IsNotEmpty Then
                FormData.EnfermedadesSeleccionadas = Request.Form("EnfermedadesSeleccionadas") 

ElseIf Request.QueryString("EnfermedadesSeleccionadas").IsNotEmpty Then
                FormData.EnfermedadesSeleccionadas = Request.QueryString("EnfermedadesSeleccionadas") 
End If 

If Request.Form("uwRelease").IsNotEmpty Then
                FormData.uwRelease = Request.Form("uwRelease") 

ElseIf Request.QueryString("uwRelease").IsNotEmpty Then
                FormData.uwRelease = Request.QueryString("uwRelease") 
End If 

If Request.Form("uwCaseIdInt64").IsNotEmpty Then
                FormData.uwCaseIdInt64 = Request.Form("uwCaseIdInt64") 

ElseIf Request.QueryString("uwCaseIdInt64").IsNotEmpty Then
                FormData.uwCaseIdInt64 = Request.QueryString("uwCaseIdInt64") 
End If 

If Request.Form("recargosPorAsegurado").IsNotEmpty Then
                FormData.recargosPorAsegurado = Request.Form("recargosPorAsegurado") 

ElseIf Request.QueryString("recargosPorAsegurado").IsNotEmpty Then
                FormData.recargosPorAsegurado = Request.QueryString("recargosPorAsegurado") 
End If 


    End Sub
    
    Private Sub BehaviorControls(controlItem As Control, isEnable As Boolean)
        InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValueSimple("Enabled", controlItem, isEnable)           
    End Sub
    
    Private Sub SetReadOnlyControls()
    
        BehaviorControls(RiskInformationEffectiveDate, False)
        BehaviorControls(RiskInformationProductCode, False)
        BehaviorControls(uwcaseid, False)
        BehaviorControls(LineOfBusiness, False)
        BehaviorControls(ClientID, False)
        BehaviorControls(Gender, False)
        BehaviorControls(SmokerIndicator, False)
        BehaviorControls(BirthDate, False)
        BehaviorControls(Height, False)
        BehaviorControls(Weight, False)
        BehaviorControls(FirstName, False)
        BehaviorControls(LastName, False)
        BehaviorControls(LastName2, False)
        BehaviorControls(eMail, False)
        BehaviorControls(InsuredAmount, False)
        BehaviorControls(Currency, False)
        BehaviorControls(ImpairmentExclusionForAmendment, False)
        BehaviorControls(ClauseForAmendment, False)
        BehaviorControls(ExtraPremiumDiscountForAmendment, False)
        BehaviorControls(CoverageForAmendment, False)
        BehaviorControls(DiscountSurchargeAmendment, False)
        BehaviorControls(button0Finaliza, False)
    
    End Sub
     
#End Region

#Region "Actions Data Methods"

    Private Function SessionTrace(message As String) As String

        If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
            Dim tracelog As String = Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath)))

            tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
            Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = tracelog
        End If

        Return message
    End Function
    
    Private Sub ControlsInitialization()
        ImpairmentExclusionForAmendment.ClientVisible = True
        ImpairmentExclusionForAmendment.Enabled = True
        ClauseForAmendment.ClientVisible = True
        ClauseForAmendment.Enabled = True
        ExtraPremiumDiscountForAmendment.ClientVisible = True
        ExtraPremiumDiscountForAmendment.Enabled = False
        CoverageForAmendment.ClientVisible = True
        CoverageForAmendment.Enabled = False
        DiscountSurchargeAmendment.ClientVisible = True
        DiscountSurchargeAmendment.Enabled = False

    End Sub     
  
    Private Sub ParametersToDictionary(ByRef target As Dictionary(Of String, Object))
        If IsNothing(target) Then
            target = New Dictionary(Of String, Object)

            target.Add("RiskInformation", _formData.RiskInformation) 
            target.Add("uwcaseid", _formData.uwcaseid) 
            target.Add("uwreqid", _formData.uwreqid) 
            target.Add("InsuredAmount", _formData.InsuredAmount) 
            target.Add("InsuredAmountSelected", _formData.InsuredAmountSelected) 
            target.Add("PlanType", _formData.PlanType) 
            target.Add("ClientExistInDB", _formData.ClientExistInDB) 
            target.Add("eMail", _formData.eMail) 
            target.Add("Currency", _formData.Currency) 
            target.Add("QueryType", _formData.QueryType) 
            target.Add("MasaCorporal", _formData.MasaCorporal) 
            target.Add("Age", _formData.Age) 
            target.Add("MessagePopUp", _formData.MessagePopUp) 
            target.Add("MessageIndicator", _formData.MessageIndicator) 
            target.Add("QuestionnairesAvailable", _formData.QuestionnairesAvailable) 
            target.Add("ProducerClientID", _formData.ProducerClientID) 
            target.Add("BeneficiaryType", _formData.BeneficiaryType) 
            target.Add("DefaultAddresses", _formData.DefaultAddresses) 
            target.Add("LaboratoryRequired", _formData.LaboratoryRequired) 
            target.Add("LaboratorySelectedByUser", _formData.LaboratorySelectedByUser) 
            target.Add("PrimaryInsured", _formData.PrimaryInsured) 
            target.Add("SendMailIndicator", _formData.SendMailIndicator) 
            target.Add("MailToProducerIndicator", _formData.MailToProducerIndicator) 
            target.Add("InRuleErros", _formData.InRuleErros) 
            target.Add("AccumulatedAmount", _formData.AccumulatedAmount) 
            target.Add("CancelledPoliciesQuantity", _formData.CancelledPoliciesQuantity) 
            target.Add("OtherPoliciesSameRiskQuantity", _formData.OtherPoliciesSameRiskQuantity) 
            target.Add("InRuleMessage", _formData.InRuleMessage) 
            target.Add("ConsumerInformation", _formData.ConsumerInformation) 
            target.Add("OnLinePrintIndicator", _formData.OnLinePrintIndicator) 
            target.Add("OnLinePrintResult", _formData.OnLinePrintResult) 
            target.Add("PolicyDocument", _formData.PolicyDocument) 
            target.Add("ErrorsFound", _formData.ErrorsFound) 
            target.Add("ReportURL", _formData.ReportURL) 
            target.Add("FormStatus", _formData.FormStatus) 
            target.Add("OnLinePrint", _formData.OnLinePrint) 
            target.Add("StatusRun", _formData.StatusRun) 
            target.Add("StatusCase", _formData.StatusCase) 
            target.Add("RecoveryCaseIndicator", _formData.RecoveryCaseIndicator) 
            target.Add("AnswerDiabetes", _formData.AnswerDiabetes) 
            target.Add("AnswerHeart", _formData.AnswerHeart) 
            target.Add("AnswerCancer", _formData.AnswerCancer) 
            target.Add("SumInsuredToOffer", _formData.SumInsuredToOffer) 
            target.Add("PaymentMethod", _formData.PaymentMethod) 
            target.Add("ProductMasterDescription", _formData.ProductMasterDescription) 
            target.Add("AddressPhysicalAddressDLI", _formData.AddressPhysicalAddressDLI) 
            target.Add("PreviousPayment", _formData.PreviousPayment) 
            target.Add("ClienteIndicado", _formData.ClienteIndicado) 
            target.Add("ServiceResultData", _formData.ServiceResultData) 
            target.Add("CompleteAddress", _formData.CompleteAddress) 
            target.Add("AddresseMailDLI", _formData.AddresseMailDLI) 
            target.Add("AddressDLICollection", _formData.AddressDLICollection) 
            target.Add("ErroresActualizacion", _formData.ErroresActualizacion) 
            target.Add("UnderwritingCase", _formData.UnderwritingCase) 
            target.Add("ExcluirEnfermedades", _formData.ExcluirEnfermedades) 
            target.Add("ClausulasSeleccionadas", _formData.ClausulasSeleccionadas) 
            target.Add("EnfermedadesSeleccionadas", _formData.EnfermedadesSeleccionadas) 
            target.Add("uwRelease", _formData.uwRelease) 
            target.Add("uwCaseIdInt64", _formData.uwCaseIdInt64) 
            target.Add("RiskInformationBuffer", _formData.RiskInformationBuffer) 
            target.Add("recargosPorAsegurado", _formData.recargosPorAsegurado) 
            target.Add("Client", _formData.Client) 
            target.Add("ClientCollection", _formData.ClientCollection) 
            target.Add("DiscountSurchargeAmendmentCollection", _formData.DiscountSurchargeAmendmentCollection) 
            target.Add("DiscountSurchargeAmendment", _formData.DiscountSurchargeAmendment) 

        Else
            target("RiskInformation") = _formData.RiskInformation 
            target("uwcaseid") = _formData.uwcaseid 
            target("uwreqid") = _formData.uwreqid 
            target("InsuredAmount") = _formData.InsuredAmount 
            target("InsuredAmountSelected") = _formData.InsuredAmountSelected 
            target("PlanType") = _formData.PlanType 
            target("ClientExistInDB") = _formData.ClientExistInDB 
            target("eMail") = _formData.eMail 
            target("Currency") = _formData.Currency 
            target("QueryType") = _formData.QueryType 
            target("MasaCorporal") = _formData.MasaCorporal 
            target("Age") = _formData.Age 
            target("MessagePopUp") = _formData.MessagePopUp 
            target("MessageIndicator") = _formData.MessageIndicator 
            target("QuestionnairesAvailable") = _formData.QuestionnairesAvailable 
            target("ProducerClientID") = _formData.ProducerClientID 
            target("BeneficiaryType") = _formData.BeneficiaryType 
            target("DefaultAddresses") = _formData.DefaultAddresses 
            target("LaboratoryRequired") = _formData.LaboratoryRequired 
            target("LaboratorySelectedByUser") = _formData.LaboratorySelectedByUser 
            target("PrimaryInsured") = _formData.PrimaryInsured 
            target("SendMailIndicator") = _formData.SendMailIndicator 
            target("MailToProducerIndicator") = _formData.MailToProducerIndicator 
            target("InRuleErros") = _formData.InRuleErros 
            target("AccumulatedAmount") = _formData.AccumulatedAmount 
            target("CancelledPoliciesQuantity") = _formData.CancelledPoliciesQuantity 
            target("OtherPoliciesSameRiskQuantity") = _formData.OtherPoliciesSameRiskQuantity 
            target("InRuleMessage") = _formData.InRuleMessage 
            target("ConsumerInformation") = _formData.ConsumerInformation 
            target("OnLinePrintIndicator") = _formData.OnLinePrintIndicator 
            target("OnLinePrintResult") = _formData.OnLinePrintResult 
            target("PolicyDocument") = _formData.PolicyDocument 
            target("ErrorsFound") = _formData.ErrorsFound 
            target("ReportURL") = _formData.ReportURL 
            target("FormStatus") = _formData.FormStatus 
            target("OnLinePrint") = _formData.OnLinePrint 
            target("StatusRun") = _formData.StatusRun 
            target("StatusCase") = _formData.StatusCase 
            target("RecoveryCaseIndicator") = _formData.RecoveryCaseIndicator 
            target("AnswerDiabetes") = _formData.AnswerDiabetes 
            target("AnswerHeart") = _formData.AnswerHeart 
            target("AnswerCancer") = _formData.AnswerCancer 
            target("SumInsuredToOffer") = _formData.SumInsuredToOffer 
            target("PaymentMethod") = _formData.PaymentMethod 
            target("ProductMasterDescription") = _formData.ProductMasterDescription 
            target("AddressPhysicalAddressDLI") = _formData.AddressPhysicalAddressDLI 
            target("PreviousPayment") = _formData.PreviousPayment 
            target("ClienteIndicado") = _formData.ClienteIndicado 
            target("ServiceResultData") = _formData.ServiceResultData 
            target("CompleteAddress") = _formData.CompleteAddress 
            target("AddresseMailDLI") = _formData.AddresseMailDLI 
            target("AddressDLICollection") = _formData.AddressDLICollection 
            target("ErroresActualizacion") = _formData.ErroresActualizacion 
            target("UnderwritingCase") = _formData.UnderwritingCase 
            target("ExcluirEnfermedades") = _formData.ExcluirEnfermedades 
            target("ClausulasSeleccionadas") = _formData.ClausulasSeleccionadas 
            target("EnfermedadesSeleccionadas") = _formData.EnfermedadesSeleccionadas 
            target("uwRelease") = _formData.uwRelease 
            target("uwCaseIdInt64") = _formData.uwCaseIdInt64 
            target("RiskInformationBuffer") = _formData.RiskInformationBuffer 
            target("recargosPorAsegurado") = _formData.recargosPorAsegurado 
            target("Client") = _formData.Client 
            target("ClientCollection") = _formData.ClientCollection 
            target("DiscountSurchargeAmendmentCollection") = _formData.DiscountSurchargeAmendmentCollection 
            target("DiscountSurchargeAmendment") = _formData.DiscountSurchargeAmendment 

        End If     
    End Sub
    
    
    Private Sub ExecuteActionsInitializationForm()
                    Dim currentAction As String = SessionTrace("ActionsInitializationForm")
                    
                    Try                          
                        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
                        Dim messageAction As String = String.Empty
                        Dim lastURL As String = String.Empty
                        Dim isNullResult As Boolean = True 
                        Dim isFoundData As Boolean  = False 
                        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
                        
                        ParametersToDictionary(parametersDictionary)
                        Dim WorkflowInArguments As New Dictionary(Of String, Object) 
 Dim WorkflowOutArguments As IDictionary(Of String, Object) 
  
                        
                                    currentAction = SessionTrace("1. _formData.ExcluirEnfermedades = false...") 
 
            currentAction = SessionTrace("1.1. _formData.ExcluirEnfermedades = false...")

 _formData.ExcluirEnfermedades = false 

            currentAction = SessionTrace("2. _formData.ClausulasSeleccionadas = false...") 
 
            currentAction = SessionTrace("2.1. _formData.ClausulasSeleccionadas = false...")

 _formData.ClausulasSeleccionadas = false 

            currentAction = SessionTrace("3. _formData.recargosPorAsegurado = false...") 
 
            currentAction = SessionTrace("3.1. _formData.recargosPorAsegurado = false...")

 _formData.recargosPorAsegurado = false 

            currentAction = SessionTrace("4. _formData.EnfermedadesSeleccionadas = false...") 
 
            currentAction = SessionTrace("4.1. _formData.EnfermedadesSeleccionadas = false...")

 _formData.EnfermedadesSeleccionadas = false 

            currentAction = SessionTrace("5. If _formData.uwcaseid Is Null Or Empty '' OR _formData.uwcaseid = '0' OR ... Then") 
If String.IsNullOrEmpty(_formData.uwcaseid) OrElse _formData.uwcaseid = "0" OrElse IsNothing(_formData.uwRelease) OrElse _formData.uwRelease = 0 Then

            currentAction = SessionTrace("6. The message 'Debe suministrar el ...' will displayed as 'Splash'") 
            messageAction = "Debe suministrar el número del caso" 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeViewTablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            currentAction = SessionTrace("7. _formData.RecoveryCaseIndicator = false...") 
 
            currentAction = SessionTrace("7.1. _formData.RecoveryCaseIndicator = false...")

 _formData.RecoveryCaseIndicator = false 

        Else 
            currentAction = SessionTrace("8. _formData.uwCaseIdInt64 = _formData.uwcaseid...") 
 
            currentAction = SessionTrace("8.1. _formData.uwCaseIdInt64 = _formData.uwcaseid...")

 _formData.uwCaseIdInt64 = _formData.uwcaseid 

            currentAction = SessionTrace("9. _formData.RecoveryCaseIndicator = true...") 
 
            currentAction = SessionTrace("9.1. _formData.RecoveryCaseIndicator = true...")

 _formData.RecoveryCaseIndicator = true 
            currentAction = SessionTrace("9.2. _formData.uwCaseIdInt64 = convert.ToInt64(_formData.uwcaseid)...")

 _formData.uwCaseIdInt64 = convert.ToInt64(_formData.uwcaseid) 

            currentAction = SessionTrace("10. _formData.InRuleErros = False...") 
 
            currentAction = SessionTrace("10.1. _formData.InRuleErros = False...")

 _formData.InRuleErros = False 

            currentAction = SessionTrace("11. _formData.SendMailIndicator = True...") 
 
            currentAction = SessionTrace("11.1. _formData.SendMailIndicator = True...")

 _formData.SendMailIndicator = True 

            currentAction = SessionTrace("12. _formData.RecoveryCaseIndicator = true...") 
 
            currentAction = SessionTrace("12.1. _formData.RecoveryCaseIndicator = true...")

 _formData.RecoveryCaseIndicator = true 

            currentAction = SessionTrace("13. _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contr...") 
 
            currentAction = SessionTrace("13.1. _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contr...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 

 _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation 

            currentAction = SessionTrace("14. _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contr...") 
 
            currentAction = SessionTrace("14.1. _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contr...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client 

currentAction = SessionTrace("15. Call 'Obtener caso de suscripción - Retrieve Underwriting Case' library") 
        Dim _UnderwritingCase_ec7b9a240de349b29bfa52d700ac007a As InMotionGIT.Underwriting.Contracts.UnderwritingCase 
        _UnderwritingCase_ec7b9a240de349b29bfa52d700ac007a = InMotionGIT.Underwriting.Proxy.Manager.RetrieveWithAccessToken(underwritingCaseID:=_formData.uwCaseIdInt64, atDate:=Date.Today, lockedInformation:=True, riskInformation:=True, includeRiskInstance:=True, accessToken:="String.Empty", changeRiskByAmendment:=False) 
 
       isNullResult = (IsNothing(_UnderwritingCase_ec7b9a240de349b29bfa52d700ac007a)) 
       If Not isNullResult Then
            _formData.UnderwritingCase = _UnderwritingCase_ec7b9a240de349b29bfa52d700ac007a
       End If

currentAction = SessionTrace("17. Call 'Obtener información del riesgo - Retrieve underwriting risk' library") 
        Dim _RiskInformation_738b175053df453ca669448602ac62dc As InMotionGIT.Policy.Entity.Contracts.RiskInformation 
        _RiskInformation_738b175053df453ca669448602ac62dc = InMotionGIT.Underwriting.Proxy.Manager.RetrieveCaseRisk(underwritingCaseID:=_formData.uwCaseIdInt64, release:=_formData.uwRelease, accessToken:="String.Empty") 
 
       isNullResult = (IsNothing(_RiskInformation_738b175053df453ca669448602ac62dc)) 
       If Not isNullResult Then
            _formData.UnderwritingCase.RiskInformation = _RiskInformation_738b175053df453ca669448602ac62dc
       End If

            currentAction = SessionTrace("19. _formData.RiskInformation = _formData.UnderwritingCase.RiskInfo...") 
 
            currentAction = SessionTrace("19.1. _formData.RiskInformation = _formData.UnderwritingCase.RiskInfo...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 

 _formData.RiskInformation = _formData.UnderwritingCase.RiskInformation 

            currentAction = SessionTrace("20. '_formData.DiscountSurchargeAmendmentCollection' = New 'InMotionGIT.Policy.Entity'...'") 
             _formData.DiscountSurchargeAmendmentCollection = New InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendmentCollection

            currentAction = SessionTrace("21. For Each discountRiskInformation As 'InMotionGIT.Policy.Entity...' In '_formData.RiskInformation...'") 
            For Each discountRiskInformation As InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendment In _formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscountsByPolicy 
                If Not parametersDictionary.ExistsProperty("discountRiskInformation") Then 
                    parametersDictionary("discountRiskInformation") = discountRiskInformation 
                End If 

            currentAction = SessionTrace("22. If discountRiskInformation.Amount Is Null Or Empty  OR discountRiskInformation.Amount = 0 Then") 
If IsNothing(discountRiskInformation.Amount) OrElse discountRiskInformation.Amount = 0 Then

            currentAction = SessionTrace("23. If discountRiskInformation.Percentage = 0 Then") 
If discountRiskInformation.Percentage = 0 Then

            currentAction = SessionTrace("24. discountRiskInformation.Amount = discountRiskInformation.OriginalAmo...") 
 
            currentAction = SessionTrace("24.1. discountRiskInformation.Amount = discountRiskInformation.OriginalAmo...")

 discountRiskInformation.Amount = discountRiskInformation.OriginalAmount 

            End If
            End If
            currentAction = SessionTrace("25. If discountRiskInformation.Percentage Is Null Or Empty  OR discountRiskInformation.Percentage = 0 Then") 
If IsNothing(discountRiskInformation.Percentage) OrElse discountRiskInformation.Percentage = 0 Then

            currentAction = SessionTrace("26. If discountRiskInformation.Amount = 0 Then") 
If discountRiskInformation.Amount = 0 Then

            currentAction = SessionTrace("27. discountRiskInformation.Percentage = discountRiskInformation.OriginalPer...") 
 
            currentAction = SessionTrace("27.1. discountRiskInformation.Percentage = discountRiskInformation.OriginalPer...")

 discountRiskInformation.Percentage = discountRiskInformation.OriginalPercentage 

            End If
            End If
            currentAction = SessionTrace("28. '_formData.DiscountSurchargeAmendmentCollection'.Add('discountRiskInformation')") 
             _formData.DiscountSurchargeAmendmentCollection.Add(discountRiskInformation)

            Next
currentAction = SessionTrace("29. Call 'Cálculo de coberturas' library") 
        Dim _RiskInformation_9255a164eedb4e9c899c69b8847ac6df As InMotionGIT.Policy.Entity.Contracts.RiskInformation 
        _RiskInformation_9255a164eedb4e9c899c69b8847ac6df = InMotionGIT.PolicyManager.Proxy.Manager.RatingCalculateProcess(riskInformation:=_formData.RiskInformation, errors:=_formData.ErroresActualizacion, transaction:=1, atDate:=Date.Today, accessToken:="String.Empty", provider:="CORE", companyID:=0) 
 
       isNullResult = (IsNothing(_RiskInformation_9255a164eedb4e9c899c69b8847ac6df)) 
       If Not isNullResult Then
            _formData.RiskInformation = _RiskInformation_9255a164eedb4e9c899c69b8847ac6df
       End If

            currentAction = SessionTrace("31. '_formData.RiskInformation.AmendmentInformation.Coverages' = New 'InMotionGIT.Policy.Entity'...'") 
             _formData.RiskInformation.AmendmentInformation.Coverages = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection

            currentAction = SessionTrace("32. '_formData.UnderwritingCase.RiskInformation.AmendmentInformation' = New 'InMotionGIT.Policy.Entity'...'") 
             _formData.UnderwritingCase.RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation

currentAction = SessionTrace("33. Call 'Configuración de información de procesamiento de RiskInformation (Amendment Setup)' library") 
        Dim _RiskInformation_0914b7f2e3184920833dc93ed5b73607 As InMotionGIT.Policy.Entity.Contracts.RiskInformation 
        _RiskInformation_0914b7f2e3184920833dc93ed5b73607 = InMotionGIT.PolicyManager.Proxy.Manager.AmendmentSetup(risk:=_formData.RiskInformation, atDate:=Date.Today, accessToken:="String.Empty", provider:="CORE") 
 
       isNullResult = (IsNothing(_RiskInformation_0914b7f2e3184920833dc93ed5b73607)) 
       If Not isNullResult Then
            _formData.RiskInformation = _RiskInformation_0914b7f2e3184920833dc93ed5b73607
       End If

currentAction = SessionTrace("35. Call 'Búsqueda de toda la información de un cliente' library") 
        Dim _Client_8d04ac703bf94226aa14eaa380b14537 As InMotionGIT.Client.Entity.Contracts.Client 
        _Client_8d04ac703bf94226aa14eaa380b14537 = (New InMotionGIT.Client.Proxy.Manager).Retrieve(clientId:=_formData.RiskInformation.PrimaryInsured.Client.ClientID, atDate:=Date.Today, withLookupInformation:=True, childFilter:="All", accessToken:="String.Empty", provider:="CORE", companyID:=0) 
 
       isNullResult = (IsNothing(_Client_8d04ac703bf94226aa14eaa380b14537)) 
       If Not isNullResult Then
            _formData.RiskInformation.PrimaryInsured.Client = _Client_8d04ac703bf94226aa14eaa380b14537
       End If

            currentAction = SessionTrace("37. _formData.InsuredAmountSelected = _formData.RiskInformation.LifeLineO...") 
 
            currentAction = SessionTrace("37.1. _formData.InsuredAmountSelected = _formData.RiskInformation.LifeLineO...")

 _formData.InsuredAmountSelected = _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation 
            currentAction = SessionTrace("37.2. _formData.InsuredAmount = _formData.RiskInformation.LifeLineO...")

 _formData.InsuredAmount = _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation 
            currentAction = SessionTrace("37.3. _formData.eMail = _formData.RiskInformation.PrimaryIn...")

 _formData.eMail = _formData.RiskInformation.PrimaryInsured.Client.eMailAddressDefault 

            currentAction = SessionTrace("38. _formData.ClientExistInDB = true...") 
 
            currentAction = SessionTrace("38.1. _formData.ClientExistInDB = true...")

 _formData.ClientExistInDB = true 

            currentAction = SessionTrace("39. _formData.AccumulatedAmount = 0...") 
 
            currentAction = SessionTrace("39.1. _formData.AccumulatedAmount = 0...")

 _formData.AccumulatedAmount = 0 

            currentAction = SessionTrace("40. Call 'Get the face amount of the Life policies of the insured person' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("ClientID", _formData.RiskInformation.PrimaryInsured.Client.ClientID) 
                .Add("CurrencyID", _formData.Currency) 
                .Add("Amount", _formData.AccumulatedAmount) 
                .Add("ProcessDate", _formData.RiskInformation.EffectiveDate) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("GetFaceAmountOfLifePoliciesOfTheInsuredPerson", "a240a822-d493-4dff-a365-ccb17551e006", 2, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.RiskInformation.PrimaryInsured.Client.ClientID = WorkflowOutArguments("ClientID")
                _formData.Currency = WorkflowOutArguments("CurrencyID")
                _formData.AccumulatedAmount = WorkflowOutArguments("Amount")
                _formData.RiskInformation.EffectiveDate = WorkflowOutArguments("ProcessDate")

            currentAction = SessionTrace("41. If _formData.RiskInformation.AmendmentInformation.Clauses Not Is Null Or Not Empty  AND _formData.RiskInformation.AmendmentInformation.Clauses.Count <> 0 Then") 
If Not IsNothing(_formData.RiskInformation.AmendmentInformation.Clauses) AndAlso _formData.RiskInformation.AmendmentInformation.Clauses.Count <> 0 Then

            currentAction = SessionTrace("42. _formData.ClausulasSeleccionadas = true...") 
 
            currentAction = SessionTrace("42.1. _formData.ClausulasSeleccionadas = true...")

 _formData.ClausulasSeleccionadas = true 

            End If
currentAction = SessionTrace("43. Call 'Obtener información del riesgo - Retrieve underwriting risk' library") 
        Dim _RiskInformation_d8eb294e978d457ca6c9b377f8a3fa01 As InMotionGIT.Policy.Entity.Contracts.RiskInformation 
        _RiskInformation_d8eb294e978d457ca6c9b377f8a3fa01 = InMotionGIT.Underwriting.Proxy.Manager.RetrieveCaseRisk(underwritingCaseID:=_formData.uwCaseIdInt64, release:=_formData.uwRelease, accessToken:="String.Empty") 
 
       isNullResult = (IsNothing(_RiskInformation_d8eb294e978d457ca6c9b377f8a3fa01)) 
       If Not isNullResult Then
            _formData.UnderwritingCase.RiskInformation = _RiskInformation_d8eb294e978d457ca6c9b377f8a3fa01
       End If

            currentAction = SessionTrace("45. _formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscountsByPolicy = _formData.DiscountSurchargeAmendmen...") 
 
            currentAction = SessionTrace("45.1. _formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscountsByPolicy = _formData.DiscountSurchargeAmendmen...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AmendmentInformation) Then
              _formData.RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation
          End If 
          If IsNothing(_formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscountsByPolicy) Then
              _formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscountsByPolicy = New InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendmentCollection
          End If 

 _formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscountsByPolicy = _formData.DiscountSurchargeAmendmentCollection 

currentAction = SessionTrace("46. Call 'Configuración de información de procesamiento de RiskInformation (Amendment Setup)' library") 
        Dim _RiskInformation_9aa039dc314a4b01835f6341c2253f8a As InMotionGIT.Policy.Entity.Contracts.RiskInformation 
        _RiskInformation_9aa039dc314a4b01835f6341c2253f8a = InMotionGIT.PolicyManager.Proxy.Manager.AmendmentSetup(risk:=_formData.UnderwritingCase.RiskInformation, atDate:=Date.Today, accessToken:="String.Empty", provider:="CORE") 
 
       isNullResult = (IsNothing(_RiskInformation_9aa039dc314a4b01835f6341c2253f8a)) 
       If Not isNullResult Then
            _formData.UnderwritingCase.RiskInformation = _RiskInformation_9aa039dc314a4b01835f6341c2253f8a
       End If

            currentAction = SessionTrace("48. _formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts = _formData.UnderwritingCase.RiskInfo...") 
 
            currentAction = SessionTrace("48.1. _formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts = _formData.UnderwritingCase.RiskInfo...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AmendmentInformation) Then
              _formData.RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation
          End If 
          If IsNothing(_formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts) Then
              _formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts = New InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountForAmendmentCollection
          End If 

 _formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts = _formData.UnderwritingCase.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts 

            currentAction = SessionTrace("49. If _formData.UnderwritingCase.RiskInformation.AmendmentInformation.ImpairmentsExcluded Not Is Null Or Not Empty  AND _formData.UnderwritingCase.RiskInformation.AmendmentInformation.ImpairmentsExcluded.Count <> 0 Then") 
If Not IsNothing(_formData.UnderwritingCase.RiskInformation.AmendmentInformation.ImpairmentsExcluded) AndAlso _formData.UnderwritingCase.RiskInformation.AmendmentInformation.ImpairmentsExcluded.Count <> 0 Then

            currentAction = SessionTrace("50. _formData.RiskInformation.AmendmentInformation.ImpairmentsExcluded = _formData.UnderwritingCase.RiskInfo...") 
 
            currentAction = SessionTrace("50.1. _formData.RiskInformation.AmendmentInformation.ImpairmentsExcluded = _formData.UnderwritingCase.RiskInfo...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AmendmentInformation) Then
              _formData.RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation
          End If 
          If IsNothing(_formData.RiskInformation.AmendmentInformation.ImpairmentsExcluded) Then
              _formData.RiskInformation.AmendmentInformation.ImpairmentsExcluded = New InMotionGIT.Policy.Entity.Contracts.ImpairmentExclusionForAmendmentCollection
          End If 

 _formData.RiskInformation.AmendmentInformation.ImpairmentsExcluded = _formData.UnderwritingCase.RiskInformation.AmendmentInformation.ImpairmentsExcluded 

            currentAction = SessionTrace("51. _formData.EnfermedadesSeleccionadas = true...") 
 
            currentAction = SessionTrace("51.1. _formData.EnfermedadesSeleccionadas = true...")

 _formData.EnfermedadesSeleccionadas = true 

            End If
            currentAction = SessionTrace("52. If _formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts Not Is Null Or Not Empty  AND _formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts.Count <> 0 Then") 
If Not IsNothing(_formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts) AndAlso _formData.RiskInformation.AmendmentInformation.ExtraPremiumDiscounts.Count <> 0 Then

            currentAction = SessionTrace("53. _formData.recargosPorAsegurado = true...") 
 
            currentAction = SessionTrace("53.1. _formData.recargosPorAsegurado = true...")

 _formData.recargosPorAsegurado = true 

            End If
            currentAction = SessionTrace("54. '_formData.ClientCollection' = New 'InMotionGIT.Client.Entity'...'") 
             _formData.ClientCollection = New InMotionGIT.Client.Entity.Contracts.ClientCollection

            currentAction = SessionTrace("55. For Each roleItem As 'InMotionGIT.Policy.Entity...' In '_formData.RiskInformation...'") 
            For Each roleItem As InMotionGIT.Policy.Entity.Contracts.Role In _formData.RiskInformation.Roles 
                If Not parametersDictionary.ExistsProperty("roleItem") Then 
                    parametersDictionary("roleItem") = roleItem 
                End If 

            currentAction = SessionTrace("56. If roleItem.ClientRole <> 1 AND roleItem.ClientRole <> 13 AND ... Then") 
If roleItem.ClientRole <> 1 AndAlso roleItem.ClientRole <> 13 AndAlso roleItem.ClientRole <> 16 Then

            currentAction = SessionTrace("57. '_formData.Client' = New 'InMotionGIT.Client.Entity'...'") 
             _formData.Client = New InMotionGIT.Client.Entity.Contracts.Client

            currentAction = SessionTrace("58. _formData.Client.ClientID = roleItem.Client.ClientID...") 
 
            currentAction = SessionTrace("58.1. _formData.Client.ClientID = roleItem.Client.ClientID...")
          If IsNothing(_formData.Client) Then
              _formData.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.Client.ClientID = roleItem.Client.ClientID 
            currentAction = SessionTrace("58.2. _formData.Client.CompleteClientName = roleItem.Client.CompleteClientName...")
          If IsNothing(_formData.Client) Then
              _formData.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.Client.CompleteClientName = roleItem.Client.CompleteClientName 

            currentAction = SessionTrace("59. '_formData.ClientCollection'.Add('_formData.Client')") 
             _formData.ClientCollection.Add(_formData.Client)

            End If
            Next
            End If
            currentAction = SessionTrace("60. If _formData.ClausulasSeleccionadas = true Then") 
If _formData.ClausulasSeleccionadas = true Then

            currentAction = SessionTrace("61. tab8.Visible = true") 
            currentAction = SessionTrace("61.1. tab8.Visible = true...")
BehaviorShowControls("tab8,Visible")

        Else 
            currentAction = SessionTrace("62. tab8.Visible = false") 
            currentAction = SessionTrace("62.1. tab8.Visible = false...")
BehaviorShowControls("tab8,Hidden")

            End If
            currentAction = SessionTrace("63. If _formData.EnfermedadesSeleccionadas = true Then") 
If _formData.EnfermedadesSeleccionadas = true Then

            currentAction = SessionTrace("64. tab6.Visible = true") 
            currentAction = SessionTrace("64.1. tab6.Visible = true...")
BehaviorShowControls("tab6,Visible")

        Else 
            currentAction = SessionTrace("65. tab6.Visible = false") 
            currentAction = SessionTrace("65.1. tab6.Visible = false...")
BehaviorShowControls("tab6,Hidden")

            End If
            currentAction = SessionTrace("66. If _formData.recargosPorAsegurado = true Then") 
If _formData.recargosPorAsegurado = true Then

            currentAction = SessionTrace("67. tab0.Visible = true") 
            currentAction = SessionTrace("67.1. tab0.Visible = true...")
BehaviorShowControls("tab0,Visible")

        Else 
            currentAction = SessionTrace("68. tab0.Visible = false") 
            currentAction = SessionTrace("68.1. tab0.Visible = false...")
BehaviorShowControls("tab0,Hidden")

            End If
            currentAction = SessionTrace("69. _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Cont...") 
 
            currentAction = SessionTrace("69.1. _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 

 _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            currentAction = SessionTrace("69.2. _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address 
            currentAction = SessionTrace("69.3. _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress 

            currentAction = SessionTrace("70. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...") 
 
            currentAction = SessionTrace("70.1. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("70.2. _formData.AddressPhysicalAddressDLI.Address.EffectiveDate = _formData.UnderwritingCase.RiskInfo...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.EffectiveDate = _formData.UnderwritingCase.RiskInformation.EffectiveDate 

            currentAction = SessionTrace("71. _formData.AddressPhysicalAddressDLI.Address.DateOfLastSuccesfulContactAtThisAddress = today...") 
 
            currentAction = SessionTrace("71.1. _formData.AddressPhysicalAddressDLI.Address.DateOfLastSuccesfulContactAtThisAddress = today...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.DateOfLastSuccesfulContactAtThisAddress = today 

            currentAction = SessionTrace("72. _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Pr...") 
 
            currentAction = SessionTrace("72.1. _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Pr...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation 
            currentAction = SessionTrace("72.2. _formData.ConsumerInformation.CompanyId = 1...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation.CompanyId = 1 
            currentAction = SessionTrace("72.3. _formData.ConsumerInformation.Security.Usercode = 9998...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 
          If IsNothing(_formData.ConsumerInformation.Security) Then
              _formData.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
          End If 

 _formData.ConsumerInformation.Security.Usercode = 9998 

            currentAction = SessionTrace("73. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.UnderwritingCase.RiskInfo...") 
 
            currentAction = SessionTrace("73.1. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.UnderwritingCase.RiskInfo...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.UnderwritingCase.RiskInformation.PrimaryInsured.Client.ClientID 
            currentAction = SessionTrace("73.2. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("73.3. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.UnderwritingCase.RiskInfo...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.UnderwritingCase.RiskInformation.PrimaryInsured.Client.NADDRESSID 

            currentAction = SessionTrace("74. _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.UnderwritingCase.RiskInfo...") 
 
            currentAction = SessionTrace("74.1. _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.UnderwritingCase.RiskInfo...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.UnderwritingCase.RiskInformation.PrimaryInsured.Client.ClientID 
            currentAction = SessionTrace("74.2. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.RecordOwnerType) Then
              _formData.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("74.3. _formData.AddresseMailDLI.Address.AddressID = _formData.UnderwritingCase.RiskInfo...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.AddressID = _formData.UnderwritingCase.RiskInformation.PrimaryInsured.Client.NADDRESSID 

            currentAction = SessionTrace("75. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...") 
 
            currentAction = SessionTrace("75.1. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.RecordOwnerType) Then
              _formData.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("75.2. _formData.AddresseMailDLI.Address.TypeOfAddress = 3...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.TypeOfAddress) Then
              _formData.AddresseMailDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddresseMailDLI.Address.TypeOfAddress = 3 
            currentAction = SessionTrace("75.3. _formData.AddresseMailDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.UserCompany) Then
              _formData.AddresseMailDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddresseMailDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("75.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6 

            currentAction = SessionTrace("76. If _formData.uwcaseid <> 0 Then") 
If _formData.uwcaseid <> 0 Then

            currentAction = SessionTrace("77. If (_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID Is Null Or Empty  OR _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) AND ... Then") 
If (IsNothing(_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID) OrElse _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) AndAlso (_formData.ErrorsFound = false AndAlso Not String.IsNullOrEmpty(_formData.RiskInformation.PrimaryInsured.Client.ClientID)) Then

currentAction = SessionTrace("78. Call 'Obtiene las direcciones asociadas a un propietario - Retrieve addresses by owner' library") 
        Dim _AddressDLICollection_453a93ba58204a8194e0fe31b770fff0 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
        _AddressDLICollection_453a93ba58204a8194e0fe31b770fff0 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddresseMailDLI.Address.UserCompany, recordOwnerType:=_formData.AddresseMailDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddresseMailDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
 
       isNullResult = (IsNothing(_AddressDLICollection_453a93ba58204a8194e0fe31b770fff0)) 
       If Not isNullResult Then
            _formData.AddressDLICollection = _AddressDLICollection_453a93ba58204a8194e0fe31b770fff0
       End If

            currentAction = SessionTrace("79. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("80. _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("80.1. _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("80.2. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

currentAction = SessionTrace("81. Call 'Obtener la información de correo electrónico - retrieve an email address' library") 
        Dim _AddresseMailDLI_16c0312347b84899b0a2ec0beb19aaee As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
        _AddresseMailDLI_16c0312347b84899b0a2ec0beb19aaee = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI(processDate:=_formData.RiskInformation.EffectiveDate, addressId:=_formData.AddresseMailDLI.Address.AddressID, internalAddressKey:=_formData.AddresseMailDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
 
       isNullResult = (IsNothing(_AddresseMailDLI_16c0312347b84899b0a2ec0beb19aaee)) 
       If Not isNullResult Then
            _formData.AddresseMailDLI = _AddresseMailDLI_16c0312347b84899b0a2ec0beb19aaee
       End If

            End If
            currentAction = SessionTrace("82. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...") 
 
            currentAction = SessionTrace("82.1. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
              _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1 
            currentAction = SessionTrace("82.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("82.3. _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.UserCompany) Then
              _formData.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("82.4. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 

currentAction = SessionTrace("83. Call 'Obtiene las direcciones asociadas a un propietario - Retrieve addresses by owner' library") 
        Dim _AddressDLICollection_8ee147f5af964dd9bd04b4105a437add As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
        _AddressDLICollection_8ee147f5af964dd9bd04b4105a437add = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
 
       isNullResult = (IsNothing(_AddressDLICollection_8ee147f5af964dd9bd04b4105a437add)) 
       If Not isNullResult Then
            _formData.AddressDLICollection = _AddressDLICollection_8ee147f5af964dd9bd04b4105a437add
       End If

            currentAction = SessionTrace("84. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("85. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("85.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("85.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

currentAction = SessionTrace("86. Call 'Obtener dirección física - Retrieve a physical address' library") 
        Dim _AddressPhysicalAddressDLI_724e6bf167c845fba06b747bd568f4f5 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
        _AddressPhysicalAddressDLI_724e6bf167c845fba06b747bd568f4f5 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
 
       isNullResult = (IsNothing(_AddressPhysicalAddressDLI_724e6bf167c845fba06b747bd568f4f5)) 
       If Not isNullResult Then
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_724e6bf167c845fba06b747bd568f4f5
       End If

        Else 
            currentAction = SessionTrace("87. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...") 
 
            currentAction = SessionTrace("87.1. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2 

currentAction = SessionTrace("88. Call 'Obtiene las direcciones asociadas a un propietario - Retrieve addresses by owner' library") 
        Dim _AddressDLICollection_bfe43b7e8ef84aba8bb11ac39c9cb7b6 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
        _AddressDLICollection_bfe43b7e8ef84aba8bb11ac39c9cb7b6 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI(processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
 
       isNullResult = (IsNothing(_AddressDLICollection_bfe43b7e8ef84aba8bb11ac39c9cb7b6)) 
       If Not isNullResult Then
            _formData.AddressDLICollection = _AddressDLICollection_bfe43b7e8ef84aba8bb11ac39c9cb7b6
       End If

            currentAction = SessionTrace("89. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("90. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("90.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("90.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

currentAction = SessionTrace("91. Call 'Obtener dirección física - Retrieve a physical address' library") 
        Dim _AddressPhysicalAddressDLI_7c89bd17539545eead784b4c16ce15ea As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
        _AddressPhysicalAddressDLI_7c89bd17539545eead784b4c16ce15ea = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
 
       isNullResult = (IsNothing(_AddressPhysicalAddressDLI_7c89bd17539545eead784b4c16ce15ea)) 
       If Not isNullResult Then
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_7c89bd17539545eead784b4c16ce15ea
       End If

        Else 
            currentAction = SessionTrace("92. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...") 
 
            currentAction = SessionTrace("92.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("92.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 

            currentAction = SessionTrace("93. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...") 
 
            currentAction = SessionTrace("93.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = 0 
            currentAction = SessionTrace("93.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("93.3. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("93.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1 

            End If
            End If
            End If
            End If
            currentAction = SessionTrace("94. If _formData.uwcaseid <> '0' Then") 
If _formData.uwcaseid <> "0" Then

            currentAction = SessionTrace("95. If (_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID Not Is Null Or Not Empty  AND _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0 AND ... Then") 
If (Not IsNothing(_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID) AndAlso _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0 AndAlso _formData.ErrorsFound = false AndAlso Not String.IsNullOrEmpty(_formData.RiskInformation.PrimaryInsured.Client.ClientID)) Then

currentAction = SessionTrace("96. Call 'Busca la información de dirección de un ID - Retrieve addresses by id' library") 
        Dim _AddressDLICollection_140dd2c0584b45f984134bd4aff762b2 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
        _AddressDLICollection_140dd2c0584b45f984134bd4aff762b2 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddresseMailDLI.Address.UserCompany, addressId:=_formData.AddresseMailDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
 
       isNullResult = (IsNothing(_AddressDLICollection_140dd2c0584b45f984134bd4aff762b2)) 
       If Not isNullResult Then
            _formData.AddressDLICollection = _AddressDLICollection_140dd2c0584b45f984134bd4aff762b2
       End If

            currentAction = SessionTrace("97. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("98. Cotizar.Enabled = false, Acepto.Enabled = false, RiskInformationEffectiveDate.Enabled = false...") 
            currentAction = SessionTrace("98.1. Cotizar.Enabled = false...")
BehaviorShowControls("Cotizar,Disabled")
            currentAction = SessionTrace("98.2. Acepto.Enabled = false...")
BehaviorShowControls("Acepto,Disabled")
            currentAction = SessionTrace("98.3. RiskInformationEffectiveDate.Enabled = false...")
BehaviorShowControls("RiskInformationEffectiveDate,Disabled")
            currentAction = SessionTrace("98.4. PaymentFrequency.Enabled = false...")
BehaviorShowControls("PaymentFrequency,Disabled")

            currentAction = SessionTrace("99. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("99.1. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

currentAction = SessionTrace("100. Call 'Obtener la información de correo electrónico - retrieve an email address' library") 
        Dim _AddresseMailDLI_db750fef5012482ba19f7c3b55c99a12 As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
        _AddresseMailDLI_db750fef5012482ba19f7c3b55c99a12 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI(processDate:=_formData.RiskInformation.EffectiveDate, addressId:=_formData.AddresseMailDLI.Address.AddressID, internalAddressKey:=_formData.AddresseMailDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
 
       isNullResult = (IsNothing(_AddresseMailDLI_db750fef5012482ba19f7c3b55c99a12)) 
       If Not isNullResult Then
            _formData.AddresseMailDLI = _AddresseMailDLI_db750fef5012482ba19f7c3b55c99a12
       End If

            End If
            currentAction = SessionTrace("101. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...") 
 
            currentAction = SessionTrace("101.1. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
              _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1 
            currentAction = SessionTrace("101.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("101.3. _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.UserCompany) Then
              _formData.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("101.4. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 

currentAction = SessionTrace("102. Call 'Busca la información de dirección de un ID - Retrieve addresses by id' library") 
        Dim _AddressDLICollection_751cc825bb7c4c5ba6568783b6915b7f As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
        _AddressDLICollection_751cc825bb7c4c5ba6568783b6915b7f = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
 
       isNullResult = (IsNothing(_AddressDLICollection_751cc825bb7c4c5ba6568783b6915b7f)) 
       If Not isNullResult Then
            _formData.AddressDLICollection = _AddressDLICollection_751cc825bb7c4c5ba6568783b6915b7f
       End If

            currentAction = SessionTrace("103. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("104. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("104.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

currentAction = SessionTrace("105. Call 'Obtener dirección física - Retrieve a physical address' library") 
        Dim _AddressPhysicalAddressDLI_0069664aaa8e41a6adcd6fa6acf4012b As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
        _AddressPhysicalAddressDLI_0069664aaa8e41a6adcd6fa6acf4012b = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
 
       isNullResult = (IsNothing(_AddressPhysicalAddressDLI_0069664aaa8e41a6adcd6fa6acf4012b)) 
       If Not isNullResult Then
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_0069664aaa8e41a6adcd6fa6acf4012b
       End If

        Else 
            currentAction = SessionTrace("106. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...") 
 
            currentAction = SessionTrace("106.1. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2 

currentAction = SessionTrace("107. Call 'Busca la información de dirección de un ID - Retrieve addresses by id' library") 
        Dim _AddressDLICollection_833f0173ae504e8faff1537272f74e5f As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
        _AddressDLICollection_833f0173ae504e8faff1537272f74e5f = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI(processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
 
       isNullResult = (IsNothing(_AddressDLICollection_833f0173ae504e8faff1537272f74e5f)) 
       If Not isNullResult Then
            _formData.AddressDLICollection = _AddressDLICollection_833f0173ae504e8faff1537272f74e5f
       End If

            currentAction = SessionTrace("108. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("109. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("109.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

currentAction = SessionTrace("110. Call 'Obtener dirección física - Retrieve a physical address' library") 
        Dim _AddressPhysicalAddressDLI_983caf828dd342c681df91d60bde7015 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
        _AddressPhysicalAddressDLI_983caf828dd342c681df91d60bde7015 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI(processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
 
       isNullResult = (IsNothing(_AddressPhysicalAddressDLI_983caf828dd342c681df91d60bde7015)) 
       If Not isNullResult Then
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_983caf828dd342c681df91d60bde7015
       End If

        Else 
            currentAction = SessionTrace("111. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...") 
 
            currentAction = SessionTrace("111.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = 0 
            currentAction = SessionTrace("111.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("111.3. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("111.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1 

            currentAction = SessionTrace("112. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...") 
 
            currentAction = SessionTrace("112.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("112.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 

            End If
            End If
            End If
            End If

                        
                        currentAction = String.Empty
                         
                    Catch ex As Exception
                        InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
						_formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

                        If Request.QueryString("debug").IsNotEmpty Then
                            FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                            FormMessageLabel.ForeColor = Drawing.Color.Black
                            FormMessageLabel.Font.Bold = True
                            MessageTable.Visible = True
                        End If
                        
                    Finally                     
                        If _formData.Errors.Count > 0 Then
                            SetErrors(_formData.Errors)
                        End If
                        
                        If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                            If Page.IsCallback Then
                                DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                            Else
                                Response.Redirect(_webTransfer)
                            End If
                        End If
                   End Try
                   
               End Sub
    





    
#End Region






End Class

<Serializable()>
Public Class NNCotizacionMiVidaValeViewParameter
    Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of  NNCotizacionMiVidaValeViewParameter)

    ' Methods
    Public Sub New()
        MyBase.New()
    End Sub

    ' Properties
    Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
    Public Property uwcaseid As String
    Public Property uwreqid As String
    Public Property InsuredAmount As Decimal
    Public Property InsuredAmountSelected As Decimal
    Public Property PlanType As Int32
    Public Property ClientExistInDB As Boolean
    Public Property eMail As String
    Public Property Currency As Int32
    Public Property QueryType As Int32
    Public Property MasaCorporal As Decimal
    Public Property Age As Int32
    Public Property MessagePopUp As String
    Public Property MessageIndicator As Boolean
    Public Property QuestionnairesAvailable As InMotionGIT.Questionnaires.QuestionnairesAvailable
    Public Property ProducerClientID As String
    Public Property BeneficiaryType As Int32
    Public Property DefaultAddresses As Boolean
    Public Property LaboratoryRequired As Boolean
    Public Property LaboratorySelectedByUser As Boolean
    Public Property PrimaryInsured As String
    Public Property SendMailIndicator As Boolean
    Public Property MailToProducerIndicator As Boolean
    Public Property InRuleErros As Boolean
    Public Property AccumulatedAmount As Decimal
    Public Property CancelledPoliciesQuantity As Int32
    Public Property OtherPoliciesSameRiskQuantity As Int32
    Public Property InRuleMessage As String
    Public Property ConsumerInformation As InMotionGIT.Common.Contracts.Process.ConsumerInformation
    Public Property OnLinePrintIndicator As Boolean
    Public Property OnLinePrintResult As Int32
    Public Property PolicyDocument As String
    Public Property ErrorsFound As Boolean
    Public Property ReportURL As String
    Public Property FormStatus As Int32
    Public Property OnLinePrint As Int32
    Public Property StatusRun As Boolean
    Public Property StatusCase As Int32
    Public Property RecoveryCaseIndicator As Boolean
    Public Property AnswerDiabetes As String
    Public Property AnswerHeart As String
    Public Property AnswerCancer As String
    Public Property SumInsuredToOffer As InMotionGIT.Policy.Entity.Contracts.RequestCollection
    Public Property PaymentMethod As Int32
    Public Property ProductMasterDescription As String
    Public Property AddressPhysicalAddressDLI As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
    Public Property PreviousPayment As Boolean
    Public Property ClienteIndicado As String
    Public Property ServiceResultData As InMotionGIT.Common.Contracts.ServiceResultData
    Public Property CompleteAddress As String
    Public Property AddresseMailDLI As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
    Public Property AddressDLICollection As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
    Public Property ErroresActualizacion As InMotionGIT.Common.Contracts.Errors.ErrorCollection
    Public Property UnderwritingCase As InMotionGIT.Underwriting.Contracts.UnderwritingCase
    Public Property ExcluirEnfermedades As Boolean
    Public Property ClausulasSeleccionadas As Boolean
    Public Property EnfermedadesSeleccionadas As Boolean
    Public Property uwRelease As Int32
    Public Property uwCaseIdInt64 As Int64
    Public Property RiskInformationBuffer As InMotionGIT.Policy.Entity.Contracts.RiskInformation
    Public Property recargosPorAsegurado As Boolean
    Public Property Client As InMotionGIT.Client.Entity.Contracts.Client
    Public Property ClientCollection As InMotionGIT.Client.Entity.Contracts.ClientCollection
    Public Property DiscountSurchargeAmendmentCollection As InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendmentCollection
    Public Property DiscountSurchargeAmendment As InMotionGIT.Policy.Entity.Contracts.DiscountSurchargeAmendment


End Class