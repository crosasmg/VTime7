'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer Oracle v7.1.2 at 2019/04/12 model release 7
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"
    
Imports Artem.Google.UI
Imports DashboardBusiness.Helpers
Imports DevExpress.Web
Imports DevExpress.Web.ASPxClasses
Imports DevExpress.Web.ASPxEditors
Imports DevExpress.Web.ASPxGridView
Imports GIT.Core
Imports InMotionGIT.FrontOffice.Support.Enumerations
Imports InMotionGIT.FrontOffice.Support.Helpers.ControlHandler
Imports InMotionGIT.BarCode
Imports InMotionGIT.BarCode.Enumerations
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo
Imports System.IO
Imports InMotionGIT.FrontOffice.Support
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data
Imports System.Data.Common
Imports System.Globalization
Imports System.Linq
Imports System.Threading.Thread
Imports System.Xml.Linq
Imports System.Net


#End Region

Partial Public Class AuthorizationToObtainDiscloseInformationUWUserControl
    Inherits GIT.Core.UserControlBase
    Implements Dropthings.Widget.Framework.IWidget

#Region "IWidget Members"
    
    
    

    Public Sub Closed() Implements Dropthings.Widget.Framework.IWidget.Closed
    End Sub

    Public Sub HideSettings() Implements Dropthings.Widget.Framework.IWidget.HideSettings

    End Sub

    Public Sub Init1(host As Dropthings.Widget.Framework.IWidgetHost) Implements Dropthings.Widget.Framework.IWidget.Init

    End Sub

    Public Sub Maximized() Implements Dropthings.Widget.Framework.IWidget.Maximized

    End Sub

    Public Sub Minimized() Implements Dropthings.Widget.Framework.IWidget.Minimized

    End Sub

    Public Sub ShowSettings() Implements Dropthings.Widget.Framework.IWidget.ShowSettings

    End Sub

#End Region

#Region "Private fields"

    Private _formData As AuthorizationToObtainDiscloseInformationUWParameter = Nothing
    Private _CurrentParameterInstance As Boolean = False
    Private _loading As Boolean = False
    Private _loadcompleted As Boolean = False
    Private _webTransfer as String  
    Private _foundData As Boolean = False
        
#End Region

#Region "Public properties"

    Public Property FormData() As AuthorizationToObtainDiscloseInformationUWParameter
        Get
            Dim formDefinition As String = String.Empty               
             
            If IsNothing(_formData) Then
                If Not IsPostBack Then
                    If Not String.IsNullOrEmpty(Request.QueryString("id")) Then
                        Dim _id As Guid
                        
                        If Guid.TryParse(Request.QueryString("id"), _id) Then
		                        _FormID.Text = Request.QueryString("id")  
                            
                            _foundData = RetrieveFormInformation()
                        End If
                    End If

                    If IsNothing(_formData) Then
                        _formData = New AuthorizationToObtainDiscloseInformationUWParameter
                       
                        If String.IsNullOrEmpty(_FormID.Text) Then
                        	_FormID.Text = System.Guid.NewGuid().ToString                       
                        End If
											
                        _formData.InternalId = _FormID.Text
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) OrElse
                           Not String.IsNullOrEmpty(Session("fromid")) Then
                           
                            GetTransferParameters()
                        End If
                        
                        
                        
                        SetDefaultValuesFromQueryString()
                        ValidateParametersInstance(_formData)
                        
                        popupNotifyMessage.ShowOnPageLoad = false                        
                        
                        ControlsInitialization()
                        ExecuteActionsInitializationForm()
                         
                        If Not String.IsNullOrEmpty(Request.QueryString("readonly")) Then
                            SetReadOnlyControls()
                        End If
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("save")) Then
                            save_Click(nothing, nothing)
                        End If

                    Else
                    		SetDefaultValuesFromQueryString()
                        ExecuteActionsLoadForm()
                    End If

                Else
                     _foundData = RetrieveFormInformation()                    

                    If IsNothing(_formData) Then
                        _formData = New AuthorizationToObtainDiscloseInformationUWParameter
                    End If
                End If
            End If

            Return _formData
        End Get

        Set(value As AuthorizationToObtainDiscloseInformationUWParameter)
            _formData = value
        End Set
    End Property
    
#End Region

#Region "Form Events"

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        ErrorsGridView.Visible = False
        
        
        
        Dim formData As AuthorizationToObtainDiscloseInformationUWParameter = Me.FormData        
           
        If Not IsPostBack  AndAlso Not GridViewPostBack() Then                     
            
            
            _loadcompleted = True
            
            
            If IsPostBack And Not _CurrentParameterInstance Then
                MapPageToClass(formData)
                _CurrentParameterInstance = True
            End If

            MapClassToPage(formData)
            VerifySecurityLevel()
            
            
        Else
            
            
            
        End If        
        
        
        
        
    End Sub    

    Protected Sub Page_Unload(sender As Object, e As EventArgs) Handles Me.Unload        
StoreFormInformation() 
        
        If Not IsNothing(_formData) Then
             If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
                 Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = _formData
             End If   
       
             If Not IsNothing(Session("Form.Track.Parameters")) AndAlso Session("Form.Track.Parameters").ToString.ToLower = "true" Then
                  InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of AuthorizationToObtainDiscloseInformationUWParameter) _
                  (formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.AuthorizationToObtainDiscloseInformationUW.xml",  ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
             End If        
        End If  
   End Sub

#End Region

#Region "Controls Events"


    Private Function GridViewPostBack() As Boolean
        For index As Integer = 0 To Request.Params.Count - 1
            If Request.Params(index).EndsWith("$")  Then
                Return True
            End If
        Next
        
        Return False
    End Function    
        
    
    
#End Region


#Region "PopupMenu Events"

    
    
#End Region

#Region "Mapping methods"

    Public Sub ValidateParametersInstance(ByRef AuthorizationToObtainDiscloseInformationUWParameterInstance As AuthorizationToObtainDiscloseInformationUWParameter)
        If IsNothing(AuthorizationToObtainDiscloseInformationUWParameterInstance.AuthorizationObtainDiscloseInformation) Then
            AuthorizationToObtainDiscloseInformationUWParameterInstance.AuthorizationObtainDiscloseInformation = New InMotionGIT.Questionnaires.AuthorizationObtainDiscloseInformation
        End If
   
    End Sub
    
    ''' <summary>
    ''' This method moves the data from the class to the page
    ''' </summary>
    ''' <param name="AuthorizationToObtainDiscloseInformationUWParameterInstance"></param>
    ''' <remarks></remarks>
    Public Sub MapClassToPage(ByRef AuthorizationToObtainDiscloseInformationUWParameterInstance As AuthorizationToObtainDiscloseInformationUWParameter, Optional calledBy As String = "")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
        ValidateParametersInstance(AuthorizationToObtainDiscloseInformationUWParameterInstance)

        AcceptanceIndicator.DataBind()

       
        With AuthorizationToObtainDiscloseInformationUWParameterInstance
          
                      ClientName.Text = .ClientName
            uwcaseid.Text = .uwcaseid
            AcceptanceIndicator.SelectedItem = AcceptanceIndicator.Items.FindByValue(.AuthorizationObtainDiscloseInformation.AcceptanceIndicator)
            If .AuthorizationObtainDiscloseInformation.DateReceived.IsNotEmpty Then
                DateReceived.Value = .AuthorizationObtainDiscloseInformation.DateReceived
            Else
                DateReceived.Value = Nothing
                
            End If

              
                  
          
                      If IsNothing(AcceptanceIndicator.SelectedItem) OrElse
                          (Not IsNothing(AcceptanceIndicator.SelectedItem) AndAlso IsNothing(AcceptanceIndicator.SelectedItem.Value)) Then
          
               AcceptanceIndicator.SelectedItem = AcceptanceIndicator.Items.FindByValue(true)               
           End If      
    

               
            
            
       End With


if (Not ("".IndexOf(calledBy) > -1)) Or String.IsNullOrEmpty(calledBy) then        
            
         

        End If          
    End Sub

    ''' <summary>
    ''' This method moves the data from the page to the class
    ''' </summary>
    ''' <param name="AuthorizationToObtainDiscloseInformationUWParameterInstance"></param>
    Public Sub MapPageToClass(ByRef AuthorizationToObtainDiscloseInformationUWParameterInstance As AuthorizationToObtainDiscloseInformationUWParameter)
        _loading = True

        ValidateParametersInstance(AuthorizationToObtainDiscloseInformationUWParameterInstance)

        With AuthorizationToObtainDiscloseInformationUWParameterInstance
            .ClientName = ClientName.Text
            .uwcaseid = uwcaseid.Text
            .AuthorizationObtainDiscloseInformation.AcceptanceIndicator = AcceptanceIndicator.Value
            .AuthorizationObtainDiscloseInformation.DateReceived = DateReceived.Value





        End With




        _loading = False
    End Sub

#End Region








#Region "AutoPostBack Events Handles"

Protected Sub save_Click(sender As Object, e As EventArgs)  
        Dim AuthorizationToObtainDiscloseInformationUWParameterInstance As AuthorizationToObtainDiscloseInformationUWParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
        Dim currentAction As String = SessionTrace("save_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim WorkflowInArguments  As New Dictionary(Of String, Object)
Dim WorkflowOutArguments As IDictionary(Of String, Object)


        
           
        
           GetCurrentParameterInstance(AuthorizationToObtainDiscloseInformationUWParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("uwcaseid", _formData.uwcaseidint) 
                .Add("uwreqid", _formData.uwreqid) 
                .Add("ClientName", _formData.ClientName) 
                .Add("StatusCase", _formData.StatusCase) 
                .Add("StatusRequirement", _formData.StatusRequirement) 
                .Add("RiskInformation", _formData.RiskInformation) 
                .Add("Identifier", "Authorization") 
                .Add("context", _formContext) 
                .Add("caseLocked", _formData.caselocked) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 11, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.uwcaseidint = WorkflowOutArguments("uwcaseid")
                _formData.uwreqid = WorkflowOutArguments("uwreqid")
                _formData.ClientName = WorkflowOutArguments("ClientName")
                _formData.StatusCase = WorkflowOutArguments("StatusCase")
                _formData.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                _formData.RiskInformation = WorkflowOutArguments("RiskInformation")

            currentAction = SessionTrace("2. If _formData.StatusRequirement <> 1 Then") 
If _formData.StatusRequirement <> 1 Then

            currentAction = SessionTrace("3. The message 'El estado del requer...' will displayed as 'Splash'") 
            messageAction = "El estado del requerimiento no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            AuthorizationToObtainDiscloseInformationUWTablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

        Else 
            currentAction = SessionTrace("4. _formData.UsercodeFASI = UserInfo.UserId...") 
 
            currentAction = SessionTrace("4.1. _formData.UsercodeFASI = UserInfo.UserId...")

 _formData.UsercodeFASI = UserInfo.UserId 
            currentAction = SessionTrace("4.2. _formData.IsAnonymous = UserInfo.IsAnonymous()...")

 _formData.IsAnonymous = UserInfo.IsAnonymous() 

            currentAction = SessionTrace("5. If _formData.IsAnonymous = true Then") 
If _formData.IsAnonymous = true Then

            currentAction = SessionTrace("6. _formData.UsercodeFASI = 9998...") 
 
            currentAction = SessionTrace("6.1. _formData.UsercodeFASI = 9998...")

 _formData.UsercodeFASI = 9998 

            End If
            currentAction = SessionTrace("7. If _formData.caselocked = true Then") 
If _formData.caselocked = true Then

            currentAction = SessionTrace("8. Call 'Main Process Questionnaire Authorization To Obtain Disclose Information' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("uwcaseid", _formData.uwcaseidint) 
                .Add("uwreqid", _formData.uwreqid) 
                .Add("AuthorizationObtainDiscloseInformation", _formData.AuthorizationObtainDiscloseInformation) 
                .Add("locked", _formData.caselocked) 
                .Add("ConnectedUserCode", _formData.UsercodeFASI) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireRuleAuthorizationToObtainDiscloseInfo", "92ad1197-a1af-4b31-b4f5-f90ed356ae37", 1, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.uwcaseidint = WorkflowOutArguments("uwcaseid")
                _formData.uwreqid = WorkflowOutArguments("uwreqid")
                _formData.AuthorizationObtainDiscloseInformation = WorkflowOutArguments("AuthorizationObtainDiscloseInformation")

            currentAction = SessionTrace("9. Url: '#setting.Url.WebApplication#/Underwriting/UnderwritingPanel.aspx'") 
    
_webtransfer = String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") +"/Underwriting/UnderwritingPanel.aspx"+"?closeWindow={0}","1") 
        Else 
            currentAction = SessionTrace("10. The message 'Muchas gracias por s...' will displayed as 'Splash'") 
            messageAction = "Muchas gracias por su autorización. Nuestro personal médico se pondrá en contacto con usted y/o con su médico." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            AuthorizationToObtainDiscloseInformationUWTablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            currentAction = SessionTrace("11. Call 'Main Process Questionnaire Authorization To Obtain Disclose Information' workflow in Asynchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("uwcaseid", _formData.uwcaseidint) 
                .Add("uwreqid", _formData.uwreqid) 
                .Add("AuthorizationObtainDiscloseInformation", _formData.AuthorizationObtainDiscloseInformation) 
                .Add("locked", _formData.caselocked) 
                .Add("ConnectedUserCode", _formData.UsercodeFASI) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireRuleAuthorizationToObtainDiscloseInfo", "92ad1197-a1af-4b31-b4f5-f90ed356ae37", 1, WorkflowInArguments, True, False, Me.AppRelativeVirtualPath, _formData.InternalId)
 
            End If
            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(AuthorizationToObtainDiscloseInformationUWParameterInstance,"")
          
        
          If AuthorizationToObtainDiscloseInformationUWParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(AuthorizationToObtainDiscloseInformationUWParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(AuthorizationToObtainDiscloseInformationUWParameterInstance.NotifyMessage)
             End If           
            
             AuthorizationToObtainDiscloseInformationUWParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(AuthorizationToObtainDiscloseInformationUWParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(AuthorizationToObtainDiscloseInformationUWParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   AuthorizationToObtainDiscloseInformationUWUpdatePanel.Update
      End Try
      
    End Sub


#End Region

#Region "UserControls Events Handles"

    



#End Region

#Region "Form Manager"

    Private Sub VerifySecurityLevel()





    End Sub

      

    Private Sub GetCurrentParameterInstance(ByRef AuthorizationToObtainDiscloseInformationUWParameterInstance As AuthorizationToObtainDiscloseInformationUWParameter, force As Boolean)
        If _loadcompleted Or force Then
            If Not _CurrentParameterInstance Then

                AuthorizationToObtainDiscloseInformationUWParameterInstance = FormData

                If Page.IsPostBack Then
                    MapPageToClass(AuthorizationToObtainDiscloseInformationUWParameterInstance)
                End If

                _CurrentParameterInstance = True
            Else
                AuthorizationToObtainDiscloseInformationUWParameterInstance = _formData
            End If
        Else
            AuthorizationToObtainDiscloseInformationUWParameterInstance = Nothing
        End If
    End Sub

    Protected Sub SetCurrentParameterInstance(ByRef AuthorizationToObtainDiscloseInformationUWParameterInstance As AuthorizationToObtainDiscloseInformationUWParameter, calledBy As String)
        FormData = AuthorizationToObtainDiscloseInformationUWParameterInstance
        MapClassToPage(AuthorizationToObtainDiscloseInformationUWParameterInstance,calledBy)
    End Sub

    Protected Sub SetErrors(errors As InMotionGIT.Common.Contracts.Errors.ErrorCollection)
        Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

        If IsNothing(errorList) Then
            errorList = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
        End If

        errorList = errors

        ViewState("Errors") = errorList
        ShowErrors()
    End Sub

    Public Sub ShowErrors()
        If Not IsNothing(ViewState("Errors")) Then
            Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

            Dim queryOut = From lst In errorList Select lst Order By lst.ErrorId

            ErrorsGridView.Visible = True
            ErrorsGridView.DataSource = queryOut.ToList
            ErrorsGridView.DataBind()
            UpdatePanelErrors.Update()
        End If
    End Sub
   
    Private Sub ShowWindowPopupMessage(message As String)
        NotifyMessageLabel.Text = message
        popupNotifyMessage.ShowOnPageLoad = True
    End Sub

    Private Sub ClosePopupWindow()
        popControl.Windows(0).ShowOnPageLoad = False
    End Sub

    Private Sub GetTransferParameters()
        Dim fromDocumentCache As Object = Nothing

        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) Then
            fromDocumentCache = Session( Request.QueryString("fromid"))
            Session.Remove(Request.QueryString("fromid"))
            
        Else
            fromDocumentCache = Session(Session("fromid"))
            Session.Remove(Session("fromid"))
            Session.Remove("fromid")   
        End If
        
        If Not IsNothing(fromDocumentCache) Then
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AuthorizationObtainDiscloseInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientName", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusCase", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRequirement", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseidint", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("caselocked", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsAnonymous", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeFASI", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("frompanel", fromDocumentCache, _formData)
            
        End If
    End Sub
    
    

    Private Sub SetDefaultValuesFromQueryString()

        If Request.Form("ClientName").IsNotEmpty Then
                FormData.ClientName = Request.Form("ClientName") 

ElseIf Request.QueryString("ClientName").IsNotEmpty Then
                FormData.ClientName = Request.QueryString("ClientName") 
End If 

If Request.Form("uwcaseid").IsNotEmpty Then
                FormData.uwcaseid = Request.Form("uwcaseid") 

ElseIf Request.QueryString("uwcaseid").IsNotEmpty Then
                FormData.uwcaseid = Request.QueryString("uwcaseid") 
End If 

If Request.Form("uwreqid").IsNotEmpty Then
                FormData.uwreqid = Request.Form("uwreqid") 

ElseIf Request.QueryString("uwreqid").IsNotEmpty Then
                FormData.uwreqid = Request.QueryString("uwreqid") 
End If 

If Request.Form("StatusCase").IsNotEmpty Then
                FormData.StatusCase = Request.Form("StatusCase") 

ElseIf Request.QueryString("StatusCase").IsNotEmpty Then
                FormData.StatusCase = Request.QueryString("StatusCase") 
End If 

If Request.Form("StatusRequirement").IsNotEmpty Then
                FormData.StatusRequirement = Request.Form("StatusRequirement") 

ElseIf Request.QueryString("StatusRequirement").IsNotEmpty Then
                FormData.StatusRequirement = Request.QueryString("StatusRequirement") 
End If 

If Request.Form("uwcaseidint").IsNotEmpty Then
                FormData.uwcaseidint = Request.Form("uwcaseidint") 

ElseIf Request.QueryString("uwcaseidint").IsNotEmpty Then
                FormData.uwcaseidint = Request.QueryString("uwcaseidint") 
End If 

If Request.Form("caselocked").IsNotEmpty Then
                FormData.caselocked = Request.Form("caselocked") 

ElseIf Request.QueryString("caselocked").IsNotEmpty Then
                FormData.caselocked = Request.QueryString("caselocked") 
End If 

If Request.Form("IsAnonymous").IsNotEmpty Then
                FormData.IsAnonymous = Request.Form("IsAnonymous") 

ElseIf Request.QueryString("IsAnonymous").IsNotEmpty Then
                FormData.IsAnonymous = Request.QueryString("IsAnonymous") 
End If 

If Request.Form("UsercodeFASI").IsNotEmpty Then
                FormData.UsercodeFASI = Request.Form("UsercodeFASI") 

ElseIf Request.QueryString("UsercodeFASI").IsNotEmpty Then
                FormData.UsercodeFASI = Request.QueryString("UsercodeFASI") 
End If 

If Request.Form("frompanel").IsNotEmpty Then
                FormData.frompanel = Request.Form("frompanel") 

ElseIf Request.QueryString("frompanel").IsNotEmpty Then
                FormData.frompanel = Request.QueryString("frompanel") 
End If 


    End Sub
    
    Private Sub BehaviorControls(controlItem As Control, isEnable As Boolean)
        InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValueSimple("Enabled", controlItem, isEnable)           
    End Sub
    
    Private Sub SetReadOnlyControls()
    
        BehaviorControls(ClientName, False)
        BehaviorControls(uwcaseid, False)
        BehaviorControls(AcceptanceIndicator, False)
        BehaviorControls(DateReceived, False)
        BehaviorControls(submit, False)
        BehaviorControls(save, False)
    
    End Sub
     
#End Region

#Region "Actions Data Methods"

    Private Function SessionTrace(message As String) As String

        If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
            Dim tracelog As String = Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath)))

            tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
            Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = tracelog
        End If

        Return message
    End Function
    
    Private Sub ControlsInitialization()

    End Sub     
  
    Private Sub ParametersToDictionary(ByRef target As Dictionary(Of String, Object))
        If IsNothing(target) Then
            target = New Dictionary(Of String, Object)

            target.Add("AuthorizationObtainDiscloseInformation", _formData.AuthorizationObtainDiscloseInformation) 
            target.Add("ClientName", _formData.ClientName) 
            target.Add("uwcaseid", _formData.uwcaseid) 
            target.Add("uwreqid", _formData.uwreqid) 
            target.Add("StatusCase", _formData.StatusCase) 
            target.Add("StatusRequirement", _formData.StatusRequirement) 
            target.Add("RiskInformation", _formData.RiskInformation) 
            target.Add("uwcaseidint", _formData.uwcaseidint) 
            target.Add("caselocked", _formData.caselocked) 
            target.Add("IsAnonymous", _formData.IsAnonymous) 
            target.Add("UsercodeFASI", _formData.UsercodeFASI) 
            target.Add("frompanel", _formData.frompanel) 

        Else
            target("AuthorizationObtainDiscloseInformation") = _formData.AuthorizationObtainDiscloseInformation 
            target("ClientName") = _formData.ClientName 
            target("uwcaseid") = _formData.uwcaseid 
            target("uwreqid") = _formData.uwreqid 
            target("StatusCase") = _formData.StatusCase 
            target("StatusRequirement") = _formData.StatusRequirement 
            target("RiskInformation") = _formData.RiskInformation 
            target("uwcaseidint") = _formData.uwcaseidint 
            target("caselocked") = _formData.caselocked 
            target("IsAnonymous") = _formData.IsAnonymous 
            target("UsercodeFASI") = _formData.UsercodeFASI 
            target("frompanel") = _formData.frompanel 

        End If     
    End Sub
    
    Private Sub ExecuteActionsLoadForm()
                    Dim currentAction As String = SessionTrace("ActionsLoadForm")
                    
                    Try                          
                        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
                        Dim messageAction As String = String.Empty
                        Dim lastURL As String = String.Empty
                        Dim isNullResult As Boolean = True 
                        Dim isFoundData As Boolean  = False  
                        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
                        
                        ParametersToDictionary(parametersDictionary) 
                        
                          
                                                
                                    currentAction = SessionTrace("1. If _formData.frompanel = true Then") 
If _formData.frompanel = true Then

            currentAction = SessionTrace("2. ClientName.Enabled = false, uwcaseid.Enabled = false, DateReceived.Enabled = false...") 
            currentAction = SessionTrace("2.1. ClientName.Enabled = false...")
BehaviorShowControls("ClientName,Disabled")
            currentAction = SessionTrace("2.2. uwcaseid.Enabled = false...")
BehaviorShowControls("uwcaseid,Disabled")
            currentAction = SessionTrace("2.3. DateReceived.Enabled = false...")
BehaviorShowControls("DateReceived,Disabled")
            currentAction = SessionTrace("2.4. AcceptanceIndicator.Enabled = false...")
BehaviorShowControls("AcceptanceIndicator,Disabled")

            End If

                        
                        currentAction = String.Empty
                         
                    Catch ex As Exception
                        InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
						_formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

                        If Request.QueryString("debug").IsNotEmpty Then
                            FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                            FormMessageLabel.ForeColor = Drawing.Color.Black
                            FormMessageLabel.Font.Bold = True
                            MessageTable.Visible = True
                        End If
                        
                    Finally                     
                        If _formData.Errors.Count > 0 Then
                            SetErrors(_formData.Errors)
                        End If
                        
                        If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                            If Page.IsCallback Then
                                DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                            Else
                                Response.ClearHeaders()
                                Response.ClearContent()
                                Response.Redirect(_webTransfer)
                            End If
                        End If
                   End Try
                   
               End Sub
    Private Sub ExecuteActionsInitializationForm()
                    Dim currentAction As String = SessionTrace("ActionsInitializationForm")
                    
                    Try                          
                        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
                        Dim messageAction As String = String.Empty
                        Dim lastURL As String = String.Empty
                        Dim isNullResult As Boolean = True 
                        Dim isFoundData As Boolean  = False 
                        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
                        
                        ParametersToDictionary(parametersDictionary)
                        Dim WorkflowInArguments As New Dictionary(Of String, Object) 
 Dim WorkflowOutArguments As IDictionary(Of String, Object) 
  
                        
                                    currentAction = SessionTrace("1. If _formData.uwcaseid Not Is Null Or Not Empty '' Then") 
If Not String.IsNullOrEmpty(_formData.uwcaseid) Then

            currentAction = SessionTrace("2. If _formData.frompanel = True Then") 
If _formData.frompanel = True Then

            currentAction = SessionTrace("3. ClientName.Enabled = false, uwcaseid.Enabled = false, AcceptanceIndicator.Enabled = false...") 
            currentAction = SessionTrace("3.1. ClientName.Enabled = false...")
BehaviorShowControls("ClientName,Disabled")
            currentAction = SessionTrace("3.2. uwcaseid.Enabled = false...")
BehaviorShowControls("uwcaseid,Disabled")
            currentAction = SessionTrace("3.3. AcceptanceIndicator.Enabled = false...")
BehaviorShowControls("AcceptanceIndicator,Disabled")
            currentAction = SessionTrace("3.4. DateReceived.Enabled = false...")
BehaviorShowControls("DateReceived,Disabled")

            End If
            currentAction = SessionTrace("4. _formData.uwcaseidint = _formData.uwcaseid...") 
 
            currentAction = SessionTrace("4.1. _formData.uwcaseidint = _formData.uwcaseid...")

 _formData.uwcaseidint = _formData.uwcaseid 

            currentAction = SessionTrace("5. _formData.AuthorizationObtainDiscloseInformation.DateSignatureProposed = Date.Today...") 
 
            currentAction = SessionTrace("5.1. _formData.AuthorizationObtainDiscloseInformation.DateSignatureProposed = Date.Today...")
          If IsNothing(_formData.AuthorizationObtainDiscloseInformation) Then
              _formData.AuthorizationObtainDiscloseInformation = New InMotionGIT.Questionnaires.AuthorizationObtainDiscloseInformation
          End If 

 _formData.AuthorizationObtainDiscloseInformation.DateSignatureProposed = Date.Today 

            currentAction = SessionTrace("6. If _formData.caselocked Is Null Or Empty  Then") 
If IsNothing(_formData.caselocked) Then

            currentAction = SessionTrace("7. _formData.caselocked = False...") 
 
            currentAction = SessionTrace("7.1. _formData.caselocked = False...")

 _formData.caselocked = False 

            End If
            currentAction = SessionTrace("8. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("uwcaseid", _formData.uwcaseidint) 
                .Add("uwreqid", _formData.uwreqid) 
                .Add("ClientName", _formData.ClientName) 
                .Add("StatusCase", _formData.StatusCase) 
                .Add("StatusRequirement", _formData.StatusRequirement) 
                .Add("RiskInformation", _formData.RiskInformation) 
                .Add("Identifier", "Authorization") 
                .Add("context", _formContext) 
                .Add("caseLocked", _formData.caselocked) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 11, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.uwcaseidint = WorkflowOutArguments("uwcaseid")
                _formData.uwreqid = WorkflowOutArguments("uwreqid")
                _formData.ClientName = WorkflowOutArguments("ClientName")
                _formData.StatusCase = WorkflowOutArguments("StatusCase")
                _formData.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                _formData.RiskInformation = WorkflowOutArguments("RiskInformation")

            currentAction = SessionTrace("9. If _formData.StatusRequirement <> 1 Then") 
If _formData.StatusRequirement <> 1 Then

            currentAction = SessionTrace("10. The message 'El estado del requer...' will displayed as 'Splash'") 
            messageAction = "El estado del requerimiento no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            AuthorizationToObtainDiscloseInformationUWTablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            End If
            End If

                        
                        currentAction = String.Empty
                         
                    Catch ex As Exception
                        InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
						_formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

                        If Request.QueryString("debug").IsNotEmpty Then
                            FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                            FormMessageLabel.ForeColor = Drawing.Color.Black
                            FormMessageLabel.Font.Bold = True
                            MessageTable.Visible = True
                        End If
                        
                    Finally                     
                        If _formData.Errors.Count > 0 Then
                            SetErrors(_formData.Errors)
                        End If
                        
                        If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                            If Page.IsCallback Then
                                DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                            Else
                                Response.Redirect(_webTransfer)
                            End If
                        End If
                   End Try
                   
               End Sub
    
    
#End Region

#Region "Storage Data Methods"

    Private Sub StoreFormInformation()
      If Not IsNothing(_formData) Then

            If _foundData Then
                UpdateStorageData()
            Else
                InsertStorageData()
            End If
       End If
End Sub

    Private Function RetrieveFormInformation() As Boolean
        Dim result As Boolean = False
        Dim records As DataTable

        With New DataManagerFactory("SELECT Content FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)
            records = .QueryExecuteToTable(True)
        End With

        If records.Rows.Count > 0 Then
            result = True            
            _formData = Serialize.Deserialize(Of AuthorizationToObtainDiscloseInformationUWParameter)(records.Rows(0).Item("Content"))
        End If
        
        Return result
    End Function

    Private Sub InsertStorageData()
        With New DataManagerFactory("INSERT INTO FrontOffice.DocumentCache (FormId, ModelId, UserId, Page, Content, CreationDate, UpdateDate) VALUES(@:FormId, @:ModelId, @:UserId, @:Page, @:Content, @:CreationDate, @:UpdateDate)",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)
            .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "80AAC4EF-51BF-4202-9EB5-91B3B8FC8D57")
            .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserName)
            .AddParameter("Page", DbType.AnsiString, 255, False, Me.AppRelativeVirtualPath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of AuthorizationToObtainDiscloseInformationUWParameter)(_formData))
            .AddParameter("CreationDate", DbType.DateTime, 20, False, Now)
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)

            .CommandExecute()
        End With
    End Sub

    Private Sub UpdateStorageData()
        With New DataManagerFactory("UPDATE FrontOffice.DocumentCache SET ModelId = @:ModelId, UserId = @:UserId, Page = @:Page, Content = @:Content, UpdateDate = @:UpdateDate WHERE FormId = @:FormId",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "80AAC4EF-51BF-4202-9EB5-91B3B8FC8D57")
            .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserName)
            .AddParameter("Page", DbType.AnsiString, 255, False, Me.AppRelativeVirtualPath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of AuthorizationToObtainDiscloseInformationUWParameter)(_formData))
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)

            .CommandExecute()
        End With
    End Sub

#End Region




End Class

<Serializable()>
Public Class AuthorizationToObtainDiscloseInformationUWParameter
    Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of  AuthorizationToObtainDiscloseInformationUWParameter)

    ' Methods
    Public Sub New()
        MyBase.New()
    End Sub

    ' Properties
    Public Property AuthorizationObtainDiscloseInformation As InMotionGIT.Questionnaires.AuthorizationObtainDiscloseInformation
    Public Property ClientName As String
    Public Property uwcaseid As String
    Public Property uwreqid As Int64
    Public Property StatusCase As Int32
    Public Property StatusRequirement As Int32
    Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
    Public Property uwcaseidint As Int64
    Public Property caselocked As Boolean
    Public Property IsAnonymous As Boolean
    Public Property UsercodeFASI As Int32
    Public Property frompanel As Boolean


End Class