'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer Oracle v7.1.1 at 2018-09-14 model release 8
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"
    
Imports Artem.Google.UI
Imports DashboardBusiness.Helpers
Imports DevExpress.Web
Imports DevExpress.Web.ASPxClasses
Imports DevExpress.Web.ASPxEditors
Imports DevExpress.Web.ASPxGridView
Imports GIT.Core
Imports InMotionGIT.FrontOffice.Support.Enumerations
Imports InMotionGIT.FrontOffice.Support.Helpers.ControlHandler
Imports InMotionGIT.BarCode
Imports InMotionGIT.BarCode.Enumerations
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo
Imports System.IO
Imports InMotionGIT.FrontOffice.Support
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data
Imports System.Data.Common
Imports System.Globalization
Imports System.Linq
Imports System.Threading.Thread
Imports System.Xml.Linq
Imports System.Net


#End Region

Partial Public Class NNCotizacionMiVidaValeSecuenciaUserControl
    Inherits GIT.Core.UserControlBase
    Implements Dropthings.Widget.Framework.IWidget

#Region "IWidget Members"
    
    
    

    Public Sub Closed() Implements Dropthings.Widget.Framework.IWidget.Closed
    End Sub

    Public Sub HideSettings() Implements Dropthings.Widget.Framework.IWidget.HideSettings

    End Sub

    Public Sub Init1(host As Dropthings.Widget.Framework.IWidgetHost) Implements Dropthings.Widget.Framework.IWidget.Init

    End Sub

    Public Sub Maximized() Implements Dropthings.Widget.Framework.IWidget.Maximized

    End Sub

    Public Sub Minimized() Implements Dropthings.Widget.Framework.IWidget.Minimized

    End Sub

    Public Sub ShowSettings() Implements Dropthings.Widget.Framework.IWidget.ShowSettings

    End Sub

#End Region

#Region "Private fields"

    Private _formData As NNCotizacionMiVidaValeSecuenciaParameter = Nothing
    Private _CurrentParameterInstance As Boolean = False
    Private _loading As Boolean = False
    Private _loadcompleted As Boolean = False
    Private _webTransfer as String  
    Private _foundData As Boolean = False
        
#End Region

#Region "Public properties"

    Public Property FormData() As NNCotizacionMiVidaValeSecuenciaParameter
        Get
            Dim formDefinition As String = String.Empty               
             
            If IsNothing(_formData) Then
                If Not IsPostBack Then
                    If Not String.IsNullOrEmpty(Request.QueryString("id")) Then
                        Dim _id As Guid
                        
                        If Guid.TryParse(Request.QueryString("id"), _id) Then
		                        _FormID.Text = Request.QueryString("id")  
                            
                            _foundData = RetrieveFormInformation()
                        End If
                    End If

                    If IsNothing(_formData) Then
                        _formData = New NNCotizacionMiVidaValeSecuenciaParameter
                       
                        If String.IsNullOrEmpty(_FormID.Text) Then
                        	_FormID.Text = System.Guid.NewGuid().ToString                       
                        End If
											
                        _formData.InternalId = _FormID.Text
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) OrElse
                           Not String.IsNullOrEmpty(Session("fromid")) Then
                           
                            GetTransferParameters()
                        End If
                        
                        
                        
                        SetDefaultValuesFromQueryString()
                        ValidateParametersInstance(_formData)
                        
                        popupNotifyMessage.ShowOnPageLoad = false                        
                        
                        ControlsInitialization()
                        
                         
                        If Not String.IsNullOrEmpty(Request.QueryString("readonly")) Then
                            SetReadOnlyControls()
                        End If
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("button31")) Then
                            button31_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button32")) Then
                            button32_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button34")) Then
                            button34_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button35")) Then
                            button35_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button36")) Then
                            button36_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button19")) Then
                            button19_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("EnviarCotizacionEmail")) Then
                            EnviarCotizacionEmail_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("Accept")) Then
                            Accept_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("btnSalirSinGuardar")) Then
                            btnSalirSinGuardar_Click(nothing, nothing)
                        End If

                    Else
                    		SetDefaultValuesFromQueryString()
                        
                    End If

                Else
                     _foundData = RetrieveFormInformation()                    

                    If IsNothing(_formData) Then
                        _formData = New NNCotizacionMiVidaValeSecuenciaParameter
                    End If
                End If
            End If

            Return _formData
        End Get

        Set(value As NNCotizacionMiVidaValeSecuenciaParameter)
            _formData = value
        End Set
    End Property
    
#End Region

#Region "Form Events"

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        ErrorsGridView.Visible = False
        
        
        
        Dim formData As NNCotizacionMiVidaValeSecuenciaParameter = Me.FormData        
           
        If Not IsPostBack  AndAlso Not GridViewPostBack() Then                     
            
            
            _loadcompleted = True
            
            
            If IsPostBack And Not _CurrentParameterInstance Then
                MapPageToClass(formData)
                _CurrentParameterInstance = True
            End If

            MapClassToPage(formData)
            VerifySecurityLevel()
            
            
        Else
            
            
            
        End If        
        
        
        
        
    End Sub    

    Protected Sub Page_Unload(sender As Object, e As EventArgs) Handles Me.Unload        
StoreFormInformation() 
        
        If Not IsNothing(_formData) Then
             If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
                 Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = _formData
             End If   
       
             If Not IsNothing(Session("Form.Track.Parameters")) AndAlso Session("Form.Track.Parameters").ToString.ToLower = "true" Then
                  InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of NNCotizacionMiVidaValeSecuenciaParameter) _
                  (formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.NNCotizacionMiVidaValeSecuencia.xml",  ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
             End If        
        End If  
   End Sub

#End Region

#Region "Controls Events"


    Private Function GridViewPostBack() As Boolean
        For index As Integer = 0 To Request.Params.Count - 1
            If Request.Params(index).EndsWith("$")  Then
                Return True
            End If
        Next
        
        Return False
    End Function    
        
    
    
#End Region


#Region "PopupMenu Events"

    
    
#End Region

#Region "Mapping methods"

    Public Sub ValidateParametersInstance(ByRef NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter)
   
    End Sub
    
    ''' <summary>
    ''' This method moves the data from the class to the page
    ''' </summary>
    ''' <param name="NNCotizacionMiVidaValeSecuenciaParameterInstance"></param>
    ''' <remarks></remarks>
    Public Sub MapClassToPage(ByRef NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter, Optional calledBy As String = "")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
        ValidateParametersInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance)

        
       
        With NNCotizacionMiVidaValeSecuenciaParameterInstance
          
                      eMail.Text = .eMail
            OnLinePrintIndicator.Checked = .OnLinePrintIndicator

              
                  
          
          
               
            
            
       End With


if (Not ("".IndexOf(calledBy) > -1)) Or String.IsNullOrEmpty(calledBy) then        
            
         

        End If          
    End Sub

    ''' <summary>
    ''' This method moves the data from the page to the class
    ''' </summary>
    ''' <param name="NNCotizacionMiVidaValeSecuenciaParameterInstance"></param>
    Public Sub MapPageToClass(ByRef NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter)
        _loading = True

        ValidateParametersInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance)

        With NNCotizacionMiVidaValeSecuenciaParameterInstance
            .eMail = eMail.Text
            .OnLinePrintIndicator = OnLinePrintIndicator.Checked





        End With




        _loading = False
    End Sub

#End Region








#Region "AutoPostBack Events Handles"

Protected Sub button31_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button31_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. Call 'Mi Vida vale' form with transferring parameters") 
Session(_FormID.Text) = _formData 
 Session("fromid") = _FormID.Text 
     
_webtransfer = String.Format(CultureInfo.InvariantCulture, "{0}/NNCotizacionMiVidaVale1Basico.aspx?fromid={1}", ConfigurationManager.AppSettings("Url.Form"), _FormID.Text, "") 


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeSecuenciaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button32_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button32_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. Call 'Mi Vida vale' form with transferring parameters") 
Session(_FormID.Text) = _formData 
 Session("fromid") = _FormID.Text 
     
_webtransfer = String.Format(CultureInfo.InvariantCulture, "{0}/NNCotizacionMiVidaVale2Adicional.aspx?fromid={1}", ConfigurationManager.AppSettings("Url.Form"), _FormID.Text, "") 


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeSecuenciaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button34_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button34_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. Call 'Mi Vida vale' form with transferring parameters") 
Session(_FormID.Text) = _formData 
 Session("fromid") = _FormID.Text 
     
_webtransfer = String.Format(CultureInfo.InvariantCulture, "{0}/NNCotizacionMiVidaVale3Salud.aspx?fromid={1}", ConfigurationManager.AppSettings("Url.Form"), _FormID.Text, "") 


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeSecuenciaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button35_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button35_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. Call 'Mi Vida vale' form with transferring parameters") 
Session(_FormID.Text) = _formData 
 Session("fromid") = _FormID.Text 
     
_webtransfer = String.Format(CultureInfo.InvariantCulture, "{0}/NNCotizacionMiVidaVale4Beneficiarios.aspx?fromid={1}", ConfigurationManager.AppSettings("Url.Form"), _FormID.Text, "") 


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeSecuenciaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button36_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button36_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. Call 'Mi Vida vale' form with transferring parameters") 
Session(_FormID.Text) = _formData 
 Session("fromid") = _FormID.Text 
     
_webtransfer = String.Format(CultureInfo.InvariantCulture, "{0}/NNCotizacionMiVidaVale5Pago.aspx?fromid={1}", ConfigurationManager.AppSettings("Url.Form"), _FormID.Text, "") 


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeSecuenciaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button19_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button19_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. Call 'Mi Vida Vale - Resumen' form with transferring parameters") 
Session(_FormID.Text) = _formData 
 Session("fromid") = _FormID.Text 
     
_webtransfer = String.Format(CultureInfo.InvariantCulture, "{0}/NNCotizacionVidaResumen.aspx?fromid={1}", ConfigurationManager.AppSettings("Url.Form"), _FormID.Text, "") 


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeSecuenciaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub EnviarCotizacionEmail_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("EnviarCotizacionEmail_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim WorkflowInArguments  As New Dictionary(Of String, Object)
Dim WorkflowOutArguments As IDictionary(Of String, Object)


        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. _formData.AnswerDiabetes = 'No'...") 
 
            currentAction = SessionTrace("1.1. _formData.AnswerDiabetes = 'No'...")

 _formData.AnswerDiabetes = "No" 

            currentAction = SessionTrace("2. _formData.AnswerCancer = 'No'...") 
 
            currentAction = SessionTrace("2.1. _formData.AnswerCancer = 'No'...")

 _formData.AnswerCancer = "No" 

            currentAction = SessionTrace("3. _formData.AnswerHeart = 'No'...") 
 
            currentAction = SessionTrace("3.1. _formData.AnswerHeart = 'No'...")

 _formData.AnswerHeart = "No" 

            currentAction = SessionTrace("4. If _formData.QuestionnairesAvailable.Diabetes = true Then") 
If _formData.QuestionnairesAvailable.Diabetes = true Then

            currentAction = SessionTrace("5. _formData.AnswerDiabetes = 'Si'...") 
 
            currentAction = SessionTrace("5.1. _formData.AnswerDiabetes = 'Si'...")

 _formData.AnswerDiabetes = "Si" 

            End If
            currentAction = SessionTrace("6. If _formData.QuestionnairesAvailable.Cancer = true Then") 
If _formData.QuestionnairesAvailable.Cancer = true Then

            currentAction = SessionTrace("7. _formData.AnswerCancer = 'Si'...") 
 
            currentAction = SessionTrace("7.1. _formData.AnswerCancer = 'Si'...")

 _formData.AnswerCancer = "Si" 

            End If
            currentAction = SessionTrace("8. If _formData.QuestionnairesAvailable.Heart = true Then") 
If _formData.QuestionnairesAvailable.Heart = true Then

            currentAction = SessionTrace("9. _formData.AnswerHeart = 'Si'...") 
 
            currentAction = SessionTrace("9.1. _formData.AnswerHeart = 'Si'...")

 _formData.AnswerHeart = "Si" 

            End If
            currentAction = SessionTrace("10. _formData.PrimaTotalAnual = 0...") 
 
            currentAction = SessionTrace("10.1. _formData.PrimaTotalAnual = 0...")

 _formData.PrimaTotalAnual = 0 

            currentAction = SessionTrace("11. For Each CoverPT As 'InMotionGIT.Policy.Entity...' In '_formData.RiskInformation...'") 
            For Each CoverPT As InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremium In _formData.RiskInformation.CoveragesWithCalculatedPremium 
                If Not parametersDictionary.ExistsProperty("CoverPT") Then 
                    parametersDictionary("CoverPT") = CoverPT 
                End If 

            currentAction = SessionTrace("12. If CoverPT.SelectedByDefault = true Then") 
If CoverPT.SelectedByDefault = true Then

            currentAction = SessionTrace("13. _formData.PrimaTotalAnual = _formData.PrimaTotalAnual+CoverPT.A...") 
 
            currentAction = SessionTrace("13.1. _formData.PrimaTotalAnual = _formData.PrimaTotalAnual+CoverPT.A...")

 _formData.PrimaTotalAnual = _formData.PrimaTotalAnual+CoverPT.AnnualPremium 

            End If
            Next
            currentAction = SessionTrace("14. _formData.FondosMail = Nothing...") 
 
            currentAction = SessionTrace("14.1. _formData.FondosMail = Nothing...")

 _formData.FondosMail = Nothing 

            currentAction = SessionTrace("15. If _formData.BeneficiaryType = 1 Then") 
If _formData.BeneficiaryType = 1 Then

            currentAction = SessionTrace("16. _formData.BeneficiariosMail = 'Herederos legales'...") 
 
            currentAction = SessionTrace("16.1. _formData.BeneficiariosMail = 'Herederos legales'...")

 _formData.BeneficiariosMail = "Herederos legales" 

        Else 
            currentAction = SessionTrace("17. _formData.BeneficiariosMail = Nothing...") 
 
            currentAction = SessionTrace("17.1. _formData.BeneficiariosMail = Nothing...")

 _formData.BeneficiariosMail = Nothing 

            currentAction = SessionTrace("18. For Each BenefMailItem As 'InMotionGIT.Policy.Entity...' In '_formData.RiskInformation...'") 
            For Each BenefMailItem As InMotionGIT.Policy.Entity.Contracts.Beneficiary In _formData.RiskInformation.Beneficiaries 
                If Not parametersDictionary.ExistsProperty("BenefMailItem") Then 
                    parametersDictionary("BenefMailItem") = BenefMailItem 
                End If 

            currentAction = SessionTrace("19. _formData.Codigo = BenefMailItem.Relationship...") 
 
            currentAction = SessionTrace("19.1. _formData.Codigo = BenefMailItem.Relationship...")

 _formData.Codigo = BenefMailItem.Relationship 

currentAction = SessionTrace("20. SELECT TABLE55.NRELATION, TABLE55.SDESCRIPT FROM TABLE55... WHERE TABLE55.NRELATION = _formData.Codigo )") 
            isFoundData = False 
            With New DataManagerFactory("SELECT TABLE55.SDESCRIPT FROM TABLE55 TABLE55  WHERE TABLE55.NRELATION = @:TABLE55NRELATION0 ORDER BY TABLE55.SDESCRIPT ASC", "TABLE55", "Linked.LatCombined")
             .AddParameter("TABLE55NRELATION0", DbType.Int32, 5, False, _formData.Codigo)
 
             _formData.Descripcion = .QueryExecuteScalarToString()  
        End With

            currentAction = SessionTrace("21. _formData.BeneficiariosMail = _formData.BeneficiariosMail & '<p>'...") 
 
            currentAction = SessionTrace("21.1. _formData.BeneficiariosMail = _formData.BeneficiariosMail & '<p>'...")

 _formData.BeneficiariosMail = _formData.BeneficiariosMail & "<p>" & "Beneficiario: " & BenefMailItem.Client.FirstName & " " & BenefMailItem.Client.LastName & " " & BenefMailItem.Client.LastName2 & "  Participación: " &  BenefMailItem.PercentageShare & "%  Relación: " & _formData.Descripcion & "</a></p>" 

            Next
            End If
currentAction = SessionTrace("22. SELECT TABLE18.SDESCRIPT, TABLE18.SSEXCLIEN, TABLE18.SSTATREGT FROM TABLE18... WHERE TABLE18.SSTATREGT = 1 AND TABLE18.SSEXCLIEN = _formData.RiskInformation.PrimaryInsured.Client.Gender )") 
            isFoundData = False 
            With New DataManagerFactory("SELECT TRIM(TABLE18.SDESCRIPT) SDESCRIPT FROM TABLE18 TABLE18  WHERE TABLE18.SSTATREGT = '1' AND TABLE18.SSEXCLIEN = @:TABLE18SSEXCLIEN1 ORDER BY TABLE18.SDESCRIPT ASC", "TABLE18", "Linked.LatCombined")
             .AddParameter("TABLE18SSEXCLIEN1", DbType.AnsiStringFixedLength, 1, (_formData.RiskInformation.PrimaryInsured.Client.Gender = String.Empty), _formData.RiskInformation.PrimaryInsured.Client.Gender)
 
             _formData.GenderClient = .QueryExecuteScalarToString()  
        End With

            currentAction = SessionTrace("23. Call 'Envía cotización de vida por correo (v2)' workflow in Asynchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("RiskInformation", _formData.RiskInformation) 
                .Add("CorreoMail", _formData.eMail) 
                .Add("PlanType", _formData.PlanType) 
                .Add("BeneficiariosMail", _formData.BeneficiariosMail) 
                .Add("FondosMail", _formData.FondosMail) 
                .Add("AnswerDiabetes", _formData.AnswerDiabetes) 
                .Add("AnswerCancer", _formData.AnswerCancer) 
                .Add("AnswerHeart", _formData.AnswerHeart) 
                .Add("PrimaTotalAnual", _formData.PrimaTotalAnual) 
                .Add("AddresseMailDLI", _formData.AddresseMailDLI) 
                .Add("ProductMasterDescription", _formData.ProductMasterDescription) 
                .Add("ConsumerInformtion", _formData.ConsumerInformation) 
                .Add("GenderClient", _formData.GenderClient) 
                .Add("DireccionCompleta", _formData.DireccionMostrar) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("EnviaCotizacionMailVidaV2", "bdff427b-f9c5-4e6e-bbb6-e660404c8e3f", 1, WorkflowInArguments, True, False, Me.AppRelativeVirtualPath, _formData.InternalId)
 
            currentAction = SessionTrace("24. _formData.FinalMessage = 'El resumen de la cotización ha sid...") 
 
            currentAction = SessionTrace("24.1. _formData.FinalMessage = 'El resumen de la cotización ha sid...")

 _formData.FinalMessage = "El resumen de la cotización ha sido enviado al correo indicado " & _formData.eMail 
            currentAction = SessionTrace("24.2. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

            currentAction = SessionTrace("25. Call 'Mi Vida vale' form with transferring parameters") 
Session(_FormID.Text) = _formData 
 Session("fromid") = _FormID.Text 
     
_webtransfer = String.Format(CultureInfo.InvariantCulture, "{0}/NNCotizacionMiVidaValeBasico.aspx?fromid={1}", ConfigurationManager.AppSettings("Url.Form"), _FormID.Text, "") 


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeSecuenciaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub eMail_TextChanged(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("eMail_Text")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. _formData.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = _formData.eMail...") 
 
            currentAction = SessionTrace("1.1. _formData.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = _formData.eMail...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = _formData.eMail 



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeSecuenciaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub Accept_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("Accept_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. Call 'Mi Vida vale - Final' form with transferring parameters") 
Session(_FormID.Text) = _formData 
 Session("fromid") = _FormID.Text 
     
_webtransfer = String.Format(CultureInfo.InvariantCulture, "{0}/NNCotizacionMiVidaValeFinal.aspx?fromid={1}", ConfigurationManager.AppSettings("Url.Form"), _FormID.Text, "") 


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeSecuenciaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub btnSalirSinGuardar_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("btnSalirSinGuardar_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. _formData.OutWithoutSave = true...") 
 
            currentAction = SessionTrace("1.1. _formData.OutWithoutSave = true...")

 _formData.OutWithoutSave = true 

            currentAction = SessionTrace("2. Call 'Salir sin guardar' form") 
    
_webtransfer = String.Format(CultureInfo.InvariantCulture, "{0}/NNCotizacionOutWithoutSave.aspx", ConfigurationManager.AppSettings("Url.Form"), "") 


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeSecuenciaParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeSecuenciaParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeSecuenciaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeSecuenciaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeSecuenciaUpdatePanel.Update
      End Try         
    End Sub


#End Region

#Region "UserControls Events Handles"

    



#End Region

#Region "Form Manager"

    Private Sub VerifySecurityLevel()










    End Sub

      

    Private Sub GetCurrentParameterInstance(ByRef NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter, force As Boolean)
        If _loadcompleted Or force Then
            If Not _CurrentParameterInstance Then

                NNCotizacionMiVidaValeSecuenciaParameterInstance = FormData

                If Page.IsPostBack Then
                    MapPageToClass(NNCotizacionMiVidaValeSecuenciaParameterInstance)
                End If

                _CurrentParameterInstance = True
            Else
                NNCotizacionMiVidaValeSecuenciaParameterInstance = _formData
            End If
        Else
            NNCotizacionMiVidaValeSecuenciaParameterInstance = Nothing
        End If
    End Sub

    Protected Sub SetCurrentParameterInstance(ByRef NNCotizacionMiVidaValeSecuenciaParameterInstance As NNCotizacionMiVidaValeSecuenciaParameter, calledBy As String)
        FormData = NNCotizacionMiVidaValeSecuenciaParameterInstance
        MapClassToPage(NNCotizacionMiVidaValeSecuenciaParameterInstance,calledBy)
    End Sub

    Protected Sub SetErrors(errors As InMotionGIT.Common.Contracts.Errors.ErrorCollection)
        Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

        If IsNothing(errorList) Then
            errorList = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
        End If

        errorList = errors

        ViewState("Errors") = errorList
        ShowErrors()
    End Sub

    Public Sub ShowErrors()
        If Not IsNothing(ViewState("Errors")) Then
            Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

            Dim queryOut = From lst In errorList Select lst Order By lst.ErrorId

            ErrorsGridView.Visible = True
            ErrorsGridView.DataSource = queryOut.ToList
            ErrorsGridView.DataBind()
            UpdatePanelErrors.Update()
        End If
    End Sub
   
    Private Sub ShowWindowPopupMessage(message As String)
        NotifyMessageLabel.Text = message
        popupNotifyMessage.ShowOnPageLoad = True
    End Sub

    Private Sub ClosePopupWindow()
        popControl.Windows(0).ShowOnPageLoad = False
    End Sub

    Private Sub GetTransferParameters()
        Dim fromDocumentCache As Object = Nothing

        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) Then
            fromDocumentCache = Session( Request.QueryString("fromid"))
            Session.Remove(Request.QueryString("fromid"))
            
        Else
            fromDocumentCache = Session(Session("fromid"))
            Session.Remove(Session("fromid"))
            Session.Remove("fromid")   
        End If
        
        If Not IsNothing(fromDocumentCache) Then
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRun", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ShowAdditionalInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ShowHealthInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ShowBeneficiariesInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ShowPaymentInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ShowBasicInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PlanType", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientExistInDB", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("eMail", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Currency", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Age", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QuestionnairesAvailable", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProducerClientID", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("BeneficiaryType", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("SendMailIndicator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MailToProducerIndicator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InRuleErros", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AccumulatedAmount", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CancelledPoliciesQuantity", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OtherPoliciesSameRiskQuantity", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ConsumerInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrintIndicator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrintResult", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PolicyDocument", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ErrorsFound", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ReportURL", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FormStatus", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrint", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusCase", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RecoveryCaseIndicator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnswerDiabetes", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnswerHeart", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnswerCancer", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PaymentMethod", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProductMasterDescription", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PreviousPayment", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClienteIndicado", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ServiceResultData", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CompleteAddress", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AddresseMailDLI", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("VerificarCuestionariosIndicador", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PlanillaModificacion", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PlanillaVisualizacion", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProductDescription", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PrimaTotalAnual", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PrimaRecibo", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MonedaRecibo", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CurrentYear", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsAnonymous", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UnderwritingCase", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("LookUpValue", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("LookUpValueCollection", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("BeneficiariosMail", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Codigo", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Descripcion", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FondosMail", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeBO", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeFASI", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QRegistros", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("frompanel", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ShowGeneral", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InsuredAmount", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InsuredAmountSelected", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ValorAcumulado", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("GenderClient", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OutWithoutSave", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FinalMessage", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("DireccionMostrar", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientIncluded", fromDocumentCache, _formData)
            
        End If
    End Sub
    
    

    Private Sub SetDefaultValuesFromQueryString()

        If Request.Form("StatusRun").IsNotEmpty Then
                FormData.StatusRun = Request.Form("StatusRun") 

ElseIf Request.QueryString("StatusRun").IsNotEmpty Then
                FormData.StatusRun = Request.QueryString("StatusRun") 
End If 

If Request.Form("ShowAdditionalInformation").IsNotEmpty Then
                FormData.ShowAdditionalInformation = Request.Form("ShowAdditionalInformation") 

ElseIf Request.QueryString("ShowAdditionalInformation").IsNotEmpty Then
                FormData.ShowAdditionalInformation = Request.QueryString("ShowAdditionalInformation") 
End If 

If Request.Form("ShowHealthInformation").IsNotEmpty Then
                FormData.ShowHealthInformation = Request.Form("ShowHealthInformation") 

ElseIf Request.QueryString("ShowHealthInformation").IsNotEmpty Then
                FormData.ShowHealthInformation = Request.QueryString("ShowHealthInformation") 
End If 

If Request.Form("ShowBeneficiariesInformation").IsNotEmpty Then
                FormData.ShowBeneficiariesInformation = Request.Form("ShowBeneficiariesInformation") 

ElseIf Request.QueryString("ShowBeneficiariesInformation").IsNotEmpty Then
                FormData.ShowBeneficiariesInformation = Request.QueryString("ShowBeneficiariesInformation") 
End If 

If Request.Form("ShowPaymentInformation").IsNotEmpty Then
                FormData.ShowPaymentInformation = Request.Form("ShowPaymentInformation") 

ElseIf Request.QueryString("ShowPaymentInformation").IsNotEmpty Then
                FormData.ShowPaymentInformation = Request.QueryString("ShowPaymentInformation") 
End If 

If Request.Form("ShowBasicInformation").IsNotEmpty Then
                FormData.ShowBasicInformation = Request.Form("ShowBasicInformation") 

ElseIf Request.QueryString("ShowBasicInformation").IsNotEmpty Then
                FormData.ShowBasicInformation = Request.QueryString("ShowBasicInformation") 
End If 

If Request.Form("uwcaseid").IsNotEmpty Then
                FormData.uwcaseid = Request.Form("uwcaseid") 

ElseIf Request.QueryString("uwcaseid").IsNotEmpty Then
                FormData.uwcaseid = Request.QueryString("uwcaseid") 
End If 

If Request.Form("uwreqid").IsNotEmpty Then
                FormData.uwreqid = Request.Form("uwreqid") 

ElseIf Request.QueryString("uwreqid").IsNotEmpty Then
                FormData.uwreqid = Request.QueryString("uwreqid") 
End If 

If Request.Form("PlanType").IsNotEmpty Then
                FormData.PlanType = Request.Form("PlanType") 

ElseIf Request.QueryString("PlanType").IsNotEmpty Then
                FormData.PlanType = Request.QueryString("PlanType") 
End If 

If Request.Form("ClientExistInDB").IsNotEmpty Then
                FormData.ClientExistInDB = Request.Form("ClientExistInDB") 

ElseIf Request.QueryString("ClientExistInDB").IsNotEmpty Then
                FormData.ClientExistInDB = Request.QueryString("ClientExistInDB") 
End If 

If Request.Form("eMail").IsNotEmpty Then
                FormData.eMail = Request.Form("eMail") 

ElseIf Request.QueryString("eMail").IsNotEmpty Then
                FormData.eMail = Request.QueryString("eMail") 
End If 

If Request.Form("Currency").IsNotEmpty Then
                FormData.Currency = Request.Form("Currency") 

ElseIf Request.QueryString("Currency").IsNotEmpty Then
                FormData.Currency = Request.QueryString("Currency") 
End If 

If Request.Form("Age").IsNotEmpty Then
                FormData.Age = Request.Form("Age") 

ElseIf Request.QueryString("Age").IsNotEmpty Then
                FormData.Age = Request.QueryString("Age") 
End If 

If Request.Form("ProducerClientID").IsNotEmpty Then
                FormData.ProducerClientID = Request.Form("ProducerClientID") 

ElseIf Request.QueryString("ProducerClientID").IsNotEmpty Then
                FormData.ProducerClientID = Request.QueryString("ProducerClientID") 
End If 

If Request.Form("BeneficiaryType").IsNotEmpty Then
                FormData.BeneficiaryType = Request.Form("BeneficiaryType") 

ElseIf Request.QueryString("BeneficiaryType").IsNotEmpty Then
                FormData.BeneficiaryType = Request.QueryString("BeneficiaryType") 
End If 

If Request.Form("SendMailIndicator").IsNotEmpty Then
                FormData.SendMailIndicator = Request.Form("SendMailIndicator") 

ElseIf Request.QueryString("SendMailIndicator").IsNotEmpty Then
                FormData.SendMailIndicator = Request.QueryString("SendMailIndicator") 
End If 

If Request.Form("MailToProducerIndicator").IsNotEmpty Then
                FormData.MailToProducerIndicator = Request.Form("MailToProducerIndicator") 

ElseIf Request.QueryString("MailToProducerIndicator").IsNotEmpty Then
                FormData.MailToProducerIndicator = Request.QueryString("MailToProducerIndicator") 
End If 

If Request.Form("InRuleErros").IsNotEmpty Then
                FormData.InRuleErros = Request.Form("InRuleErros") 

ElseIf Request.QueryString("InRuleErros").IsNotEmpty Then
                FormData.InRuleErros = Request.QueryString("InRuleErros") 
End If 

If Request.Form("AccumulatedAmount").IsNotEmpty Then
                FormData.AccumulatedAmount = Request.Form("AccumulatedAmount") 

ElseIf Request.QueryString("AccumulatedAmount").IsNotEmpty Then
                FormData.AccumulatedAmount = Request.QueryString("AccumulatedAmount") 
End If 

If Request.Form("CancelledPoliciesQuantity").IsNotEmpty Then
                FormData.CancelledPoliciesQuantity = Request.Form("CancelledPoliciesQuantity") 

ElseIf Request.QueryString("CancelledPoliciesQuantity").IsNotEmpty Then
                FormData.CancelledPoliciesQuantity = Request.QueryString("CancelledPoliciesQuantity") 
End If 

If Request.Form("OtherPoliciesSameRiskQuantity").IsNotEmpty Then
                FormData.OtherPoliciesSameRiskQuantity = Request.Form("OtherPoliciesSameRiskQuantity") 

ElseIf Request.QueryString("OtherPoliciesSameRiskQuantity").IsNotEmpty Then
                FormData.OtherPoliciesSameRiskQuantity = Request.QueryString("OtherPoliciesSameRiskQuantity") 
End If 

If Request.Form("OnLinePrintIndicator").IsNotEmpty Then
                FormData.OnLinePrintIndicator = Request.Form("OnLinePrintIndicator") 

ElseIf Request.QueryString("OnLinePrintIndicator").IsNotEmpty Then
                FormData.OnLinePrintIndicator = Request.QueryString("OnLinePrintIndicator") 
End If 

If Request.Form("OnLinePrintResult").IsNotEmpty Then
                FormData.OnLinePrintResult = Request.Form("OnLinePrintResult") 

ElseIf Request.QueryString("OnLinePrintResult").IsNotEmpty Then
                FormData.OnLinePrintResult = Request.QueryString("OnLinePrintResult") 
End If 

If Request.Form("PolicyDocument").IsNotEmpty Then
                FormData.PolicyDocument = Request.Form("PolicyDocument") 

ElseIf Request.QueryString("PolicyDocument").IsNotEmpty Then
                FormData.PolicyDocument = Request.QueryString("PolicyDocument") 
End If 

If Request.Form("ErrorsFound").IsNotEmpty Then
                FormData.ErrorsFound = Request.Form("ErrorsFound") 

ElseIf Request.QueryString("ErrorsFound").IsNotEmpty Then
                FormData.ErrorsFound = Request.QueryString("ErrorsFound") 
End If 

If Request.Form("ReportURL").IsNotEmpty Then
                FormData.ReportURL = Request.Form("ReportURL") 

ElseIf Request.QueryString("ReportURL").IsNotEmpty Then
                FormData.ReportURL = Request.QueryString("ReportURL") 
End If 

If Request.Form("FormStatus").IsNotEmpty Then
                FormData.FormStatus = Request.Form("FormStatus") 

ElseIf Request.QueryString("FormStatus").IsNotEmpty Then
                FormData.FormStatus = Request.QueryString("FormStatus") 
End If 

If Request.Form("OnLinePrint").IsNotEmpty Then
                FormData.OnLinePrint = Request.Form("OnLinePrint") 

ElseIf Request.QueryString("OnLinePrint").IsNotEmpty Then
                FormData.OnLinePrint = Request.QueryString("OnLinePrint") 
End If 

If Request.Form("StatusCase").IsNotEmpty Then
                FormData.StatusCase = Request.Form("StatusCase") 

ElseIf Request.QueryString("StatusCase").IsNotEmpty Then
                FormData.StatusCase = Request.QueryString("StatusCase") 
End If 

If Request.Form("RecoveryCaseIndicator").IsNotEmpty Then
                FormData.RecoveryCaseIndicator = Request.Form("RecoveryCaseIndicator") 

ElseIf Request.QueryString("RecoveryCaseIndicator").IsNotEmpty Then
                FormData.RecoveryCaseIndicator = Request.QueryString("RecoveryCaseIndicator") 
End If 

If Request.Form("AnswerDiabetes").IsNotEmpty Then
                FormData.AnswerDiabetes = Request.Form("AnswerDiabetes") 

ElseIf Request.QueryString("AnswerDiabetes").IsNotEmpty Then
                FormData.AnswerDiabetes = Request.QueryString("AnswerDiabetes") 
End If 

If Request.Form("AnswerHeart").IsNotEmpty Then
                FormData.AnswerHeart = Request.Form("AnswerHeart") 

ElseIf Request.QueryString("AnswerHeart").IsNotEmpty Then
                FormData.AnswerHeart = Request.QueryString("AnswerHeart") 
End If 

If Request.Form("AnswerCancer").IsNotEmpty Then
                FormData.AnswerCancer = Request.Form("AnswerCancer") 

ElseIf Request.QueryString("AnswerCancer").IsNotEmpty Then
                FormData.AnswerCancer = Request.QueryString("AnswerCancer") 
End If 

If Request.Form("PaymentMethod").IsNotEmpty Then
                FormData.PaymentMethod = Request.Form("PaymentMethod") 

ElseIf Request.QueryString("PaymentMethod").IsNotEmpty Then
                FormData.PaymentMethod = Request.QueryString("PaymentMethod") 
End If 

If Request.Form("ProductMasterDescription").IsNotEmpty Then
                FormData.ProductMasterDescription = Request.Form("ProductMasterDescription") 

ElseIf Request.QueryString("ProductMasterDescription").IsNotEmpty Then
                FormData.ProductMasterDescription = Request.QueryString("ProductMasterDescription") 
End If 

If Request.Form("PreviousPayment").IsNotEmpty Then
                FormData.PreviousPayment = Request.Form("PreviousPayment") 

ElseIf Request.QueryString("PreviousPayment").IsNotEmpty Then
                FormData.PreviousPayment = Request.QueryString("PreviousPayment") 
End If 

If Request.Form("ClienteIndicado").IsNotEmpty Then
                FormData.ClienteIndicado = Request.Form("ClienteIndicado") 

ElseIf Request.QueryString("ClienteIndicado").IsNotEmpty Then
                FormData.ClienteIndicado = Request.QueryString("ClienteIndicado") 
End If 

If Request.Form("CompleteAddress").IsNotEmpty Then
                FormData.CompleteAddress = Request.Form("CompleteAddress") 

ElseIf Request.QueryString("CompleteAddress").IsNotEmpty Then
                FormData.CompleteAddress = Request.QueryString("CompleteAddress") 
End If 

If Request.Form("VerificarCuestionariosIndicador").IsNotEmpty Then
                FormData.VerificarCuestionariosIndicador = Request.Form("VerificarCuestionariosIndicador") 

ElseIf Request.QueryString("VerificarCuestionariosIndicador").IsNotEmpty Then
                FormData.VerificarCuestionariosIndicador = Request.QueryString("VerificarCuestionariosIndicador") 
End If 

If Request.Form("PlanillaModificacion").IsNotEmpty Then
                FormData.PlanillaModificacion = Request.Form("PlanillaModificacion") 

ElseIf Request.QueryString("PlanillaModificacion").IsNotEmpty Then
                FormData.PlanillaModificacion = Request.QueryString("PlanillaModificacion") 
End If 

If Request.Form("PlanillaVisualizacion").IsNotEmpty Then
                FormData.PlanillaVisualizacion = Request.Form("PlanillaVisualizacion") 

ElseIf Request.QueryString("PlanillaVisualizacion").IsNotEmpty Then
                FormData.PlanillaVisualizacion = Request.QueryString("PlanillaVisualizacion") 
End If 

If Request.Form("ProductDescription").IsNotEmpty Then
                FormData.ProductDescription = Request.Form("ProductDescription") 

ElseIf Request.QueryString("ProductDescription").IsNotEmpty Then
                FormData.ProductDescription = Request.QueryString("ProductDescription") 
End If 

If Request.Form("PrimaTotalAnual").IsNotEmpty Then
                FormData.PrimaTotalAnual = Request.Form("PrimaTotalAnual") 

ElseIf Request.QueryString("PrimaTotalAnual").IsNotEmpty Then
                FormData.PrimaTotalAnual = Request.QueryString("PrimaTotalAnual") 
End If 

If Request.Form("PrimaRecibo").IsNotEmpty Then
                FormData.PrimaRecibo = Request.Form("PrimaRecibo") 

ElseIf Request.QueryString("PrimaRecibo").IsNotEmpty Then
                FormData.PrimaRecibo = Request.QueryString("PrimaRecibo") 
End If 

If Request.Form("MonedaRecibo").IsNotEmpty Then
                FormData.MonedaRecibo = Request.Form("MonedaRecibo") 

ElseIf Request.QueryString("MonedaRecibo").IsNotEmpty Then
                FormData.MonedaRecibo = Request.QueryString("MonedaRecibo") 
End If 

If Request.Form("CurrentYear").IsNotEmpty Then
                FormData.CurrentYear = Request.Form("CurrentYear") 

ElseIf Request.QueryString("CurrentYear").IsNotEmpty Then
                FormData.CurrentYear = Request.QueryString("CurrentYear") 
End If 

If Request.Form("IsAnonymous").IsNotEmpty Then
                FormData.IsAnonymous = Request.Form("IsAnonymous") 

ElseIf Request.QueryString("IsAnonymous").IsNotEmpty Then
                FormData.IsAnonymous = Request.QueryString("IsAnonymous") 
End If 

If Request.Form("BeneficiariosMail").IsNotEmpty Then
                FormData.BeneficiariosMail = Request.Form("BeneficiariosMail") 

ElseIf Request.QueryString("BeneficiariosMail").IsNotEmpty Then
                FormData.BeneficiariosMail = Request.QueryString("BeneficiariosMail") 
End If 

If Request.Form("Codigo").IsNotEmpty Then
                FormData.Codigo = Request.Form("Codigo") 

ElseIf Request.QueryString("Codigo").IsNotEmpty Then
                FormData.Codigo = Request.QueryString("Codigo") 
End If 

If Request.Form("Descripcion").IsNotEmpty Then
                FormData.Descripcion = Request.Form("Descripcion") 

ElseIf Request.QueryString("Descripcion").IsNotEmpty Then
                FormData.Descripcion = Request.QueryString("Descripcion") 
End If 

If Request.Form("FondosMail").IsNotEmpty Then
                FormData.FondosMail = Request.Form("FondosMail") 

ElseIf Request.QueryString("FondosMail").IsNotEmpty Then
                FormData.FondosMail = Request.QueryString("FondosMail") 
End If 

If Request.Form("UsercodeBO").IsNotEmpty Then
                FormData.UsercodeBO = Request.Form("UsercodeBO") 

ElseIf Request.QueryString("UsercodeBO").IsNotEmpty Then
                FormData.UsercodeBO = Request.QueryString("UsercodeBO") 
End If 

If Request.Form("UsercodeFASI").IsNotEmpty Then
                FormData.UsercodeFASI = Request.Form("UsercodeFASI") 

ElseIf Request.QueryString("UsercodeFASI").IsNotEmpty Then
                FormData.UsercodeFASI = Request.QueryString("UsercodeFASI") 
End If 

If Request.Form("QRegistros").IsNotEmpty Then
                FormData.QRegistros = Request.Form("QRegistros") 

ElseIf Request.QueryString("QRegistros").IsNotEmpty Then
                FormData.QRegistros = Request.QueryString("QRegistros") 
End If 

If Request.Form("frompanel").IsNotEmpty Then
                FormData.frompanel = Request.Form("frompanel") 

ElseIf Request.QueryString("frompanel").IsNotEmpty Then
                FormData.frompanel = Request.QueryString("frompanel") 
End If 

If Request.Form("ShowGeneral").IsNotEmpty Then
                FormData.ShowGeneral = Request.Form("ShowGeneral") 

ElseIf Request.QueryString("ShowGeneral").IsNotEmpty Then
                FormData.ShowGeneral = Request.QueryString("ShowGeneral") 
End If 

If Request.Form("InsuredAmount").IsNotEmpty Then
                FormData.InsuredAmount = Request.Form("InsuredAmount") 

ElseIf Request.QueryString("InsuredAmount").IsNotEmpty Then
                FormData.InsuredAmount = Request.QueryString("InsuredAmount") 
End If 

If Request.Form("InsuredAmountSelected").IsNotEmpty Then
                FormData.InsuredAmountSelected = Request.Form("InsuredAmountSelected") 

ElseIf Request.QueryString("InsuredAmountSelected").IsNotEmpty Then
                FormData.InsuredAmountSelected = Request.QueryString("InsuredAmountSelected") 
End If 

If Request.Form("ValorAcumulado").IsNotEmpty Then
                FormData.ValorAcumulado = Request.Form("ValorAcumulado") 

ElseIf Request.QueryString("ValorAcumulado").IsNotEmpty Then
                FormData.ValorAcumulado = Request.QueryString("ValorAcumulado") 
End If 

If Request.Form("GenderClient").IsNotEmpty Then
                FormData.GenderClient = Request.Form("GenderClient") 

ElseIf Request.QueryString("GenderClient").IsNotEmpty Then
                FormData.GenderClient = Request.QueryString("GenderClient") 
End If 

If Request.Form("OutWithoutSave").IsNotEmpty Then
                FormData.OutWithoutSave = Request.Form("OutWithoutSave") 

ElseIf Request.QueryString("OutWithoutSave").IsNotEmpty Then
                FormData.OutWithoutSave = Request.QueryString("OutWithoutSave") 
End If 

If Request.Form("FinalMessage").IsNotEmpty Then
                FormData.FinalMessage = Request.Form("FinalMessage") 

ElseIf Request.QueryString("FinalMessage").IsNotEmpty Then
                FormData.FinalMessage = Request.QueryString("FinalMessage") 
End If 

If Request.Form("DireccionMostrar").IsNotEmpty Then
                FormData.DireccionMostrar = Request.Form("DireccionMostrar") 

ElseIf Request.QueryString("DireccionMostrar").IsNotEmpty Then
                FormData.DireccionMostrar = Request.QueryString("DireccionMostrar") 
End If 


    End Sub
    
    Private Sub BehaviorControls(controlItem As Control, isEnable As Boolean)
        InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValueSimple("Enabled", controlItem, isEnable)           
    End Sub
    
    Private Sub SetReadOnlyControls()
    
        BehaviorControls(button31, False)
        BehaviorControls(button32, False)
        BehaviorControls(button34, False)
        BehaviorControls(button35, False)
        BehaviorControls(button36, False)
        BehaviorControls(button19, False)
        BehaviorControls(EnviarCotizacionEmail, False)
        BehaviorControls(eMail, False)
        BehaviorControls(Accept, False)
        BehaviorControls(OnLinePrintIndicator, False)
        BehaviorControls(btnSalirSinGuardar, False)
    
    End Sub
     
#End Region

#Region "Actions Data Methods"

    Private Function SessionTrace(message As String) As String

        If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
            Dim tracelog As String = Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath)))

            tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
            Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = tracelog
        End If

        Return message
    End Function
    
    Private Sub ControlsInitialization()

    End Sub     
  
    Private Sub ParametersToDictionary(ByRef target As Dictionary(Of String, Object))
        If IsNothing(target) Then
            target = New Dictionary(Of String, Object)

            target.Add("StatusRun", _formData.StatusRun) 
            target.Add("ShowAdditionalInformation", _formData.ShowAdditionalInformation) 
            target.Add("ShowHealthInformation", _formData.ShowHealthInformation) 
            target.Add("ShowBeneficiariesInformation", _formData.ShowBeneficiariesInformation) 
            target.Add("ShowPaymentInformation", _formData.ShowPaymentInformation) 
            target.Add("ShowBasicInformation", _formData.ShowBasicInformation) 
            target.Add("RiskInformation", _formData.RiskInformation) 
            target.Add("uwcaseid", _formData.uwcaseid) 
            target.Add("uwreqid", _formData.uwreqid) 
            target.Add("PlanType", _formData.PlanType) 
            target.Add("ClientExistInDB", _formData.ClientExistInDB) 
            target.Add("eMail", _formData.eMail) 
            target.Add("Currency", _formData.Currency) 
            target.Add("Age", _formData.Age) 
            target.Add("QuestionnairesAvailable", _formData.QuestionnairesAvailable) 
            target.Add("ProducerClientID", _formData.ProducerClientID) 
            target.Add("BeneficiaryType", _formData.BeneficiaryType) 
            target.Add("SendMailIndicator", _formData.SendMailIndicator) 
            target.Add("MailToProducerIndicator", _formData.MailToProducerIndicator) 
            target.Add("InRuleErros", _formData.InRuleErros) 
            target.Add("AccumulatedAmount", _formData.AccumulatedAmount) 
            target.Add("CancelledPoliciesQuantity", _formData.CancelledPoliciesQuantity) 
            target.Add("OtherPoliciesSameRiskQuantity", _formData.OtherPoliciesSameRiskQuantity) 
            target.Add("ConsumerInformation", _formData.ConsumerInformation) 
            target.Add("OnLinePrintIndicator", _formData.OnLinePrintIndicator) 
            target.Add("OnLinePrintResult", _formData.OnLinePrintResult) 
            target.Add("PolicyDocument", _formData.PolicyDocument) 
            target.Add("ErrorsFound", _formData.ErrorsFound) 
            target.Add("ReportURL", _formData.ReportURL) 
            target.Add("FormStatus", _formData.FormStatus) 
            target.Add("OnLinePrint", _formData.OnLinePrint) 
            target.Add("StatusCase", _formData.StatusCase) 
            target.Add("RecoveryCaseIndicator", _formData.RecoveryCaseIndicator) 
            target.Add("AnswerDiabetes", _formData.AnswerDiabetes) 
            target.Add("AnswerHeart", _formData.AnswerHeart) 
            target.Add("AnswerCancer", _formData.AnswerCancer) 
            target.Add("PaymentMethod", _formData.PaymentMethod) 
            target.Add("ProductMasterDescription", _formData.ProductMasterDescription) 
            target.Add("PreviousPayment", _formData.PreviousPayment) 
            target.Add("ClienteIndicado", _formData.ClienteIndicado) 
            target.Add("ServiceResultData", _formData.ServiceResultData) 
            target.Add("CompleteAddress", _formData.CompleteAddress) 
            target.Add("AddresseMailDLI", _formData.AddresseMailDLI) 
            target.Add("VerificarCuestionariosIndicador", _formData.VerificarCuestionariosIndicador) 
            target.Add("PlanillaModificacion", _formData.PlanillaModificacion) 
            target.Add("PlanillaVisualizacion", _formData.PlanillaVisualizacion) 
            target.Add("ProductDescription", _formData.ProductDescription) 
            target.Add("PrimaTotalAnual", _formData.PrimaTotalAnual) 
            target.Add("PrimaRecibo", _formData.PrimaRecibo) 
            target.Add("MonedaRecibo", _formData.MonedaRecibo) 
            target.Add("CurrentYear", _formData.CurrentYear) 
            target.Add("IsAnonymous", _formData.IsAnonymous) 
            target.Add("UnderwritingCase", _formData.UnderwritingCase) 
            target.Add("LookUpValue", _formData.LookUpValue) 
            target.Add("LookUpValueCollection", _formData.LookUpValueCollection) 
            target.Add("BeneficiariosMail", _formData.BeneficiariosMail) 
            target.Add("Codigo", _formData.Codigo) 
            target.Add("Descripcion", _formData.Descripcion) 
            target.Add("FondosMail", _formData.FondosMail) 
            target.Add("UsercodeBO", _formData.UsercodeBO) 
            target.Add("UsercodeFASI", _formData.UsercodeFASI) 
            target.Add("QRegistros", _formData.QRegistros) 
            target.Add("frompanel", _formData.frompanel) 
            target.Add("ShowGeneral", _formData.ShowGeneral) 
            target.Add("InsuredAmount", _formData.InsuredAmount) 
            target.Add("InsuredAmountSelected", _formData.InsuredAmountSelected) 
            target.Add("ValorAcumulado", _formData.ValorAcumulado) 
            target.Add("GenderClient", _formData.GenderClient) 
            target.Add("OutWithoutSave", _formData.OutWithoutSave) 
            target.Add("FinalMessage", _formData.FinalMessage) 
            target.Add("DireccionMostrar", _formData.DireccionMostrar) 
            target.Add("ClientIncluded", _formData.ClientIncluded) 

        Else
            target("StatusRun") = _formData.StatusRun 
            target("ShowAdditionalInformation") = _formData.ShowAdditionalInformation 
            target("ShowHealthInformation") = _formData.ShowHealthInformation 
            target("ShowBeneficiariesInformation") = _formData.ShowBeneficiariesInformation 
            target("ShowPaymentInformation") = _formData.ShowPaymentInformation 
            target("ShowBasicInformation") = _formData.ShowBasicInformation 
            target("RiskInformation") = _formData.RiskInformation 
            target("uwcaseid") = _formData.uwcaseid 
            target("uwreqid") = _formData.uwreqid 
            target("PlanType") = _formData.PlanType 
            target("ClientExistInDB") = _formData.ClientExistInDB 
            target("eMail") = _formData.eMail 
            target("Currency") = _formData.Currency 
            target("Age") = _formData.Age 
            target("QuestionnairesAvailable") = _formData.QuestionnairesAvailable 
            target("ProducerClientID") = _formData.ProducerClientID 
            target("BeneficiaryType") = _formData.BeneficiaryType 
            target("SendMailIndicator") = _formData.SendMailIndicator 
            target("MailToProducerIndicator") = _formData.MailToProducerIndicator 
            target("InRuleErros") = _formData.InRuleErros 
            target("AccumulatedAmount") = _formData.AccumulatedAmount 
            target("CancelledPoliciesQuantity") = _formData.CancelledPoliciesQuantity 
            target("OtherPoliciesSameRiskQuantity") = _formData.OtherPoliciesSameRiskQuantity 
            target("ConsumerInformation") = _formData.ConsumerInformation 
            target("OnLinePrintIndicator") = _formData.OnLinePrintIndicator 
            target("OnLinePrintResult") = _formData.OnLinePrintResult 
            target("PolicyDocument") = _formData.PolicyDocument 
            target("ErrorsFound") = _formData.ErrorsFound 
            target("ReportURL") = _formData.ReportURL 
            target("FormStatus") = _formData.FormStatus 
            target("OnLinePrint") = _formData.OnLinePrint 
            target("StatusCase") = _formData.StatusCase 
            target("RecoveryCaseIndicator") = _formData.RecoveryCaseIndicator 
            target("AnswerDiabetes") = _formData.AnswerDiabetes 
            target("AnswerHeart") = _formData.AnswerHeart 
            target("AnswerCancer") = _formData.AnswerCancer 
            target("PaymentMethod") = _formData.PaymentMethod 
            target("ProductMasterDescription") = _formData.ProductMasterDescription 
            target("PreviousPayment") = _formData.PreviousPayment 
            target("ClienteIndicado") = _formData.ClienteIndicado 
            target("ServiceResultData") = _formData.ServiceResultData 
            target("CompleteAddress") = _formData.CompleteAddress 
            target("AddresseMailDLI") = _formData.AddresseMailDLI 
            target("VerificarCuestionariosIndicador") = _formData.VerificarCuestionariosIndicador 
            target("PlanillaModificacion") = _formData.PlanillaModificacion 
            target("PlanillaVisualizacion") = _formData.PlanillaVisualizacion 
            target("ProductDescription") = _formData.ProductDescription 
            target("PrimaTotalAnual") = _formData.PrimaTotalAnual 
            target("PrimaRecibo") = _formData.PrimaRecibo 
            target("MonedaRecibo") = _formData.MonedaRecibo 
            target("CurrentYear") = _formData.CurrentYear 
            target("IsAnonymous") = _formData.IsAnonymous 
            target("UnderwritingCase") = _formData.UnderwritingCase 
            target("LookUpValue") = _formData.LookUpValue 
            target("LookUpValueCollection") = _formData.LookUpValueCollection 
            target("BeneficiariosMail") = _formData.BeneficiariosMail 
            target("Codigo") = _formData.Codigo 
            target("Descripcion") = _formData.Descripcion 
            target("FondosMail") = _formData.FondosMail 
            target("UsercodeBO") = _formData.UsercodeBO 
            target("UsercodeFASI") = _formData.UsercodeFASI 
            target("QRegistros") = _formData.QRegistros 
            target("frompanel") = _formData.frompanel 
            target("ShowGeneral") = _formData.ShowGeneral 
            target("InsuredAmount") = _formData.InsuredAmount 
            target("InsuredAmountSelected") = _formData.InsuredAmountSelected 
            target("ValorAcumulado") = _formData.ValorAcumulado 
            target("GenderClient") = _formData.GenderClient 
            target("OutWithoutSave") = _formData.OutWithoutSave 
            target("FinalMessage") = _formData.FinalMessage 
            target("DireccionMostrar") = _formData.DireccionMostrar 
            target("ClientIncluded") = _formData.ClientIncluded 

        End If     
    End Sub
    
    
    
    
    
#End Region

#Region "Storage Data Methods"

    Private Sub StoreFormInformation()
      If Not IsNothing(_formData) Then

            If _foundData Then
                UpdateStorageData()
            Else
                InsertStorageData()
            End If
       End If
End Sub

    Private Function RetrieveFormInformation() As Boolean
        Dim result As Boolean = False
        Dim records As DataTable

        With New DataManagerFactory("SELECT Content FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)
            records = .QueryExecuteToTable(True)
        End With

        If records.Rows.Count > 0 Then
            result = True            
            _formData = Serialize.Deserialize(Of NNCotizacionMiVidaValeSecuenciaParameter)(records.Rows(0).Item("Content"))
        End If
        
        Return result
    End Function

    Private Sub InsertStorageData()
        With New DataManagerFactory("INSERT INTO FrontOffice.DocumentCache (FormId, ModelId, UserId, Page, Content, CreationDate, UpdateDate) VALUES(@:FormId, @:ModelId, @:UserId, @:Page, @:Content, @:CreationDate, @:UpdateDate)",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)
            .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "21243f58-69ba-4047-809c-ebc4a1909241")
            .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserName)
            .AddParameter("Page", DbType.AnsiString, 255, False, Me.AppRelativeVirtualPath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of NNCotizacionMiVidaValeSecuenciaParameter)(_formData))
            .AddParameter("CreationDate", DbType.DateTime, 20, False, Now)
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)

            .CommandExecute()
        End With
    End Sub

    Private Sub UpdateStorageData()
        With New DataManagerFactory("UPDATE FrontOffice.DocumentCache SET ModelId = @:ModelId, UserId = @:UserId, Page = @:Page, Content = @:Content, UpdateDate = @:UpdateDate WHERE FormId = @:FormId",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "21243f58-69ba-4047-809c-ebc4a1909241")
            .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserName)
            .AddParameter("Page", DbType.AnsiString, 255, False, Me.AppRelativeVirtualPath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of NNCotizacionMiVidaValeSecuenciaParameter)(_formData))
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)

            .CommandExecute()
        End With
    End Sub

#End Region




End Class

<Serializable()>
Public Class NNCotizacionMiVidaValeSecuenciaParameter
    Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of  NNCotizacionMiVidaValeSecuenciaParameter)

    ' Methods
    Public Sub New()
        MyBase.New()
    End Sub

    ' Properties
    Public Property StatusRun As Boolean
    Public Property ShowAdditionalInformation As Boolean
    Public Property ShowHealthInformation As Boolean
    Public Property ShowBeneficiariesInformation As Boolean
    Public Property ShowPaymentInformation As Boolean
    Public Property ShowBasicInformation As Boolean
    Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
    Public Property uwcaseid As Int64
    Public Property uwreqid As Int64
    Public Property PlanType As Int32
    Public Property ClientExistInDB As Boolean
    Public Property eMail As String
    Public Property Currency As Int32
    Public Property Age As Int32
    Public Property QuestionnairesAvailable As InMotionGIT.Questionnaires.QuestionnairesAvailable
    Public Property ProducerClientID As String
    Public Property BeneficiaryType As Int32
    Public Property SendMailIndicator As Boolean
    Public Property MailToProducerIndicator As Boolean
    Public Property InRuleErros As Boolean
    Public Property AccumulatedAmount As Decimal
    Public Property CancelledPoliciesQuantity As Int32
    Public Property OtherPoliciesSameRiskQuantity As Int32
    Public Property ConsumerInformation As InMotionGIT.Common.Contracts.Process.ConsumerInformation
    Public Property OnLinePrintIndicator As Boolean
    Public Property OnLinePrintResult As Int32
    Public Property PolicyDocument As String
    Public Property ErrorsFound As Boolean
    Public Property ReportURL As String
    Public Property FormStatus As Int32
    Public Property OnLinePrint As Int32
    Public Property StatusCase As Int32
    Public Property RecoveryCaseIndicator As Boolean
    Public Property AnswerDiabetes As String
    Public Property AnswerHeart As String
    Public Property AnswerCancer As String
    Public Property PaymentMethod As Int32
    Public Property ProductMasterDescription As String
    Public Property PreviousPayment As Boolean
    Public Property ClienteIndicado As String
    Public Property ServiceResultData As InMotionGIT.Common.Contracts.ServiceResultData
    Public Property CompleteAddress As String
    Public Property AddresseMailDLI As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
    Public Property VerificarCuestionariosIndicador As Boolean
    Public Property PlanillaModificacion As String
    Public Property PlanillaVisualizacion As String
    Public Property ProductDescription As String
    Public Property PrimaTotalAnual As Decimal
    Public Property PrimaRecibo As Decimal
    Public Property MonedaRecibo As Int32
    Public Property CurrentYear As Int32
    Public Property IsAnonymous As Boolean
    Public Property UnderwritingCase As InMotionGIT.Underwriting.Contracts.UnderwritingCase
    Public Property LookUpValue As InMotionGIT.Common.DataType.LookUpValue
    Public Property LookUpValueCollection As InMotionGIT.Common.DataType.LookUpValueCollection
    Public Property BeneficiariosMail As String
    Public Property Codigo As Int32
    Public Property Descripcion As String
    Public Property FondosMail As String
    Public Property UsercodeBO As Int32
    Public Property UsercodeFASI As Int32
    Public Property QRegistros As Int32
    Public Property frompanel As Boolean
    Public Property ShowGeneral As Boolean
    Public Property InsuredAmount As Decimal
    Public Property InsuredAmountSelected As Decimal
    Public Property ValorAcumulado As Decimal
    Public Property GenderClient As String
    Public Property OutWithoutSave As Boolean
    Public Property FinalMessage As String
    Public Property DireccionMostrar As String
    Public Property ClientIncluded As InMotionGIT.Client.Entity.Contracts.Client


End Class