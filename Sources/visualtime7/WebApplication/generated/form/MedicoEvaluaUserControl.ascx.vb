'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer Oracle v7.1.158 at 2017-07-17 model release 23
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"
    
Imports Artem.Google.UI
Imports DashboardBusiness.Helpers
Imports DevExpress.Web
Imports DevExpress.Web.ASPxClasses
Imports DevExpress.Web.ASPxEditors
Imports DevExpress.Web.ASPxGridView
Imports GIT.Core
Imports InMotionGIT.FrontOffice.Support.Enumerations
Imports InMotionGIT.FrontOffice.Support.Helpers.ControlHandler
Imports InMotionGIT.BarCode
Imports InMotionGIT.BarCode.Enumerations
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo
Imports System.IO
Imports InMotionGIT.FrontOffice.Support
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data
Imports System.Data.Common
Imports System.Globalization
Imports System.Linq
Imports System.Threading.Thread
Imports System.Xml.Linq
Imports System.Net


#End Region

Partial Public Class MedicoEvaluaUserControl
    Inherits GIT.Core.UserControlBase
    Implements Dropthings.Widget.Framework.IWidget

#Region "IWidget Members"
    
    
    

    Public Sub Closed() Implements Dropthings.Widget.Framework.IWidget.Closed
    End Sub

    Public Sub HideSettings() Implements Dropthings.Widget.Framework.IWidget.HideSettings

    End Sub

    Public Sub Init1(host As Dropthings.Widget.Framework.IWidgetHost) Implements Dropthings.Widget.Framework.IWidget.Init

    End Sub

    Public Sub Maximized() Implements Dropthings.Widget.Framework.IWidget.Maximized

    End Sub

    Public Sub Minimized() Implements Dropthings.Widget.Framework.IWidget.Minimized

    End Sub

    Public Sub ShowSettings() Implements Dropthings.Widget.Framework.IWidget.ShowSettings

    End Sub

#End Region

#Region "Private fields"

    Private _formData As MedicoEvaluaParameter = Nothing
    Private _CurrentParameterInstance As Boolean = False
    Private _loading As Boolean = False
    Private _loadcompleted As Boolean = False
    Private _webTransfer as String  
    
    Private _QuestionAndAnswerList As InMotionGIT.Mutual.Contracts.QuestionAndAnswerCollection = Nothing
Private _NoteList As InMotionGIT.General.Entity.Contracts.Notes.NoteCollection = Nothing
    
#End Region

#Region "Public properties"

    Public Property FormData() As MedicoEvaluaParameter
        Get
            Dim formDefinition As String = String.Empty               
             
            If IsNothing(_formData) Then
                If Not IsPostBack Then
                    If Not String.IsNullOrEmpty(Request.QueryString("id")) Then
                        Dim _id As Guid
                        
                        If Guid.TryParse(Request.QueryString("id"), _id) Then
		                        _FormID.Text = Request.QueryString("id")  
                            
                            formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
           If Not String.IsNullOrEmpty(formDefinition) Then
              _formData = Serialize.Deserialize(Of MedicoEvaluaParameter)(formDefinition)
           End If
                        End If
                    End If

                    If IsNothing(_formData) Then
                        _formData = New MedicoEvaluaParameter
                       
                        If String.IsNullOrEmpty(_FormID.Text) Then
                        	_FormID.Text = System.Guid.NewGuid().ToString                       
                        End If
											
                        _formData.InternalId = _FormID.Text
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) OrElse
                           Not String.IsNullOrEmpty(Session("fromid")) Then
                           
                            GetTransferParameters()
                        End If
                        
                        
                        
                        SetDefaultValuesFromQueryString()
                        ValidateParametersInstance(_formData)
                        
                        popupNotifyMessage.ShowOnPageLoad = false                        
                        
                        ControlsInitialization()
                        ExecuteActionsInitializationForm()
                         
                        If Not String.IsNullOrEmpty(Request.QueryString("readonly")) Then
                            SetReadOnlyControls()
                        End If
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("btnAgregar")) Then
                            btnAgregar_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("btnEditar")) Then
                            btnEditar_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("btnEliminar")) Then
                            btnEliminar_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button2")) Then
                            button2_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button3")) Then
                            button3_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("btnAplicar")) Then
                            btnAplicar_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button13")) Then
                            button13_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button14")) Then
                            button14_Click(nothing, nothing)
                        End If

                    Else
                    		SetDefaultValuesFromQueryString()
                        
                    End If

                Else
                     formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
           If Not String.IsNullOrEmpty(formDefinition) Then
              _formData = Serialize.Deserialize(Of MedicoEvaluaParameter)(formDefinition)
           End If                    

                    If IsNothing(_formData) Then
                        _formData = New MedicoEvaluaParameter
                    End If
                End If
            End If

            Return _formData
        End Get

        Set(value As MedicoEvaluaParameter)
            _formData = value
        End Set
    End Property
    
#End Region

#Region "Form Events"

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        ErrorsGridView.Visible = False
        
        If ConfigurationManager.AppSettings("ActivateFASIKey") Then
            If Not InMotionGIT.FrontOffice.Proxy.Helpers.RoleManager.ValidateAccess(UserInfo, "Médico") AndAlso
              (Request.QueryString.IsEmpty OrElse Request.QueryString("Key").IsEmpty OrElse Not KeyValidator.KeyValidator(Request.QueryString("Key"))) Then

                Response.Redirect(String.Format(CultureInfo.InvariantCulture, "~/dropthings/Error.aspx?id={0}", GetGlobalResourceObject("Resource", "DeniedAccess")))
            End If

        Else
            If Not InMotionGIT.FrontOffice.Proxy.Helpers.RoleManager.ValidateAccess(UserInfo, "Médico") Then
                Response.Redirect(String.Format(CultureInfo.InvariantCulture, "~/dropthings/Error.aspx?id={0}", GetGlobalResourceObject("Resource", "DeniedAccess")))
            End If
        End If
        
        Dim formData As MedicoEvaluaParameter = Me.FormData        
           
        If Not IsPostBack  AndAlso Not GridViewPostBack() Then                     
            
            
            _loadcompleted = True
            
            
            If IsPostBack And Not _CurrentParameterInstance Then
                MapPageToClass(formData)
                _CurrentParameterInstance = True
            End If

            MapClassToPage(formData)
            VerifySecurityLevel()
            
            
        Else
            
            
            
        End If        
        
        
        
        
    End Sub    

    Protected Sub Page_Unload(sender As Object, e As EventArgs) Handles Me.Unload        
                   If Not IsNothing(_formData) Then
              Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text)) = Serialize.Serialize(Of MedicoEvaluaParameter)(_formData)
              Session(String.Format(CultureInfo.InvariantCulture, "FormTitle.{0}", _FormID.Text)) = Page.Title
              
             'Si el modo de trabajo es desarrollo se coloca el objeto directo en al sesión para que pueda ser examinado usando la pagina /support/SessionDump.aspx?form
              If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
                 Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = _formData
              End If
           End If                  
    End Sub

#End Region

#Region "Controls Events"


    Private Function GridViewPostBack() As Boolean
        For index As Integer = 0 To Request.Params.Count - 1
            If Request.Params(index).EndsWith("$QuestionAndAnswer") or Request.Params(index).EndsWith("$Note") or Request.Params(index).EndsWith("$SurchargeDiscountByInsured")  Then
                Return True
            End If
        Next
        
        Return False
    End Function    
    Protected Sub ProductCode_Callback(sender As Object, e As CallbackEventArgsBase) Handles ProductCode.Callback
               If Not String.IsNullOrEmpty(e.Parameter) Then
                   Dim parameters As String() = e.Parameter.Split(",")
                   Dim value As Integer = 0
                   
                   For index As Integer = 0 To parameters.Length - 1
                      Select Case index
                    Case 0
                        FormData.RiskInformation.LineOfBusiness = parameters(index)
                    Case 1
                        value = parameters(index)

                          
                      End Select                  
                   Next
               
                   ProductCode_DataBinding(ProductCode, New CallbackEventArgsBase(String.Empty))
                  ProductCode.DataBind()  
                  
                   If value.IsNotEmpty Then
                       ProductCode.SelectedItem = ProductCode.Items.FindByValue(value)
                   End If
              End If
  End Sub
Protected Sub CityCode_Callback(sender As Object, e As CallbackEventArgsBase) Handles CityCode.Callback
               If Not String.IsNullOrEmpty(e.Parameter) Then
                   Dim parameters As String() = e.Parameter.Split(",")
                   Dim value As Integer = 0
                   
                   For index As Integer = 0 To parameters.Length - 1
                      Select Case index
                    Case 0
                        FormData.RiskInformation.PrimaryInsured.Client.HomeAddress.StateOrProvince = parameters(index)
                    Case 1
                        value = parameters(index)

                          
                      End Select                  
                   Next
               
                   CityCode_DataBinding(CityCode, New CallbackEventArgsBase(String.Empty))
                  CityCode.DataBind()  
                  
                   If value.IsNotEmpty Then
                       CityCode.SelectedItem = CityCode.Items.FindByValue(value)
                   End If
              End If
  End Sub
Protected Sub MunicipalityCode_Callback(sender As Object, e As CallbackEventArgsBase) Handles MunicipalityCode.Callback
               If Not String.IsNullOrEmpty(e.Parameter) Then
                   Dim parameters As String() = e.Parameter.Split(",")
                   Dim value As Integer = 0
                   
                   For index As Integer = 0 To parameters.Length - 1
                      Select Case index
                    Case 0
                        FormData.RiskInformation.PrimaryInsured.Client.HomeAddress.CityCode = parameters(index)
                    Case 1
                        value = parameters(index)

                          
                      End Select                  
                   Next
               
                   MunicipalityCode_DataBinding(MunicipalityCode, New CallbackEventArgsBase(String.Empty))
                  MunicipalityCode.DataBind()  
                  
                   If value.IsNotEmpty Then
                       MunicipalityCode.SelectedItem = MunicipalityCode.Items.FindByValue(value)
                   End If
              End If
  End Sub
    
        Protected Sub ProductCode_DataBinding(sender As Object, e As EventArgs) Handles ProductCode.DataBinding
           With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                    "SELECT  PRODMASTER.NBRANCH, PRODMASTER.NPRODUCT, PRODMASTER.SDESCRIPT FROM PRODMASTER PRODMASTER  WHERE PRODMASTER.SSTATREGT = '{0}'  AND (PRODMASTER.NBRANCH = @:PRODMASTERNBRANCHDependen AND NOT PRODMASTER.SDESCRIPT IS NULL) ORDER BY PRODMASTER.SDESCRIPT ", "1"), 
                                                    "PRODMASTER", "Linked.LatCombined")                                                                      
                  .AddParameter("PRODMASTERNBRANCHDependen", DbType.Int32, 0, False, FormData.RiskInformation.LineOfBusiness)
   
                  .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                  ProductCode.DataSource = .QueryExecuteToTable(True)
           End With  
    End Sub
    Protected Sub LineOfBusiness_DataBinding(sender As Object, e As EventArgs) Handles LineOfBusiness.DataBinding
           With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                    "SELECT  TABLE10.NBRANCH, TABLE10.SDESCRIPT FROM TABLE10 TABLE10  WHERE TABLE10.SSTATREGT = '{0}'  AND NOT TABLE10.SDESCRIPT IS NULL ORDER BY TABLE10.SDESCRIPT", "1"), 
                                                    "TABLE10", "Linked.LatCombined")                                                                      
                     
                  .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                  LineOfBusiness.DataSource = .QueryExecuteToTable(True)
           End With  
    End Sub
    Protected Sub Gender_DataBinding(sender As Object, e As EventArgs) Handles Gender.DataBinding
           With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                    "SELECT  TABLE18.SSEXCLIEN, TABLE18.SDESCRIPT FROM TABLE18 TABLE18  WHERE TABLE18.SSTATREGT = '{0}' AND TABLE18.SSEXCLIEN <> '{1}'  AND NOT TABLE18.SDESCRIPT IS NULL ORDER BY TABLE18.SDESCRIPT", "1", "3"), 
                                                    "TABLE18", "Linked.LatCombined")                                                                      
                     
                  .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                  Gender.DataSource = .QueryExecuteToTable(True)
           End With  
    End Sub
    Protected Sub Country_DataBinding(sender As Object, e As EventArgs) Handles Country.DataBinding
           With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                    "SELECT  TABLE66.NCOUNTRY, TABLE66.SDESCRIPT FROM TABLE66 TABLE66  WHERE TABLE66.SSTATREGT = '{0}'  AND NOT TABLE66.SDESCRIPT IS NULL ORDER BY TABLE66.SDESCRIPT", "1"), 
                                                    "TABLE66", "Linked.LatCombined")                                                                      
                     
                  .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                  Country.DataSource = .QueryExecuteToTable(True)
           End With  
    End Sub
    Protected Sub StateOrProvince_DataBinding(sender As Object, e As EventArgs) Handles StateOrProvince.DataBinding
           With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                    "SELECT  PROVINCE.NPROVINCE, PROVINCE.SDESCRIPT FROM PROVINCE PROVINCE    ORDER BY PROVINCE.SDESCRIPT ASC", ""), 
                                                    "PROVINCE", "Linked.LatCombined")                                                                      
                     
                  .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                  StateOrProvince.DataSource = .QueryExecuteToTable(True)
           End With  
    End Sub
    Protected Sub CityCode_DataBinding(sender As Object, e As EventArgs) Handles CityCode.DataBinding
           With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                    "SELECT  TAB_LOCAT.NLOCAL, TAB_LOCAT.SDESCRIPT, TAB_LOCAT.NPROVINCE FROM TAB_LOCAT TAB_LOCAT    WHERE TAB_LOCAT.NPROVINCE = @:TAB_LOCATNPROVINCEDepende  ORDER BY TAB_LOCAT.SDESCRIPT ASC", ""), 
                                                    "TAB_LOCAT", "Linked.LatCombined")                                                                      
                  .AddParameter("TAB_LOCATNPROVINCEDepende", DbType.Int32, 0, False, FormData.RiskInformation.PrimaryInsured.Client.HomeAddress.StateOrProvince)
   
                  .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                  CityCode.DataSource = .QueryExecuteToTable(True)
           End With  
    End Sub
    Protected Sub MunicipalityCode_DataBinding(sender As Object, e As EventArgs) Handles MunicipalityCode.DataBinding
           With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                    "SELECT  MUNICIPALITY.NMUNICIPALITY, MUNICIPALITY.SDESCRIPT, MUNICIPALITY.NLOCAL FROM MUNICIPALITY MUNICIPALITY    WHERE MUNICIPALITY.NLOCAL = @:MUNICIPALITYNLOCALDepende  ORDER BY MUNICIPALITY.SDESCRIPT ASC", ""), 
                                                    "MUNICIPALITY", "Linked.LatCombined")                                                                      
                  .AddParameter("MUNICIPALITYNLOCALDepende", DbType.Int32, 0, False, FormData.RiskInformation.PrimaryInsured.Client.HomeAddress.CityCode)
   
                  .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                  MunicipalityCode.DataSource = .QueryExecuteToTable(True)
           End With  
    End Sub
    Protected Sub ComponentAddEdit_DataBinding(sender As Object, e As EventArgs) Handles ComponentAddEdit.DataBinding
           With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                    "SELECT  TABLE5631.NCAUSE, TABLE5631.SDESCRIPT FROM TABLE5631 TABLE5631  WHERE TABLE5631.SSTATREGT = '{0}' AND TABLE5631.NCAUSE > {1}  AND NOT TABLE5631.SDESCRIPT IS NULL ORDER BY TABLE5631.SDESCRIPT", "1", 5), 
                                                    "TABLE5631", "Linked.LatCombined")                                                                      
                     
                  .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                  ComponentAddEdit.DataSource = .QueryExecuteToTable(True)
           End With  
    End Sub

    
#End Region


#Region "PopupMenu Events"

    
    
#End Region

#Region "Mapping methods"

    Public Sub ValidateParametersInstance(ByRef MedicoEvaluaParameterInstance As MedicoEvaluaParameter)
        If IsNothing(MedicoEvaluaParameterInstance.RiskInformation) Then
            MedicoEvaluaParameterInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
        End If
        If IsNothing(MedicoEvaluaParameterInstance.UnderwritingCase) Then
            MedicoEvaluaParameterInstance.UnderwritingCase = New InMotionGIT.Underwriting.Contracts.UnderwritingCase
        End If
        If IsNothing(MedicoEvaluaParameterInstance.RiskInformation.PrimaryInsured) Then
            MedicoEvaluaParameterInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
        End If
        If IsNothing(MedicoEvaluaParameterInstance.RiskInformation.PrimaryInsured.Client) Then
            MedicoEvaluaParameterInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
        End If
        If IsNothing(MedicoEvaluaParameterInstance.RiskInformation.PrimaryInsured.Client.HomeAddress) Then
            MedicoEvaluaParameterInstance.RiskInformation.PrimaryInsured.Client.HomeAddress = New InMotionGIT.General.Entity.Contracts.Address.Address
        End If
        If IsNothing(MedicoEvaluaParameterInstance.Note) Then
            MedicoEvaluaParameterInstance.Note = New InMotionGIT.General.Entity.Contracts.Notes.Note
        End If
        If IsNothing(MedicoEvaluaParameterInstance.SurchargeDiscountByInsured) Then
            MedicoEvaluaParameterInstance.SurchargeDiscountByInsured = New InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsured
        End If
   
    End Sub
    
    ''' <summary>
    ''' This method moves the data from the class to the page
    ''' </summary>
    ''' <param name="MedicoEvaluaParameterInstance"></param>
    ''' <remarks></remarks>
    Public Sub MapClassToPage(ByRef MedicoEvaluaParameterInstance As MedicoEvaluaParameter, Optional calledBy As String = "")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
        ValidateParametersInstance(MedicoEvaluaParameterInstance)

        ProductCode.DataBind()
LineOfBusiness.DataBind()
Gender.DataBind()
Country.DataBind()
StateOrProvince.DataBind()
CityCode.DataBind()
MunicipalityCode.DataBind()
NoteID.DataBind()
IdAddEdit.DataBind()
ComponentAddEdit.DataBind()

       
        With MedicoEvaluaParameterInstance
                      If IsNothing(.NoteCollection) Then
                .NoteCollection = New InMotionGIT.General.Entity.Contracts.Notes.NoteCollection()
            End If

NoteID.DataSource = .NoteCollection 
NoteID.DataBind()
            If IsNothing(.RolesLookUp) Then
                .RolesLookUp = New InMotionGIT.Common.DataType.LookUpValueCollection()
            End If

IdAddEdit.DataSource = .RolesLookUp 
IdAddEdit.DataBind()

                      ProductCode.SelectedItem = ProductCode.Items.FindByValue(.RiskInformation.ProductCode)
            FullProposalId.Text = .UnderwritingCase.FullProposalId
            LineOfBusiness.SelectedItem = LineOfBusiness.Items.FindByValue(.RiskInformation.LineOfBusiness)
            CompleteClientName.Text = .RiskInformation.PrimaryInsured.Client.CompleteClientName
            Gender.SelectedItem = Gender.Items.FindByValue(.RiskInformation.PrimaryInsured.Client.Gender)
            Age.Text = .UnderwritingCase.Age
            Height.Text = .RiskInformation.PrimaryInsured.Client.Height
            Weight.Text = .RiskInformation.PrimaryInsured.Client.Weight
            Country.SelectedItem = Country.Items.FindByValue(.RiskInformation.PrimaryInsured.Client.HomeAddress.Country)
            StateOrProvince.SelectedItem = StateOrProvince.Items.FindByValue(.RiskInformation.PrimaryInsured.Client.HomeAddress.StateOrProvince)
            CityCode.SelectedItem = CityCode.Items.FindByValue(.RiskInformation.PrimaryInsured.Client.HomeAddress.CityCode)
            MunicipalityCode.SelectedItem = MunicipalityCode.Items.FindByValue(.RiskInformation.PrimaryInsured.Client.HomeAddress.MunicipalityCode)
            NoteID.SelectedItem = NoteID.Items.FindByValue(.Note.NoteID)
            DescriptionNote.Text = .Note.Description
            If .Note.UpdateTimeStamp.IsNotEmpty Then
                UpdateTimeStamp.Value = .Note.UpdateTimeStamp
            Else
                UpdateTimeStamp.Value = Nothing
                            UpdateTimeStamp.Value = Date.Parse(GetParameterValue(.Note.UpdateTimeStamp, Date.Today, "isDatepicker"))
            End If
            FreeText.Text = .Note.FreeText
            IdAddEdit.SelectedItem = IdAddEdit.Items.FindByValue(.SurchargeDiscountByInsured.Id)
            ComponentAddEdit.SelectedItem = ComponentAddEdit.Items.FindByValue(.SurchargeDiscountByInsured.Component)
            PercentageSingle.Text = .SurchargeDiscountByInsured.Percentage

                      If IsNothing(.QuestionAndAnswerCollection) Then
                .QuestionAndAnswerCollection = New InMotionGIT.Mutual.Contracts.QuestionAndAnswerCollection()
            End If
            If IsNothing(.NoteCollection) Then
                .NoteCollection = New InMotionGIT.General.Entity.Contracts.Notes.NoteCollection()
            End If
            If IsNothing(.SurchargeDiscountByInsuredCollection) Then
                .SurchargeDiscountByInsuredCollection = New InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsuredCollection()
            End If

            _QuestionAndAnswerList = .QuestionAndAnswerCollection
            QuestionAndAnswer.DataSource = _QuestionAndAnswerList
            QuestionAndAnswer.DataBind()
            If IsNothing(.NoteCollection) Then
                .NoteCollection = New InMotionGIT.General.Entity.Contracts.Notes.NoteCollection()
            End If
            If IsNothing(.SurchargeDiscountByInsuredCollection) Then
                .SurchargeDiscountByInsuredCollection = New InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsuredCollection()
            End If

            _NoteList = .NoteCollection
            Note.DataSource = _NoteList
            Note.DataBind()
            If IsNothing(.SurchargeDiscountByInsuredCollection) Then
                .SurchargeDiscountByInsuredCollection = New InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsuredCollection()
            End If

            _SurchargeDiscountByInsuredList = .SurchargeDiscountByInsuredCollection
            SurchargeDiscountByInsured.DataSource = _SurchargeDiscountByInsuredList
            SurchargeDiscountByInsured.DataBind()
    
                  
                      If Not IsNothing(LineOfBusiness.SelectedItem) Then
                ProductCode_Callback(ProductCode, New CallbackEventArgsBase(LineOfBusiness.SelectedItem.Value))
                If .RiskInformation.ProductCode.IsNotEmpty  Then
                ProductCode.SelectedItem = ProductCode.Items.FindByValue(.RiskInformation.ProductCode)
                Else
                ProductCode.SelectedItem = Nothing
                End If
            End If 
  
  
  
  
             If Not IsNothing(StateOrProvince.SelectedItem) Then
                CityCode_Callback(CityCode, New CallbackEventArgsBase(StateOrProvince.SelectedItem.Value))
                If .RiskInformation.PrimaryInsured.Client.HomeAddress.CityCode.IsNotEmpty  Then
                CityCode.SelectedItem = CityCode.Items.FindByValue(.RiskInformation.PrimaryInsured.Client.HomeAddress.CityCode)
                Else
                CityCode.SelectedItem = Nothing
                End If
            End If 
             If Not IsNothing(CityCode.SelectedItem) Then
                MunicipalityCode_Callback(MunicipalityCode, New CallbackEventArgsBase(CityCode.SelectedItem.Value))
                If .RiskInformation.PrimaryInsured.Client.HomeAddress.MunicipalityCode.IsNotEmpty  Then
                MunicipalityCode.SelectedItem = MunicipalityCode.Items.FindByValue(.RiskInformation.PrimaryInsured.Client.HomeAddress.MunicipalityCode)
                Else
                MunicipalityCode.SelectedItem = Nothing
                End If
            End If 
  
  
  
 
          
               
            
            
       End With


if (Not ("QuestionAndAnswer|Note|SurchargeDiscountByInsured".IndexOf(calledBy) > -1)) Or String.IsNullOrEmpty(calledBy) then        
            
         

        End If          
    End Sub

    ''' <summary>
    ''' This method moves the data from the page to the class
    ''' </summary>
    ''' <param name="MedicoEvaluaParameterInstance"></param>
    Public Sub MapPageToClass(ByRef MedicoEvaluaParameterInstance As MedicoEvaluaParameter)
        _loading = True

        ValidateParametersInstance(MedicoEvaluaParameterInstance)

        With MedicoEvaluaParameterInstance
            .RiskInformation.ProductCode = ProductCode.Value
            .UnderwritingCase.FullProposalId = FullProposalId.Text
            .RiskInformation.LineOfBusiness = LineOfBusiness.Value
            .RiskInformation.PrimaryInsured.Client.CompleteClientName = CompleteClientName.Text.Trim()
            .RiskInformation.PrimaryInsured.Client.Gender = Gender.Value
            .UnderwritingCase.Age = Age.Text
            .RiskInformation.PrimaryInsured.Client.Height = Height.Text
            .RiskInformation.PrimaryInsured.Client.Weight = Weight.Text
            .RiskInformation.PrimaryInsured.Client.HomeAddress.Country = Country.Value
            .RiskInformation.PrimaryInsured.Client.HomeAddress.StateOrProvince = StateOrProvince.Value
            .RiskInformation.PrimaryInsured.Client.HomeAddress.CityCode = CityCode.Value
            .RiskInformation.PrimaryInsured.Client.HomeAddress.MunicipalityCode = MunicipalityCode.Value
            .Note.NoteID = NoteID.Value
            .Note.Description = DescriptionNote.Text.Trim()
            .Note.UpdateTimeStamp = UpdateTimeStamp.Value
            .Note.FreeText = FreeText.Text
            .SurchargeDiscountByInsured.Id = IdAddEdit.Value
            .SurchargeDiscountByInsured.Component = ComponentAddEdit.Value
            .SurchargeDiscountByInsured.Percentage = PercentageSingle.Text


        'GetViewStateQuestionAndAnswerList()
        '.QuestionAndAnswerCollection = _QuestionAndAnswerList
        '.QuestionAndAnswerCollection.CurrentIndex= QuestionAndAnswer.EditIndex
        'ViewState.Remove("QuestionAndAnswerList")
        'GetViewStateNoteList()
        '.NoteCollection = _NoteList
        '.NoteCollection.CurrentIndex= Note.EditIndex
        'ViewState.Remove("NoteList")
        'GetViewStateSurchargeDiscountByInsuredList()
        '.SurchargeDiscountByInsuredCollection = _SurchargeDiscountByInsuredList
        '.SurchargeDiscountByInsuredCollection.CurrentIndex= SurchargeDiscountByInsured.EditIndex
        'ViewState.Remove("SurchargeDiscountByInsuredList")



        End With




        _loading = False
    End Sub

#End Region

#Region "QuestionAndAnswer GridView Controls with dependencies Events"
    


#End Region

#Region "QuestionAndAnswer GridView editing support"    

    Protected Sub QuestionAndAnswer_DataBinding(sender As Object, e As EventArgs) Handles QuestionAndAnswer.DataBinding        
            With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
                                                                 "SELECT  TABLE62.NRECTYPE, TABLE62.SDESCRIPT FROM TABLE62 TABLE62  WHERE TABLE62.SSTATREGT = '{0}'  AND NOT TABLE62.SDESCRIPT IS NULL ORDER BY TABLE62.SDESCRIPT", "1"), "TABLE62", "Linked.LatCombined")
                        
                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                    DirectCast(Note.Columns("RecordType"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
            End With    
            With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
                                                                 "SELECT  USERS.NUSERCODE, CLIENT.SCLIENT, CLIENT.SCLIENAME FROM USERS USERS JOIN CLIENT CLIENT ON CLIENT.SCLIENT = USERS.SCLIENT    WHERE NOT CLIENT.SCLIENAME IS NULL ORDER BY CLIENT.SCLIENAME", ""), "USERS", "Linked.LatCombined")
                        
                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                    DirectCast(Note.Columns("UserCode"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
            End With    
            If IsNothing(FormData.RolesLookUp) Then
                FormData.RolesLookUp = New InMotionGIT.Common.DataType.LookUpValueCollection()
            End If
        DirectCast(SurchargeDiscountByInsured.Columns("Id"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = FormData.RolesLookUp
            With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
                                                                 "SELECT  TABLE5631.NCAUSE, TABLE5631.SDESCRIPT FROM TABLE5631 TABLE5631  WHERE TABLE5631.SSTATREGT = '{0}' AND TABLE5631.NCAUSE > {1}  AND NOT TABLE5631.SDESCRIPT IS NULL ORDER BY TABLE5631.SDESCRIPT", "1", 5), "TABLE5631", "Linked.LatCombined")
                        
                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                    DirectCast(SurchargeDiscountByInsured.Columns("Component"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
            End With    
 
            If IsNothing(FormData.QuestionAndAnswerCollection) Then
                FormData.QuestionAndAnswerCollection = New InMotionGIT.Mutual.Contracts.QuestionAndAnswerCollection()
            End If

        _QuestionAndAnswerList = FormData.QuestionAndAnswerCollection
        QuestionAndAnswer.DataSource = _QuestionAndAnswerList      
    End Sub
    
    Protected Sub QuestionAndAnswer_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles QuestionAndAnswer.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub 
    
    Private Sub SetQuestionAndAnswerListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As MedicoEvaluaParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.QuestionAndAnswerCollection = _QuestionAndAnswerList
        QuestionAndAnswer.DataSource = _QuestionAndAnswerList
        QuestionAndAnswer.DataBind()
    End Sub
   
    Private Sub GetViewStateQuestionAndAnswerList()
        Dim FormData As MedicoEvaluaParameter

         GetCurrentParameterInstance(FormData, True)

        _QuestionAndAnswerList = FormData.QuestionAndAnswerCollection

        If IsNothing(_QuestionAndAnswerList) Then
            _QuestionAndAnswerList = New InMotionGIT.Mutual.Contracts.QuestionAndAnswerCollection()
        End If        
    End Sub
    
    
    
    
#End Region
#Region "Note GridView Controls with dependencies Events"
    


#End Region

#Region "Note GridView editing support"    

    Protected Sub Note_DataBinding(sender As Object, e As EventArgs) Handles Note.DataBinding        
            With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
                                                                 "SELECT  TABLE62.NRECTYPE, TABLE62.SDESCRIPT FROM TABLE62 TABLE62  WHERE TABLE62.SSTATREGT = '{0}'  AND NOT TABLE62.SDESCRIPT IS NULL ORDER BY TABLE62.SDESCRIPT", "1"), "TABLE62", "Linked.LatCombined")
                        
                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                    DirectCast(Note.Columns("RecordType"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
            End With    
            With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
                                                                 "SELECT  USERS.NUSERCODE, CLIENT.SCLIENT, CLIENT.SCLIENAME FROM USERS USERS JOIN CLIENT CLIENT ON CLIENT.SCLIENT = USERS.SCLIENT    WHERE NOT CLIENT.SCLIENAME IS NULL ORDER BY CLIENT.SCLIENAME", ""), "USERS", "Linked.LatCombined")
                        
                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                    DirectCast(Note.Columns("UserCode"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
            End With    
            If IsNothing(FormData.RolesLookUp) Then
                FormData.RolesLookUp = New InMotionGIT.Common.DataType.LookUpValueCollection()
            End If
        DirectCast(SurchargeDiscountByInsured.Columns("Id"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = FormData.RolesLookUp
            With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
                                                                 "SELECT  TABLE5631.NCAUSE, TABLE5631.SDESCRIPT FROM TABLE5631 TABLE5631  WHERE TABLE5631.SSTATREGT = '{0}' AND TABLE5631.NCAUSE > {1}  AND NOT TABLE5631.SDESCRIPT IS NULL ORDER BY TABLE5631.SDESCRIPT", "1", 5), "TABLE5631", "Linked.LatCombined")
                        
                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                    DirectCast(SurchargeDiscountByInsured.Columns("Component"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
            End With    
 
            If IsNothing(FormData.NoteCollection) Then
                FormData.NoteCollection = New InMotionGIT.General.Entity.Contracts.Notes.NoteCollection()
            End If

        _NoteList = FormData.NoteCollection
        Note.DataSource = _NoteList      
    End Sub
    
    Protected Sub Note_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles Note.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub 
    
    Private Sub SetNoteListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As MedicoEvaluaParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.NoteCollection = _NoteList
        Note.DataSource = _NoteList
        Note.DataBind()
    End Sub
   
    Private Sub GetViewStateNoteList()
        Dim FormData As MedicoEvaluaParameter

         GetCurrentParameterInstance(FormData, True)

        _NoteList = FormData.NoteCollection

        If IsNothing(_NoteList) Then
            _NoteList = New InMotionGIT.General.Entity.Contracts.Notes.NoteCollection()
        End If        
    End Sub
    
    
    
    
#End Region
#Region "SurchargeDiscountByInsured GridView Controls with dependencies Events"
    


#End Region

#Region "SurchargeDiscountByInsured GridView editing support"

    Private _SurchargeDiscountByInsuredList As InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsuredCollection = Nothing

    Protected Sub SurchargeDiscountByInsured_DataBinding(sender As Object, e As EventArgs) Handles SurchargeDiscountByInsured.DataBinding        
            If IsNothing(FormData.RolesLookUp) Then
                FormData.RolesLookUp = New InMotionGIT.Common.DataType.LookUpValueCollection()
            End If
        DirectCast(SurchargeDiscountByInsured.Columns("Id"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = FormData.RolesLookUp
            With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
                                                                 "SELECT  TABLE5631.NCAUSE, TABLE5631.SDESCRIPT FROM TABLE5631 TABLE5631  WHERE TABLE5631.SSTATREGT = '{0}' AND TABLE5631.NCAUSE > {1}  AND NOT TABLE5631.SDESCRIPT IS NULL ORDER BY TABLE5631.SDESCRIPT", "1", 5), "TABLE5631", "Linked.LatCombined")
                        
                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                    DirectCast(SurchargeDiscountByInsured.Columns("Component"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
            End With    
 
            If IsNothing(FormData.SurchargeDiscountByInsuredCollection) Then
                FormData.SurchargeDiscountByInsuredCollection = New InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsuredCollection()
            End If

        _SurchargeDiscountByInsuredList = FormData.SurchargeDiscountByInsuredCollection
        SurchargeDiscountByInsured.DataSource = _SurchargeDiscountByInsuredList      
    End Sub
    
    Protected Sub SurchargeDiscountByInsured_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles SurchargeDiscountByInsured.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub
    
    Protected Sub SurchargeDiscountByInsured_CellEditorInitialize(sender As Object, e As DevExpress.Web.ASPxGridView.ASPxGridViewEditorEventArgs) Handles SurchargeDiscountByInsured.CellEditorInitialize
        If SurchargeDiscountByInsured.IsNewRowEditing Then
            Select Case e.Column.FieldName



                Case "Id"                     
                       e.Editor.Focus()               
            End Select

        Else
            Select Case e.Column.FieldName
                   


                Case "Id"                     
                       e.Editor.Focus() 
            End Select
        End If
        
        Select Case e.Column.FieldName

            Case "Id"
                  DirectCast(e.Editor, ASPxComboBox).DataBindItems()
                 
                Case "Component"
     DirectCast(e.Editor, ASPxComboBox).DataBindItems() 

        End Select
    End Sub      
            
    Protected Sub SurchargeDiscountByInsured_ParseValue(sender As Object, e As DevExpress.Web.Data.ASPxParseValueEventArgs) Handles SurchargeDiscountByInsured.ParseValue
        Select Case e.FieldName

        End Select
    End Sub    
    
 
    
    Protected Sub SurchargeDiscountByInsured_RowInserting(sender As Object, e As DevExpress.Web.Data.ASPxDataInsertingEventArgs) Handles SurchargeDiscountByInsured.RowInserting
        Dim SurchargeDiscountByInsuredItem As InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsured = New InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsured()
        GetViewStateSurchargeDiscountByInsuredList()
        
        With SurchargeDiscountByInsuredItem
            .Id = e.NewValues("Id")
                    .Component = e.NewValues("Component") 

                    .Percentage = e.NewValues("Percentage") 


        End With

        _SurchargeDiscountByInsuredList.Add(SurchargeDiscountByInsuredItem)
         SurchargeDiscountByInsured.CancelEdit()
        
        If ViewState("SurchargeDiscountByInsuredOperationType") = "Add" Then
            SurchargeDiscountByInsured.AddNewRow()
        End If

        e.Cancel = True
        SetSurchargeDiscountByInsuredListDataBind()
    End Sub
    
    Protected Sub SurchargeDiscountByInsured_RowUpdating(sender As Object, e As DevExpress.Web.Data.ASPxDataUpdatingEventArgs) Handles SurchargeDiscountByInsured.RowUpdating
        Dim SurchargeDiscountByInsuredItem As InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsured = New InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsured() 
        Dim Id As String = e.Keys("Id")
        
        GetViewStateSurchargeDiscountByInsuredList()
                   
        For index As Integer = 0 To _SurchargeDiscountByInsuredList.Count - 1
            If _SurchargeDiscountByInsuredList(index).Id = Id Then
                
                With _SurchargeDiscountByInsuredList(index)
                    .Component = e.NewValues("Component") 

                    .Percentage = e.NewValues("Percentage") 

                
                End With
                
                Exit For
            End If
        Next

        SetSurchargeDiscountByInsuredListDataBind()

        SurchargeDiscountByInsured.CancelEdit()
        e.Cancel = True
    End Sub

    Protected Sub SurchargeDiscountByInsured_RowDeleting(sender As Object, e As DevExpress.Web.Data.ASPxDataDeletingEventArgs) Handles SurchargeDiscountByInsured.RowDeleting
       Dim Id As String = e.Keys("Id")
       
       GetViewStateSurchargeDiscountByInsuredList()
       
       For index As Integer = 0 To _SurchargeDiscountByInsuredList.Count - 1
           If _SurchargeDiscountByInsuredList(index).Id = Id Then
             _SurchargeDiscountByInsuredList.RemoveAt(index)
             
             Exit For
           End If
       Next       
       
        SetSurchargeDiscountByInsuredListDataBind()
        e.Cancel = True        
    End Sub

    Private Sub SetSurchargeDiscountByInsuredListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As MedicoEvaluaParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.SurchargeDiscountByInsuredCollection = _SurchargeDiscountByInsuredList
        SurchargeDiscountByInsured.DataSource = _SurchargeDiscountByInsuredList
        SurchargeDiscountByInsured.DataBind()
   End Sub

    Private Sub GetViewStateSurchargeDiscountByInsuredList()
        Dim FormData As MedicoEvaluaParameter

         GetCurrentParameterInstance(FormData, True)

        _SurchargeDiscountByInsuredList = FormData.SurchargeDiscountByInsuredCollection

        If IsNothing(_SurchargeDiscountByInsuredList) Then
            _SurchargeDiscountByInsuredList = New InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsuredCollection()
        End If        
    End Sub
     
    
        
    
#End Region







#Region "AutoPostBack Events Handles"

Protected Sub NoteID_SelectedIndexChanged(sender As Object, e As EventArgs)  
        Dim MedicoEvaluaParameterInstance As MedicoEvaluaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("NoteID_SelectedIndex")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(MedicoEvaluaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. For Each noteItem As 'InMotionGIT.General.Entit...' In '_formData.NoteCollection...'") 
            For Each noteItem As InMotionGIT.General.Entity.Contracts.Notes.Note In _formData.NoteCollection 
                If Not parametersDictionary.ExistsProperty("noteItem") Then 
                    parametersDictionary("noteItem") = noteItem 
                End If 

            currentAction = SessionTrace("1. If NoteID = _formData.Note.NoteID Then") 
        If noteItem.NoteID = _formData.Note.NoteID Then 

            currentAction = SessionTrace("1. _formData.Note = noteItem...") 
 
If IsNothing(_formData.Note) Then
   _formData.Note = New InMotionGIT.General.Entity.Contracts.Notes.Note
End If 

 _formData.Note = noteItem 

            End If
            Next
            currentAction = SessionTrace("4. NoteAddEdit.Visible = True, 4. NoteAddEdit.Enabled = False, 4. DescriptionNote.Visible = True...") 
BehaviorShowControls("NoteAddEdit,Visible")
BehaviorShowControls("NoteAddEdit,Disabled")
BehaviorShowControls("DescriptionNote,Visible")
BehaviorShowControls("DescriptionNote,Disabled")
BehaviorShowControls("UpdateTimeStamp,Visible")
BehaviorShowControls("UpdateTimeStamp,Disabled")



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(MedicoEvaluaParameterInstance,"SurchargeDiscountByInsured")
          
        
          If MedicoEvaluaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(MedicoEvaluaParameterInstance.NotifyMessage)
             End If           
            
             MedicoEvaluaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(MedicoEvaluaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   MedicoEvaluaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub btnAgregar_Click(sender As Object, e As EventArgs)  
        Dim MedicoEvaluaParameterInstance As MedicoEvaluaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("btnAgregar_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim index As System.Int16


        
           
        
           GetCurrentParameterInstance(MedicoEvaluaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
           With parametersDictionary
    .Add("index", index)
End With
            currentAction = SessionTrace("1. '_formData.Note' = New 'InMotionGIT.General.Entit'...'") 
             _formData.Note = New InMotionGIT.General.Entity.Contracts.Notes.Note

            currentAction = SessionTrace("2. _formData.Note.UpdateTimeStamp = Date.Today...") 
 
If IsNothing(_formData.Note) Then
   _formData.Note = New InMotionGIT.General.Entity.Contracts.Notes.Note
End If 

 _formData.Note.UpdateTimeStamp = Date.Today 

 index = 0 

            currentAction = SessionTrace("3. _formData.NoteAction = 'Add'...") 
 

 _formData.NoteAction = "Add" 

 index = 1 

            currentAction = SessionTrace("4. _formData.Note.RecordType = 27...") 
 
If IsNothing(_formData.Note) Then
   _formData.Note = New InMotionGIT.General.Entity.Contracts.Notes.Note
End If 

 _formData.Note.RecordType = 27 
If IsNothing(_formData.Note) Then
   _formData.Note = New InMotionGIT.General.Entity.Contracts.Notes.Note
End If 

 _formData.Note.UserCode = _formData.UserCode32 
If IsNothing(_formData.Note) Then
   _formData.Note = New InMotionGIT.General.Entity.Contracts.Notes.Note
End If 

 _formData.Note.UpdateTimeStamp = Date.Today 
If IsNothing(_formData.Note) Then
   _formData.Note = New InMotionGIT.General.Entity.Contracts.Notes.Note
End If 

 _formData.Note.NoteID = index 

            currentAction = SessionTrace("5. NoteAddEdit.Visible = True, 5. NoteAddEdit.Enabled = True, 5. DescriptionNote.Visible = True...") 
BehaviorShowControls("NoteAddEdit,Visible")
BehaviorShowControls("NoteAddEdit,Enabled")
BehaviorShowControls("DescriptionNote,Visible")
BehaviorShowControls("DescriptionNote,Enabled")
BehaviorShowControls("UpdateTimeStamp,Visible")
BehaviorShowControls("UpdateTimeStamp,Enabled")
BehaviorShowControls("zone1,Visible")
BehaviorShowControls("zone1,Enabled")
BehaviorShowControls("zone9,Visible")
BehaviorShowControls("zone9,Enabled")
BehaviorShowControls("button2,Visible")
BehaviorShowControls("button3,Visible")
BehaviorShowControls("button3,Enabled")
BehaviorShowControls("button2,Enabled")



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(MedicoEvaluaParameterInstance,"SurchargeDiscountByInsured")
          
        
          If MedicoEvaluaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(MedicoEvaluaParameterInstance.NotifyMessage)
             End If           
            
             MedicoEvaluaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(MedicoEvaluaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   MedicoEvaluaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub btnEditar_Click(sender As Object, e As EventArgs)  
        Dim MedicoEvaluaParameterInstance As MedicoEvaluaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("btnEditar_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim index As System.Int16


        
           
        
           GetCurrentParameterInstance(MedicoEvaluaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
           With parametersDictionary
    .Add("index", index)
End With
            currentAction = SessionTrace("1. For Each noteItem As 'InMotionGIT.General.Entit...' In '_formData.NoteCollection...'") 
            For Each noteItem As InMotionGIT.General.Entity.Contracts.Notes.Note In _formData.NoteCollection 
                If Not parametersDictionary.ExistsProperty("noteItem") Then 
                    parametersDictionary("noteItem") = noteItem 
                End If 

            currentAction = SessionTrace("1. If NoteID = _formData.Note.NoteID Then") 
        If noteItem.NoteID = _formData.Note.NoteID Then 

            currentAction = SessionTrace("1. _formData.Note = noteItem...") 
 
If IsNothing(_formData.Note) Then
   _formData.Note = New InMotionGIT.General.Entity.Contracts.Notes.Note
End If 

 _formData.Note = noteItem 

            End If
            Next
            currentAction = SessionTrace("4. If _formData.Note.RecordType <> 34 Then") 
        If _formData.Note.RecordType <> 34 Then 

            currentAction = SessionTrace("4. _formData.NoteAction = 'Edit'...") 
 

 _formData.NoteAction = "Edit" 

            currentAction = SessionTrace("5. NoteAddEdit.Visible = True, 5. NoteAddEdit.Enabled = True, 5. DescriptionNote.Visible = True...") 
BehaviorShowControls("NoteAddEdit,Visible")
BehaviorShowControls("NoteAddEdit,Enabled")
BehaviorShowControls("DescriptionNote,Visible")
BehaviorShowControls("DescriptionNote,Enabled")
BehaviorShowControls("UpdateTimeStamp,Visible")
BehaviorShowControls("UpdateTimeStamp,Enabled")
BehaviorShowControls("zone1,Visible")
BehaviorShowControls("zone1,Enabled")
BehaviorShowControls("zone9,Visible")
BehaviorShowControls("zone9,Enabled")
BehaviorShowControls("button2,Visible")
BehaviorShowControls("button3,Visible")
BehaviorShowControls("button3,Enabled")
BehaviorShowControls("button2,Enabled")

        Else 
parametersDictionary("index") = index
            currentAction = SessionTrace("6. The message 'No puede editar la n...' will displayed as 'Popup'") 
            messageAction = "No puede editar la nota de la Declaración Personal de Salud." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(MedicoEvaluaParameterInstance,"SurchargeDiscountByInsured")
          
        
          If MedicoEvaluaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(MedicoEvaluaParameterInstance.NotifyMessage)
             End If           
            
             MedicoEvaluaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(MedicoEvaluaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   MedicoEvaluaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub btnEliminar_Click(sender As Object, e As EventArgs)  
        Dim MedicoEvaluaParameterInstance As MedicoEvaluaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("btnEliminar_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim NoteToDelete As InMotionGIT.General.Entity.Contracts.Notes.Note
Dim index As System.Int16
Dim index2 As System.Int16


        
           
        
           GetCurrentParameterInstance(MedicoEvaluaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
           With parametersDictionary
    .Add("NoteToDelete", NoteToDelete)
    .Add("index", index)
    .Add("index2", index2)
End With
            currentAction = SessionTrace("1. {index} = 0...") 
 

 index = 0 

            currentAction = SessionTrace("2. For Each noteItem As 'InMotionGIT.General.Entit...' In '_formData.NoteCollection...'") 
            For Each noteItem As InMotionGIT.General.Entity.Contracts.Notes.Note In _formData.NoteCollection 
                If Not parametersDictionary.ExistsProperty("noteItem") Then 
                    parametersDictionary("noteItem") = noteItem 
                End If 

            currentAction = SessionTrace("2. If NoteID = _formData.Note.NoteID Then") 
        If noteItem.NoteID = _formData.Note.NoteID Then 

            currentAction = SessionTrace("2. {index2} = index...") 
 

 index2 = index 

            End If
            currentAction = SessionTrace("4. {index} = index + 1...") 
 

 index = index + 1 

            Next
            currentAction = SessionTrace("6. If _formData.Note.RecordType <> 34 Then") 
        If _formData.Note.RecordType <> 34 Then 

            currentAction = SessionTrace("6. '_formData.NoteCollection'.RemoveAt('index2')") 
             _formData.NoteCollection.RemoveAt(index2)

        Else 
parametersDictionary("NoteToDelete") = NoteToDelete
parametersDictionary("index") = index
parametersDictionary("index2") = index2
            currentAction = SessionTrace("7. The message 'No puede eliminar la...' will displayed as 'Popup'") 
            messageAction = "No puede eliminar la nota de la Declaración Personal de Salud." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            End If
            currentAction = SessionTrace("9. NoteAddEdit.Visible = False, 9. zone1.Visible = False") 
BehaviorShowControls("NoteAddEdit,Hidden")
BehaviorShowControls("zone1,Hidden")



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(MedicoEvaluaParameterInstance,"SurchargeDiscountByInsured")
          
        
          If MedicoEvaluaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(MedicoEvaluaParameterInstance.NotifyMessage)
             End If           
            
             MedicoEvaluaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(MedicoEvaluaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   MedicoEvaluaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button2_Click(sender As Object, e As EventArgs)  
        Dim MedicoEvaluaParameterInstance As MedicoEvaluaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button2_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim index As System.Int16
Dim index2 As System.Int16


        
           
        
           GetCurrentParameterInstance(MedicoEvaluaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
           With parametersDictionary
    .Add("index", index)
    .Add("index2", index2)
End With
            currentAction = SessionTrace("1. {index} = 0...") 
 

 index = 0 

            currentAction = SessionTrace("2. If _formData.NoteAction = 'Add' Then") 
        If _formData.NoteAction = "Add" Then 

            currentAction = SessionTrace("2. For Each noteItem As 'InMotionGIT.General.Entit...' In '_formData.NoteCollection...'") 
            For Each noteItem As InMotionGIT.General.Entity.Contracts.Notes.Note In _formData.NoteCollection 
                If Not parametersDictionary.ExistsProperty("noteItem") Then 
                    parametersDictionary("noteItem") = noteItem 
                End If 

            currentAction = SessionTrace("2. {index} = noteItem.NoteID + 1...") 
 

 index = noteItem.NoteID + 1 

            Next
            currentAction = SessionTrace("4. _formData.Note.NoteID = index...") 
 
If IsNothing(_formData.Note) Then
   _formData.Note = New InMotionGIT.General.Entity.Contracts.Notes.Note
End If 

 _formData.Note.NoteID = index 

            currentAction = SessionTrace("5. '_formData.NoteCollection'.Add('_formData.Note')") 
             _formData.NoteCollection.Add(_formData.Note)

            End If
            currentAction = SessionTrace("7. If _formData.NoteAction = 'Edit' Then") 
        If _formData.NoteAction = "Edit" Then 

            currentAction = SessionTrace("7. For Each noteItem As 'InMotionGIT.General.Entit...' In '_formData.NoteCollection...'") 
            For Each noteItem As InMotionGIT.General.Entity.Contracts.Notes.Note In _formData.NoteCollection 
                If Not parametersDictionary.ExistsProperty("noteItem") Then 
                    parametersDictionary("noteItem") = noteItem 
                End If 

            currentAction = SessionTrace("7. If NoteID = _formData.Note.NoteID Then") 
        If noteItem.NoteID = _formData.Note.NoteID Then 

            currentAction = SessionTrace("7. {index2} = index...") 
 

 index2 = index 

            End If
            currentAction = SessionTrace("9. {index} = index + 1...") 
 

 index = index + 1 

            Next
            currentAction = SessionTrace("11. '_formData.NoteCollection'.RemoveAt('index2')") 
             _formData.NoteCollection.RemoveAt(index2)

            currentAction = SessionTrace("12. '_formData.NoteCollection'.Add('_formData.Note')") 
             _formData.NoteCollection.Add(_formData.Note)

            End If
            currentAction = SessionTrace("14. NoteAddEdit.Visible = False, 14. NoteAddEdit.Enabled = False, 14. DescriptionNote.Visible = False...") 
BehaviorShowControls("NoteAddEdit,Hidden")
BehaviorShowControls("NoteAddEdit,Disabled")
BehaviorShowControls("DescriptionNote,Hidden")
BehaviorShowControls("DescriptionNote,Disabled")
BehaviorShowControls("UpdateTimeStamp,Hidden")
BehaviorShowControls("UpdateTimeStamp,Disabled")
BehaviorShowControls("zone1,Hidden")
BehaviorShowControls("zone1,Disabled")
BehaviorShowControls("zone9,Hidden")
BehaviorShowControls("zone9,Disabled")
BehaviorShowControls("button2,Hidden")
BehaviorShowControls("button3,Hidden")
BehaviorShowControls("button3,Disabled")
BehaviorShowControls("button2,Disabled")

            currentAction = SessionTrace("15. '_formData.Note' = New 'InMotionGIT.General.Entit'...'") 
             _formData.Note = New InMotionGIT.General.Entity.Contracts.Notes.Note



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(MedicoEvaluaParameterInstance,"SurchargeDiscountByInsured")
          
        
          If MedicoEvaluaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(MedicoEvaluaParameterInstance.NotifyMessage)
             End If           
            
             MedicoEvaluaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(MedicoEvaluaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   MedicoEvaluaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button3_Click(sender As Object, e As EventArgs)  
        Dim MedicoEvaluaParameterInstance As MedicoEvaluaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button3_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(MedicoEvaluaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. '_formData.Note' = New 'InMotionGIT.General.Entit'...'") 
             _formData.Note = New InMotionGIT.General.Entity.Contracts.Notes.Note

            currentAction = SessionTrace("2. NoteAddEdit.Visible = False, 2. NoteAddEdit.Enabled = False, 2. DescriptionNote.Visible = False...") 
BehaviorShowControls("NoteAddEdit,Hidden")
BehaviorShowControls("NoteAddEdit,Disabled")
BehaviorShowControls("DescriptionNote,Hidden")
BehaviorShowControls("DescriptionNote,Disabled")
BehaviorShowControls("UpdateTimeStamp,Hidden")
BehaviorShowControls("UpdateTimeStamp,Disabled")
BehaviorShowControls("zone1,Hidden")
BehaviorShowControls("zone1,Disabled")
BehaviorShowControls("zone9,Hidden")
BehaviorShowControls("zone9,Disabled")
BehaviorShowControls("button2,Hidden")
BehaviorShowControls("button3,Hidden")
BehaviorShowControls("button3,Disabled")
BehaviorShowControls("button2,Disabled")



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(MedicoEvaluaParameterInstance,"SurchargeDiscountByInsured")
          
        
          If MedicoEvaluaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(MedicoEvaluaParameterInstance.NotifyMessage)
             End If           
            
             MedicoEvaluaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(MedicoEvaluaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   MedicoEvaluaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub btnAplicar_Click(sender As Object, e As EventArgs)  
        Dim MedicoEvaluaParameterInstance As MedicoEvaluaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("btnAplicar_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim ErrorFound As System.Boolean
Dim index As System.Int16


        
           
        
           GetCurrentParameterInstance(MedicoEvaluaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
           With parametersDictionary
    .Add("ErrorFound", ErrorFound)
    .Add("index", index)
End With
            currentAction = SessionTrace("1. {ErrorFound} = False...") 
 

 ErrorFound = False 

 index = 0 

            currentAction = SessionTrace("2. For Each surchargediscountbyinsuredItem As 'InMotionGIT.Mutual.Contra...' In '_formData.SurchargeDiscou...'") 
            For Each surchargediscountbyinsuredItem As InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsured In _formData.SurchargeDiscountByInsuredCollection 
                If Not parametersDictionary.ExistsProperty("surchargediscountbyinsuredItem") Then 
                    parametersDictionary("surchargediscountbyinsuredItem") = surchargediscountbyinsuredItem 
                End If 

            currentAction = SessionTrace("2. {index} = index + 1...") 
 

 index = index + 1 

            Next
            currentAction = SessionTrace("4. If {index} >= 5 Then") 
        If index >= 5 Then 

            currentAction = SessionTrace("4. {ErrorFound} = True...") 
 

 ErrorFound = True 
If IsNothing(_formData.SurchargeDiscountByInsured) Then
   _formData.SurchargeDiscountByInsured = New InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsured
End If 

 _formData.SurchargeDiscountByInsured.Component = Nothing 

parametersDictionary("ErrorFound") = ErrorFound
parametersDictionary("index") = index
            currentAction = SessionTrace("5. The message 'Solo puede agregar 5...' will displayed as 'Popup'") 
            messageAction = "Solo puede agregar 5 recargos." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            End If
            currentAction = SessionTrace("7. If {ErrorFound} = False Then") 
        If ErrorFound = False Then 

            currentAction = SessionTrace("7. For Each surchargediscountbyinsuredItem As 'InMotionGIT.Mutual.Contra...' In '_formData.SurchargeDiscou...'") 
            For Each surchargediscountbyinsuredItem As InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsured In _formData.SurchargeDiscountByInsuredCollection 
                If Not parametersDictionary.ExistsProperty("surchargediscountbyinsuredItem") Then 
                    parametersDictionary("surchargediscountbyinsuredItem") = surchargediscountbyinsuredItem 
                End If 

            currentAction = SessionTrace("7. If _formData.SurchargeDiscountByInsured.Component = 'surchargediscountbyinsuredItem.Component' Then") 
        If _formData.SurchargeDiscountByInsured.Component = "surchargediscountbyinsuredItem.Component" Then 

            currentAction = SessionTrace("7. {ErrorFound} = True...") 
 

 ErrorFound = True 
If IsNothing(_formData.SurchargeDiscountByInsured) Then
   _formData.SurchargeDiscountByInsured = New InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsured
End If 

 _formData.SurchargeDiscountByInsured.Component = Nothing 

            End If
            Next
            currentAction = SessionTrace("10. If {ErrorFound} = False Then") 
        If ErrorFound = False Then 

            currentAction = SessionTrace("10. '_formData.SurchargeDiscountByInsuredCollection'.Add('_formData.SurchargeDiscountByInsured')") 
             _formData.SurchargeDiscountByInsuredCollection.Add(_formData.SurchargeDiscountByInsured)

            currentAction = SessionTrace("11. '_formData.SurchargeDiscountByInsured' = New 'InMotionGIT.Mutual.Contra'...'") 
             _formData.SurchargeDiscountByInsured = New InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsured

        Else 
parametersDictionary("ErrorFound") = ErrorFound
parametersDictionary("index") = index
            currentAction = SessionTrace("12. The message 'Ya existe el Concept...' will displayed as 'Popup'") 
            messageAction = "Ya existe el Concepto Médico, por favor seleccione otro de la lista." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            End If
            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(MedicoEvaluaParameterInstance,"SurchargeDiscountByInsured")
          
        
          If MedicoEvaluaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(MedicoEvaluaParameterInstance.NotifyMessage)
             End If           
            
             MedicoEvaluaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(MedicoEvaluaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   MedicoEvaluaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button13_Click(sender As Object, e As EventArgs)  
        Dim MedicoEvaluaParameterInstance As MedicoEvaluaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button13_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim WorkflowInArguments  As New Dictionary(Of String, Object)
Dim WorkflowOutArguments As IDictionary(Of String, Object)
Dim ProductMasterLocal As InMotionGIT.Product.Entity.Contracts.ProductMaster
Dim Result As System.Boolean
Dim DPSInvestmentFunds As InMotionGIT.Mutual.Questionnaires.DPSInvestmentFunds


        
           
        
           GetCurrentParameterInstance(MedicoEvaluaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
           With parametersDictionary
    .Add("ProductMasterLocal", ProductMasterLocal)
    .Add("Result", Result)
    .Add("DPSInvestmentFunds", DPSInvestmentFunds)
End With
            currentAction = SessionTrace("1. _formData.UnderwritingCase.Stage = 8...") 
 
If IsNothing(_formData.UnderwritingCase) Then
   _formData.UnderwritingCase = New InMotionGIT.Underwriting.Contracts.UnderwritingCase
End If 

 _formData.UnderwritingCase.Stage = 8 

            currentAction = SessionTrace("3. Call Shared Function 'RetrieveDPS' with parameters (underwritingcaseid)") 
            Dim _DPSInvestmentFunds_f8d8bac7c52b4058a002732ab60dc921 As InMotionGIT.Mutual.Questionnaires.DPSInvestmentFunds 
            _DPSInvestmentFunds_f8d8bac7c52b4058a002732ab60dc921 = InMotionGIT.Mutual.Service.MutualManager.RetrieveDPS            (underwritingcaseid:=_formData.CasoID64) 
             
            If Not IsNothing(_DPSInvestmentFunds_f8d8bac7c52b4058a002732ab60dc921) Then 
               DPSInvestmentFunds = _DPSInvestmentFunds_f8d8bac7c52b4058a002732ab60dc921 
            End If 
            isNullResult = (IsNothing(_DPSInvestmentFunds_f8d8bac7c52b4058a002732ab60dc921)) 

            currentAction = SessionTrace("4. Call 'MutualUpdateStage' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("CasoSuscripcion", _formData.UnderwritingCase) 
                .Add("RiskInformation", _formData.RiskInformation) 
                .Add("UserCode", _formData.UserCode32) 
                .Add("StageCaso", 8) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("MutualUpdateStage", "c3df230e-78cd-4b76-b10b-9b37d91b299e", 3, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.UnderwritingCase = WorkflowOutArguments("CasoSuscripcion")

            currentAction = SessionTrace("5. Call Function 'SaveDPS' with parameters (underwritingcaseid, dps, surcharge, notes)") 
            Dim _Result_1d5105049f2f442aa4fa254e8341c3ac As System.Boolean 
            _Result_1d5105049f2f442aa4fa254e8341c3ac = (New InMotionGIT.Mutual.Service.MutualManager).SaveDPS            (underwritingcaseid:=_formData.CasoID64, dps:=DPSInvestmentFunds, surcharge:=_formData.SurchargeDiscountByInsuredCollection, notes:=_formData.NoteCollection) 
             
            If Not IsNothing(_Result_1d5105049f2f442aa4fa254e8341c3ac) Then 
               Result = _Result_1d5105049f2f442aa4fa254e8341c3ac 
            End If 
            isNullResult = (IsNothing(_Result_1d5105049f2f442aa4fa254e8341c3ac)) 

            currentAction = SessionTrace("6. Call Function 'UpdateRequestStatus' with parameters (ProductID, FullProposalID, VirtualStateId, VirtualDepartmentId, PhysicalStateId, PhysicalDepartmentId, userClientID)") 
            Dim _Result_89e361c725d446e1a4e385f34fb01c22 As System.Boolean 
            _Result_89e361c725d446e1a4e385f34fb01c22 = (New InMotionGIT.Mutual.Service.MutualManager).UpdateRequestStatus            (ProductID:=_formData.UnderwritingCase.Product, FullProposalID:=_formData.UnderwritingCase.FullProposalId, VirtualStateId:=9, VirtualDepartmentId:=6, PhysicalStateId:=1, PhysicalDepartmentId:=5, userClientID:=UserInfo.ClientID) 
             
            If Not IsNothing(_Result_89e361c725d446e1a4e385f34fb01c22) Then 
               Result = _Result_89e361c725d446e1a4e385f34fb01c22 
            End If 
            isNullResult = (IsNothing(_Result_89e361c725d446e1a4e385f34fb01c22)) 

parametersDictionary("ProductMasterLocal") = ProductMasterLocal
parametersDictionary("Result") = Result
parametersDictionary("DPSInvestmentFunds") = DPSInvestmentFunds
            currentAction = SessionTrace("7. The message 'Solicitud Pendiente ...' will displayed as 'Splash'") 
            messageAction = "Solicitud Pendiente en Médico" 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            MedicoEvaluaTablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(MedicoEvaluaParameterInstance,"")
          
        
          If MedicoEvaluaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(MedicoEvaluaParameterInstance.NotifyMessage)
             End If           
            
             MedicoEvaluaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(MedicoEvaluaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   MedicoEvaluaUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button14_Click(sender As Object, e As EventArgs)  
        Dim MedicoEvaluaParameterInstance As MedicoEvaluaParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button14_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim WorkflowInArguments  As New Dictionary(Of String, Object)
Dim WorkflowOutArguments As IDictionary(Of String, Object)
Dim Result As System.Boolean
Dim DPSInvestmentFunds As InMotionGIT.Mutual.Questionnaires.DPSInvestmentFunds


        
           
        
           GetCurrentParameterInstance(MedicoEvaluaParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
           With parametersDictionary
    .Add("Result", Result)
    .Add("DPSInvestmentFunds", DPSInvestmentFunds)
End With
            currentAction = SessionTrace("1. _formData.UnderwritingCase.Stage = 9...") 
 
If IsNothing(_formData.UnderwritingCase) Then
   _formData.UnderwritingCase = New InMotionGIT.Underwriting.Contracts.UnderwritingCase
End If 

 _formData.UnderwritingCase.Stage = 9 

 _formData.UserCode32 = Session("nUserCode") 

            currentAction = SessionTrace("2. Call Shared Function 'RetrieveDPS' with parameters (underwritingcaseid)") 
            Dim _DPSInvestmentFunds_5d4a3a4ac15e465589edcf76f8ccc677 As InMotionGIT.Mutual.Questionnaires.DPSInvestmentFunds 
            _DPSInvestmentFunds_5d4a3a4ac15e465589edcf76f8ccc677 = InMotionGIT.Mutual.Service.MutualManager.RetrieveDPS            (underwritingcaseid:=_formData.CasoID64) 
             
            If Not IsNothing(_DPSInvestmentFunds_5d4a3a4ac15e465589edcf76f8ccc677) Then 
               DPSInvestmentFunds = _DPSInvestmentFunds_5d4a3a4ac15e465589edcf76f8ccc677 
            End If 
            isNullResult = (IsNothing(_DPSInvestmentFunds_5d4a3a4ac15e465589edcf76f8ccc677)) 

            currentAction = SessionTrace("3. Call Function 'SaveDPS' with parameters (underwritingcaseid, dps, surcharge, notes)") 
            Dim _Result_1f26a14a0f4047428b85423de5f5568a As System.Boolean 
            _Result_1f26a14a0f4047428b85423de5f5568a = (New InMotionGIT.Mutual.Service.MutualManager).SaveDPS            (underwritingcaseid:=_formData.CasoID64, dps:=DPSInvestmentFunds, surcharge:=_formData.SurchargeDiscountByInsuredCollection, notes:=_formData.NoteCollection) 
             
            If Not IsNothing(_Result_1f26a14a0f4047428b85423de5f5568a) Then 
               Result = _Result_1f26a14a0f4047428b85423de5f5568a 
            End If 
            isNullResult = (IsNothing(_Result_1f26a14a0f4047428b85423de5f5568a)) 

            currentAction = SessionTrace("4. Call Function 'ConvertMedicalSurcharge' with parameters (riskInformation, surcharges, underwritingcaseid)") 
            Dim _RiskInformation_556c54241b8d4f2da54110885aa77c31 As InMotionGIT.Policy.Entity.Contracts.RiskInformation 
            _RiskInformation_556c54241b8d4f2da54110885aa77c31 = (New InMotionGIT.Mutual.Service.MutualManager).ConvertMedicalSurcharge            (riskInformation:=_formData.RiskInformation, surcharges:=_formData.SurchargeDiscountByInsuredCollection, underwritingcaseid:=_formData.UnderwritingCase.UnderwritingCaseID) 
             
            If Not IsNothing(_RiskInformation_556c54241b8d4f2da54110885aa77c31) Then 
               _formData.RiskInformation = _RiskInformation_556c54241b8d4f2da54110885aa77c31 
            End If 
            isNullResult = (IsNothing(_RiskInformation_556c54241b8d4f2da54110885aa77c31)) 

            currentAction = SessionTrace("5. Call 'MUTUALSyncronizePolicy' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("UserCode", _formData.UserCode32) 
                .Add("RiskInformation", _formData.RiskInformation) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("MutualSyncronizePolicy", "2ad1180a-580b-4e4f-8616-6a9a6e99715a", 0, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 

            currentAction = SessionTrace("6. Call 'MutualUpdateStage' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("CasoSuscripcion", _formData.UnderwritingCase) 
                .Add("RiskInformation", _formData.RiskInformation) 
                .Add("UserCode", _formData.UserCode32) 
                .Add("StageCaso", 9) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("MutualUpdateStage", "c3df230e-78cd-4b76-b10b-9b37d91b299e", 3, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.UnderwritingCase = WorkflowOutArguments("CasoSuscripcion")

            currentAction = SessionTrace("7. Call Function 'UpdateRequestStatus' with parameters (ProductID, FullProposalID, VirtualStateId, VirtualDepartmentId, PhysicalStateId, PhysicalDepartmentId, userClientID)") 
            Dim _Result_1f530ffef914469fb90091c34f338e1f As System.Boolean 
            _Result_1f530ffef914469fb90091c34f338e1f = (New InMotionGIT.Mutual.Service.MutualManager).UpdateRequestStatus            (ProductID:=_formData.UnderwritingCase.Product, FullProposalID:=_formData.UnderwritingCase.FullProposalId, VirtualStateId:=5, VirtualDepartmentId:=5, PhysicalStateId:=1, PhysicalDepartmentId:=5, userClientID:=UserInfo.ClientID) 
             
            If Not IsNothing(_Result_1f530ffef914469fb90091c34f338e1f) Then 
               Result = _Result_1f530ffef914469fb90091c34f338e1f 
            End If 
            isNullResult = (IsNothing(_Result_1f530ffef914469fb90091c34f338e1f)) 

parametersDictionary("Result") = Result
parametersDictionary("DPSInvestmentFunds") = DPSInvestmentFunds
            currentAction = SessionTrace("8. The message 'La Solicitud ha sido...' will displayed as 'Splash'") 
            messageAction = "La Solicitud ha sido aprobada y enviada a Suscripción" 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            MedicoEvaluaTablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(MedicoEvaluaParameterInstance,"")
          
        
          If MedicoEvaluaParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(MedicoEvaluaParameterInstance.NotifyMessage)
             End If           
            
             MedicoEvaluaParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(MedicoEvaluaParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(MedicoEvaluaParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   MedicoEvaluaUpdatePanel.Update
      End Try         
    End Sub


#End Region

#Region "UserControls Events Handles"

    



#End Region

#Region "Form Manager"

    Private Sub VerifySecurityLevel()
















    End Sub

      

    Private Sub GetCurrentParameterInstance(ByRef MedicoEvaluaParameterInstance As MedicoEvaluaParameter, force As Boolean)
        If _loadcompleted Or force Then
            If Not _CurrentParameterInstance Then

                MedicoEvaluaParameterInstance = FormData

                If Page.IsPostBack Then
                    MapPageToClass(MedicoEvaluaParameterInstance)
                End If

                _CurrentParameterInstance = True
            Else
                MedicoEvaluaParameterInstance = _formData
            End If
        Else
            MedicoEvaluaParameterInstance = Nothing
        End If
    End Sub

    Protected Sub SetCurrentParameterInstance(ByRef MedicoEvaluaParameterInstance As MedicoEvaluaParameter, calledBy As String)
        FormData = MedicoEvaluaParameterInstance
        MapClassToPage(MedicoEvaluaParameterInstance,calledBy)
    End Sub

    Protected Sub SetErrors(errors As InMotionGIT.Common.Contracts.Errors.ErrorCollection)
        Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

        If IsNothing(errorList) Then
            errorList = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
        End If

        errorList = errors

        ViewState("Errors") = errorList
        ShowErrors()
    End Sub

    Public Sub ShowErrors()
        If Not IsNothing(ViewState("Errors")) Then
            Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

            Dim queryOut = From lst In errorList Select lst Order By lst.ErrorId

            ErrorsGridView.Visible = True
            ErrorsGridView.DataSource = queryOut.ToList
            ErrorsGridView.DataBind()
            UpdatePanelErrors.Update()
        End If
    End Sub
   
    Private Sub ShowWindowPopupMessage(message As String)
        NotifyMessageLabel.Text = message
        popupNotifyMessage.ShowOnPageLoad = True
    End Sub

    Private Sub ClosePopupWindow()
        popControl.Windows(0).ShowOnPageLoad = False
    End Sub

    Private Sub GetTransferParameters()
        Dim fromDocumentCache As Object = Nothing

        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) Then
            fromDocumentCache = Session( Request.QueryString("fromid"))
            Session.Remove(Request.QueryString("fromid"))
            
        Else
            fromDocumentCache = Session(Session("fromid"))
            Session.Remove(Session("fromid"))
            Session.Remove("fromid")   
        End If
        
        If Not IsNothing(fromDocumentCache) Then
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UnderwritingCase", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CasoID64", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UserCode32", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QuestionAndAnswerCollection", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("SurchargeDiscountByInsuredCollection", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("NoteCollection", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Note", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("SurchargeDiscountByInsured", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RolesLookUp", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("NoteAction", fromDocumentCache, _formData)
            
        End If
    End Sub
    
    

    Private Sub SetDefaultValuesFromQueryString()

        If Request.Form("CasoID64").IsNotEmpty Then
                FormData.CasoID64 = Request.Form("CasoID64") 

ElseIf Request.QueryString("CasoID64").IsNotEmpty Then
                FormData.CasoID64 = Request.QueryString("CasoID64") 
End If 

If Request.Form("UserCode32").IsNotEmpty Then
                FormData.UserCode32 = Request.Form("UserCode32") 

ElseIf Request.QueryString("UserCode32").IsNotEmpty Then
                FormData.UserCode32 = Request.QueryString("UserCode32") 
End If 

If Request.Form("NoteAction").IsNotEmpty Then
                FormData.NoteAction = Request.Form("NoteAction") 

ElseIf Request.QueryString("NoteAction").IsNotEmpty Then
                FormData.NoteAction = Request.QueryString("NoteAction") 
End If 


    End Sub
    
    Private Sub BehaviorControls(controlItem As Control, isEnable As Boolean)
        InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValueSimple("Enabled", controlItem, isEnable)           
    End Sub
    
    Private Sub SetReadOnlyControls()
    
        BehaviorControls(ProductCode, False)
        BehaviorControls(FullProposalId, False)
        BehaviorControls(LineOfBusiness, False)
        BehaviorControls(CompleteClientName, False)
        BehaviorControls(Gender, False)
        BehaviorControls(Age, False)
        BehaviorControls(Height, False)
        BehaviorControls(Weight, False)
        BehaviorControls(Country, False)
        BehaviorControls(StateOrProvince, False)
        BehaviorControls(CityCode, False)
        BehaviorControls(MunicipalityCode, False)
        BehaviorControls(QuestionAndAnswer, False)
        BehaviorControls(Note, False)
        BehaviorControls(NoteID, False)
        BehaviorControls(btnAgregar, False)
        BehaviorControls(btnEditar, False)
        BehaviorControls(btnEliminar, False)
        BehaviorControls(DescriptionNote, False)
        BehaviorControls(UpdateTimeStamp, False)
        BehaviorControls(FreeText, False)
        BehaviorControls(button2, False)
        BehaviorControls(button3, False)
        BehaviorControls(IdAddEdit, False)
        BehaviorControls(ComponentAddEdit, False)
        BehaviorControls(PercentageSingle, False)
        BehaviorControls(btnAplicar, False)
        BehaviorControls(SurchargeDiscountByInsured, False)
        BehaviorControls(button13, False)
        BehaviorControls(button14, False)
        BehaviorControls(cerrar, False)
    
    End Sub
     
#End Region

#Region "Actions Data Methods"

    Private Function SessionTrace(message As String) As String

        If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
            Dim tracelog As String = Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath)))

            tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
            Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = tracelog
        End If

        Return message
    End Function
    
    Private Sub ControlsInitialization()
        QuestionAndAnswer.ClientVisible = True
        QuestionAndAnswer.Enabled = True
        Note.ClientVisible = True
        Note.Enabled = True
        SurchargeDiscountByInsured.ClientVisible = True
        SurchargeDiscountByInsured.Enabled = True

    End Sub     
  
    Private Sub ParametersToDictionary(ByRef target As Dictionary(Of String, Object))
        If IsNothing(target) Then
            target = New Dictionary(Of String, Object)

            target.Add("RiskInformation", _formData.RiskInformation) 
            target.Add("UnderwritingCase", _formData.UnderwritingCase) 
            target.Add("CasoID64", _formData.CasoID64) 
            target.Add("UserCode32", _formData.UserCode32) 
            target.Add("QuestionAndAnswerCollection", _formData.QuestionAndAnswerCollection) 
            target.Add("SurchargeDiscountByInsuredCollection", _formData.SurchargeDiscountByInsuredCollection) 
            target.Add("NoteCollection", _formData.NoteCollection) 
            target.Add("Note", _formData.Note) 
            target.Add("SurchargeDiscountByInsured", _formData.SurchargeDiscountByInsured) 
            target.Add("RolesLookUp", _formData.RolesLookUp) 
            target.Add("NoteAction", _formData.NoteAction) 

        Else
            target("RiskInformation") = _formData.RiskInformation 
            target("UnderwritingCase") = _formData.UnderwritingCase 
            target("CasoID64") = _formData.CasoID64 
            target("UserCode32") = _formData.UserCode32 
            target("QuestionAndAnswerCollection") = _formData.QuestionAndAnswerCollection 
            target("SurchargeDiscountByInsuredCollection") = _formData.SurchargeDiscountByInsuredCollection 
            target("NoteCollection") = _formData.NoteCollection 
            target("Note") = _formData.Note 
            target("SurchargeDiscountByInsured") = _formData.SurchargeDiscountByInsured 
            target("RolesLookUp") = _formData.RolesLookUp 
            target("NoteAction") = _formData.NoteAction 

        End If     
    End Sub
    
    
    Private Sub ExecuteActionsInitializationForm()
                    Dim currentAction As String = SessionTrace("ActionsInitializationForm")
                    
                    Try                          
                        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)                          
                        Dim messageAction As String = String.Empty
                        Dim lastURL As String = String.Empty
                        Dim isNullResult As Boolean = True 
                        Dim isFoundData As Boolean  = False 
                        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
                        
                        ParametersToDictionary(parametersDictionary)
                        Dim DPSInvestmentFunds As InMotionGIT.Mutual.Questionnaires.DPSInvestmentFunds
Dim RolLookUp As InMotionGIT.Common.DataType.LookUpValue
Dim effectiveDate As System.DateTime
Dim FullProposalID64 As System.Int64
Dim Index As System.Int32
 
                        With parametersDictionary
    .Add("DPSInvestmentFunds", DPSInvestmentFunds)
    .Add("RolLookUp", RolLookUp)
    .Add("effectiveDate", effectiveDate)
    .Add("FullProposalID64", FullProposalID64)
    .Add("Index", Index)
End With

                                    currentAction = SessionTrace("1. 'RolLookUp' = New 'InMotionGIT.Common.DataTy'...'") 
             RolLookUp = New InMotionGIT.Common.DataType.LookUpValue

            currentAction = SessionTrace("2. '_formData.RolesLookUp' = New 'InMotionGIT.Common.DataTy'...'") 
             _formData.RolesLookUp = New InMotionGIT.Common.DataType.LookUpValueCollection

            currentAction = SessionTrace("3. _formData.UserCode32 = Session('nUserCode')...") 
 

 _formData.UserCode32 = Session("nUserCode") 

 Index = 0 

            currentAction = SessionTrace("4. If _formData.CasoID64 Not Is Null Or Not Empty  AND _formData.CasoID64 <> 0 Then") 
        If Not IsNothing(_formData.CasoID64) AndAlso _formData.CasoID64 <> 0 Then 

            currentAction = SessionTrace("4. Call Shared Function 'Retrieve Underwriting Case' with parameters (Case ID, Effective Date)") 
            Dim _UnderwritingCase_94f7b0f4eff54fca869f1b75880a27a0 As InMotionGIT.Underwriting.Contracts.UnderwritingCase 
            _UnderwritingCase_94f7b0f4eff54fca869f1b75880a27a0 = InMotionGIT.Underwriting.Proxy.Manager.Retrieve            (underwritingCaseID:=_formData.CasoID64, atDate:=Date.Today) 
             
            _formData.UnderwritingCase = _UnderwritingCase_94f7b0f4eff54fca869f1b75880a27a0 
            isNullResult = (IsNothing(_UnderwritingCase_94f7b0f4eff54fca869f1b75880a27a0)) 

            currentAction = SessionTrace("5. {FullProposalID64} = CLng(_formData.UnderwritingCase.Ful...") 
 

 FullProposalID64 = CLng(_formData.UnderwritingCase.FullProposalId) 
If IsNothing(_formData.RiskInformation) Then
   _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
End If 

 _formData.RiskInformation = _formData.UnderwritingCase.RiskInformation 

            currentAction = SessionTrace("8. Call Shared Function 'RetrieveSurcharge' with parameters (underwritingcaseid)") 
            Dim _SurchargeDiscountByInsuredCollection_37612e45a4754eb9abb614c29a958b8c As InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsuredCollection 
            _SurchargeDiscountByInsuredCollection_37612e45a4754eb9abb614c29a958b8c = InMotionGIT.Mutual.Service.MutualManager.RetrieveSurcharge            (underwritingcaseid:=_formData.CasoID64) 
             
            If Not IsNothing(_SurchargeDiscountByInsuredCollection_37612e45a4754eb9abb614c29a958b8c) Then 
               _formData.SurchargeDiscountByInsuredCollection = _SurchargeDiscountByInsuredCollection_37612e45a4754eb9abb614c29a958b8c 
            End If 
            isNullResult = (IsNothing(_SurchargeDiscountByInsuredCollection_37612e45a4754eb9abb614c29a958b8c)) 

            currentAction = SessionTrace("9. Call Shared Function 'RetrieveMedicalNotes' with parameters (underwritingcaseid)") 
            Dim _NoteCollection_c53658557c604d6b98352f95da95e073 As InMotionGIT.General.Entity.Contracts.Notes.NoteCollection 
            _NoteCollection_c53658557c604d6b98352f95da95e073 = InMotionGIT.Mutual.Service.MutualManager.RetrieveMedicalNotes            (underwritingcaseid:=_formData.CasoID64) 
             
            If Not IsNothing(_NoteCollection_c53658557c604d6b98352f95da95e073) Then 
               _formData.NoteCollection = _NoteCollection_c53658557c604d6b98352f95da95e073 
            End If 
            isNullResult = (IsNothing(_NoteCollection_c53658557c604d6b98352f95da95e073)) 

            currentAction = SessionTrace("10. Call Shared Function 'RetrieveDPS' with parameters (underwritingcaseid)") 
            Dim _DPSInvestmentFunds_b80875a1832b48f889a2cab4edb66d27 As InMotionGIT.Mutual.Questionnaires.DPSInvestmentFunds 
            _DPSInvestmentFunds_b80875a1832b48f889a2cab4edb66d27 = InMotionGIT.Mutual.Service.MutualManager.RetrieveDPS            (underwritingcaseid:=_formData.CasoID64) 
             
            If Not IsNothing(_DPSInvestmentFunds_b80875a1832b48f889a2cab4edb66d27) Then 
               DPSInvestmentFunds = _DPSInvestmentFunds_b80875a1832b48f889a2cab4edb66d27 
            End If 
            isNullResult = (IsNothing(_DPSInvestmentFunds_b80875a1832b48f889a2cab4edb66d27)) 

            currentAction = SessionTrace("11. Call Function 'GetCUIDPSPositiveAnswers' with parameters (dps)") 
            Dim _QuestionAndAnswerCollection_637076231159497eb73a83e142765a83 As InMotionGIT.Mutual.Contracts.QuestionAndAnswerCollection 
            _QuestionAndAnswerCollection_637076231159497eb73a83e142765a83 = (New InMotionGIT.Mutual.Service.MutualManager).GetCUIDPSPositiveAnswers            (dps:=DPSInvestmentFunds) 
             
            If Not IsNothing(_QuestionAndAnswerCollection_637076231159497eb73a83e142765a83) Then 
               _formData.QuestionAndAnswerCollection = _QuestionAndAnswerCollection_637076231159497eb73a83e142765a83 
            End If 
            isNullResult = (IsNothing(_QuestionAndAnswerCollection_637076231159497eb73a83e142765a83)) 

            currentAction = SessionTrace("12. For Each noteItem As 'InMotionGIT.General.Entit...' In '_formData.NoteCollection...'") 
            For Each noteItem As InMotionGIT.General.Entity.Contracts.Notes.Note In _formData.NoteCollection 
                If Not parametersDictionary.ExistsProperty("noteItem") Then 
                    parametersDictionary("noteItem") = noteItem 
                End If 

            currentAction = SessionTrace("12. If {Index} = 0 Then") 
        If Index = 0 Then 

            currentAction = SessionTrace("12. _formData.Note = noteItem...") 
 
If IsNothing(_formData.Note) Then
   _formData.Note = New InMotionGIT.General.Entity.Contracts.Notes.Note
End If 

 _formData.Note = noteItem 

            currentAction = SessionTrace("13. NoteAddEdit.Visible = True, 13. zone1.Visible = True, 13. NoteAddEdit.Enabled = False...") 
BehaviorShowControls("NoteAddEdit,Visible")
BehaviorShowControls("zone1,Visible")
BehaviorShowControls("NoteAddEdit,Disabled")
BehaviorShowControls("zone1,Disabled")

            End If
            currentAction = SessionTrace("15. {Index} = Index + 1...") 
 

 Index = Index + 1 

            Next
            currentAction = SessionTrace("17. For Each roleItem As 'InMotionGIT.Policy.Entity...' In '_formData.RiskInformation...'") 
            For Each roleItem As InMotionGIT.Policy.Entity.Contracts.Role In _formData.RiskInformation.Roles 
                If Not parametersDictionary.ExistsProperty("roleItem") Then 
                    parametersDictionary("roleItem") = roleItem 
                End If 

            currentAction = SessionTrace("17. If ClientRole = 2 Then") 
        If roleItem.ClientRole = 2 Then 

            currentAction = SessionTrace("17. RolLookUp.Code = roleItem.ClientID...") 
 

 RolLookUp.Code = roleItem.ClientID 

            currentAction = SessionTrace("18. RolLookUp.Description = roleItem.Client.ClientIDFormated & ...") 
 

 RolLookUp.Description = roleItem.Client.ClientIDFormated & "   " & roleItem.Client.CompleteClientName 

            currentAction = SessionTrace("19. '_formData.RolesLookUp'.Add('RolLookUp')") 
             _formData.RolesLookUp.Add(RolLookUp)

            End If
            Next
            End If

                        
                        currentAction = String.Empty
                         
                    Catch ex As Exception
                        InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
						_formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

                        If Request.QueryString("debug").IsNotEmpty Then
                            FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                            FormMessageLabel.ForeColor = Drawing.Color.Black
                            FormMessageLabel.Font.Bold = True
                            MessageTable.Visible = True
                        End If
                        
                    Finally                     
                        If _formData.Errors.Count > 0 Then
                            SetErrors(_formData.Errors)
                        End If
                        
                        If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                            If Page.IsCallback Then
                                DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                            Else
                                Response.ClearHeaders()
                                Response.ClearContent()
                                Response.Redirect(_webTransfer)
                            End If
                        End If
                   End Try
               End Sub
    



    
#End Region






End Class

<Serializable()>
Public Class MedicoEvaluaParameter
    Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of  MedicoEvaluaParameter)

    ' Methods
    Public Sub New()
        MyBase.New()
    End Sub

    ' Properties
    Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
    Public Property UnderwritingCase As InMotionGIT.Underwriting.Contracts.UnderwritingCase
    Public Property CasoID64 As Int64
    Public Property UserCode32 As Int32
    Public Property QuestionAndAnswerCollection As InMotionGIT.Mutual.Contracts.QuestionAndAnswerCollection
    Public Property SurchargeDiscountByInsuredCollection As InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsuredCollection
    Public Property NoteCollection As InMotionGIT.General.Entity.Contracts.Notes.NoteCollection
    Public Property Note As InMotionGIT.General.Entity.Contracts.Notes.Note
    Public Property SurchargeDiscountByInsured As InMotionGIT.Mutual.Contracts.SurchargeDiscountByInsured
    Public Property RolesLookUp As InMotionGIT.Common.DataType.LookUpValueCollection
    Public Property NoteAction As String


End Class