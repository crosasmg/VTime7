'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer Oracle v7.1.2 at 2019/04/12 model release 2
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"
    
Imports Artem.Google.UI
Imports DashboardBusiness.Helpers
Imports DevExpress.Web
Imports DevExpress.Web.ASPxClasses
Imports DevExpress.Web.ASPxEditors
Imports DevExpress.Web.ASPxGridView
Imports GIT.Core
Imports InMotionGIT.FrontOffice.Support.Enumerations
Imports InMotionGIT.FrontOffice.Support.Helpers.ControlHandler
Imports InMotionGIT.BarCode
Imports InMotionGIT.BarCode.Enumerations
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo
Imports System.IO
Imports InMotionGIT.FrontOffice.Support
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data
Imports System.Data.Common
Imports System.Globalization
Imports System.Linq
Imports System.Threading.Thread
Imports System.Xml.Linq
Imports System.Net


#End Region

Partial Public Class OnLineServiceUnderwriterIIUserControl
    Inherits GIT.Core.UserControlBase
    Implements Dropthings.Widget.Framework.IWidget

#Region "IWidget Members"
    
    
    

    Public Sub Closed() Implements Dropthings.Widget.Framework.IWidget.Closed
    End Sub

    Public Sub HideSettings() Implements Dropthings.Widget.Framework.IWidget.HideSettings

    End Sub

    Public Sub Init1(host As Dropthings.Widget.Framework.IWidgetHost) Implements Dropthings.Widget.Framework.IWidget.Init

    End Sub

    Public Sub Maximized() Implements Dropthings.Widget.Framework.IWidget.Maximized

    End Sub

    Public Sub Minimized() Implements Dropthings.Widget.Framework.IWidget.Minimized

    End Sub

    Public Sub ShowSettings() Implements Dropthings.Widget.Framework.IWidget.ShowSettings

    End Sub

#End Region

#Region "Private fields"

    Private _formData As OnLineServiceUnderwriterIIParameter = Nothing
    Private _CurrentParameterInstance As Boolean = False
    Private _loading As Boolean = False
    Private _loadcompleted As Boolean = False
    Private _webTransfer as String  
    
    Private _UnderwritingCaseList As InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection = Nothing
    
#End Region

#Region "Public properties"

    Public Property FormData() As OnLineServiceUnderwriterIIParameter
        Get
            Dim formDefinition As String = String.Empty               
             
            If IsNothing(_formData) Then
                If Not IsPostBack Then
                    If Not String.IsNullOrEmpty(Request.QueryString("id")) Then
                        Dim _id As Guid
                        
                        If Guid.TryParse(Request.QueryString("id"), _id) Then
		                        _FormID.Text = Request.QueryString("id")  
                            
                            formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
           If Not String.IsNullOrEmpty(formDefinition) Then
              _formData = Serialize.Deserialize(Of OnLineServiceUnderwriterIIParameter)(formDefinition)
           End If
                        End If
                    End If

                    If IsNothing(_formData) Then
                        _formData = New OnLineServiceUnderwriterIIParameter
                       
                        If String.IsNullOrEmpty(_FormID.Text) Then
                        	_FormID.Text = System.Guid.NewGuid().ToString                       
                        End If
											
                        _formData.InternalId = _FormID.Text
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) OrElse
                           Not String.IsNullOrEmpty(Session("fromid")) Then
                           
                            GetTransferParameters()
                        End If
                        
                        
                        
                        SetDefaultValuesFromQueryString()
                        ValidateParametersInstance(_formData)
                        
                        popupNotifyMessage.ShowOnPageLoad = false                        
                        
                        ControlsInitialization()
                        ExecuteActionsInitializationForm()
                         
                        If Not String.IsNullOrEmpty(Request.QueryString("readonly")) Then
                            SetReadOnlyControls()
                        End If
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("button4")) Then
                            button4_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button7")) Then
                            button7_Click(nothing, nothing)
                        End If

                    Else
                    		SetDefaultValuesFromQueryString()
                        
                    End If

                Else
                     formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
           If Not String.IsNullOrEmpty(formDefinition) Then
              _formData = Serialize.Deserialize(Of OnLineServiceUnderwriterIIParameter)(formDefinition)
           End If                    

                    If IsNothing(_formData) Then
                        _formData = New OnLineServiceUnderwriterIIParameter
                    End If
                End If
            End If

            Return _formData
        End Get

        Set(value As OnLineServiceUnderwriterIIParameter)
            _formData = value
        End Set
    End Property
    
#End Region

#Region "Form Events"

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        ErrorsGridView.Visible = False
        
        If ConfigurationManager.AppSettings("ActivateFASIKey") Then
            If Not InMotionGIT.FrontOffice.Proxy.Helpers.RoleManager.ValidateAccess(UserInfo, "Suscriptor") AndAlso
              (Request.QueryString.IsEmpty OrElse Request.QueryString("Key").IsEmpty OrElse Not KeyValidator.KeyValidator(Request.QueryString("Key"))) Then

                Response.Redirect(String.Format(CultureInfo.InvariantCulture, "~/dropthings/Error.aspx?id={0}", GetGlobalResourceObject("Resource", "DeniedAccess")))
            End If

        Else
            If Not InMotionGIT.FrontOffice.Proxy.Helpers.RoleManager.ValidateAccess(UserInfo, "Suscriptor") Then
                Response.Redirect(String.Format(CultureInfo.InvariantCulture, "~/dropthings/Error.aspx?id={0}", GetGlobalResourceObject("Resource", "DeniedAccess")))
            End If
        End If
        
        Dim formData As OnLineServiceUnderwriterIIParameter = Me.FormData        
           
        If Not IsPostBack  AndAlso Not GridViewPostBack() Then                     
            
            
            _loadcompleted = True
            
            
            If IsPostBack And Not _CurrentParameterInstance Then
                MapPageToClass(formData)
                _CurrentParameterInstance = True
            End If

            MapClassToPage(formData)
            VerifySecurityLevel()
            
            
        Else
            
            
            
        End If        
        
        
        
        
    End Sub    

    Protected Sub Page_Unload(sender As Object, e As EventArgs) Handles Me.Unload        
        If Not IsNothing(_formData) Then  
                       Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text)) = Serialize.Serialize(Of OnLineServiceUnderwriterIIParameter)(_formData)
                       Session(String.Format(CultureInfo.InvariantCulture, "FormTitle.{0}", _FormID.Text)) = Page.Title
        End If 
        
        If Not IsNothing(_formData) Then
             If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
                 Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = _formData
             End If   
       
             If Not IsNothing(Session("Form.Track.Parameters")) AndAlso Session("Form.Track.Parameters").ToString.ToLower = "true" Then
                  InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of OnLineServiceUnderwriterIIParameter) _
                  (formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.OnLineServiceUnderwriterII.xml",  ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
             End If        
        End If  
   End Sub

#End Region

#Region "Controls Events"


    Private Function GridViewPostBack() As Boolean
        For index As Integer = 0 To Request.Params.Count - 1
            If Request.Params(index).EndsWith("$UnderwritingCase")  Then
                Return True
            End If
        Next
        
        Return False
    End Function    
        
    
    
#End Region


#Region "PopupMenu Events"

    
    
#End Region

#Region "Mapping methods"

    Public Sub ValidateParametersInstance(ByRef OnLineServiceUnderwriterIIParameterInstance As OnLineServiceUnderwriterIIParameter)
   
    End Sub
    
    ''' <summary>
    ''' This method moves the data from the class to the page
    ''' </summary>
    ''' <param name="OnLineServiceUnderwriterIIParameterInstance"></param>
    ''' <remarks></remarks>
    Public Sub MapClassToPage(ByRef OnLineServiceUnderwriterIIParameterInstance As OnLineServiceUnderwriterIIParameter, Optional calledBy As String = "")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
        ValidateParametersInstance(OnLineServiceUnderwriterIIParameterInstance)

        ActionType.DataBind()
CaseToQuery.DataBind()

       
        With OnLineServiceUnderwriterIIParameterInstance
                      If IsNothing(.UnderwritingCaseCollection) Then
                .UnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection()
            End If

CaseToQuery.DataSource = .UnderwritingCaseCollection 
CaseToQuery.DataBind()

                      ActionType.SelectedItem = ActionType.Items.FindByValue(.ActionType)
            If .StartDate.IsNotEmpty Then
                StartDate.Value = .StartDate
            Else
                StartDate.Value = Nothing
                
            End If
            If .EndDate.IsNotEmpty Then
                EndDate.Value = .EndDate
            Else
                EndDate.Value = Nothing
                
            End If
            CaseToQuery.SelectedItem = CaseToQuery.Items.FindByValue(.CaseToQuery)

                      If IsNothing(.UnderwritingCaseCollection) Then
                .UnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection()
            End If

            _UnderwritingCaseList = .UnderwritingCaseCollection
            UnderwritingCase.DataSource = _UnderwritingCaseList
            UnderwritingCase.DataBind()
    
                  
           
 
          
               
            
            
       End With


if (Not ("UnderwritingCase".IndexOf(calledBy) > -1)) Or String.IsNullOrEmpty(calledBy) then        
            
         

        End If          
    End Sub

    ''' <summary>
    ''' This method moves the data from the page to the class
    ''' </summary>
    ''' <param name="OnLineServiceUnderwriterIIParameterInstance"></param>
    Public Sub MapPageToClass(ByRef OnLineServiceUnderwriterIIParameterInstance As OnLineServiceUnderwriterIIParameter)
        _loading = True

        ValidateParametersInstance(OnLineServiceUnderwriterIIParameterInstance)

        With OnLineServiceUnderwriterIIParameterInstance
            .ActionType = ActionType.Value
            .StartDate = StartDate.Value
            .EndDate = EndDate.Value
            .CaseToQuery = CaseToQuery.Value


        'GetViewStateUnderwritingCaseList()
        '.UnderwritingCaseCollection = _UnderwritingCaseList
        '.UnderwritingCaseCollection.CurrentIndex= UnderwritingCase.EditIndex
        'ViewState.Remove("UnderwritingCaseList")



        End With




        _loading = False
    End Sub

#End Region

#Region "UnderwritingCase GridView Controls with dependencies Events"
    
    Private Sub Product_OnCallback(source As Object, e As CallbackEventArgsBase)
        Product_Fill(DirectCast(source, ASPxComboBox),  e.Parameter.Split(",")(0))
    End Sub

    Private Sub Product_Fill(control As ASPxComboBox, NBRANCH As Integer)
        
        With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                  "SELECT  PRODMASTER.NPRODUCT, PRODMASTER.NBRANCH, PRODMASTER.SDESCRIPT FROM PRODMASTER PRODMASTER  WHERE PRODMASTER.SSTATREGT = '{0}'  AND (PRODMASTER.NBRANCH = @:PRODMASTERNBRANCHDependen)  ORDER BY PRODMASTER.SDESCRIPT ASC", "1"), "PRODMASTER", "Linked.LatCombined")                                       
            .AddParameter("PRODMASTERNBRANCHDependen", DbType.Int32, 0, False, NBRANCH)

            
            control.DataSource = .QueryExecuteToTable(True)
            control.DataBindItems()
        End With 
        
    End Sub


#End Region

#Region "UnderwritingCase GridView editing support"    

    Protected Sub UnderwritingCase_DataBinding(sender As Object, e As EventArgs) Handles UnderwritingCase.DataBinding
         
With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                     "SELECT  TABLE10.NBRANCH, TABLE10.SDESCRIPT FROM TABLE10 TABLE10  WHERE  ( TABLE10.SSTATREGT = '{0}' )   AND NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", "1"), "TABLE10", "Linked.LatCombined")
        
       .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters			
       DirectCast(UnderwritingCase.Columns("LineOfBusiness"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
End With
            With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
                                                                 "SELECT  PRODMASTER.NPRODUCT, PRODMASTER.NBRANCH, PRODMASTER.SDESCRIPT FROM PRODMASTER PRODMASTER  WHERE PRODMASTER.SSTATREGT = '{0}'   ORDER BY PRODMASTER.SDESCRIPT ASC", "1"), "PRODMASTER", "Linked.LatCombined")
                        
                    
                    DirectCast(UnderwritingCase.Columns("Product"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
            End With    
With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                     "SELECT  TRANSDECISIONTYPE.DECISION, TRANSDECISIONTYPE.LANGUAGEID, TRANSDECISIONTYPE.DESCRIPTION FROM TRANSDECISIONTYPE TRANSDECISIONTYPE  WHERE  TRANSDECISIONTYPE.LANGUAGEID = {0}  ORDER BY TransDecisionType.Description ASC", LanguageHelper.CurrentCultureToLanguage), "TransDecisionType", "Linked.Underwriting")
        
       .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters			
       DirectCast(UnderwritingCase.Columns("Decision"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
End With
With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                     "SELECT  TRANSUNDERWRITINGCASESTYPE.UNDERWRITINGCASESTATUS, TRANSUNDERWRITINGCASESTYPE.LANGUAGEID, TRANSUNDERWRITINGCASESTYPE.DESCRIPTION FROM TRANSUNDERWRITINGCASESTYPE TRANSUNDERWRITINGCASESTYPE    ORDER BY TransUnderwritingCaseSType.Description ASC", ""), "TransUnderwritingCaseSType", "Linked.Underwriting")
        
       .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters			
       DirectCast(UnderwritingCase.Columns("Status"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
End With
 
            If IsNothing(FormData.UnderwritingCaseCollection) Then
                FormData.UnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection()
            End If

        _UnderwritingCaseList = FormData.UnderwritingCaseCollection
        UnderwritingCase.DataSource = _UnderwritingCaseList
              
    End Sub
    
    Protected Sub UnderwritingCase_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles UnderwritingCase.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
            Case "Product"                
                data = DirectCast(UnderwritingCase.Columns("Product"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource 
                
                rows = data.Select(String.Format(CultureInfo.InvariantCulture, "NBRANCH = {0} AND NPRODUCT = {1}",  e.GetFieldValue("LineOfBusiness"), e.Value))

                If rows.Count > 0 Then
                    e.DisplayText = rows(0)("SDESCRIPT")
                End If
      
            Case Else
          End Select
    End Sub 
    
    Private Sub SetUnderwritingCaseListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As OnLineServiceUnderwriterIIParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.UnderwritingCaseCollection = _UnderwritingCaseList
        UnderwritingCase.DataSource = _UnderwritingCaseList
        UnderwritingCase.DataBind()
    End Sub
   
    Private Sub GetViewStateUnderwritingCaseList()
        Dim FormData As OnLineServiceUnderwriterIIParameter

         GetCurrentParameterInstance(FormData, True)

        _UnderwritingCaseList = FormData.UnderwritingCaseCollection

        If IsNothing(_UnderwritingCaseList) Then
            _UnderwritingCaseList = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection()
        End If        
    End Sub
    
    
    
    
#End Region







#Region "AutoPostBack Events Handles"

Protected Sub ActionType_SelectedIndexChanged(sender As Object, e As EventArgs)  
        Dim OnLineServiceUnderwriterIIParameterInstance As OnLineServiceUnderwriterIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
        Dim currentAction As String = SessionTrace("ActionType_SelectedIndex")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(OnLineServiceUnderwriterIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. If _formData.ActionType = 1 Then") 
If _formData.ActionType = 1 Then

            currentAction = SessionTrace("2. Call 'Cotizaciones todos los ramos iconos ALC' form with transferring parameters") 
Session(_FormID.Text) = _formData 
 Session("fromid") = _FormID.Text 
     
_webtransfer = String.Format(CultureInfo.InvariantCulture, "{0}/NNCotizacionesTodosLosRamosIconosALC.aspx?fromid={1}", ConfigurationManager.AppSettings("Url.Form"), _FormID.Text, "") 
            End If
            currentAction = SessionTrace("3. If _formData.ActionType = 2 Then") 
If _formData.ActionType = 2 Then

            currentAction = SessionTrace("5. Url: '#setting.Url.WebApplication#/Underwriting/UnderwritingPanel.aspx'") 
    
_webtransfer = String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") +"/Underwriting/UnderwritingPanel.aspx", "") 
            End If
            currentAction = SessionTrace("6. If _formData.ActionType = 3 Then") 
If _formData.ActionType = 3 Then

            currentAction = SessionTrace("7. zone0.Visible = true, button7.Visible = true, button0.Visible = false") 
            currentAction = SessionTrace("7.1. zone0.Visible = true...")
BehaviorShowControls("zone0,Visible")
            currentAction = SessionTrace("7.2. button7.Visible = true...")
BehaviorShowControls("button7,Visible")
            currentAction = SessionTrace("7.3. button0.Visible = false...")
BehaviorShowControls("button0,Hidden")

            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(OnLineServiceUnderwriterIIParameterInstance,"UnderwritingCase")
          
        
          If OnLineServiceUnderwriterIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(OnLineServiceUnderwriterIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(OnLineServiceUnderwriterIIParameterInstance.NotifyMessage)
             End If           
            
             OnLineServiceUnderwriterIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(OnLineServiceUnderwriterIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(OnLineServiceUnderwriterIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   OnLineServiceUnderwriterIIUpdatePanel.Update
      End Try
      
    End Sub
Protected Sub button4_Click(sender As Object, e As EventArgs)  
        Dim OnLineServiceUnderwriterIIParameterInstance As OnLineServiceUnderwriterIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
        Dim currentAction As String = SessionTrace("button4_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim selectDataTableItem As DataTable


        
           
        
           GetCurrentParameterInstance(OnLineServiceUnderwriterIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. UnderwritingCaseCollection.Visible = true") 
            currentAction = SessionTrace("1.1. UnderwritingCaseCollection.Visible = true...")
BehaviorShowControls("UnderwritingCaseCollection,Visible")

            currentAction = SessionTrace("2. _formData.QuantityOfRecords = 0...") 
 
            currentAction = SessionTrace("2.1. _formData.QuantityOfRecords = 0...")

 _formData.QuantityOfRecords = 0 

            currentAction = SessionTrace("3. _formData.FechaFinalBusqueda = DateAdd('d',1,_formData.EndDate)...") 
 
            currentAction = SessionTrace("3.1. _formData.FechaFinalBusqueda = DateAdd('d',1,_formData.EndDate)...")

 _formData.FechaFinalBusqueda = DateAdd("d",1,_formData.EndDate) 

            currentAction = SessionTrace("4. '_formData.UnderwritingCaseCollection' = New 'InMotionGIT.Underwriting.'...'") 
             _formData.UnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection

currentAction = SessionTrace("5. SELECT UnderwritingCase.UnderwritingCaseID, UnderwritingCase.OpenDate, UnderwritingCase.LineOfBusiness FROM UnderwritingCase... WHERE UnderwritingCase.OpenDate >= _formData.StartDate AND UnderwritingCase.OpenDate <= _formData.FechaFinalBusqueda AND UnderwritingCase.Status = 1 OR )") 
            isFoundData = False 
With New DataManagerFactory("SELECT UNDERWRITINGCASE.UNDERWRITINGCASEID, UNDERWRITINGCASE.OPENDATE, UNDERWRITINGCASE.LINEOFBUSINESS, UNDERWRITINGCASE.PRODUCT, UNDERWRITINGCASE.DECISION, UNDERWRITINGCASE.STATUS, ROLEINCASE.ROLE, ROLEINCASE.CLIENTNAME FROM UNDERWRITINGCASE UNDERWRITINGCASE  JOIN ROLEINCASE ROLEINCASE ON ROLEINCASE.UNDERWRITINGCASEID = UNDERWRITINGCASE.UNDERWRITINGCASEID WHERE UNDERWRITINGCASE.OPENDATE >= @:UNDERWRITINGCASEOPENDATE0 AND UNDERWRITINGCASE.OPENDATE <= @:UNDERWRITINGCASEOPENDATE1 AND (UNDERWRITINGCASE.STATUS = 1 OR UNDERWRITINGCASE.STATUS = 2 OR UNDERWRITINGCASE.STATUS = 4 OR UNDERWRITINGCASE.STATUS = 6 OR UNDERWRITINGCASE.STATUS = 7 OR UNDERWRITINGCASE.STATUS = 9) AND (UNDERWRITINGCASE.DECISION = 1 OR UNDERWRITINGCASE.DECISION = 5) AND (ROLEINCASE.ROLE = 1 OR ROLEINCASE.ROLE = 2)", "UnderwritingCase", "Linked.Underwriting")
             .AddParameter("UNDERWRITINGCASEOPENDATE0", DbType.DateTime, 7, (_formData.StartDate = Date.MinValue), _formData.StartDate)
.AddParameter("UNDERWRITINGCASEOPENDATE1", DbType.DateTime, 7, (_formData.FechaFinalBusqueda = Date.MinValue), _formData.FechaFinalBusqueda)
 
             selectDataTableItem = .QueryExecuteToTable(True)  
        End With
            With selectDataTableItem
                If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                     isFoundData = True 
                     _formData.UnderwritingCaseCollection = New InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection 
                     Dim newItem As InMotionGIT.Underwriting.Contracts.UnderwritingCase 
                     For Each itemData As DataRow In .Rows
                          newItem = New InMotionGIT.Underwriting.Contracts.UnderwritingCase 
                        newItem.UnderwritingCaseID = itemData.NumericValue("UNDERWRITINGCASEID") 
                        newItem.OpenDate = itemData.DateTimeValue("OPENDATE") 
                        newItem.LineOfBusiness = itemData.NumericValue("LINEOFBUSINESS") 
                        newItem.Product = itemData.NumericValue("PRODUCT") 
                        newItem.Decision = itemData.NumericValue("DECISION") 
                        newItem.Status = itemData.NumericValue("STATUS") 
                        newItem.ReasonDescription = itemData.StringValue("CLIENTNAME") 

                         _formData.UnderwritingCaseCollection.Add(newItem)
                     Next
                End If
            End With

            currentAction = SessionTrace("6. If _formData.UnderwritingCaseCollection Is Null Or Empty  Then") 
If IsNothing(_formData.UnderwritingCaseCollection) Then

    If Not _formData.Errors.HasErrors Then
            currentAction = SessionTrace("7. label4.Visible = true, UnderwritingCase.Visible = false, zone6.Visible = false") 
            currentAction = SessionTrace("7.1. label4.Visible = true...")
BehaviorShowControls("label4,Visible")
            currentAction = SessionTrace("7.2. UnderwritingCase.Visible = false...")
BehaviorShowControls("UnderwritingCase,Hidden")
BehaviorShowControls("btnADDUnderwritingCase,Hidden")
            currentAction = SessionTrace("7.3. zone6.Visible = false...")
BehaviorShowControls("zone6,Hidden")

    End If
        Else 
    If Not _formData.Errors.HasErrors Then
            currentAction = SessionTrace("8. label4.Visible = false, UnderwritingCase.Visible = true, zone6.Visible = true") 
            currentAction = SessionTrace("8.1. label4.Visible = false...")
BehaviorShowControls("label4,Hidden")
            currentAction = SessionTrace("8.2. UnderwritingCase.Visible = true...")
BehaviorShowControls("UnderwritingCase,Visible")
BehaviorShowControls("btnADDUnderwritingCase,Visible")
            currentAction = SessionTrace("8.3. zone6.Visible = true...")
BehaviorShowControls("zone6,Visible")

    End If
            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(OnLineServiceUnderwriterIIParameterInstance,"UnderwritingCase")
          
        
          If OnLineServiceUnderwriterIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(OnLineServiceUnderwriterIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(OnLineServiceUnderwriterIIParameterInstance.NotifyMessage)
             End If           
            
             OnLineServiceUnderwriterIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(OnLineServiceUnderwriterIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(OnLineServiceUnderwriterIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   OnLineServiceUnderwriterIIUpdatePanel.Update
      End Try
      
    End Sub
Protected Sub button7_Click(sender As Object, e As EventArgs)  
        Dim OnLineServiceUnderwriterIIParameterInstance As OnLineServiceUnderwriterIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
        Dim currentAction As String = SessionTrace("button7_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(OnLineServiceUnderwriterIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. If _formData.ActionType = 5 Then") 
If _formData.ActionType = 5 Then

            currentAction = SessionTrace("2. Call 'Mi Vida vale' form with transferring parameters") 
Session(_FormID.Text) = _formData 
 Session("fromid") = _FormID.Text 
     
_webtransfer = String.Format(CultureInfo.InvariantCulture, "{0}/NNCotizacionMiVidaValeII.aspx?fromid={1}&uwcaseid={2}", ConfigurationManager.AppSettings("Url.Form"), _FormID.Text,_formData.CaseToQuery) 
        Else 
            currentAction = SessionTrace("3. Url: '#setting.Url.WebApplication#/Underwriting/UnderwritingPanel.aspx' with transferring parameters") 
Session(_FormID.Text) = _formData 
 Session("fromid") = _FormID.Text 
     
_webtransfer = String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") +"/Underwriting/UnderwritingPanel.aspx"+"?uwcaseid={0}",_formData.CaseToQuery) 
            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(OnLineServiceUnderwriterIIParameterInstance,"")
          
        
          If OnLineServiceUnderwriterIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(OnLineServiceUnderwriterIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(OnLineServiceUnderwriterIIParameterInstance.NotifyMessage)
             End If           
            
             OnLineServiceUnderwriterIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(OnLineServiceUnderwriterIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(OnLineServiceUnderwriterIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   OnLineServiceUnderwriterIIUpdatePanel.Update
      End Try
      
    End Sub


#End Region

#Region "UserControls Events Handles"

    



#End Region

#Region "Form Manager"

    Private Sub VerifySecurityLevel()




    End Sub

      

    Private Sub GetCurrentParameterInstance(ByRef OnLineServiceUnderwriterIIParameterInstance As OnLineServiceUnderwriterIIParameter, force As Boolean)
        If _loadcompleted Or force Then
            If Not _CurrentParameterInstance Then

                OnLineServiceUnderwriterIIParameterInstance = FormData

                If Page.IsPostBack Then
                    MapPageToClass(OnLineServiceUnderwriterIIParameterInstance)
                End If

                _CurrentParameterInstance = True
            Else
                OnLineServiceUnderwriterIIParameterInstance = _formData
            End If
        Else
            OnLineServiceUnderwriterIIParameterInstance = Nothing
        End If
    End Sub

    Protected Sub SetCurrentParameterInstance(ByRef OnLineServiceUnderwriterIIParameterInstance As OnLineServiceUnderwriterIIParameter, calledBy As String)
        FormData = OnLineServiceUnderwriterIIParameterInstance
        MapClassToPage(OnLineServiceUnderwriterIIParameterInstance,calledBy)
    End Sub

    Protected Sub SetErrors(errors As InMotionGIT.Common.Contracts.Errors.ErrorCollection)
        Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

        If IsNothing(errorList) Then
            errorList = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
        End If

        errorList = errors

        ViewState("Errors") = errorList
        ShowErrors()
    End Sub

    Public Sub ShowErrors()
        If Not IsNothing(ViewState("Errors")) Then
            Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

            Dim queryOut = From lst In errorList Select lst Order By lst.ErrorId

            ErrorsGridView.Visible = True
            ErrorsGridView.DataSource = queryOut.ToList
            ErrorsGridView.DataBind()
            UpdatePanelErrors.Update()
        End If
    End Sub
   
    Private Sub ShowWindowPopupMessage(message As String)
        NotifyMessageLabel.Text = message
        popupNotifyMessage.ShowOnPageLoad = True
    End Sub

    Private Sub ClosePopupWindow()
        popControl.Windows(0).ShowOnPageLoad = False
    End Sub

    Private Sub GetTransferParameters()
        Dim fromDocumentCache As Object = Nothing

        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) Then
            fromDocumentCache = Session( Request.QueryString("fromid"))
            Session.Remove(Request.QueryString("fromid"))
            
        Else
            fromDocumentCache = Session(Session("fromid"))
            Session.Remove(Session("fromid"))
            Session.Remove("fromid")   
        End If
        
        If Not IsNothing(fromDocumentCache) Then
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UnderwritingCaseCollection", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StartDate", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("EndDate", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CaseToQuery", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ActionType", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QuantityOfRecords", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Client", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsEmployee", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("DaysToSubstract", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FechaFinalBusqueda", fromDocumentCache, _formData)
            
        End If
    End Sub
    
    

    Private Sub SetDefaultValuesFromQueryString()

        If Request.Form("StartDate").IsNotEmpty Then
                FormData.StartDate = Request.Form("StartDate") 

ElseIf Request.QueryString("StartDate").IsNotEmpty Then
                FormData.StartDate = Request.QueryString("StartDate") 
End If 

If Request.Form("EndDate").IsNotEmpty Then
                FormData.EndDate = Request.Form("EndDate") 

ElseIf Request.QueryString("EndDate").IsNotEmpty Then
                FormData.EndDate = Request.QueryString("EndDate") 
End If 

If Request.Form("CaseToQuery").IsNotEmpty Then
                FormData.CaseToQuery = Request.Form("CaseToQuery") 

ElseIf Request.QueryString("CaseToQuery").IsNotEmpty Then
                FormData.CaseToQuery = Request.QueryString("CaseToQuery") 
End If 

If Request.Form("ActionType").IsNotEmpty Then
                FormData.ActionType = Request.Form("ActionType") 

ElseIf Request.QueryString("ActionType").IsNotEmpty Then
                FormData.ActionType = Request.QueryString("ActionType") 
End If 

If Request.Form("QuantityOfRecords").IsNotEmpty Then
                FormData.QuantityOfRecords = Request.Form("QuantityOfRecords") 

ElseIf Request.QueryString("QuantityOfRecords").IsNotEmpty Then
                FormData.QuantityOfRecords = Request.QueryString("QuantityOfRecords") 
End If 

If Request.Form("IsEmployee").IsNotEmpty Then
                FormData.IsEmployee = Request.Form("IsEmployee") 

ElseIf Request.QueryString("IsEmployee").IsNotEmpty Then
                FormData.IsEmployee = Request.QueryString("IsEmployee") 
End If 

If Request.Form("DaysToSubstract").IsNotEmpty Then
                FormData.DaysToSubstract = Request.Form("DaysToSubstract") 

ElseIf Request.QueryString("DaysToSubstract").IsNotEmpty Then
                FormData.DaysToSubstract = Request.QueryString("DaysToSubstract") 
End If 

If Request.Form("FechaFinalBusqueda").IsNotEmpty Then
                FormData.FechaFinalBusqueda = Request.Form("FechaFinalBusqueda") 

ElseIf Request.QueryString("FechaFinalBusqueda").IsNotEmpty Then
                FormData.FechaFinalBusqueda = Request.QueryString("FechaFinalBusqueda") 
End If 


    End Sub
    
    Private Sub BehaviorControls(controlItem As Control, isEnable As Boolean)
        InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValueSimple("Enabled", controlItem, isEnable)           
    End Sub
    
    Private Sub SetReadOnlyControls()
    
        BehaviorControls(ActionType, False)
        BehaviorControls(StartDate, False)
        BehaviorControls(EndDate, False)
        BehaviorControls(button4, False)
        BehaviorControls(UnderwritingCase, False)
        BehaviorControls(CaseToQuery, False)
        BehaviorControls(button7, False)
    
    End Sub
     
#End Region

#Region "Actions Data Methods"

    Private Function SessionTrace(message As String) As String

        If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
            Dim tracelog As String = Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath)))

            tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
            Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = tracelog
        End If

        Return message
    End Function
    
    Private Sub ControlsInitialization()
        UnderwritingCase.ClientVisible = True
        UnderwritingCase.Enabled = True

    End Sub     
  
    Private Sub ParametersToDictionary(ByRef target As Dictionary(Of String, Object))
        If IsNothing(target) Then
            target = New Dictionary(Of String, Object)

            target.Add("UnderwritingCaseCollection", _formData.UnderwritingCaseCollection) 
            target.Add("StartDate", _formData.StartDate) 
            target.Add("EndDate", _formData.EndDate) 
            target.Add("CaseToQuery", _formData.CaseToQuery) 
            target.Add("ActionType", _formData.ActionType) 
            target.Add("QuantityOfRecords", _formData.QuantityOfRecords) 
            target.Add("Client", _formData.Client) 
            target.Add("IsEmployee", _formData.IsEmployee) 
            target.Add("DaysToSubstract", _formData.DaysToSubstract) 
            target.Add("FechaFinalBusqueda", _formData.FechaFinalBusqueda) 

        Else
            target("UnderwritingCaseCollection") = _formData.UnderwritingCaseCollection 
            target("StartDate") = _formData.StartDate 
            target("EndDate") = _formData.EndDate 
            target("CaseToQuery") = _formData.CaseToQuery 
            target("ActionType") = _formData.ActionType 
            target("QuantityOfRecords") = _formData.QuantityOfRecords 
            target("Client") = _formData.Client 
            target("IsEmployee") = _formData.IsEmployee 
            target("DaysToSubstract") = _formData.DaysToSubstract 
            target("FechaFinalBusqueda") = _formData.FechaFinalBusqueda 

        End If     
    End Sub
    
    
    Private Sub ExecuteActionsInitializationForm()
                    Dim currentAction As String = SessionTrace("ActionsInitializationForm")
                    
                    Try                          
                        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
                        Dim messageAction As String = String.Empty
                        Dim lastURL As String = String.Empty
                        Dim isNullResult As Boolean = True 
                        Dim isFoundData As Boolean  = False 
                        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
                        
                        ParametersToDictionary(parametersDictionary)
                         
                        
                                    currentAction = SessionTrace("1. _formData.DaysToSubstract = -5...") 
 
            currentAction = SessionTrace("1.1. _formData.DaysToSubstract = -5...")

 _formData.DaysToSubstract = -5 

            currentAction = SessionTrace("2. _formData.EndDate = Date.Today...") 
 
            currentAction = SessionTrace("2.1. _formData.EndDate = Date.Today...")

 _formData.EndDate = Date.Today 

            currentAction = SessionTrace("3. _formData.StartDate = DateAdd('d',_formData.DaysToSubstra...") 
 
            currentAction = SessionTrace("3.1. _formData.StartDate = DateAdd('d',_formData.DaysToSubstra...")

 _formData.StartDate = DateAdd("d",_formData.DaysToSubstract,_formData.EndDate) 

            currentAction = SessionTrace("4. _formData.ActionType = 0...") 
 
            currentAction = SessionTrace("4.1. _formData.ActionType = 0...")

 _formData.ActionType = 0 

            currentAction = SessionTrace("5. Call Shared Function 'User Profile' without parameters") 
            Dim _Client_5579ef4ebe69465ba9d37eb969bc5640 As InMotionGIT.Client.Entity.Contracts.Client 
            

      If Not IsNothing(UserInfo) AndAlso Not IsNothing(UserInfo.User) then
         _Client_5579ef4ebe69465ba9d37eb969bc5640 = New InMotionGIT.Client.Entity.Contracts.Client

         With _Client_5579ef4ebe69465ba9d37eb969bc5640
             .ClientID = UserInfo.User.ClientID
             .FirstName = UserInfo.User.FirstName
             .LastName = UserInfo.User.LastName
             .LastName2 = UserInfo.User.SecondLastName
             .BirthDate = UserInfo.User.DateOfBirth
             .LegalName = UserInfo.User.CompanyName
             .GenderEnum = IIf(UserInfo.User.Gender = "Male", InMotionGIT.Common.Contracts.Enumerations.EnumGender.Male, InMotionGIT.Common.Contracts.Enumerations.EnumGender.Female)
             .eMailAddressDefault = UserInfo.User.Email
             .CompleteClientName = .CompleteClientNameValid
         End With

	isNullResult = (IsNothing(_Client_5579ef4ebe69465ba9d37eb969bc5640))
	isFoundData  = Not isNullResult
      End If
     
            _formData.Client = _Client_5579ef4ebe69465ba9d37eb969bc5640 

            currentAction = SessionTrace("6. _formData.IsEmployee = Security.IsEmployee()...") 
 
            currentAction = SessionTrace("6.1. _formData.IsEmployee = Security.IsEmployee()...")

 _formData.IsEmployee = Security.IsEmployee() 

            currentAction = SessionTrace("7. If _formData.IsEmployee = false Then") 
If _formData.IsEmployee = false Then

            currentAction = SessionTrace("8. The message 'Usted no está autori...' will displayed as 'Splash'") 
            messageAction = GetLocalResourceObject("OnLineServiceUnderwriterII0_MessageActionResource").ToString() 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            OnLineServiceUnderwriterIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            End If

                        
                        currentAction = String.Empty
                         
                    Catch ex As Exception
                        InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
						_formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

                        If Request.QueryString("debug").IsNotEmpty Then
                            FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                            FormMessageLabel.ForeColor = Drawing.Color.Black
                            FormMessageLabel.Font.Bold = True
                            MessageTable.Visible = True
                        End If
                        
                    Finally                     
                        If _formData.Errors.Count > 0 Then
                            SetErrors(_formData.Errors)
                        End If
                        
                        If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                            If Page.IsCallback Then
                                DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                            Else
                                Response.Redirect(_webTransfer)
                            End If
                        End If
                   End Try
                   
               End Sub
    

    
#End Region






End Class

<Serializable()>
Public Class OnLineServiceUnderwriterIIParameter
    Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of  OnLineServiceUnderwriterIIParameter)

    ' Methods
    Public Sub New()
        MyBase.New()
    End Sub

    ' Properties
    Public Property UnderwritingCaseCollection As InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection
    Public Property StartDate As DateTime
    Public Property EndDate As DateTime
    Public Property CaseToQuery As Int64
    Public Property ActionType As Int32
    Public Property QuantityOfRecords As Int32
    Public Property Client As InMotionGIT.Client.Entity.Contracts.Client
    Public Property IsEmployee As Boolean
    Public Property DaysToSubstract As Int32
    Public Property FechaFinalBusqueda As DateTime


End Class