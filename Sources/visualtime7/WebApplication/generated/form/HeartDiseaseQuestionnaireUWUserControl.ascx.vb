'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer Oracle v7.1.2 at 2019/04/12 model release 5
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"
    
Imports Artem.Google.UI
Imports DashboardBusiness.Helpers
Imports DevExpress.Web
Imports DevExpress.Web.ASPxClasses
Imports DevExpress.Web.ASPxEditors
Imports DevExpress.Web.ASPxGridView
Imports GIT.Core
Imports InMotionGIT.FrontOffice.Support.Enumerations
Imports InMotionGIT.FrontOffice.Support.Helpers.ControlHandler
Imports InMotionGIT.BarCode
Imports InMotionGIT.BarCode.Enumerations
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo
Imports System.IO
Imports InMotionGIT.FrontOffice.Support
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data
Imports System.Data.Common
Imports System.Globalization
Imports System.Linq
Imports System.Threading.Thread
Imports System.Xml.Linq
Imports System.Net


#End Region

Partial Public Class HeartDiseaseQuestionnaireUWUserControl
    Inherits GIT.Core.UserControlBase
    Implements Dropthings.Widget.Framework.IWidget

#Region "IWidget Members"
    
    
    

    Public Sub Closed() Implements Dropthings.Widget.Framework.IWidget.Closed
    End Sub

    Public Sub HideSettings() Implements Dropthings.Widget.Framework.IWidget.HideSettings

    End Sub

    Public Sub Init1(host As Dropthings.Widget.Framework.IWidgetHost) Implements Dropthings.Widget.Framework.IWidget.Init

    End Sub

    Public Sub Maximized() Implements Dropthings.Widget.Framework.IWidget.Maximized

    End Sub

    Public Sub Minimized() Implements Dropthings.Widget.Framework.IWidget.Minimized

    End Sub

    Public Sub ShowSettings() Implements Dropthings.Widget.Framework.IWidget.ShowSettings

    End Sub

#End Region

#Region "Private fields"

    Private _formData As HeartDiseaseQuestionnaireUWParameter = Nothing
    Private _CurrentParameterInstance As Boolean = False
    Private _loading As Boolean = False
    Private _loadcompleted As Boolean = False
    Private _webTransfer as String  
    Private _foundData As Boolean = False
        
#End Region

#Region "Public properties"

    Public Property FormData() As HeartDiseaseQuestionnaireUWParameter
        Get
            Dim formDefinition As String = String.Empty               
             
            If IsNothing(_formData) Then
                If Not IsPostBack Then
                    If Not String.IsNullOrEmpty(Request.QueryString("id")) Then
                        Dim _id As Guid
                        
                        If Guid.TryParse(Request.QueryString("id"), _id) Then
		                        _FormID.Text = Request.QueryString("id")  
                            
                            _foundData = RetrieveFormInformation()
                        End If
                    End If

                    If IsNothing(_formData) Then
                        _formData = New HeartDiseaseQuestionnaireUWParameter
                       
                        If String.IsNullOrEmpty(_FormID.Text) Then
                        	_FormID.Text = System.Guid.NewGuid().ToString                       
                        End If
											
                        _formData.InternalId = _FormID.Text
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) OrElse
                           Not String.IsNullOrEmpty(Session("fromid")) Then
                           
                            GetTransferParameters()
                        End If
                        
                        
                        
                        SetDefaultValuesFromQueryString()
                        ValidateParametersInstance(_formData)
                        
                        popupNotifyMessage.ShowOnPageLoad = false                        
                        
                        ControlsInitialization()
                        ExecuteActionsInitializationForm()
                         
                        If Not String.IsNullOrEmpty(Request.QueryString("readonly")) Then
                            SetReadOnlyControls()
                        End If
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("button8")) Then
                            button8_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button7")) Then
                            button7_Click(nothing, nothing)
                        End If

                    Else
                    		SetDefaultValuesFromQueryString()
                        ExecuteActionsLoadForm()
                    End If

                Else
                     _foundData = RetrieveFormInformation()                    

                    If IsNothing(_formData) Then
                        _formData = New HeartDiseaseQuestionnaireUWParameter
                    End If
                End If
            End If

            Return _formData
        End Get

        Set(value As HeartDiseaseQuestionnaireUWParameter)
            _formData = value
        End Set
    End Property
    
#End Region

#Region "Form Events"

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        ErrorsGridView.Visible = False
        
        
        
        Dim formData As HeartDiseaseQuestionnaireUWParameter = Me.FormData        
           
        If Not IsPostBack  AndAlso Not GridViewPostBack() Then                     
            
            
            _loadcompleted = True
            
            
            If IsPostBack And Not _CurrentParameterInstance Then
                MapPageToClass(formData)
                _CurrentParameterInstance = True
            End If

            MapClassToPage(formData)
            VerifySecurityLevel()
            
            
        Else
            
            
            
        End If        
        
        
        
        
    End Sub    

    Protected Sub Page_Unload(sender As Object, e As EventArgs) Handles Me.Unload        
StoreFormInformation() 
        
        If Not IsNothing(_formData) Then
             If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
                 Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = _formData
             End If   
       
             If Not IsNothing(Session("Form.Track.Parameters")) AndAlso Session("Form.Track.Parameters").ToString.ToLower = "true" Then
                  InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of HeartDiseaseQuestionnaireUWParameter) _
                  (formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.HeartDiseaseQuestionnaireUW.xml",  ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
             End If        
        End If  
   End Sub

#End Region

#Region "Controls Events"


    Private Function GridViewPostBack() As Boolean
        For index As Integer = 0 To Request.Params.Count - 1
            If Request.Params(index).EndsWith("$DetailsOfMedicalPractitioners") or Request.Params(index).EndsWith("$TreatmentPrescribed") or Request.Params(index).EndsWith("$DetailsAbsensesFromWork")  Then
                Return True
            End If
        Next
        
        Return False
    End Function    
        
    
    
#End Region


#Region "PopupMenu Events"

    
    
#End Region

#Region "Mapping methods"

    Public Sub ValidateParametersInstance(ByRef HeartDiseaseQuestionnaireUWParameterInstance As HeartDiseaseQuestionnaireUWParameter)
        If IsNothing(HeartDiseaseQuestionnaireUWParameterInstance.HeartDiseaseQuestionnaire) Then
            HeartDiseaseQuestionnaireUWParameterInstance.HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire
        End If
   
    End Sub
    
    ''' <summary>
    ''' This method moves the data from the class to the page
    ''' </summary>
    ''' <param name="HeartDiseaseQuestionnaireUWParameterInstance"></param>
    ''' <remarks></remarks>
    Public Sub MapClassToPage(ByRef HeartDiseaseQuestionnaireUWParameterInstance As HeartDiseaseQuestionnaireUWParameter, Optional calledBy As String = "")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
        ValidateParametersInstance(HeartDiseaseQuestionnaireUWParameterInstance)

        SymptomsAccompaniedByOther.DataBind()
SymptomsRelatedWithEvent.DataBind()
FrequencyOfTheSymptoms.DataBind()
DuringOfTheSymptoms.DataBind()
YesConsultedSpecialist.DataBind()
TypeTreatmentHad.DataBind()
StillReceivingTreatment.DataBind()
SurgeryOrInvestigationContemplated.DataBind()
YesRestrictedInLifeStyle.DataBind()

       
        With HeartDiseaseQuestionnaireUWParameterInstance
          
                      ClientName.Text = .ClientName
            uwcaseid.Text = .uwcaseid
            Cardiomyopathy.Checked = .HeartDiseaseQuestionnaire.Cardiomyopathy
            IschaemicHeartDisease.Checked = .HeartDiseaseQuestionnaire.IschaemicHeartDisease
            MitralOrOtherValve.Checked = .HeartDiseaseQuestionnaire.MitralOrOtherValve
            OtherDiagnosis.Checked = .HeartDiseaseQuestionnaire.OtherDiagnosis
            DetailsSpecificDiagnosis.Text = .HeartDiseaseQuestionnaire.DetailsSpecificDiagnosis
            SymptomsAccompaniedByOther.SelectedItem = SymptomsAccompaniedByOther.Items.FindByValue(.HeartDiseaseQuestionnaire.SymptomsAccompaniedByOther)
            DescribeBodySymptoms.Text = .HeartDiseaseQuestionnaire.DescribeBodySymptoms
            DateSymptomsInitiallyOccur.Value = .HeartDiseaseQuestionnaire.DateSymptomsInitiallyOccur
            SymptomsRelatedWithEvent.SelectedItem = SymptomsRelatedWithEvent.Items.FindByValue(.HeartDiseaseQuestionnaire.SymptomsRelatedWithEvent)
            FrequencyOfTheSymptoms.SelectedItem = FrequencyOfTheSymptoms.Items.FindByValue(.HeartDiseaseQuestionnaire.FrequencyOfTheSymptoms)
            DetailsEventRelated.Text = .HeartDiseaseQuestionnaire.DetailsEventRelated
            DuringOfTheSymptoms.SelectedItem = DuringOfTheSymptoms.Items.FindByValue(.HeartDiseaseQuestionnaire.DuringOfTheSymptoms)
            DateOfLastOccurrence.Value = .HeartDiseaseQuestionnaire.DateOfLastOccurrence
            Suddenly.Checked = .HeartDiseaseQuestionnaire.Suddenly
            Gradually.Checked = .HeartDiseaseQuestionnaire.Gradually
            AtRest.Checked = .HeartDiseaseQuestionnaire.AtRest
            OnlyOnPhysicalActivity.Checked = .HeartDiseaseQuestionnaire.OnlyOnPhysicalActivity
            SymptomsBetter.Checked = .HeartDiseaseQuestionnaire.SymptomsBetter
            SymptomsWorse.Checked = .HeartDiseaseQuestionnaire.SymptomsWorse
            YesConsultedSpecialist.SelectedItem = YesConsultedSpecialist.Items.FindByValue(.HeartDiseaseQuestionnaire.YesConsultedSpecialist)
            TypeTreatmentHad.SelectedItem = TypeTreatmentHad.Items.FindByValue(.HeartDiseaseQuestionnaire.TypeTreatmentHad)
            StillReceivingTreatment.SelectedItem = StillReceivingTreatment.Items.FindByValue(.HeartDiseaseQuestionnaire.StillReceivingTreatment)
            DetailsStillRecievingTreatment.Text = .HeartDiseaseQuestionnaire.DetailsStillRecievingTreatment
            SurgeryOrInvestigationContemplated.SelectedItem = SurgeryOrInvestigationContemplated.Items.FindByValue(.HeartDiseaseQuestionnaire.SurgeryOrInvestigationContemplated)
            CoronaryAngiogram.Checked = .HeartDiseaseQuestionnaire.CoronaryAngiogram
            ThalliumPerfusionScan.Checked = .HeartDiseaseQuestionnaire.ThalliumPerfusionScan
            Resting.Checked = .HeartDiseaseQuestionnaire.Resting
            Exercise.Checked = .HeartDiseaseQuestionnaire.Exercise
            Endoscopy.Checked = .HeartDiseaseQuestionnaire.Endoscopy
            Echocardiogram.Checked = .HeartDiseaseQuestionnaire.Echocardiogram
            SestamibiStress.Checked = .HeartDiseaseQuestionnaire.SestamibiStress
            Other.Checked = .HeartDiseaseQuestionnaire.Other
            SpecifyOther.Text = .HeartDiseaseQuestionnaire.SpecifyOther
            YesRestrictedInLifeStyle.SelectedItem = YesRestrictedInLifeStyle.Items.FindByValue(.HeartDiseaseQuestionnaire.YesRestrictedInLifeStyle)
            AdditionalInformation.Text = .HeartDiseaseQuestionnaire.AdditionalInformation
            DateReceived.Value = .HeartDiseaseQuestionnaire.DateReceived

                      If IsNothing(.HeartDiseaseQuestionnaire) Then
                .HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire()
            End If
            If IsNothing(.HeartDiseaseQuestionnaire.DetailsOfSpecialists) Then
                .HeartDiseaseQuestionnaire.DetailsOfSpecialists = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitionersCollection()
            End If
            If IsNothing(.HeartDiseaseQuestionnaire) Then
                .HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire()
            End If
            If IsNothing(.HeartDiseaseQuestionnaire.DetailsMedicationsTaking) Then
                .HeartDiseaseQuestionnaire.DetailsMedicationsTaking = New InMotionGIT.Questionnaires.Complements.TreatmentPrescribedCollection()
            End If
            If IsNothing(.HeartDiseaseQuestionnaire) Then
                .HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire()
            End If
            If IsNothing(.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle) Then
                .HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle = New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWorkCollection()
            End If

            _DetailsOfMedicalPractitionersList = .HeartDiseaseQuestionnaire.DetailsOfSpecialists
            DetailsOfMedicalPractitioners.DataSource = _DetailsOfMedicalPractitionersList
            DetailsOfMedicalPractitioners.DataBind()
            If IsNothing(.HeartDiseaseQuestionnaire) Then
                .HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire()
            End If
            If IsNothing(.HeartDiseaseQuestionnaire.DetailsMedicationsTaking) Then
                .HeartDiseaseQuestionnaire.DetailsMedicationsTaking = New InMotionGIT.Questionnaires.Complements.TreatmentPrescribedCollection()
            End If
            If IsNothing(.HeartDiseaseQuestionnaire) Then
                .HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire()
            End If
            If IsNothing(.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle) Then
                .HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle = New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWorkCollection()
            End If

            _TreatmentPrescribedList = .HeartDiseaseQuestionnaire.DetailsMedicationsTaking
            TreatmentPrescribed.DataSource = _TreatmentPrescribedList
            TreatmentPrescribed.DataBind()
            If IsNothing(.HeartDiseaseQuestionnaire) Then
                .HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire()
            End If
            If IsNothing(.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle) Then
                .HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle = New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWorkCollection()
            End If

            _DetailsAbsensesFromWorkList = .HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle
            DetailsAbsensesFromWork.DataSource = _DetailsAbsensesFromWorkList
            DetailsAbsensesFromWork.DataBind()
    
                  
          
                      If IsNothing(SymptomsRelatedWithEvent.SelectedItem) OrElse
                          (Not IsNothing(SymptomsRelatedWithEvent.SelectedItem) AndAlso IsNothing(SymptomsRelatedWithEvent.SelectedItem.Value)) Then
          
               SymptomsRelatedWithEvent.SelectedItem = SymptomsRelatedWithEvent.Items.FindByValue(True)               
           End If      
    
            If IsNothing(FrequencyOfTheSymptoms.SelectedItem) OrElse
                          (Not IsNothing(FrequencyOfTheSymptoms.SelectedItem) AndAlso IsNothing(FrequencyOfTheSymptoms.SelectedItem.Value)) Then
          
               FrequencyOfTheSymptoms.SelectedItem = FrequencyOfTheSymptoms.Items.FindByValue(4)               
           End If      
    
            If IsNothing(DuringOfTheSymptoms.SelectedItem) OrElse
                          (Not IsNothing(DuringOfTheSymptoms.SelectedItem) AndAlso IsNothing(DuringOfTheSymptoms.SelectedItem.Value)) Then
          
               DuringOfTheSymptoms.SelectedItem = DuringOfTheSymptoms.Items.FindByValue("0")               
           End If      
    
            If IsNothing(YesConsultedSpecialist.SelectedItem) OrElse
                          (Not IsNothing(YesConsultedSpecialist.SelectedItem) AndAlso IsNothing(YesConsultedSpecialist.SelectedItem.Value)) Then
          
               YesConsultedSpecialist.SelectedItem = YesConsultedSpecialist.Items.FindByValue(True)               
           End If      
    
            If IsNothing(StillReceivingTreatment.SelectedItem) OrElse
                          (Not IsNothing(StillReceivingTreatment.SelectedItem) AndAlso IsNothing(StillReceivingTreatment.SelectedItem.Value)) Then
          
               StillReceivingTreatment.SelectedItem = StillReceivingTreatment.Items.FindByValue(True)               
           End If      
    
            If IsNothing(SurgeryOrInvestigationContemplated.SelectedItem) OrElse
                          (Not IsNothing(SurgeryOrInvestigationContemplated.SelectedItem) AndAlso IsNothing(SurgeryOrInvestigationContemplated.SelectedItem.Value)) Then
          
               SurgeryOrInvestigationContemplated.SelectedItem = SurgeryOrInvestigationContemplated.Items.FindByValue(True)               
           End If      
    
            If IsNothing(YesRestrictedInLifeStyle.SelectedItem) OrElse
                          (Not IsNothing(YesRestrictedInLifeStyle.SelectedItem) AndAlso IsNothing(YesRestrictedInLifeStyle.SelectedItem.Value)) Then
          
               YesRestrictedInLifeStyle.SelectedItem = YesRestrictedInLifeStyle.Items.FindByValue(True)               
           End If      
    

               
            
            
       End With


if (Not ("DetailsOfMedicalPractitioners|TreatmentPrescribed|DetailsAbsensesFromWork".IndexOf(calledBy) > -1)) Or String.IsNullOrEmpty(calledBy) then        
            
         

        End If          
    End Sub

    ''' <summary>
    ''' This method moves the data from the page to the class
    ''' </summary>
    ''' <param name="HeartDiseaseQuestionnaireUWParameterInstance"></param>
    Public Sub MapPageToClass(ByRef HeartDiseaseQuestionnaireUWParameterInstance As HeartDiseaseQuestionnaireUWParameter)
        _loading = True

        ValidateParametersInstance(HeartDiseaseQuestionnaireUWParameterInstance)

        With HeartDiseaseQuestionnaireUWParameterInstance
            .ClientName = ClientName.Text
            .uwcaseid = uwcaseid.Text
            .HeartDiseaseQuestionnaire.Cardiomyopathy = Cardiomyopathy.Checked
            .HeartDiseaseQuestionnaire.IschaemicHeartDisease = IschaemicHeartDisease.Checked
            .HeartDiseaseQuestionnaire.MitralOrOtherValve = MitralOrOtherValve.Checked
            .HeartDiseaseQuestionnaire.OtherDiagnosis = OtherDiagnosis.Checked
            .HeartDiseaseQuestionnaire.DetailsSpecificDiagnosis = DetailsSpecificDiagnosis.Text
            .HeartDiseaseQuestionnaire.SymptomsAccompaniedByOther = SymptomsAccompaniedByOther.Value
            .HeartDiseaseQuestionnaire.DescribeBodySymptoms = DescribeBodySymptoms.Text
            .HeartDiseaseQuestionnaire.DateSymptomsInitiallyOccur = DateSymptomsInitiallyOccur.Value
            .HeartDiseaseQuestionnaire.SymptomsRelatedWithEvent = SymptomsRelatedWithEvent.Value
            .HeartDiseaseQuestionnaire.FrequencyOfTheSymptoms = FrequencyOfTheSymptoms.Value
            .HeartDiseaseQuestionnaire.DetailsEventRelated = DetailsEventRelated.Text
            .HeartDiseaseQuestionnaire.DuringOfTheSymptoms = DuringOfTheSymptoms.Value
            .HeartDiseaseQuestionnaire.DateOfLastOccurrence = DateOfLastOccurrence.Value
            .HeartDiseaseQuestionnaire.Suddenly = Suddenly.Checked
            .HeartDiseaseQuestionnaire.Gradually = Gradually.Checked
            .HeartDiseaseQuestionnaire.AtRest = AtRest.Checked
            .HeartDiseaseQuestionnaire.OnlyOnPhysicalActivity = OnlyOnPhysicalActivity.Checked
            .HeartDiseaseQuestionnaire.SymptomsBetter = SymptomsBetter.Checked
            .HeartDiseaseQuestionnaire.SymptomsWorse = SymptomsWorse.Checked
            .HeartDiseaseQuestionnaire.YesConsultedSpecialist = YesConsultedSpecialist.Value
            .HeartDiseaseQuestionnaire.TypeTreatmentHad = TypeTreatmentHad.Value
            .HeartDiseaseQuestionnaire.StillReceivingTreatment = StillReceivingTreatment.Value
            .HeartDiseaseQuestionnaire.DetailsStillRecievingTreatment = DetailsStillRecievingTreatment.Text
            .HeartDiseaseQuestionnaire.SurgeryOrInvestigationContemplated = SurgeryOrInvestigationContemplated.Value
            .HeartDiseaseQuestionnaire.CoronaryAngiogram = CoronaryAngiogram.Checked
            .HeartDiseaseQuestionnaire.ThalliumPerfusionScan = ThalliumPerfusionScan.Checked
            .HeartDiseaseQuestionnaire.Resting = Resting.Checked
            .HeartDiseaseQuestionnaire.Exercise = Exercise.Checked
            .HeartDiseaseQuestionnaire.Endoscopy = Endoscopy.Checked
            .HeartDiseaseQuestionnaire.Echocardiogram = Echocardiogram.Checked
            .HeartDiseaseQuestionnaire.SestamibiStress = SestamibiStress.Checked
            .HeartDiseaseQuestionnaire.Other = Other.Checked
            .HeartDiseaseQuestionnaire.SpecifyOther = SpecifyOther.Text
            .HeartDiseaseQuestionnaire.YesRestrictedInLifeStyle = YesRestrictedInLifeStyle.Value
            .HeartDiseaseQuestionnaire.AdditionalInformation = AdditionalInformation.Text
            .HeartDiseaseQuestionnaire.DateReceived = DateReceived.Value


        'GetViewStateDetailsOfMedicalPractitionersList()
        '.HeartDiseaseQuestionnaire.DetailsOfSpecialists = _DetailsOfMedicalPractitionersList
        '.HeartDiseaseQuestionnaire.DetailsOfSpecialists.CurrentIndex= DetailsOfMedicalPractitioners.EditIndex
        'ViewState.Remove("DetailsOfMedicalPractitionersList")
        'GetViewStateTreatmentPrescribedList()
        '.HeartDiseaseQuestionnaire.DetailsMedicationsTaking = _TreatmentPrescribedList
        '.HeartDiseaseQuestionnaire.DetailsMedicationsTaking.CurrentIndex= TreatmentPrescribed.EditIndex
        'ViewState.Remove("TreatmentPrescribedList")
        'GetViewStateDetailsAbsensesFromWorkList()
        '.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle = _DetailsAbsensesFromWorkList
        '.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle.CurrentIndex= DetailsAbsensesFromWork.EditIndex
        'ViewState.Remove("DetailsAbsensesFromWorkList")



        End With




        _loading = False
    End Sub

#End Region

#Region "DetailsOfMedicalPractitioners GridView Controls with dependencies Events"
    


#End Region

#Region "DetailsOfMedicalPractitioners GridView editing support"

    Private _DetailsOfMedicalPractitionersList As InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitionersCollection = Nothing

    Protected Sub DetailsOfMedicalPractitioners_DataBinding(sender As Object, e As EventArgs) Handles DetailsOfMedicalPractitioners.DataBinding
        
 
            If IsNothing(FormData.HeartDiseaseQuestionnaire) Then
                FormData.HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire()
            End If
            If IsNothing(FormData.HeartDiseaseQuestionnaire.DetailsOfSpecialists) Then
                FormData.HeartDiseaseQuestionnaire.DetailsOfSpecialists = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitionersCollection()
            End If

        _DetailsOfMedicalPractitionersList = FormData.HeartDiseaseQuestionnaire.DetailsOfSpecialists
        DetailsOfMedicalPractitioners.DataSource = _DetailsOfMedicalPractitionersList
        
    End Sub
    
    Protected Sub DetailsOfMedicalPractitioners_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles DetailsOfMedicalPractitioners.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub
    
    Protected Sub DetailsOfMedicalPractitioners_CellEditorInitialize(sender As Object, e As DevExpress.Web.ASPxGridView.ASPxGridViewEditorEventArgs) Handles DetailsOfMedicalPractitioners.CellEditorInitialize
        If DetailsOfMedicalPractitioners.IsNewRowEditing Then
            Select Case e.Column.FieldName



                Case "PractitionerName"                     
                       e.Editor.Focus()               
            End Select

        Else
            Select Case e.Column.FieldName
                   


                Case "PractitionerName"                     
                       e.Editor.Focus() 
            End Select
        End If
        
        Select Case e.Column.FieldName

            Case "PractitionerName"
                  
                 

        End Select
    End Sub      
            
    Protected Sub DetailsOfMedicalPractitioners_ParseValue(sender As Object, e As DevExpress.Web.Data.ASPxParseValueEventArgs) Handles DetailsOfMedicalPractitioners.ParseValue
        Select Case e.FieldName

        End Select
    End Sub    
    
 
  
  
    Protected Sub DetailsOfMedicalPractitioners_RowInserting(sender As Object, e As DevExpress.Web.Data.ASPxDataInsertingEventArgs) Handles DetailsOfMedicalPractitioners.RowInserting
        Dim DetailsOfMedicalPractitionersItem As InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitioners = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitioners()
        GetViewStateDetailsOfMedicalPractitionersList()
        
        With DetailsOfMedicalPractitionersItem
             If _DetailsOfMedicalPractitionersList.Count = 0 Then
              .IdDetails = 1
           Else
              .IdDetails = (Aggregate _itemData In _DetailsOfMedicalPractitionersList Into Max(_itemData.IdDetails)) + 1
          End If            
                    .PractitionerName = e.NewValues("PractitionerName") 

                    .PhonePractitioner = e.NewValues("PhonePractitioner") 

                    .eMailPractitioner = e.NewValues("eMailPractitioner") 

                    .AddresPractitioner = e.NewValues("AddresPractitioner") 


        End With

        _DetailsOfMedicalPractitionersList.Add(DetailsOfMedicalPractitionersItem)
         DetailsOfMedicalPractitioners.CancelEdit()
        
        If ViewState("DetailsOfMedicalPractitionersOperationType") = "Add" Then
            DetailsOfMedicalPractitioners.AddNewRow()
        End If

        e.Cancel = True
        SetDetailsOfMedicalPractitionersListDataBind()
    End Sub
    
    Protected Sub DetailsOfMedicalPractitioners_RowUpdating(sender As Object, e As DevExpress.Web.Data.ASPxDataUpdatingEventArgs) Handles DetailsOfMedicalPractitioners.RowUpdating
        Dim DetailsOfMedicalPractitionersItem As InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitioners = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitioners() 
        Dim IdDetails As String = e.Keys("IdDetails")
        
        GetViewStateDetailsOfMedicalPractitionersList()
                   
        For index As Integer = 0 To _DetailsOfMedicalPractitionersList.Count - 1
            If _DetailsOfMedicalPractitionersList(index).IdDetails = IdDetails Then
                
                With _DetailsOfMedicalPractitionersList(index)
                    .PractitionerName = e.NewValues("PractitionerName") 

                    .PhonePractitioner = e.NewValues("PhonePractitioner") 

                    .eMailPractitioner = e.NewValues("eMailPractitioner") 

                    .AddresPractitioner = e.NewValues("AddresPractitioner") 

                
                End With
                
                Exit For
            End If
        Next

        SetDetailsOfMedicalPractitionersListDataBind()

        DetailsOfMedicalPractitioners.CancelEdit()
        e.Cancel = True
    End Sub

    Protected Sub DetailsOfMedicalPractitioners_RowDeleting(sender As Object, e As DevExpress.Web.Data.ASPxDataDeletingEventArgs) Handles DetailsOfMedicalPractitioners.RowDeleting
       Dim IdDetails As String = e.Keys("IdDetails")
       
       GetViewStateDetailsOfMedicalPractitionersList()
       
       For index As Integer = 0 To _DetailsOfMedicalPractitionersList.Count - 1
           If _DetailsOfMedicalPractitionersList(index).IdDetails = IdDetails Then
             _DetailsOfMedicalPractitionersList.RemoveAt(index)
             
             Exit For
           End If
       Next       
       
        SetDetailsOfMedicalPractitionersListDataBind()
        e.Cancel = True        
    End Sub

    Private Sub SetDetailsOfMedicalPractitionersListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As HeartDiseaseQuestionnaireUWParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.HeartDiseaseQuestionnaire.DetailsOfSpecialists = _DetailsOfMedicalPractitionersList
        DetailsOfMedicalPractitioners.DataSource = _DetailsOfMedicalPractitionersList
        DetailsOfMedicalPractitioners.DataBind()
   End Sub

    Private Sub GetViewStateDetailsOfMedicalPractitionersList()
        Dim FormData As HeartDiseaseQuestionnaireUWParameter

         GetCurrentParameterInstance(FormData, True)

        _DetailsOfMedicalPractitionersList = FormData.HeartDiseaseQuestionnaire.DetailsOfSpecialists

        If IsNothing(_DetailsOfMedicalPractitionersList) Then
            _DetailsOfMedicalPractitionersList = New InMotionGIT.Questionnaires.Complements.DetailsOfMedicalPractitionersCollection()
        End If        
    End Sub
     
    
        
    
#End Region
#Region "TreatmentPrescribed GridView Controls with dependencies Events"
    


#End Region

#Region "TreatmentPrescribed GridView editing support"

    Private _TreatmentPrescribedList As InMotionGIT.Questionnaires.Complements.TreatmentPrescribedCollection = Nothing

    Protected Sub TreatmentPrescribed_DataBinding(sender As Object, e As EventArgs) Handles TreatmentPrescribed.DataBinding
        
 
            If IsNothing(FormData.HeartDiseaseQuestionnaire) Then
                FormData.HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire()
            End If
            If IsNothing(FormData.HeartDiseaseQuestionnaire.DetailsMedicationsTaking) Then
                FormData.HeartDiseaseQuestionnaire.DetailsMedicationsTaking = New InMotionGIT.Questionnaires.Complements.TreatmentPrescribedCollection()
            End If

        _TreatmentPrescribedList = FormData.HeartDiseaseQuestionnaire.DetailsMedicationsTaking
        TreatmentPrescribed.DataSource = _TreatmentPrescribedList
        
    End Sub
    
    Protected Sub TreatmentPrescribed_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles TreatmentPrescribed.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub
    
    Protected Sub TreatmentPrescribed_CellEditorInitialize(sender As Object, e As DevExpress.Web.ASPxGridView.ASPxGridViewEditorEventArgs) Handles TreatmentPrescribed.CellEditorInitialize
        If TreatmentPrescribed.IsNewRowEditing Then
            Select Case e.Column.FieldName



                Case "DatePeriod"                     
                       e.Editor.Focus()               
            End Select

        Else
            Select Case e.Column.FieldName
                   


                Case "DatePeriod"                     
                       e.Editor.Focus() 
            End Select
        End If
        
        Select Case e.Column.FieldName

            Case "DatePeriod"
                  
                 

        End Select
    End Sub      
            
    Protected Sub TreatmentPrescribed_ParseValue(sender As Object, e As DevExpress.Web.Data.ASPxParseValueEventArgs) Handles TreatmentPrescribed.ParseValue
        Select Case e.FieldName

        End Select
    End Sub    
    
 
  
  
    Protected Sub TreatmentPrescribed_RowInserting(sender As Object, e As DevExpress.Web.Data.ASPxDataInsertingEventArgs) Handles TreatmentPrescribed.RowInserting
        Dim TreatmentPrescribedItem As InMotionGIT.Questionnaires.Complements.TreatmentPrescribed = New InMotionGIT.Questionnaires.Complements.TreatmentPrescribed()
        GetViewStateTreatmentPrescribedList()
        
        With TreatmentPrescribedItem
             If _TreatmentPrescribedList.Count = 0 Then
              .id = 1
           Else
              .id = (Aggregate _itemData In _TreatmentPrescribedList Into Max(_itemData.id)) + 1
          End If            
                    .DatePeriod = e.NewValues("DatePeriod") 

                    .Dosage = e.NewValues("Dosage") 

                    .NameOfMedication = e.NewValues("NameOfMedication") 


        End With

        _TreatmentPrescribedList.Add(TreatmentPrescribedItem)
         TreatmentPrescribed.CancelEdit()
        
        If ViewState("TreatmentPrescribedOperationType") = "Add" Then
            TreatmentPrescribed.AddNewRow()
        End If

        e.Cancel = True
        SetTreatmentPrescribedListDataBind()
    End Sub
    
    Protected Sub TreatmentPrescribed_RowUpdating(sender As Object, e As DevExpress.Web.Data.ASPxDataUpdatingEventArgs) Handles TreatmentPrescribed.RowUpdating
        Dim TreatmentPrescribedItem As InMotionGIT.Questionnaires.Complements.TreatmentPrescribed = New InMotionGIT.Questionnaires.Complements.TreatmentPrescribed() 
        Dim id As String = e.Keys("id")
        
        GetViewStateTreatmentPrescribedList()
                   
        For index As Integer = 0 To _TreatmentPrescribedList.Count - 1
            If _TreatmentPrescribedList(index).id = id Then
                
                With _TreatmentPrescribedList(index)
                    .DatePeriod = e.NewValues("DatePeriod") 

                    .Dosage = e.NewValues("Dosage") 

                    .NameOfMedication = e.NewValues("NameOfMedication") 

                
                End With
                
                Exit For
            End If
        Next

        SetTreatmentPrescribedListDataBind()

        TreatmentPrescribed.CancelEdit()
        e.Cancel = True
    End Sub

    Protected Sub TreatmentPrescribed_RowDeleting(sender As Object, e As DevExpress.Web.Data.ASPxDataDeletingEventArgs) Handles TreatmentPrescribed.RowDeleting
       Dim id As String = e.Keys("id")
       
       GetViewStateTreatmentPrescribedList()
       
       For index As Integer = 0 To _TreatmentPrescribedList.Count - 1
           If _TreatmentPrescribedList(index).id = id Then
             _TreatmentPrescribedList.RemoveAt(index)
             
             Exit For
           End If
       Next       
       
        SetTreatmentPrescribedListDataBind()
        e.Cancel = True        
    End Sub

    Private Sub SetTreatmentPrescribedListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As HeartDiseaseQuestionnaireUWParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.HeartDiseaseQuestionnaire.DetailsMedicationsTaking = _TreatmentPrescribedList
        TreatmentPrescribed.DataSource = _TreatmentPrescribedList
        TreatmentPrescribed.DataBind()
   End Sub

    Private Sub GetViewStateTreatmentPrescribedList()
        Dim FormData As HeartDiseaseQuestionnaireUWParameter

         GetCurrentParameterInstance(FormData, True)

        _TreatmentPrescribedList = FormData.HeartDiseaseQuestionnaire.DetailsMedicationsTaking

        If IsNothing(_TreatmentPrescribedList) Then
            _TreatmentPrescribedList = New InMotionGIT.Questionnaires.Complements.TreatmentPrescribedCollection()
        End If        
    End Sub
     
    
        
    
#End Region
#Region "DetailsAbsensesFromWork GridView Controls with dependencies Events"
    


#End Region

#Region "DetailsAbsensesFromWork GridView editing support"

    Private _DetailsAbsensesFromWorkList As InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWorkCollection = Nothing

    Protected Sub DetailsAbsensesFromWork_DataBinding(sender As Object, e As EventArgs) Handles DetailsAbsensesFromWork.DataBinding
        
 
            If IsNothing(FormData.HeartDiseaseQuestionnaire) Then
                FormData.HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire()
            End If
            If IsNothing(FormData.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle) Then
                FormData.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle = New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWorkCollection()
            End If

        _DetailsAbsensesFromWorkList = FormData.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle
        DetailsAbsensesFromWork.DataSource = _DetailsAbsensesFromWorkList
        
    End Sub
    
    Protected Sub DetailsAbsensesFromWork_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles DetailsAbsensesFromWork.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub
    
    Protected Sub DetailsAbsensesFromWork_CellEditorInitialize(sender As Object, e As DevExpress.Web.ASPxGridView.ASPxGridViewEditorEventArgs) Handles DetailsAbsensesFromWork.CellEditorInitialize
        If DetailsAbsensesFromWork.IsNewRowEditing Then
            Select Case e.Column.FieldName



                Case "DateFrom"                     
                       e.Editor.Focus()               
            End Select

        Else
            Select Case e.Column.FieldName
                   


                Case "DateFrom"                     
                       e.Editor.Focus() 
            End Select
        End If
        
        Select Case e.Column.FieldName

            Case "DateFrom"
                  
                 

        End Select
    End Sub      
            
    Protected Sub DetailsAbsensesFromWork_ParseValue(sender As Object, e As DevExpress.Web.Data.ASPxParseValueEventArgs) Handles DetailsAbsensesFromWork.ParseValue
        Select Case e.FieldName

        End Select
    End Sub    
    
 
  
  
    Protected Sub DetailsAbsensesFromWork_RowInserting(sender As Object, e As DevExpress.Web.Data.ASPxDataInsertingEventArgs) Handles DetailsAbsensesFromWork.RowInserting
        Dim DetailsAbsensesFromWorkItem As InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWork = New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWork()
        GetViewStateDetailsAbsensesFromWorkList()
        
        With DetailsAbsensesFromWorkItem
             If _DetailsAbsensesFromWorkList.Count = 0 Then
              .id = 1
           Else
              .id = (Aggregate _itemData In _DetailsAbsensesFromWorkList Into Max(_itemData.id)) + 1
          End If            
                    .DateFrom = e.NewValues("DateFrom") 

                    .DateTo = e.NewValues("DateTo") 

                    .Details = e.NewValues("Details") 


        End With

        _DetailsAbsensesFromWorkList.Add(DetailsAbsensesFromWorkItem)
         DetailsAbsensesFromWork.CancelEdit()
        
        If ViewState("DetailsAbsensesFromWorkOperationType") = "Add" Then
            DetailsAbsensesFromWork.AddNewRow()
        End If

        e.Cancel = True
        SetDetailsAbsensesFromWorkListDataBind()
    End Sub
    
    Protected Sub DetailsAbsensesFromWork_RowUpdating(sender As Object, e As DevExpress.Web.Data.ASPxDataUpdatingEventArgs) Handles DetailsAbsensesFromWork.RowUpdating
        Dim DetailsAbsensesFromWorkItem As InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWork = New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWork() 
        Dim id As String = e.Keys("id")
        
        GetViewStateDetailsAbsensesFromWorkList()
                   
        For index As Integer = 0 To _DetailsAbsensesFromWorkList.Count - 1
            If _DetailsAbsensesFromWorkList(index).id = id Then
                
                With _DetailsAbsensesFromWorkList(index)
                    .DateFrom = e.NewValues("DateFrom") 

                    .DateTo = e.NewValues("DateTo") 

                    .Details = e.NewValues("Details") 

                
                End With
                
                Exit For
            End If
        Next

        SetDetailsAbsensesFromWorkListDataBind()

        DetailsAbsensesFromWork.CancelEdit()
        e.Cancel = True
    End Sub

    Protected Sub DetailsAbsensesFromWork_RowDeleting(sender As Object, e As DevExpress.Web.Data.ASPxDataDeletingEventArgs) Handles DetailsAbsensesFromWork.RowDeleting
       Dim id As String = e.Keys("id")
       
       GetViewStateDetailsAbsensesFromWorkList()
       
       For index As Integer = 0 To _DetailsAbsensesFromWorkList.Count - 1
           If _DetailsAbsensesFromWorkList(index).id = id Then
             _DetailsAbsensesFromWorkList.RemoveAt(index)
             
             Exit For
           End If
       Next       
       
        SetDetailsAbsensesFromWorkListDataBind()
        e.Cancel = True        
    End Sub

    Private Sub SetDetailsAbsensesFromWorkListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As HeartDiseaseQuestionnaireUWParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle = _DetailsAbsensesFromWorkList
        DetailsAbsensesFromWork.DataSource = _DetailsAbsensesFromWorkList
        DetailsAbsensesFromWork.DataBind()
   End Sub

    Private Sub GetViewStateDetailsAbsensesFromWorkList()
        Dim FormData As HeartDiseaseQuestionnaireUWParameter

         GetCurrentParameterInstance(FormData, True)

        _DetailsAbsensesFromWorkList = FormData.HeartDiseaseQuestionnaire.DetailsRestrictedInLifeStyle

        If IsNothing(_DetailsAbsensesFromWorkList) Then
            _DetailsAbsensesFromWorkList = New InMotionGIT.Questionnaires.Complements.DetailsAbsensesFromWorkCollection()
        End If        
    End Sub
     
    
        
    
#End Region







#Region "AutoPostBack Events Handles"

Protected Sub button8_Click(sender As Object, e As EventArgs)  
        Dim HeartDiseaseQuestionnaireUWParameterInstance As HeartDiseaseQuestionnaireUWParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
        Dim currentAction As String = SessionTrace("button8_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(HeartDiseaseQuestionnaireUWParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. The message 'El cuestionario será...' will displayed as 'Splash'") 
            messageAction = "El cuestionario será almacenado temporalmente. Recuerde que debe ser llenado para que su solicitud sea procesada. Muchas gracias." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            HeartDiseaseQuestionnaireUWTablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(HeartDiseaseQuestionnaireUWParameterInstance,"")
          
        
          If HeartDiseaseQuestionnaireUWParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(HeartDiseaseQuestionnaireUWParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(HeartDiseaseQuestionnaireUWParameterInstance.NotifyMessage)
             End If           
            
             HeartDiseaseQuestionnaireUWParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(HeartDiseaseQuestionnaireUWParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(HeartDiseaseQuestionnaireUWParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   HeartDiseaseQuestionnaireUWUpdatePanel.Update
      End Try
      
    End Sub
Protected Sub button7_Click(sender As Object, e As EventArgs)  
        Dim HeartDiseaseQuestionnaireUWParameterInstance As HeartDiseaseQuestionnaireUWParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
        Dim currentAction As String = SessionTrace("button7_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim WorkflowInArguments  As New Dictionary(Of String, Object)
Dim WorkflowOutArguments As IDictionary(Of String, Object)


        
           
        
           GetCurrentParameterInstance(HeartDiseaseQuestionnaireUWParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. _formData.uwCaseIdInt64 = convert.ToInt64(_formData.uwcaseid)...") 
 
            currentAction = SessionTrace("1.1. _formData.uwCaseIdInt64 = convert.ToInt64(_formData.uwcaseid)...")

 _formData.uwCaseIdInt64 = convert.ToInt64(_formData.uwcaseid) 

            currentAction = SessionTrace("2. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("uwcaseid", _formData.uwCaseIdInt64) 
                .Add("uwreqid", _formData.uwreqid) 
                .Add("ClientName", _formData.ClientName) 
                .Add("StatusCase", _formData.StatusCase) 
                .Add("StatusRequirement", _formData.StatusRequirement) 
                .Add("RiskInformation", _formData.RiskInformation) 
                .Add("Identifier", "Heart") 
                .Add("context", _formContext) 
                .Add("caseLocked", _formData.caseLocked) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                _formData.uwreqid = WorkflowOutArguments("uwreqid")
                _formData.ClientName = WorkflowOutArguments("ClientName")
                _formData.StatusCase = WorkflowOutArguments("StatusCase")
                _formData.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                _formData.RiskInformation = WorkflowOutArguments("RiskInformation")

            currentAction = SessionTrace("3. If _formData.StatusRequirement <> 1 Then") 
If _formData.StatusRequirement <> 1 Then

            currentAction = SessionTrace("4. The message 'El estado del cuesti...' will displayed as 'Splash'") 
            messageAction = "El estado del cuestionario no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            HeartDiseaseQuestionnaireUWTablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

        Else 
            currentAction = SessionTrace("5. Call Shared Function 'User Profile' without parameters") 
            Dim _ClientUser_35b7f22eae074129a4230b9850bf782e As InMotionGIT.Client.Entity.Contracts.Client 
            

      If Not IsNothing(UserInfo) AndAlso Not IsNothing(UserInfo.User) then
         _ClientUser_35b7f22eae074129a4230b9850bf782e = New InMotionGIT.Client.Entity.Contracts.Client

         With _ClientUser_35b7f22eae074129a4230b9850bf782e
             .ClientID = UserInfo.User.ClientID
             .FirstName = UserInfo.User.FirstName
             .LastName = UserInfo.User.LastName
             .LastName2 = UserInfo.User.SecondLastName
             .BirthDate = UserInfo.User.DateOfBirth
             .LegalName = UserInfo.User.CompanyName
             .GenderEnum = IIf(UserInfo.User.Gender = "Male", InMotionGIT.Common.Contracts.Enumerations.EnumGender.Male, InMotionGIT.Common.Contracts.Enumerations.EnumGender.Female)
             .eMailAddressDefault = UserInfo.User.Email
             .CompleteClientName = .CompleteClientNameValid
         End With

	isNullResult = (IsNothing(_ClientUser_35b7f22eae074129a4230b9850bf782e))
	isFoundData  = Not isNullResult
      End If
     
            _formData.ClientUser = _ClientUser_35b7f22eae074129a4230b9850bf782e 

            currentAction = SessionTrace("6. _formData.UsercodeFASI = UserInfo.UserId...") 
 
            currentAction = SessionTrace("6.1. _formData.UsercodeFASI = UserInfo.UserId...")

 _formData.UsercodeFASI = UserInfo.UserId 
            currentAction = SessionTrace("6.2. _formData.IsAnonymous = UserInfo.IsAnonymous()...")

 _formData.IsAnonymous = UserInfo.IsAnonymous() 

            currentAction = SessionTrace("7. If _formData.IsAnonymous = true Then") 
If _formData.IsAnonymous = true Then

            currentAction = SessionTrace("8. _formData.UsercodeFASI = 9998...") 
 
            currentAction = SessionTrace("8.1. _formData.UsercodeFASI = 9998...")

 _formData.UsercodeFASI = 9998 

            End If
            currentAction = SessionTrace("9. If _formData.caseLocked = true Then") 
If _formData.caseLocked = true Then

            currentAction = SessionTrace("10. Call 'Main Process Questionnaire Heart' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("uwcaseid", _formData.uwCaseIdInt64) 
                .Add("uwreqid", _formData.uwreqid) 
                .Add("HeartDiseaseQuestionnaire", _formData.HeartDiseaseQuestionnaire) 
                .Add("context", _formContext) 
                .Add("ConnectedUserCode", _formData.UsercodeFASI) 
                .Add("caseLocked", _formData.caseLocked) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireRulesHeartUW", "ABC47974-1915-43E8-8A6C-4D0E7FD8B606", 14, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                _formData.uwreqid = WorkflowOutArguments("uwreqid")
                _formData.HeartDiseaseQuestionnaire = WorkflowOutArguments("HeartDiseaseQuestionnaire")

            currentAction = SessionTrace("11. Url: '#setting.Url.WebApplication#/Underwriting/UnderwritingPanel.aspx'") 
    
_webtransfer = String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") +"/Underwriting/UnderwritingPanel.aspx"+"?closeWindow={0}","1") 
        Else 
            currentAction = SessionTrace("12. The message 'El cuestionario será...' will displayed as 'Splash'") 
            messageAction = "El cuestionario será procesado. Muchas gracias." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            HeartDiseaseQuestionnaireUWTablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            currentAction = SessionTrace("13. Call 'Main Process Questionnaire Heart' workflow in Asynchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("uwcaseid", _formData.uwCaseIdInt64) 
                .Add("uwreqid", _formData.uwreqid) 
                .Add("HeartDiseaseQuestionnaire", _formData.HeartDiseaseQuestionnaire) 
                .Add("context", _formContext) 
                .Add("ConnectedUserCode", _formData.UsercodeFASI) 
                .Add("caseLocked", _formData.caseLocked) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("QuestionnaireRulesHeartUW", "ABC47974-1915-43E8-8A6C-4D0E7FD8B606", 12, WorkflowInArguments, True, False, Me.AppRelativeVirtualPath, _formData.InternalId)
 
            End If
            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(HeartDiseaseQuestionnaireUWParameterInstance,"")
          
        
          If HeartDiseaseQuestionnaireUWParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(HeartDiseaseQuestionnaireUWParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(HeartDiseaseQuestionnaireUWParameterInstance.NotifyMessage)
             End If           
            
             HeartDiseaseQuestionnaireUWParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(HeartDiseaseQuestionnaireUWParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(HeartDiseaseQuestionnaireUWParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   HeartDiseaseQuestionnaireUWUpdatePanel.Update
      End Try
      
    End Sub


#End Region

#Region "UserControls Events Handles"

    



#End Region

#Region "Form Manager"

    Private Sub VerifySecurityLevel()








    End Sub

      

    Private Sub GetCurrentParameterInstance(ByRef HeartDiseaseQuestionnaireUWParameterInstance As HeartDiseaseQuestionnaireUWParameter, force As Boolean)
        If _loadcompleted Or force Then
            If Not _CurrentParameterInstance Then

                HeartDiseaseQuestionnaireUWParameterInstance = FormData

                If Page.IsPostBack Then
                    MapPageToClass(HeartDiseaseQuestionnaireUWParameterInstance)
                End If

                _CurrentParameterInstance = True
            Else
                HeartDiseaseQuestionnaireUWParameterInstance = _formData
            End If
        Else
            HeartDiseaseQuestionnaireUWParameterInstance = Nothing
        End If
    End Sub

    Protected Sub SetCurrentParameterInstance(ByRef HeartDiseaseQuestionnaireUWParameterInstance As HeartDiseaseQuestionnaireUWParameter, calledBy As String)
        FormData = HeartDiseaseQuestionnaireUWParameterInstance
        MapClassToPage(HeartDiseaseQuestionnaireUWParameterInstance,calledBy)
    End Sub

    Protected Sub SetErrors(errors As InMotionGIT.Common.Contracts.Errors.ErrorCollection)
        Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

        If IsNothing(errorList) Then
            errorList = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
        End If

        errorList = errors

        ViewState("Errors") = errorList
        ShowErrors()
    End Sub

    Public Sub ShowErrors()
        If Not IsNothing(ViewState("Errors")) Then
            Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

            Dim queryOut = From lst In errorList Select lst Order By lst.ErrorId

            ErrorsGridView.Visible = True
            ErrorsGridView.DataSource = queryOut.ToList
            ErrorsGridView.DataBind()
            UpdatePanelErrors.Update()
        End If
    End Sub
   
    Private Sub ShowWindowPopupMessage(message As String)
        NotifyMessageLabel.Text = message
        popupNotifyMessage.ShowOnPageLoad = True
    End Sub

    Private Sub ClosePopupWindow()
        popControl.Windows(0).ShowOnPageLoad = False
    End Sub

    Private Sub GetTransferParameters()
        Dim fromDocumentCache As Object = Nothing

        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) Then
            fromDocumentCache = Session( Request.QueryString("fromid"))
            Session.Remove(Request.QueryString("fromid"))
            
        Else
            fromDocumentCache = Session(Session("fromid"))
            Session.Remove(Session("fromid"))
            Session.Remove("fromid")   
        End If
        
        If Not IsNothing(fromDocumentCache) Then
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("HeartDiseaseQuestionnaire", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientName", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusCase", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRequirement", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("fromPanel", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("caseLocked", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsAnonymous", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeFASI", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwCaseIdInt64", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientUser", fromDocumentCache, _formData)
            
        End If
    End Sub
    
    

    Private Sub SetDefaultValuesFromQueryString()

        If Request.Form("uwcaseid").IsNotEmpty Then
                FormData.uwcaseid = Request.Form("uwcaseid") 

ElseIf Request.QueryString("uwcaseid").IsNotEmpty Then
                FormData.uwcaseid = Request.QueryString("uwcaseid") 
End If 

If Request.Form("uwreqid").IsNotEmpty Then
                FormData.uwreqid = Request.Form("uwreqid") 

ElseIf Request.QueryString("uwreqid").IsNotEmpty Then
                FormData.uwreqid = Request.QueryString("uwreqid") 
End If 

If Request.Form("ClientName").IsNotEmpty Then
                FormData.ClientName = Request.Form("ClientName") 

ElseIf Request.QueryString("ClientName").IsNotEmpty Then
                FormData.ClientName = Request.QueryString("ClientName") 
End If 

If Request.Form("StatusCase").IsNotEmpty Then
                FormData.StatusCase = Request.Form("StatusCase") 

ElseIf Request.QueryString("StatusCase").IsNotEmpty Then
                FormData.StatusCase = Request.QueryString("StatusCase") 
End If 

If Request.Form("StatusRequirement").IsNotEmpty Then
                FormData.StatusRequirement = Request.Form("StatusRequirement") 

ElseIf Request.QueryString("StatusRequirement").IsNotEmpty Then
                FormData.StatusRequirement = Request.QueryString("StatusRequirement") 
End If 

If Request.Form("fromPanel").IsNotEmpty Then
                FormData.fromPanel = Request.Form("fromPanel") 

ElseIf Request.QueryString("fromPanel").IsNotEmpty Then
                FormData.fromPanel = Request.QueryString("fromPanel") 
End If 

If Request.Form("caseLocked").IsNotEmpty Then
                FormData.caseLocked = Request.Form("caseLocked") 

ElseIf Request.QueryString("caseLocked").IsNotEmpty Then
                FormData.caseLocked = Request.QueryString("caseLocked") 
End If 

If Request.Form("IsAnonymous").IsNotEmpty Then
                FormData.IsAnonymous = Request.Form("IsAnonymous") 

ElseIf Request.QueryString("IsAnonymous").IsNotEmpty Then
                FormData.IsAnonymous = Request.QueryString("IsAnonymous") 
End If 

If Request.Form("UsercodeFASI").IsNotEmpty Then
                FormData.UsercodeFASI = Request.Form("UsercodeFASI") 

ElseIf Request.QueryString("UsercodeFASI").IsNotEmpty Then
                FormData.UsercodeFASI = Request.QueryString("UsercodeFASI") 
End If 

If Request.Form("uwCaseIdInt64").IsNotEmpty Then
                FormData.uwCaseIdInt64 = Request.Form("uwCaseIdInt64") 

ElseIf Request.QueryString("uwCaseIdInt64").IsNotEmpty Then
                FormData.uwCaseIdInt64 = Request.QueryString("uwCaseIdInt64") 
End If 


    End Sub
    
    Private Sub BehaviorControls(controlItem As Control, isEnable As Boolean)
        InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValueSimple("Enabled", controlItem, isEnable)           
    End Sub
    
    Private Sub SetReadOnlyControls()
    
        BehaviorControls(ClientName, False)
        BehaviorControls(uwcaseid, False)
        BehaviorControls(Cardiomyopathy, False)
        BehaviorControls(IschaemicHeartDisease, False)
        BehaviorControls(MitralOrOtherValve, False)
        BehaviorControls(OtherDiagnosis, False)
        BehaviorControls(DetailsSpecificDiagnosis, False)
        BehaviorControls(SymptomsAccompaniedByOther, False)
        BehaviorControls(DescribeBodySymptoms, False)
        BehaviorControls(DateSymptomsInitiallyOccur, False)
        BehaviorControls(SymptomsRelatedWithEvent, False)
        BehaviorControls(FrequencyOfTheSymptoms, False)
        BehaviorControls(DetailsEventRelated, False)
        BehaviorControls(DuringOfTheSymptoms, False)
        BehaviorControls(DateOfLastOccurrence, False)
        BehaviorControls(Suddenly, False)
        BehaviorControls(Gradually, False)
        BehaviorControls(AtRest, False)
        BehaviorControls(OnlyOnPhysicalActivity, False)
        BehaviorControls(SymptomsBetter, False)
        BehaviorControls(SymptomsWorse, False)
        BehaviorControls(YesConsultedSpecialist, False)
        BehaviorControls(btnADDDetailsOfMedicalPractitioners, False)
        BehaviorControls(DetailsOfMedicalPractitioners, False)
        BehaviorControls(TypeTreatmentHad, False)
        BehaviorControls(StillReceivingTreatment, False)
        BehaviorControls(DetailsStillRecievingTreatment, False)
        BehaviorControls(SurgeryOrInvestigationContemplated, False)
        BehaviorControls(btnADDTreatmentPrescribed, False)
        BehaviorControls(TreatmentPrescribed, False)
        BehaviorControls(CoronaryAngiogram, False)
        BehaviorControls(ThalliumPerfusionScan, False)
        BehaviorControls(Resting, False)
        BehaviorControls(Exercise, False)
        BehaviorControls(Endoscopy, False)
        BehaviorControls(Echocardiogram, False)
        BehaviorControls(SestamibiStress, False)
        BehaviorControls(Other, False)
        BehaviorControls(SpecifyOther, False)
        BehaviorControls(YesRestrictedInLifeStyle, False)
        BehaviorControls(btnADDDetailsAbsensesFromWork, False)
        BehaviorControls(DetailsAbsensesFromWork, False)
        BehaviorControls(AdditionalInformation, False)
        BehaviorControls(DateReceived, False)
        BehaviorControls(button8, False)
        BehaviorControls(button7, False)
    
    End Sub
     
#End Region

#Region "Actions Data Methods"

    Private Function SessionTrace(message As String) As String

        If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
            Dim tracelog As String = Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath)))

            tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
            Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = tracelog
        End If

        Return message
    End Function
    
    Private Sub ControlsInitialization()
        DetailsOfMedicalPractitioners.ClientVisible = True
        DetailsOfMedicalPractitioners.Enabled = True
        TreatmentPrescribed.ClientVisible = True
        TreatmentPrescribed.Enabled = True
        DetailsAbsensesFromWork.ClientVisible = True
        DetailsAbsensesFromWork.Enabled = True

    End Sub     
  
    Private Sub ParametersToDictionary(ByRef target As Dictionary(Of String, Object))
        If IsNothing(target) Then
            target = New Dictionary(Of String, Object)

            target.Add("HeartDiseaseQuestionnaire", _formData.HeartDiseaseQuestionnaire) 
            target.Add("uwcaseid", _formData.uwcaseid) 
            target.Add("uwreqid", _formData.uwreqid) 
            target.Add("ClientName", _formData.ClientName) 
            target.Add("StatusCase", _formData.StatusCase) 
            target.Add("StatusRequirement", _formData.StatusRequirement) 
            target.Add("RiskInformation", _formData.RiskInformation) 
            target.Add("fromPanel", _formData.fromPanel) 
            target.Add("caseLocked", _formData.caseLocked) 
            target.Add("IsAnonymous", _formData.IsAnonymous) 
            target.Add("UsercodeFASI", _formData.UsercodeFASI) 
            target.Add("uwCaseIdInt64", _formData.uwCaseIdInt64) 
            target.Add("ClientUser", _formData.ClientUser) 

        Else
            target("HeartDiseaseQuestionnaire") = _formData.HeartDiseaseQuestionnaire 
            target("uwcaseid") = _formData.uwcaseid 
            target("uwreqid") = _formData.uwreqid 
            target("ClientName") = _formData.ClientName 
            target("StatusCase") = _formData.StatusCase 
            target("StatusRequirement") = _formData.StatusRequirement 
            target("RiskInformation") = _formData.RiskInformation 
            target("fromPanel") = _formData.fromPanel 
            target("caseLocked") = _formData.caseLocked 
            target("IsAnonymous") = _formData.IsAnonymous 
            target("UsercodeFASI") = _formData.UsercodeFASI 
            target("uwCaseIdInt64") = _formData.uwCaseIdInt64 
            target("ClientUser") = _formData.ClientUser 

        End If     
    End Sub
    
    Private Sub ExecuteActionsLoadForm()
                    Dim currentAction As String = SessionTrace("ActionsLoadForm")
                    
                    Try                          
                        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
                        Dim messageAction As String = String.Empty
                        Dim lastURL As String = String.Empty
                        Dim isNullResult As Boolean = True 
                        Dim isFoundData As Boolean  = False  
                        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
                        
                        ParametersToDictionary(parametersDictionary) 
                        
                        Dim WorkflowInArguments As New Dictionary(Of String, Object) 
 Dim WorkflowOutArguments As IDictionary(Of String, Object) 
   
                                                
                                    currentAction = SessionTrace("1. _formData.uwCaseIdInt64 = convert.ToInt64(_formData.uwcaseid)...") 
 
            currentAction = SessionTrace("1.1. _formData.uwCaseIdInt64 = convert.ToInt64(_formData.uwcaseid)...")

 _formData.uwCaseIdInt64 = convert.ToInt64(_formData.uwcaseid) 

            currentAction = SessionTrace("2. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("uwcaseid", _formData.uwCaseIdInt64) 
                .Add("uwreqid", _formData.uwreqid) 
                .Add("ClientName", _formData.ClientName) 
                .Add("StatusCase", _formData.StatusCase) 
                .Add("StatusRequirement", _formData.StatusRequirement) 
                .Add("RiskInformation", _formData.RiskInformation) 
                .Add("Identifier", "Heart") 
                .Add("context", _formContext) 
                .Add("caseLocked", _formData.caseLocked) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                _formData.uwreqid = WorkflowOutArguments("uwreqid")
                _formData.ClientName = WorkflowOutArguments("ClientName")
                _formData.StatusCase = WorkflowOutArguments("StatusCase")
                _formData.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                _formData.RiskInformation = WorkflowOutArguments("RiskInformation")

            currentAction = SessionTrace("3. If _formData.fromPanel = true Then") 
If _formData.fromPanel = true Then

            currentAction = SessionTrace("4. Questions.Enabled = false, zoned.Enabled = false, firma.Visible = false") 
            currentAction = SessionTrace("4.1. Questions.Enabled = false...")
BehaviorShowControls("Questions,Disabled")
            currentAction = SessionTrace("4.2. zoned.Enabled = false...")
BehaviorShowControls("zoned,Disabled")
            currentAction = SessionTrace("4.3. firma.Visible = false...")
BehaviorShowControls("firma,Hidden")

            End If

                        
                        currentAction = String.Empty
                         
                    Catch ex As Exception
                        InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
						_formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

                        If Request.QueryString("debug").IsNotEmpty Then
                            FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                            FormMessageLabel.ForeColor = Drawing.Color.Black
                            FormMessageLabel.Font.Bold = True
                            MessageTable.Visible = True
                        End If
                        
                    Finally                     
                        If _formData.Errors.Count > 0 Then
                            SetErrors(_formData.Errors)
                        End If
                        
                        If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                            If Page.IsCallback Then
                                DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                            Else
                                Response.ClearHeaders()
                                Response.ClearContent()
                                Response.Redirect(_webTransfer)
                            End If
                        End If
                   End Try
                   
               End Sub
    Private Sub ExecuteActionsInitializationForm()
                    Dim currentAction As String = SessionTrace("ActionsInitializationForm")
                    
                    Try                          
                        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, formData.InternalId) With {.UserId = Session("UserId"), .UserCode = Session("nUsercode"), .SecuritySchemeCode = Session("sSche_code"), .AccessToken = Session("AccessToken")}
                        Dim messageAction As String = String.Empty
                        Dim lastURL As String = String.Empty
                        Dim isNullResult As Boolean = True 
                        Dim isFoundData As Boolean  = False 
                        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
                        
                        ParametersToDictionary(parametersDictionary)
                        Dim WorkflowInArguments As New Dictionary(Of String, Object) 
 Dim WorkflowOutArguments As IDictionary(Of String, Object) 
  
                        
                                    currentAction = SessionTrace("1. _formData.uwCaseIdInt64 = convert.ToInt64(_formData.uwcaseid)...") 
 
            currentAction = SessionTrace("1.1. _formData.uwCaseIdInt64 = convert.ToInt64(_formData.uwcaseid)...")

 _formData.uwCaseIdInt64 = convert.ToInt64(_formData.uwcaseid) 

            currentAction = SessionTrace("2. If _formData.uwCaseIdInt64 <> 0 Then") 
If _formData.uwCaseIdInt64 <> 0 Then

            currentAction = SessionTrace("3. Call 'Retrieve Case Information' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("uwcaseid", _formData.uwCaseIdInt64) 
                .Add("uwreqid", _formData.uwreqid) 
                .Add("ClientName", _formData.ClientName) 
                .Add("StatusCase", _formData.StatusCase) 
                .Add("StatusRequirement", _formData.StatusRequirement) 
                .Add("RiskInformation", _formData.RiskInformation) 
                .Add("Identifier", "HeartInitialization") 
                .Add("context", _formContext) 
                .Add("caseLocked", _formData.caseLocked) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformation", "1632D520-852F-46AD-8F03-D0A778676380", 10, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.uwCaseIdInt64 = WorkflowOutArguments("uwcaseid")
                _formData.uwreqid = WorkflowOutArguments("uwreqid")
                _formData.ClientName = WorkflowOutArguments("ClientName")
                _formData.StatusCase = WorkflowOutArguments("StatusCase")
                _formData.StatusRequirement = WorkflowOutArguments("StatusRequirement")
                _formData.RiskInformation = WorkflowOutArguments("RiskInformation")

            currentAction = SessionTrace("4. _formData.HeartDiseaseQuestionnaire.DateReceived = Date.Today...") 
 
            currentAction = SessionTrace("4.1. _formData.HeartDiseaseQuestionnaire.DateReceived = Date.Today...")
          If IsNothing(_formData.HeartDiseaseQuestionnaire) Then
              _formData.HeartDiseaseQuestionnaire = New InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire
          End If 

 _formData.HeartDiseaseQuestionnaire.DateReceived = Date.Today 

            currentAction = SessionTrace("5. If _formData.StatusRequirement <> 1 Then") 
If _formData.StatusRequirement <> 1 Then

            currentAction = SessionTrace("6. The message 'El estado del cuesti...' will displayed as 'Splash'") 
            messageAction = "El estado del cuestionario no permite ser llenado. Verifique la información que ha recibido por parte de la empresa de seguros." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            HeartDiseaseQuestionnaireUWTablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            End If
            End If

                        
                        currentAction = String.Empty
                         
                    Catch ex As Exception
                        InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
						_formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

                        If Request.QueryString("debug").IsNotEmpty Then
                            FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                            FormMessageLabel.ForeColor = Drawing.Color.Black
                            FormMessageLabel.Font.Bold = True
                            MessageTable.Visible = True
                        End If
                        
                    Finally                     
                        If _formData.Errors.Count > 0 Then
                            SetErrors(_formData.Errors)
                        End If
                        
                        If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                            If Page.IsCallback Then
                                DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                            Else
                                Response.Redirect(_webTransfer)
                            End If
                        End If
                   End Try
                   
               End Sub
    



    
#End Region

#Region "Storage Data Methods"

    Private Sub StoreFormInformation()
      If Not IsNothing(_formData) Then

            If _foundData Then
                UpdateStorageData()
            Else
                InsertStorageData()
            End If
       End If
End Sub

    Private Function RetrieveFormInformation() As Boolean
        Dim result As Boolean = False
        Dim records As DataTable

        With New DataManagerFactory("SELECT Content FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)
            records = .QueryExecuteToTable(True)
        End With

        If records.Rows.Count > 0 Then
            result = True            
            _formData = Serialize.Deserialize(Of HeartDiseaseQuestionnaireUWParameter)(records.Rows(0).Item("Content"))
        End If
        
        Return result
    End Function

    Private Sub InsertStorageData()
        With New DataManagerFactory("INSERT INTO FrontOffice.DocumentCache (FormId, ModelId, UserId, Page, Content, CreationDate, UpdateDate) VALUES(@:FormId, @:ModelId, @:UserId, @:Page, @:Content, @:CreationDate, @:UpdateDate)",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)
            .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "79203542-9EDC-4EDA-8992-4B042818D084")
            .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserName)
            .AddParameter("Page", DbType.AnsiString, 255, False, Me.AppRelativeVirtualPath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HeartDiseaseQuestionnaireUWParameter)(_formData))
            .AddParameter("CreationDate", DbType.DateTime, 20, False, Now)
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)

            .CommandExecute()
        End With
    End Sub

    Private Sub UpdateStorageData()
        With New DataManagerFactory("UPDATE FrontOffice.DocumentCache SET ModelId = @:ModelId, UserId = @:UserId, Page = @:Page, Content = @:Content, UpdateDate = @:UpdateDate WHERE FormId = @:FormId",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "79203542-9EDC-4EDA-8992-4B042818D084")
            .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserName)
            .AddParameter("Page", DbType.AnsiString, 255, False, Me.AppRelativeVirtualPath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of HeartDiseaseQuestionnaireUWParameter)(_formData))
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)

            .CommandExecute()
        End With
    End Sub

#End Region




End Class

<Serializable()>
Public Class HeartDiseaseQuestionnaireUWParameter
    Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of  HeartDiseaseQuestionnaireUWParameter)

    ' Methods
    Public Sub New()
        MyBase.New()
    End Sub

    ' Properties
    Public Property HeartDiseaseQuestionnaire As InMotionGIT.Questionnaires.HeartDiseaseQuestionnaire
    Public Property uwcaseid As Int64
    Public Property uwreqid As Int64
    Public Property ClientName As String
    Public Property StatusCase As Int32
    Public Property StatusRequirement As Int32
    Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
    Public Property fromPanel As Boolean
    Public Property caseLocked As Boolean
    Public Property IsAnonymous As Boolean
    Public Property UsercodeFASI As Int32
    Public Property uwCaseIdInt64 As Int64
    Public Property ClientUser As InMotionGIT.Client.Entity.Contracts.Client


End Class