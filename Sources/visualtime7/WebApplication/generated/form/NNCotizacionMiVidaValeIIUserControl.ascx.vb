'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer Oracle v7.1.1 at 2018-09-14 model release 59
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"
    
Imports Artem.Google.UI
Imports DashboardBusiness.Helpers
Imports DevExpress.Web
Imports DevExpress.Web.ASPxClasses
Imports DevExpress.Web.ASPxEditors
Imports DevExpress.Web.ASPxGridView
Imports GIT.Core
Imports InMotionGIT.FrontOffice.Support.Enumerations
Imports InMotionGIT.FrontOffice.Support.Helpers.ControlHandler
Imports InMotionGIT.BarCode
Imports InMotionGIT.BarCode.Enumerations
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo
Imports System.IO
Imports InMotionGIT.FrontOffice.Support
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data
Imports System.Data.Common
Imports System.Globalization
Imports System.Linq
Imports System.Threading.Thread
Imports System.Xml.Linq
Imports System.Net


#End Region

Partial Public Class NNCotizacionMiVidaValeIIUserControl
    Inherits GIT.Core.UserControlBase
    Implements Dropthings.Widget.Framework.IWidget

#Region "IWidget Members"
    
    
    

    Public Sub Closed() Implements Dropthings.Widget.Framework.IWidget.Closed
    End Sub

    Public Sub HideSettings() Implements Dropthings.Widget.Framework.IWidget.HideSettings

    End Sub

    Public Sub Init1(host As Dropthings.Widget.Framework.IWidgetHost) Implements Dropthings.Widget.Framework.IWidget.Init

    End Sub

    Public Sub Maximized() Implements Dropthings.Widget.Framework.IWidget.Maximized

    End Sub

    Public Sub Minimized() Implements Dropthings.Widget.Framework.IWidget.Minimized

    End Sub

    Public Sub ShowSettings() Implements Dropthings.Widget.Framework.IWidget.ShowSettings

    End Sub

#End Region

#Region "Private fields"

    Private _formData As NNCotizacionMiVidaValeIIParameter = Nothing
    Private _CurrentParameterInstance As Boolean = False
    Private _loading As Boolean = False
    Private _loadcompleted As Boolean = False
    Private _webTransfer as String  
    Private _foundData As Boolean = False
        
#End Region

#Region "Public properties"

    Public Property FormData() As NNCotizacionMiVidaValeIIParameter
        Get
            Dim formDefinition As String = String.Empty               
             
            If IsNothing(_formData) Then
                If Not IsPostBack Then
                    If Not String.IsNullOrEmpty(Request.QueryString("id")) Then
                        Dim _id As Guid
                        
                        If Guid.TryParse(Request.QueryString("id"), _id) Then
		                        _FormID.Text = Request.QueryString("id")  
                            
                            _foundData = RetrieveFormInformation()
                        End If
                    End If

                    If IsNothing(_formData) Then
                        _formData = New NNCotizacionMiVidaValeIIParameter
                       
                        If String.IsNullOrEmpty(_FormID.Text) Then
                        	_FormID.Text = System.Guid.NewGuid().ToString                       
                        End If
											
                        _formData.InternalId = _FormID.Text
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) OrElse
                           Not String.IsNullOrEmpty(Session("fromid")) Then
                           
                            GetTransferParameters()
                        End If
                        
                        
                        
                        SetDefaultValuesFromQueryString()
                        ValidateParametersInstance(_formData)
                        
                        popupNotifyMessage.ShowOnPageLoad = false                        
                        
                        ControlsInitialization()
                        ExecuteActionsInitializationForm()
                         
                        If Not String.IsNullOrEmpty(Request.QueryString("readonly")) Then
                            SetReadOnlyControls()
                        End If
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("Cotizar")) Then
                            Cotizar_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("Acepto")) Then
                            Acepto_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("btnAutenticar")) Then
                            btnAutenticar_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button8")) Then
                            button8_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button14")) Then
                            button14_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button1")) Then
                            button1_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button33")) Then
                            button33_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button12")) Then
                            button12_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("buttonGPago")) Then
                            buttonGPago_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button0")) Then
                            button0_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("button19")) Then
                            button19_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("EnviarCotizacionEmail")) Then
                            EnviarCotizacionEmail_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("Accept")) Then
                            Accept_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("Rechazar")) Then
                            Rechazar_Click(nothing, nothing)
                        End If

                    Else
                    		SetDefaultValuesFromQueryString()
                        ExecuteActionsLoadForm()
                    End If

                Else
                     _foundData = RetrieveFormInformation()                    

                    If IsNothing(_formData) Then
                        _formData = New NNCotizacionMiVidaValeIIParameter
                    End If
                End If
            End If

            Return _formData
        End Get

        Set(value As NNCotizacionMiVidaValeIIParameter)
            _formData = value
        End Set
    End Property
    
#End Region

#Region "Form Events"

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        ErrorsGridView.Visible = False
        
        
        
        Dim formData As NNCotizacionMiVidaValeIIParameter = Me.FormData        
           
        If Not IsPostBack  AndAlso Not GridViewPostBack() Then                     
            
            
            _loadcompleted = True
            
            
            If IsPostBack And Not _CurrentParameterInstance Then
                MapPageToClass(formData)
                _CurrentParameterInstance = True
            End If

            MapClassToPage(formData)
            VerifySecurityLevel()
            
            
        Else
            
            
            
        End If        
        
        
        
        
    End Sub    

    Protected Sub Page_Unload(sender As Object, e As EventArgs) Handles Me.Unload        
StoreFormInformation() 
        
        If Not IsNothing(_formData) Then
             If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
                 Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = _formData
             End If   
       
             If Not IsNothing(Session("Form.Track.Parameters")) AndAlso Session("Form.Track.Parameters").ToString.ToLower = "true" Then
                  InMotionGIT.Common.Helpers.Serialize.SerializeToFile(Of NNCotizacionMiVidaValeIIParameter) _
                  (formData, String.Format(CultureInfo.InvariantCulture, "{0}\{1}.NNCotizacionMiVidaValeII.xml",  ConfigurationManager.AppSettings("Path.Logs"), formData.InternalId), True)
             End If        
        End If  
   End Sub

#End Region

#Region "Controls Events"


    Private Function GridViewPostBack() As Boolean
        For index As Integer = 0 To Request.Params.Count - 1
            If Request.Params(index).EndsWith("$CoverageForAmendment") or Request.Params(index).EndsWith("$Beneficiary")  Then
                Return True
            End If
        Next
        
        Return False
    End Function    
    Protected Sub PaymentFrequency_Callback(sender As Object, e As CallbackEventArgsBase) Handles PaymentFrequency.Callback
               If Not String.IsNullOrEmpty(e.Parameter) Then
                   Dim parameters As String() = e.Parameter.Split(",")
                   Dim value As Integer = 0
                   
                   For index As Integer = 0 To parameters.Length - 1
                      Select Case index
                    Case 0
                        FormData.RiskInformation.LineOfBusiness = parameters(index)
                    Case 1
                        FormData.RiskInformation.ProductCode = parameters(index)
                    Case 2
                        FormData.RiskInformation.PaymentMethod = parameters(index)
                    Case 3
                        value = parameters(index)

                          
                      End Select                  
                   Next
               
                   PaymentFrequency_DataBinding(PaymentFrequency, New CallbackEventArgsBase(String.Empty))
                  PaymentFrequency.DataBind()  
                  
                   If value.IsNotEmpty Then
                       PaymentFrequency.SelectedItem = PaymentFrequency.Items.FindByValue(value)
                   End If
              End If
  End Sub
Protected Sub RiskInformationProductCode_Callback(sender As Object, e As CallbackEventArgsBase) Handles RiskInformationProductCode.Callback
               If Not String.IsNullOrEmpty(e.Parameter) Then
                   Dim parameters As String() = e.Parameter.Split(",")
                   Dim value As Integer = 0
                   
                   For index As Integer = 0 To parameters.Length - 1
                      Select Case index
                    Case 0
                        FormData.RiskInformation.LineOfBusiness = parameters(index)
                    Case 1
                        value = parameters(index)

                          
                      End Select                  
                   Next
               
                   RiskInformationProductCode_DataBinding(RiskInformationProductCode, New CallbackEventArgsBase(String.Empty))
                  RiskInformationProductCode.DataBind()  
                  
                   If value.IsNotEmpty Then
                       RiskInformationProductCode.SelectedItem = RiskInformationProductCode.Items.FindByValue(value)
                   End If
              End If
  End Sub
    
    Protected Sub Currency_DataBinding(sender As Object, e As EventArgs) Handles Currency.DataBinding
	Dim source As DataTable = Nothing

	With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
											  "SELECT  TABLE11.NCODIGINT, TABLE11.SDESCRIPT, TABLE11.SSTATREGT, TABLE11.SSHORT_DES FROM TABLE11 TABLE11  WHERE TABLE11.SSTATREGT = '{0}'  ORDER BY TABLE11.SDESCRIPT ASC", "1"), "TABLE11", "Linked.LatCombined")

		
		.Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
		source = .QueryExecuteToTable(True)
		Currency.DataSource = source
	End With
End Sub
Protected Sub PaymentFrequency_DataBinding(sender As Object, e As EventArgs) Handles PaymentFrequency.DataBinding
           With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                    "SELECT  TABLE36.NPAYFREQ, TABLE36.SSTATREGT, TABLE36.SDESCRIPT, PAY_FRACTI.NBRANCH, PAY_FRACTI.NPRODUCT, PAY_FRACTI.DNULLDATE, WAY_PAY_PROD.NWAY_PAY, WAY_PAY_PROD.DNULLDATE FROM TABLE36 TABLE36 JOIN PAY_FRACTI PAY_FRACTI ON PAY_FRACTI.NPAYFREQ = TABLE36.NPAYFREQ JOIN WAY_PAY_PROD WAY_PAY_PROD ON WAY_PAY_PROD.NBRANCH = PAY_FRACTI.NBRANCH  AND WAY_PAY_PROD.NPRODUCT = PAY_FRACTI.NPRODUCT  WHERE  ( TABLE36.SSTATREGT = '{0}' AND PAY_FRACTI.SSTATREGT = '{1}' AND PAY_FRACTI.DNULLDATE IS NULL AND WAY_PAY_PROD.DNULLDATE IS NULL )   AND (PAY_FRACTI.NBRANCH = @:PAY_FRACTINBRANCHDependen AND PAY_FRACTI.NPRODUCT = @:PAY_FRACTINPRODUCTDepende AND WAY_PAY_PROD.NWAY_PAY = @:WAY_PAY_PRODNWAY_PAYDepen AND NOT SDESCRIPT IS NULL) ORDER BY SDESCRIPT ", "1", "1"), 
                                                    "TABLE36", "Linked.LatCombined")                                                                      
                  .AddParameter("PAY_FRACTINBRANCHDependen", DbType.Int32, 0, False, FormData.RiskInformation.LineOfBusiness)
.AddParameter("PAY_FRACTINPRODUCTDepende", DbType.Int32, 0, False, FormData.RiskInformation.ProductCode)
.AddParameter("WAY_PAY_PRODNWAY_PAYDepen", DbType.Int32, 0, False, FormData.RiskInformation.PaymentMethod)

                  PaymentFrequency.DataSource = .QueryExecuteToTable(True)
           End With  
    End Sub
Protected Sub PaymentMethod_DataBinding(sender As Object, e As EventArgs) Handles PaymentMethod.DataBinding
	Dim source As DataTable = Nothing

	With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
											  "SELECT  TABLE5002.NWAY_PAY, TABLE5002.SSTATREGT, TABLE5002.SDESCRIPT FROM TABLE5002 TABLE5002  WHERE TABLE5002.SSTATREGT = '{0}'  AND NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", "1"), "TABLE5002", "Linked.LatCombined")

		
		.Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
		source = .QueryExecuteToTable(True)
		PaymentMethod.DataSource = source
	End With
End Sub
Protected Sub RelationshipBD_DataBinding(sender As Object, e As EventArgs) Handles RelationshipBD.DataBinding
	Dim source As DataTable = Nothing

	With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
											  "SELECT  TABLE55.NRELATION, TABLE55.SSTATREGT, TABLE55.SDESCRIPT FROM TABLE55 TABLE55  WHERE TABLE55.SSTATREGT = '{0}'  AND NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", "1"), "TABLE55", "Linked.LatCombined")

		
		.Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
		source = .QueryExecuteToTable(True)
		RelationshipBD.DataSource = source
	End With
End Sub
Protected Sub CreditCardType_DataBinding(sender As Object, e As EventArgs) Handles CreditCardType.DataBinding
	Dim source As DataTable = Nothing

	With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
											  "SELECT  TABLE183.NCARD_TYPE, TABLE183.SSTATREGT, TABLE183.SDESCRIPT FROM TABLE183 TABLE183  WHERE TABLE183.SSTATREGT = '{0}'  AND NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", "1"), "TABLE183", "Linked.LatCombined")

		
		.Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
		source = .QueryExecuteToTable(True)
		CreditCardType.DataSource = source
	End With
End Sub
Protected Sub BankCode_DataBinding(sender As Object, e As EventArgs) Handles BankCode.DataBinding
	Dim source As DataTable = Nothing

	With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
											  "SELECT  TABLE7.NBANK_CODE, TABLE7.SSTATREGT, TABLE7.SDESCRIPT FROM TABLE7 TABLE7  WHERE TABLE7.SSTATREGT = '{0}'  AND NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", "1"), "TABLE7", "Linked.LatCombined")

		
		.Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
		source = .QueryExecuteToTable(True)
		BankCode.DataSource = source
	End With
End Sub
Protected Sub LineOfBusiness_DataBinding(sender As Object, e As EventArgs) Handles LineOfBusiness.DataBinding
	Dim source As DataTable = Nothing

	With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
											  "SELECT  TABLE10.NBRANCH, TABLE10.SDESCRIPT FROM TABLE10 TABLE10  WHERE  ( TABLE10.SSTATREGT = 1 )   AND NOT SDESCRIPT IS NULL ORDER BY SDESCRIPT", "1"), "TABLE10", "Linked.LatCombined")

		
		.Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
		source = .QueryExecuteToTable(True)
		LineOfBusiness.DataSource = source
	End With
End Sub
Protected Sub RiskInformationProductCode_DataBinding(sender As Object, e As EventArgs) Handles RiskInformationProductCode.DataBinding
	Dim source As DataTable = Nothing

	With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
											  "SELECT  PRODMASTER.NBRANCH, PRODMASTER.NPRODUCT, PRODMASTER.SDESCRIPT FROM PRODMASTER PRODMASTER  WHERE PRODMASTER.SSTATREGT = 1  AND (PRODMASTER.NBRANCH = @:PRODMASTERNBRANCHDependen AND NOT SDESCRIPT IS NULL) ORDER BY SDESCRIPT ", "1"), "PRODMASTER", "Linked.LatCombined")

		.AddParameter("PRODMASTERNBRANCHDependen", DbType.Int32, 0, False, FormData.RiskInformation.LineOfBusiness)

		.Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
		source = .QueryExecuteToTable(True)
		RiskInformationProductCode.DataSource = source
	End With
End Sub

    
#End Region


#Region "PopupMenu Events"

    
    
#End Region

#Region "Mapping methods"

    Public Sub ValidateParametersInstance(ByRef NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter)
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.RiskInformation) Then
            NNCotizacionMiVidaValeIIParameterInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
        End If
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.ClientIncluded) Then
            NNCotizacionMiVidaValeIIParameterInstance.ClientIncluded = New InMotionGIT.Client.Entity.Contracts.Client
        End If
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.RiskInformation.LifeLineOfBusiness) Then
            NNCotizacionMiVidaValeIIParameterInstance.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
        End If
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.RiskInformation.Policy) Then
            NNCotizacionMiVidaValeIIParameterInstance.RiskInformation.Policy = New InMotionGIT.Policy.Entity.Contracts.Policy
        End If
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.ClientInsuredPerson) Then
            NNCotizacionMiVidaValeIIParameterInstance.ClientInsuredPerson = New InMotionGIT.Client.Entity.Contracts.Client
        End If
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.RiskInformation.PrimaryInsured) Then
            NNCotizacionMiVidaValeIIParameterInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
        End If
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.RiskInformation.PrimaryInsured.Client) Then
            NNCotizacionMiVidaValeIIParameterInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
        End If
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.AddressPhysicalAddressDLI) Then
            NNCotizacionMiVidaValeIIParameterInstance.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
        End If
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.AddresseMailDLI) Then
            NNCotizacionMiVidaValeIIParameterInstance.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
        End If
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.AddresseMailDLI.eMailAddress) Then
            NNCotizacionMiVidaValeIIParameterInstance.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
        End If
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.QuestionnairesAvailable) Then
            NNCotizacionMiVidaValeIIParameterInstance.QuestionnairesAvailable = New InMotionGIT.Questionnaires.QuestionnairesAvailable
        End If
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.Beneficiary) Then
            NNCotizacionMiVidaValeIIParameterInstance.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
        End If
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.Beneficiary.Client) Then
            NNCotizacionMiVidaValeIIParameterInstance.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
        End If
        If IsNothing(NNCotizacionMiVidaValeIIParameterInstance.RiskInformation.AutomaticPaymentPolicy) Then
            NNCotizacionMiVidaValeIIParameterInstance.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
        End If
   
    End Sub
    
    ''' <summary>
    ''' This method moves the data from the class to the page
    ''' </summary>
    ''' <param name="NNCotizacionMiVidaValeIIParameterInstance"></param>
    ''' <remarks></remarks>
    Public Sub MapClassToPage(ByRef NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter, Optional calledBy As String = "")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
        ValidateParametersInstance(NNCotizacionMiVidaValeIIParameterInstance)

        Gender.DataBind()
SmokerIndicator.DataBind()
Currency.DataBind()
InsuredAmountSelected.DataBind()
PaymentFrequency.DataBind()
PaymentMethod.DataBind()
ClienteInformaEsUsuario.DataBind()
ClienteInformaExiste.DataBind()
Diabetes.DataBind()
Heart.DataBind()
Cancer.DataBind()
BeneficiaryType.DataBind()
RelationshipBD.DataBind()
TypeOfPersonBenef.DataBind()
CreditCardType.DataBind()
BankCode.DataBind()
LineOfBusiness.DataBind()
RiskInformationProductCode.DataBind()

       
        With NNCotizacionMiVidaValeIIParameterInstance
          
                      ProductMasterDescription.Text = .ProductMasterDescription
            RiskInformationEffectiveDate.Value = .RiskInformation.EffectiveDate
            uwcaseid.Text = .uwcaseid
            Gender.SelectedItem = Gender.Items.FindByValue(.ClientIncluded.Gender)
            SmokerIndicator.SelectedItem = SmokerIndicator.Items.FindByValue(.ClientIncluded.SmokerIndicator)
            If .ClientIncluded.BirthDate.IsNotEmpty Then
                BirthDate.Value = .ClientIncluded.BirthDate
            Else
                BirthDate.Value = Nothing
                
            End If
            InsuredAmountForCalculation.Text = .RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation
            Currency.SelectedItem = Currency.Items.FindByValue(.Currency)
            InsuredAmountSelected.SelectedItem = InsuredAmountSelected.Items.FindByValue(.InsuredAmountSelected)
            AccumulatedAmount.Text = .AccumulatedAmount.tostring("###,###,###,##0")
            PaymentFrequency.SelectedItem = PaymentFrequency.Items.FindByValue(.RiskInformation.Policy.PaymentFrequency)
            PaymentMethod.SelectedItem = PaymentMethod.Items.FindByValue(.RiskInformation.PaymentMethod)
            ClienteInformaEsUsuario.SelectedItem = ClienteInformaEsUsuario.Items.FindByValue(.ClienteInformaEsUsuario)
            ClienteInformaExiste.SelectedItem = ClienteInformaExiste.Items.FindByValue(.ClienteInformaExiste)
            UsuarioClaveEntrada.Text = .UsuarioClaveEntrada
            ClientIDAut.Text = .ClientInsuredPerson.ClientID
            FirstNameAut.Text = .ClientInsuredPerson.FirstName
            LastNameAut.Text = .ClientInsuredPerson.LastName
            LastName2Aut.Text = .ClientInsuredPerson.LastName2
            ClientID.Text = .RiskInformation.PrimaryInsured.Client.ClientID
            Height.Text = .RiskInformation.PrimaryInsured.Client.Height
            Weight.Text = .RiskInformation.PrimaryInsured.Client.Weight
            FirstName.Text = .RiskInformation.PrimaryInsured.Client.FirstName
            LastName.Text = .RiskInformation.PrimaryInsured.Client.LastName
            LastName2.Text = .RiskInformation.PrimaryInsured.Client.LastName2
            If IsNothing(FormData.AddressPhysicalAddressDLI) Then
                FormData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
            End If

             physicaladdress0.Address = .AddressPhysicalAddressDLI

'TypeShow
             physicaladdress0.TypeShow = True 

'TypeDefaultValue
             physicaladdress0.TypeDefaultValue = 1 

'TypeOfRouteShow
             physicaladdress0.TypeOfRouteShow = True 

'TypeOfRouteDefaultValue
             physicaladdress0.TypeOfRouteDefaultValue = 1 

'CountryCodeShow
             physicaladdress0.CountryCodeShow = True 

'CountryCodeDefaultValue
             physicaladdress0.CountryCodeDefaultValue = 0 

'PostalCodeShow
             physicaladdress0.PostalCodeShow = True 

'PostalCodeDefaultValue
             physicaladdress0.PostalCodeDefaultValue = 0 

'TimeZoneShow
             physicaladdress0.TimeZoneShow = False 

'TimeZoneDefaultValue
             physicaladdress0.TimeZoneDefaultValue = 19 

'InitialYearShow
             physicaladdress0.InitialYearShow = False 

'InitialYearDefaultValue
             physicaladdress0.InitialYearDefaultValue = 0 

'RiskZoneShow
             physicaladdress0.RiskZoneShow = False 

'MapShow
             physicaladdress0.MapShow = False 

'ResidentialAddressShow
             physicaladdress0.ResidentialAddressShow = False 

'CorrespondenceAddressShow
             physicaladdress0.CorrespondenceAddressShow = False 

'CollectionAddressShow
             physicaladdress0.CollectionAddressShow = False 

'SendProblemAddressShow
             physicaladdress0.SendProblemAddressShow = False 

 
             eMailclient.Text = .AddresseMailDLI.eMailAddress.eMail
            Diabetes.SelectedItem = Diabetes.Items.FindByValue(.QuestionnairesAvailable.Diabetes)
            Heart.SelectedItem = Heart.Items.FindByValue(.QuestionnairesAvailable.Heart)
            Cancer.SelectedItem = Cancer.Items.FindByValue(.QuestionnairesAvailable.Cancer)
            BeneficiaryType.SelectedItem = BeneficiaryType.Items.FindByValue(.BeneficiaryType)
            RelationshipBD.SelectedItem = RelationshipBD.Items.FindByValue(.Beneficiary.Relationship)
            PercentageShareBP.Text = .Beneficiary.PercentageShare
            TypeOfPersonBenef.SelectedItem = TypeOfPersonBenef.Items.FindByValue(.TypeOfPersonBenef)
            ClientIDBD.Text = .Beneficiary.ClientID
            FirstNameBP.Text = .Beneficiary.Client.FirstName
            LastNameBP.Text = .Beneficiary.Client.LastName
            LastName2BP.Text = .Beneficiary.Client.LastName2
            LegalNameBP.Text = .Beneficiary.Client.LegalName
            CreditCardType.SelectedItem = CreditCardType.Items.FindByValue(.RiskInformation.AutomaticPaymentPolicy.CreditCardType)
            BankCode.SelectedItem = BankCode.Items.FindByValue(.RiskInformation.AutomaticPaymentPolicy.BankCode)
            CreditCardNumber.Text = .RiskInformation.AutomaticPaymentPolicy.CreditCardNumber
            MesTarjeta.Text = .MesTarjeta
            AnoTarjeta.Text = .AnoTarjeta
            AuthorizationNumber.Text = .RiskInformation.AutomaticPaymentPolicy.AuthorizationNumber
            eMail.Text = .eMail
            OnLinePrintIndicator.Checked = .OnLinePrintIndicator
            LineOfBusiness.SelectedItem = LineOfBusiness.Items.FindByValue(.RiskInformation.LineOfBusiness)
            RiskInformationProductCode.SelectedItem = RiskInformationProductCode.Items.FindByValue(.RiskInformation.ProductCode)

                      If IsNothing(.RiskInformation) Then
                .RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation) Then
                .RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(.RiskInformation.AmendmentInformation.Coverages) Then
                .RiskInformation.AmendmentInformation.Coverages = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection()
            End If
            If IsNothing(.RiskInformation) Then
                .RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(.RiskInformation.Beneficiaries) Then
                .RiskInformation.Beneficiaries = New InMotionGIT.Policy.Entity.Contracts.BeneficiaryCollection()
            End If

            _CoverageForAmendmentList = .RiskInformation.AmendmentInformation.Coverages
            CoverageForAmendment.DataSource = _CoverageForAmendmentList
            CoverageForAmendment.DataBind()
            If IsNothing(.RiskInformation) Then
                .RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(.RiskInformation.Beneficiaries) Then
                .RiskInformation.Beneficiaries = New InMotionGIT.Policy.Entity.Contracts.BeneficiaryCollection()
            End If

            _BeneficiaryList = .RiskInformation.Beneficiaries
            Beneficiary.DataSource = _BeneficiaryList
            Beneficiary.DataBind()
    
          CoverageForAmendment.FilterExpression = String.Format(CultureInfo.InvariantCulture," ( Selected = {0} ) ",true) 
        
           
             If Not IsNothing(LineOfBusiness.SelectedItem) Then
                PaymentFrequency_Callback(PaymentFrequency, New CallbackEventArgsBase(LineOfBusiness.SelectedItem.Value))
                If .RiskInformation.Policy.PaymentFrequency.IsNotEmpty  Then
                PaymentFrequency.SelectedItem = PaymentFrequency.Items.FindByValue(.RiskInformation.Policy.PaymentFrequency)
                Else
                PaymentFrequency.SelectedItem = Nothing
                End If
            End If 
  
  
  
  
  
             If Not IsNothing(LineOfBusiness.SelectedItem) Then
                RiskInformationProductCode_Callback(RiskInformationProductCode, New CallbackEventArgsBase(LineOfBusiness.SelectedItem.Value))
                If .RiskInformation.ProductCode.IsNotEmpty  Then
                RiskInformationProductCode.SelectedItem = RiskInformationProductCode.Items.FindByValue(.RiskInformation.ProductCode)
                Else
                RiskInformationProductCode.SelectedItem = Nothing
                End If
            End If 
 
                      If IsNothing(ClienteInformaEsUsuario.SelectedItem) OrElse
                          (Not IsNothing(ClienteInformaEsUsuario.SelectedItem) AndAlso IsNothing(ClienteInformaEsUsuario.SelectedItem.Value)) Then
          
               ClienteInformaEsUsuario.SelectedItem = ClienteInformaEsUsuario.Items.FindByValue(True)               
           End If      
    
            If IsNothing(ClienteInformaExiste.SelectedItem) OrElse
                          (Not IsNothing(ClienteInformaExiste.SelectedItem) AndAlso IsNothing(ClienteInformaExiste.SelectedItem.Value)) Then
          
               ClienteInformaExiste.SelectedItem = ClienteInformaExiste.Items.FindByValue(True)               
           End If      
    
            If IsNothing(BeneficiaryType.SelectedItem) OrElse
                          (Not IsNothing(BeneficiaryType.SelectedItem) AndAlso IsNothing(BeneficiaryType.SelectedItem.Value)) Then
          
               BeneficiaryType.SelectedItem = BeneficiaryType.Items.FindByValue(1)               
           End If      
    

               
            
            
       End With


if (Not ("CoverageForAmendment|Beneficiary".IndexOf(calledBy) > -1)) Or String.IsNullOrEmpty(calledBy) then        
            
         

        End If          
    End Sub

    ''' <summary>
    ''' This method moves the data from the page to the class
    ''' </summary>
    ''' <param name="NNCotizacionMiVidaValeIIParameterInstance"></param>
    Public Sub MapPageToClass(ByRef NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter)
        _loading = True

        ValidateParametersInstance(NNCotizacionMiVidaValeIIParameterInstance)

        With NNCotizacionMiVidaValeIIParameterInstance
            .ProductMasterDescription = ProductMasterDescription.Text.Trim()
            .RiskInformation.EffectiveDate = RiskInformationEffectiveDate.Value
            .uwcaseid = uwcaseid.Text
            .ClientIncluded.Gender = Gender.Value
            .ClientIncluded.SmokerIndicator = SmokerIndicator.Value
            .ClientIncluded.BirthDate = BirthDate.Value
            .RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = InsuredAmountForCalculation.Text
            .Currency = Currency.Value
            .InsuredAmountSelected = InsuredAmountSelected.Value
            .AccumulatedAmount = AccumulatedAmount.Text
            .RiskInformation.Policy.PaymentFrequency = PaymentFrequency.Value
            .RiskInformation.PaymentMethod = PaymentMethod.Value
            .ClienteInformaEsUsuario = ClienteInformaEsUsuario.Value
            .ClienteInformaExiste = ClienteInformaExiste.Value
            .UsuarioClaveEntrada = UsuarioClaveEntrada.Text.Trim().ToUpper()
            .ClientInsuredPerson.ClientID = ClientIDAut.Text.Trim()
            .ClientInsuredPerson.FirstName = FirstNameAut.Text.Trim().ToUpper()
            .ClientInsuredPerson.LastName = LastNameAut.Text.Trim().ToUpper()
            .ClientInsuredPerson.LastName2 = LastName2Aut.Text.Trim().ToUpper()
            .RiskInformation.PrimaryInsured.Client.ClientID = ClientID.Text.Trim()
            .RiskInformation.PrimaryInsured.Client.Height = Height.Text
            .RiskInformation.PrimaryInsured.Client.Weight = Weight.Text
            .RiskInformation.PrimaryInsured.Client.FirstName = FirstName.Text.Trim()
            .RiskInformation.PrimaryInsured.Client.LastName = LastName.Text.Trim().ToUpper()
            .RiskInformation.PrimaryInsured.Client.LastName2 = LastName2.Text.Trim().ToUpper()
             physicaladdress0.Initialization(.AddressPhysicalAddressDLI) 
             .AddressPhysicalAddressDLI = physicaladdress0.Address  
             .AddresseMailDLI.eMailAddress.eMail = eMailclient.Text
            .QuestionnairesAvailable.Diabetes = Diabetes.Value
            .QuestionnairesAvailable.Heart = Heart.Value
            .QuestionnairesAvailable.Cancer = Cancer.Value
            .BeneficiaryType = BeneficiaryType.Value
            .Beneficiary.Relationship = RelationshipBD.Value
            .Beneficiary.PercentageShare = PercentageShareBP.Text
            .TypeOfPersonBenef = TypeOfPersonBenef.Value
            .Beneficiary.ClientID = ClientIDBD.Text.Trim()
            .Beneficiary.Client.FirstName = FirstNameBP.Text.Trim().ToUpper()
            .Beneficiary.Client.LastName = LastNameBP.Text.Trim().ToUpper()
            .Beneficiary.Client.LastName2 = LastName2BP.Text.Trim().ToUpper()
            .Beneficiary.Client.LegalName = LegalNameBP.Text.Trim().ToUpper()
            .RiskInformation.AutomaticPaymentPolicy.CreditCardType = CreditCardType.Value
            .RiskInformation.AutomaticPaymentPolicy.BankCode = BankCode.Value
            .RiskInformation.AutomaticPaymentPolicy.CreditCardNumber = CreditCardNumber.Text.Trim()
            .MesTarjeta = MesTarjeta.Text
            .AnoTarjeta = AnoTarjeta.Text
            .RiskInformation.AutomaticPaymentPolicy.AuthorizationNumber = AuthorizationNumber.Text
            .eMail = eMail.Text
            .OnLinePrintIndicator = OnLinePrintIndicator.Checked
            .RiskInformation.LineOfBusiness = LineOfBusiness.Value
            .RiskInformation.ProductCode = RiskInformationProductCode.Value


        'GetViewStateCoverageForAmendmentList()
        '.RiskInformation.AmendmentInformation.Coverages = _CoverageForAmendmentList
        '.RiskInformation.AmendmentInformation.Coverages.CurrentIndex= CoverageForAmendment.EditIndex
        'ViewState.Remove("CoverageForAmendmentList")
        'GetViewStateBeneficiaryList()
        '.RiskInformation.Beneficiaries = _BeneficiaryList
        '.RiskInformation.Beneficiaries.CurrentIndex= Beneficiary.EditIndex
        'ViewState.Remove("BeneficiaryList")



        End With




        _loading = False
    End Sub

#End Region

#Region "CoverageForAmendment GridView Controls with dependencies Events"
    


#End Region

#Region "CoverageForAmendment GridView editing support"

    Private _CoverageForAmendmentList As InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection = Nothing

    Protected Sub CoverageForAmendment_DataBinding(sender As Object, e As EventArgs) Handles CoverageForAmendment.DataBinding        
With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                     "SELECT  TABLE55.NRELATION, TABLE55.SDESCRIPT, TABLE55.SSTATREGT FROM TABLE55 TABLE55  WHERE TABLE55.SSTATREGT = 1  ORDER BY TABLE55.SDESCRIPT ASC ", "1"), "TABLE55", "Linked.LatCombined")
        
       .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters			
       DirectCast(Beneficiary.Columns("Relationship"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
End With
 
            If IsNothing(FormData.RiskInformation) Then
                FormData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(FormData.RiskInformation.AmendmentInformation) Then
                FormData.RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation()
            End If
            If IsNothing(FormData.RiskInformation.AmendmentInformation.Coverages) Then
                FormData.RiskInformation.AmendmentInformation.Coverages = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection()
            End If

        _CoverageForAmendmentList = FormData.RiskInformation.AmendmentInformation.Coverages
        CoverageForAmendment.DataSource = _CoverageForAmendmentList      
    End Sub
    
    Protected Sub CoverageForAmendment_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles CoverageForAmendment.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub
    
    Protected Sub CoverageForAmendment_CellEditorInitialize(sender As Object, e As DevExpress.Web.ASPxGridView.ASPxGridViewEditorEventArgs) Handles CoverageForAmendment.CellEditorInitialize
        If CoverageForAmendment.IsNewRowEditing Then
            Select Case e.Column.FieldName



                Case "DescriptionOfCoverage"                     
                       e.Editor.Focus()               
            End Select

        Else
            Select Case e.Column.FieldName
                Case "DescriptionOfCoverage"
     e.Editor.Enabled = False
                Case "InsuredAmount"
     e.Editor.Enabled = False
                Case "AnnualPremium"
     e.Editor.Enabled = False
                   


                Case "PercentageShare"                     
                       e.Editor.Focus() 
            End Select
        End If
        
        Select Case e.Column.FieldName

            Case "DescriptionOfCoverage"
                  
                 

        End Select
    End Sub      
            
    Protected Sub CoverageForAmendment_ParseValue(sender As Object, e As DevExpress.Web.Data.ASPxParseValueEventArgs) Handles CoverageForAmendment.ParseValue
        Select Case e.FieldName

        End Select
    End Sub    
    
 
  
  
    Protected Sub CoverageForAmendment_RowInserting(sender As Object, e As DevExpress.Web.Data.ASPxDataInsertingEventArgs) Handles CoverageForAmendment.RowInserting
        Dim CoverageForAmendmentItem As InMotionGIT.Policy.Entity.Contracts.CoverageForAmendment = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendment()
        GetViewStateCoverageForAmendmentList()
        
        With CoverageForAmendmentItem
             If _CoverageForAmendmentList.Count = 0 Then
              .Consecutive = 1
           Else
              .Consecutive = (Aggregate _itemData In _CoverageForAmendmentList Into Max(_itemData.Consecutive)) + 1
          End If            
                    .DescriptionOfCoverage = e.NewValues("DescriptionOfCoverage") 

                    .InsuredAmount = e.NewValues("InsuredAmount") 

                    .AnnualPremium = e.NewValues("AnnualPremium") 


        End With

        _CoverageForAmendmentList.Add(CoverageForAmendmentItem)
         CoverageForAmendment.CancelEdit()
        
        If ViewState("CoverageForAmendmentOperationType") = "Add" Then
            CoverageForAmendment.AddNewRow()
        End If

        e.Cancel = True
        SetCoverageForAmendmentListDataBind()
    End Sub
    
    Protected Sub CoverageForAmendment_RowUpdating(sender As Object, e As DevExpress.Web.Data.ASPxDataUpdatingEventArgs) Handles CoverageForAmendment.RowUpdating
        Dim CoverageForAmendmentItem As InMotionGIT.Policy.Entity.Contracts.CoverageForAmendment = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendment() 
        Dim Consecutive As String = e.Keys("Consecutive")
        
        GetViewStateCoverageForAmendmentList()
                   
        For index As Integer = 0 To _CoverageForAmendmentList.Count - 1
            If _CoverageForAmendmentList(index).Consecutive = Consecutive Then
                
                With _CoverageForAmendmentList(index)
                
                End With
                
                Exit For
            End If
        Next

        SetCoverageForAmendmentListDataBind()

        CoverageForAmendment.CancelEdit()
        e.Cancel = True
    End Sub

    Protected Sub CoverageForAmendment_RowDeleting(sender As Object, e As DevExpress.Web.Data.ASPxDataDeletingEventArgs) Handles CoverageForAmendment.RowDeleting
       Dim Consecutive As String = e.Keys("Consecutive")
       
       GetViewStateCoverageForAmendmentList()
       
       For index As Integer = 0 To _CoverageForAmendmentList.Count - 1
           If _CoverageForAmendmentList(index).Consecutive = Consecutive Then
             _CoverageForAmendmentList.RemoveAt(index)
             
             Exit For
           End If
       Next       
       
        SetCoverageForAmendmentListDataBind()
        e.Cancel = True        
    End Sub

    Private Sub SetCoverageForAmendmentListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As NNCotizacionMiVidaValeIIParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.RiskInformation.AmendmentInformation.Coverages = _CoverageForAmendmentList
        CoverageForAmendment.DataSource = _CoverageForAmendmentList
        CoverageForAmendment.DataBind()
   End Sub

    Private Sub GetViewStateCoverageForAmendmentList()
        Dim FormData As NNCotizacionMiVidaValeIIParameter

         GetCurrentParameterInstance(FormData, True)

        _CoverageForAmendmentList = FormData.RiskInformation.AmendmentInformation.Coverages

        If IsNothing(_CoverageForAmendmentList) Then
            _CoverageForAmendmentList = New InMotionGIT.Policy.Entity.Contracts.CoverageForAmendmentCollection()
        End If        
    End Sub
     
    
        
    
#End Region
#Region "Beneficiary GridView Controls with dependencies Events"
    


#End Region

#Region "Beneficiary GridView editing support"

    Private _BeneficiaryList As InMotionGIT.Policy.Entity.Contracts.BeneficiaryCollection = Nothing

    Protected Sub Beneficiary_DataBinding(sender As Object, e As EventArgs) Handles Beneficiary.DataBinding        
With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                     "SELECT  TABLE55.NRELATION, TABLE55.SDESCRIPT, TABLE55.SSTATREGT FROM TABLE55 TABLE55  WHERE TABLE55.SSTATREGT = 1  ORDER BY TABLE55.SDESCRIPT ASC ", "1"), "TABLE55", "Linked.LatCombined")
        
       .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters			
       DirectCast(Beneficiary.Columns("Relationship"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
End With
 
            If IsNothing(FormData.RiskInformation) Then
                FormData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation()
            End If
            If IsNothing(FormData.RiskInformation.Beneficiaries) Then
                FormData.RiskInformation.Beneficiaries = New InMotionGIT.Policy.Entity.Contracts.BeneficiaryCollection()
            End If

        _BeneficiaryList = FormData.RiskInformation.Beneficiaries
        Beneficiary.DataSource = _BeneficiaryList      
    End Sub
    
    Protected Sub Beneficiary_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles Beneficiary.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub
    
    Protected Sub Beneficiary_CellEditorInitialize(sender As Object, e As DevExpress.Web.ASPxGridView.ASPxGridViewEditorEventArgs) Handles Beneficiary.CellEditorInitialize
        If Beneficiary.IsNewRowEditing Then
            Select Case e.Column.FieldName



                Case "Client.CompleteClientName"                     
                       e.Editor.Focus()               
            End Select

        Else
            Select Case e.Column.FieldName
                Case "Client.CompleteClientName"
     e.Editor.Enabled = False
                   


                Case "PercentageShare"                     
                       e.Editor.Focus() 
            End Select
        End If
        
        Select Case e.Column.FieldName

            Case "Client.CompleteClientName"
                  
                 
                Case "Relationship"
     DirectCast(e.Editor, ASPxComboBox).DataBindItems() 

        End Select
    End Sub      
            
    Protected Sub Beneficiary_ParseValue(sender As Object, e As DevExpress.Web.Data.ASPxParseValueEventArgs) Handles Beneficiary.ParseValue
        Select Case e.FieldName

        End Select
    End Sub    
    
 
  
  
    Protected Sub Beneficiary_RowInserting(sender As Object, e As DevExpress.Web.Data.ASPxDataInsertingEventArgs) Handles Beneficiary.RowInserting
        Dim BeneficiaryItem As InMotionGIT.Policy.Entity.Contracts.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary()
        GetViewStateBeneficiaryList()
        
        With BeneficiaryItem
             .ClientID = _BeneficiaryList.Count            
             If IsNothing(.Client) Then 
                .Client = New InMotionGIT.Client.Entity.Contracts.Client 
            End If 

                    .Client.CompleteClientName = e.NewValues("Client.CompleteClientName") 

                    .PercentageShare = e.NewValues("PercentageShare") 

                    .Relationship = e.NewValues("Relationship") 


        End With

        _BeneficiaryList.Add(BeneficiaryItem)
         Beneficiary.CancelEdit()
        
        If ViewState("BeneficiaryOperationType") = "Add" Then
            Beneficiary.AddNewRow()
        End If

        e.Cancel = True
        SetBeneficiaryListDataBind()
    End Sub
    
    Protected Sub Beneficiary_RowUpdating(sender As Object, e As DevExpress.Web.Data.ASPxDataUpdatingEventArgs) Handles Beneficiary.RowUpdating
        Dim BeneficiaryItem As InMotionGIT.Policy.Entity.Contracts.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary() 
        Dim ClientID As String = e.Keys("ClientID")
        
        GetViewStateBeneficiaryList()
                   
        For index As Integer = 0 To _BeneficiaryList.Count - 1
            If _BeneficiaryList(index).ClientID = ClientID Then
                
                With _BeneficiaryList(index)
                    .PercentageShare = e.NewValues("PercentageShare") 

                    .Relationship = e.NewValues("Relationship") 

                
                End With
                
                Exit For
            End If
        Next

        SetBeneficiaryListDataBind()

        Beneficiary.CancelEdit()
        e.Cancel = True
    End Sub

    Protected Sub Beneficiary_RowDeleting(sender As Object, e As DevExpress.Web.Data.ASPxDataDeletingEventArgs) Handles Beneficiary.RowDeleting
       Dim ClientID As String = e.Keys("ClientID")
       
       GetViewStateBeneficiaryList()
       
       For index As Integer = 0 To _BeneficiaryList.Count - 1
           If _BeneficiaryList(index).ClientID = ClientID Then
             _BeneficiaryList.RemoveAt(index)
             
             Exit For
           End If
       Next       
       
        SetBeneficiaryListDataBind()
        e.Cancel = True        
    End Sub

    Private Sub SetBeneficiaryListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As NNCotizacionMiVidaValeIIParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.RiskInformation.Beneficiaries = _BeneficiaryList
        Beneficiary.DataSource = _BeneficiaryList
        Beneficiary.DataBind()
   End Sub

    Private Sub GetViewStateBeneficiaryList()
        Dim FormData As NNCotizacionMiVidaValeIIParameter

         GetCurrentParameterInstance(FormData, True)

        _BeneficiaryList = FormData.RiskInformation.Beneficiaries

        If IsNothing(_BeneficiaryList) Then
            _BeneficiaryList = New InMotionGIT.Policy.Entity.Contracts.BeneficiaryCollection()
        End If        
    End Sub
     
    
        
    
#End Region







#Region "AutoPostBack Events Handles"

Protected Sub InsuredAmountSelected_SelectedIndexChanged(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("InsuredAmountSelected_SelectedIndex")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. Coverages.Visible = False") 
            currentAction = SessionTrace("1.1. Coverages.Visible = False...")
BehaviorShowControls("Coverages,Hidden")

            currentAction = SessionTrace("2. _formData.RiskInformation.LifeLineOfBusiness.InsuredAmount = _formData.InsuredAmountSelected...") 
 
            currentAction = SessionTrace("2.1. _formData.RiskInformation.LifeLineOfBusiness.InsuredAmount = _formData.InsuredAmountSelected...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.LifeLineOfBusiness) Then
              _formData.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
          End If 

 _formData.RiskInformation.LifeLineOfBusiness.InsuredAmount = _formData.InsuredAmountSelected 
            currentAction = SessionTrace("2.2. _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = _formData.InsuredAmountSelected...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.LifeLineOfBusiness) Then
              _formData.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
          End If 

 _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = _formData.InsuredAmountSelected 

            currentAction = SessionTrace("3. '_formData.RiskInformation.AmendmentInformation' = New 'InMotionGIT.Policy.Entity'...'") 
             _formData.RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation

            currentAction = SessionTrace("4. '_formData.RiskInformation.Coverages' = New 'InMotionGIT.Policy.Entity'...'") 
             _formData.RiskInformation.Coverages = New InMotionGIT.Policy.Entity.Contracts.CoverageCollection



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"CoverageForAmendment")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub Cotizar_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("Cotizar_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim WorkflowInArguments  As New Dictionary(Of String, Object)
Dim WorkflowOutArguments As IDictionary(Of String, Object)


        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. _formData.RiskInformation.PrimaryInsured.Client.BirthDate = _formData.ClientIncluded.BirthDate...") 
 
            currentAction = SessionTrace("1.1. _formData.RiskInformation.PrimaryInsured.Client.BirthDate = _formData.ClientIncluded.BirthDate...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.BirthDate = _formData.ClientIncluded.BirthDate 
            currentAction = SessionTrace("1.2. _formData.RiskInformation.PrimaryInsured.Client.Gender = _formData.ClientIncluded.Gender...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.Gender = _formData.ClientIncluded.Gender 
            currentAction = SessionTrace("1.3. _formData.RiskInformation.PrimaryInsured.Client.SmokerIndicator = _formData.ClientIncluded.SmokerIndi...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.SmokerIndicator = _formData.ClientIncluded.SmokerIndicator 

            currentAction = SessionTrace("2. '_formData.LookUpValueCollection' = New 'InMotionGIT.Common.DataTy'...'") 
             _formData.LookUpValueCollection = New InMotionGIT.Common.DataType.LookUpValueCollection

            currentAction = SessionTrace("3. _formData.InRuleErros = False...") 
 
            currentAction = SessionTrace("3.1. _formData.InRuleErros = False...")

 _formData.InRuleErros = False 

            currentAction = SessionTrace("4. _formData.RiskInformation.LifeLineOfBusiness.ActuarialAge = year(Date.Today) - year(_formData.R...") 
 
            currentAction = SessionTrace("4.1. _formData.RiskInformation.LifeLineOfBusiness.ActuarialAge = year(Date.Today) - year(_formData.R...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.LifeLineOfBusiness) Then
              _formData.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
          End If 

 _formData.RiskInformation.LifeLineOfBusiness.ActuarialAge = year(Date.Today) - year(_formData.RiskInformation.PrimaryInsured.Client.BirthDate) 

            currentAction = SessionTrace("5. If _formData.RiskInformation.LifeLineOfBusiness.ActuarialAge < 18 Then") 
If _formData.RiskInformation.LifeLineOfBusiness.ActuarialAge < 18 Then

            currentAction = SessionTrace("6. The message 'El solicitante del s...' will displayed as 'Splash'") 
            messageAction = "El solicitante del seguro debe ser mayor de edad ({ Value /RiskInformation/LifeLineOfBusiness/ActuarialAge })" 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            currentAction = SessionTrace("7. _formData.InRuleErros = True...") 
 
            currentAction = SessionTrace("7.1. _formData.InRuleErros = True...")

 _formData.InRuleErros = True 

            currentAction = SessionTrace("8. '_formData.LookUpValue' = New 'InMotionGIT.Common.DataTy'...'") 
             _formData.LookUpValue = New InMotionGIT.Common.DataType.LookUpValue

            currentAction = SessionTrace("9. _formData.LookUpValue.Code = 1...") 
 
            currentAction = SessionTrace("9.1. _formData.LookUpValue.Code = 1...")
          If IsNothing(_formData.LookUpValue) Then
              _formData.LookUpValue = New InMotionGIT.Common.DataType.LookUpValue
          End If 

 _formData.LookUpValue.Code = 1 
            currentAction = SessionTrace("9.2. _formData.LookUpValue.Description = 'El solicitante del seguro debe ser...")
          If IsNothing(_formData.LookUpValue) Then
              _formData.LookUpValue = New InMotionGIT.Common.DataType.LookUpValue
          End If 

 _formData.LookUpValue.Description = "El solicitante del seguro debe ser mayor de edad (" & _formData.RiskInformation.LifeLineOfBusiness.ActuarialAge &")" 

            currentAction = SessionTrace("10. '_formData.LookUpValueCollection'.Add('_formData.LookUpValue')") 
             _formData.LookUpValueCollection.Add(_formData.LookUpValue)

            End If
            currentAction = SessionTrace("11. If _formData.InRuleErros = false Then") 
If _formData.InRuleErros = false Then

            currentAction = SessionTrace("12. If _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation Is Null Or Empty  OR _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = 0 Then") 
If IsNothing(_formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation) OrElse _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = 0 Then

            currentAction = SessionTrace("13. The message 'Indique la suma aseg...' will displayed as 'Popup'") 
            messageAction = "Indique la suma asegurada" 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            currentAction = SessionTrace("14. _formData.InRuleErros = true...") 
 
            currentAction = SessionTrace("14.1. _formData.InRuleErros = true...")

 _formData.InRuleErros = true 

            End If
            End If
            currentAction = SessionTrace("15. If _formData.InRuleErros = False Then") 
If _formData.InRuleErros = False Then

            currentAction = SessionTrace("16. Coverages.Visible = true") 
            currentAction = SessionTrace("16.1. Coverages.Visible = true...")
BehaviorShowControls("Coverages,Visible")

            currentAction = SessionTrace("17. Acepto.Visible = true") 
            currentAction = SessionTrace("17.1. Acepto.Visible = true...")
BehaviorShowControls("Acepto,Visible")

            currentAction = SessionTrace("18. label6.Visible = true, label1.Visible = false") 
            currentAction = SessionTrace("18.1. label6.Visible = true...")
BehaviorShowControls("label6,Visible")
            currentAction = SessionTrace("18.2. label1.Visible = false...")
BehaviorShowControls("label1,Hidden")

            currentAction = SessionTrace("19. _formData.RiskInformation.Currency = _formData.Currency...") 
 
            currentAction = SessionTrace("19.1. _formData.RiskInformation.Currency = _formData.Currency...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 

 _formData.RiskInformation.Currency = _formData.Currency 

            currentAction = SessionTrace("20. _formData.RiskInformation.PrimaryInsured.RiskType = 1...") 
 
            currentAction = SessionTrace("20.1. _formData.RiskInformation.PrimaryInsured.RiskType = 1...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 

 _formData.RiskInformation.PrimaryInsured.RiskType = 1 

            currentAction = SessionTrace("21. _formData.RiskInformation.PrimaryInsured.ClientRole = 2...") 
 
            currentAction = SessionTrace("21.1. _formData.RiskInformation.PrimaryInsured.ClientRole = 2...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 

 _formData.RiskInformation.PrimaryInsured.ClientRole = 2 

            End If
            currentAction = SessionTrace("22. If _formData.PlanType = 1 Then") 
If _formData.PlanType = 1 Then

            currentAction = SessionTrace("23. _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = _formData.InsuredAmountSelected...") 
 
            currentAction = SessionTrace("23.1. _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = _formData.InsuredAmountSelected...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.LifeLineOfBusiness) Then
              _formData.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
          End If 

 _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = _formData.InsuredAmountSelected 
            currentAction = SessionTrace("23.2. _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountCalculation = _formData.InsuredAmountSelected...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.LifeLineOfBusiness) Then
              _formData.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
          End If 

 _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountCalculation = _formData.InsuredAmountSelected 

            End If
            currentAction = SessionTrace("24. If _formData.InRuleErros = false Then") 
If _formData.InRuleErros = false Then

            currentAction = SessionTrace("25. '_formData.RiskInformation.AmendmentInformation' = New 'InMotionGIT.Policy.Entity'...'") 
             _formData.RiskInformation.AmendmentInformation = New InMotionGIT.Policy.Entity.Contracts.AmendmentInformation

            currentAction = SessionTrace("26. '_formData.RiskInformation.Coverages' = New 'InMotionGIT.Policy.Entity'...'") 
             _formData.RiskInformation.Coverages = New InMotionGIT.Policy.Entity.Contracts.CoverageCollection

            currentAction = SessionTrace("27. Call 'Asigna módulos seleccionados por defecto' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("ModulosRiskInformation", _formData.RiskInformation.Modules) 
                .Add("ProcessDate", _formData.RiskInformation.EffectiveDate) 
                .Add("LineOfBusiness", _formData.RiskInformation.LineOfBusiness) 
                .Add("ProductCode", _formData.RiskInformation.ProductCode) 
                .Add("Currency", _formData.Currency) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("AsignaModulosPorDefecto", "f7b4e740-4915-411e-bc5b-a5027c73d125", 0, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.RiskInformation.Modules = WorkflowOutArguments("ModulosRiskInformation")

            currentAction = SessionTrace("28. Call Shared Sub 'Coverage Rating' with parameters (RiskInformation Object, Error List)") 
InMotionGIT.PolicyManager.Services.Rating.Calculate.Process            (riskInformation:=_formData.RiskInformation, errors:=_formContext.Errors) 
             

            currentAction = SessionTrace("30. Call Function 'Amendment setup' with parameters (RiskInformation Object, Effective Date)") 
            Dim _RiskInformation_11ef41f7976d4e5382d511337eda1c2e As InMotionGIT.Policy.Entity.Contracts.RiskInformation 
            _RiskInformation_11ef41f7976d4e5382d511337eda1c2e = (New InMotionGIT.PolicyManager.Services.RiskManager).AmendmentSetup            (risk:=_formData.RiskInformation, atDate:=Date.Today) 
             
            _formData.RiskInformation = _RiskInformation_11ef41f7976d4e5382d511337eda1c2e 
            isNullResult = (IsNothing(_RiskInformation_11ef41f7976d4e5382d511337eda1c2e)) 

            currentAction = SessionTrace("31. Call Shared Sub 'Clear Form Errors' without parameters") 
            
        _formData.Errors.Clear()
	_formContext.Errors.Clear()
     

            End If
            currentAction = SessionTrace("32. If _formData.AccumulatedAmount <> 0 Then") 
If _formData.AccumulatedAmount <> 0 Then

            currentAction = SessionTrace("33. zone11.Visible = True") 
            currentAction = SessionTrace("33.1. zone11.Visible = True...")
BehaviorShowControls("zone11,Visible")

            End If
            currentAction = SessionTrace("34. _formData.FormStatus = 1...") 
 
            currentAction = SessionTrace("34.1. _formData.FormStatus = 1...")

 _formData.FormStatus = 1 

            currentAction = SessionTrace("35. If _formData.ClientExistInDB = true Then") 
If _formData.ClientExistInDB = true Then

            currentAction = SessionTrace("36. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("36.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID 

        Else 
            currentAction = SessionTrace("37. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...") 
 
            currentAction = SessionTrace("37.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = 0 
            currentAction = SessionTrace("37.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 

            End If
            currentAction = SessionTrace("38. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("38.1. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryInsured.Client.ClientID 



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"Beneficiary")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub Acepto_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("Acepto_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. _formData.ErrorsFound = false...") 
 
            currentAction = SessionTrace("1.1. _formData.ErrorsFound = false...")

 _formData.ErrorsFound = false 

            currentAction = SessionTrace("2. If _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation Is Null Or Empty  OR _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = 0 Then") 
If IsNothing(_formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation) OrElse _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = 0 Then

            currentAction = SessionTrace("3. The message 'Indique la suma aseg...' will displayed as 'Popup'") 
            messageAction = "Indique la suma asegurada" 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            currentAction = SessionTrace("4. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("4.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

            currentAction = SessionTrace("5. label1.Visible = true, Cotizar.Visible = true, label6.Visible = false...") 
            currentAction = SessionTrace("5.1. label1.Visible = true...")
BehaviorShowControls("label1,Visible")
            currentAction = SessionTrace("5.2. Cotizar.Visible = true...")
BehaviorShowControls("Cotizar,Visible")
            currentAction = SessionTrace("5.3. label6.Visible = false...")
BehaviorShowControls("label6,Hidden")
            currentAction = SessionTrace("5.4. Acepto.Visible = false...")
BehaviorShowControls("Acepto,Hidden")

            End If
            currentAction = SessionTrace("6. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("7. _formData.RiskInformation.InsuredAmount = _formData.RiskInformation.LifeLineO...") 
 
            currentAction = SessionTrace("7.1. _formData.RiskInformation.InsuredAmount = _formData.RiskInformation.LifeLineO...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 

 _formData.RiskInformation.InsuredAmount = _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation 

            currentAction = SessionTrace("8. InsuredAmountSelected.Enabled = false, InsuredAmountForCalculation.Enabled = false, zoneBeneficiarios.Visible = true...") 
            currentAction = SessionTrace("8.1. InsuredAmountSelected.Enabled = false...")
BehaviorShowControls("InsuredAmountSelected,Disabled")
            currentAction = SessionTrace("8.2. InsuredAmountForCalculation.Enabled = false...")
BehaviorShowControls("InsuredAmountForCalculation,Disabled")
            currentAction = SessionTrace("8.3. zoneBeneficiarios.Visible = true...")
BehaviorShowControls("zoneBeneficiarios,Visible")
            currentAction = SessionTrace("8.4. zone8.Visible = true...")
BehaviorShowControls("zone8,Visible")
            currentAction = SessionTrace("8.5. zone10.Visible = true...")
BehaviorShowControls("zone10,Visible")
            currentAction = SessionTrace("8.6. zone5.Visible = false...")
BehaviorShowControls("zone5,Hidden")
            currentAction = SessionTrace("8.7. zone18.Visible = true...")
BehaviorShowControls("zone18,Visible")
            currentAction = SessionTrace("8.8. RiskInformationEffectiveDate.Enabled = false...")
BehaviorShowControls("RiskInformationEffectiveDate,Disabled")
            currentAction = SessionTrace("8.9. PaymentFrequency.Enabled = false...")
BehaviorShowControls("PaymentFrequency,Disabled")

            currentAction = SessionTrace("9. _formData.FormStatus = 2...") 
 
            currentAction = SessionTrace("9.1. _formData.FormStatus = 2...")

 _formData.FormStatus = 2 

            currentAction = SessionTrace("10. _formData.ConsumerInformation.CompanyId = 1...") 
 
            currentAction = SessionTrace("10.1. _formData.ConsumerInformation.CompanyId = 1...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation.CompanyId = 1 
            currentAction = SessionTrace("10.2. _formData.ConsumerInformation.Country = 58...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation.Country = 58 
            currentAction = SessionTrace("10.3. _formData.ConsumerInformation.Security.Usercode = 9998...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 
          If IsNothing(_formData.ConsumerInformation.Security) Then
              _formData.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
          End If 

 _formData.ConsumerInformation.Security.Usercode = 9998 

            currentAction = SessionTrace("11. _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...") 
 
            currentAction = SessionTrace("11.1. _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 

 _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
            currentAction = SessionTrace("11.2. _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.eMailAddress) Then
              _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
          End If 

 _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress 
            currentAction = SessionTrace("11.3. _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address 

            currentAction = SessionTrace("12. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...") 
 
            currentAction = SessionTrace("12.1. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 

            currentAction = SessionTrace("13. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...") 
 
            currentAction = SessionTrace("13.1. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.RecordOwnerType) Then
              _formData.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerType = 1 

            currentAction = SessionTrace("14. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...") 
 
            currentAction = SessionTrace("14.1. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.RecordOwnerType) Then
              _formData.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("14.2. _formData.AddresseMailDLI.Address.TypeOfAddress = 3...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.TypeOfAddress) Then
              _formData.AddresseMailDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddresseMailDLI.Address.TypeOfAddress = 3 
            currentAction = SessionTrace("14.3. _formData.AddresseMailDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.UserCompany) Then
              _formData.AddresseMailDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddresseMailDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("14.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6 

            currentAction = SessionTrace("15. _formData.CurrentYear = year(Date.Today)...") 
 
            currentAction = SessionTrace("15.1. _formData.CurrentYear = year(Date.Today)...")

 _formData.CurrentYear = year(Date.Today) 

            currentAction = SessionTrace("16. _formData.ConsumerInformation.CompanyId = 1...") 
 
            currentAction = SessionTrace("16.1. _formData.ConsumerInformation.CompanyId = 1...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation.CompanyId = 1 
            currentAction = SessionTrace("16.2. _formData.ConsumerInformation.Country = 58...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation.Country = 58 
            currentAction = SessionTrace("16.3. _formData.ConsumerInformation.Security.Usercode = 9998...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 
          If IsNothing(_formData.ConsumerInformation.Security) Then
              _formData.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
          End If 

 _formData.ConsumerInformation.Security.Usercode = 9998 

            currentAction = SessionTrace("17. _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...") 
 
            currentAction = SessionTrace("17.1. _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 

 _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
            currentAction = SessionTrace("17.2. _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.eMailAddress) Then
              _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
          End If 

 _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress 
            currentAction = SessionTrace("17.3. _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address 

            currentAction = SessionTrace("18. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("18.1. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryInsured.Client.ClientID 
            currentAction = SessionTrace("18.2. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("18.3. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID 

            currentAction = SessionTrace("19. _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("19.1. _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryInsured.Client.ClientID 
            currentAction = SessionTrace("19.2. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.RecordOwnerType) Then
              _formData.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("19.3. _formData.AddresseMailDLI.Address.AddressID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.AddressID = _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID 

            currentAction = SessionTrace("20. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...") 
 
            currentAction = SessionTrace("20.1. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.RecordOwnerType) Then
              _formData.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("20.2. _formData.AddresseMailDLI.Address.TypeOfAddress = 3...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.TypeOfAddress) Then
              _formData.AddresseMailDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddresseMailDLI.Address.TypeOfAddress = 3 
            currentAction = SessionTrace("20.3. _formData.AddresseMailDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.UserCompany) Then
              _formData.AddresseMailDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddresseMailDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("20.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6 

            End If
            currentAction = SessionTrace("21. If (_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID Is Null Or Empty  OR _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) AND ... Then") 
If (IsNothing(_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID) OrElse _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) AndAlso (Not String.IsNullOrEmpty(_formData.RiskInformation.PrimaryInsured.Client.ClientID)) AndAlso _formData.ErrorsFound = false Then

            currentAction = SessionTrace("22. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_63aef309ad444006aea3f5ed4d390468 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_63aef309ad444006aea3f5ed4d390468 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddresseMailDLI.Address.UserCompany, recordOwnerType:=_formData.AddresseMailDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddresseMailDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_63aef309ad444006aea3f5ed4d390468 
            isNullResult = (IsNothing(_AddressDLICollection_63aef309ad444006aea3f5ed4d390468)) 

            currentAction = SessionTrace("23. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("24. _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("24.1. _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("24.2. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("25. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddresseMailDLI_f0cd96f3397c43ee895838f475fda014 As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
            _AddresseMailDLI_f0cd96f3397c43ee895838f475fda014 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI            (processDate:=_formData.RiskInformation.EffectiveDate, addressId:=_formData.AddresseMailDLI.Address.AddressID, internalAddressKey:=_formData.AddresseMailDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddresseMailDLI = _AddresseMailDLI_f0cd96f3397c43ee895838f475fda014 
            isNullResult = (IsNothing(_AddresseMailDLI_f0cd96f3397c43ee895838f475fda014)) 

            End If
            currentAction = SessionTrace("26. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...") 
 
            currentAction = SessionTrace("26.1. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
              _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1 
            currentAction = SessionTrace("26.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("26.3. _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.UserCompany) Then
              _formData.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("26.4. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 

            currentAction = SessionTrace("27. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_ec02a3c15596470e9f52c7b9936d7946 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_ec02a3c15596470e9f52c7b9936d7946 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_ec02a3c15596470e9f52c7b9936d7946 
            isNullResult = (IsNothing(_AddressDLICollection_ec02a3c15596470e9f52c7b9936d7946)) 

            currentAction = SessionTrace("28. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("29. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("29.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("29.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("30. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_e2640085b703425f8d61c861b5751faf As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_e2640085b703425f8d61c861b5751faf = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_e2640085b703425f8d61c861b5751faf 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_e2640085b703425f8d61c861b5751faf)) 

        Else 
            currentAction = SessionTrace("31. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...") 
 
            currentAction = SessionTrace("31.1. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2 

            currentAction = SessionTrace("32. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_7fafbe4824004359862b677e3c4cf023 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_7fafbe4824004359862b677e3c4cf023 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_7fafbe4824004359862b677e3c4cf023 
            isNullResult = (IsNothing(_AddressDLICollection_7fafbe4824004359862b677e3c4cf023)) 

            currentAction = SessionTrace("33. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("34. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("34.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("34.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("35. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_4b61aa47e887465c9d9b4a8fa412b8f2 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_4b61aa47e887465c9d9b4a8fa412b8f2 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_4b61aa47e887465c9d9b4a8fa412b8f2 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_4b61aa47e887465c9d9b4a8fa412b8f2)) 

        Else 
            currentAction = SessionTrace("36. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...") 
 
            currentAction = SessionTrace("36.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("36.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 

            currentAction = SessionTrace("37. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...") 
 
            currentAction = SessionTrace("37.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = 0 
            currentAction = SessionTrace("37.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("37.3. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("37.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1 

            End If
            End If
            End If
            currentAction = SessionTrace("38. If (_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID Not Is Null Or Not Empty  AND _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0 AND ... Then") 
If (Not IsNothing(_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID) AndAlso _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0 AndAlso Not String.IsNullOrEmpty(_formData.RiskInformation.PrimaryInsured.Client.ClientID)) AndAlso _formData.ErrorsFound = false Then

            currentAction = SessionTrace("39. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_83076309fd2d4784ba5978f288877040 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_83076309fd2d4784ba5978f288877040 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddresseMailDLI.Address.UserCompany, addressId:=_formData.AddresseMailDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_83076309fd2d4784ba5978f288877040 
            isNullResult = (IsNothing(_AddressDLICollection_83076309fd2d4784ba5978f288877040)) 

            currentAction = SessionTrace("40. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("41. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("41.1. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("42. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddresseMailDLI_5d0154aa981849c4aa7eb093ec0efa58 As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
            _AddresseMailDLI_5d0154aa981849c4aa7eb093ec0efa58 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI            (processDate:=_formData.RiskInformation.EffectiveDate, addressId:=_formData.AddresseMailDLI.Address.AddressID, internalAddressKey:=_formData.AddresseMailDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddresseMailDLI = _AddresseMailDLI_5d0154aa981849c4aa7eb093ec0efa58 
            isNullResult = (IsNothing(_AddresseMailDLI_5d0154aa981849c4aa7eb093ec0efa58)) 

            End If
            currentAction = SessionTrace("43. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...") 
 
            currentAction = SessionTrace("43.1. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
              _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1 
            currentAction = SessionTrace("43.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("43.3. _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.UserCompany) Then
              _formData.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("43.4. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 

            currentAction = SessionTrace("44. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_a637f6ddff684313a0814d4c832f777c As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_a637f6ddff684313a0814d4c832f777c = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_a637f6ddff684313a0814d4c832f777c 
            isNullResult = (IsNothing(_AddressDLICollection_a637f6ddff684313a0814d4c832f777c)) 

            currentAction = SessionTrace("45. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("46. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("46.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("47. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_2229ccfadf414859925e122b86baecc4 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_2229ccfadf414859925e122b86baecc4 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_2229ccfadf414859925e122b86baecc4 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_2229ccfadf414859925e122b86baecc4)) 

        Else 
            currentAction = SessionTrace("48. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...") 
 
            currentAction = SessionTrace("48.1. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2 

            currentAction = SessionTrace("49. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_9b4a9c605183408bbd5fc735ca3f0210 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_9b4a9c605183408bbd5fc735ca3f0210 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_9b4a9c605183408bbd5fc735ca3f0210 
            isNullResult = (IsNothing(_AddressDLICollection_9b4a9c605183408bbd5fc735ca3f0210)) 

            currentAction = SessionTrace("50. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("51. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("51.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("52. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_ff17d30c664046b785ab415d17ed1b64 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_ff17d30c664046b785ab415d17ed1b64 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_ff17d30c664046b785ab415d17ed1b64 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_ff17d30c664046b785ab415d17ed1b64)) 

        Else 
            currentAction = SessionTrace("53. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...") 
 
            currentAction = SessionTrace("53.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = 0 
            currentAction = SessionTrace("53.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("53.3. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("53.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1 

            currentAction = SessionTrace("54. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...") 
 
            currentAction = SessionTrace("54.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("54.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 

            End If
            End If
            End If
            currentAction = SessionTrace("55. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("56. If _formData.IsAnonymous = true OR (_formData.ProducerClientID Not Is Null Or Not Empty '' AND ... Then") 
If _formData.IsAnonymous = true OrElse (Not String.IsNullOrEmpty(_formData.ProducerClientID) AndAlso String.IsNullOrEmpty(_formData.RiskInformation.PrimaryInsured.Client.ClientID)) Then

            currentAction = SessionTrace("57. tab1Autenticacion.Visible = true, zonegeneral.Visible = false, zone2.Visible = true...") 
            currentAction = SessionTrace("57.1. tab1Autenticacion.Visible = true...")
BehaviorShowControls("tab1Autenticacion,Visible")
            currentAction = SessionTrace("57.2. zonegeneral.Visible = false...")
BehaviorShowControls("zonegeneral,Hidden")
            currentAction = SessionTrace("57.3. zone2.Visible = true...")
BehaviorShowControls("zone2,Visible")
            currentAction = SessionTrace("57.4. Cotizar.Visible = false...")
BehaviorShowControls("Cotizar,Hidden")
            currentAction = SessionTrace("57.5. Acepto.Visible = false...")
BehaviorShowControls("Acepto,Hidden")
            currentAction = SessionTrace("57.6. InsuredAmountForCalculation.Enabled = false...")
BehaviorShowControls("InsuredAmountForCalculation,Disabled")
            currentAction = SessionTrace("57.7. Currency.Enabled = false...")
BehaviorShowControls("Currency,Disabled")
            currentAction = SessionTrace("57.8. InsuredAmountSelected.Enabled = false...")
BehaviorShowControls("InsuredAmountSelected,Disabled")
            currentAction = SessionTrace("57.9. Coverages.Enabled = false...")
BehaviorShowControls("Coverages,Disabled")
            currentAction = SessionTrace("57.10. tabcontainer0.ActiveTab = tab1Autenticacion...")
tabcontainer0.ActiveTabPage = tabcontainer0.TabPages.FindByName("tab1Autenticacion")

        Else 
            currentAction = SessionTrace("58. tab13.Visible = true, zonegeneral.Visible = false, zone2.Visible = true...") 
            currentAction = SessionTrace("58.1. tab13.Visible = true...")
BehaviorShowControls("tab13,Visible")
            currentAction = SessionTrace("58.2. zonegeneral.Visible = false...")
BehaviorShowControls("zonegeneral,Hidden")
            currentAction = SessionTrace("58.3. zone2.Visible = true...")
BehaviorShowControls("zone2,Visible")
            currentAction = SessionTrace("58.4. Cotizar.Visible = false...")
BehaviorShowControls("Cotizar,Hidden")
            currentAction = SessionTrace("58.5. tab13.Enabled = true...")
BehaviorShowControls("tab13,Enabled")
            currentAction = SessionTrace("58.6. Acepto.Visible = false...")
BehaviorShowControls("Acepto,Hidden")
            currentAction = SessionTrace("58.7. InsuredAmountForCalculation.Enabled = false...")
BehaviorShowControls("InsuredAmountForCalculation,Disabled")
            currentAction = SessionTrace("58.8. Currency.Enabled = false...")
BehaviorShowControls("Currency,Disabled")
            currentAction = SessionTrace("58.9. InsuredAmountSelected.Enabled = false...")
BehaviorShowControls("InsuredAmountSelected,Disabled")
            currentAction = SessionTrace("58.10. Coverages.Enabled = false...")
BehaviorShowControls("Coverages,Disabled")
            currentAction = SessionTrace("58.11. tabcontainer0.ActiveTab = tab13...")
tabcontainer0.ActiveTabPage = tabcontainer0.TabPages.FindByName("tab13")

            End If
            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"Beneficiary")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub btnAutenticar_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("btnAutenticar_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim WorkflowInArguments  As New Dictionary(Of String, Object)
Dim WorkflowOutArguments As IDictionary(Of String, Object)
Dim selectDataTableItem As DataTable


        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. _formData.ClientExistInDB = false...") 
 
            currentAction = SessionTrace("1.1. _formData.ClientExistInDB = false...")

 _formData.ClientExistInDB = false 

            currentAction = SessionTrace("2. _formData.ErrorsFound = false...") 
 
            currentAction = SessionTrace("2.1. _formData.ErrorsFound = false...")

 _formData.ErrorsFound = false 

            currentAction = SessionTrace("3. If _formData.ClienteInformaEsUsuario = true Then") 
If _formData.ClienteInformaEsUsuario = true Then

            currentAction = SessionTrace("4. zone38.Visible = true") 
            currentAction = SessionTrace("4.1. zone38.Visible = true...")
BehaviorShowControls("zone38,Visible")

            End If
            currentAction = SessionTrace("5. If _formData.ClienteInformaEsUsuario = true Then") 
If _formData.ClienteInformaEsUsuario = true Then

            currentAction = SessionTrace("6. _formData.QRegistros = 0...") 
 
            currentAction = SessionTrace("6.1. _formData.QRegistros = 0...")

 _formData.QRegistros = 0 

currentAction = SessionTrace("7. SELECT USERMEMBER.EMAIL FROM USERMEMBER... WHERE USERMEMBER.EMAIL = _formData.UsuarioClaveEntrada )") 
            isFoundData = False 
            With New DataManagerFactory("SELECT COUNT(UPPER(TRIM(USERMEMBER.EMAIL))) EMAIL FROM USERMEMBER USERMEMBER  WHERE UPPER(USERMEMBER.EMAIL) = @:USERMEMBEREMAIL0", "USERMEMBER", "Linked.FrontOffice")
             .AddParameter("USERMEMBEREMAIL0", DbType.AnsiString, 255, (_formData.UsuarioClaveEntrada = String.Empty), _formData.UsuarioClaveEntrada)
 
             _formData.QRegistros = .QueryExecuteScalarToInteger()  
        End With

            currentAction = SessionTrace("8. If _formData.QRegistros Is Null Or Empty  OR _formData.QRegistros = 0 Then") 
If IsNothing(_formData.QRegistros) OrElse _formData.QRegistros = 0 Then

            currentAction = SessionTrace("9. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("9.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

            currentAction = SessionTrace("10. The message 'Lo sentimos... No ha...' will displayed as 'Splash'") 
            messageAction = "Lo sentimos... No ha superado la autenticación del asegurado..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

        Else 
currentAction = SessionTrace("11. SELECT USERMEMBER.EMAIL, USERMEMBER.CLIENTID FROM USERMEMBER... WHERE USERMEMBER.EMAIL = _formData.UsuarioClaveEntrada )") 
            isFoundData = False 
With New DataManagerFactory("SELECT UPPER(TRIM(USERMEMBER.EMAIL)) EMAIL, TRIM(USERMEMBER.CLIENTID) CLIENTID FROM USERMEMBER USERMEMBER  WHERE UPPER(USERMEMBER.EMAIL) = @:USERMEMBEREMAIL0", "USERMEMBER", "Linked.FrontOffice")
             .AddParameter("USERMEMBEREMAIL0", DbType.AnsiString, 255, (_formData.UsuarioClaveEntrada = String.Empty), _formData.UsuarioClaveEntrada)
 
             selectDataTableItem = .QueryExecuteToTable(True)  
        End With
            With selectDataTableItem
                If Not IsNothing(.Rows) AndAlso .Rows.Count > 0 Then
                     isFoundData = True 
                               If IsNothing(_formData.UserInformation) Then
              _formData.UserInformation = New InMotionGIT.FrontOffice.Proxy.UserService.UserInformation
          End If 
                        _formData.UserInformation.Email = .Rows(0).StringValue("EMAIL") 
                        _formData.UserInformation.ClientID = .Rows(0).StringValue("CLIENTID") 

                End If
            End With

            currentAction = SessionTrace("12. Call Shared Function 'Retrieve Client' with parameters (Client Identification)") 
            Dim _ClientProvisional_80a4df8c6f6643f2b6b5fe40773dee5a As InMotionGIT.Client.Entity.Contracts.Client 
            
      _ClientProvisional_80a4df8c6f6643f2b6b5fe40773dee5a = (New InMotionGIT.Client.Services.ClientManager).Retrieve(clientId:=_formData.UserInformation.ClientID, atDate:=Date.Today, childFilter:= "All")
      isNullResult = (IsNothing(_ClientProvisional_80a4df8c6f6643f2b6b5fe40773dee5a))
      isFoundData  = Not isNullResult
     
            _formData.ClientProvisional = _ClientProvisional_80a4df8c6f6643f2b6b5fe40773dee5a 

            currentAction = SessionTrace("13. _formData.ClientExistInDB = true...") 
 
            currentAction = SessionTrace("13.1. _formData.ClientExistInDB = true...")

 _formData.ClientExistInDB = true 

            End If
            End If
            currentAction = SessionTrace("14. If _formData.ClienteInformaExiste = true Then") 
If _formData.ClienteInformaExiste = true Then

            currentAction = SessionTrace("15. _formData.QRegistros = 0...") 
 
            currentAction = SessionTrace("15.1. _formData.QRegistros = 0...")

 _formData.QRegistros = 0 

            currentAction = SessionTrace("16. Call 'LLena ceros a la izquierda' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("CodigoCliente", _formData.ClientInsuredPerson.ClientID) 
                .Add("LargoCodigo", 14) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("LlenaCerosIzquierdaCodigo", "97e5264d-cb53-46a3-a786-fbcc3bb10ff2", 1, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.ClientInsuredPerson.ClientID = WorkflowOutArguments("CodigoCliente")

currentAction = SessionTrace("17. SELECT CLIENT.SCLIENT FROM CLIENT... WHERE CLIENT.SCLIENT = _formData.ClientInsuredPerson.ClientID )") 
            isFoundData = False 
            With New DataManagerFactory("SELECT COUNT(TRIM(CLIENT.SCLIENT)) SCLIENT FROM CLIENT CLIENT  WHERE CLIENT.SCLIENT = @:CLIENTSCLIENT0", "CLIENT", "Linked.LatCombined")
             .AddParameter("CLIENTSCLIENT0", DbType.AnsiStringFixedLength, 14, (_formData.ClientInsuredPerson.ClientID = String.Empty), _formData.ClientInsuredPerson.ClientID)
 
             _formData.QRegistros = .QueryExecuteScalarToInteger()  
        End With

            currentAction = SessionTrace("18. If _formData.QRegistros = 0 OR _formData.QRegistros Is Null Or Empty  Then") 
If _formData.QRegistros = 0 OrElse IsNothing(_formData.QRegistros) Then

            currentAction = SessionTrace("19. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("19.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

            currentAction = SessionTrace("20. The message 'Lo sentimos... No ha...' will displayed as 'Splash'") 
            messageAction = "Lo sentimos... No ha superado la autenticación del asegurado..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

        Else 
            currentAction = SessionTrace("21. Call Shared Function 'Retrieve Client' with parameters (Client Identification)") 
            Dim _ClientProvisional_910c2196112143dfba0cd1fd25ea9ad8 As InMotionGIT.Client.Entity.Contracts.Client 
            
      _ClientProvisional_910c2196112143dfba0cd1fd25ea9ad8 = (New InMotionGIT.Client.Services.ClientManager).Retrieve(clientId:=_formData.ClientInsuredPerson.ClientID, atDate:=Date.Today, childFilter:= "All")
      isNullResult = (IsNothing(_ClientProvisional_910c2196112143dfba0cd1fd25ea9ad8))
      isFoundData  = Not isNullResult
     
            _formData.ClientProvisional = _ClientProvisional_910c2196112143dfba0cd1fd25ea9ad8 

            currentAction = SessionTrace("22. _formData.ClientExistInDB = true...") 
 
            currentAction = SessionTrace("22.1. _formData.ClientExistInDB = true...")

 _formData.ClientExistInDB = true 

            End If
            End If
            currentAction = SessionTrace("23. If _formData.ClienteInformaEsUsuario <> true AND _formData.ClienteInformaExiste <> true Then") 
If _formData.ClienteInformaEsUsuario <> true AndAlso _formData.ClienteInformaExiste <> true Then

            currentAction = SessionTrace("24. Call 'LLena ceros a la izquierda' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("CodigoCliente", _formData.ClientInsuredPerson.ClientID) 
                .Add("LargoCodigo", 14) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("LlenaCerosIzquierdaCodigo", "97e5264d-cb53-46a3-a786-fbcc3bb10ff2", 2, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.ClientInsuredPerson.ClientID = WorkflowOutArguments("CodigoCliente")

            currentAction = SessionTrace("25. Call Shared Function 'Retrieve Client' with parameters (Client Identification)") 
            Dim _ClientProvisional_f54154fc9fdb46d9b5782fb41a57dab4 As InMotionGIT.Client.Entity.Contracts.Client 
            
      _ClientProvisional_f54154fc9fdb46d9b5782fb41a57dab4 = (New InMotionGIT.Client.Services.ClientManager).Retrieve(clientId:=_formData.ClientInsuredPerson.ClientID, atDate:=Date.Today, childFilter:= "All")
      isNullResult = (IsNothing(_ClientProvisional_f54154fc9fdb46d9b5782fb41a57dab4))
      isFoundData  = Not isNullResult
     
            _formData.ClientProvisional = _ClientProvisional_f54154fc9fdb46d9b5782fb41a57dab4 

            currentAction = SessionTrace("26. If Form.IsNullResult = false Then") 
If isNullResult = false Then

            currentAction = SessionTrace("27. _formData.ClientExistInDB = true...") 
 
            currentAction = SessionTrace("27.1. _formData.ClientExistInDB = true...")

 _formData.ClientExistInDB = true 

            currentAction = SessionTrace("28. _formData.ErrorsFound = True...") 
 
            currentAction = SessionTrace("28.1. _formData.ErrorsFound = True...")

 _formData.ErrorsFound = True 

            currentAction = SessionTrace("29. The message 'Lo sentimos... No ha...' will displayed as 'Splash'") 
            messageAction = "Lo sentimos... No ha superado la autenticación del asegurado..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            End If
            End If
            currentAction = SessionTrace("30. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("31. If _formData.ClienteInformaEsUsuario = true OR _formData.ClienteInformaExiste = true Then") 
If _formData.ClienteInformaEsUsuario = true OrElse _formData.ClienteInformaExiste = true Then

            currentAction = SessionTrace("32. If _formData.ClientProvisional.BirthDate Not Is Null Or Not Empty '' Then") 
If Not IsNothing(_formData.ClientProvisional.BirthDate) AndAlso _formData.ClientProvisional.BirthDate <> Date.MinValue Then

            currentAction = SessionTrace("33. If _formData.ClientIncluded.BirthDate <> _formData.ClientProvisional.BirthDate Then") 
If _formData.ClientIncluded.BirthDate <> _formData.ClientProvisional.BirthDate Then

            currentAction = SessionTrace("34. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("34.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

            currentAction = SessionTrace("35. The message 'Lo sentimos... No ha...' will displayed as 'Splash'") 
            messageAction = "Lo sentimos... No ha superado la autenticación del asegurado..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            End If
            End If
            End If
            End If
            currentAction = SessionTrace("36. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("37. If _formData.ClienteInformaEsUsuario = true OR _formData.ClienteInformaExiste = true Then") 
If _formData.ClienteInformaEsUsuario = true OrElse _formData.ClienteInformaExiste = true Then

            currentAction = SessionTrace("38. If _formData.ClientProvisional.Gender Not Is Null Or Not Empty '' Then") 
If Not String.IsNullOrEmpty(_formData.ClientProvisional.Gender) Then

            currentAction = SessionTrace("39. If _formData.ClientIncluded.Gender <> _formData.ClientProvisional.Gender Then") 
If _formData.ClientIncluded.Gender <> _formData.ClientProvisional.Gender Then

            currentAction = SessionTrace("40. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("40.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

            currentAction = SessionTrace("41. The message 'Lo sentimos... No ha...' will displayed as 'Splash'") 
            messageAction = "Lo sentimos... No ha superado la autenticación del asegurado..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            End If
            End If
            End If
            End If
            currentAction = SessionTrace("42. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("43. If _formData.ClienteInformaExiste = true Then") 
If _formData.ClienteInformaExiste = true Then

            currentAction = SessionTrace("44. If _formData.ClientInsuredPerson.FirstName <> _formData.ClientProvisional.FirstName OR _formData.ClientInsuredPerson.LastName <> _formData.ClientProvisional.LastName OR ... Then") 
If _formData.ClientInsuredPerson.FirstName <> _formData.ClientProvisional.FirstName OrElse _formData.ClientInsuredPerson.LastName <> _formData.ClientProvisional.LastName OrElse _formData.ClientInsuredPerson.LastName2 <> _formData.ClientProvisional.LastName2 Then

            currentAction = SessionTrace("45. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("45.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

            currentAction = SessionTrace("46. The message 'Lo sentimos... No ha...' will displayed as 'Splash'") 
            messageAction = "Lo sentimos... No ha superado la autenticación del asegurado..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            End If
            End If
            End If
            currentAction = SessionTrace("47. If _formData.ClientExistInDB = false Then") 
If _formData.ClientExistInDB = false Then

            currentAction = SessionTrace("48. _formData.ClientProvisional.TypeOfPerson = 1...") 
 
            currentAction = SessionTrace("48.1. _formData.ClientProvisional.TypeOfPerson = 1...")
          If IsNothing(_formData.ClientProvisional) Then
              _formData.ClientProvisional = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.ClientProvisional.TypeOfPerson = 1 
            currentAction = SessionTrace("48.2. _formData.ClientIncluded.TypeOfPerson = 1...")
          If IsNothing(_formData.ClientIncluded) Then
              _formData.ClientIncluded = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.ClientIncluded.TypeOfPerson = 1 

            End If
            currentAction = SessionTrace("49. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("50. _formData.RiskInformation.PrimaryInsured.Client = _formData.ClientInsuredPerson...") 
 
            currentAction = SessionTrace("50.1. _formData.RiskInformation.PrimaryInsured.Client = _formData.ClientInsuredPerson...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client = _formData.ClientInsuredPerson 
            currentAction = SessionTrace("50.2. _formData.RiskInformation.PrimaryInsured.Client.BirthDate = _formData.ClientIncluded.BirthDate...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.BirthDate = _formData.ClientIncluded.BirthDate 
            currentAction = SessionTrace("50.3. _formData.RiskInformation.PrimaryInsured.Client.Gender = _formData.ClientIncluded.Gender...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.Gender = _formData.ClientIncluded.Gender 
            currentAction = SessionTrace("50.4. _formData.RiskInformation.PrimaryInsured.Client.SmokerIndicator = _formData.ClientIncluded.SmokerIndi...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.SmokerIndicator = _formData.ClientIncluded.SmokerIndicator 
            currentAction = SessionTrace("50.5. _formData.RiskInformation.PrimaryInsured.Client.TypeOfPerson = _formData.ClientIncluded.TypeOfPers...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.TypeOfPerson = _formData.ClientIncluded.TypeOfPerson 

            currentAction = SessionTrace("51. tab13.Visible = true, zonegeneral.Visible = false, zone2.Visible = true...") 
            currentAction = SessionTrace("51.1. tab13.Visible = true...")
BehaviorShowControls("tab13,Visible")
            currentAction = SessionTrace("51.2. zonegeneral.Visible = false...")
BehaviorShowControls("zonegeneral,Hidden")
            currentAction = SessionTrace("51.3. zone2.Visible = true...")
BehaviorShowControls("zone2,Visible")
            currentAction = SessionTrace("51.4. Cotizar.Visible = false...")
BehaviorShowControls("Cotizar,Hidden")
            currentAction = SessionTrace("51.5. tab13.Enabled = true...")
BehaviorShowControls("tab13,Enabled")
            currentAction = SessionTrace("51.6. Acepto.Visible = false...")
BehaviorShowControls("Acepto,Hidden")
            currentAction = SessionTrace("51.7. InsuredAmountForCalculation.Enabled = false...")
BehaviorShowControls("InsuredAmountForCalculation,Disabled")
            currentAction = SessionTrace("51.8. Currency.Enabled = false...")
BehaviorShowControls("Currency,Disabled")
            currentAction = SessionTrace("51.9. InsuredAmountSelected.Enabled = false...")
BehaviorShowControls("InsuredAmountSelected,Disabled")
            currentAction = SessionTrace("51.10. Coverages.Enabled = false...")
BehaviorShowControls("Coverages,Disabled")

            currentAction = SessionTrace("52. ClientID.Enabled = false, FirstName.Enabled = false, LastName.Enabled = false...") 
            currentAction = SessionTrace("52.1. ClientID.Enabled = false...")
BehaviorShowControls("ClientID,Disabled")
            currentAction = SessionTrace("52.2. FirstName.Enabled = false...")
BehaviorShowControls("FirstName,Disabled")
            currentAction = SessionTrace("52.3. LastName.Enabled = false...")
BehaviorShowControls("LastName,Disabled")
            currentAction = SessionTrace("52.4. LastName2.Enabled = false...")
BehaviorShowControls("LastName2,Disabled")

            currentAction = SessionTrace("53. tab1Autenticacion.Visible = false, tabcontainer0.ActiveTab = tab13") 
            currentAction = SessionTrace("53.1. tab1Autenticacion.Visible = false...")
BehaviorShowControls("tab1Autenticacion,Hidden")
            currentAction = SessionTrace("53.2. tabcontainer0.ActiveTab = tab13...")
tabcontainer0.ActiveTabPage = tabcontainer0.TabPages.FindByName("tab13")

            currentAction = SessionTrace("54. zone10.Enabled = true") 
            currentAction = SessionTrace("54.1. zone10.Enabled = true...")
BehaviorShowControls("zone10,Enabled")

            End If
            currentAction = SessionTrace("55. _formData.ConsumerInformation.CompanyId = 1...") 
 
            currentAction = SessionTrace("55.1. _formData.ConsumerInformation.CompanyId = 1...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation.CompanyId = 1 
            currentAction = SessionTrace("55.2. _formData.ConsumerInformation.Country = 58...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation.Country = 58 
            currentAction = SessionTrace("55.3. _formData.ConsumerInformation.Security.Usercode = 9998...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 
          If IsNothing(_formData.ConsumerInformation.Security) Then
              _formData.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
          End If 

 _formData.ConsumerInformation.Security.Usercode = 9998 

            currentAction = SessionTrace("56. _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...") 
 
            currentAction = SessionTrace("56.1. _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 

 _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
            currentAction = SessionTrace("56.2. _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.eMailAddress) Then
              _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
          End If 

 _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress 
            currentAction = SessionTrace("56.3. _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address 

            currentAction = SessionTrace("57. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("57.1. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryInsured.Client.ClientID 
            currentAction = SessionTrace("57.2. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("57.3. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID 

            currentAction = SessionTrace("58. _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("58.1. _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryInsured.Client.ClientID 
            currentAction = SessionTrace("58.2. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.RecordOwnerType) Then
              _formData.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("58.3. _formData.AddresseMailDLI.Address.AddressID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.AddressID = _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID 

            currentAction = SessionTrace("59. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...") 
 
            currentAction = SessionTrace("59.1. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.RecordOwnerType) Then
              _formData.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("59.2. _formData.AddresseMailDLI.Address.TypeOfAddress = 3...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.TypeOfAddress) Then
              _formData.AddresseMailDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddresseMailDLI.Address.TypeOfAddress = 3 
            currentAction = SessionTrace("59.3. _formData.AddresseMailDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.UserCompany) Then
              _formData.AddresseMailDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddresseMailDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("59.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6 

            currentAction = SessionTrace("60. If (_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID Is Null Or Empty  OR _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) AND ... Then") 
If (IsNothing(_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID) OrElse _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) AndAlso (_formData.ErrorsFound = false AndAlso Not String.IsNullOrEmpty(_formData.RiskInformation.PrimaryInsured.Client.ClientID)) Then

            currentAction = SessionTrace("61. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_5ddc1532ac694b8e8f4bc5e7c303c27c As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_5ddc1532ac694b8e8f4bc5e7c303c27c = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddresseMailDLI.Address.UserCompany, recordOwnerType:=_formData.AddresseMailDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddresseMailDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_5ddc1532ac694b8e8f4bc5e7c303c27c 
            isNullResult = (IsNothing(_AddressDLICollection_5ddc1532ac694b8e8f4bc5e7c303c27c)) 

            currentAction = SessionTrace("62. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("63. _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("63.1. _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("63.2. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("64. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddresseMailDLI_a52f31f67f8e4ddc93bbe81358966934 As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
            _AddresseMailDLI_a52f31f67f8e4ddc93bbe81358966934 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI            (processDate:=_formData.RiskInformation.EffectiveDate, addressId:=_formData.AddresseMailDLI.Address.AddressID, internalAddressKey:=_formData.AddresseMailDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddresseMailDLI = _AddresseMailDLI_a52f31f67f8e4ddc93bbe81358966934 
            isNullResult = (IsNothing(_AddresseMailDLI_a52f31f67f8e4ddc93bbe81358966934)) 

            End If
            currentAction = SessionTrace("65. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...") 
 
            currentAction = SessionTrace("65.1. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
              _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1 
            currentAction = SessionTrace("65.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("65.3. _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.UserCompany) Then
              _formData.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("65.4. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 

            currentAction = SessionTrace("66. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_a4613facf2ea45959aa808e636458145 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_a4613facf2ea45959aa808e636458145 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_a4613facf2ea45959aa808e636458145 
            isNullResult = (IsNothing(_AddressDLICollection_a4613facf2ea45959aa808e636458145)) 

            currentAction = SessionTrace("67. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("68. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("68.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("68.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("69. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_93b32aec6cd84a47a3daef5f3fef70ae As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_93b32aec6cd84a47a3daef5f3fef70ae = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_93b32aec6cd84a47a3daef5f3fef70ae 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_93b32aec6cd84a47a3daef5f3fef70ae)) 

        Else 
            currentAction = SessionTrace("70. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...") 
 
            currentAction = SessionTrace("70.1. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2 

            currentAction = SessionTrace("71. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_0120634e69624253aefe7a1e43c69632 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_0120634e69624253aefe7a1e43c69632 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_0120634e69624253aefe7a1e43c69632 
            isNullResult = (IsNothing(_AddressDLICollection_0120634e69624253aefe7a1e43c69632)) 

            currentAction = SessionTrace("72. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("73. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("73.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("73.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("74. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_2197929b21604034b1bec27b50699cdc As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_2197929b21604034b1bec27b50699cdc = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_2197929b21604034b1bec27b50699cdc 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_2197929b21604034b1bec27b50699cdc)) 

        Else 
            currentAction = SessionTrace("75. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...") 
 
            currentAction = SessionTrace("75.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("75.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 

            currentAction = SessionTrace("76. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...") 
 
            currentAction = SessionTrace("76.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = 0 
            currentAction = SessionTrace("76.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("76.3. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("76.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1 

            End If
            End If
            End If
            currentAction = SessionTrace("77. If (_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID Not Is Null Or Not Empty  AND _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0 AND ... Then") 
If (Not IsNothing(_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID) AndAlso _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0 AndAlso _formData.ErrorsFound = false AndAlso Not String.IsNullOrEmpty(_formData.RiskInformation.PrimaryInsured.Client.ClientID)) Then

            currentAction = SessionTrace("78. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_daa679846fa345a98c5b7f95235f4bc3 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_daa679846fa345a98c5b7f95235f4bc3 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddresseMailDLI.Address.UserCompany, addressId:=_formData.AddresseMailDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_daa679846fa345a98c5b7f95235f4bc3 
            isNullResult = (IsNothing(_AddressDLICollection_daa679846fa345a98c5b7f95235f4bc3)) 

            currentAction = SessionTrace("79. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("80. Cotizar.Enabled = false, Acepto.Enabled = false, RiskInformationEffectiveDate.Enabled = false...") 
            currentAction = SessionTrace("80.1. Cotizar.Enabled = false...")
BehaviorShowControls("Cotizar,Disabled")
            currentAction = SessionTrace("80.2. Acepto.Enabled = false...")
BehaviorShowControls("Acepto,Disabled")
            currentAction = SessionTrace("80.3. RiskInformationEffectiveDate.Enabled = false...")
BehaviorShowControls("RiskInformationEffectiveDate,Disabled")
            currentAction = SessionTrace("80.4. PaymentFrequency.Enabled = false...")
BehaviorShowControls("PaymentFrequency,Disabled")

            currentAction = SessionTrace("81. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("81.1. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("82. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddresseMailDLI_32865beb779c4af29a36da765e2f7ba6 As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
            _AddresseMailDLI_32865beb779c4af29a36da765e2f7ba6 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI            (processDate:=_formData.RiskInformation.EffectiveDate, addressId:=_formData.AddresseMailDLI.Address.AddressID, internalAddressKey:=_formData.AddresseMailDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddresseMailDLI = _AddresseMailDLI_32865beb779c4af29a36da765e2f7ba6 
            isNullResult = (IsNothing(_AddresseMailDLI_32865beb779c4af29a36da765e2f7ba6)) 

            End If
            currentAction = SessionTrace("83. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...") 
 
            currentAction = SessionTrace("83.1. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
              _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1 
            currentAction = SessionTrace("83.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("83.3. _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.UserCompany) Then
              _formData.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("83.4. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 

            currentAction = SessionTrace("84. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_f4242e6e40904d94b06385e768745b88 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_f4242e6e40904d94b06385e768745b88 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_f4242e6e40904d94b06385e768745b88 
            isNullResult = (IsNothing(_AddressDLICollection_f4242e6e40904d94b06385e768745b88)) 

            currentAction = SessionTrace("85. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("86. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("86.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("87. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_124e60d3b8264d378795b89f70671e46 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_124e60d3b8264d378795b89f70671e46 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_124e60d3b8264d378795b89f70671e46 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_124e60d3b8264d378795b89f70671e46)) 

        Else 
            currentAction = SessionTrace("88. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...") 
 
            currentAction = SessionTrace("88.1. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2 

            currentAction = SessionTrace("89. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_36e8f1a3ea2d4fe48fdc182afacba10d As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_36e8f1a3ea2d4fe48fdc182afacba10d = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_36e8f1a3ea2d4fe48fdc182afacba10d 
            isNullResult = (IsNothing(_AddressDLICollection_36e8f1a3ea2d4fe48fdc182afacba10d)) 

            currentAction = SessionTrace("90. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("91. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("91.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("92. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_ec9ce123e7c84260aa0f8c333d9d3d4e As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_ec9ce123e7c84260aa0f8c333d9d3d4e = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_ec9ce123e7c84260aa0f8c333d9d3d4e 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_ec9ce123e7c84260aa0f8c333d9d3d4e)) 

        Else 
            currentAction = SessionTrace("93. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...") 
 
            currentAction = SessionTrace("93.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = 0 
            currentAction = SessionTrace("93.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("93.3. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("93.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1 

            currentAction = SessionTrace("94. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...") 
 
            currentAction = SessionTrace("94.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("94.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 

            End If
            End If
            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"Beneficiary")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub ClientID_TextChanged(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("ClientID_Text")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim WorkflowInArguments  As New Dictionary(Of String, Object)
Dim WorkflowOutArguments As IDictionary(Of String, Object)
Dim DayBirthDate As System.Int16
Dim MonthBirthDate As System.Int16
Dim YearBirthDate As System.Int16
Dim DayBirthDateFromBD As System.Int16
Dim MonthBirthDateFromBD As System.Int16
Dim YearBirthDateFromBD As System.Int16


        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
           With parametersDictionary
    .Add("DayBirthDate", DayBirthDate)
    .Add("MonthBirthDate", MonthBirthDate)
    .Add("YearBirthDate", YearBirthDate)
    .Add("DayBirthDateFromBD", DayBirthDateFromBD)
    .Add("MonthBirthDateFromBD", MonthBirthDateFromBD)
    .Add("YearBirthDateFromBD", YearBirthDateFromBD)
End With
            currentAction = SessionTrace("1. _formData.ErrorsFound = false...") 
 
            currentAction = SessionTrace("1.1. _formData.ErrorsFound = false...")

 _formData.ErrorsFound = false 

            currentAction = SessionTrace("2. _formData.ClienteIndicado = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("2.1. _formData.ClienteIndicado = _formData.RiskInformation.PrimaryIn...")

 _formData.ClienteIndicado = _formData.RiskInformation.PrimaryInsured.Client.ClientID 

            currentAction = SessionTrace("3. Call 'LLena ceros a la izquierda' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("CodigoCliente", _formData.ClienteIndicado) 
                .Add("LargoCodigo", 14) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("LlenaCerosIzquierdaCodigo", "97e5264d-cb53-46a3-a786-fbcc3bb10ff2", 0, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.ClienteIndicado = WorkflowOutArguments("CodigoCliente")

            currentAction = SessionTrace("4. Call Shared Function 'Retrieve Client' with parameters (Client Identification)") 
            Dim _Client_81e7f7e08ae6408d801991a77bdf077c As InMotionGIT.Client.Entity.Contracts.Client 
                      If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
                      If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
                      If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 
            
      _Client_81e7f7e08ae6408d801991a77bdf077c = (New InMotionGIT.Client.Services.ClientManager).Retrieve(clientId:=_formData.ClienteIndicado, atDate:=Date.Today, childFilter:= "All")
      isNullResult = (IsNothing(_Client_81e7f7e08ae6408d801991a77bdf077c))
      isFoundData  = Not isNullResult
     
            _formData.RiskInformation.PrimaryInsured.Client = _Client_81e7f7e08ae6408d801991a77bdf077c 

            currentAction = SessionTrace("5. If Form.IsNullResult = true Then") 
If isNullResult = true Then

            currentAction = SessionTrace("6. _formData.ClientExistInDB = false...") 
 
            currentAction = SessionTrace("6.1. _formData.ClientExistInDB = false...")

 _formData.ClientExistInDB = false 
            currentAction = SessionTrace("6.2. _formData.RiskInformation.PrimaryInsured = Nothing...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 

 _formData.RiskInformation.PrimaryInsured = Nothing 
            currentAction = SessionTrace("6.3. _formData.RiskInformation.PrimaryInsured.Client.TypeOfPerson = 1...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.TypeOfPerson = 1 

            currentAction = SessionTrace("7. _formData.RiskInformation.PrimaryInsured.Client.ClientID = _formData.ClienteIndicado...") 
 
            currentAction = SessionTrace("7.1. _formData.RiskInformation.PrimaryInsured.Client.ClientID = _formData.ClienteIndicado...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.ClientID = _formData.ClienteIndicado 

            currentAction = SessionTrace("8. _formData.RiskInformation.PrimaryInsured.Client.BirthDate = _formData.ClientIncluded.BirthDate...") 
 
            currentAction = SessionTrace("8.1. _formData.RiskInformation.PrimaryInsured.Client.BirthDate = _formData.ClientIncluded.BirthDate...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.BirthDate = _formData.ClientIncluded.BirthDate 
            currentAction = SessionTrace("8.2. _formData.RiskInformation.PrimaryInsured.Client.Gender = _formData.ClientIncluded.Gender...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.Gender = _formData.ClientIncluded.Gender 
            currentAction = SessionTrace("8.3. _formData.RiskInformation.PrimaryInsured.Client.SmokerIndicator = _formData.ClientIncluded.SmokerIndi...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.SmokerIndicator = _formData.ClientIncluded.SmokerIndicator 

            currentAction = SessionTrace("9. Height.Enabled = true, Weight.Enabled = true, FirstName.Enabled = true...") 
            currentAction = SessionTrace("9.1. Height.Enabled = true...")
BehaviorShowControls("Height,Enabled")
            currentAction = SessionTrace("9.2. Weight.Enabled = true...")
BehaviorShowControls("Weight,Enabled")
            currentAction = SessionTrace("9.3. FirstName.Enabled = true...")
BehaviorShowControls("FirstName,Enabled")
            currentAction = SessionTrace("9.4. LastName.Enabled = true...")
BehaviorShowControls("LastName,Enabled")
            currentAction = SessionTrace("9.5. LastName2.Enabled = true...")
BehaviorShowControls("LastName2,Enabled")

            currentAction = SessionTrace("10. _formData.RiskInformation.PrimaryInsured.Client.IsNew = true...") 
 
            currentAction = SessionTrace("10.1. _formData.RiskInformation.PrimaryInsured.Client.IsNew = true...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.IsNew = true 
            currentAction = SessionTrace("10.2. _formData.RiskInformation.PrimaryInsured.Client.TypeOfPerson = 1...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.TypeOfPerson = 1 

            currentAction = SessionTrace("11. FirstName.Enabled = true, LastName.Enabled = true, LastName2.Enabled = true...") 
            currentAction = SessionTrace("11.1. FirstName.Enabled = true...")
BehaviorShowControls("FirstName,Enabled")
            currentAction = SessionTrace("11.2. LastName.Enabled = true...")
BehaviorShowControls("LastName,Enabled")
            currentAction = SessionTrace("11.3. LastName2.Enabled = true...")
BehaviorShowControls("LastName2,Enabled")
            currentAction = SessionTrace("11.4. zone10.Enabled = true...")
BehaviorShowControls("zone10,Enabled")

        Else 
            currentAction = SessionTrace("12. _formData.ClientExistInDB = true...") 
 
            currentAction = SessionTrace("12.1. _formData.ClientExistInDB = true...")

 _formData.ClientExistInDB = true 

            currentAction = SessionTrace("13. _formData.RiskInformation.PrimaryInsured.Client.IsNew = false...") 
 
            currentAction = SessionTrace("13.1. _formData.RiskInformation.PrimaryInsured.Client.IsNew = false...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.IsNew = false 

            currentAction = SessionTrace("14. FirstName.Enabled = false, LastName.Enabled = false, LastName2.Enabled = false") 
            currentAction = SessionTrace("14.1. FirstName.Enabled = false...")
BehaviorShowControls("FirstName,Disabled")
            currentAction = SessionTrace("14.2. LastName.Enabled = false...")
BehaviorShowControls("LastName,Disabled")
            currentAction = SessionTrace("14.3. LastName2.Enabled = false...")
BehaviorShowControls("LastName2,Disabled")

            End If
            currentAction = SessionTrace("15. If _formData.ClientExistInDB = true Then") 
If _formData.ClientExistInDB = true Then

            currentAction = SessionTrace("16. If _formData.RiskInformation.PrimaryInsured.Client.BirthDate Is Null Or Empty '' Then") 
If IsNothing(_formData.RiskInformation.PrimaryInsured.Client.BirthDate) OrElse _formData.RiskInformation.PrimaryInsured.Client.BirthDate = Date.MinValue Then

            currentAction = SessionTrace("17. _formData.RiskInformation.PrimaryInsured.Client.IsDirty = True...") 
 
            currentAction = SessionTrace("17.1. _formData.RiskInformation.PrimaryInsured.Client.IsDirty = True...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.IsDirty = True 

            currentAction = SessionTrace("18. BirthDate.Enabled = true") 
            currentAction = SessionTrace("18.1. BirthDate.Enabled = true...")
BehaviorShowControls("BirthDate,Enabled")

        Else 
            currentAction = SessionTrace("19. {DayBirthDate} = _formData.ClientIncluded.BirthDate....") 
 
            currentAction = SessionTrace("19.1. {DayBirthDate} = _formData.ClientIncluded.BirthDate....")

 DayBirthDate = _formData.ClientIncluded.BirthDate.Day 
            currentAction = SessionTrace("19.2. {MonthBirthDate} = _formData.ClientIncluded.BirthDate....")

 MonthBirthDate = _formData.ClientIncluded.BirthDate.Month 
            currentAction = SessionTrace("19.3. {YearBirthDate} = _formData.ClientIncluded.BirthDate....")

 YearBirthDate = _formData.ClientIncluded.BirthDate.Year 
            currentAction = SessionTrace("19.4. {DayBirthDateFromBD} = _formData.RiskInformation.PrimaryIn...")

 DayBirthDateFromBD = _formData.RiskInformation.PrimaryInsured.Client.BirthDate.Day 
            currentAction = SessionTrace("19.5. {MonthBirthDateFromBD} = _formData.RiskInformation.PrimaryIn...")

 MonthBirthDateFromBD = _formData.RiskInformation.PrimaryInsured.Client.BirthDate.Month 
            currentAction = SessionTrace("19.6. {YearBirthDateFromBD} = _formData.RiskInformation.PrimaryIn...")

 YearBirthDateFromBD = _formData.RiskInformation.PrimaryInsured.Client.BirthDate.Year 

            currentAction = SessionTrace("20. If {DayBirthDate} <> DayBirthDateFromBD OR {MonthBirthDate} <> MonthBirthDateFromBD OR ... Then") 
If DayBirthDate <> DayBirthDateFromBD OrElse MonthBirthDate <> MonthBirthDateFromBD OrElse YearBirthDate <> YearBirthDateFromBD Then

            currentAction = SessionTrace("21. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("21.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

parametersDictionary("DayBirthDate") = DayBirthDate
parametersDictionary("MonthBirthDate") = MonthBirthDate
parametersDictionary("YearBirthDate") = YearBirthDate
parametersDictionary("DayBirthDateFromBD") = DayBirthDateFromBD
parametersDictionary("MonthBirthDateFromBD") = MonthBirthDateFromBD
parametersDictionary("YearBirthDateFromBD") = YearBirthDateFromBD
            currentAction = SessionTrace("22. The message 'El cliente indicado ...' will displayed as 'Popup'") 
            messageAction = "El cliente indicado está registrado en el sistema y la fecha de nacimiento incluida NO coincide con la fecha de nacimiento previamente registrada... No se puede continuar con la cotización..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            currentAction = SessionTrace("23. BirthDate.Enabled = true, Gender.Enabled = true") 
            currentAction = SessionTrace("23.1. BirthDate.Enabled = true...")
BehaviorShowControls("BirthDate,Enabled")
            currentAction = SessionTrace("23.2. Gender.Enabled = true...")
BehaviorShowControls("Gender,Enabled")

        Else 
            currentAction = SessionTrace("24. BirthDate.Enabled = false") 
            currentAction = SessionTrace("24.1. BirthDate.Enabled = false...")
BehaviorShowControls("BirthDate,Disabled")

            End If
            End If
            End If
            currentAction = SessionTrace("25. If _formData.ClientExistInDB = true AND _formData.ErrorsFound = false Then") 
If _formData.ClientExistInDB = true AndAlso _formData.ErrorsFound = false Then

            currentAction = SessionTrace("26. If _formData.RiskInformation.PrimaryInsured.Client.Gender Is Null Or Empty '' OR _formData.RiskInformation.PrimaryInsured.Client.Gender = 3 Then") 
If String.IsNullOrEmpty(_formData.RiskInformation.PrimaryInsured.Client.Gender) OrElse _formData.RiskInformation.PrimaryInsured.Client.Gender = 3 Then

            currentAction = SessionTrace("27. _formData.RiskInformation.PrimaryInsured.Client.IsDirty = True...") 
 
            currentAction = SessionTrace("27.1. _formData.RiskInformation.PrimaryInsured.Client.IsDirty = True...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.IsDirty = True 

            currentAction = SessionTrace("28. Gender.Enabled = true") 
            currentAction = SessionTrace("28.1. Gender.Enabled = true...")
BehaviorShowControls("Gender,Enabled")

        Else 
            currentAction = SessionTrace("29. If _formData.ClientIncluded.Gender <> _formData.RiskInformation.PrimaryInsured.Client.Gender Then") 
If _formData.ClientIncluded.Gender <> _formData.RiskInformation.PrimaryInsured.Client.Gender Then

            currentAction = SessionTrace("30. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("30.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

parametersDictionary("DayBirthDate") = DayBirthDate
parametersDictionary("MonthBirthDate") = MonthBirthDate
parametersDictionary("YearBirthDate") = YearBirthDate
parametersDictionary("DayBirthDateFromBD") = DayBirthDateFromBD
parametersDictionary("MonthBirthDateFromBD") = MonthBirthDateFromBD
parametersDictionary("YearBirthDateFromBD") = YearBirthDateFromBD
            currentAction = SessionTrace("31. The message 'El cliente indicado ...' will displayed as 'Popup'") 
            messageAction = "El cliente indicado está registrado en el sistema y el género incluido NO coincide con el género previamente registrado... No se puede continuar con la cotización..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            currentAction = SessionTrace("32. Gender.Enabled = true, BirthDate.Enabled = true") 
            currentAction = SessionTrace("32.1. Gender.Enabled = true...")
BehaviorShowControls("Gender,Enabled")
            currentAction = SessionTrace("32.2. BirthDate.Enabled = true...")
BehaviorShowControls("BirthDate,Enabled")

        Else 
            currentAction = SessionTrace("33. Gender.Enabled = false") 
            currentAction = SessionTrace("33.1. Gender.Enabled = false...")
BehaviorShowControls("Gender,Disabled")

            End If
            End If
            End If
            currentAction = SessionTrace("34. _formData.AccumulatedAmount = 0...") 
 
            currentAction = SessionTrace("34.1. _formData.AccumulatedAmount = 0...")

 _formData.AccumulatedAmount = 0 

            currentAction = SessionTrace("35. If _formData.ClientExistInDB = True AND _formData.ErrorsFound = false Then") 
If _formData.ClientExistInDB = True AndAlso _formData.ErrorsFound = false Then

            currentAction = SessionTrace("36. Call 'Get the face amount of the Life policies of the insured person' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("ClientID", _formData.RiskInformation.PrimaryInsured.Client.ClientID) 
                .Add("CurrencyID", _formData.Currency) 
                .Add("Amount", _formData.AccumulatedAmount) 
                .Add("ProcessDate", _formData.RiskInformation.EffectiveDate) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("GetFaceAmountOfLifePoliciesOfTheInsuredPerson", "a240a822-d493-4dff-a365-ccb17551e006", 2, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.RiskInformation.PrimaryInsured.Client.ClientID = WorkflowOutArguments("ClientID")
                _formData.Currency = WorkflowOutArguments("CurrencyID")
                _formData.AccumulatedAmount = WorkflowOutArguments("Amount")
                _formData.RiskInformation.EffectiveDate = WorkflowOutArguments("ProcessDate")

            currentAction = SessionTrace("37. _formData.CancelledPoliciesQuantity = 0...") 
 
            currentAction = SessionTrace("37.1. _formData.CancelledPoliciesQuantity = 0...")

 _formData.CancelledPoliciesQuantity = 0 

currentAction = SessionTrace("38. SELECT CERTIFICAT.SCERTYPE, CERTIFICAT.NBRANCH, CERTIFICAT.NPRODUCT FROM CERTIFICAT... WHERE CERTIFICAT.SCERTYPE = 2 AND CERTIFICAT.SSTATUSVA <> 3 AND CERTIFICAT.NNULLCODE <> 2 AND )") 
            isFoundData = False 
            With New DataManagerFactory("SELECT DISTINCT COUNT(CERTIFICAT.NPOLICY) NPOLICY FROM CERTIFICAT CERTIFICAT JOIN ROLES ROLES ON ROLES.SCERTYPE = CERTIFICAT.SCERTYPE  AND ROLES.NBRANCH = CERTIFICAT.NBRANCH  AND ROLES.NPRODUCT = CERTIFICAT.NPRODUCT  AND ROLES.NPOLICY = CERTIFICAT.NPOLICY  AND ROLES.NCERTIF = CERTIFICAT.NCERTIF  WHERE CERTIFICAT.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND ROLES.NROLE = 2 AND ROLES.SCLIENT = @:ROLESSCLIENT3 AND (CERTIFICAT.NNULLCODE <> 2 AND CERTIFICAT.NNULLCODE <> 3 AND CERTIFICAT.NNULLCODE <> 0 AND CERTIFICAT.NNULLCODE IS NOT NULL)", "CERTIFICAT", "Linked.LatCombined")
             .AddParameter("ROLESSCLIENT3", DbType.AnsiStringFixedLength, 14, (_formData.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), _formData.RiskInformation.PrimaryInsured.Client.ClientID)
 
             _formData.CancelledPoliciesQuantity = .QueryExecuteScalarToInteger()  
        End With

            currentAction = SessionTrace("39. _formData.OtherPoliciesSameRiskQuantity = 0...") 
 
            currentAction = SessionTrace("39.1. _formData.OtherPoliciesSameRiskQuantity = 0...")

 _formData.OtherPoliciesSameRiskQuantity = 0 

currentAction = SessionTrace("40. SELECT CERTIFICAT.SCERTYPE, CERTIFICAT.NBRANCH, CERTIFICAT.NPRODUCT FROM CERTIFICAT... WHERE CERTIFICAT.SCERTYPE = 2 AND CERTIFICAT.SSTATUSVA <> 3 AND CERTIFICAT.NBRANCH = _formData.RiskInformation.LineOfBusiness AND )") 
            isFoundData = False 
            With New DataManagerFactory("SELECT DISTINCT COUNT(CERTIFICAT.NPOLICY) NPOLICY FROM CERTIFICAT CERTIFICAT JOIN ROLES ROLES ON ROLES.SCERTYPE = CERTIFICAT.SCERTYPE  AND ROLES.NBRANCH = CERTIFICAT.NBRANCH  AND ROLES.NPRODUCT = CERTIFICAT.NPRODUCT  AND ROLES.NPOLICY = CERTIFICAT.NPOLICY  AND ROLES.NCERTIF = CERTIFICAT.NCERTIF  WHERE CERTIFICAT.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND ROLES.NROLE = 2 AND ROLES.SCLIENT = @:ROLESSCLIENT3 AND CERTIFICAT.NBRANCH = @:CERTIFICATNBRANCH4 AND CERTIFICAT.NNULLCODE IS NULL", "CERTIFICAT", "Linked.LatCombined")
             .AddParameter("ROLESSCLIENT3", DbType.AnsiStringFixedLength, 14, (_formData.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), _formData.RiskInformation.PrimaryInsured.Client.ClientID)
.AddParameter("CERTIFICATNBRANCH4", DbType.Int32, 5, False, _formData.RiskInformation.LineOfBusiness)
 
             _formData.OtherPoliciesSameRiskQuantity = .QueryExecuteScalarToInteger()  
        End With

            currentAction = SessionTrace("41. If (_formData.CancelledPoliciesQuantity <> 0) Then") 
If (_formData.CancelledPoliciesQuantity <> 0) Then

parametersDictionary("DayBirthDate") = DayBirthDate
parametersDictionary("MonthBirthDate") = MonthBirthDate
parametersDictionary("YearBirthDate") = YearBirthDate
parametersDictionary("DayBirthDateFromBD") = DayBirthDateFromBD
parametersDictionary("MonthBirthDateFromBD") = MonthBirthDateFromBD
parametersDictionary("YearBirthDateFromBD") = YearBirthDateFromBD
            currentAction = SessionTrace("42. The message 'Existe(n) poliza(s) ...' will displayed as 'Popup'") 
            messageAction = "Existe(n) poliza(s) anulada(s) para el cliente." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            End If
            End If
            currentAction = SessionTrace("43. Acepto.Visible = false") 
            currentAction = SessionTrace("43.1. Acepto.Visible = false...")
BehaviorShowControls("Acepto,Hidden")

            currentAction = SessionTrace("44. If _formData.AccumulatedAmount <> 0 AND _formData.AccumulatedAmount Not Is Null Or Not Empty  AND ... Then") 
If _formData.AccumulatedAmount <> 0 AndAlso Not IsNothing(_formData.AccumulatedAmount) AndAlso _formData.ErrorsFound = false Then

            currentAction = SessionTrace("45. zone3Cumulo.Visible = true") 
            currentAction = SessionTrace("45.1. zone3Cumulo.Visible = true...")
BehaviorShowControls("zone3Cumulo,Visible")

        Else 
            currentAction = SessionTrace("46. zone3Cumulo.Visible = false") 
            currentAction = SessionTrace("46.1. zone3Cumulo.Visible = false...")
BehaviorShowControls("zone3Cumulo,Hidden")

            End If
            currentAction = SessionTrace("47. If _formData.ErrorsFound = true Then") 
If _formData.ErrorsFound = true Then

            currentAction = SessionTrace("48. tab13.Visible = false, tabcontainer0.ActiveTab = InfBasica, zone17.Enabled = true...") 
            currentAction = SessionTrace("48.1. tab13.Visible = false...")
BehaviorShowControls("tab13,Hidden")
            currentAction = SessionTrace("48.2. tabcontainer0.ActiveTab = InfBasica...")
tabcontainer0.ActiveTabPage = tabcontainer0.TabPages.FindByName("InfBasica")
            currentAction = SessionTrace("48.3. zone17.Enabled = true...")
BehaviorShowControls("zone17,Enabled")
            currentAction = SessionTrace("48.4. Cotizar.Visible = true...")
BehaviorShowControls("Cotizar,Visible")
            currentAction = SessionTrace("48.5. label1.Visible = true...")
BehaviorShowControls("label1,Visible")
            currentAction = SessionTrace("48.6. label6.Visible = false...")
BehaviorShowControls("label6,Hidden")
            currentAction = SessionTrace("48.7. Acepto.Visible = false...")
BehaviorShowControls("Acepto,Hidden")
            currentAction = SessionTrace("48.8. Cotizar.Enabled = true...")
BehaviorShowControls("Cotizar,Enabled")
            currentAction = SessionTrace("48.9. Acepto.Enabled = true...")
BehaviorShowControls("Acepto,Enabled")
            currentAction = SessionTrace("48.10. RiskInformationEffectiveDate.Enabled = true...")
BehaviorShowControls("RiskInformationEffectiveDate,Enabled")
            currentAction = SessionTrace("48.11. PaymentFrequency.Enabled = true...")
BehaviorShowControls("PaymentFrequency,Enabled")
            currentAction = SessionTrace("48.12. zone5.Visible = true...")
BehaviorShowControls("zone5,Visible")
            currentAction = SessionTrace("48.13. InsuredAmountForCalculation.Enabled = true...")
BehaviorShowControls("InsuredAmountForCalculation,Enabled")
            currentAction = SessionTrace("48.14. zone10.Enabled = false...")
BehaviorShowControls("zone10,Disabled")

            currentAction = SessionTrace("49. _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contr...") 
 
            currentAction = SessionTrace("49.1. _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contr...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client 

        Else 
            currentAction = SessionTrace("50. zone10.Enabled = true, PaymentFrequency.Enabled = false") 
            currentAction = SessionTrace("50.1. zone10.Enabled = true...")
BehaviorShowControls("zone10,Enabled")
            currentAction = SessionTrace("50.2. PaymentFrequency.Enabled = false...")
BehaviorShowControls("PaymentFrequency,Disabled")

            End If
            currentAction = SessionTrace("51. _formData.ConsumerInformation.CompanyId = 1...") 
 
            currentAction = SessionTrace("51.1. _formData.ConsumerInformation.CompanyId = 1...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation.CompanyId = 1 
            currentAction = SessionTrace("51.2. _formData.ConsumerInformation.Country = 58...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation.Country = 58 
            currentAction = SessionTrace("51.3. _formData.ConsumerInformation.Security.Usercode = 9998...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 
          If IsNothing(_formData.ConsumerInformation.Security) Then
              _formData.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
          End If 

 _formData.ConsumerInformation.Security.Usercode = 9998 

            currentAction = SessionTrace("52. _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...") 
 
            currentAction = SessionTrace("52.1. _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 

 _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
            currentAction = SessionTrace("52.2. _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.eMailAddress) Then
              _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
          End If 

 _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress 
            currentAction = SessionTrace("52.3. _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address 

            currentAction = SessionTrace("53. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("53.1. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryInsured.Client.ClientID 
            currentAction = SessionTrace("53.2. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("53.3. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID 

            currentAction = SessionTrace("54. _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("54.1. _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryInsured.Client.ClientID 
            currentAction = SessionTrace("54.2. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.RecordOwnerType) Then
              _formData.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("54.3. _formData.AddresseMailDLI.Address.AddressID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.AddressID = _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID 

            currentAction = SessionTrace("55. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...") 
 
            currentAction = SessionTrace("55.1. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.RecordOwnerType) Then
              _formData.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("55.2. _formData.AddresseMailDLI.Address.TypeOfAddress = 3...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.TypeOfAddress) Then
              _formData.AddresseMailDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddresseMailDLI.Address.TypeOfAddress = 3 
            currentAction = SessionTrace("55.3. _formData.AddresseMailDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.UserCompany) Then
              _formData.AddresseMailDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddresseMailDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("55.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6 

            currentAction = SessionTrace("56. If (_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID Is Null Or Empty  OR _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) AND ... Then") 
If (IsNothing(_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID) OrElse _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) AndAlso (_formData.ErrorsFound = false) Then

            currentAction = SessionTrace("57. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_4ed4fdd81d114dbabfdb7abc2af79808 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_4ed4fdd81d114dbabfdb7abc2af79808 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddresseMailDLI.Address.UserCompany, recordOwnerType:=_formData.AddresseMailDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddresseMailDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_4ed4fdd81d114dbabfdb7abc2af79808 
            isNullResult = (IsNothing(_AddressDLICollection_4ed4fdd81d114dbabfdb7abc2af79808)) 

            currentAction = SessionTrace("58. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("59. _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("59.1. _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("59.2. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("60. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddresseMailDLI_57c3dcd1196a495ab4cdcab8bbc24827 As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
            _AddresseMailDLI_57c3dcd1196a495ab4cdcab8bbc24827 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI            (processDate:=_formData.RiskInformation.EffectiveDate, addressId:=_formData.AddresseMailDLI.Address.AddressID, internalAddressKey:=_formData.AddresseMailDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddresseMailDLI = _AddresseMailDLI_57c3dcd1196a495ab4cdcab8bbc24827 
            isNullResult = (IsNothing(_AddresseMailDLI_57c3dcd1196a495ab4cdcab8bbc24827)) 

            End If
            currentAction = SessionTrace("61. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...") 
 
            currentAction = SessionTrace("61.1. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
              _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1 
            currentAction = SessionTrace("61.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("61.3. _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.UserCompany) Then
              _formData.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("61.4. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 

            currentAction = SessionTrace("62. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_5fcc4f5608c44cf7a309209054449030 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_5fcc4f5608c44cf7a309209054449030 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_5fcc4f5608c44cf7a309209054449030 
            isNullResult = (IsNothing(_AddressDLICollection_5fcc4f5608c44cf7a309209054449030)) 

            currentAction = SessionTrace("63. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("64. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("64.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("64.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("65. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_2e245cc454db4cafa4fee39b6f0f2c18 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_2e245cc454db4cafa4fee39b6f0f2c18 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_2e245cc454db4cafa4fee39b6f0f2c18 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_2e245cc454db4cafa4fee39b6f0f2c18)) 

        Else 
            currentAction = SessionTrace("66. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...") 
 
            currentAction = SessionTrace("66.1. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2 

            currentAction = SessionTrace("67. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_c690cbb0f2bb4ee2a34eab69f4541d9b As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_c690cbb0f2bb4ee2a34eab69f4541d9b = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_c690cbb0f2bb4ee2a34eab69f4541d9b 
            isNullResult = (IsNothing(_AddressDLICollection_c690cbb0f2bb4ee2a34eab69f4541d9b)) 

            currentAction = SessionTrace("68. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("69. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("69.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("69.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("70. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_90fc8dbec1624aab9c7cf90f505abe64 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_90fc8dbec1624aab9c7cf90f505abe64 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_90fc8dbec1624aab9c7cf90f505abe64 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_90fc8dbec1624aab9c7cf90f505abe64)) 

        Else 
            currentAction = SessionTrace("71. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...") 
 
            currentAction = SessionTrace("71.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("71.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 

            currentAction = SessionTrace("72. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...") 
 
            currentAction = SessionTrace("72.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = 0 
            currentAction = SessionTrace("72.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("72.3. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("72.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1 

            End If
            End If
            End If
            currentAction = SessionTrace("73. If (_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID Not Is Null Or Not Empty  AND _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0 AND ... Then") 
If (Not IsNothing(_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID) AndAlso _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0 AndAlso _formData.ErrorsFound = false) Then

            currentAction = SessionTrace("74. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_0c786cb89fa8481b984ccf0956d23108 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_0c786cb89fa8481b984ccf0956d23108 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddresseMailDLI.Address.UserCompany, addressId:=_formData.AddresseMailDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_0c786cb89fa8481b984ccf0956d23108 
            isNullResult = (IsNothing(_AddressDLICollection_0c786cb89fa8481b984ccf0956d23108)) 

            currentAction = SessionTrace("75. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("76. Cotizar.Enabled = false, Acepto.Enabled = false, RiskInformationEffectiveDate.Enabled = false...") 
            currentAction = SessionTrace("76.1. Cotizar.Enabled = false...")
BehaviorShowControls("Cotizar,Disabled")
            currentAction = SessionTrace("76.2. Acepto.Enabled = false...")
BehaviorShowControls("Acepto,Disabled")
            currentAction = SessionTrace("76.3. RiskInformationEffectiveDate.Enabled = false...")
BehaviorShowControls("RiskInformationEffectiveDate,Disabled")
            currentAction = SessionTrace("76.4. PaymentFrequency.Enabled = false...")
BehaviorShowControls("PaymentFrequency,Disabled")

            currentAction = SessionTrace("77. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("77.1. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("78. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddresseMailDLI_ee55f660ba664f7ca5ba393a70aeb937 As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
            _AddresseMailDLI_ee55f660ba664f7ca5ba393a70aeb937 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI            (processDate:=_formData.RiskInformation.EffectiveDate, addressId:=_formData.AddresseMailDLI.Address.AddressID, internalAddressKey:=_formData.AddresseMailDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddresseMailDLI = _AddresseMailDLI_ee55f660ba664f7ca5ba393a70aeb937 
            isNullResult = (IsNothing(_AddresseMailDLI_ee55f660ba664f7ca5ba393a70aeb937)) 

            End If
            currentAction = SessionTrace("79. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...") 
 
            currentAction = SessionTrace("79.1. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
              _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1 
            currentAction = SessionTrace("79.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("79.3. _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.UserCompany) Then
              _formData.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("79.4. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 

            currentAction = SessionTrace("80. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_24a6eb537dee4c7da51d71e0644afdd7 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_24a6eb537dee4c7da51d71e0644afdd7 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_24a6eb537dee4c7da51d71e0644afdd7 
            isNullResult = (IsNothing(_AddressDLICollection_24a6eb537dee4c7da51d71e0644afdd7)) 

            currentAction = SessionTrace("81. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("82. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("82.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("83. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_c2778e3e4f6b40e49a6ac8bb5ab771cb As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_c2778e3e4f6b40e49a6ac8bb5ab771cb = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_c2778e3e4f6b40e49a6ac8bb5ab771cb 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_c2778e3e4f6b40e49a6ac8bb5ab771cb)) 

        Else 
            currentAction = SessionTrace("84. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...") 
 
            currentAction = SessionTrace("84.1. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2 

            currentAction = SessionTrace("85. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_e8c02d0197e2464e8b00d8b189c530d4 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_e8c02d0197e2464e8b00d8b189c530d4 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_e8c02d0197e2464e8b00d8b189c530d4 
            isNullResult = (IsNothing(_AddressDLICollection_e8c02d0197e2464e8b00d8b189c530d4)) 

            currentAction = SessionTrace("86. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

        Else 
            currentAction = SessionTrace("87. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("87.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("88. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_f84deda782e347c19fc3058cc1fbe6e9 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_f84deda782e347c19fc3058cc1fbe6e9 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_f84deda782e347c19fc3058cc1fbe6e9 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_f84deda782e347c19fc3058cc1fbe6e9)) 

            currentAction = SessionTrace("89. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...") 
 
            currentAction = SessionTrace("89.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = 0 
            currentAction = SessionTrace("89.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("89.3. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("89.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfRoute
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfRoute = 1 

            currentAction = SessionTrace("90. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...") 
 
            currentAction = SessionTrace("90.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = 0 
            currentAction = SessionTrace("90.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 

            End If
            End If
            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"Beneficiary")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button8_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button8_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. Show 'Correo electrónico' control") 
        BehaviorShowControls("eMail,Visible")
            currentAction = SessionTrace("2. button8.Visible = false") 
            currentAction = SessionTrace("2.1. button8.Visible = false...")
BehaviorShowControls("button8,Hidden")

            currentAction = SessionTrace("3. If _formData.eMail Is Null Or Empty '' Then") 
If String.IsNullOrEmpty(_formData.eMail) Then

            currentAction = SessionTrace("4. _formData.eMail = _formData.AddresseMailDLI.eMailAddr...") 
 
            currentAction = SessionTrace("4.1. _formData.eMail = _formData.AddresseMailDLI.eMailAddr...")

 _formData.eMail = _formData.AddresseMailDLI.eMailAddress.eMail 

            End If
            currentAction = SessionTrace("5. If _formData.PlanType <> 1 OR _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation > 50000 Then") 
If _formData.PlanType <> 1 OrElse _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation > 50000 Then

            currentAction = SessionTrace("6. tab17.Visible = true, tabcontainer0.ActiveTab = tab17") 
            currentAction = SessionTrace("6.1. tab17.Visible = true...")
BehaviorShowControls("tab17,Visible")
            currentAction = SessionTrace("6.2. tabcontainer0.ActiveTab = tab17...")
tabcontainer0.ActiveTabPage = tabcontainer0.TabPages.FindByName("tab17")

            currentAction = SessionTrace("7. OnLinePrintIndicator.Visible = false") 
            currentAction = SessionTrace("7.1. OnLinePrintIndicator.Visible = false...")
BehaviorShowControls("OnLinePrintIndicator,Hidden")

        Else 
            currentAction = SessionTrace("8. tab17.Visible = false, tab18.Visible = true, tabcontainer0.ActiveTab = tab18") 
            currentAction = SessionTrace("8.1. tab17.Visible = false...")
BehaviorShowControls("tab17,Hidden")
            currentAction = SessionTrace("8.2. tab18.Visible = true...")
BehaviorShowControls("tab18,Visible")
            currentAction = SessionTrace("8.3. tabcontainer0.ActiveTab = tab18...")
tabcontainer0.ActiveTabPage = tabcontainer0.TabPages.FindByName("tab18")

            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"Beneficiary")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button14_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button14_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. _formData.OnLinePrintIndicator = True...") 
 
            currentAction = SessionTrace("1.1. _formData.OnLinePrintIndicator = True...")

 _formData.OnLinePrintIndicator = True 

            currentAction = SessionTrace("2. button14.Visible = false, zone4.Enabled = false") 
            currentAction = SessionTrace("2.1. button14.Visible = false...")
BehaviorShowControls("button14,Hidden")
            currentAction = SessionTrace("2.2. zone4.Enabled = false...")
BehaviorShowControls("zone4,Disabled")

            currentAction = SessionTrace("3. tab18.Visible = true") 
            currentAction = SessionTrace("3.1. tab18.Visible = true...")
BehaviorShowControls("tab18,Visible")

            currentAction = SessionTrace("4. tabcontainer0.ActiveTab = tab18") 
            currentAction = SessionTrace("4.1. tabcontainer0.ActiveTab = tab18...")
tabcontainer0.ActiveTabPage = tabcontainer0.TabPages.FindByName("tab18")

            currentAction = SessionTrace("5. OnLinePrintIndicator.Visible = true") 
            currentAction = SessionTrace("5.1. OnLinePrintIndicator.Visible = true...")
BehaviorShowControls("OnLinePrintIndicator,Visible")

            currentAction = SessionTrace("6. If _formData.QuestionnairesAvailable.Diabetes = true OR _formData.QuestionnairesAvailable.Heart = true OR ... Then") 
If _formData.QuestionnairesAvailable.Diabetes = true OrElse _formData.QuestionnairesAvailable.Heart = true OrElse _formData.QuestionnairesAvailable.Cancer = true OrElse _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation > 10000 Then

            currentAction = SessionTrace("7. OnLinePrintIndicator.Visible = false") 
            currentAction = SessionTrace("7.1. OnLinePrintIndicator.Visible = false...")
BehaviorShowControls("OnLinePrintIndicator,Hidden")

            currentAction = SessionTrace("8. _formData.OnLinePrintIndicator = False...") 
 
            currentAction = SessionTrace("8.1. _formData.OnLinePrintIndicator = False...")

 _formData.OnLinePrintIndicator = False 

            currentAction = SessionTrace("9. labelSOlicitud.Visible = true, labelComprar.Visible = false") 
            currentAction = SessionTrace("9.1. labelSOlicitud.Visible = true...")
BehaviorShowControls("labelSOlicitud,Visible")
            currentAction = SessionTrace("9.2. labelComprar.Visible = false...")
BehaviorShowControls("labelComprar,Hidden")

        Else 
            currentAction = SessionTrace("10. labelSOlicitud.Visible = false, labelComprar.Visible = true") 
            currentAction = SessionTrace("10.1. labelSOlicitud.Visible = false...")
BehaviorShowControls("labelSOlicitud,Hidden")
            currentAction = SessionTrace("10.2. labelComprar.Visible = true...")
BehaviorShowControls("labelComprar,Visible")

            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"Beneficiary")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub BeneficiaryType_SelectedIndexChanged(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("BeneficiaryType_SelectedIndex")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. If _formData.BeneficiaryType = 1 Then") 
If _formData.BeneficiaryType = 1 Then

            currentAction = SessionTrace("2. zoneBeneficiariosAsignados.Visible = false") 
            currentAction = SessionTrace("2.1. zoneBeneficiariosAsignados.Visible = false...")
BehaviorShowControls("zoneBeneficiariosAsignados,Hidden")

        Else 
            currentAction = SessionTrace("3. If _formData.BeneficiaryType = 3 Then") 
If _formData.BeneficiaryType = 3 Then

            currentAction = SessionTrace("4. zoneBeneficiariosAsignados.Visible = true") 
            currentAction = SessionTrace("4.1. zoneBeneficiariosAsignados.Visible = true...")
BehaviorShowControls("zoneBeneficiariosAsignados,Visible")

            End If
            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"Beneficiary")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button1_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button1_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. zone24.Visible = true, ClientIDBD.Visible = false, FirstNameBP.Visible = false...") 
            currentAction = SessionTrace("1.1. zone24.Visible = true...")
BehaviorShowControls("zone24,Visible")
            currentAction = SessionTrace("1.2. ClientIDBD.Visible = false...")
BehaviorShowControls("ClientIDBD,Hidden")
            currentAction = SessionTrace("1.3. FirstNameBP.Visible = false...")
BehaviorShowControls("FirstNameBP,Hidden")
            currentAction = SessionTrace("1.4. LastNameBP.Visible = false...")
BehaviorShowControls("LastNameBP,Hidden")
            currentAction = SessionTrace("1.5. LastName2BP.Visible = false...")
BehaviorShowControls("LastName2BP,Hidden")
            currentAction = SessionTrace("1.6. LegalNameBP.Visible = false...")
BehaviorShowControls("LegalNameBP,Hidden")

            currentAction = SessionTrace("2. _formData.AgregarBeneficiario = false...") 
 
            currentAction = SessionTrace("2.1. _formData.AgregarBeneficiario = false...")

 _formData.AgregarBeneficiario = false 

            currentAction = SessionTrace("3. '_formData.Beneficiary' = New 'InMotionGIT.Policy.Entity'...'") 
             _formData.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary

            currentAction = SessionTrace("4. _formData.TypeOfPersonBenef = 1...") 
 
            currentAction = SessionTrace("4.1. _formData.TypeOfPersonBenef = 1...")

 _formData.TypeOfPersonBenef = 1 

            currentAction = SessionTrace("5. FirstNameBP.Visible = true, LastNameBP.Visible = true, LastName2BP.Visible = true...") 
            currentAction = SessionTrace("5.1. FirstNameBP.Visible = true...")
BehaviorShowControls("FirstNameBP,Visible")
            currentAction = SessionTrace("5.2. LastNameBP.Visible = true...")
BehaviorShowControls("LastNameBP,Visible")
            currentAction = SessionTrace("5.3. LastName2BP.Visible = true...")
BehaviorShowControls("LastName2BP,Visible")
            currentAction = SessionTrace("5.4. LegalNameBP.Visible = false...")
BehaviorShowControls("LegalNameBP,Hidden")

            currentAction = SessionTrace("6. ClientIDBD.Visible = true") 
            currentAction = SessionTrace("6.1. ClientIDBD.Visible = true...")
BehaviorShowControls("ClientIDBD,Visible")

            currentAction = SessionTrace("7. button33.Visible = true") 
            currentAction = SessionTrace("7.1. button33.Visible = true...")
BehaviorShowControls("button33,Visible")



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"Beneficiary")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub TypeOfPersonBenef_SelectedIndexChanged(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("TypeOfPersonBenef_SelectedIndex")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. If _formData.TypeOfPersonBenef = 1 Then") 
If _formData.TypeOfPersonBenef = 1 Then

            currentAction = SessionTrace("2. FirstNameBP.Visible = true, LastNameBP.Visible = true, LastName2BP.Visible = true...") 
            currentAction = SessionTrace("2.1. FirstNameBP.Visible = true...")
BehaviorShowControls("FirstNameBP,Visible")
            currentAction = SessionTrace("2.2. LastNameBP.Visible = true...")
BehaviorShowControls("LastNameBP,Visible")
            currentAction = SessionTrace("2.3. LastName2BP.Visible = true...")
BehaviorShowControls("LastName2BP,Visible")
            currentAction = SessionTrace("2.4. LegalNameBP.Visible = false...")
BehaviorShowControls("LegalNameBP,Hidden")

        Else 
            currentAction = SessionTrace("3. FirstNameBP.Visible = false, LastNameBP.Visible = false, LastName2BP.Visible = false...") 
            currentAction = SessionTrace("3.1. FirstNameBP.Visible = false...")
BehaviorShowControls("FirstNameBP,Hidden")
            currentAction = SessionTrace("3.2. LastNameBP.Visible = false...")
BehaviorShowControls("LastNameBP,Hidden")
            currentAction = SessionTrace("3.3. LastName2BP.Visible = false...")
BehaviorShowControls("LastName2BP,Hidden")
            currentAction = SessionTrace("3.4. LegalNameBP.Visible = true...")
BehaviorShowControls("LegalNameBP,Visible")

            End If
            currentAction = SessionTrace("4. ClientIDBD.Visible = true, button33.Visible = true") 
            currentAction = SessionTrace("4.1. ClientIDBD.Visible = true...")
BehaviorShowControls("ClientIDBD,Visible")
            currentAction = SessionTrace("4.2. button33.Visible = true...")
BehaviorShowControls("button33,Visible")



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub ClientIDBD_TextChanged(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("ClientIDBD_Text")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim WorkflowInArguments  As New Dictionary(Of String, Object)
Dim WorkflowOutArguments As IDictionary(Of String, Object)


        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. Call 'LLena ceros a la izquierda' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("CodigoCliente", _formData.Beneficiary.ClientID) 
                .Add("LargoCodigo", 14) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("LlenaCerosIzquierdaCodigo", "97e5264d-cb53-46a3-a786-fbcc3bb10ff2", 0, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.Beneficiary.ClientID = WorkflowOutArguments("CodigoCliente")

            currentAction = SessionTrace("2. Call Shared Function 'Retrieve Client' with parameters (Client Identification)") 
            Dim _Client_c316a5ed31224a7f8d60586f7682f4c5 As InMotionGIT.Client.Entity.Contracts.Client 
                      If IsNothing(_formData.Beneficiary) Then
              _formData.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
          End If 
                      If IsNothing(_formData.Beneficiary.Client) Then
              _formData.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 
            
      _Client_c316a5ed31224a7f8d60586f7682f4c5 = (New InMotionGIT.Client.Services.ClientManager).Retrieve(clientId:=_formData.Beneficiary.ClientID, atDate:=Date.Today, childFilter:= "All")
      isNullResult = (IsNothing(_Client_c316a5ed31224a7f8d60586f7682f4c5))
      isFoundData  = Not isNullResult
     
            _formData.Beneficiary.Client = _Client_c316a5ed31224a7f8d60586f7682f4c5 

            currentAction = SessionTrace("3. If Form.IsNullResult = true Then") 
If isNullResult = true Then

            currentAction = SessionTrace("4. _formData.Beneficiary.Client.IsNew = true...") 
 
            currentAction = SessionTrace("4.1. _formData.Beneficiary.Client.IsNew = true...")
          If IsNothing(_formData.Beneficiary) Then
              _formData.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
          End If 
          If IsNothing(_formData.Beneficiary.Client) Then
              _formData.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.Beneficiary.Client.IsNew = true 

            currentAction = SessionTrace("5. _formData.Beneficiary.Client.ClientID = _formData.Beneficiary.ClientID...") 
 
            currentAction = SessionTrace("5.1. _formData.Beneficiary.Client.ClientID = _formData.Beneficiary.ClientID...")
          If IsNothing(_formData.Beneficiary) Then
              _formData.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
          End If 
          If IsNothing(_formData.Beneficiary.Client) Then
              _formData.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.Beneficiary.Client.ClientID = _formData.Beneficiary.ClientID 

        Else 
            currentAction = SessionTrace("6. _formData.Beneficiary.ClientID = _formData.Beneficiary.Client.Client...") 
 
            currentAction = SessionTrace("6.1. _formData.Beneficiary.ClientID = _formData.Beneficiary.Client.Client...")
          If IsNothing(_formData.Beneficiary) Then
              _formData.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
          End If 

 _formData.Beneficiary.ClientID = _formData.Beneficiary.Client.ClientID 

            currentAction = SessionTrace("7. _formData.Beneficiary.Client.IsNew = false...") 
 
            currentAction = SessionTrace("7.1. _formData.Beneficiary.Client.IsNew = false...")
          If IsNothing(_formData.Beneficiary) Then
              _formData.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
          End If 
          If IsNothing(_formData.Beneficiary.Client) Then
              _formData.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.Beneficiary.Client.IsNew = false 

            currentAction = SessionTrace("8. _formData.TypeOfPersonBenef = _formData.Beneficiary.Client.TypeOf...") 
 
            currentAction = SessionTrace("8.1. _formData.TypeOfPersonBenef = _formData.Beneficiary.Client.TypeOf...")

 _formData.TypeOfPersonBenef = _formData.Beneficiary.Client.TypeOfPerson 

            currentAction = SessionTrace("9. If _formData.TypeOfPersonBenef = 1 Then") 
If _formData.TypeOfPersonBenef = 1 Then

            currentAction = SessionTrace("10. FirstNameBP.Visible = true, LastNameBP.Visible = true, LastName2BP.Visible = true...") 
            currentAction = SessionTrace("10.1. FirstNameBP.Visible = true...")
BehaviorShowControls("FirstNameBP,Visible")
            currentAction = SessionTrace("10.2. LastNameBP.Visible = true...")
BehaviorShowControls("LastNameBP,Visible")
            currentAction = SessionTrace("10.3. LastName2BP.Visible = true...")
BehaviorShowControls("LastName2BP,Visible")
            currentAction = SessionTrace("10.4. LegalNameBP.Visible = false...")
BehaviorShowControls("LegalNameBP,Hidden")

        Else 
            currentAction = SessionTrace("11. FirstNameBP.Visible = false, LastNameBP.Visible = false, LastName2BP.Visible = false...") 
            currentAction = SessionTrace("11.1. FirstNameBP.Visible = false...")
BehaviorShowControls("FirstNameBP,Hidden")
            currentAction = SessionTrace("11.2. LastNameBP.Visible = false...")
BehaviorShowControls("LastNameBP,Hidden")
            currentAction = SessionTrace("11.3. LastName2BP.Visible = false...")
BehaviorShowControls("LastName2BP,Hidden")
            currentAction = SessionTrace("11.4. LegalNameBP.Visible = true...")
BehaviorShowControls("LegalNameBP,Visible")

            End If
            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button33_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button33_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. If _formData.TypeOfPersonBenef = 1 Then") 
If _formData.TypeOfPersonBenef = 1 Then

            currentAction = SessionTrace("2. _formData.Beneficiary.Client.CompleteClientName = _formData.Beneficiary.Client.LastNa...") 
 
            currentAction = SessionTrace("2.1. _formData.Beneficiary.Client.CompleteClientName = _formData.Beneficiary.Client.LastNa...")
          If IsNothing(_formData.Beneficiary) Then
              _formData.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
          End If 
          If IsNothing(_formData.Beneficiary.Client) Then
              _formData.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.Beneficiary.Client.CompleteClientName = _formData.Beneficiary.Client.LastName & " " & _formData.Beneficiary.Client.LastName2 & ", " & _formData.Beneficiary.Client.FirstName 

        Else 
            currentAction = SessionTrace("3. _formData.Beneficiary.Client.CompleteClientName = _formData.Beneficiary.Client.LegalN...") 
 
            currentAction = SessionTrace("3.1. _formData.Beneficiary.Client.CompleteClientName = _formData.Beneficiary.Client.LegalN...")
          If IsNothing(_formData.Beneficiary) Then
              _formData.Beneficiary = New InMotionGIT.Policy.Entity.Contracts.Beneficiary
          End If 
          If IsNothing(_formData.Beneficiary.Client) Then
              _formData.Beneficiary.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.Beneficiary.Client.CompleteClientName = _formData.Beneficiary.Client.LegalName 

            End If
            currentAction = SessionTrace("4. '_formData.RiskInformation.Beneficiaries'.Add('_formData.Beneficiary')") 
             _formData.RiskInformation.Beneficiaries.Add(_formData.Beneficiary)

            currentAction = SessionTrace("5. zone24.Visible = false") 
            currentAction = SessionTrace("5.1. zone24.Visible = false...")
BehaviorShowControls("zone24,Hidden")

            currentAction = SessionTrace("6. FirstNameBP.Visible = false, LastNameBP.Visible = false, LastName2BP.Visible = false...") 
            currentAction = SessionTrace("6.1. FirstNameBP.Visible = false...")
BehaviorShowControls("FirstNameBP,Hidden")
            currentAction = SessionTrace("6.2. LastNameBP.Visible = false...")
BehaviorShowControls("LastNameBP,Hidden")
            currentAction = SessionTrace("6.3. LastName2BP.Visible = false...")
BehaviorShowControls("LastName2BP,Hidden")
            currentAction = SessionTrace("6.4. LegalNameBP.Visible = false...")
BehaviorShowControls("LegalNameBP,Hidden")



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button12_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button12_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. _formData.ErrorsFound = false...") 
 
            currentAction = SessionTrace("1.1. _formData.ErrorsFound = false...")

 _formData.ErrorsFound = false 

            currentAction = SessionTrace("2. _formData.ValorAcumulado = 0...") 
 
            currentAction = SessionTrace("2.1. _formData.ValorAcumulado = 0...")

 _formData.ValorAcumulado = 0 

            currentAction = SessionTrace("3. If _formData.BeneficiaryType = 3 Then") 
If _formData.BeneficiaryType = 3 Then

            currentAction = SessionTrace("4. For Each beneficiaryItem As 'InMotionGIT.Policy.Entity...' In '_formData.RiskInformation...'") 
            For Each beneficiaryItem As InMotionGIT.Policy.Entity.Contracts.Beneficiary In _formData.RiskInformation.Beneficiaries 
                If Not parametersDictionary.ExistsProperty("beneficiaryItem") Then 
                    parametersDictionary("beneficiaryItem") = beneficiaryItem 
                End If 

            currentAction = SessionTrace("5. _formData.ValorAcumulado = _formData.ValorAcumulado + benefici...") 
 
            currentAction = SessionTrace("5.1. _formData.ValorAcumulado = _formData.ValorAcumulado + benefici...")

 _formData.ValorAcumulado = _formData.ValorAcumulado + beneficiaryItem.PercentageShare 

            Next
            currentAction = SessionTrace("6. If _formData.ValorAcumulado <> 100 Then") 
If _formData.ValorAcumulado <> 100 Then

            currentAction = SessionTrace("7. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("7.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

            currentAction = SessionTrace("8. The message 'La suma de los porce...' will displayed as 'Popup'") 
            messageAction = "La suma de los porcentajes de participación de los beneficiarios debe ser el 100%" 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            End If
        Else 
            currentAction = SessionTrace("9. '_formData.RiskInformation.Beneficiaries' = New 'InMotionGIT.Policy.Entity'...'") 
             _formData.RiskInformation.Beneficiaries = New InMotionGIT.Policy.Entity.Contracts.BeneficiaryCollection

            End If
            currentAction = SessionTrace("10. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("11. tab0.Visible = true, tabcontainer0.ActiveTab = tab0, zonegeneral.Visible = true...") 
            currentAction = SessionTrace("11.1. tab0.Visible = true...")
BehaviorShowControls("tab0,Visible")
            currentAction = SessionTrace("11.2. tabcontainer0.ActiveTab = tab0...")
tabcontainer0.ActiveTabPage = tabcontainer0.TabPages.FindByName("tab0")
            currentAction = SessionTrace("11.3. zonegeneral.Visible = true...")
BehaviorShowControls("zonegeneral,Visible")
            currentAction = SessionTrace("11.4. zone1.Visible = true...")
BehaviorShowControls("zone1,Visible")
            currentAction = SessionTrace("11.5. zone8.Visible = false...")
BehaviorShowControls("zone8,Hidden")

            currentAction = SessionTrace("12. _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contr...") 
 
            currentAction = SessionTrace("12.1. _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contr...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AutomaticPaymentPolicy) Then
              _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
          End If 

 _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy 

            currentAction = SessionTrace("13. button12.Visible = false") 
            currentAction = SessionTrace("13.1. button12.Visible = false...")
BehaviorShowControls("button12,Hidden")

            currentAction = SessionTrace("14. If _formData.ClientExistInDB = true AND _formData.RiskInformation.PrimaryInsured.Client.CreditCards Not Is Null Or Not Empty  AND ... Then") 
If _formData.ClientExistInDB = true AndAlso Not IsNothing(_formData.RiskInformation.PrimaryInsured.Client.CreditCards) AndAlso _formData.RiskInformation.PrimaryInsured.Client.CreditCards.Count <> 0 Then

            currentAction = SessionTrace("15. _formData.RiskInformation.AutomaticPaymentPolicy.BankCode = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("15.1. _formData.RiskInformation.AutomaticPaymentPolicy.BankCode = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AutomaticPaymentPolicy) Then
              _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
          End If 

 _formData.RiskInformation.AutomaticPaymentPolicy.BankCode = _formData.RiskInformation.PrimaryInsured.Client.CreditCards(0).BankCode 
            currentAction = SessionTrace("15.2. _formData.RiskInformation.AutomaticPaymentPolicy.CreditCardNumber = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AutomaticPaymentPolicy) Then
              _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
          End If 

 _formData.RiskInformation.AutomaticPaymentPolicy.CreditCardNumber = _formData.RiskInformation.PrimaryInsured.Client.CreditCards(0).CreditCardNumber 
            currentAction = SessionTrace("15.3. _formData.RiskInformation.AutomaticPaymentPolicy.CreditCardType = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AutomaticPaymentPolicy) Then
              _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
          End If 

 _formData.RiskInformation.AutomaticPaymentPolicy.CreditCardType = _formData.RiskInformation.PrimaryInsured.Client.CreditCards(0).CreditCardType 
            currentAction = SessionTrace("15.4. _formData.RiskInformation.AutomaticPaymentPolicy.Month = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AutomaticPaymentPolicy) Then
              _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
          End If 

 _formData.RiskInformation.AutomaticPaymentPolicy.Month = _formData.RiskInformation.PrimaryInsured.Client.CreditCards(0).ExpirationDate.Month 
            currentAction = SessionTrace("15.5. _formData.RiskInformation.AutomaticPaymentPolicy.Year = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AutomaticPaymentPolicy) Then
              _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
          End If 

 _formData.RiskInformation.AutomaticPaymentPolicy.Year = _formData.RiskInformation.PrimaryInsured.Client.CreditCards(0).ExpirationDate.Year 

            currentAction = SessionTrace("16. _formData.MesTarjeta = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("16.1. _formData.MesTarjeta = _formData.RiskInformation.PrimaryIn...")

 _formData.MesTarjeta = _formData.RiskInformation.PrimaryInsured.Client.CreditCards(0).ExpirationDate.Month 
            currentAction = SessionTrace("16.2. _formData.AnoTarjeta = _formData.RiskInformation.PrimaryIn...")

 _formData.AnoTarjeta = _formData.RiskInformation.PrimaryInsured.Client.CreditCards(0).ExpirationDate.Year 

            currentAction = SessionTrace("17. MesTarjeta.Value = _formData.MesTarjeta") 
            currentAction = SessionTrace("17.1. MesTarjeta.Value = _formData.MesTarjeta...")
MesTarjeta.Value = _formData.MesTarjeta

            currentAction = SessionTrace("18. AnoTarjeta.Value = _formData.AnoTarjeta") 
            currentAction = SessionTrace("18.1. AnoTarjeta.Value = _formData.AnoTarjeta...")
AnoTarjeta.Value = _formData.AnoTarjeta

            End If
            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub buttonGPago_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("buttonGPago_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. _formData.ErrorsFound = false...") 
 
            currentAction = SessionTrace("1.1. _formData.ErrorsFound = false...")

 _formData.ErrorsFound = false 

            currentAction = SessionTrace("2. If _formData.MesTarjeta > 12 OR _formData.MesTarjeta = 0 Then") 
If _formData.MesTarjeta > 12 OrElse _formData.MesTarjeta = 0 Then

            currentAction = SessionTrace("3. The message 'Mes de vencimiento i...' will displayed as 'Popup'") 
            messageAction = "Mes de vencimiento inválido..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            currentAction = SessionTrace("4. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("4.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

            End If
            currentAction = SessionTrace("5. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("6. If _formData.AnoTarjeta <= _formData.CurrentYear Then") 
If _formData.AnoTarjeta <= _formData.CurrentYear Then

            currentAction = SessionTrace("7. The message 'Año de vencimiento i...' will displayed as 'Popup'") 
            messageAction = "Año de vencimiento inválido... Debe ser posterior al año actual" 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            currentAction = SessionTrace("8. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("8.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

            End If
            End If
            currentAction = SessionTrace("9. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("10. Accept.Visible = true") 
            currentAction = SessionTrace("10.1. Accept.Visible = true...")
BehaviorShowControls("Accept,Visible")

            currentAction = SessionTrace("11. buttonGPago.Visible = false") 
            currentAction = SessionTrace("11.1. buttonGPago.Visible = false...")
BehaviorShowControls("buttonGPago,Hidden")

            currentAction = SessionTrace("12. _formData.RiskInformation.AutomaticPaymentPolicy.ClientID = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("12.1. _formData.RiskInformation.AutomaticPaymentPolicy.ClientID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AutomaticPaymentPolicy) Then
              _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
          End If 

 _formData.RiskInformation.AutomaticPaymentPolicy.ClientID = _formData.RiskInformation.PrimaryInsured.Client.ClientID 
            currentAction = SessionTrace("12.2. _formData.RiskInformation.AutomaticPaymentPolicy.ReusedAuthorizationNumber = 1...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AutomaticPaymentPolicy) Then
              _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
          End If 

 _formData.RiskInformation.AutomaticPaymentPolicy.ReusedAuthorizationNumber = 1 

            currentAction = SessionTrace("13. zone8.Visible = true") 
            currentAction = SessionTrace("13.1. zone8.Visible = true...")
BehaviorShowControls("zone8,Visible")

            End If


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button0_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button0_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim WorkflowInArguments  As New Dictionary(Of String, Object)
Dim WorkflowOutArguments As IDictionary(Of String, Object)


        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. If _formData.BeneficiaryType = 1 Then") 
If _formData.BeneficiaryType = 1 Then

            currentAction = SessionTrace("2. _formData.RiskInformation.PrimaryBeneficiary = Nothing...") 
 
            currentAction = SessionTrace("2.1. _formData.RiskInformation.PrimaryBeneficiary = Nothing...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryBeneficiary) Then
              _formData.RiskInformation.PrimaryBeneficiary = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 

 _formData.RiskInformation.PrimaryBeneficiary = Nothing 

            End If
            currentAction = SessionTrace("3. _formData.RiskInformation.AutomaticPaymentPolicy.Month = _formData.MesTarjeta...") 
 
            currentAction = SessionTrace("3.1. _formData.RiskInformation.AutomaticPaymentPolicy.Month = _formData.MesTarjeta...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AutomaticPaymentPolicy) Then
              _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
          End If 

 _formData.RiskInformation.AutomaticPaymentPolicy.Month = _formData.MesTarjeta 
            currentAction = SessionTrace("3.2. _formData.RiskInformation.AutomaticPaymentPolicy.Year = _formData.AnoTarjeta...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AutomaticPaymentPolicy) Then
              _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
          End If 

 _formData.RiskInformation.AutomaticPaymentPolicy.Year = _formData.AnoTarjeta 

            currentAction = SessionTrace("4. _formData.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = _formData.eMail...") 
 
            currentAction = SessionTrace("4.1. _formData.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = _formData.eMail...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = _formData.eMail 

            currentAction = SessionTrace("5. _formData.RiskInformation.InsuredAmount = _formData.RiskInformation.LifeLineO...") 
 
            currentAction = SessionTrace("5.1. _formData.RiskInformation.InsuredAmount = _formData.RiskInformation.LifeLineO...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 

 _formData.RiskInformation.InsuredAmount = _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation 

            currentAction = SessionTrace("6. Call 'Guardar el caso de manera temporal' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("RiskInformation", _formData.RiskInformation) 
                .Add("eMail", _formData.eMail) 
                .Add("ProducerClientID", _formData.ProducerClientID) 
                .Add("context", _formContext) 
                .Add("SendMailIndicator", _formData.SendMailIndicator) 
                .Add("MailToProducerIndicator", _formData.MailToProducerIndicator) 
                .Add("uwCaseID", _formData.uwcaseid) 
                .Add("ClientExistInDB", _formData.ClientExistInDB) 
                .Add("PlanType", _formData.PlanType) 
                .Add("PhysicalAddress", _formData.AddressPhysicalAddressDLI) 
                .Add("eMailAddress", _formData.AddresseMailDLI) 
                .Add("ConsumerInformation", _formData.ConsumerInformation) 
                .Add("PlanillaModificacion", _formData.PlanillaModificacion) 
                .Add("PlanillaVisualizacion", _formData.PlanillaVisualizacion) 
                .Add("UsercodeBO", _formData.UsercodeBO) 
                .Add("UsercodeFASI", _formData.UsercodeFASI) 
                .Add("UsingVT", true) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("TemporaryCaseSave", "b4247466-c4a8-4676-8e98-b5a02eadb2be", 11, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.RiskInformation = WorkflowOutArguments("RiskInformation")
                _formData.uwcaseid = WorkflowOutArguments("uwCaseID")

            currentAction = SessionTrace("7. The message 'Se ha generado el si...' will displayed as 'Splash'") 
            messageAction = "Se ha generado el siguiente caso: { Value /uwcaseid }, en los próximos 3 dias puede recuperar la información y continuar con el proceso de compra. Muchas gracias por visitarnos." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub button19_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("button19_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. Call 'Mi Vida Vale - Resumen' form with transferring parameters") 
Session(_FormID.Text) = _formData 
 Session("fromid") = _FormID.Text 
     
ScriptManager.RegisterStartupScript(Page, Page.GetType(), "FormData1", String.Format(CultureInfo.InvariantCulture, "<script type='text/javascript'>button1918_WebCall('{0}', '{1}');</script>", ConfigurationManager.AppSettings("Url.Form"), _FormID.Text), False)


          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub EnviarCotizacionEmail_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("EnviarCotizacionEmail_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim WorkflowInArguments  As New Dictionary(Of String, Object)
Dim WorkflowOutArguments As IDictionary(Of String, Object)


        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. _formData.AnswerDiabetes = 'No'...") 
 
            currentAction = SessionTrace("1.1. _formData.AnswerDiabetes = 'No'...")

 _formData.AnswerDiabetes = "No" 

            currentAction = SessionTrace("2. _formData.AnswerCancer = 'No'...") 
 
            currentAction = SessionTrace("2.1. _formData.AnswerCancer = 'No'...")

 _formData.AnswerCancer = "No" 

            currentAction = SessionTrace("3. _formData.AnswerHeart = 'No'...") 
 
            currentAction = SessionTrace("3.1. _formData.AnswerHeart = 'No'...")

 _formData.AnswerHeart = "No" 

            currentAction = SessionTrace("4. If _formData.QuestionnairesAvailable.Diabetes = true Then") 
If _formData.QuestionnairesAvailable.Diabetes = true Then

            currentAction = SessionTrace("5. _formData.AnswerDiabetes = 'Si'...") 
 
            currentAction = SessionTrace("5.1. _formData.AnswerDiabetes = 'Si'...")

 _formData.AnswerDiabetes = "Si" 

            End If
            currentAction = SessionTrace("6. If _formData.QuestionnairesAvailable.Cancer = true Then") 
If _formData.QuestionnairesAvailable.Cancer = true Then

            currentAction = SessionTrace("7. _formData.AnswerCancer = 'Si'...") 
 
            currentAction = SessionTrace("7.1. _formData.AnswerCancer = 'Si'...")

 _formData.AnswerCancer = "Si" 

            End If
            currentAction = SessionTrace("8. If _formData.QuestionnairesAvailable.Heart = true Then") 
If _formData.QuestionnairesAvailable.Heart = true Then

            currentAction = SessionTrace("9. _formData.AnswerHeart = 'Si'...") 
 
            currentAction = SessionTrace("9.1. _formData.AnswerHeart = 'Si'...")

 _formData.AnswerHeart = "Si" 

            End If
            currentAction = SessionTrace("10. _formData.PrimaTotalAnual = 0...") 
 
            currentAction = SessionTrace("10.1. _formData.PrimaTotalAnual = 0...")

 _formData.PrimaTotalAnual = 0 

            currentAction = SessionTrace("11. For Each CoverPT As 'InMotionGIT.Policy.Entity...' In '_formData.RiskInformation...'") 
            For Each CoverPT As InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremium In _formData.RiskInformation.CoveragesWithCalculatedPremium 
                If Not parametersDictionary.ExistsProperty("CoverPT") Then 
                    parametersDictionary("CoverPT") = CoverPT 
                End If 

            currentAction = SessionTrace("12. If CoverPT.SelectedByDefault = true Then") 
If CoverPT.SelectedByDefault = true Then

            currentAction = SessionTrace("13. _formData.PrimaTotalAnual = _formData.PrimaTotalAnual+CoverPT.A...") 
 
            currentAction = SessionTrace("13.1. _formData.PrimaTotalAnual = _formData.PrimaTotalAnual+CoverPT.A...")

 _formData.PrimaTotalAnual = _formData.PrimaTotalAnual+CoverPT.AnnualPremium 

            End If
            Next
            currentAction = SessionTrace("14. _formData.FondosMail = Nothing...") 
 
            currentAction = SessionTrace("14.1. _formData.FondosMail = Nothing...")

 _formData.FondosMail = Nothing 

            currentAction = SessionTrace("15. If _formData.BeneficiaryType = 1 Then") 
If _formData.BeneficiaryType = 1 Then

            currentAction = SessionTrace("16. _formData.BeneficiariosMail = 'Herederos legales'...") 
 
            currentAction = SessionTrace("16.1. _formData.BeneficiariosMail = 'Herederos legales'...")

 _formData.BeneficiariosMail = "Herederos legales" 

        Else 
            currentAction = SessionTrace("17. _formData.BeneficiariosMail = Nothing...") 
 
            currentAction = SessionTrace("17.1. _formData.BeneficiariosMail = Nothing...")

 _formData.BeneficiariosMail = Nothing 

            currentAction = SessionTrace("18. For Each BenefMailItem As 'InMotionGIT.Policy.Entity...' In '_formData.RiskInformation...'") 
            For Each BenefMailItem As InMotionGIT.Policy.Entity.Contracts.Beneficiary In _formData.RiskInformation.Beneficiaries 
                If Not parametersDictionary.ExistsProperty("BenefMailItem") Then 
                    parametersDictionary("BenefMailItem") = BenefMailItem 
                End If 

            currentAction = SessionTrace("19. _formData.Codigo = BenefMailItem.Relationship...") 
 
            currentAction = SessionTrace("19.1. _formData.Codigo = BenefMailItem.Relationship...")

 _formData.Codigo = BenefMailItem.Relationship 

currentAction = SessionTrace("20. SELECT TABLE55.NRELATION, TABLE55.SDESCRIPT FROM TABLE55... WHERE TABLE55.NRELATION = _formData.Codigo )") 
            isFoundData = False 
            With New DataManagerFactory("SELECT TABLE55.SDESCRIPT FROM TABLE55 TABLE55  WHERE TABLE55.NRELATION = @:TABLE55NRELATION0 ORDER BY TABLE55.SDESCRIPT ASC", "TABLE55", "Linked.LatCombined")
             .AddParameter("TABLE55NRELATION0", DbType.Int32, 5, False, _formData.Codigo)
 
             _formData.Descripcion = .QueryExecuteScalarToString()  
        End With

            currentAction = SessionTrace("21. _formData.BeneficiariosMail = _formData.BeneficiariosMail & '<p>'...") 
 
            currentAction = SessionTrace("21.1. _formData.BeneficiariosMail = _formData.BeneficiariosMail & '<p>'...")

 _formData.BeneficiariosMail = _formData.BeneficiariosMail & "<p>" & "Beneficiario: " & BenefMailItem.Client.FirstName & " " & BenefMailItem.Client.LastName & " " & BenefMailItem.Client.LastName2 & "  Participación: " &  BenefMailItem.PercentageShare & "%  Relación: " & _formData.Descripcion & "</a></p>" 

            Next
            End If
currentAction = SessionTrace("22. SELECT TABLE18.SDESCRIPT, TABLE18.SSEXCLIEN, TABLE18.SSTATREGT FROM TABLE18... WHERE TABLE18.SSTATREGT = 1 AND TABLE18.SSEXCLIEN = _formData.RiskInformation.PrimaryInsured.Client.Gender )") 
            isFoundData = False 
            With New DataManagerFactory("SELECT TRIM(TABLE18.SDESCRIPT) SDESCRIPT FROM TABLE18 TABLE18  WHERE TABLE18.SSTATREGT = '1' AND TABLE18.SSEXCLIEN = @:TABLE18SSEXCLIEN1 ORDER BY TABLE18.SDESCRIPT ASC", "TABLE18", "Linked.LatCombined")
             .AddParameter("TABLE18SSEXCLIEN1", DbType.AnsiStringFixedLength, 1, (_formData.RiskInformation.PrimaryInsured.Client.Gender = String.Empty), _formData.RiskInformation.PrimaryInsured.Client.Gender)
 
             _formData.GenderClient = .QueryExecuteScalarToString()  
        End With

            currentAction = SessionTrace("23. Call 'Envía cotización de vida por correo' workflow in Asynchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("RiskInformation", _formData.RiskInformation) 
                .Add("CorreoMail", _formData.eMail) 
                .Add("PlanType", _formData.PlanType) 
                .Add("BeneficiariosMail", _formData.BeneficiariosMail) 
                .Add("FondosMail", _formData.FondosMail) 
                .Add("AnswerDiabetes", _formData.AnswerDiabetes) 
                .Add("AnswerCancer", _formData.AnswerCancer) 
                .Add("AnswerHeart", _formData.AnswerHeart) 
                .Add("PrimaTotalAnual", _formData.PrimaTotalAnual) 
                .Add("AddressPhysicalAddressDLI", _formData.AddressPhysicalAddressDLI) 
                .Add("AddresseMailDLI", _formData.AddresseMailDLI) 
                .Add("ProductMasterDescription", _formData.ProductMasterDescription) 
                .Add("ConsumerInformtion", _formData.ConsumerInformation) 
                .Add("GenderClient", _formData.GenderClient) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("EnviaCotizacionMailVida", "63c1250d-49eb-4f88-aa2e-ce30adfa821e", 3, WorkflowInArguments, True, False, Me.AppRelativeVirtualPath, _formData.InternalId)
 
            currentAction = SessionTrace("24. The message 'El resumen de la cot...' will displayed as 'Popup'") 
            messageAction = "El resumen de la cotización ha sido enviado al correo indicado { Value /eMail }.." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub eMail_TextChanged(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("eMail_Text")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. _formData.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = _formData.eMail...") 
 
            currentAction = SessionTrace("1.1. _formData.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = _formData.eMail...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.eMailAddressDefault = _formData.eMail 



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub Accept_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("Accept_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            Dim WorkflowInArguments  As New Dictionary(Of String, Object)
Dim WorkflowOutArguments As IDictionary(Of String, Object)


        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("2. If _formData.OnLinePrintIndicator = true Then") 
If _formData.OnLinePrintIndicator = true Then

            currentAction = SessionTrace("3. If _formData.QuestionnairesAvailable.Cancer = true OR _formData.QuestionnairesAvailable.Diabetes = true OR ... Then") 
If _formData.QuestionnairesAvailable.Cancer = true OrElse _formData.QuestionnairesAvailable.Diabetes = true OrElse _formData.QuestionnairesAvailable.Heart = true Then

            currentAction = SessionTrace("4. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("4.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

            currentAction = SessionTrace("5. The message 'No puede seleccionar...' will displayed as 'Popup'") 
            messageAction = "No puede seleccionar ""emisión en linea"", el asegurado debe llenar cuestionario de salud" 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            End If
        Else 
            currentAction = SessionTrace("6. _formData.ErrorsFound = false...") 
 
            currentAction = SessionTrace("6.1. _formData.ErrorsFound = false...")

 _formData.ErrorsFound = false 

            End If
            currentAction = SessionTrace("7. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("8. If _formData.MesTarjeta > 12 OR _formData.MesTarjeta = 0 Then") 
If _formData.MesTarjeta > 12 OrElse _formData.MesTarjeta = 0 Then

            currentAction = SessionTrace("9. The message 'Mes de vencimiento i...' will displayed as 'Popup'") 
            messageAction = "Mes de vencimiento inválido..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            currentAction = SessionTrace("10. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("10.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

        Else 
            currentAction = SessionTrace("11. _formData.RiskInformation.AutomaticPaymentPolicy.Month = _formData.MesTarjeta...") 
 
            currentAction = SessionTrace("11.1. _formData.RiskInformation.AutomaticPaymentPolicy.Month = _formData.MesTarjeta...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AutomaticPaymentPolicy) Then
              _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
          End If 

 _formData.RiskInformation.AutomaticPaymentPolicy.Month = _formData.MesTarjeta 

            End If
            End If
            currentAction = SessionTrace("12. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("13. If _formData.AnoTarjeta <= _formData.CurrentYear Then") 
If _formData.AnoTarjeta <= _formData.CurrentYear Then

            currentAction = SessionTrace("14. The message 'Año de vencimiento i...' will displayed as 'Popup'") 
            messageAction = "Año de vencimiento inválido... Debe ser posterior al año actual" 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            currentAction = SessionTrace("15. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("15.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

        Else 
            currentAction = SessionTrace("16. _formData.RiskInformation.AutomaticPaymentPolicy.Year = _formData.AnoTarjeta...") 
 
            currentAction = SessionTrace("16.1. _formData.RiskInformation.AutomaticPaymentPolicy.Year = _formData.AnoTarjeta...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.AutomaticPaymentPolicy) Then
              _formData.RiskInformation.AutomaticPaymentPolicy = New InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy
          End If 

 _formData.RiskInformation.AutomaticPaymentPolicy.Year = _formData.AnoTarjeta 

            End If
            End If
            currentAction = SessionTrace("17. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("18. _formData.PreviousPayment = true...") 
 
            currentAction = SessionTrace("18.1. _formData.PreviousPayment = true...")

 _formData.PreviousPayment = true 

            End If
            currentAction = SessionTrace("19. If _formData.BeneficiaryType = 1 Then") 
If _formData.BeneficiaryType = 1 Then

            currentAction = SessionTrace("20. _formData.RiskInformation.PrimaryBeneficiary = Nothing...") 
 
            currentAction = SessionTrace("20.1. _formData.RiskInformation.PrimaryBeneficiary = Nothing...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryBeneficiary) Then
              _formData.RiskInformation.PrimaryBeneficiary = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 

 _formData.RiskInformation.PrimaryBeneficiary = Nothing 

            End If
            currentAction = SessionTrace("21. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("22. _formData.RiskInformation.InsuredAmount = _formData.RiskInformation.LifeLineO...") 
 
            currentAction = SessionTrace("22.1. _formData.RiskInformation.InsuredAmount = _formData.RiskInformation.LifeLineO...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 

 _formData.RiskInformation.InsuredAmount = _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation 

            currentAction = SessionTrace("23. _formData.RiskInformation.PaymentFrequency = _formData.RiskInformation.Policy.Pa...") 
 
            currentAction = SessionTrace("23.1. _formData.RiskInformation.PaymentFrequency = _formData.RiskInformation.Policy.Pa...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 

 _formData.RiskInformation.PaymentFrequency = _formData.RiskInformation.Policy.PaymentFrequency 

            End If
            currentAction = SessionTrace("24. _formData.SendMailIndicator = true...") 
 
            currentAction = SessionTrace("24.1. _formData.SendMailIndicator = true...")

 _formData.SendMailIndicator = true 

            currentAction = SessionTrace("25. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("26. Call Function 'Amendment setup' with parameters (RiskInformation Object, Effective Date)") 
            Dim _RiskInformation_5e064f87eaa54387bf4fa5185e81157f As InMotionGIT.Policy.Entity.Contracts.RiskInformation 
            _RiskInformation_5e064f87eaa54387bf4fa5185e81157f = (New InMotionGIT.PolicyManager.Services.RiskManager).AmendmentSetup            (risk:=_formData.RiskInformation, atDate:=Date.Today) 
             
            _formData.RiskInformation = _RiskInformation_5e064f87eaa54387bf4fa5185e81157f 
            isNullResult = (IsNothing(_RiskInformation_5e064f87eaa54387bf4fa5185e81157f)) 

            currentAction = SessionTrace("27. If _formData.OnLinePrintIndicator = true Then") 
If _formData.OnLinePrintIndicator = true Then

            currentAction = SessionTrace("28. _formData.OnLinePrint = 1...") 
 
            currentAction = SessionTrace("28.1. _formData.OnLinePrint = 1...")

 _formData.OnLinePrint = 1 

            currentAction = SessionTrace("29. Call 'Main Process Of Life Request' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("RiskInformation", _formData.RiskInformation) 
                .Add("eMail", _formData.eMail) 
                .Add("Currency", _formData.Currency) 
                .Add("ClientExistInDB", _formData.ClientExistInDB) 
                .Add("QuestionnairesAvailable", _formData.QuestionnairesAvailable) 
                .Add("ProducerClientID", _formData.ProducerClientID) 
                .Add("BeneficiaryType", _formData.BeneficiaryType) 
                .Add("context", _formContext) 
                .Add("SendMailIndicator", _formData.SendMailIndicator) 
                .Add("PlanType", _formData.PlanType) 
                .Add("MailToProducerIndicator", _formData.MailToProducerIndicator) 
                .Add("OnLinePrintIndicator", _formData.OnLinePrintIndicator) 
                .Add("uwCaseID", _formData.uwcaseid) 
                .Add("PreviousPayment", _formData.PreviousPayment) 
                .Add("ConsumerInformation", _formData.ConsumerInformation) 
                .Add("PhysicalAddress", _formData.AddressPhysicalAddressDLI) 
                .Add("ServiceResultData", _formData.ServiceResultData) 
                .Add("eMailAddress", _formData.AddresseMailDLI) 
                .Add("VerificarCuestionariosIndicador", _formData.VerificarCuestionariosIndicador) 
                .Add("PlanillaModificacion", _formData.PlanillaModificacion) 
                .Add("PlanillaVisualizacion", _formData.PlanillaVisualizacion) 
                .Add("UsercodeBO", _formData.UsercodeBO) 
                .Add("UsercodeFASI", _formData.UsercodeFASI) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("ProcessMainRequestOfLifePolicyNN", "87132571-11f9-45f0-a4e8-c19d98a1a13c", 21, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.RiskInformation = WorkflowOutArguments("RiskInformation")
                _formData.eMail = WorkflowOutArguments("eMail")
                _formData.Currency = WorkflowOutArguments("Currency")
                _formData.ClientExistInDB = WorkflowOutArguments("ClientExistInDB")
                _formData.QuestionnairesAvailable = WorkflowOutArguments("QuestionnairesAvailable")
                _formData.ProducerClientID = WorkflowOutArguments("ProducerClientID")
                _formData.BeneficiaryType = WorkflowOutArguments("BeneficiaryType")
                _formData.SendMailIndicator = WorkflowOutArguments("SendMailIndicator")
                _formData.PlanType = WorkflowOutArguments("PlanType")
                _formData.MailToProducerIndicator = WorkflowOutArguments("MailToProducerIndicator")
                _formData.OnLinePrintResult = WorkflowOutArguments("OnLinePrintResult")
                _formData.PolicyDocument = WorkflowOutArguments("PolicyDocument")
                _formData.uwcaseid = WorkflowOutArguments("uwCaseID")
                _formData.ServiceResultData = WorkflowOutArguments("ServiceResultData")

        Else 
            currentAction = SessionTrace("30. _formData.OnLinePrint = 2...") 
 
            currentAction = SessionTrace("30.1. _formData.OnLinePrint = 2...")

 _formData.OnLinePrint = 2 

            currentAction = SessionTrace("31. The message 'Sr/Sra. { Value /Ris...' will displayed as 'Splash'") 
            messageAction = "Sr/Sra. { Value /RiskInformation/PrimaryInsured/Client/FirstName } { Value /RiskInformation/PrimaryInsured/Client/LastName } { Value /RiskInformation/PrimaryInsured/Client/LastName2 }, pronto estará recibiendo noticias nuestras...Gracias por visitarnos..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            currentAction = SessionTrace("32. Call 'Main Process Of Life Request' workflow in Asynchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("RiskInformation", _formData.RiskInformation) 
                .Add("eMail", _formData.eMail) 
                .Add("Currency", _formData.Currency) 
                .Add("ClientExistInDB", _formData.ClientExistInDB) 
                .Add("QuestionnairesAvailable", _formData.QuestionnairesAvailable) 
                .Add("ProducerClientID", _formData.ProducerClientID) 
                .Add("BeneficiaryType", _formData.BeneficiaryType) 
                .Add("context", _formContext) 
                .Add("SendMailIndicator", _formData.SendMailIndicator) 
                .Add("PlanType", _formData.PlanType) 
                .Add("MailToProducerIndicator", _formData.MailToProducerIndicator) 
                .Add("OnLinePrintIndicator", _formData.OnLinePrintIndicator) 
                .Add("uwCaseID", _formData.uwcaseid) 
                .Add("PreviousPayment", _formData.PreviousPayment) 
                .Add("ConsumerInformation", _formData.ConsumerInformation) 
                .Add("PhysicalAddress", _formData.AddressPhysicalAddressDLI) 
                .Add("ServiceResultData", _formData.ServiceResultData) 
                .Add("eMailAddress", _formData.AddresseMailDLI) 
                .Add("VerificarCuestionariosIndicador", _formData.VerificarCuestionariosIndicador) 
                .Add("PlanillaModificacion", _formData.PlanillaModificacion) 
                .Add("PlanillaVisualizacion", _formData.PlanillaVisualizacion) 
                .Add("UsercodeBO", _formData.UsercodeBO) 
                .Add("UsercodeFASI", _formData.UsercodeFASI) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("ProcessMainRequestOfLifePolicyNN", "87132571-11f9-45f0-a4e8-c19d98a1a13c", 21, WorkflowInArguments, True, False, Me.AppRelativeVirtualPath, _formData.InternalId)
 
            End If
            End If
            currentAction = SessionTrace("33. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("34. Call Shared Sub 'Clear Form Errors' without parameters") 
            
        _formData.Errors.Clear()
	_formContext.Errors.Clear()
     

            End If
            currentAction = SessionTrace("35. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("36. If _formData.OnLinePrintIndicator = true Then") 
If _formData.OnLinePrintIndicator = true Then

            currentAction = SessionTrace("37. If _formData.OnLinePrintResult = 1 Then") 
If _formData.OnLinePrintResult = 1 Then

            currentAction = SessionTrace("38. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("38.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

            currentAction = SessionTrace("39. _formData.ClientExistInDB = true...") 
 
            currentAction = SessionTrace("39.1. _formData.ClientExistInDB = true...")

 _formData.ClientExistInDB = true 

            currentAction = SessionTrace("40. _formData.RiskInformation.PrimaryInsured.Client.IsNew = false...") 
 
            currentAction = SessionTrace("40.1. _formData.RiskInformation.PrimaryInsured.Client.IsNew = false...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.IsNew = false 
            currentAction = SessionTrace("40.2. _formData.ClientExistInDB = true...")

 _formData.ClientExistInDB = true 

            currentAction = SessionTrace("41. The message 'No puede obtener la ...' will displayed as 'Popup'") 
            messageAction = "No puede obtener la póliza en linea, el asegurado debe proporcionar información adicional (requerimientos)... Si desea continuar con la solicitud, desmarque la opción de ""Ver cuadro de póliza en línea"" y vuelva a seleccionar ""Comprar la póliza""..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            End If
            End If
            End If
            currentAction = SessionTrace("42. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("43. If _formData.OnLinePrintIndicator = true Then") 
If _formData.OnLinePrintIndicator = true Then

            currentAction = SessionTrace("44. If _formData.OnLinePrintResult <> 0 AND _formData.OnLinePrintResult <> 99 Then") 
If _formData.OnLinePrintResult <> 0 AndAlso _formData.OnLinePrintResult <> 99 Then

            currentAction = SessionTrace("45. _formData.ErrorsFound = true...") 
 
            currentAction = SessionTrace("45.1. _formData.ErrorsFound = true...")

 _formData.ErrorsFound = true 

            currentAction = SessionTrace("46. The message 'No se puede realizar...' will displayed as 'Splash'") 
            messageAction = "No se puede realizar la impresión del documento (Error { Value /OnLinePrintResult } ) (2)" 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            End If
            End If
            End If
            currentAction = SessionTrace("47. If _formData.ErrorsFound = false Then") 
If _formData.ErrorsFound = false Then

            currentAction = SessionTrace("48. If _formData.OnLinePrintIndicator = true Then") 
If _formData.OnLinePrintIndicator = true Then

            currentAction = SessionTrace("49. If _formData.OnLinePrintResult = 0 Then") 
If _formData.OnLinePrintResult = 0 Then

            currentAction = SessionTrace("50. Call Shared Function 'Retrieve Underwriting Case' with parameters (Case ID, Effective Date)") 
            Dim _UnderwritingCase_76357bb3b44f46b4b1924c171b5f5ce5 As InMotionGIT.Underwriting.Contracts.UnderwritingCase 
            _UnderwritingCase_76357bb3b44f46b4b1924c171b5f5ce5 = InMotionGIT.Underwriting.Proxy.Manager.Retrieve            (underwritingCaseID:=_formData.uwcaseid, atDate:=Date.Today) 
             
            _formData.UnderwritingCase = _UnderwritingCase_76357bb3b44f46b4b1924c171b5f5ce5 
            isNullResult = (IsNothing(_UnderwritingCase_76357bb3b44f46b4b1924c171b5f5ce5)) 

            currentAction = SessionTrace("51. _formData.ReportURL = 'CAL001_GENERAL.rpt' 'url mode displayed in the editor'...'") 
            Dim reportParameters51 As New List(Of String) 
            Dim procedureParameters51 As New List(Of String)
            procedureParameters51.Add("2")
            procedureParameters51.Add(_formData.RiskInformation.LineOfBusiness)
            procedureParameters51.Add(_formData.RiskInformation.ProductCode)
            procedureParameters51.Add(_formData.UnderwritingCase.PolicyID)
            procedureParameters51.Add(_formData.RiskInformation.CertificateID)
            procedureParameters51.Add(_formData.RiskInformation.EffectiveDate.ToString("yyyy/MM/dd"))
            _formData.ReportURL = InMotionGIT.Report.Crystal.Proxy.Client.Execute("CAL001_GENERAL", True, False, reportParameters51, procedureParameters51)

            currentAction = SessionTrace("52. If _formData.ReportURL Is Null Or Empty '' Then") 
If String.IsNullOrEmpty(_formData.ReportURL) Then

            currentAction = SessionTrace("53. The message 'Póliza generada { Va...' will displayed as 'Splash'") 
            messageAction = "Póliza generada { Value /UnderwritingCase/PolicyID }. Por los momentos no se puede emitir el cuadro de póliza... Por favor contacte a su asesor de seguros..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

        Else 
            currentAction = SessionTrace("54. The message '<a href='{ Value /Re...' will displayed as 'Splash'") 
            messageAction = "<a href=""{ Value /ReportURL }"">Presione aquí para ver el documento... Póliza { Value /UnderwritingCase/PolicyID }</a>" 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            End If
            End If
            End If
            End If
            currentAction = SessionTrace("55. _formData.FormStatus = 3...") 
 
            currentAction = SessionTrace("55.1. _formData.FormStatus = 3...")

 _formData.FormStatus = 3 



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub
Protected Sub Rechazar_Click(sender As Object, e As EventArgs)  
        Dim NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = SessionTrace("Rechazar_Click")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = SessionTrace("1. The message 'No se continua con e...' will displayed as 'Splash'") 
            messageAction = "No se continua con el proceso... No deje de visitarnos en otra oportunidad..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            currentAction = SessionTrace("2. _formData.FormStatus = 99...") 
 
            currentAction = SessionTrace("2.1. _formData.FormStatus = 99...")

 _formData.FormStatus = 99 



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(NNCotizacionMiVidaValeIIParameterInstance,"")
          
        
          If NNCotizacionMiVidaValeIIParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(NNCotizacionMiVidaValeIIParameterInstance.NotifyMessage)
             End If           
            
             NNCotizacionMiVidaValeIIParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(NNCotizacionMiVidaValeIIParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If
		   NNCotizacionMiVidaValeIIUpdatePanel.Update
      End Try         
    End Sub


#End Region

#Region "UserControls Events Handles"

    



#End Region

#Region "Form Manager"

    Private Sub VerifySecurityLevel()

































    End Sub

      

    Private Sub GetCurrentParameterInstance(ByRef NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter, force As Boolean)
        If _loadcompleted Or force Then
            If Not _CurrentParameterInstance Then

                NNCotizacionMiVidaValeIIParameterInstance = FormData

                If Page.IsPostBack Then
                    MapPageToClass(NNCotizacionMiVidaValeIIParameterInstance)
                End If

                _CurrentParameterInstance = True
            Else
                NNCotizacionMiVidaValeIIParameterInstance = _formData
            End If
        Else
            NNCotizacionMiVidaValeIIParameterInstance = Nothing
        End If
    End Sub

    Protected Sub SetCurrentParameterInstance(ByRef NNCotizacionMiVidaValeIIParameterInstance As NNCotizacionMiVidaValeIIParameter, calledBy As String)
        FormData = NNCotizacionMiVidaValeIIParameterInstance
        MapClassToPage(NNCotizacionMiVidaValeIIParameterInstance,calledBy)
    End Sub

    Protected Sub SetErrors(errors As InMotionGIT.Common.Contracts.Errors.ErrorCollection)
        Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

        If IsNothing(errorList) Then
            errorList = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
        End If

        errorList = errors

        ViewState("Errors") = errorList
        ShowErrors()
    End Sub

    Public Sub ShowErrors()
        If Not IsNothing(ViewState("Errors")) Then
            Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

            Dim queryOut = From lst In errorList Select lst Order By lst.ErrorId

            ErrorsGridView.Visible = True
            ErrorsGridView.DataSource = queryOut.ToList
            ErrorsGridView.DataBind()
            UpdatePanelErrors.Update()
        End If
    End Sub
   
    Private Sub ShowWindowPopupMessage(message As String)
        NotifyMessageLabel.Text = message
        popupNotifyMessage.ShowOnPageLoad = True
    End Sub

    Private Sub ClosePopupWindow()
        popControl.Windows(0).ShowOnPageLoad = False
    End Sub

    Private Sub GetTransferParameters()
        Dim fromDocumentCache As Object = Nothing

        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) Then
            fromDocumentCache = Session( Request.QueryString("fromid"))
            Session.Remove(Request.QueryString("fromid"))
            
        Else
            fromDocumentCache = Session(Session("fromid"))
            Session.Remove(Session("fromid"))
            Session.Remove("fromid")   
        End If
        
        If Not IsNothing(fromDocumentCache) Then
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwcaseid", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("uwreqid", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InsuredAmount", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InsuredAmountSelected", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PlanType", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientExistInDB", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("eMail", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Currency", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Age", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QuestionnairesAvailable", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProducerClientID", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("BeneficiaryType", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("SendMailIndicator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MailToProducerIndicator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("InRuleErros", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AccumulatedAmount", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CancelledPoliciesQuantity", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OtherPoliciesSameRiskQuantity", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ConsumerInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrintIndicator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrintResult", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PolicyDocument", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ErrorsFound", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ReportURL", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FormStatus", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("OnLinePrint", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusRun", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("StatusCase", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RecoveryCaseIndicator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnswerDiabetes", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnswerHeart", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnswerCancer", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PaymentMethod", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProductMasterDescription", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AddressPhysicalAddressDLI", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PreviousPayment", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClienteIndicado", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ServiceResultData", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CompleteAddress", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AddresseMailDLI", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AddressDLICollection", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("VerificarCuestionariosIndicador", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PlanillaModificacion", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PlanillaVisualizacion", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProductDescription", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PrimaTotalAnual", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PrimaRecibo", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MonedaRecibo", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("CurrentYear", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("MesTarjeta", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AnoTarjeta", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientIncluded", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AgregarBeneficiario", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Beneficiary", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("TypeOfPersonBenef", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ValorAcumulado", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("LookUpValue", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("LookUpValueCollection", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("BeneficiariosMail", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Codigo", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Descripcion", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FondosMail", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeBO", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsercodeFASI", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClienteInformaExiste", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClienteInformaEsUsuario", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsuarioClaveEntrada", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UsuarioPassword", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientProvisional", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("QRegistros", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("frompanel", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ClientInsuredPerson", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsAnonymous", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UserInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("GenderClient", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UnderwritingCase", fromDocumentCache, _formData)
            
        End If
    End Sub
    
    

    Private Sub SetDefaultValuesFromQueryString()

        If Request.Form("uwcaseid").IsNotEmpty Then
                FormData.uwcaseid = Request.Form("uwcaseid") 

ElseIf Request.QueryString("uwcaseid").IsNotEmpty Then
                FormData.uwcaseid = Request.QueryString("uwcaseid") 
End If 

If Request.Form("uwreqid").IsNotEmpty Then
                FormData.uwreqid = Request.Form("uwreqid") 

ElseIf Request.QueryString("uwreqid").IsNotEmpty Then
                FormData.uwreqid = Request.QueryString("uwreqid") 
End If 

If Request.Form("InsuredAmount").IsNotEmpty Then
                FormData.InsuredAmount = Request.Form("InsuredAmount") 

ElseIf Request.QueryString("InsuredAmount").IsNotEmpty Then
                FormData.InsuredAmount = Request.QueryString("InsuredAmount") 
End If 

If Request.Form("InsuredAmountSelected").IsNotEmpty Then
                FormData.InsuredAmountSelected = Request.Form("InsuredAmountSelected") 

ElseIf Request.QueryString("InsuredAmountSelected").IsNotEmpty Then
                FormData.InsuredAmountSelected = Request.QueryString("InsuredAmountSelected") 
End If 

If Request.Form("PlanType").IsNotEmpty Then
                FormData.PlanType = Request.Form("PlanType") 

ElseIf Request.QueryString("PlanType").IsNotEmpty Then
                FormData.PlanType = Request.QueryString("PlanType") 
End If 

If Request.Form("ClientExistInDB").IsNotEmpty Then
                FormData.ClientExistInDB = Request.Form("ClientExistInDB") 

ElseIf Request.QueryString("ClientExistInDB").IsNotEmpty Then
                FormData.ClientExistInDB = Request.QueryString("ClientExistInDB") 
End If 

If Request.Form("eMail").IsNotEmpty Then
                FormData.eMail = Request.Form("eMail") 

ElseIf Request.QueryString("eMail").IsNotEmpty Then
                FormData.eMail = Request.QueryString("eMail") 
End If 

If Request.Form("Currency").IsNotEmpty Then
                FormData.Currency = Request.Form("Currency") 

ElseIf Request.QueryString("Currency").IsNotEmpty Then
                FormData.Currency = Request.QueryString("Currency") 
End If 

If Request.Form("Age").IsNotEmpty Then
                FormData.Age = Request.Form("Age") 

ElseIf Request.QueryString("Age").IsNotEmpty Then
                FormData.Age = Request.QueryString("Age") 
End If 

If Request.Form("ProducerClientID").IsNotEmpty Then
                FormData.ProducerClientID = Request.Form("ProducerClientID") 

ElseIf Request.QueryString("ProducerClientID").IsNotEmpty Then
                FormData.ProducerClientID = Request.QueryString("ProducerClientID") 
End If 

If Request.Form("BeneficiaryType").IsNotEmpty Then
                FormData.BeneficiaryType = Request.Form("BeneficiaryType") 

ElseIf Request.QueryString("BeneficiaryType").IsNotEmpty Then
                FormData.BeneficiaryType = Request.QueryString("BeneficiaryType") 
End If 

If Request.Form("SendMailIndicator").IsNotEmpty Then
                FormData.SendMailIndicator = Request.Form("SendMailIndicator") 

ElseIf Request.QueryString("SendMailIndicator").IsNotEmpty Then
                FormData.SendMailIndicator = Request.QueryString("SendMailIndicator") 
End If 

If Request.Form("MailToProducerIndicator").IsNotEmpty Then
                FormData.MailToProducerIndicator = Request.Form("MailToProducerIndicator") 

ElseIf Request.QueryString("MailToProducerIndicator").IsNotEmpty Then
                FormData.MailToProducerIndicator = Request.QueryString("MailToProducerIndicator") 
End If 

If Request.Form("InRuleErros").IsNotEmpty Then
                FormData.InRuleErros = Request.Form("InRuleErros") 

ElseIf Request.QueryString("InRuleErros").IsNotEmpty Then
                FormData.InRuleErros = Request.QueryString("InRuleErros") 
End If 

If Request.Form("AccumulatedAmount").IsNotEmpty Then
                FormData.AccumulatedAmount = Request.Form("AccumulatedAmount") 

ElseIf Request.QueryString("AccumulatedAmount").IsNotEmpty Then
                FormData.AccumulatedAmount = Request.QueryString("AccumulatedAmount") 
End If 

If Request.Form("CancelledPoliciesQuantity").IsNotEmpty Then
                FormData.CancelledPoliciesQuantity = Request.Form("CancelledPoliciesQuantity") 

ElseIf Request.QueryString("CancelledPoliciesQuantity").IsNotEmpty Then
                FormData.CancelledPoliciesQuantity = Request.QueryString("CancelledPoliciesQuantity") 
End If 

If Request.Form("OtherPoliciesSameRiskQuantity").IsNotEmpty Then
                FormData.OtherPoliciesSameRiskQuantity = Request.Form("OtherPoliciesSameRiskQuantity") 

ElseIf Request.QueryString("OtherPoliciesSameRiskQuantity").IsNotEmpty Then
                FormData.OtherPoliciesSameRiskQuantity = Request.QueryString("OtherPoliciesSameRiskQuantity") 
End If 

If Request.Form("OnLinePrintIndicator").IsNotEmpty Then
                FormData.OnLinePrintIndicator = Request.Form("OnLinePrintIndicator") 

ElseIf Request.QueryString("OnLinePrintIndicator").IsNotEmpty Then
                FormData.OnLinePrintIndicator = Request.QueryString("OnLinePrintIndicator") 
End If 

If Request.Form("OnLinePrintResult").IsNotEmpty Then
                FormData.OnLinePrintResult = Request.Form("OnLinePrintResult") 

ElseIf Request.QueryString("OnLinePrintResult").IsNotEmpty Then
                FormData.OnLinePrintResult = Request.QueryString("OnLinePrintResult") 
End If 

If Request.Form("PolicyDocument").IsNotEmpty Then
                FormData.PolicyDocument = Request.Form("PolicyDocument") 

ElseIf Request.QueryString("PolicyDocument").IsNotEmpty Then
                FormData.PolicyDocument = Request.QueryString("PolicyDocument") 
End If 

If Request.Form("ErrorsFound").IsNotEmpty Then
                FormData.ErrorsFound = Request.Form("ErrorsFound") 

ElseIf Request.QueryString("ErrorsFound").IsNotEmpty Then
                FormData.ErrorsFound = Request.QueryString("ErrorsFound") 
End If 

If Request.Form("ReportURL").IsNotEmpty Then
                FormData.ReportURL = Request.Form("ReportURL") 

ElseIf Request.QueryString("ReportURL").IsNotEmpty Then
                FormData.ReportURL = Request.QueryString("ReportURL") 
End If 

If Request.Form("FormStatus").IsNotEmpty Then
                FormData.FormStatus = Request.Form("FormStatus") 

ElseIf Request.QueryString("FormStatus").IsNotEmpty Then
                FormData.FormStatus = Request.QueryString("FormStatus") 
End If 

If Request.Form("OnLinePrint").IsNotEmpty Then
                FormData.OnLinePrint = Request.Form("OnLinePrint") 

ElseIf Request.QueryString("OnLinePrint").IsNotEmpty Then
                FormData.OnLinePrint = Request.QueryString("OnLinePrint") 
End If 

If Request.Form("StatusRun").IsNotEmpty Then
                FormData.StatusRun = Request.Form("StatusRun") 

ElseIf Request.QueryString("StatusRun").IsNotEmpty Then
                FormData.StatusRun = Request.QueryString("StatusRun") 
End If 

If Request.Form("StatusCase").IsNotEmpty Then
                FormData.StatusCase = Request.Form("StatusCase") 

ElseIf Request.QueryString("StatusCase").IsNotEmpty Then
                FormData.StatusCase = Request.QueryString("StatusCase") 
End If 

If Request.Form("RecoveryCaseIndicator").IsNotEmpty Then
                FormData.RecoveryCaseIndicator = Request.Form("RecoveryCaseIndicator") 

ElseIf Request.QueryString("RecoveryCaseIndicator").IsNotEmpty Then
                FormData.RecoveryCaseIndicator = Request.QueryString("RecoveryCaseIndicator") 
End If 

If Request.Form("AnswerDiabetes").IsNotEmpty Then
                FormData.AnswerDiabetes = Request.Form("AnswerDiabetes") 

ElseIf Request.QueryString("AnswerDiabetes").IsNotEmpty Then
                FormData.AnswerDiabetes = Request.QueryString("AnswerDiabetes") 
End If 

If Request.Form("AnswerHeart").IsNotEmpty Then
                FormData.AnswerHeart = Request.Form("AnswerHeart") 

ElseIf Request.QueryString("AnswerHeart").IsNotEmpty Then
                FormData.AnswerHeart = Request.QueryString("AnswerHeart") 
End If 

If Request.Form("AnswerCancer").IsNotEmpty Then
                FormData.AnswerCancer = Request.Form("AnswerCancer") 

ElseIf Request.QueryString("AnswerCancer").IsNotEmpty Then
                FormData.AnswerCancer = Request.QueryString("AnswerCancer") 
End If 

If Request.Form("PaymentMethod").IsNotEmpty Then
                FormData.PaymentMethod = Request.Form("PaymentMethod") 

ElseIf Request.QueryString("PaymentMethod").IsNotEmpty Then
                FormData.PaymentMethod = Request.QueryString("PaymentMethod") 
End If 

If Request.Form("ProductMasterDescription").IsNotEmpty Then
                FormData.ProductMasterDescription = Request.Form("ProductMasterDescription") 

ElseIf Request.QueryString("ProductMasterDescription").IsNotEmpty Then
                FormData.ProductMasterDescription = Request.QueryString("ProductMasterDescription") 
End If 

If Request.Form("PreviousPayment").IsNotEmpty Then
                FormData.PreviousPayment = Request.Form("PreviousPayment") 

ElseIf Request.QueryString("PreviousPayment").IsNotEmpty Then
                FormData.PreviousPayment = Request.QueryString("PreviousPayment") 
End If 

If Request.Form("ClienteIndicado").IsNotEmpty Then
                FormData.ClienteIndicado = Request.Form("ClienteIndicado") 

ElseIf Request.QueryString("ClienteIndicado").IsNotEmpty Then
                FormData.ClienteIndicado = Request.QueryString("ClienteIndicado") 
End If 

If Request.Form("CompleteAddress").IsNotEmpty Then
                FormData.CompleteAddress = Request.Form("CompleteAddress") 

ElseIf Request.QueryString("CompleteAddress").IsNotEmpty Then
                FormData.CompleteAddress = Request.QueryString("CompleteAddress") 
End If 

If Request.Form("VerificarCuestionariosIndicador").IsNotEmpty Then
                FormData.VerificarCuestionariosIndicador = Request.Form("VerificarCuestionariosIndicador") 

ElseIf Request.QueryString("VerificarCuestionariosIndicador").IsNotEmpty Then
                FormData.VerificarCuestionariosIndicador = Request.QueryString("VerificarCuestionariosIndicador") 
End If 

If Request.Form("PlanillaModificacion").IsNotEmpty Then
                FormData.PlanillaModificacion = Request.Form("PlanillaModificacion") 

ElseIf Request.QueryString("PlanillaModificacion").IsNotEmpty Then
                FormData.PlanillaModificacion = Request.QueryString("PlanillaModificacion") 
End If 

If Request.Form("PlanillaVisualizacion").IsNotEmpty Then
                FormData.PlanillaVisualizacion = Request.Form("PlanillaVisualizacion") 

ElseIf Request.QueryString("PlanillaVisualizacion").IsNotEmpty Then
                FormData.PlanillaVisualizacion = Request.QueryString("PlanillaVisualizacion") 
End If 

If Request.Form("ProductDescription").IsNotEmpty Then
                FormData.ProductDescription = Request.Form("ProductDescription") 

ElseIf Request.QueryString("ProductDescription").IsNotEmpty Then
                FormData.ProductDescription = Request.QueryString("ProductDescription") 
End If 

If Request.Form("PrimaTotalAnual").IsNotEmpty Then
                FormData.PrimaTotalAnual = Request.Form("PrimaTotalAnual") 

ElseIf Request.QueryString("PrimaTotalAnual").IsNotEmpty Then
                FormData.PrimaTotalAnual = Request.QueryString("PrimaTotalAnual") 
End If 

If Request.Form("PrimaRecibo").IsNotEmpty Then
                FormData.PrimaRecibo = Request.Form("PrimaRecibo") 

ElseIf Request.QueryString("PrimaRecibo").IsNotEmpty Then
                FormData.PrimaRecibo = Request.QueryString("PrimaRecibo") 
End If 

If Request.Form("MonedaRecibo").IsNotEmpty Then
                FormData.MonedaRecibo = Request.Form("MonedaRecibo") 

ElseIf Request.QueryString("MonedaRecibo").IsNotEmpty Then
                FormData.MonedaRecibo = Request.QueryString("MonedaRecibo") 
End If 

If Request.Form("CurrentYear").IsNotEmpty Then
                FormData.CurrentYear = Request.Form("CurrentYear") 

ElseIf Request.QueryString("CurrentYear").IsNotEmpty Then
                FormData.CurrentYear = Request.QueryString("CurrentYear") 
End If 

If Request.Form("MesTarjeta").IsNotEmpty Then
                FormData.MesTarjeta = Request.Form("MesTarjeta") 

ElseIf Request.QueryString("MesTarjeta").IsNotEmpty Then
                FormData.MesTarjeta = Request.QueryString("MesTarjeta") 
End If 

If Request.Form("AnoTarjeta").IsNotEmpty Then
                FormData.AnoTarjeta = Request.Form("AnoTarjeta") 

ElseIf Request.QueryString("AnoTarjeta").IsNotEmpty Then
                FormData.AnoTarjeta = Request.QueryString("AnoTarjeta") 
End If 

If Request.Form("AgregarBeneficiario").IsNotEmpty Then
                FormData.AgregarBeneficiario = Request.Form("AgregarBeneficiario") 

ElseIf Request.QueryString("AgregarBeneficiario").IsNotEmpty Then
                FormData.AgregarBeneficiario = Request.QueryString("AgregarBeneficiario") 
End If 

If Request.Form("TypeOfPersonBenef").IsNotEmpty Then
                FormData.TypeOfPersonBenef = Request.Form("TypeOfPersonBenef") 

ElseIf Request.QueryString("TypeOfPersonBenef").IsNotEmpty Then
                FormData.TypeOfPersonBenef = Request.QueryString("TypeOfPersonBenef") 
End If 

If Request.Form("ValorAcumulado").IsNotEmpty Then
                FormData.ValorAcumulado = Request.Form("ValorAcumulado") 

ElseIf Request.QueryString("ValorAcumulado").IsNotEmpty Then
                FormData.ValorAcumulado = Request.QueryString("ValorAcumulado") 
End If 

If Request.Form("BeneficiariosMail").IsNotEmpty Then
                FormData.BeneficiariosMail = Request.Form("BeneficiariosMail") 

ElseIf Request.QueryString("BeneficiariosMail").IsNotEmpty Then
                FormData.BeneficiariosMail = Request.QueryString("BeneficiariosMail") 
End If 

If Request.Form("Codigo").IsNotEmpty Then
                FormData.Codigo = Request.Form("Codigo") 

ElseIf Request.QueryString("Codigo").IsNotEmpty Then
                FormData.Codigo = Request.QueryString("Codigo") 
End If 

If Request.Form("Descripcion").IsNotEmpty Then
                FormData.Descripcion = Request.Form("Descripcion") 

ElseIf Request.QueryString("Descripcion").IsNotEmpty Then
                FormData.Descripcion = Request.QueryString("Descripcion") 
End If 

If Request.Form("FondosMail").IsNotEmpty Then
                FormData.FondosMail = Request.Form("FondosMail") 

ElseIf Request.QueryString("FondosMail").IsNotEmpty Then
                FormData.FondosMail = Request.QueryString("FondosMail") 
End If 

If Request.Form("UsercodeBO").IsNotEmpty Then
                FormData.UsercodeBO = Request.Form("UsercodeBO") 

ElseIf Request.QueryString("UsercodeBO").IsNotEmpty Then
                FormData.UsercodeBO = Request.QueryString("UsercodeBO") 
End If 

If Request.Form("UsercodeFASI").IsNotEmpty Then
                FormData.UsercodeFASI = Request.Form("UsercodeFASI") 

ElseIf Request.QueryString("UsercodeFASI").IsNotEmpty Then
                FormData.UsercodeFASI = Request.QueryString("UsercodeFASI") 
End If 

If Request.Form("ClienteInformaExiste").IsNotEmpty Then
                FormData.ClienteInformaExiste = Request.Form("ClienteInformaExiste") 

ElseIf Request.QueryString("ClienteInformaExiste").IsNotEmpty Then
                FormData.ClienteInformaExiste = Request.QueryString("ClienteInformaExiste") 
End If 

If Request.Form("ClienteInformaEsUsuario").IsNotEmpty Then
                FormData.ClienteInformaEsUsuario = Request.Form("ClienteInformaEsUsuario") 

ElseIf Request.QueryString("ClienteInformaEsUsuario").IsNotEmpty Then
                FormData.ClienteInformaEsUsuario = Request.QueryString("ClienteInformaEsUsuario") 
End If 

If Request.Form("UsuarioClaveEntrada").IsNotEmpty Then
                FormData.UsuarioClaveEntrada = Request.Form("UsuarioClaveEntrada") 

ElseIf Request.QueryString("UsuarioClaveEntrada").IsNotEmpty Then
                FormData.UsuarioClaveEntrada = Request.QueryString("UsuarioClaveEntrada") 
End If 

If Request.Form("UsuarioPassword").IsNotEmpty Then
                FormData.UsuarioPassword = Request.Form("UsuarioPassword") 

ElseIf Request.QueryString("UsuarioPassword").IsNotEmpty Then
                FormData.UsuarioPassword = Request.QueryString("UsuarioPassword") 
End If 

If Request.Form("QRegistros").IsNotEmpty Then
                FormData.QRegistros = Request.Form("QRegistros") 

ElseIf Request.QueryString("QRegistros").IsNotEmpty Then
                FormData.QRegistros = Request.QueryString("QRegistros") 
End If 

If Request.Form("frompanel").IsNotEmpty Then
                FormData.frompanel = Request.Form("frompanel") 

ElseIf Request.QueryString("frompanel").IsNotEmpty Then
                FormData.frompanel = Request.QueryString("frompanel") 
End If 

If Request.Form("IsAnonymous").IsNotEmpty Then
                FormData.IsAnonymous = Request.Form("IsAnonymous") 

ElseIf Request.QueryString("IsAnonymous").IsNotEmpty Then
                FormData.IsAnonymous = Request.QueryString("IsAnonymous") 
End If 

If Request.Form("GenderClient").IsNotEmpty Then
                FormData.GenderClient = Request.Form("GenderClient") 

ElseIf Request.QueryString("GenderClient").IsNotEmpty Then
                FormData.GenderClient = Request.QueryString("GenderClient") 
End If 


    End Sub
    
    Private Sub BehaviorControls(controlItem As Control, isEnable As Boolean)
        InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValueSimple("Enabled", controlItem, isEnable)           
    End Sub
    
    Private Sub SetReadOnlyControls()
    
        BehaviorControls(RiskInformationEffectiveDate, False)
        BehaviorControls(uwcaseid, False)
        BehaviorControls(Gender, False)
        BehaviorControls(SmokerIndicator, False)
        BehaviorControls(BirthDate, False)
        BehaviorControls(InsuredAmountForCalculation, False)
        BehaviorControls(Currency, False)
        BehaviorControls(InsuredAmountSelected, False)
        BehaviorControls(PaymentFrequency, False)
        BehaviorControls(PaymentMethod, False)
        BehaviorControls(CoverageForAmendment, False)
        BehaviorControls(Cotizar, False)
        BehaviorControls(Acepto, False)
        BehaviorControls(ClienteInformaEsUsuario, False)
        BehaviorControls(ClienteInformaExiste, False)
        BehaviorControls(UsuarioClaveEntrada, False)
        BehaviorControls(ClientIDAut, False)
        BehaviorControls(FirstNameAut, False)
        BehaviorControls(LastNameAut, False)
        BehaviorControls(LastName2Aut, False)
        BehaviorControls(btnAutenticar, False)
        BehaviorControls(ClientID, False)
        BehaviorControls(Height, False)
        BehaviorControls(Weight, False)
        BehaviorControls(FirstName, False)
        BehaviorControls(LastName, False)
        BehaviorControls(LastName2, False)
        BehaviorControls(physicaladdress0, False)
        BehaviorControls(eMailclient, False)
        BehaviorControls(button8, False)
        BehaviorControls(Diabetes, False)
        BehaviorControls(Heart, False)
        BehaviorControls(Cancer, False)
        BehaviorControls(button14, False)
        BehaviorControls(BeneficiaryType, False)
        BehaviorControls(button1, False)
        BehaviorControls(Beneficiary, False)
        BehaviorControls(RelationshipBD, False)
        BehaviorControls(PercentageShareBP, False)
        BehaviorControls(TypeOfPersonBenef, False)
        BehaviorControls(ClientIDBD, False)
        BehaviorControls(FirstNameBP, False)
        BehaviorControls(LastNameBP, False)
        BehaviorControls(LastName2BP, False)
        BehaviorControls(LegalNameBP, False)
        BehaviorControls(button33, False)
        BehaviorControls(button12, False)
        BehaviorControls(CreditCardType, False)
        BehaviorControls(BankCode, False)
        BehaviorControls(CreditCardNumber, False)
        BehaviorControls(MesTarjeta, False)
        BehaviorControls(AnoTarjeta, False)
        BehaviorControls(AuthorizationNumber, False)
        BehaviorControls(buttonGPago, False)
        BehaviorControls(button0, False)
        BehaviorControls(button19, False)
        BehaviorControls(EnviarCotizacionEmail, False)
        BehaviorControls(eMail, False)
        BehaviorControls(Accept, False)
        BehaviorControls(OnLinePrintIndicator, False)
        BehaviorControls(Rechazar, False)
        BehaviorControls(LineOfBusiness, False)
        BehaviorControls(RiskInformationProductCode, False)
    
    End Sub
     
#End Region

#Region "Actions Data Methods"

    Private Function SessionTrace(message As String) As String

        If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
            Dim tracelog As String = Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath)))

            tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
            Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = tracelog
        End If

        Return message
    End Function
    
    Private Sub ControlsInitialization()
        CoverageForAmendment.ClientVisible = True
        CoverageForAmendment.Enabled = True

             physicaladdress0.Enabled = True 

        Beneficiary.ClientVisible = True
        Beneficiary.Enabled = True

    End Sub     
  
    Private Sub ParametersToDictionary(ByRef target As Dictionary(Of String, Object))
        If IsNothing(target) Then
            target = New Dictionary(Of String, Object)

            target.Add("RiskInformation", _formData.RiskInformation) 
            target.Add("uwcaseid", _formData.uwcaseid) 
            target.Add("uwreqid", _formData.uwreqid) 
            target.Add("InsuredAmount", _formData.InsuredAmount) 
            target.Add("InsuredAmountSelected", _formData.InsuredAmountSelected) 
            target.Add("PlanType", _formData.PlanType) 
            target.Add("ClientExistInDB", _formData.ClientExistInDB) 
            target.Add("eMail", _formData.eMail) 
            target.Add("Currency", _formData.Currency) 
            target.Add("Age", _formData.Age) 
            target.Add("QuestionnairesAvailable", _formData.QuestionnairesAvailable) 
            target.Add("ProducerClientID", _formData.ProducerClientID) 
            target.Add("BeneficiaryType", _formData.BeneficiaryType) 
            target.Add("SendMailIndicator", _formData.SendMailIndicator) 
            target.Add("MailToProducerIndicator", _formData.MailToProducerIndicator) 
            target.Add("InRuleErros", _formData.InRuleErros) 
            target.Add("AccumulatedAmount", _formData.AccumulatedAmount) 
            target.Add("CancelledPoliciesQuantity", _formData.CancelledPoliciesQuantity) 
            target.Add("OtherPoliciesSameRiskQuantity", _formData.OtherPoliciesSameRiskQuantity) 
            target.Add("ConsumerInformation", _formData.ConsumerInformation) 
            target.Add("OnLinePrintIndicator", _formData.OnLinePrintIndicator) 
            target.Add("OnLinePrintResult", _formData.OnLinePrintResult) 
            target.Add("PolicyDocument", _formData.PolicyDocument) 
            target.Add("ErrorsFound", _formData.ErrorsFound) 
            target.Add("ReportURL", _formData.ReportURL) 
            target.Add("FormStatus", _formData.FormStatus) 
            target.Add("OnLinePrint", _formData.OnLinePrint) 
            target.Add("StatusRun", _formData.StatusRun) 
            target.Add("StatusCase", _formData.StatusCase) 
            target.Add("RecoveryCaseIndicator", _formData.RecoveryCaseIndicator) 
            target.Add("AnswerDiabetes", _formData.AnswerDiabetes) 
            target.Add("AnswerHeart", _formData.AnswerHeart) 
            target.Add("AnswerCancer", _formData.AnswerCancer) 
            target.Add("PaymentMethod", _formData.PaymentMethod) 
            target.Add("ProductMasterDescription", _formData.ProductMasterDescription) 
            target.Add("AddressPhysicalAddressDLI", _formData.AddressPhysicalAddressDLI) 
            target.Add("PreviousPayment", _formData.PreviousPayment) 
            target.Add("ClienteIndicado", _formData.ClienteIndicado) 
            target.Add("ServiceResultData", _formData.ServiceResultData) 
            target.Add("CompleteAddress", _formData.CompleteAddress) 
            target.Add("AddresseMailDLI", _formData.AddresseMailDLI) 
            target.Add("AddressDLICollection", _formData.AddressDLICollection) 
            target.Add("VerificarCuestionariosIndicador", _formData.VerificarCuestionariosIndicador) 
            target.Add("PlanillaModificacion", _formData.PlanillaModificacion) 
            target.Add("PlanillaVisualizacion", _formData.PlanillaVisualizacion) 
            target.Add("ProductDescription", _formData.ProductDescription) 
            target.Add("PrimaTotalAnual", _formData.PrimaTotalAnual) 
            target.Add("PrimaRecibo", _formData.PrimaRecibo) 
            target.Add("MonedaRecibo", _formData.MonedaRecibo) 
            target.Add("CurrentYear", _formData.CurrentYear) 
            target.Add("MesTarjeta", _formData.MesTarjeta) 
            target.Add("AnoTarjeta", _formData.AnoTarjeta) 
            target.Add("ClientIncluded", _formData.ClientIncluded) 
            target.Add("AgregarBeneficiario", _formData.AgregarBeneficiario) 
            target.Add("Beneficiary", _formData.Beneficiary) 
            target.Add("TypeOfPersonBenef", _formData.TypeOfPersonBenef) 
            target.Add("ValorAcumulado", _formData.ValorAcumulado) 
            target.Add("LookUpValue", _formData.LookUpValue) 
            target.Add("LookUpValueCollection", _formData.LookUpValueCollection) 
            target.Add("BeneficiariosMail", _formData.BeneficiariosMail) 
            target.Add("Codigo", _formData.Codigo) 
            target.Add("Descripcion", _formData.Descripcion) 
            target.Add("FondosMail", _formData.FondosMail) 
            target.Add("UsercodeBO", _formData.UsercodeBO) 
            target.Add("UsercodeFASI", _formData.UsercodeFASI) 
            target.Add("ClienteInformaExiste", _formData.ClienteInformaExiste) 
            target.Add("ClienteInformaEsUsuario", _formData.ClienteInformaEsUsuario) 
            target.Add("UsuarioClaveEntrada", _formData.UsuarioClaveEntrada) 
            target.Add("UsuarioPassword", _formData.UsuarioPassword) 
            target.Add("ClientProvisional", _formData.ClientProvisional) 
            target.Add("QRegistros", _formData.QRegistros) 
            target.Add("frompanel", _formData.frompanel) 
            target.Add("ClientInsuredPerson", _formData.ClientInsuredPerson) 
            target.Add("IsAnonymous", _formData.IsAnonymous) 
            target.Add("UserInformation", _formData.UserInformation) 
            target.Add("GenderClient", _formData.GenderClient) 
            target.Add("UnderwritingCase", _formData.UnderwritingCase) 

        Else
            target("RiskInformation") = _formData.RiskInformation 
            target("uwcaseid") = _formData.uwcaseid 
            target("uwreqid") = _formData.uwreqid 
            target("InsuredAmount") = _formData.InsuredAmount 
            target("InsuredAmountSelected") = _formData.InsuredAmountSelected 
            target("PlanType") = _formData.PlanType 
            target("ClientExistInDB") = _formData.ClientExistInDB 
            target("eMail") = _formData.eMail 
            target("Currency") = _formData.Currency 
            target("Age") = _formData.Age 
            target("QuestionnairesAvailable") = _formData.QuestionnairesAvailable 
            target("ProducerClientID") = _formData.ProducerClientID 
            target("BeneficiaryType") = _formData.BeneficiaryType 
            target("SendMailIndicator") = _formData.SendMailIndicator 
            target("MailToProducerIndicator") = _formData.MailToProducerIndicator 
            target("InRuleErros") = _formData.InRuleErros 
            target("AccumulatedAmount") = _formData.AccumulatedAmount 
            target("CancelledPoliciesQuantity") = _formData.CancelledPoliciesQuantity 
            target("OtherPoliciesSameRiskQuantity") = _formData.OtherPoliciesSameRiskQuantity 
            target("ConsumerInformation") = _formData.ConsumerInformation 
            target("OnLinePrintIndicator") = _formData.OnLinePrintIndicator 
            target("OnLinePrintResult") = _formData.OnLinePrintResult 
            target("PolicyDocument") = _formData.PolicyDocument 
            target("ErrorsFound") = _formData.ErrorsFound 
            target("ReportURL") = _formData.ReportURL 
            target("FormStatus") = _formData.FormStatus 
            target("OnLinePrint") = _formData.OnLinePrint 
            target("StatusRun") = _formData.StatusRun 
            target("StatusCase") = _formData.StatusCase 
            target("RecoveryCaseIndicator") = _formData.RecoveryCaseIndicator 
            target("AnswerDiabetes") = _formData.AnswerDiabetes 
            target("AnswerHeart") = _formData.AnswerHeart 
            target("AnswerCancer") = _formData.AnswerCancer 
            target("PaymentMethod") = _formData.PaymentMethod 
            target("ProductMasterDescription") = _formData.ProductMasterDescription 
            target("AddressPhysicalAddressDLI") = _formData.AddressPhysicalAddressDLI 
            target("PreviousPayment") = _formData.PreviousPayment 
            target("ClienteIndicado") = _formData.ClienteIndicado 
            target("ServiceResultData") = _formData.ServiceResultData 
            target("CompleteAddress") = _formData.CompleteAddress 
            target("AddresseMailDLI") = _formData.AddresseMailDLI 
            target("AddressDLICollection") = _formData.AddressDLICollection 
            target("VerificarCuestionariosIndicador") = _formData.VerificarCuestionariosIndicador 
            target("PlanillaModificacion") = _formData.PlanillaModificacion 
            target("PlanillaVisualizacion") = _formData.PlanillaVisualizacion 
            target("ProductDescription") = _formData.ProductDescription 
            target("PrimaTotalAnual") = _formData.PrimaTotalAnual 
            target("PrimaRecibo") = _formData.PrimaRecibo 
            target("MonedaRecibo") = _formData.MonedaRecibo 
            target("CurrentYear") = _formData.CurrentYear 
            target("MesTarjeta") = _formData.MesTarjeta 
            target("AnoTarjeta") = _formData.AnoTarjeta 
            target("ClientIncluded") = _formData.ClientIncluded 
            target("AgregarBeneficiario") = _formData.AgregarBeneficiario 
            target("Beneficiary") = _formData.Beneficiary 
            target("TypeOfPersonBenef") = _formData.TypeOfPersonBenef 
            target("ValorAcumulado") = _formData.ValorAcumulado 
            target("LookUpValue") = _formData.LookUpValue 
            target("LookUpValueCollection") = _formData.LookUpValueCollection 
            target("BeneficiariosMail") = _formData.BeneficiariosMail 
            target("Codigo") = _formData.Codigo 
            target("Descripcion") = _formData.Descripcion 
            target("FondosMail") = _formData.FondosMail 
            target("UsercodeBO") = _formData.UsercodeBO 
            target("UsercodeFASI") = _formData.UsercodeFASI 
            target("ClienteInformaExiste") = _formData.ClienteInformaExiste 
            target("ClienteInformaEsUsuario") = _formData.ClienteInformaEsUsuario 
            target("UsuarioClaveEntrada") = _formData.UsuarioClaveEntrada 
            target("UsuarioPassword") = _formData.UsuarioPassword 
            target("ClientProvisional") = _formData.ClientProvisional 
            target("QRegistros") = _formData.QRegistros 
            target("frompanel") = _formData.frompanel 
            target("ClientInsuredPerson") = _formData.ClientInsuredPerson 
            target("IsAnonymous") = _formData.IsAnonymous 
            target("UserInformation") = _formData.UserInformation 
            target("GenderClient") = _formData.GenderClient 
            target("UnderwritingCase") = _formData.UnderwritingCase 

        End If     
    End Sub
    
    Private Sub ExecuteActionsLoadForm()
                    Dim currentAction As String = SessionTrace("ActionsLoadForm")
                    
                    Try                          
                        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
                        Dim messageAction As String = String.Empty
                        Dim lastURL As String = String.Empty
                        Dim isNullResult As Boolean = True 
                        Dim isFoundData As Boolean  = False  
                        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
                        
                        ParametersToDictionary(parametersDictionary) 
                        
                        Dim WorkflowInArguments As New Dictionary(Of String, Object) 
 Dim WorkflowOutArguments As IDictionary(Of String, Object) 
   
                                                
                                    currentAction = SessionTrace("1. tab13.Visible = true, tab17.Visible = true, tab18.Visible = true...") 
            currentAction = SessionTrace("1.1. tab13.Visible = true...")
BehaviorShowControls("tab13,Visible")
            currentAction = SessionTrace("1.2. tab17.Visible = true...")
BehaviorShowControls("tab17,Visible")
            currentAction = SessionTrace("1.3. tab18.Visible = true...")
BehaviorShowControls("tab18,Visible")
            currentAction = SessionTrace("1.4. tab0.Visible = true...")
BehaviorShowControls("tab0,Visible")
            currentAction = SessionTrace("1.5. zone17.Enabled = false...")
BehaviorShowControls("zone17,Disabled")
            currentAction = SessionTrace("1.6. zone5.Visible = false...")
BehaviorShowControls("zone5,Hidden")
            currentAction = SessionTrace("1.7. Coverages.Visible = true...")
BehaviorShowControls("Coverages,Visible")
            currentAction = SessionTrace("1.8. zone2.Enabled = false...")
BehaviorShowControls("zone2,Disabled")
            currentAction = SessionTrace("1.9. zone15.Visible = false...")
BehaviorShowControls("zone15,Hidden")
            currentAction = SessionTrace("1.10. zone4.Enabled = false...")
BehaviorShowControls("zone4,Disabled")
            currentAction = SessionTrace("1.11. zone7.Visible = false...")
BehaviorShowControls("zone7,Hidden")
            currentAction = SessionTrace("1.12. zoneBeneficiarios.Enabled = false...")
BehaviorShowControls("zoneBeneficiarios,Disabled")
            currentAction = SessionTrace("1.13. zone11.Visible = false...")
BehaviorShowControls("zone11,Hidden")
            currentAction = SessionTrace("1.14. zone6.Enabled = false...")
BehaviorShowControls("zone6,Disabled")
            currentAction = SessionTrace("1.15. zone22.Enabled = false...")
BehaviorShowControls("zone22,Disabled")
            currentAction = SessionTrace("1.16. zone19.Visible = false...")
BehaviorShowControls("zone19,Hidden")
            currentAction = SessionTrace("1.17. zonegeneral.Visible = false...")
BehaviorShowControls("zonegeneral,Hidden")
            currentAction = SessionTrace("1.18. zone4.Visible = true...")
BehaviorShowControls("zone4,Visible")
            currentAction = SessionTrace("1.19. zone20.Visible = false...")
BehaviorShowControls("zone20,Hidden")

            currentAction = SessionTrace("2. _formData.RecoveryCaseIndicator = true...") 
 
            currentAction = SessionTrace("2.1. _formData.RecoveryCaseIndicator = true...")

 _formData.RecoveryCaseIndicator = true 

            currentAction = SessionTrace("3. Call Shared Function 'Retrieve Underwriting Case' with parameters (Case ID, Effective Date)") 
            Dim _UnderwritingCase_8b0cf7079335460cabb7b5bbfcbe727a As InMotionGIT.Underwriting.Contracts.UnderwritingCase 
            _UnderwritingCase_8b0cf7079335460cabb7b5bbfcbe727a = InMotionGIT.Underwriting.Proxy.Manager.Retrieve            (underwritingCaseID:=_formData.uwcaseid, atDate:=Date.Today) 
             
            _formData.UnderwritingCase = _UnderwritingCase_8b0cf7079335460cabb7b5bbfcbe727a 
            isNullResult = (IsNothing(_UnderwritingCase_8b0cf7079335460cabb7b5bbfcbe727a)) 

            currentAction = SessionTrace("4. _formData.RiskInformation = _formData.UnderwritingCase.RiskInfo...") 
 
            currentAction = SessionTrace("4.1. _formData.RiskInformation = _formData.UnderwritingCase.RiskInfo...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 

 _formData.RiskInformation = _formData.UnderwritingCase.RiskInformation 

            currentAction = SessionTrace("5. Call Function 'Amendment setup' with parameters (RiskInformation Object, Effective Date)") 
            Dim _RiskInformation_d6a36d43200a4ff89d19cb725a01cb66 As InMotionGIT.Policy.Entity.Contracts.RiskInformation
            _RiskInformation_d6a36d43200a4ff89d19cb725a01cb66 = (New InMotionGIT.PolicyManager.Services.RiskManager).AmendmentSetup(risk:=_formData.UnderwritingCase.RiskInformation, atDate:=Date.Today)

            _formData.RiskInformation = _RiskInformation_d6a36d43200a4ff89d19cb725a01cb66 
            isNullResult = (IsNothing(_RiskInformation_d6a36d43200a4ff89d19cb725a01cb66)) 

            currentAction = SessionTrace("6. Call Shared Sub 'Clear Form Errors' without parameters") 
            
        _formData.Errors.Clear()
	_formContext.Errors.Clear()
     

            currentAction = SessionTrace("7. Call Shared Function 'Retrieve Client' with parameters (Client Identification)") 
            Dim _Client_1c1220cc29c74905a3141d685b91f498 As InMotionGIT.Client.Entity.Contracts.Client 
                      If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
                      If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
                      If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 
            
      _Client_1c1220cc29c74905a3141d685b91f498 = (New InMotionGIT.Client.Services.ClientManager).Retrieve(clientId:=_formData.RiskInformation.PrimaryInsured.Client.ClientID, atDate:=Date.Today, childFilter:= "All")
      isNullResult = (IsNothing(_Client_1c1220cc29c74905a3141d685b91f498))
      isFoundData  = Not isNullResult
     
            _formData.RiskInformation.PrimaryInsured.Client = _Client_1c1220cc29c74905a3141d685b91f498 

            currentAction = SessionTrace("8. InsuredAmountForCalculation.Visible = true, InsuredAmountSelected.Visible = false") 
            currentAction = SessionTrace("8.1. InsuredAmountForCalculation.Visible = true...")
BehaviorShowControls("InsuredAmountForCalculation,Visible")
            currentAction = SessionTrace("8.2. InsuredAmountSelected.Visible = false...")
BehaviorShowControls("InsuredAmountSelected,Hidden")

            currentAction = SessionTrace("9. _formData.InsuredAmountSelected = _formData.RiskInformation.LifeLineO...") 
 
            currentAction = SessionTrace("9.1. _formData.InsuredAmountSelected = _formData.RiskInformation.LifeLineO...")

 _formData.InsuredAmountSelected = _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation 
            currentAction = SessionTrace("9.2. _formData.InsuredAmount = _formData.RiskInformation.LifeLineO...")

 _formData.InsuredAmount = _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation 
            currentAction = SessionTrace("9.3. _formData.eMail = _formData.RiskInformation.PrimaryIn...")

 _formData.eMail = _formData.RiskInformation.PrimaryInsured.Client.eMailAddressDefault 
            currentAction = SessionTrace("9.4. _formData.Currency = _formData.RiskInformation.Currency...")

 _formData.Currency = _formData.RiskInformation.Currency 

            currentAction = SessionTrace("10. _formData.ClientExistInDB = true...") 
 
            currentAction = SessionTrace("10.1. _formData.ClientExistInDB = true...")

 _formData.ClientExistInDB = true 

            currentAction = SessionTrace("11. uwcaseid.Visible = true") 
            currentAction = SessionTrace("11.1. uwcaseid.Visible = true...")
BehaviorShowControls("uwcaseid,Visible")

            currentAction = SessionTrace("12. Call 'Get the face amount of the Life policies of the insured person' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("ClientID", _formData.RiskInformation.PrimaryInsured.Client.ClientID) 
                .Add("CurrencyID", _formData.Currency) 
                .Add("Amount", _formData.AccumulatedAmount) 
                .Add("ProcessDate", _formData.RiskInformation.EffectiveDate) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("GetFaceAmountOfLifePoliciesOfTheInsuredPerson", "a240a822-d493-4dff-a365-ccb17551e006", 2, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.RiskInformation.PrimaryInsured.Client.ClientID = WorkflowOutArguments("ClientID")
                _formData.Currency = WorkflowOutArguments("CurrencyID")
                _formData.AccumulatedAmount = WorkflowOutArguments("Amount")
                _formData.RiskInformation.EffectiveDate = WorkflowOutArguments("ProcessDate")

            currentAction = SessionTrace("13. If _formData.RiskInformation.Beneficiaries Not Is Null Or Not Empty  AND _formData.RiskInformation.Beneficiaries.Count <> 0 Then") 
If Not IsNothing(_formData.RiskInformation.Beneficiaries) AndAlso _formData.RiskInformation.Beneficiaries.Count <> 0 Then

            currentAction = SessionTrace("14. _formData.BeneficiaryType = 3...") 
 
            currentAction = SessionTrace("14.1. _formData.BeneficiaryType = 3...")

 _formData.BeneficiaryType = 3 

            currentAction = SessionTrace("15. zoneBeneficiariosAsignados.Visible = true, button1.Visible = false") 
            currentAction = SessionTrace("15.1. zoneBeneficiariosAsignados.Visible = true...")
BehaviorShowControls("zoneBeneficiariosAsignados,Visible")
            currentAction = SessionTrace("15.2. button1.Visible = false...")
BehaviorShowControls("button1,Hidden")

            End If
            currentAction = SessionTrace("16. If _formData.frompanel = True Then") 
If _formData.frompanel = True Then

            currentAction = SessionTrace("17. zone17.Enabled = False, zone5.Visible = false, tab1Autenticacion.Visible = false...") 
            currentAction = SessionTrace("17.1. zone17.Enabled = False...")
BehaviorShowControls("zone17,Disabled")
            currentAction = SessionTrace("17.2. zone5.Visible = false...")
BehaviorShowControls("zone5,Hidden")
            currentAction = SessionTrace("17.3. tab1Autenticacion.Visible = false...")
BehaviorShowControls("tab1Autenticacion,Hidden")
            currentAction = SessionTrace("17.4. zone15.Visible = false...")
BehaviorShowControls("zone15,Hidden")
            currentAction = SessionTrace("17.5. zone4.Enabled = false...")
BehaviorShowControls("zone4,Disabled")
            currentAction = SessionTrace("17.6. zone7.Visible = false...")
BehaviorShowControls("zone7,Hidden")
            currentAction = SessionTrace("17.7. zoneBeneficiarios.Enabled = false...")
BehaviorShowControls("zoneBeneficiarios,Disabled")
            currentAction = SessionTrace("17.8. zone11.Visible = false...")
BehaviorShowControls("zone11,Hidden")
            currentAction = SessionTrace("17.9. zone22.Enabled = false...")
BehaviorShowControls("zone22,Disabled")
            currentAction = SessionTrace("17.10. zone19.Visible = false...")
BehaviorShowControls("zone19,Hidden")
            currentAction = SessionTrace("17.11. zonegeneral.Visible = false...")
BehaviorShowControls("zonegeneral,Hidden")
            currentAction = SessionTrace("17.12. zone20.Visible = false...")
BehaviorShowControls("zone20,Hidden")

            currentAction = SessionTrace("18. zone2.Enabled = true, zone10.Enabled = true") 
            currentAction = SessionTrace("18.1. zone2.Enabled = true...")
BehaviorShowControls("zone2,Enabled")
            currentAction = SessionTrace("18.2. zone10.Enabled = true...")
BehaviorShowControls("zone10,Enabled")

            End If
            currentAction = SessionTrace("19. _formData.ConsumerInformation.CompanyId = 1...") 
 
            currentAction = SessionTrace("19.1. _formData.ConsumerInformation.CompanyId = 1...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation.CompanyId = 1 
            currentAction = SessionTrace("19.2. _formData.ConsumerInformation.Country = 58...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation.Country = 58 
            currentAction = SessionTrace("19.3. _formData.ConsumerInformation.Security.Usercode = _formData.UsercodeBO...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 
          If IsNothing(_formData.ConsumerInformation.Security) Then
              _formData.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
          End If 

 _formData.ConsumerInformation.Security.Usercode = _formData.UsercodeBO 

            currentAction = SessionTrace("20. _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...") 
 
            currentAction = SessionTrace("20.1. _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 

 _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
            currentAction = SessionTrace("20.2. _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.eMailAddress) Then
              _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress
          End If 

 _formData.AddresseMailDLI.eMailAddress = New InMotionGIT.AddressManager.Contract.General.eMailAddress 
            currentAction = SessionTrace("20.3. _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address 

            currentAction = SessionTrace("21. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("21.1. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryInsured.Client.ClientID 
            currentAction = SessionTrace("21.2. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("21.3. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID 

            currentAction = SessionTrace("22. _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("22.1. _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerID = _formData.RiskInformation.PrimaryInsured.Client.ClientID 
            currentAction = SessionTrace("22.2. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.RecordOwnerType) Then
              _formData.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("22.3. _formData.AddresseMailDLI.Address.AddressID = _formData.RiskInformation.PrimaryIn...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.AddressID = _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID 

            currentAction = SessionTrace("23. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...") 
 
            currentAction = SessionTrace("23.1. _formData.AddresseMailDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.RecordOwnerType) Then
              _formData.AddresseMailDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddresseMailDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("23.2. _formData.AddresseMailDLI.Address.TypeOfAddress = 3...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.TypeOfAddress) Then
              _formData.AddresseMailDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddresseMailDLI.Address.TypeOfAddress = 3 
            currentAction = SessionTrace("23.3. _formData.AddresseMailDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address.UserCompany) Then
              _formData.AddresseMailDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddresseMailDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("23.4. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 6 

            currentAction = SessionTrace("24. If (_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID Is Null Or Empty  OR _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) AND ... Then") 
If (IsNothing(_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID) OrElse _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0) AndAlso (_formData.ErrorsFound = false) Then

            currentAction = SessionTrace("25. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_334a7c8db2014b789d6484cd26e04882 As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_334a7c8db2014b789d6484cd26e04882 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddresseMailDLI.Address.UserCompany, recordOwnerType:=_formData.AddresseMailDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddresseMailDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_334a7c8db2014b789d6484cd26e04882 
            isNullResult = (IsNothing(_AddressDLICollection_334a7c8db2014b789d6484cd26e04882)) 

            currentAction = SessionTrace("26. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("27. _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("27.1. _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("27.2. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("28. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddresseMailDLI_d8220e09e0ab4cb49fab79fe04675eea As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
            _AddresseMailDLI_d8220e09e0ab4cb49fab79fe04675eea = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI            (processDate:=_formData.RiskInformation.EffectiveDate, addressId:=_formData.AddresseMailDLI.Address.AddressID, internalAddressKey:=_formData.AddresseMailDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddresseMailDLI = _AddresseMailDLI_d8220e09e0ab4cb49fab79fe04675eea 
            isNullResult = (IsNothing(_AddresseMailDLI_d8220e09e0ab4cb49fab79fe04675eea)) 

            End If
            currentAction = SessionTrace("29. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...") 
 
            currentAction = SessionTrace("29.1. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
              _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1 
            currentAction = SessionTrace("29.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("29.3. _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.UserCompany) Then
              _formData.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("29.4. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 

            currentAction = SessionTrace("30. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_06e8b1e75c1e4588b52bd287a82b211a As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_06e8b1e75c1e4588b52bd287a82b211a = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_06e8b1e75c1e4588b52bd287a82b211a 
            isNullResult = (IsNothing(_AddressDLICollection_06e8b1e75c1e4588b52bd287a82b211a)) 

            currentAction = SessionTrace("31. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("32. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("32.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("32.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("33. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_9632df75e05642e89c63dbd8f8c208d6 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_9632df75e05642e89c63dbd8f8c208d6 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_9632df75e05642e89c63dbd8f8c208d6 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_9632df75e05642e89c63dbd8f8c208d6)) 

        Else 
            currentAction = SessionTrace("34. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...") 
 
            currentAction = SessionTrace("34.1. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2 

            currentAction = SessionTrace("35. Call Function 'Retrieve addresses by owner' with parameters (Process date, User company of the address, Record owner type, Record owner id, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_1f9d8b42421445ebb5845363267959dd As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_1f9d8b42421445ebb5845363267959dd = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, recordOwnerType:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType, recordOwnerId:=_formData.AddressPhysicalAddressDLI.Address.RecordOwnerID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_1f9d8b42421445ebb5845363267959dd 
            isNullResult = (IsNothing(_AddressDLICollection_1f9d8b42421445ebb5845363267959dd)) 

            currentAction = SessionTrace("36. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("37. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...") 
 
            currentAction = SessionTrace("37.1. _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).A...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.AddressID = _formData.AddressDLICollection(0).AddressID 
            currentAction = SessionTrace("37.2. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("38. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_6eae451c08a74235b69c84d6688660c5 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_6eae451c08a74235b69c84d6688660c5 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_6eae451c08a74235b69c84d6688660c5 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_6eae451c08a74235b69c84d6688660c5)) 

            End If
            End If
            End If
            currentAction = SessionTrace("39. If (_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID Not Is Null Or Not Empty  AND _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0 AND ... Then") 
If (Not IsNothing(_formData.RiskInformation.PrimaryInsured.Client.NADDRESSID) AndAlso _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID <> 0 AndAlso _formData.ErrorsFound = false) Then

            currentAction = SessionTrace("40. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_ea65a36b6b5c47299fec6b54781d43ae As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_ea65a36b6b5c47299fec6b54781d43ae = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddresseMailDLI.Address.UserCompany, addressId:=_formData.AddresseMailDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddresseMailDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_ea65a36b6b5c47299fec6b54781d43ae 
            isNullResult = (IsNothing(_AddressDLICollection_ea65a36b6b5c47299fec6b54781d43ae)) 

            currentAction = SessionTrace("41. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("42. Cotizar.Enabled = false, Acepto.Enabled = false, RiskInformationEffectiveDate.Enabled = false...") 
            currentAction = SessionTrace("42.1. Cotizar.Enabled = false...")
BehaviorShowControls("Cotizar,Disabled")
            currentAction = SessionTrace("42.2. Acepto.Enabled = false...")
BehaviorShowControls("Acepto,Disabled")
            currentAction = SessionTrace("42.3. RiskInformationEffectiveDate.Enabled = false...")
BehaviorShowControls("RiskInformationEffectiveDate,Disabled")
            currentAction = SessionTrace("42.4. PaymentFrequency.Enabled = false...")
BehaviorShowControls("PaymentFrequency,Disabled")

            currentAction = SessionTrace("43. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("43.1. _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddresseMailDLI) Then
              _formData.AddresseMailDLI = New InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
          End If 
          If IsNothing(_formData.AddresseMailDLI.Address) Then
              _formData.AddresseMailDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddresseMailDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("44. Call Function 'Retrieve an email address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddresseMailDLI_e96ae14d054845f19b711c976d511ecd As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI 
            _AddresseMailDLI_e96ae14d054845f19b711c976d511ecd = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveeMailDLI            (processDate:=_formData.RiskInformation.EffectiveDate, addressId:=_formData.AddresseMailDLI.Address.AddressID, internalAddressKey:=_formData.AddresseMailDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddresseMailDLI = _AddresseMailDLI_e96ae14d054845f19b711c976d511ecd 
            isNullResult = (IsNothing(_AddresseMailDLI_e96ae14d054845f19b711c976d511ecd)) 

            End If
            currentAction = SessionTrace("45. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...") 
 
            currentAction = SessionTrace("45.1. _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress) Then
              _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfAddress
          End If 

 _formData.AddressPhysicalAddressDLI.Address.TypeOfAddress = 1 
            currentAction = SessionTrace("45.2. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 1 
            currentAction = SessionTrace("45.3. _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.UserCompany) Then
              _formData.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
          End If 

 _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1 
            currentAction = SessionTrace("45.4. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 

            currentAction = SessionTrace("46. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_86ee3ab2e4774d01857d4c750785996e As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_86ee3ab2e4774d01857d4c750785996e = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_86ee3ab2e4774d01857d4c750785996e 
            isNullResult = (IsNothing(_AddressDLICollection_86ee3ab2e4774d01857d4c750785996e)) 

            currentAction = SessionTrace("47. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("48. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("48.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("49. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_73398e5cd2a84fb18e61b786a504db9c As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_73398e5cd2a84fb18e61b786a504db9c = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_73398e5cd2a84fb18e61b786a504db9c 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_73398e5cd2a84fb18e61b786a504db9c)) 

        Else 
            currentAction = SessionTrace("50. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...") 
 
            currentAction = SessionTrace("50.1. _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = New InMotionGIT.AddressManager.Contract.Enumerations.EnumTypeOfPhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress = 2 

            currentAction = SessionTrace("51. Call Function 'Retrieve addresses by id' with parameters (Process date, User company of the address, Id value of the address, Consumer Object/pass as null until completed, Type of address, Type of physical address)") 
            Dim _AddressDLICollection_0b98d0c596b940638c0b46af58b6969e As InMotionGIT.AddressManager.Contract.General.AddressDLICollection 
            _AddressDLICollection_0b98d0c596b940638c0b46af58b6969e = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrieveAddressesByIdDLI            (processDate:=_formData.RiskInformation.EffectiveDate, userCompany:=_formData.AddressPhysicalAddressDLI.Address.UserCompany, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, consumer:=_formData.ConsumerInformation, typeOfAddress:=_formData.AddressPhysicalAddressDLI.Address.TypeOfAddress, typeOfPhysicalAddress:=_formData.AddressPhysicalAddressDLI.PhysicalAddress.TypeOfPhysicalAddress) 
             
            _formData.AddressDLICollection = _AddressDLICollection_0b98d0c596b940638c0b46af58b6969e 
            isNullResult = (IsNothing(_AddressDLICollection_0b98d0c596b940638c0b46af58b6969e)) 

            currentAction = SessionTrace("52. If _formData.AddressDLICollection.Count <> 0 Then") 
If _formData.AddressDLICollection.Count <> 0 Then

            currentAction = SessionTrace("53. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...") 
 
            currentAction = SessionTrace("53.1. _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).I...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.InternalAddressKey = _formData.AddressDLICollection(0).InternalAddressKey 

            currentAction = SessionTrace("54. Call Function 'Retrieve a physical address' with parameters (Process date, Id value of the address, Internal and unique key of the address, Consumer Object/pass as null until completed)") 
            Dim _AddressPhysicalAddressDLI_69c2f5f6c9cf4277b36ba8881f1744e3 As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            _AddressPhysicalAddressDLI_69c2f5f6c9cf4277b36ba8881f1744e3 = (New InMotionGIT.AddressManager.Proxy.AddressManager.PublicClient).RetrievePhysicalAddressDLI            (processDate:=Date.Today, addressId:=_formData.AddressPhysicalAddressDLI.Address.AddressID, internalAddressKey:=_formData.AddressPhysicalAddressDLI.Address.InternalAddressKey, consumer:=_formData.ConsumerInformation) 
             
            _formData.AddressPhysicalAddressDLI = _AddressPhysicalAddressDLI_69c2f5f6c9cf4277b36ba8881f1744e3 
            isNullResult = (IsNothing(_AddressPhysicalAddressDLI_69c2f5f6c9cf4277b36ba8881f1744e3)) 

            End If
            End If
            End If

                        
                        currentAction = String.Empty
                         
                    Catch ex As Exception
                        InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
						_formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

                        If Request.QueryString("debug").IsNotEmpty Then
                            FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                            FormMessageLabel.ForeColor = Drawing.Color.Black
                            FormMessageLabel.Font.Bold = True
                            MessageTable.Visible = True
                        End If
                        
                    Finally                     
                        If _formData.Errors.Count > 0 Then
                            SetErrors(_formData.Errors)
                        End If
                        
                        If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                            If Page.IsCallback Then
                                DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                            Else
                                Response.ClearHeaders()
                                Response.ClearContent()
                                Response.Redirect(_webTransfer)
                            End If
                        End If
                   End Try
               End Sub
    Private Sub ExecuteActionsInitializationForm()
                    Dim currentAction As String = SessionTrace("ActionsInitializationForm")
                    
                    Try                          
                        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
                        Dim messageAction As String = String.Empty
                        Dim lastURL As String = String.Empty
                        Dim isNullResult As Boolean = True 
                        Dim isFoundData As Boolean  = False 
                        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
                        
                        ParametersToDictionary(parametersDictionary)
                        Dim WorkflowInArguments As New Dictionary(Of String, Object) 
 Dim WorkflowOutArguments As IDictionary(Of String, Object) 
 Dim ProductMasterLocal As InMotionGIT.Product.Entity.Contracts.ProductMaster
 
                        With parametersDictionary
    .Add("ProductMasterLocal", ProductMasterLocal)
End With

                                    currentAction = SessionTrace("1. _formData.PlanillaModificacion = 'NNCotizacionMiVidaValeEdit'...") 
 
            currentAction = SessionTrace("1.1. _formData.PlanillaModificacion = 'NNCotizacionMiVidaValeEdit'...")

 _formData.PlanillaModificacion = "NNCotizacionMiVidaValeEdit" 
            currentAction = SessionTrace("1.2. _formData.PlanillaVisualizacion = 'NNCotizacionMiVidaValeView'...")

 _formData.PlanillaVisualizacion = "NNCotizacionMiVidaValeView" 

            currentAction = SessionTrace("2. If _formData.StatusRun <> true Then") 
If _formData.StatusRun <> true Then

parametersDictionary("ProductMasterLocal") = ProductMasterLocal
            currentAction = SessionTrace("3. The message 'You are not authoriz...' will displayed as 'Splash'") 
            messageAction = "You are not authorized to execute this transaction" 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            NNCotizacionMiVidaValeIITablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 

            currentAction = SessionTrace("4. _formData.ClienteIndicado = _formData.RiskInformation.PrimaryIn...") 
 
            currentAction = SessionTrace("4.1. _formData.ClienteIndicado = _formData.RiskInformation.PrimaryIn...")

 _formData.ClienteIndicado = _formData.RiskInformation.PrimaryInsured.Client.ClientID 

            End If
            currentAction = SessionTrace("5. _formData.RecoveryCaseIndicator = false...") 
 
            currentAction = SessionTrace("5.1. _formData.RecoveryCaseIndicator = false...")

 _formData.RecoveryCaseIndicator = false 

            currentAction = SessionTrace("6. _formData.InRuleErros = False...") 
 
            currentAction = SessionTrace("6.1. _formData.InRuleErros = False...")

 _formData.InRuleErros = False 

            currentAction = SessionTrace("7. _formData.SendMailIndicator = True...") 
 
            currentAction = SessionTrace("7.1. _formData.SendMailIndicator = True...")

 _formData.SendMailIndicator = True 

            currentAction = SessionTrace("8. If _formData.uwcaseid <> '0' AND _formData.uwcaseid Not Is Null Or Not Empty  Then") 
If _formData.uwcaseid <> "0" AndAlso Not IsNothing(_formData.uwcaseid) Then

            currentAction = SessionTrace("9. _formData.RecoveryCaseIndicator = true...") 
 
            currentAction = SessionTrace("9.1. _formData.RecoveryCaseIndicator = true...")

 _formData.RecoveryCaseIndicator = true 

            currentAction = SessionTrace("10. Call 'Retrieve Case Information for Request of policy' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("uwcaseid", _formData.uwcaseid) 
                .Add("ClientName", _formData.RiskInformation.PrimaryInsured.Client.CompleteClientName) 
                .Add("StatusCase", _formData.StatusCase) 
                .Add("RiskInformation", _formData.RiskInformation) 
                .Add("Identifier", "RequestLifePolicy") 
                .Add("context", _formContext) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("RetrieveCaseInformationRequestPolicy", "3967f9a8-6bc2-41d6-8672-ad0ede452cf2", 3, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.uwcaseid = WorkflowOutArguments("uwcaseid")
                _formData.RiskInformation.PrimaryInsured.Client.CompleteClientName = WorkflowOutArguments("ClientName")
                _formData.StatusCase = WorkflowOutArguments("StatusCase")
                _formData.RiskInformation = WorkflowOutArguments("RiskInformation")

            currentAction = SessionTrace("11. Call Shared Function 'Retrieve Client' with parameters (Client Identification)") 
            Dim _Client_559d9590d8d849c194981ef3e0abdf7a As InMotionGIT.Client.Entity.Contracts.Client 
                      If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
                      If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
                      If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 
            
      _Client_559d9590d8d849c194981ef3e0abdf7a = (New InMotionGIT.Client.Services.ClientManager).Retrieve(clientId:=_formData.RiskInformation.PrimaryInsured.Client.ClientID, atDate:=Date.Today, childFilter:= "All")
      isNullResult = (IsNothing(_Client_559d9590d8d849c194981ef3e0abdf7a))
      isFoundData  = Not isNullResult
     
            _formData.RiskInformation.PrimaryInsured.Client = _Client_559d9590d8d849c194981ef3e0abdf7a 

            currentAction = SessionTrace("12. _formData.InsuredAmountSelected = _formData.RiskInformation.LifeLineO...") 
 
            currentAction = SessionTrace("12.1. _formData.InsuredAmountSelected = _formData.RiskInformation.LifeLineO...")

 _formData.InsuredAmountSelected = _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation 
            currentAction = SessionTrace("12.2. _formData.InsuredAmount = _formData.RiskInformation.LifeLineO...")

 _formData.InsuredAmount = _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation 
            currentAction = SessionTrace("12.3. _formData.eMail = _formData.RiskInformation.PrimaryIn...")

 _formData.eMail = _formData.RiskInformation.PrimaryInsured.Client.eMailAddressDefault 
            currentAction = SessionTrace("12.4. _formData.Currency = _formData.RiskInformation.Currency...")

 _formData.Currency = _formData.RiskInformation.Currency 

            currentAction = SessionTrace("13. Acepto.Visible = true, Coverages.Visible = true") 
            currentAction = SessionTrace("13.1. Acepto.Visible = true...")
BehaviorShowControls("Acepto,Visible")
            currentAction = SessionTrace("13.2. Coverages.Visible = true...")
BehaviorShowControls("Coverages,Visible")

            currentAction = SessionTrace("14. _formData.ClientExistInDB = true...") 
 
            currentAction = SessionTrace("14.1. _formData.ClientExistInDB = true...")

 _formData.ClientExistInDB = true 

            currentAction = SessionTrace("15. uwcaseid.Visible = true") 
            currentAction = SessionTrace("15.1. uwcaseid.Visible = true...")
BehaviorShowControls("uwcaseid,Visible")

            currentAction = SessionTrace("16. Call Function 'Retrieve Product Master' with parameters (Line of Business, Product Id, Effective Date)") 
            Dim _ProductMasterLocal_02b0b0a00b3a4318bcd4456cb5086edb As InMotionGIT.Product.Entity.Contracts.ProductMaster 
            _ProductMasterLocal_02b0b0a00b3a4318bcd4456cb5086edb = (New InMotionGIT.Product.Services.ProductManager).RetrieveWithCaching            (lineOfBusiness:=_formData.UnderwritingCase.LineOfBusiness, productId:=_formData.UnderwritingCase.Product, atDate:=Date.Today) 
             
            ProductMasterLocal = _ProductMasterLocal_02b0b0a00b3a4318bcd4456cb5086edb 
            isNullResult = (IsNothing(_ProductMasterLocal_02b0b0a00b3a4318bcd4456cb5086edb)) 

            currentAction = SessionTrace("17. _formData.ProductMasterDescription = ProductMasterLocal.Description...") 
 
            currentAction = SessionTrace("17.1. _formData.ProductMasterDescription = ProductMasterLocal.Description...")

 _formData.ProductMasterDescription = ProductMasterLocal.Description 

            currentAction = SessionTrace("18. _formData.MesTarjeta = _formData.RiskInformation.Automatic...") 
 
            currentAction = SessionTrace("18.1. _formData.MesTarjeta = _formData.RiskInformation.Automatic...")

 _formData.MesTarjeta = _formData.RiskInformation.AutomaticPaymentPolicy.Month 
            currentAction = SessionTrace("18.2. _formData.AnoTarjeta = _formData.RiskInformation.Automatic...")

 _formData.AnoTarjeta = _formData.RiskInformation.AutomaticPaymentPolicy.Year 

        Else 
            currentAction = SessionTrace("19. Coverages.Visible = false, uwcaseid.Visible = false") 
            currentAction = SessionTrace("19.1. Coverages.Visible = false...")
BehaviorShowControls("Coverages,Hidden")
            currentAction = SessionTrace("19.2. uwcaseid.Visible = false...")
BehaviorShowControls("uwcaseid,Hidden")

            End If
            currentAction = SessionTrace("20. Enable 'zonegeneral' control") 
        BehaviorShowControls("zonegeneral,Enabled")
            currentAction = SessionTrace("21. Hide 'Detalle de beneficiarios' control") 
        BehaviorShowControls("ShowBeneficiary,Hidden")
            currentAction = SessionTrace("22. Hide 'Suma asegurada' control") 
        BehaviorShowControls("InsuredAmountForCalculation,Hidden")
            currentAction = SessionTrace("23. _formData.AccumulatedAmount = 0...") 
 
            currentAction = SessionTrace("23.1. _formData.AccumulatedAmount = 0...")

 _formData.AccumulatedAmount = 0 

            currentAction = SessionTrace("24. If _formData.ClientExistInDB = True Then") 
If _formData.ClientExistInDB = True Then

            currentAction = SessionTrace("25. FirstName.Enabled = false, LastName.Enabled = false, LastName2.Enabled = false...") 
            currentAction = SessionTrace("25.1. FirstName.Enabled = false...")
BehaviorShowControls("FirstName,Disabled")
            currentAction = SessionTrace("25.2. LastName.Enabled = false...")
BehaviorShowControls("LastName,Disabled")
            currentAction = SessionTrace("25.3. LastName2.Enabled = false...")
BehaviorShowControls("LastName2,Disabled")
            currentAction = SessionTrace("25.4. zone10.Enabled = true...")
BehaviorShowControls("zone10,Enabled")
            currentAction = SessionTrace("25.5. ClientID.Enabled = false...")
BehaviorShowControls("ClientID,Disabled")

            currentAction = SessionTrace("26. ClientID.Enabled = false") 
            currentAction = SessionTrace("26.1. ClientID.Enabled = false...")
BehaviorShowControls("ClientID,Disabled")

            currentAction = SessionTrace("27. Call 'Get the face amount of the Life policies of the insured person' workflow in Synchronous mode with tracking") 
            WorkflowInArguments = New Dictionary(Of String, Object)
            With WorkflowInArguments
                .Add("context", _formContext) 
                .Add("ClientID", _formData.RiskInformation.PrimaryInsured.Client.ClientID) 
                .Add("CurrencyID", _formData.Currency) 
                .Add("Amount", _formData.AccumulatedAmount) 
                .Add("ProcessDate", _formData.RiskInformation.EffectiveDate) 
            End With
            WorkflowOutArguments = InMotionGIT.Workflow.Support.Runtime.DoWorkFromForm("GetFaceAmountOfLifePoliciesOfTheInsuredPerson", "a240a822-d493-4dff-a365-ccb17551e006", 2, WorkflowInArguments, True, True, Me.AppRelativeVirtualPath, _formData.InternalId)
             currentAction += " 'Mapping Outputs'" 
                _formData.RiskInformation.PrimaryInsured.Client.ClientID = WorkflowOutArguments("ClientID")
                _formData.Currency = WorkflowOutArguments("CurrencyID")
                _formData.AccumulatedAmount = WorkflowOutArguments("Amount")
                _formData.RiskInformation.EffectiveDate = WorkflowOutArguments("ProcessDate")

            currentAction = SessionTrace("28. _formData.CancelledPoliciesQuantity = 0...") 
 
            currentAction = SessionTrace("28.1. _formData.CancelledPoliciesQuantity = 0...")

 _formData.CancelledPoliciesQuantity = 0 

currentAction = SessionTrace("29. SELECT CERTIFICAT.SCERTYPE, CERTIFICAT.NBRANCH, CERTIFICAT.NPRODUCT FROM CERTIFICAT... WHERE CERTIFICAT.SCERTYPE = 2 AND CERTIFICAT.SSTATUSVA <> 3 AND CERTIFICAT.NNULLCODE <> 2 AND )") 
            isFoundData = False 
            With New DataManagerFactory("SELECT DISTINCT COUNT(CERTIFICAT.NPOLICY) NPOLICY FROM CERTIFICAT CERTIFICAT JOIN ROLES ROLES ON ROLES.SCERTYPE = CERTIFICAT.SCERTYPE  AND ROLES.NBRANCH = CERTIFICAT.NBRANCH  AND ROLES.NPRODUCT = CERTIFICAT.NPRODUCT  AND ROLES.NPOLICY = CERTIFICAT.NPOLICY  AND ROLES.NCERTIF = CERTIFICAT.NCERTIF  WHERE CERTIFICAT.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND ROLES.NROLE = 2 AND ROLES.SCLIENT = @:ROLESSCLIENT3 AND (CERTIFICAT.NNULLCODE <> 2 AND CERTIFICAT.NNULLCODE <> 3 AND CERTIFICAT.NNULLCODE <> 0 AND CERTIFICAT.NNULLCODE IS NOT NULL)", "CERTIFICAT", "Linked.LatCombined")
             .AddParameter("ROLESSCLIENT3", DbType.AnsiStringFixedLength, 14, (_formData.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), _formData.RiskInformation.PrimaryInsured.Client.ClientID)
 
             _formData.CancelledPoliciesQuantity = .QueryExecuteScalarToInteger()  
        End With

            currentAction = SessionTrace("30. _formData.OtherPoliciesSameRiskQuantity = 0...") 
 
            currentAction = SessionTrace("30.1. _formData.OtherPoliciesSameRiskQuantity = 0...")

 _formData.OtherPoliciesSameRiskQuantity = 0 

currentAction = SessionTrace("31. SELECT CERTIFICAT.SCERTYPE, CERTIFICAT.NBRANCH, CERTIFICAT.NPRODUCT FROM CERTIFICAT... WHERE CERTIFICAT.SCERTYPE = 2 AND CERTIFICAT.SSTATUSVA <> 3 AND CERTIFICAT.NBRANCH = _formData.RiskInformation.LineOfBusiness AND )") 
            isFoundData = False 
            With New DataManagerFactory("SELECT DISTINCT COUNT(CERTIFICAT.NPOLICY) NPOLICY FROM CERTIFICAT CERTIFICAT JOIN ROLES ROLES ON ROLES.SCERTYPE = CERTIFICAT.SCERTYPE  AND ROLES.NBRANCH = CERTIFICAT.NBRANCH  AND ROLES.NPRODUCT = CERTIFICAT.NPRODUCT  AND ROLES.NPOLICY = CERTIFICAT.NPOLICY  AND ROLES.NCERTIF = CERTIFICAT.NCERTIF  WHERE CERTIFICAT.SCERTYPE = '2' AND CERTIFICAT.SSTATUSVA <> '3' AND ROLES.NROLE = 2 AND ROLES.SCLIENT = @:ROLESSCLIENT3 AND CERTIFICAT.NBRANCH = @:CERTIFICATNBRANCH4 AND CERTIFICAT.NNULLCODE IS NULL", "CERTIFICAT", "Linked.LatCombined")
             .AddParameter("ROLESSCLIENT3", DbType.AnsiStringFixedLength, 14, (_formData.RiskInformation.PrimaryInsured.Client.ClientID = String.Empty), _formData.RiskInformation.PrimaryInsured.Client.ClientID)
.AddParameter("CERTIFICATNBRANCH4", DbType.Int32, 5, False, _formData.RiskInformation.LineOfBusiness)
 
             _formData.OtherPoliciesSameRiskQuantity = .QueryExecuteScalarToInteger()  
        End With

            currentAction = SessionTrace("32. If (_formData.InRuleErros = True) Then") 
If (_formData.InRuleErros = True) Then

parametersDictionary("ProductMasterLocal") = ProductMasterLocal
            currentAction = SessionTrace("33. The message 'Existe(n) poliza(s) ...' will displayed as 'Popup'") 
            messageAction = "Existe(n) poliza(s) anulada(s) para el cliente." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.FrontOffice.Proxy.Helpers.Email.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 

            End If
            End If
            currentAction = SessionTrace("34. If _formData.ClientExistInDB = false Then") 
If _formData.ClientExistInDB = false Then

            currentAction = SessionTrace("35. _formData.RiskInformation.PrimaryInsured.Client = Nothing...") 
 
            currentAction = SessionTrace("35.1. _formData.RiskInformation.PrimaryInsured.Client = Nothing...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client = Nothing 

            currentAction = SessionTrace("36. ClientID.Enabled = true") 
            currentAction = SessionTrace("36.1. ClientID.Enabled = true...")
BehaviorShowControls("ClientID,Enabled")

            currentAction = SessionTrace("37. _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0...") 
 
            currentAction = SessionTrace("37.1. _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.NADDRESSID = 0 

        Else 
            currentAction = SessionTrace("38. Call Shared Function 'Retrieve Client' with parameters (Client Identification)") 
            Dim _ClientIncluded_3e87e10f270847648c7116a0f9a53a40 As InMotionGIT.Client.Entity.Contracts.Client 
            
      _ClientIncluded_3e87e10f270847648c7116a0f9a53a40 = (New InMotionGIT.Client.Services.ClientManager).Retrieve(clientId:=_formData.RiskInformation.PrimaryInsured.Client.ClientID, atDate:=Date.Today, childFilter:= "All")
      isNullResult = (IsNothing(_ClientIncluded_3e87e10f270847648c7116a0f9a53a40))
      isFoundData  = Not isNullResult
     
            _formData.ClientIncluded = _ClientIncluded_3e87e10f270847648c7116a0f9a53a40 

            currentAction = SessionTrace("39. Cotizar.Enabled = true") 
            currentAction = SessionTrace("39.1. Cotizar.Enabled = true...")
BehaviorShowControls("Cotizar,Enabled")

            End If
            currentAction = SessionTrace("40. If _formData.ClientExistInDB = true Then") 
If _formData.ClientExistInDB = true Then

            currentAction = SessionTrace("41. If _formData.RiskInformation.PrimaryInsured.Client.BirthDate Is Null Or Empty '' Then") 
If IsNothing(_formData.RiskInformation.PrimaryInsured.Client.BirthDate) OrElse _formData.RiskInformation.PrimaryInsured.Client.BirthDate = Date.MinValue Then

            currentAction = SessionTrace("42. Enable 'Fecha de nacimiento' control") 
        BehaviorShowControls("BirthDate,Enabled")
            currentAction = SessionTrace("43. _formData.RiskInformation.PrimaryInsured.Client.IsDirty = True...") 
 
            currentAction = SessionTrace("43.1. _formData.RiskInformation.PrimaryInsured.Client.IsDirty = True...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.IsDirty = True 

        Else 
            currentAction = SessionTrace("44. BirthDate.Enabled = false") 
            currentAction = SessionTrace("44.1. BirthDate.Enabled = false...")
BehaviorShowControls("BirthDate,Disabled")

            End If
            End If
            currentAction = SessionTrace("45. If _formData.ClientExistInDB = true Then") 
If _formData.ClientExistInDB = true Then

            currentAction = SessionTrace("46. If _formData.RiskInformation.PrimaryInsured.Client.Gender Is Null Or Empty '' OR _formData.RiskInformation.PrimaryInsured.Client.Gender = 3 Then") 
If String.IsNullOrEmpty(_formData.RiskInformation.PrimaryInsured.Client.Gender) OrElse _formData.RiskInformation.PrimaryInsured.Client.Gender = 3 Then

            currentAction = SessionTrace("47. Enable 'Sexo' control") 
        BehaviorShowControls("Gender,Enabled")
            currentAction = SessionTrace("48. _formData.RiskInformation.PrimaryInsured.Client.IsDirty = True...") 
 
            currentAction = SessionTrace("48.1. _formData.RiskInformation.PrimaryInsured.Client.IsDirty = True...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured) Then
              _formData.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
          End If 
          If IsNothing(_formData.RiskInformation.PrimaryInsured.Client) Then
              _formData.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
          End If 

 _formData.RiskInformation.PrimaryInsured.Client.IsDirty = True 

        Else 
            currentAction = SessionTrace("49. Gender.Enabled = false") 
            currentAction = SessionTrace("49.1. Gender.Enabled = false...")
BehaviorShowControls("Gender,Disabled")

            End If
            End If
            currentAction = SessionTrace("50. If _formData.PlanType = 1 Then") 
If _formData.PlanType = 1 Then

            currentAction = SessionTrace("51. Show 'InsuredAmountSelected' control") 
        BehaviorShowControls("InsuredAmountSelected,Visible")
            currentAction = SessionTrace("52. _formData.InsuredAmountSelected = 10000...") 
 
            currentAction = SessionTrace("52.1. _formData.InsuredAmountSelected = 10000...")

 _formData.InsuredAmountSelected = 10000 

            currentAction = SessionTrace("53. _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = 10000...") 
 
            currentAction = SessionTrace("53.1. _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = 10000...")
          If IsNothing(_formData.RiskInformation) Then
              _formData.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
          End If 
          If IsNothing(_formData.RiskInformation.LifeLineOfBusiness) Then
              _formData.RiskInformation.LifeLineOfBusiness = New InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness
          End If 

 _formData.RiskInformation.LifeLineOfBusiness.InsuredAmountForCalculation = 10000 

            currentAction = SessionTrace("54. Hide 'Suma asegurada' control") 
        BehaviorShowControls("InsuredAmountForCalculation,Hidden")
        Else 
            currentAction = SessionTrace("55. Show 'Suma asegurada' control") 
        BehaviorShowControls("InsuredAmountForCalculation,Visible")
            currentAction = SessionTrace("56. Hide 'InsuredAmountSelected' control") 
        BehaviorShowControls("InsuredAmountSelected,Hidden")
            End If
            currentAction = SessionTrace("57. _formData.InRuleErros = False...") 
 
            currentAction = SessionTrace("57.1. _formData.InRuleErros = False...")

 _formData.InRuleErros = False 

            currentAction = SessionTrace("58. _formData.FormStatus = 0...") 
 
            currentAction = SessionTrace("58.1. _formData.FormStatus = 0...")

 _formData.FormStatus = 0 

            currentAction = SessionTrace("59. _formData.OnLinePrint = 0...") 
 
            currentAction = SessionTrace("59.1. _formData.OnLinePrint = 0...")

 _formData.OnLinePrint = 0 

            currentAction = SessionTrace("60. _formData.OnLinePrintIndicator = true...") 
 
            currentAction = SessionTrace("60.1. _formData.OnLinePrintIndicator = true...")

 _formData.OnLinePrintIndicator = true 

            currentAction = SessionTrace("61. _formData.PreviousPayment = false...") 
 
            currentAction = SessionTrace("61.1. _formData.PreviousPayment = false...")

 _formData.PreviousPayment = false 

            currentAction = SessionTrace("62. _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Cont...") 
 
            currentAction = SessionTrace("62.1. _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 

 _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 
            currentAction = SessionTrace("62.2. _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address 
            currentAction = SessionTrace("62.3. _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Cont...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.PhysicalAddress) Then
              _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress
          End If 

 _formData.AddressPhysicalAddressDLI.PhysicalAddress = New InMotionGIT.AddressManager.Contract.General.PhysicalAddress 

            currentAction = SessionTrace("63. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...") 
 
            currentAction = SessionTrace("63.1. _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address.RecordOwnerType) Then
              _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = New InMotionGIT.Common.Contracts.Enumerations.EnumRecordOwnerType
          End If 

 _formData.AddressPhysicalAddressDLI.Address.RecordOwnerType = 1 
            currentAction = SessionTrace("63.2. _formData.AddressPhysicalAddressDLI.Address.EffectiveDate = _formData.RiskInformation.Effective...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.EffectiveDate = _formData.RiskInformation.EffectiveDate 

            currentAction = SessionTrace("64. _formData.AddressPhysicalAddressDLI.Address.DateOfLastSuccesfulContactAtThisAddress = today...") 
 
            currentAction = SessionTrace("64.1. _formData.AddressPhysicalAddressDLI.Address.DateOfLastSuccesfulContactAtThisAddress = today...")
          If IsNothing(_formData.AddressPhysicalAddressDLI) Then
              _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
          End If 
          If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
              _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
          End If 

 _formData.AddressPhysicalAddressDLI.Address.DateOfLastSuccesfulContactAtThisAddress = today 

            currentAction = SessionTrace("65. _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Pr...") 
 
            currentAction = SessionTrace("65.1. _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Pr...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation 
            currentAction = SessionTrace("65.2. _formData.ConsumerInformation.CompanyId = 1...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 

 _formData.ConsumerInformation.CompanyId = 1 
            currentAction = SessionTrace("65.3. _formData.ConsumerInformation.Security.Usercode = _formData.UsercodeBO...")
          If IsNothing(_formData.ConsumerInformation) Then
              _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
          End If 
          If IsNothing(_formData.ConsumerInformation.Security) Then
              _formData.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
          End If 

 _formData.ConsumerInformation.Security.Usercode = _formData.UsercodeBO 

            currentAction = SessionTrace("66. _formData.VerificarCuestionariosIndicador = true...") 
 
            currentAction = SessionTrace("66.1. _formData.VerificarCuestionariosIndicador = true...")

 _formData.VerificarCuestionariosIndicador = true 

            currentAction = SessionTrace("67. If _formData.AccumulatedAmount <> 0 AND _formData.AccumulatedAmount Not Is Null Or Not Empty  Then") 
If _formData.AccumulatedAmount <> 0 AndAlso Not IsNothing(_formData.AccumulatedAmount) Then

            currentAction = SessionTrace("68. zone3Cumulo.Visible = true") 
            currentAction = SessionTrace("68.1. zone3Cumulo.Visible = true...")
BehaviorShowControls("zone3Cumulo,Visible")

        Else 
            currentAction = SessionTrace("69. zone3Cumulo.Visible = false") 
            currentAction = SessionTrace("69.1. zone3Cumulo.Visible = false...")
BehaviorShowControls("zone3Cumulo,Hidden")

            End If
            currentAction = SessionTrace("70. If _formData.RiskInformation.Beneficiaries Not Is Null Or Not Empty  AND _formData.RiskInformation.Beneficiaries.Count <> 0 Then") 
If Not IsNothing(_formData.RiskInformation.Beneficiaries) AndAlso _formData.RiskInformation.Beneficiaries.Count <> 0 Then

            currentAction = SessionTrace("71. zoneBeneficiariosAsignados.Visible = True") 
            currentAction = SessionTrace("71.1. zoneBeneficiariosAsignados.Visible = True...")
BehaviorShowControls("zoneBeneficiariosAsignados,Visible")

            currentAction = SessionTrace("72. BeneficiaryType.Value = 3") 
            currentAction = SessionTrace("72.1. BeneficiaryType.Value = 3...")
BeneficiaryType.Value = "3"

            currentAction = SessionTrace("73. _formData.BeneficiaryType = 3...") 
 
            currentAction = SessionTrace("73.1. _formData.BeneficiaryType = 3...")

 _formData.BeneficiaryType = 3 

            End If

                        
                        currentAction = String.Empty
                         
                    Catch ex As Exception
                        InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
						_formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

                        If Request.QueryString("debug").IsNotEmpty Then
                            FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                            FormMessageLabel.ForeColor = Drawing.Color.Black
                            FormMessageLabel.Font.Bold = True
                            MessageTable.Visible = True
                        End If
                        
                    Finally                     
                        If _formData.Errors.Count > 0 Then
                            SetErrors(_formData.Errors)
                        End If
                        
                        If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                            If Page.IsCallback Then
                                DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                            Else
                                Response.ClearHeaders()
                                Response.ClearContent()
                                Response.Redirect(_webTransfer)
                            End If
                        End If
                   End Try
               End Sub
    


    
#End Region

#Region "Storage Data Methods"

    Private Sub StoreFormInformation()
      If Not IsNothing(_formData) Then

            If _foundData Then
                UpdateStorageData()
            Else
                InsertStorageData()
            End If
       End If
End Sub

    Private Function RetrieveFormInformation() As Boolean
        Dim result As Boolean = False
        Dim records As DataTable

        With New DataManagerFactory("SELECT Content FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)
            records = .QueryExecuteToTable(True)
        End With

        If records.Rows.Count > 0 Then
            result = True            
            _formData = Serialize.Deserialize(Of NNCotizacionMiVidaValeIIParameter)(records.Rows(0).Item("Content"))
        End If
        
        Return result
    End Function

    Private Sub InsertStorageData()
        With New DataManagerFactory("INSERT INTO FrontOffice.DocumentCache (FormId, ModelId, UserId, Page, Content, CreationDate, UpdateDate) VALUES(@:FormId, @:ModelId, @:UserId, @:Page, @:Content, @:CreationDate, @:UpdateDate)",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)
            .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "a3ba34d0-72f9-4959-9968-42a1cc072336")
            .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserName)
            .AddParameter("Page", DbType.AnsiString, 255, False, Me.AppRelativeVirtualPath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of NNCotizacionMiVidaValeIIParameter)(_formData))
            .AddParameter("CreationDate", DbType.DateTime, 20, False, Now)
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)

            .CommandExecute()
        End With
    End Sub

    Private Sub UpdateStorageData()
        With New DataManagerFactory("UPDATE FrontOffice.DocumentCache SET ModelId = @:ModelId, UserId = @:UserId, Page = @:Page, Content = @:Content, UpdateDate = @:UpdateDate WHERE FormId = @:FormId",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "a3ba34d0-72f9-4959-9968-42a1cc072336")
            .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserName)
            .AddParameter("Page", DbType.AnsiString, 255, False, Me.AppRelativeVirtualPath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of NNCotizacionMiVidaValeIIParameter)(_formData))
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)

            .CommandExecute()
        End With
    End Sub

#End Region




End Class

<Serializable()>
Public Class NNCotizacionMiVidaValeIIParameter
    Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of  NNCotizacionMiVidaValeIIParameter)

    ' Methods
    Public Sub New()
        MyBase.New()
    End Sub

    ' Properties
    Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
    Public Property uwcaseid As Int64
    Public Property uwreqid As Int64
    Public Property InsuredAmount As Decimal
    Public Property InsuredAmountSelected As Decimal
    Public Property PlanType As Int32
    Public Property ClientExistInDB As Boolean
    Public Property eMail As String
    Public Property Currency As Int32
    Public Property Age As Int32
    Public Property QuestionnairesAvailable As InMotionGIT.Questionnaires.QuestionnairesAvailable
    Public Property ProducerClientID As String
    Public Property BeneficiaryType As Int32
    Public Property SendMailIndicator As Boolean
    Public Property MailToProducerIndicator As Boolean
    Public Property InRuleErros As Boolean
    Public Property AccumulatedAmount As Decimal
    Public Property CancelledPoliciesQuantity As Int32
    Public Property OtherPoliciesSameRiskQuantity As Int32
    Public Property ConsumerInformation As InMotionGIT.Common.Contracts.Process.ConsumerInformation
    Public Property OnLinePrintIndicator As Boolean
    Public Property OnLinePrintResult As Int32
    Public Property PolicyDocument As String
    Public Property ErrorsFound As Boolean
    Public Property ReportURL As String
    Public Property FormStatus As Int32
    Public Property OnLinePrint As Int32
    Public Property StatusRun As Boolean
    Public Property StatusCase As Int32
    Public Property RecoveryCaseIndicator As Boolean
    Public Property AnswerDiabetes As String
    Public Property AnswerHeart As String
    Public Property AnswerCancer As String
    Public Property PaymentMethod As Int32
    Public Property ProductMasterDescription As String
    Public Property AddressPhysicalAddressDLI As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
    Public Property PreviousPayment As Boolean
    Public Property ClienteIndicado As String
    Public Property ServiceResultData As InMotionGIT.Common.Contracts.ServiceResultData
    Public Property CompleteAddress As String
    Public Property AddresseMailDLI As InMotionGIT.AddressManager.Contract.Models.AddresseMailDLI
    Public Property AddressDLICollection As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
    Public Property VerificarCuestionariosIndicador As Boolean
    Public Property PlanillaModificacion As String
    Public Property PlanillaVisualizacion As String
    Public Property ProductDescription As String
    Public Property PrimaTotalAnual As Decimal
    Public Property PrimaRecibo As Decimal
    Public Property MonedaRecibo As Int32
    Public Property CurrentYear As Int32
    Public Property MesTarjeta As Int32
    Public Property AnoTarjeta As Int32
    Public Property ClientIncluded As InMotionGIT.Client.Entity.Contracts.Client
    Public Property AgregarBeneficiario As Boolean
    Public Property Beneficiary As InMotionGIT.Policy.Entity.Contracts.Beneficiary
    Public Property TypeOfPersonBenef As Int32
    Public Property ValorAcumulado As Decimal
    Public Property LookUpValue As InMotionGIT.Common.DataType.LookUpValue
    Public Property LookUpValueCollection As InMotionGIT.Common.DataType.LookUpValueCollection
    Public Property BeneficiariosMail As String
    Public Property Codigo As Int32
    Public Property Descripcion As String
    Public Property FondosMail As String
    Public Property UsercodeBO As Int32
    Public Property UsercodeFASI As Int32
    Public Property ClienteInformaExiste As Boolean
    Public Property ClienteInformaEsUsuario As Boolean
    Public Property UsuarioClaveEntrada As String
    Public Property UsuarioPassword As String
    Public Property ClientProvisional As InMotionGIT.Client.Entity.Contracts.Client
    Public Property QRegistros As Int32
    Public Property frompanel As Boolean
    Public Property ClientInsuredPerson As InMotionGIT.Client.Entity.Contracts.Client
    Public Property IsAnonymous As Boolean
    Public Property UserInformation As InMotionGIT.FrontOffice.Proxy.UserService.UserInformation
    Public Property GenderClient As String
    Public Property UnderwritingCase As InMotionGIT.Underwriting.Contracts.UnderwritingCase


End Class