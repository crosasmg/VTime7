'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer Oracle v7.1.51 at 2016/06/29 model release 12
'
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------

#Region "using"

Imports Artem.Google.UI
Imports DashboardBusiness.Helpers
Imports DevExpress.Web
Imports DevExpress.Web.ASPxClasses
Imports DevExpress.Web.ASPxEditors
Imports DevExpress.Web.ASPxGridView
Imports GIT.Core
Imports InMotionGIT.FrontOffice.Support.Enumerations
Imports InMotionGIT.FrontOffice.Support.Helpers.ControlHandler
Imports InMotionGIT.BarCode
Imports InMotionGIT.BarCode.Enumerations
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo
Imports System.IO
Imports InMotionGIT.FrontOffice.Support
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data
Imports System.Data.Common
Imports System.Globalization
Imports System.Linq
Imports System.Threading.Thread
Imports System.Xml.Linq

#End Region

Partial Public Class ProfileInformationUserControl
    Inherits GIT.Core.UserControlBase
    Implements Dropthings.Widget.Framework.IWidget

#Region "IWidget Members"

    Public Sub Closed() Implements Dropthings.Widget.Framework.IWidget.Closed
    End Sub

    Public Sub HideSettings() Implements Dropthings.Widget.Framework.IWidget.HideSettings

    End Sub

    Public Sub Init1(host As Dropthings.Widget.Framework.IWidgetHost) Implements Dropthings.Widget.Framework.IWidget.Init

    End Sub

    Public Sub Maximized() Implements Dropthings.Widget.Framework.IWidget.Maximized

    End Sub

    Public Sub Minimized() Implements Dropthings.Widget.Framework.IWidget.Minimized

    End Sub

    Public Sub ShowSettings() Implements Dropthings.Widget.Framework.IWidget.ShowSettings

    End Sub

#End Region

#Region "Private fields"

    Private _formData As ProfileInformationParameter = Nothing
    Private _CurrentParameterInstance As Boolean = False
    Private _loading As Boolean = False
    Private _loadcompleted As Boolean = False
    Private _webTransfer As String

#End Region

#Region "Public properties"

    Public Property FormData() As ProfileInformationParameter
        Get
            Dim formDefinition As String = String.Empty
            Dim currentAction As String = String.Empty

            If IsNothing(_formData) Then
                If Not IsPostBack Then
                    If Not String.IsNullOrEmpty(Request.QueryString("id")) Then
                        Dim _id As Guid

                        If Guid.TryParse(Request.QueryString("id"), _id) Then
                            _FormID.Text = Request.QueryString("id")

                            formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))

                            If Not String.IsNullOrEmpty(formDefinition) Then
                                _formData = Serialize.Deserialize(Of ProfileInformationParameter)(formDefinition)
                            End If
                        End If
                    End If

                    If IsNothing(_formData) Then
                        _formData = New ProfileInformationParameter

                        If String.IsNullOrEmpty(_FormID.Text) Then
                            _FormID.Text = System.Guid.NewGuid().ToString
                        End If

                        _formData.InternalId = _FormID.Text

                        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) OrElse
                           Not String.IsNullOrEmpty(Session("fromid")) Then

                            GetTransferParameters()
                        End If

                        SetDefaultValuesFromQueryString()
                        ValidateParametersInstance(_formData)

                        popupNotifyMessage.ShowOnPageLoad = False

                        ControlsInitialization()
                        ExecuteActionsInitializationForm()

                        If Not String.IsNullOrEmpty(Request.QueryString("readonly")) Then
                            BehaviorControls(ProfileInformationTablePage, False)
                        End If

                        If Not String.IsNullOrEmpty(Request.QueryString("btnSaveQuestion")) Then
                            btnSaveQuestion_Click(Nothing, Nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("btnCan")) Then
                            btnCan_Click(Nothing, Nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("btnSa")) Then
                            btnSa_Click(Nothing, Nothing)
                        End If

                    Else
                        SetDefaultValuesFromQueryString()

                    End If

                Else
                    formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))

                    If Not String.IsNullOrEmpty(formDefinition) Then
                        _formData = Serialize.Deserialize(Of ProfileInformationParameter)(formDefinition)
                    End If

                    If IsNothing(_formData) Then
                        _formData = New ProfileInformationParameter
                    End If
                End If
            End If

            Return _formData
        End Get

        Set(value As ProfileInformationParameter)
            _formData = value
        End Set
    End Property

#End Region

#Region "Form Events"

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        ErrorsGridView.Visible = False

        Dim formData As ProfileInformationParameter = Me.FormData

        If Not IsPostBack AndAlso Not GridViewPostBack() Then

            _loadcompleted = True

            If IsPostBack And Not _CurrentParameterInstance Then
                MapPageToClass(formData)
                _CurrentParameterInstance = True
            End If

            MapClassToPage(formData)
            VerifySecurityLevel()

        Else

        End If

    End Sub

    Protected Sub Page_Unload(sender As Object, e As EventArgs) Handles Me.Unload
        If Not IsNothing(_formData) Then
            Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text)) = Serialize.Serialize(Of ProfileInformationParameter)(_formData)
            Session(String.Format(CultureInfo.InvariantCulture, "FormTitle.{0}", _FormID.Text)) = Page.Title
        End If
    End Sub

#End Region

#Region "Controls Events"

    Private Function GridViewPostBack() As Boolean
        For index As Integer = 0 To Request.Params.Count - 1
            If Request.Params(index).EndsWith("$UserSecurityTrace") Then
                Return True
            End If
        Next

        Return False
    End Function

    Protected Sub Country_DataBinding(sender As Object, e As EventArgs) Handles Country.DataBinding
        With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                 "SELECT  TABLE66.NCOUNTRY, TABLE66.SDESCRIPT FROM TABLE66 TABLE66    WHERE NOT TABLE66.SDESCRIPT IS NULL ORDER BY TABLE66.SDESCRIPT", ""),
                                                 "TABLE66", "Linked.LatCombined")

            Country.DataSource = .QueryExecuteToTable(True)
        End With
    End Sub

#End Region

#Region "PopupMenu Events"

#End Region

#Region "Mapping methods"

    Public Sub ValidateParametersInstance(ByRef ProfileInformationParameterInstance As ProfileInformationParameter)
        If IsNothing(ProfileInformationParameterInstance.FrontOfficeMembershipUser) Then
            ProfileInformationParameterInstance.FrontOfficeMembershipUser = New InMotionGIT.Membership.Providers.FrontOfficeMembershipUser
        End If

    End Sub

    ''' <summary>
    ''' This method moves the data from the class to the page
    ''' </summary>
    ''' <param name="ProfileInformationParameterInstance"></param>
    ''' <remarks></remarks>
    Public Sub MapClassToPage(ByRef ProfileInformationParameterInstance As ProfileInformationParameter, Optional calledBy As String = "")

        ValidateParametersInstance(ProfileInformationParameterInstance)

        Gender.DataBind()
        Country.DataBind()
        Theme.DataBind()
        LanguageID.DataBind()

        With ProfileInformationParameterInstance
            If IsNothing(.collectionThemes) Then
                .collectionThemes = New InMotionGIT.Common.DataType.LookUpValueCollection()
            End If

            Theme.DataSource = .collectionThemes
            Theme.DataBind()
            If IsNothing(.collectionLanguageName) Then
                .collectionLanguageName = New InMotionGIT.Common.DataType.LookUpValueCollection()
            End If

            LanguageID.DataSource = .collectionLanguageName
            LanguageID.DataBind()

            UserName.Text = .FrontOfficeMembershipUser.UserName
            Email.Text = .FrontOfficeMembershipUser.Email
            userNameTemporal.Text = .userNameTemporal
            userEmail.Text = .userEmailTemporal
            FirstName.Text = .FrontOfficeMembershipUser.FirstName
            SurName.Text = .FrontOfficeMembershipUser.SurName
            LastName.Text = .FrontOfficeMembershipUser.LastName
            SecondLastName.Text = .FrontOfficeMembershipUser.SecondLastName
            DateofBirth.Text = .FrontOfficeMembershipUser.DateofBirth
            Gender.SelectedItem = Gender.Items.FindByValue(.FrontOfficeMembershipUser.Gender)
            Address.Text = .FrontOfficeMembershipUser.AddressHome
            City.Text = .FrontOfficeMembershipUser.City
            State.Text = .FrontOfficeMembershipUser.State
            Country.SelectedItem = Country.Items.FindByValue(.countryAuxiliar)
            TelephoneNumber.Text = .FrontOfficeMembershipUser.TelephoneNumber
            Theme.SelectedItem = Theme.Items.FindByValue(.FrontOfficeMembershipUser.Theme)
            LanguageID.SelectedItem = LanguageID.Items.FindByValue(.languageIdAuxiliar)
            PasswordQuestion.Text = .passwordQuestion
            PasswordAnswer.Text = .FrontOfficeMembershipUser.PasswordAnswer
            LastLoginDate.Text = .FrontOfficeMembershipUser.LastLoginDate
            LastActivityDate.Text = .FrontOfficeMembershipUser.LastActivityDate
            LastLockoutDate.Text = .FrontOfficeMembershipUser.LastLockoutDate

            If IsNothing(.UserSecurityTraceCollection) Then
                .UserSecurityTraceCollection = New InMotionGIT.Membership.Providers.Contracts.UserSecurityTraceCollection()
            End If

            _UserSecurityTraceList = .UserSecurityTraceCollection
            UserSecurityTrace.DataSource = _UserSecurityTraceList
            UserSecurityTrace.DataBind()

        End With

        If (Not ("UserSecurityTrace".IndexOf(calledBy) > -1)) Or String.IsNullOrEmpty(calledBy) Then

        End If
    End Sub

    ''' <summary>
    ''' This method moves the data from the page to the class
    ''' </summary>
    ''' <param name="ProfileInformationParameterInstance"></param>
    Public Sub MapPageToClass(ByRef ProfileInformationParameterInstance As ProfileInformationParameter)
        _loading = True

        ValidateParametersInstance(ProfileInformationParameterInstance)

        With ProfileInformationParameterInstance
            .FrontOfficeMembershipUser.Email = Email.Text
            .userNameTemporal = userNameTemporal.Text
            .userEmailTemporal = userEmail.Text
            .FrontOfficeMembershipUser.FirstName = FirstName.Text
            .FrontOfficeMembershipUser.SurName = SurName.Text
            .FrontOfficeMembershipUser.LastName = LastName.Text
            .FrontOfficeMembershipUser.SecondLastName = SecondLastName.Text
            .FrontOfficeMembershipUser.DateofBirth = DateofBirth.Text
            .FrontOfficeMembershipUser.Gender = Gender.Value
            .FrontOfficeMembershipUser.AddressHome = Address.Text
            .FrontOfficeMembershipUser.City = City.Text
            .FrontOfficeMembershipUser.State = State.Text
            .countryAuxiliar = Country.Value
            .FrontOfficeMembershipUser.TelephoneNumber = TelephoneNumber.Text
            .FrontOfficeMembershipUser.Theme = Theme.Value
            .languageIdAuxiliar = LanguageID.Value
            .passwordQuestion = PasswordQuestion.Text.Trim()
            .FrontOfficeMembershipUser.PasswordAnswer = PasswordAnswer.Text.Trim()
            .FrontOfficeMembershipUser.LastLoginDate = LastLoginDate.Text
            .FrontOfficeMembershipUser.LastActivityDate = LastActivityDate.Text

            'GetViewStateUserSecurityTraceList()
            '.UserSecurityTraceCollection = _UserSecurityTraceList
            '.UserSecurityTraceCollection.CurrentIndex= UserSecurityTrace.EditIndex
            'ViewState.Remove("UserSecurityTraceList")

        End With

        _loading = False
    End Sub

#End Region

#Region "UserSecurityTrace GridView Controls with dependencies Events"

#End Region

#Region "UserSecurityTrace GridView editing support"

    Private _UserSecurityTraceList As InMotionGIT.Membership.Providers.Contracts.UserSecurityTraceCollection = Nothing

    Protected Sub UserSecurityTrace_DataBinding(sender As Object, e As EventArgs) Handles UserSecurityTrace.DataBinding

        If IsNothing(FormData.UserSecurityTraceCollection) Then
            FormData.UserSecurityTraceCollection = New InMotionGIT.Membership.Providers.Contracts.UserSecurityTraceCollection()
        End If

        _UserSecurityTraceList = FormData.UserSecurityTraceCollection
        UserSecurityTrace.DataSource = _UserSecurityTraceList
    End Sub

    Protected Sub UserSecurityTrace_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles UserSecurityTrace.CustomColumnDisplayText
        Dim data As DataTable
        Dim rows() As DataRow

        Select Case e.Column.FieldName

            Case Else
        End Select
    End Sub

    Protected Sub UserSecurityTrace_CellEditorInitialize(sender As Object, e As DevExpress.Web.ASPxGridView.ASPxGridViewEditorEventArgs) Handles UserSecurityTrace.CellEditorInitialize
        If UserSecurityTrace.IsNewRowEditing Then
            Select Case e.Column.FieldName

                Case "EffectDate"
                    e.Editor.Focus()
            End Select

        Else
            Select Case e.Column.FieldName

                Case "EffectDate"
                    e.Editor.Focus()
            End Select
        End If

        Select Case e.Column.FieldName

            Case "EffectDate"

        End Select
    End Sub

    Protected Sub UserSecurityTrace_ParseValue(sender As Object, e As DevExpress.Web.Data.ASPxParseValueEventArgs) Handles UserSecurityTrace.ParseValue
        Select Case e.FieldName

        End Select
    End Sub

    Protected Sub UserSecurityTrace_RowInserting(sender As Object, e As DevExpress.Web.Data.ASPxDataInsertingEventArgs) Handles UserSecurityTrace.RowInserting
        Dim UserSecurityTraceItem As InMotionGIT.Membership.Providers.Contracts.UserSecurityTrace = New InMotionGIT.Membership.Providers.Contracts.UserSecurityTrace()
        GetViewStateUserSecurityTraceList()

        With UserSecurityTraceItem
            .ID = _UserSecurityTraceList.Count
            .EffectDate = e.NewValues("EffectDate")

            .Host = e.NewValues("Host")

            .State = e.NewValues("State")

            .Result = e.NewValues("Result")

        End With

        _UserSecurityTraceList.Add(UserSecurityTraceItem)
        UserSecurityTrace.CancelEdit()

        If ViewState("UserSecurityTraceOperationType") = "Add" Then
            UserSecurityTrace.AddNewRow()
        End If

        e.Cancel = True
        SetUserSecurityTraceListDataBind()
    End Sub

    Protected Sub UserSecurityTrace_RowUpdating(sender As Object, e As DevExpress.Web.Data.ASPxDataUpdatingEventArgs) Handles UserSecurityTrace.RowUpdating
        Dim UserSecurityTraceItem As InMotionGIT.Membership.Providers.Contracts.UserSecurityTrace = New InMotionGIT.Membership.Providers.Contracts.UserSecurityTrace()
        Dim ID As String = e.Keys("ID")

        GetViewStateUserSecurityTraceList()

        For index As Integer = 0 To _UserSecurityTraceList.Count - 1
            If _UserSecurityTraceList(index).ID = ID Then

                With _UserSecurityTraceList(index)
                    .EffectDate = e.NewValues("EffectDate")

                    .Host = e.NewValues("Host")

                    .State = e.NewValues("State")

                    .Result = e.NewValues("Result")

                End With

                Exit For
            End If
        Next

        SetUserSecurityTraceListDataBind()

        UserSecurityTrace.CancelEdit()
        e.Cancel = True
    End Sub

    Protected Sub UserSecurityTrace_RowDeleting(sender As Object, e As DevExpress.Web.Data.ASPxDataDeletingEventArgs) Handles UserSecurityTrace.RowDeleting
        Dim ID As String = e.Keys("ID")

        GetViewStateUserSecurityTraceList()

        For index As Integer = 0 To _UserSecurityTraceList.Count - 1
            If _UserSecurityTraceList(index).ID = ID Then
                _UserSecurityTraceList.RemoveAt(index)

                Exit For
            End If
        Next

        SetUserSecurityTraceListDataBind()
        e.Cancel = True
    End Sub

    Private Sub SetUserSecurityTraceListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As ProfileInformationParameter

        GetCurrentParameterInstance(FormData, True)

        FormData.UserSecurityTraceCollection = _UserSecurityTraceList
        UserSecurityTrace.DataSource = _UserSecurityTraceList
        UserSecurityTrace.DataBind()
    End Sub

    Private Sub GetViewStateUserSecurityTraceList()
        Dim FormData As ProfileInformationParameter

        GetCurrentParameterInstance(FormData, True)

        _UserSecurityTraceList = FormData.UserSecurityTraceCollection

        If IsNothing(_UserSecurityTraceList) Then
            _UserSecurityTraceList = New InMotionGIT.Membership.Providers.Contracts.UserSecurityTraceCollection()
        End If
    End Sub

#End Region

#Region "AutoPostBack Events Handles"

    Protected Sub btnSaveQuestion_Click(sender As Object, e As EventArgs)
        Dim ProfileInformationParameterInstance As ProfileInformationParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = String.Empty

        popupNotifyMessage.ShowOnPageLoad = False

        Try
            Dim messageAction As String = String.Empty
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            GetCurrentParameterInstance(ProfileInformationParameterInstance, True)

            currentAction = "1. Call Shared Function 'SaveQuestionAndAnswerSecret' with parameters (userName, answerSecret, questionSecret)"
            Dim _IsChangeQuestionAndAnswerSecret_486345e37be14ee5a3944e25f7391af5 As System.Boolean
            _IsChangeQuestionAndAnswerSecret_486345e37be14ee5a3944e25f7391af5 = InMotionGIT.Membership.Providers.Helper.SaveQuestionAndAnswerSecret(userName:=_formData.userNameTemporal, answerSecret:=_formData.FrontOfficeMembershipUser.PasswordAnswer, questionSecret:=_formData.passwordQuestion)

            If Not IsNothing(_IsChangeQuestionAndAnswerSecret_486345e37be14ee5a3944e25f7391af5) Then
                _formData.IsChangeQuestionAndAnswerSecret = _IsChangeQuestionAndAnswerSecret_486345e37be14ee5a3944e25f7391af5
            End If
            isNullResult = (IsNothing(_IsChangeQuestionAndAnswerSecret_486345e37be14ee5a3944e25f7391af5))

            currentAction = "2. If _formData.IsChangeQuestionAndAnswerSecret = True Then"
            If _formData.IsChangeQuestionAndAnswerSecret = True Then

                currentAction = "3. The message 'Secret question and ...' will displayed as 'Popup'"
                messageAction = GetLocalResourceObject("btnSaveQuestion0_MessageActionResource").ToString()
                messageAction = InMotionGIT.Correspondence.Support.Merge.Process(messageAction, ParametersToDictionary())
                ShowWindowPopupMessage(messageAction)

            Else
                currentAction = "4. The message 'No secret question a...' will displayed as 'Popup'"
                messageAction = GetLocalResourceObject("btnSaveQuestion1_MessageActionResource").ToString()
                messageAction = InMotionGIT.Correspondence.Support.Merge.Process(messageAction, ParametersToDictionary())
                ShowWindowPopupMessage(messageAction)

            End If

            SetCurrentParameterInstance(ProfileInformationParameterInstance, "UserSecurityTrace")

            If ProfileInformationParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.EnumBehavior.None Then
                If Not String.IsNullOrEmpty(ProfileInformationParameterInstance.NotifyMessage) Then
                    ShowWindowPopupMessage(ProfileInformationParameterInstance.NotifyMessage)
                End If

                ProfileInformationParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.EnumBehavior.None
            End If

            If Not String.IsNullOrEmpty(ProfileInformationParameterInstance.BehaviorShowControls) Then
                BehaviorShowControls(ProfileInformationParameterInstance.BehaviorShowControls)
            End If

            If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
                _formData.Errors.AddErrorList(_formContext.Errors)
            End If

        Catch ex As Exception
            InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
            _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

            If Request.QueryString("_debug").IsNotEmpty Then
                FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                FormMessageLabel.ForeColor = Drawing.Color.Black
                FormMessageLabel.Font.Bold = True
                MessageTable.Visible = True
            End If

        Finally
            If _formData.Errors.Count > 0 Then
                SetErrors(_formData.Errors)
            End If

            ClosePopupWindow()

            If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                If Page.IsCallback Then
                    DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                Else
                    Response.ClearHeaders()
                    Response.ClearContent()
                    Response.Redirect(_webTransfer)
                End If
            End If
        End Try
    End Sub
    Protected Sub btnCan_Click(sender As Object, e As EventArgs)
        Dim ProfileInformationParameterInstance As ProfileInformationParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = String.Empty

        popupNotifyMessage.ShowOnPageLoad = False

        Try
            Dim messageAction As String = String.Empty
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            GetCurrentParameterInstance(ProfileInformationParameterInstance, True)

            currentAction = "1. Url: 'appsetting#Url.WebApplication#'"

            _webTransfer = String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication"), "")

            SetCurrentParameterInstance(ProfileInformationParameterInstance, "UserSecurityTrace")

            If ProfileInformationParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.EnumBehavior.None Then
                If Not String.IsNullOrEmpty(ProfileInformationParameterInstance.NotifyMessage) Then
                    ShowWindowPopupMessage(ProfileInformationParameterInstance.NotifyMessage)
                End If

                ProfileInformationParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.EnumBehavior.None
            End If

            If Not String.IsNullOrEmpty(ProfileInformationParameterInstance.BehaviorShowControls) Then
                BehaviorShowControls(ProfileInformationParameterInstance.BehaviorShowControls)
            End If

            If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
                _formData.Errors.AddErrorList(_formContext.Errors)
            End If

        Catch ex As Exception
            InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
            _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

            If Request.QueryString("_debug").IsNotEmpty Then
                FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                FormMessageLabel.ForeColor = Drawing.Color.Black
                FormMessageLabel.Font.Bold = True
                MessageTable.Visible = True
            End If

        Finally
            If _formData.Errors.Count > 0 Then
                SetErrors(_formData.Errors)
            End If

            ClosePopupWindow()

            If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                If Page.IsCallback Then
                    DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                Else
                    Response.ClearHeaders()
                    Response.ClearContent()
                    Response.Redirect(_webTransfer)
                End If
            End If
        End Try
    End Sub
    Protected Sub btnSa_Click(sender As Object, e As EventArgs)
        Dim ProfileInformationParameterInstance As ProfileInformationParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = String.Empty

        popupNotifyMessage.ShowOnPageLoad = False

        Try
            Dim messageAction As String = String.Empty
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            GetCurrentParameterInstance(ProfileInformationParameterInstance, True)

            currentAction = "1. _formData.FrontOfficeMembershipUser.Country = _formData.countryAuxiliar..."

            If IsNothing(_formData.FrontOfficeMembershipUser) Then
                _formData.FrontOfficeMembershipUser = New InMotionGIT.Membership.Providers.FrontOfficeMembershipUser
            End If

            _formData.FrontOfficeMembershipUser.Country = _formData.countryAuxiliar

            currentAction = "2. _formData.FrontOfficeMembershipUser.LanguageID = _formData.languageIdAuxiliar..."

            If IsNothing(_formData.FrontOfficeMembershipUser) Then
                _formData.FrontOfficeMembershipUser = New InMotionGIT.Membership.Providers.FrontOfficeMembershipUser
            End If

            _formData.FrontOfficeMembershipUser.LanguageID = _formData.languageIdAuxiliar

            currentAction = "3. Call Shared Function 'SaveChange' with parameters (userName, userChanged, languageId, theme)"
            Dim _stateSave_1eb8fee9ca4a4e709462e82b8ddc17c6 As System.Boolean
            _stateSave_1eb8fee9ca4a4e709462e82b8ddc17c6 = InMotionGIT.Membership.Providers.Helper.SaveChange(userName:=_formData.userNameTemporal, userChanged:=_formData.FrontOfficeMembershipUser, languageId:=_formData.FrontOfficeMembershipUser.LanguageID, theme:=_formData.FrontOfficeMembershipUser.Theme)

            If Not IsNothing(_stateSave_1eb8fee9ca4a4e709462e82b8ddc17c6) Then
                _formData.stateSave = _stateSave_1eb8fee9ca4a4e709462e82b8ddc17c6
            End If
            isNullResult = (IsNothing(_stateSave_1eb8fee9ca4a4e709462e82b8ddc17c6))

            currentAction = "4. If _formData.stateSave = True Then"
            If _formData.stateSave = True Then

                currentAction = "5. Url: '#setting.Url.WebApplication#/dropthings/default.aspx?resetUser=true'"

                _webTransfer = String.Format(CultureInfo.InvariantCulture, ConfigurationManager.AppSettings("Url.WebApplication") + "/dropthings/default.aspx?resetUser=true" + "&Parameter0={0}", _formData.FrontOfficeMembershipUser.LanguageID)
            Else
                currentAction = "6. The message 'Could not save chang...' will displayed as 'Popup'"
                messageAction = GetLocalResourceObject("btnSa4_MessageActionResource").ToString()
                messageAction = InMotionGIT.Correspondence.Support.Merge.Process(messageAction, ParametersToDictionary())
                ShowWindowPopupMessage(messageAction)

            End If

            SetCurrentParameterInstance(ProfileInformationParameterInstance, "UserSecurityTrace")

            If ProfileInformationParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.EnumBehavior.None Then
                If Not String.IsNullOrEmpty(ProfileInformationParameterInstance.NotifyMessage) Then
                    ShowWindowPopupMessage(ProfileInformationParameterInstance.NotifyMessage)
                End If

                ProfileInformationParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.EnumBehavior.None
            End If

            If Not String.IsNullOrEmpty(ProfileInformationParameterInstance.BehaviorShowControls) Then
                BehaviorShowControls(ProfileInformationParameterInstance.BehaviorShowControls)
            End If

            If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
                _formData.Errors.AddErrorList(_formContext.Errors)
            End If

        Catch ex As Exception
            InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
            _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

            If Request.QueryString("_debug").IsNotEmpty Then
                FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                FormMessageLabel.ForeColor = Drawing.Color.Black
                FormMessageLabel.Font.Bold = True
                MessageTable.Visible = True
            End If

        Finally
            If _formData.Errors.Count > 0 Then
                SetErrors(_formData.Errors)
            End If

            ClosePopupWindow()

            If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                If Page.IsCallback Then
                    DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                Else
                    Response.ClearHeaders()
                    Response.ClearContent()
                    Response.Redirect(_webTransfer)
                End If
            End If
        End Try
    End Sub

#End Region

#Region "UserControls Events Handles"

#End Region

#Region "Form Manager"

    Private Sub VerifySecurityLevel()

    End Sub

    Private Sub GetCurrentParameterInstance(ByRef ProfileInformationParameterInstance As ProfileInformationParameter, force As Boolean)
        If _loadcompleted Or force Then
            If Not _CurrentParameterInstance Then

                ProfileInformationParameterInstance = FormData

                If Page.IsPostBack Then
                    MapPageToClass(ProfileInformationParameterInstance)
                End If

                _CurrentParameterInstance = True
            Else
                ProfileInformationParameterInstance = _formData
            End If
        Else
            ProfileInformationParameterInstance = Nothing
        End If
    End Sub

    Protected Sub SetCurrentParameterInstance(ByRef ProfileInformationParameterInstance As ProfileInformationParameter, calledBy As String)
        FormData = ProfileInformationParameterInstance
        MapClassToPage(ProfileInformationParameterInstance, calledBy)
    End Sub

    Protected Sub SetErrors(errors As InMotionGIT.Common.Contracts.Errors.ErrorCollection)
        Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

        If IsNothing(errorList) Then
            errorList = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
        End If

        errorList = errors

        ViewState("Errors") = errorList
        ShowErrors()
    End Sub

    Public Sub ShowErrors()
        If Not IsNothing(ViewState("Errors")) Then
            Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

            Dim queryOut = From lst In errorList Select lst Order By lst.ErrorId

            ErrorsGridView.Visible = True
            ErrorsGridView.DataSource = queryOut.ToList
            ErrorsGridView.DataBind()
            UpdatePanelErrors.Update()
        End If
    End Sub

    Private Sub ShowWindowPopupMessage(message As String)
        NotifyMessageLabel.Text = message
        popupNotifyMessage.ShowOnPageLoad = True
    End Sub

    Private Sub ClosePopupWindow()
        popControl.Windows(0).ShowOnPageLoad = False
    End Sub

    Private Sub GetTransferParameters()
        Dim fromDocumentCache As Object = Nothing

        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) Then
            fromDocumentCache = Session(Request.QueryString("fromid"))
            Session.Remove(Request.QueryString("fromid"))

        Else
            fromDocumentCache = Session(Session("fromid"))
            Session.Remove(Session("fromid"))
            Session.Remove("fromid")
        End If

        If Not IsNothing(fromDocumentCache) Then
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("Key", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("stateValidator", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("stateIsLocal", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FrontOfficeMembershipUser", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("collectionLanguageName", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("collectionThemes", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("stateSave", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("userNameTemporal", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("userEmailTemporal", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("UserSecurityTraceCollection", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("countryAuxiliar", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("languageIdAuxiliar", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("IsChangeQuestionAndAnswerSecret", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("passwordQuestion", fromDocumentCache, _formData)

        End If
    End Sub

    Private Sub SetDefaultValuesFromQueryString()

        If Request.Form("Key").IsNotEmpty Then
            FormData.Key = Request.Form("Key")

        ElseIf Request.QueryString("Key").IsNotEmpty Then
            FormData.Key = Request.QueryString("Key")
        End If

        If Request.Form("stateValidator").IsNotEmpty Then
            FormData.stateValidator = Request.Form("stateValidator")

        ElseIf Request.QueryString("stateValidator").IsNotEmpty Then
            FormData.stateValidator = Request.QueryString("stateValidator")
        End If

        If Request.Form("stateIsLocal").IsNotEmpty Then
            FormData.stateIsLocal = Request.Form("stateIsLocal")

        ElseIf Request.QueryString("stateIsLocal").IsNotEmpty Then
            FormData.stateIsLocal = Request.QueryString("stateIsLocal")
        End If

        If Request.Form("stateSave").IsNotEmpty Then
            FormData.stateSave = Request.Form("stateSave")

        ElseIf Request.QueryString("stateSave").IsNotEmpty Then
            FormData.stateSave = Request.QueryString("stateSave")
        End If

        If Request.Form("userNameTemporal").IsNotEmpty Then
            FormData.userNameTemporal = Request.Form("userNameTemporal")

        ElseIf Request.QueryString("userNameTemporal").IsNotEmpty Then
            FormData.userNameTemporal = Request.QueryString("userNameTemporal")
        End If

        If Request.Form("userEmailTemporal").IsNotEmpty Then
            FormData.userEmailTemporal = Request.Form("userEmailTemporal")

        ElseIf Request.QueryString("userEmailTemporal").IsNotEmpty Then
            FormData.userEmailTemporal = Request.QueryString("userEmailTemporal")
        End If

        If Request.Form("countryAuxiliar").IsNotEmpty Then
            FormData.countryAuxiliar = Request.Form("countryAuxiliar")

        ElseIf Request.QueryString("countryAuxiliar").IsNotEmpty Then
            FormData.countryAuxiliar = Request.QueryString("countryAuxiliar")
        End If

        If Request.Form("languageIdAuxiliar").IsNotEmpty Then
            FormData.languageIdAuxiliar = Request.Form("languageIdAuxiliar")

        ElseIf Request.QueryString("languageIdAuxiliar").IsNotEmpty Then
            FormData.languageIdAuxiliar = Request.QueryString("languageIdAuxiliar")
        End If

        If Request.Form("IsChangeQuestionAndAnswerSecret").IsNotEmpty Then
            FormData.IsChangeQuestionAndAnswerSecret = Request.Form("IsChangeQuestionAndAnswerSecret")

        ElseIf Request.QueryString("IsChangeQuestionAndAnswerSecret").IsNotEmpty Then
            FormData.IsChangeQuestionAndAnswerSecret = Request.QueryString("IsChangeQuestionAndAnswerSecret")
        End If

        If Request.Form("passwordQuestion").IsNotEmpty Then
            FormData.passwordQuestion = Request.Form("passwordQuestion")

        ElseIf Request.QueryString("passwordQuestion").IsNotEmpty Then
            FormData.passwordQuestion = Request.QueryString("passwordQuestion")
        End If

    End Sub

    Private Sub BehaviorControls(parent As Control, isEnable As Boolean)
        For Each controlItem As Control In parent.Controls
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValueSimple("Enabled", controlItem, isEnable)

            With controlItem
                If Not IsNothing(.Controls) AndAlso .Controls.Count > 0 Then
                    BehaviorControls(controlItem, isEnable)
                End If
            End With
        Next
    End Sub

#End Region

#Region "Actions Page Methods"

    Private Sub ControlsInitialization()
        UserSecurityTrace.ClientVisible = True
        UserSecurityTrace.Enabled = True

    End Sub

    Private Function ParametersToDictionary() As Dictionary(Of String, Object)
        Dim target As New Dictionary(Of String, Object)

        target.Add("Key", _formData.Key)
        target.Add("stateValidator", _formData.stateValidator)
        target.Add("stateIsLocal", _formData.stateIsLocal)
        target.Add("FrontOfficeMembershipUser", _formData.FrontOfficeMembershipUser)
        target.Add("collectionLanguageName", _formData.collectionLanguageName)
        target.Add("collectionThemes", _formData.collectionThemes)
        target.Add("stateSave", _formData.stateSave)
        target.Add("userNameTemporal", _formData.userNameTemporal)
        target.Add("userEmailTemporal", _formData.userEmailTemporal)
        target.Add("UserSecurityTraceCollection", _formData.UserSecurityTraceCollection)
        target.Add("countryAuxiliar", _formData.countryAuxiliar)
        target.Add("languageIdAuxiliar", _formData.languageIdAuxiliar)
        target.Add("IsChangeQuestionAndAnswerSecret", _formData.IsChangeQuestionAndAnswerSecret)
        target.Add("passwordQuestion", _formData.passwordQuestion)

        Return target
    End Function

    Private Sub ExecuteActionsInitializationForm()
        Dim currentAction As String = String.Empty

        Try
            Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
            Dim messageAction As String = String.Empty
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean = False

            currentAction = "1. Call Shared Function 'RetriveUserContext' with parameters (forcedLoading)"
            Dim _FrontOfficeMembershipUser_94028d663b5b490d808862565525eb85 As InMotionGIT.Membership.Providers.FrontOfficeMembershipUser
            _FrontOfficeMembershipUser_94028d663b5b490d808862565525eb85 = InMotionGIT.Membership.Providers.Helper.RetriveUserContext(forcedLoading:=True)

            If Not IsNothing(_FrontOfficeMembershipUser_94028d663b5b490d808862565525eb85) Then
                _formData.FrontOfficeMembershipUser = _FrontOfficeMembershipUser_94028d663b5b490d808862565525eb85
            End If
            isNullResult = (IsNothing(_FrontOfficeMembershipUser_94028d663b5b490d808862565525eb85))

            currentAction = "2. Call Shared Function 'LanguageGetAllName' without parameters"
            Dim _collectionLanguageName_d2cb409963f247c193ebb07c8b498df2 As InMotionGIT.Common.DataType.LookUpValueCollection
            _collectionLanguageName_d2cb409963f247c193ebb07c8b498df2 = InMotionGIT.FrontOffice.Support.Helpers.Language.LanguageGetAllName()

            If Not IsNothing(_collectionLanguageName_d2cb409963f247c193ebb07c8b498df2) Then
                _formData.collectionLanguageName = _collectionLanguageName_d2cb409963f247c193ebb07c8b498df2
            End If
            isNullResult = (IsNothing(_collectionLanguageName_d2cb409963f247c193ebb07c8b498df2))

            currentAction = "3. Call Shared Function 'ThemeGetAll' without parameters"
            Dim _collectionThemes_ef6402a7b9b04688bd6e604d6a1fa5ba As InMotionGIT.Common.DataType.LookUpValueCollection
            _collectionThemes_ef6402a7b9b04688bd6e604d6a1fa5ba = InMotionGIT.FrontOffice.Support.Helpers.Theme.ThemeGetAll()

            If Not IsNothing(_collectionThemes_ef6402a7b9b04688bd6e604d6a1fa5ba) Then
                _formData.collectionThemes = _collectionThemes_ef6402a7b9b04688bd6e604d6a1fa5ba
            End If
            isNullResult = (IsNothing(_collectionThemes_ef6402a7b9b04688bd6e604d6a1fa5ba))

            currentAction = "4. _formData.countryAuxiliar = _formData.FrontOfficeMembershipUser..."

            _formData.countryAuxiliar = _formData.FrontOfficeMembershipUser.Country

            currentAction = "5. _formData.userNameTemporal = _formData.FrontOfficeMembershipUser..."

            _formData.userNameTemporal = _formData.FrontOfficeMembershipUser.UserName

            currentAction = "6. _formData.languageIdAuxiliar = _formData.FrontOfficeMembershipUser..."

            _formData.languageIdAuxiliar = _formData.FrontOfficeMembershipUser.LanguageID

            currentAction = "7. _formData.passwordQuestion = _formData.FrontOfficeMembershipUser..."

            _formData.passwordQuestion = _formData.FrontOfficeMembershipUser.PasswordQuestion

            currentAction = "8. _formData.userEmailTemporal = _formData.FrontOfficeMembershipUser..."

            _formData.userEmailTemporal = _formData.FrontOfficeMembershipUser.Email

            currentAction = "9. Call Shared Function 'UserSecurityTraceRetriveByEmail' with parameters (email, languageId)"
            Dim _UserSecurityTraceCollection_ed786cbcc28443849b1b1d0abb5f152b As InMotionGIT.Membership.Providers.Contracts.UserSecurityTraceCollection
            _UserSecurityTraceCollection_ed786cbcc28443849b1b1d0abb5f152b = InMotionGIT.Membership.Providers.Helper.UserSecurityTraceRetriveByEmail(email:=_formData.userEmailTemporal, languageId:=_formData.FrontOfficeMembershipUser.LanguageID)

            If Not IsNothing(_UserSecurityTraceCollection_ed786cbcc28443849b1b1d0abb5f152b) Then
                _formData.UserSecurityTraceCollection = _UserSecurityTraceCollection_ed786cbcc28443849b1b1d0abb5f152b
            End If
            isNullResult = (IsNothing(_UserSecurityTraceCollection_ed786cbcc28443849b1b1d0abb5f152b))

            currentAction = "10. zonego.Visible = False"
            BehaviorShowControls("zonego,Hidden")

        Catch ex As Exception
            InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
            _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

            If Request.QueryString("_debug").IsNotEmpty Then
                FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                FormMessageLabel.ForeColor = Drawing.Color.Black
                FormMessageLabel.Font.Bold = True
                MessageTable.Visible = True
            End If

        Finally
            If _formData.Errors.Count > 0 Then
                SetErrors(_formData.Errors)
            End If

            If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                If Page.IsCallback Then
                    DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                Else
                    Response.ClearHeaders()
                    Response.ClearContent()
                    Response.Redirect(_webTransfer)
                End If
            End If
        End Try
    End Sub

#End Region

End Class

<Serializable()>
Public Class ProfileInformationParameter
    Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of ProfileInformationParameter)

    ' Methods
    Public Sub New()
        MyBase.New()
    End Sub

    ' Properties
    Public Property Key As String
    Public Property stateValidator As Boolean
    Public Property stateIsLocal As Boolean
    Public Property FrontOfficeMembershipUser As InMotionGIT.Membership.Providers.FrontOfficeMembershipUser
    Public Property collectionLanguageName As InMotionGIT.Common.DataType.LookUpValueCollection
    Public Property collectionThemes As InMotionGIT.Common.DataType.LookUpValueCollection
    Public Property stateSave As Boolean
    Public Property userNameTemporal As String
    Public Property userEmailTemporal As String
    Public Property UserSecurityTraceCollection As InMotionGIT.Membership.Providers.Contracts.UserSecurityTraceCollection
    Public Property countryAuxiliar As Int32
    Public Property languageIdAuxiliar As String
    Public Property IsChangeQuestionAndAnswerSecret As Boolean
    Public Property passwordQuestion As String

End Class