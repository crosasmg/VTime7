'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer Oracle v7.1.83 at 2016/11/08 model release 1
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"
    
Imports Artem.Google.UI
Imports DashboardBusiness.Helpers
Imports DevExpress.Web
Imports DevExpress.Web.ASPxClasses
Imports DevExpress.Web.ASPxEditors
Imports DevExpress.Web.ASPxGridView
Imports GIT.Core
Imports InMotionGIT.FrontOffice.Support.Enumerations
Imports InMotionGIT.FrontOffice.Support.Helpers.ControlHandler
Imports InMotionGIT.BarCode
Imports InMotionGIT.BarCode.Enumerations
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo
Imports System.IO
Imports InMotionGIT.FrontOffice.Support
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data
Imports System.Data.Common
Imports System.Globalization
Imports System.Linq
Imports System.Threading.Thread
Imports System.Xml.Linq


#End Region

Partial Public Class ChangeAddressOfClientNewAddressUserControl
    Inherits GIT.Core.UserControlBase
    Implements Dropthings.Widget.Framework.IWidget

#Region "IWidget Members"
    
    
    

    Public Sub Closed() Implements Dropthings.Widget.Framework.IWidget.Closed
    End Sub

    Public Sub HideSettings() Implements Dropthings.Widget.Framework.IWidget.HideSettings

    End Sub

    Public Sub Init1(host As Dropthings.Widget.Framework.IWidgetHost) Implements Dropthings.Widget.Framework.IWidget.Init

    End Sub

    Public Sub Maximized() Implements Dropthings.Widget.Framework.IWidget.Maximized

    End Sub

    Public Sub Minimized() Implements Dropthings.Widget.Framework.IWidget.Minimized

    End Sub

    Public Sub ShowSettings() Implements Dropthings.Widget.Framework.IWidget.ShowSettings

    End Sub

#End Region

#Region "Private fields"

    Private _formData As ChangeAddressOfClientNewAddressParameter = Nothing
    Private _CurrentParameterInstance As Boolean = False
    Private _loading As Boolean = False
    Private _loadcompleted As Boolean = False
    Private _webTransfer as String  
    Private _foundData As Boolean = False
        
#End Region

#Region "Public properties"

    Public Property FormData() As ChangeAddressOfClientNewAddressParameter
        Get
            Dim formDefinition As String = String.Empty               
             
            If IsNothing(_formData) Then
                If Not IsPostBack Then
                    If Not String.IsNullOrEmpty(Request.QueryString("id")) Then
                        Dim _id As Guid
                        
                        If Guid.TryParse(Request.QueryString("id"), _id) Then
		                        _FormID.Text = Request.QueryString("id")  
                            
                            _foundData = RetrieveFormInformation()
                        End If
                    End If

                    If IsNothing(_formData) Then
                        _formData = New ChangeAddressOfClientNewAddressParameter
                       
                        If String.IsNullOrEmpty(_FormID.Text) Then
                        	_FormID.Text = System.Guid.NewGuid().ToString                       
                        End If
											
                        _formData.InternalId = _FormID.Text
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) OrElse
                           Not String.IsNullOrEmpty(Session("fromid")) Then
                           
                            GetTransferParameters()
                        End If
                        
                        SetDefaultValuesFromQueryString()
                        ValidateParametersInstance(_formData)
                        
                        popupNotifyMessage.ShowOnPageLoad = false                        
                        
                        ControlsInitialization()
                        ExecuteActionsInitializationForm()
                         
                        If Not String.IsNullOrEmpty(Request.QueryString("readonly")) Then
                            BehaviorControls(ChangeAddressOfClientNewAddressTablePage, False)
                        End If
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("Reject")) Then
                            Reject_Click(nothing, nothing)
                        End If
                        If Not String.IsNullOrEmpty(Request.QueryString("Send")) Then
                            Send_Click(nothing, nothing)
                        End If

                    Else
                    		SetDefaultValuesFromQueryString()
                        
                    End If

                Else
                     _foundData = RetrieveFormInformation()                    

                    If IsNothing(_formData) Then
                        _formData = New ChangeAddressOfClientNewAddressParameter
                    End If
                End If
            End If

            Return _formData
        End Get

        Set(value As ChangeAddressOfClientNewAddressParameter)
            _formData = value
        End Set
    End Property
    
#End Region

#Region "Form Events"

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        ErrorsGridView.Visible = False
        
        
        
        Dim formData As ChangeAddressOfClientNewAddressParameter = Me.FormData        
           
        If Not IsPostBack  AndAlso Not GridViewPostBack() Then                     
            
            
            _loadcompleted = True
            
            
            If IsPostBack And Not _CurrentParameterInstance Then
                MapPageToClass(formData)
                _CurrentParameterInstance = True
            End If

            MapClassToPage(formData)
            VerifySecurityLevel()
            
            
        Else
            
            
            
        End If        
        
        If Not FormResources.Contains("ComboBoxErrorText") Then
            FormResources.Add("ComboBoxErrorText", GetGlobalResourceObject("Resource", "ComboBoxErrorText").ToString())
        End If
        
        
    End Sub    

    Protected Sub Page_Unload(sender As Object, e As EventArgs) Handles Me.Unload        
        StoreFormInformation()                  
    End Sub

#End Region

#Region "Controls Events"


    Private Function GridViewPostBack() As Boolean
        For index As Integer = 0 To Request.Params.Count - 1
            If Request.Params(index).EndsWith("$AddressDLI")  Then
                Return True
            End If
        Next
        
        Return False
    End Function    
        
    
    
#End Region

#Region "ClientID On Items Requested Events"

    Protected Sub ClientID_OnItemsRequestedByFilterCondition(source As Object, e As ListEditItemsRequestedByFilterConditionEventArgs)
        Dim query As String = String.Format(CultureInfo.CurrentCulture, "SELECT  SCLIENT, SCLIENAME, SBLOCKADE, NPERSON_TYP FROM (SELECT  CLIENT.SCLIENT, CLIENT.SCLIENAME, CLIENT.SBLOCKADE, CLIENT.NPERSON_TYP, ROW_NUMBER() OVER (ORDER BY SCLIENAME) ROW_NUM FROM CLIENT CLIENT  WHERE  ( CLIENT.SBLOCKADE = '{0}' OR CLIENT.SBLOCKADE IS NULL )  AND CLIENT.NPERSON_TYP = {1} AND %FILTER% ) Result WHERE Row_Num BETWEEN {2} AND {3}","2", 1, e.BeginIndex + 1, e.EndIndex + 1)

        
        If String.IsNullOrEmpty(e.Filter) Then
            query = query.Replace("%FILTER%", "CLIENT.SCLIENAME IS NOT NULL")
            
        Else
            Dim filter As String = e.Filter.Trim.ToUpper

            If filter.IndexOf("%") = -1 Then
                filter = String.Format(CultureInfo.CurrentCulture, "%{0}%", filter)
            End If

            query = query.Replace("%FILTER%", String.Format(CultureInfo.CurrentCulture, "(UPPER(CLIENT.SCLIENAME) LIKE '{0}')", filter))
        End If
             
        With New DataManagerFactory(query, "ClientID", "Linked.LatCombined")
             .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
             ClientID.DataSource = .QueryExecuteToTable(True)
        End With             
       
        ClientID.DataBind()
    End Sub

    Protected Sub ClientID_OnItemRequestedByValue(source As Object, e As ListEditItemRequestedByValueEventArgs)
        If String.IsNullOrEmpty(e.Value) Then
            Return
        End If

        With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture,
                                                  "SELECT  CLIENT.SCLIENT, CLIENT.SCLIENAME, CLIENT.SBLOCKADE, CLIENT.NPERSON_TYP FROM CLIENT CLIENT  WHERE  ( CLIENT.SBLOCKADE = '{0}' OR CLIENT.SBLOCKADE IS NULL )  AND CLIENT.NPERSON_TYP = {1}  AND CLIENT.SCLIENT = '{2}' ", "2", 1, e.Value.ToString), 
                                                  "ClientID", "Linked.LatCombined")
             .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters                                     
             ClientID.DataSource = .QueryExecuteToTable(True)
        End With  
               
        ClientID.DataBind()
    End Sub

#End Region

#Region "PopupMenu Events"

    
    
#End Region

#Region "Mapping methods"

    Public Sub ValidateParametersInstance(ByRef ChangeAddressOfClientNewAddressParameterInstance As ChangeAddressOfClientNewAddressParameter)
        If IsNothing(ChangeAddressOfClientNewAddressParameterInstance.RiskInformation) Then
            ChangeAddressOfClientNewAddressParameterInstance.RiskInformation = New InMotionGIT.Policy.Entity.Contracts.RiskInformation
        End If
        If IsNothing(ChangeAddressOfClientNewAddressParameterInstance.RiskInformation.PrimaryInsured) Then
            ChangeAddressOfClientNewAddressParameterInstance.RiskInformation.PrimaryInsured = New InMotionGIT.Policy.Entity.Contracts.Role
        End If
        If IsNothing(ChangeAddressOfClientNewAddressParameterInstance.RiskInformation.PrimaryInsured.Client) Then
            ChangeAddressOfClientNewAddressParameterInstance.RiskInformation.PrimaryInsured.Client = New InMotionGIT.Client.Entity.Contracts.Client
        End If
   
    End Sub
    
    ''' <summary>
    ''' This method moves the data from the class to the page
    ''' </summary>
    ''' <param name="ChangeAddressOfClientNewAddressParameterInstance"></param>
    ''' <remarks></remarks>
    Public Sub MapClassToPage(ByRef ChangeAddressOfClientNewAddressParameterInstance As ChangeAddressOfClientNewAddressParameter, Optional calledBy As String = "")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
        ValidateParametersInstance(ChangeAddressOfClientNewAddressParameterInstance)

        ClientID.DataBind()

       
        With ChangeAddressOfClientNewAddressParameterInstance
          
                      ProcessDate.Value = .ProcessDate
            ClientID.Value = .RiskInformation.PrimaryInsured.Client.ClientID
            ClientID_OnItemRequestedByValue(ClientID, New ListEditItemRequestedByValueEventArgs(.RiskInformation.PrimaryInsured.Client.ClientID))
            ClientID.SelectedItem = ClientID.Items.FindByValue(.RiskInformation.PrimaryInsured.Client.ClientID)

                      If IsNothing(.AddressDLICollection) Then
                .AddressDLICollection = New InMotionGIT.AddressManager.Contract.General.AddressDLICollection()
            End If

            _AddressDLIList = .AddressDLICollection
            AddressDLI.DataSource = _AddressDLIList
            AddressDLI.DataBind()
    
                  
           
 
          
               
            
            
       End With


if (Not ("AddressDLI".IndexOf(calledBy) > -1)) Or String.IsNullOrEmpty(calledBy) then        
            
         

        End If          
    End Sub

    ''' <summary>
    ''' This method moves the data from the page to the class
    ''' </summary>
    ''' <param name="ChangeAddressOfClientNewAddressParameterInstance"></param>
    Public Sub MapPageToClass(ByRef ChangeAddressOfClientNewAddressParameterInstance As ChangeAddressOfClientNewAddressParameter)
        _loading = True

        ValidateParametersInstance(ChangeAddressOfClientNewAddressParameterInstance)

        With ChangeAddressOfClientNewAddressParameterInstance
            .ProcessDate = ProcessDate.Value
            .RiskInformation.PrimaryInsured.Client.ClientID = ClientID.Value


        'GetViewStateAddressDLIList()
        '.AddressDLICollection = _AddressDLIList
        '.AddressDLICollection.CurrentIndex= AddressDLI.EditIndex
        'ViewState.Remove("AddressDLIList")



        End With




        _loading = False
    End Sub

#End Region

#Region "AddressDLI GridView Controls with dependencies Events"
    


#End Region

#Region "AddressDLI GridView editing support"

    Private _AddressDLIList As InMotionGIT.AddressManager.Contract.General.AddressDLICollection = Nothing

    Protected Sub AddressDLI_DataBinding(sender As Object, e As EventArgs) Handles AddressDLI.DataBinding        
 
            If IsNothing(FormData.AddressDLICollection) Then
                FormData.AddressDLICollection = New InMotionGIT.AddressManager.Contract.General.AddressDLICollection()
            End If

        _AddressDLIList = FormData.AddressDLICollection
        AddressDLI.DataSource = _AddressDLIList      
    End Sub
    
    Protected Sub AddressDLI_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles AddressDLI.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub
    
    Protected Sub AddressDLI_CellEditorInitialize(sender As Object, e As DevExpress.Web.ASPxGridView.ASPxGridViewEditorEventArgs) Handles AddressDLI.CellEditorInitialize
        If AddressDLI.IsNewRowEditing Then
            Select Case e.Column.FieldName



                Case "InternalAddressKey"                     
                       e.Editor.Focus()               
            End Select

        Else
            Select Case e.Column.FieldName
                   


                Case "InternalAddressKey"                     
                       e.Editor.Focus() 
            End Select
        End If
        
        Select Case e.Column.FieldName

            Case "InternalAddressKey"
                  
                 

        End Select
    End Sub      
            
    Protected Sub AddressDLI_ParseValue(sender As Object, e As DevExpress.Web.Data.ASPxParseValueEventArgs) Handles AddressDLI.ParseValue
        Select Case e.FieldName

        End Select
    End Sub    
    
 
    
    Protected Sub AddressDLI_RowInserting(sender As Object, e As DevExpress.Web.Data.ASPxDataInsertingEventArgs) Handles AddressDLI.RowInserting
        Dim AddressDLIItem As InMotionGIT.AddressManager.Contract.Models.AddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressDLI()
        GetViewStateAddressDLIList()
        
        With AddressDLIItem
            .InternalAddressKey = e.NewValues("InternalAddressKey")
                    .AddressDescription = e.NewValues("AddressDescription") 


        End With

        _AddressDLIList.Add(AddressDLIItem)
         AddressDLI.CancelEdit()
        
        If ViewState("AddressDLIOperationType") = "Add" Then
            AddressDLI.AddNewRow()
        End If

        e.Cancel = True
        SetAddressDLIListDataBind()
    End Sub
    
    Protected Sub AddressDLI_RowUpdating(sender As Object, e As DevExpress.Web.Data.ASPxDataUpdatingEventArgs) Handles AddressDLI.RowUpdating
        Dim AddressDLIItem As InMotionGIT.AddressManager.Contract.Models.AddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressDLI() 
        Dim InternalAddressKey As String = e.Keys("InternalAddressKey")
        
        GetViewStateAddressDLIList()
                   
        For index As Integer = 0 To _AddressDLIList.Count - 1
            If _AddressDLIList(index).InternalAddressKey = InternalAddressKey Then
                
                With _AddressDLIList(index)
                    .AddressDescription = e.NewValues("AddressDescription") 

                
                End With
                
                Exit For
            End If
        Next

        SetAddressDLIListDataBind()

        AddressDLI.CancelEdit()
        e.Cancel = True
    End Sub

    Protected Sub AddressDLI_RowDeleting(sender As Object, e As DevExpress.Web.Data.ASPxDataDeletingEventArgs) Handles AddressDLI.RowDeleting
       Dim InternalAddressKey As String = e.Keys("InternalAddressKey")
       
       GetViewStateAddressDLIList()
       
       For index As Integer = 0 To _AddressDLIList.Count - 1
           If _AddressDLIList(index).InternalAddressKey = InternalAddressKey Then
             _AddressDLIList.RemoveAt(index)
             
             Exit For
           End If
       Next       
       
        SetAddressDLIListDataBind()
        e.Cancel = True        
    End Sub

    Private Sub SetAddressDLIListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As ChangeAddressOfClientNewAddressParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.AddressDLICollection = _AddressDLIList
        AddressDLI.DataSource = _AddressDLIList
        AddressDLI.DataBind()
   End Sub

    Private Sub GetViewStateAddressDLIList()
        Dim FormData As ChangeAddressOfClientNewAddressParameter

         GetCurrentParameterInstance(FormData, True)

        _AddressDLIList = FormData.AddressDLICollection

        If IsNothing(_AddressDLIList) Then
            _AddressDLIList = New InMotionGIT.AddressManager.Contract.General.AddressDLICollection()
        End If        
    End Sub
     
    
    
#End Region







#Region "AutoPostBack Events Handles"

Protected Sub ClientID_SelectedIndexChanged(sender As Object, e As EventArgs)  
        Dim ChangeAddressOfClientNewAddressParameterInstance As ChangeAddressOfClientNewAddressParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = String.Empty
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(ChangeAddressOfClientNewAddressParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
           

          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(ChangeAddressOfClientNewAddressParameterInstance,"AddressDLI")
          
        
          If ChangeAddressOfClientNewAddressParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(ChangeAddressOfClientNewAddressParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(ChangeAddressOfClientNewAddressParameterInstance.NotifyMessage)
             End If           
            
             ChangeAddressOfClientNewAddressParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(ChangeAddressOfClientNewAddressParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(ChangeAddressOfClientNewAddressParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If 
      End Try         
    End Sub
Protected Sub Reject_Click(sender As Object, e As EventArgs)  
        Dim ChangeAddressOfClientNewAddressParameterInstance As ChangeAddressOfClientNewAddressParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = String.Empty
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(ChangeAddressOfClientNewAddressParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = "1. The message 'No se continua con e...' will displayed as 'Splash'" 
            messageAction = "No se continua con el proceso... No deje de visitarnos en otra oportunidad..." 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.Correspondence.Support.Merge.Process(messageAction, parametersDictionary) 
            ChangeAddressOfClientNewAddressTablePage.Visible = False 
            MessageTable.Visible = True 
            FormMessageLabel.Text = messageAction 



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(ChangeAddressOfClientNewAddressParameterInstance,"")
          
        
          If ChangeAddressOfClientNewAddressParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(ChangeAddressOfClientNewAddressParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(ChangeAddressOfClientNewAddressParameterInstance.NotifyMessage)
             End If           
            
             ChangeAddressOfClientNewAddressParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(ChangeAddressOfClientNewAddressParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(ChangeAddressOfClientNewAddressParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If 
      End Try         
    End Sub
Protected Sub Send_Click(sender As Object, e As EventArgs)  
        Dim ChangeAddressOfClientNewAddressParameterInstance As ChangeAddressOfClientNewAddressParameter = Nothing
        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)
        Dim currentAction As String = String.Empty
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing  
        
        popupNotifyMessage.ShowOnPageLoad = false
        
        Try 
            Dim messageAction As String = String.Empty             
            Dim lastURL As String = String.Empty
            Dim isNullResult As Boolean = True
            Dim isFoundData As Boolean  = False             
            

        
           
        
           GetCurrentParameterInstance(ChangeAddressOfClientNewAddressParameterInstance, True)
         
           ParametersToDictionary(parametersDictionary)  
        
                       currentAction = "1. The message 'Gracias por visitarn...' will displayed as 'Popup'" 
            messageAction = "Gracias por visitarnos... " 
            ParametersToDictionary(parametersDictionary)
            messageAction = InMotionGIT.Correspondence.Support.Merge.Process(messageAction, parametersDictionary) 
            ShowWindowPopupMessage(messageAction) 



          
           currentAction = String.Empty
             
        
           
                         
          
          SetCurrentParameterInstance(ChangeAddressOfClientNewAddressParameterInstance,"")
          
        
          If ChangeAddressOfClientNewAddressParameterInstance.Behavior <> InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None Then
             If Not String.IsNullOrEmpty(ChangeAddressOfClientNewAddressParameterInstance.NotifyMessage) Then
                 ShowWindowPopupMessage(ChangeAddressOfClientNewAddressParameterInstance.NotifyMessage)
             End If           
            
             ChangeAddressOfClientNewAddressParameterInstance.Behavior = InMotionGIT.FrontOffice.Support.Enumerations.enumBehavior.None
          End If
        
          If Not String.IsNullOrEmpty(ChangeAddressOfClientNewAddressParameterInstance.BehaviorShowControls) Then
               BehaviorShowControls(ChangeAddressOfClientNewAddressParameterInstance.BehaviorShowControls)
          End If        
                  
          If Not IsNothing(_formContext.Errors) AndAlso _formContext.Errors.Count > 0 Then
				_formData.Errors.AddErrorList(_formContext.Errors)
           End If         
          
      Catch ex As Exception
           InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
		   _formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

           
           If Request.QueryString("debug").IsNotEmpty Then
               FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
               FormMessageLabel.ForeColor = Drawing.Color.Black
               FormMessageLabel.Font.Bold = True
               MessageTable.Visible = True
           End If           
           
      Finally
            If _formData.Errors.Count > 0 Then
               SetErrors(_formData.Errors)
            End If
            
             ClosePopupWindow()      
                
           If  _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
               If Page.IsCallback Then
                  DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
               Else
                   Response.ClearHeaders()        
                   Response.ClearContent()        
                   Response.Redirect(_webTransfer)
               End If          
           End If 
      End Try         
    End Sub


#End Region

#Region "UserControls Events Handles"

    



#End Region

#Region "Form Manager"

    Private Sub VerifySecurityLevel()



    End Sub

      

    Private Sub GetCurrentParameterInstance(ByRef ChangeAddressOfClientNewAddressParameterInstance As ChangeAddressOfClientNewAddressParameter, force As Boolean)
        If _loadcompleted Or force Then
            If Not _CurrentParameterInstance Then

                ChangeAddressOfClientNewAddressParameterInstance = FormData

                If Page.IsPostBack Then
                    MapPageToClass(ChangeAddressOfClientNewAddressParameterInstance)
                End If

                _CurrentParameterInstance = True
            Else
                ChangeAddressOfClientNewAddressParameterInstance = _formData
            End If
        Else
            ChangeAddressOfClientNewAddressParameterInstance = Nothing
        End If
    End Sub

    Protected Sub SetCurrentParameterInstance(ByRef ChangeAddressOfClientNewAddressParameterInstance As ChangeAddressOfClientNewAddressParameter, calledBy As String)
        FormData = ChangeAddressOfClientNewAddressParameterInstance
        MapClassToPage(ChangeAddressOfClientNewAddressParameterInstance,calledBy)
    End Sub

    Protected Sub SetErrors(errors As InMotionGIT.Common.Contracts.Errors.ErrorCollection)
        Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

        If IsNothing(errorList) Then
            errorList = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
        End If

        errorList = errors

        ViewState("Errors") = errorList
        ShowErrors()
    End Sub

    Public Sub ShowErrors()
        If Not IsNothing(ViewState("Errors")) Then
            Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

            Dim queryOut = From lst In errorList Select lst Order By lst.ErrorId

            ErrorsGridView.Visible = True
            ErrorsGridView.DataSource = queryOut.ToList
            ErrorsGridView.DataBind()
            UpdatePanelErrors.Update()
        End If
    End Sub
   
    Private Sub ShowWindowPopupMessage(message As String)
        NotifyMessageLabel.Text = message
        popupNotifyMessage.ShowOnPageLoad = True
    End Sub

    Private Sub ClosePopupWindow()
        popControl.Windows(0).ShowOnPageLoad = False
    End Sub

    Private Sub GetTransferParameters()
        Dim fromDocumentCache As Object = Nothing

        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) Then
            fromDocumentCache = Session( Request.QueryString("fromid"))
            Session.Remove(Request.QueryString("fromid"))
            
        Else
            fromDocumentCache = Session(Session("fromid"))
            Session.Remove(Session("fromid"))
            Session.Remove("fromid")   
        End If
        
        If Not IsNothing(fromDocumentCache) Then
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ProcessDate", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("FormID", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("RiskInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("eMail", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("ConsumerInformation", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("LookUpValueCompany", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AddressDLICollection", fromDocumentCache, _formData)
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("AddressPhysicalAddressDLI", fromDocumentCache, _formData)
            
        End If
    End Sub
    
    Private Sub SetDefaultValuesFromQueryString()

        If Request.Form("ProcessDate").IsNotEmpty Then
                FormData.ProcessDate = Request.Form("ProcessDate") 

ElseIf Request.QueryString("ProcessDate").IsNotEmpty Then
                FormData.ProcessDate = Request.QueryString("ProcessDate") 
End If 

If Request.Form("FormID").IsNotEmpty Then
                FormData.FormID = Request.Form("FormID") 

ElseIf Request.QueryString("FormID").IsNotEmpty Then
                FormData.FormID = Request.QueryString("FormID") 
End If 

If Request.Form("eMail").IsNotEmpty Then
                FormData.eMail = Request.Form("eMail") 

ElseIf Request.QueryString("eMail").IsNotEmpty Then
                FormData.eMail = Request.QueryString("eMail") 
End If 


    End Sub
    
    Private Sub BehaviorControls(parent As Control, isEnable As Boolean)
        For Each controlItem As Control In parent.Controls
			InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValueSimple("Enabled", controlItem, isEnable)


            With controlItem
                If Not IsNothing(.Controls) AndAlso .Controls.Count > 0 Then
                    BehaviorControls(controlItem, isEnable)
                End If
            End With
        Next
    End Sub
    
#End Region

#Region "Actions Page Methods"

    Private Sub ControlsInitialization()
        AddressDLI.ClientVisible = True
        AddressDLI.Enabled = True

    End Sub     
  
    Private Sub ParametersToDictionary(ByRef target As Dictionary(Of String, Object))
        If IsNothing(target) Then
            target = New Dictionary(Of String, Object)

            target.Add("ProcessDate", _formData.ProcessDate) 
            target.Add("FormID", _formData.FormID) 
            target.Add("RiskInformation", _formData.RiskInformation) 
            target.Add("eMail", _formData.eMail) 
            target.Add("ConsumerInformation", _formData.ConsumerInformation) 
            target.Add("LookUpValueCompany", _formData.LookUpValueCompany) 
            target.Add("AddressDLICollection", _formData.AddressDLICollection) 
            target.Add("AddressPhysicalAddressDLI", _formData.AddressPhysicalAddressDLI) 

        Else
            target("ProcessDate") = _formData.ProcessDate 
            target("FormID") = _formData.FormID 
            target("RiskInformation") = _formData.RiskInformation 
            target("eMail") = _formData.eMail 
            target("ConsumerInformation") = _formData.ConsumerInformation 
            target("LookUpValueCompany") = _formData.LookUpValueCompany 
            target("AddressDLICollection") = _formData.AddressDLICollection 
            target("AddressPhysicalAddressDLI") = _formData.AddressPhysicalAddressDLI 

        End If     
    End Sub
    
    
    Private Sub ExecuteActionsInitializationForm()
                    Dim currentAction As String = String.Empty
                    
                    Try                          
                        Dim _formContext As New InMotionGIT.Common.Contracts.Context(LanguageHelper.CurrentCultureToLanguage, _formData.InternalId)                          
                        Dim messageAction As String = String.Empty
                        Dim lastURL As String = String.Empty
                        Dim isNullResult As Boolean = True 
                        Dim isFoundData As Boolean  = False 
                        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
                        
                        ParametersToDictionary(parametersDictionary)
                         
                        
                                    currentAction = "1. _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Cont..." 
 
If IsNothing(_formData.AddressPhysicalAddressDLI) Then
   _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
End If 

 _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI 

            currentAction = "2. _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1..." 
 
If IsNothing(_formData.AddressPhysicalAddressDLI) Then
   _formData.AddressPhysicalAddressDLI = New InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI
End If 
If IsNothing(_formData.AddressPhysicalAddressDLI.Address) Then
   _formData.AddressPhysicalAddressDLI.Address = New InMotionGIT.AddressManager.Contract.General.Address
End If 
If IsNothing(_formData.AddressPhysicalAddressDLI.Address.UserCompany) Then
   _formData.AddressPhysicalAddressDLI.Address.UserCompany = New InMotionGIT.Common.DataType.LookUpValueExtend
End If 

 _formData.AddressPhysicalAddressDLI.Address.UserCompany.Code = 1 
If IsNothing(_formData.ConsumerInformation) Then
   _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
End If 

 _formData.ConsumerInformation.CompanyId = 1 
If IsNothing(_formData.ConsumerInformation) Then
   _formData.ConsumerInformation = New InMotionGIT.Common.Contracts.Process.ConsumerInformation
End If 
If IsNothing(_formData.ConsumerInformation.Security) Then
   _formData.ConsumerInformation.Security = New InMotionGIT.Common.Contracts.Process.SecurityInformation
End If 

 _formData.ConsumerInformation.Security.Usercode = 9998 

            currentAction = "3. _formData.ProcessDate = Date.Today..." 
 

 _formData.ProcessDate = Date.Today 

            currentAction = "4. If _formData.RiskInformation.PrimaryInsured.Client.ClientID Not Is Null Or Not Empty '' Then" 
        If Not String.IsNullOrEmpty(_formData.RiskInformation.PrimaryInsured.Client.ClientID) Then 

            End If

                        
                        currentAction = String.Empty
                         
                    Catch ex As Exception
                        InMotionGIT.Common.Helpers.LogHandler.ErrorLog(Page.AppRelativeVirtualPath, currentAction, ex)
						_formData.Errors.Add(New InMotionGIT.Common.Contracts.Errors.Error With {.Message = currentAction & " " & ex.Message, .Severity = InMotionGIT.Common.Contracts.Errors.Enumerations.EnumSeverity.Error})

                        If Request.QueryString("debug").IsNotEmpty Then
                            FormMessageLabel.Text = InMotionGIT.Common.Helpers.ExceptionHandlers.TraceInnerExceptionMessage(ex, True)
                            FormMessageLabel.ForeColor = Drawing.Color.Black
                            FormMessageLabel.Font.Bold = True
                            MessageTable.Visible = True
                        End If
                        
                    Finally                     
                        If _formData.Errors.Count > 0 Then
                            SetErrors(_formData.Errors)
                        End If
                        
                        If _formData.Errors.Count = 0 AndAlso Not String.IsNullOrEmpty(_webTransfer) Then
                            If Page.IsCallback Then
                                DevExpress.Web.ASPxClasses.ASPxWebControl.RedirectOnCallback(_webTransfer)
                            Else
                                Response.ClearHeaders()
                                Response.ClearContent()
                                Response.Redirect(_webTransfer)
                            End If
                        End If
                   End Try
               End Sub
    

    
#End Region

#Region "Storage Data Methods"

    Private Sub StoreFormInformation()
      If Not IsNothing(_formData) Then

            If _foundData Then
                UpdateStorageData()
            Else
                InsertStorageData()
            End If
       End If
End Sub

    Private Function RetrieveFormInformation() As Boolean
        Dim result As Boolean = False
        Dim records As DataTable

        With New DataManagerFactory("SELECT Content FROM FrontOffice.DocumentCache WHERE FormId = @:FormId",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)
            records = .QueryExecuteToTable(True)
        End With

        If records.Rows.Count > 0 Then
            result = True            
            _formData = Serialize.Deserialize(Of ChangeAddressOfClientNewAddressParameter)(records.Rows(0).Item("Content"))
        End If
        
        Return result
    End Function

    Private Sub InsertStorageData()
        With New DataManagerFactory("INSERT INTO FrontOffice.DocumentCache (FormId, ModelId, UserId, Page, Content, CreationDate, UpdateDate) VALUES(@:FormId, @:ModelId, @:UserId, @:Page, @:Content, @:CreationDate, @:UpdateDate)",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)
            .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "0fd56d8c-be83-4d1b-a6aa-bf76b8fcfbc4")
            .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserName)
            .AddParameter("Page", DbType.AnsiString, 255, False, Me.AppRelativeVirtualPath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of ChangeAddressOfClientNewAddressParameter)(_formData))
            .AddParameter("CreationDate", DbType.DateTime, 20, False, Now)
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)

            .CommandExecute()
        End With
    End Sub

    Private Sub UpdateStorageData()
        With New DataManagerFactory("UPDATE FrontOffice.DocumentCache SET ModelId = @:ModelId, UserId = @:UserId, Page = @:Page, Content = @:Content, UpdateDate = @:UpdateDate WHERE FormId = @:FormId",
                                    "FrontOffice.DocumentCache", "FrontOfficeConnectionString")
                                    
            .AddParameter("ModelId", DbType.AnsiStringFixedLength, 36, False, "0fd56d8c-be83-4d1b-a6aa-bf76b8fcfbc4")
            .AddParameter("UserId", DbType.AnsiString, 256, False, UserInfo.UserName)
            .AddParameter("Page", DbType.AnsiString, 255, False, Me.AppRelativeVirtualPath)
            .AddParameter("Content", DbType.Xml, 1, False, Serialize.Serialize(Of ChangeAddressOfClientNewAddressParameter)(_formData))
            .AddParameter("UpdateDate", DbType.DateTime, 20, False, Now)
            .AddParameter("FormId", DbType.AnsiStringFixedLength, 36, False, _FormID.Text)

            .CommandExecute()
        End With
    End Sub

#End Region




End Class

<Serializable()>
Public Class ChangeAddressOfClientNewAddressParameter
    Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of  ChangeAddressOfClientNewAddressParameter)

    ' Methods
    Public Sub New()
        MyBase.New()
    End Sub

    ' Properties
    Public Property ProcessDate As DateTime
    Public Property FormID As String
    Public Property RiskInformation As InMotionGIT.Policy.Entity.Contracts.RiskInformation
    Public Property eMail As String
    Public Property ConsumerInformation As InMotionGIT.Common.Contracts.Process.ConsumerInformation
    Public Property LookUpValueCompany As InMotionGIT.Common.DataType.LookUpValue
    Public Property AddressDLICollection As InMotionGIT.AddressManager.Contract.General.AddressDLICollection
    Public Property AddressPhysicalAddressDLI As InMotionGIT.AddressManager.Contract.Models.AddressPhysicalAddressDLI


End Class