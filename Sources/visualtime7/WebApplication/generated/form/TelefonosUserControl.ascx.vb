'---------------------------------------------------------------------------------------------------
' <generated>
'     This code was generated by Form Designer Oracle v7.1.160 at 2017-08-08 model release 1
'     
'     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
' </generated>
'---------------------------------------------------------------------------------------------------
      
#Region "using"
    
Imports Artem.Google.UI
Imports DashboardBusiness.Helpers
Imports DevExpress.Web
Imports DevExpress.Web.ASPxClasses
Imports DevExpress.Web.ASPxEditors
Imports DevExpress.Web.ASPxGridView
Imports GIT.Core
Imports InMotionGIT.FrontOffice.Support.Enumerations
Imports InMotionGIT.FrontOffice.Support.Helpers.ControlHandler
Imports InMotionGIT.BarCode
Imports InMotionGIT.BarCode.Enumerations
Imports InMotionGIT.Common.Helpers
Imports InMotionGIT.Common.Proxy
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs
Imports InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo
Imports System.IO
Imports InMotionGIT.FrontOffice.Support
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Data
Imports System.Data.Common
Imports System.Globalization
Imports System.Linq
Imports System.Threading.Thread
Imports System.Xml.Linq
Imports System.Net


#End Region

Partial Public Class TelefonosUserControl
    Inherits GIT.Core.UserControlBase
    Implements Dropthings.Widget.Framework.IWidget

#Region "IWidget Members"
    
    
    

    Public Sub Closed() Implements Dropthings.Widget.Framework.IWidget.Closed
    End Sub

    Public Sub HideSettings() Implements Dropthings.Widget.Framework.IWidget.HideSettings

    End Sub

    Public Sub Init1(host As Dropthings.Widget.Framework.IWidgetHost) Implements Dropthings.Widget.Framework.IWidget.Init

    End Sub

    Public Sub Maximized() Implements Dropthings.Widget.Framework.IWidget.Maximized

    End Sub

    Public Sub Minimized() Implements Dropthings.Widget.Framework.IWidget.Minimized

    End Sub

    Public Sub ShowSettings() Implements Dropthings.Widget.Framework.IWidget.ShowSettings

    End Sub

#End Region

#Region "Private fields"

    Private _formData As TelefonosParameter = Nothing
    Private _CurrentParameterInstance As Boolean = False
    Private _loading As Boolean = False
    Private _loadcompleted As Boolean = False
    Private _webTransfer as String  
    
        
#End Region

#Region "Public properties"

    Public Property FormData() As TelefonosParameter
        Get
            Dim formDefinition As String = String.Empty               
             
            If IsNothing(_formData) Then
                If Not IsPostBack Then
                    If Not String.IsNullOrEmpty(Request.QueryString("id")) Then
                        Dim _id As Guid
                        
                        If Guid.TryParse(Request.QueryString("id"), _id) Then
		                        _FormID.Text = Request.QueryString("id")  
                            
                            formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
           If Not String.IsNullOrEmpty(formDefinition) Then
              _formData = Serialize.Deserialize(Of TelefonosParameter)(formDefinition)
           End If
                        End If
                    End If

                    If IsNothing(_formData) Then
                        _formData = New TelefonosParameter
                       
                        If String.IsNullOrEmpty(_FormID.Text) Then
                        	_FormID.Text = System.Guid.NewGuid().ToString                       
                        End If
											
                        _formData.InternalId = _FormID.Text
                        
                        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) OrElse
                           Not String.IsNullOrEmpty(Session("fromid")) Then
                           
                            GetTransferParameters()
                        End If
                        
                        
                        
                        SetDefaultValuesFromQueryString()
                        ValidateParametersInstance(_formData)
                        
                        popupNotifyMessage.ShowOnPageLoad = false                        
                        
                        ControlsInitialization()
                        
                         
                        If Not String.IsNullOrEmpty(Request.QueryString("readonly")) Then
                            SetReadOnlyControls()
                        End If
                        

                    Else
                    		SetDefaultValuesFromQueryString()
                        
                    End If

                Else
                     formDefinition = Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text))
    
           If Not String.IsNullOrEmpty(formDefinition) Then
              _formData = Serialize.Deserialize(Of TelefonosParameter)(formDefinition)
           End If                    

                    If IsNothing(_formData) Then
                        _formData = New TelefonosParameter
                    End If
                End If
            End If

            Return _formData
        End Get

        Set(value As TelefonosParameter)
            _formData = value
        End Set
    End Property
    
#End Region

#Region "Form Events"

    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        ErrorsGridView.Visible = False
        
        
        
        Dim formData As TelefonosParameter = Me.FormData        
           
        If Not IsPostBack  AndAlso Not GridViewPostBack() Then                     
            
            
            _loadcompleted = True
            
            
            If IsPostBack And Not _CurrentParameterInstance Then
                MapPageToClass(formData)
                _CurrentParameterInstance = True
            End If

            MapClassToPage(formData)
            VerifySecurityLevel()
            
            
        Else
            
            
            
        End If        
        
        
        
        
    End Sub    

    Protected Sub Page_Unload(sender As Object, e As EventArgs) Handles Me.Unload        
                   If Not IsNothing(_formData) Then
              Session(String.Format(CultureInfo.InvariantCulture, "FormStorage.{0}", _FormID.Text)) = Serialize.Serialize(Of TelefonosParameter)(_formData)
              Session(String.Format(CultureInfo.InvariantCulture, "FormTitle.{0}", _FormID.Text)) = Page.Title
              
             'Si el modo de trabajo es desarrollo se coloca el objeto directo en al sesión para que pueda ser examinado usando la pagina /support/SessionDump.aspx?form
              If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
                 Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = _formData
              End If
           End If                  
    End Sub

#End Region

#Region "Controls Events"


    Private Function GridViewPostBack() As Boolean
        For index As Integer = 0 To Request.Params.Count - 1
            If Request.Params(index).EndsWith("$Phone")  Then
                Return True
            End If
        Next
        
        Return False
    End Function    
        
    
    
#End Region


#Region "PopupMenu Events"

    
    
#End Region

#Region "Mapping methods"

    Public Sub ValidateParametersInstance(ByRef TelefonosParameterInstance As TelefonosParameter)
   
    End Sub
    
    ''' <summary>
    ''' This method moves the data from the class to the page
    ''' </summary>
    ''' <param name="TelefonosParameterInstance"></param>
    ''' <remarks></remarks>
    Public Sub MapClassToPage(ByRef TelefonosParameterInstance As TelefonosParameter, Optional calledBy As String = "")
        Dim parametersDictionary As Dictionary(Of String, Object) = Nothing
        ValidateParametersInstance(TelefonosParameterInstance)

        
       
        With TelefonosParameterInstance
          
          
                      If IsNothing(.PhoneCollection) Then
                .PhoneCollection = New InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection()
            End If

            _PhoneList = .PhoneCollection
            Phone.DataSource = _PhoneList
            Phone.DataBind()
    
                  
          
          
               
            
            
       End With


if (Not ("Phone".IndexOf(calledBy) > -1)) Or String.IsNullOrEmpty(calledBy) then        
            
         

        End If          
    End Sub

    ''' <summary>
    ''' This method moves the data from the page to the class
    ''' </summary>
    ''' <param name="TelefonosParameterInstance"></param>
    Public Sub MapPageToClass(ByRef TelefonosParameterInstance As TelefonosParameter)
        _loading = True

        ValidateParametersInstance(TelefonosParameterInstance)

        With TelefonosParameterInstance


        'GetViewStatePhoneList()
        '.PhoneCollection = _PhoneList
        '.PhoneCollection.CurrentIndex= Phone.EditIndex
        'ViewState.Remove("PhoneList")



        End With




        _loading = False
    End Sub

#End Region

#Region "Phone GridView Controls with dependencies Events"
    


#End Region

#Region "Phone GridView editing support"

    Private _PhoneList As InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection = Nothing

    Protected Sub Phone_DataBinding(sender As Object, e As EventArgs) Handles Phone.DataBinding        
            With New DataManagerFactory(String.Format(CultureInfo.CurrentCulture, 
                                                                 "SELECT  TABLE564.NPHONE_TYPE, TABLE564.SDESCRIPT FROM TABLE564 TABLE564  WHERE TABLE564.SSTATREGT = '{0}'  AND NOT TABLE564.SDESCRIPT IS NULL ORDER BY TABLE564.SDESCRIPT", "1"), "TABLE564", "Linked.LatCombined")
                        
                    .Cache = InMotionGIT.Common.Enumerations.EnumCache.CacheWithFullParameters
                    DirectCast(Phone.Columns("TelephoneType"), GridViewDataComboBoxColumn).PropertiesComboBox.DataSource = .QueryExecuteToTable(True)
            End With    
 
            If IsNothing(FormData.PhoneCollection) Then
                FormData.PhoneCollection = New InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection()
            End If

        _PhoneList = FormData.PhoneCollection
        Phone.DataSource = _PhoneList      
    End Sub
    
    Protected Sub Phone_CustomColumnDisplayText(sender As Object, e As ASPxGridViewColumnDisplayTextEventArgs) Handles Phone.CustomColumnDisplayText  
          Dim data As DataTable
          Dim rows() As DataRow
          
          Select Case e.Column.FieldName
      
            Case Else
          End Select
    End Sub
    
    Protected Sub Phone_CellEditorInitialize(sender As Object, e As DevExpress.Web.ASPxGridView.ASPxGridViewEditorEventArgs) Handles Phone.CellEditorInitialize
        If Phone.IsNewRowEditing Then
            Select Case e.Column.FieldName



                Case "TelephoneType"                     
                       e.Editor.Focus()               
            End Select

        Else
            Select Case e.Column.FieldName
                   


                Case "TelephoneType"                     
                       e.Editor.Focus() 
            End Select
        End If
        
        Select Case e.Column.FieldName

            Case "TelephoneType"
                  DirectCast(e.Editor, ASPxComboBox).DataBindItems()
                 

        End Select
    End Sub      
            
    Protected Sub Phone_ParseValue(sender As Object, e As DevExpress.Web.Data.ASPxParseValueEventArgs) Handles Phone.ParseValue
        Select Case e.FieldName

        End Select
    End Sub    
    
 
    
    Protected Sub Phone_RowInserting(sender As Object, e As DevExpress.Web.Data.ASPxDataInsertingEventArgs) Handles Phone.RowInserting
        Dim PhoneItem As InMotionGIT.General.Entity.Contracts.Phones.Phone = New InMotionGIT.General.Entity.Contracts.Phones.Phone()
        GetViewStatePhoneList()
        
        With PhoneItem
            .KeyPhone = _PhoneList.Count
                    .TelephoneType = e.NewValues("TelephoneType") 

                    .CountryCode = e.NewValues("CountryCode") 

                    .AreaCode = e.NewValues("AreaCode") 

                    .PhoneNumber = e.NewValues("PhoneNumber") 


        End With

        _PhoneList.Add(PhoneItem)
         Phone.CancelEdit()
        
        If ViewState("PhoneOperationType") = "Add" Then
            Phone.AddNewRow()
        End If

        e.Cancel = True
        SetPhoneListDataBind()
    End Sub
    
    Protected Sub Phone_RowUpdating(sender As Object, e As DevExpress.Web.Data.ASPxDataUpdatingEventArgs) Handles Phone.RowUpdating
        Dim PhoneItem As InMotionGIT.General.Entity.Contracts.Phones.Phone = New InMotionGIT.General.Entity.Contracts.Phones.Phone() 
        Dim KeyPhone As String = e.Keys("KeyPhone")
        
        GetViewStatePhoneList()
                   
        For index As Integer = 0 To _PhoneList.Count - 1
            If _PhoneList(index).KeyPhone = KeyPhone Then
                
                With _PhoneList(index)
                    .TelephoneType = e.NewValues("TelephoneType") 

                    .CountryCode = e.NewValues("CountryCode") 

                    .AreaCode = e.NewValues("AreaCode") 

                    .PhoneNumber = e.NewValues("PhoneNumber") 

                
                End With
                
                Exit For
            End If
        Next

        SetPhoneListDataBind()

        Phone.CancelEdit()
        e.Cancel = True
    End Sub

    Protected Sub Phone_RowDeleting(sender As Object, e As DevExpress.Web.Data.ASPxDataDeletingEventArgs) Handles Phone.RowDeleting
       Dim KeyPhone As String = e.Keys("KeyPhone")
       
       GetViewStatePhoneList()
       
       For index As Integer = 0 To _PhoneList.Count - 1
           If _PhoneList(index).KeyPhone = KeyPhone Then
             _PhoneList.RemoveAt(index)
             
             Exit For
           End If
       Next       
       
        SetPhoneListDataBind()
        e.Cancel = True        
    End Sub

    Private Sub SetPhoneListDataBind(Optional editIndex As Integer = -1, Optional isCancel As Boolean = False)
        Dim FormData As TelefonosParameter

         GetCurrentParameterInstance(FormData, True)

        FormData.PhoneCollection = _PhoneList
        Phone.DataSource = _PhoneList
        Phone.DataBind()
   End Sub

    Private Sub GetViewStatePhoneList()
        Dim FormData As TelefonosParameter

         GetCurrentParameterInstance(FormData, True)

        _PhoneList = FormData.PhoneCollection

        If IsNothing(_PhoneList) Then
            _PhoneList = New InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection()
        End If        
    End Sub
     
    
        
    
#End Region







#Region "AutoPostBack Events Handles"



#End Region

#Region "UserControls Events Handles"

    



#End Region

#Region "Form Manager"

    Private Sub VerifySecurityLevel()

    End Sub

      

    Private Sub GetCurrentParameterInstance(ByRef TelefonosParameterInstance As TelefonosParameter, force As Boolean)
        If _loadcompleted Or force Then
            If Not _CurrentParameterInstance Then

                TelefonosParameterInstance = FormData

                If Page.IsPostBack Then
                    MapPageToClass(TelefonosParameterInstance)
                End If

                _CurrentParameterInstance = True
            Else
                TelefonosParameterInstance = _formData
            End If
        Else
            TelefonosParameterInstance = Nothing
        End If
    End Sub

    Protected Sub SetCurrentParameterInstance(ByRef TelefonosParameterInstance As TelefonosParameter, calledBy As String)
        FormData = TelefonosParameterInstance
        MapClassToPage(TelefonosParameterInstance,calledBy)
    End Sub

    Protected Sub SetErrors(errors As InMotionGIT.Common.Contracts.Errors.ErrorCollection)
        Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

        If IsNothing(errorList) Then
            errorList = New InMotionGIT.Common.Contracts.Errors.ErrorCollection
        End If

        errorList = errors

        ViewState("Errors") = errorList
        ShowErrors()
    End Sub

    Public Sub ShowErrors()
        If Not IsNothing(ViewState("Errors")) Then
            Dim errorList As InMotionGIT.Common.Contracts.Errors.ErrorCollection = ViewState("Errors")

            Dim queryOut = From lst In errorList Select lst Order By lst.ErrorId

            ErrorsGridView.Visible = True
            ErrorsGridView.DataSource = queryOut.ToList
            ErrorsGridView.DataBind()
            UpdatePanelErrors.Update()
        End If
    End Sub
   
    Private Sub ShowWindowPopupMessage(message As String)
        NotifyMessageLabel.Text = message
        popupNotifyMessage.ShowOnPageLoad = True
    End Sub

    Private Sub ClosePopupWindow()
        popControl.Windows(0).ShowOnPageLoad = False
    End Sub

    Private Sub GetTransferParameters()
        Dim fromDocumentCache As Object = Nothing

        If Not String.IsNullOrEmpty(Request.QueryString("fromid")) Then
            fromDocumentCache = Session( Request.QueryString("fromid"))
            Session.Remove(Request.QueryString("fromid"))
            
        Else
            fromDocumentCache = Session(Session("fromid"))
            Session.Remove(Session("fromid"))
            Session.Remove("fromid")   
        End If
        
        If Not IsNothing(fromDocumentCache) Then
            InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValue("PhoneCollection", fromDocumentCache, _formData)
            
        End If
    End Sub
    
    

    Private Sub SetDefaultValuesFromQueryString()

        
    End Sub
    
    Private Sub BehaviorControls(controlItem As Control, isEnable As Boolean)
        InMotionGIT.FrontOffice.Support.Helpers.ReflectionHandler.AssignPropertyValueSimple("Enabled", controlItem, isEnable)           
    End Sub
    
    Private Sub SetReadOnlyControls()
    
        BehaviorControls(btnADDPhone, False)
        BehaviorControls(Phone, False)
    
    End Sub
     
#End Region

#Region "Actions Data Methods"

    Private Function SessionTrace(message As String) As String

        If Not IsNothing(Session("Form.Track")) AndAlso Session("Form.Track").ToString.ToLower = "true" Then
            Dim tracelog As String = Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath)))

            tracelog += String.Format(CultureInfo.InvariantCulture, "{0} {1}<br>{2}", Now.ToString("hh:mm:ss.fff"), message, vbCrLf)
            Session(String.Format(CultureInfo.InvariantCulture, "Form.{0}.trace", IO.Path.GetFileNameWithoutExtension(Page.AppRelativeVirtualPath))) = tracelog
        End If

        Return message
    End Function
    
    Private Sub ControlsInitialization()
        Phone.ClientVisible = True
        Phone.Enabled = True

    End Sub     
  
    Private Sub ParametersToDictionary(ByRef target As Dictionary(Of String, Object))
        If IsNothing(target) Then
            target = New Dictionary(Of String, Object)

            target.Add("PhoneCollection", _formData.PhoneCollection) 

        Else
            target("PhoneCollection") = _formData.PhoneCollection 

        End If     
    End Sub
    
    
    
    

    
#End Region






End Class

<Serializable()>
Public Class TelefonosParameter
    Inherits InMotionGIT.FrontOffice.Support.DataType.FormBase(Of  TelefonosParameter)

    ' Methods
    Public Sub New()
        MyBase.New()
    End Sub

    ' Properties
    Public Property PhoneCollection As InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection


End Class