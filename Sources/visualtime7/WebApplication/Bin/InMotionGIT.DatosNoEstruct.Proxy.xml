<?xml version="1.0"?>
<doc>
<assembly>
<name>
InMotionGIT.DatosNoEstruct.Proxy
</name>
</assembly>
<members>
<member name="T:InMotionGIT.DatosNoEstruct.Proxy.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:InMotionGIT.DatosNoEstruct.Proxy.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:InMotionGIT.DatosNoEstruct.Proxy.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.AddSequence(InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.SequenceDTO,System.String,System.String)">
 <summary>
 Adds a sequence into the database.
 </summary>
 <param name="sequenceDTO">Sequence to process</param>
 <param name="accessToken">Access token</param>
 <returns>ComposedResourceKey</returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.GenerateSequence(System.String,System.String)">
 <summary>
 Generates a sequence into the database.
 </summary>
 <param name="accessToken">Access token</param>
 <returns>ComposedResourceKey</returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.AddTags(System.Collections.Generic.List{InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.TagDTO},InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo.ComposedResourceKey,System.String,System.String)">
 <summary>
 Adds a sequence into the database.
 </summary>
 <param name="tagsDTO">Tags to process</param>
 <param name="ComposedResourceKey">Sequence to process</param>
 <param name="accessToken">Access token</param>
 <returns>ComposedResourceKey</returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.DeleteResource(InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo.ComposedResourceKey,System.String,System.String)">
 <summary>
 Deletes the resource in the database.
 </summary>
 <param name="composedResourceKey">ComposedResourceKey to process</param>
 <param name="accessToken">Access token</param>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.DeleteResourceTemporarily(InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo.ComposedResourceKey,System.String,System.String)">
 <summary>
 Deletes resource marked as temporary from the database. // Elimina un recurso marcado como temporal de la Base de Datos
 </summary>
 <param name="composedResourceKey">ComposedResourceKey to process</param>
 <param name="accessToken">Access token</param>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.DeleteTemporaryResources(System.Int32,InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.ShortTagDTO,System.String,System.String)">
 <summary>
 Updates the state of a list of resources that are with temporary state to Deleted. //  Modifica el estado de una lista de recursos con estado temporario a estado activo.
 </summary>
 <param name="sequenceId">Sequence to process</param>
 <param name="accessToken">Access token</param>       
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.DeleteResourceIfOwner(InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo.ComposedResourceKey,System.String,System.String)">
 <summary>
 Deletes the resource in the database.
 </summary>
 <param name="composedResourceKey">ComposedResourceKey to process</param>
 <param name="accessToken">Access token</param>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.DeleteTags(InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo.ComposedResourceKey,System.Collections.Generic.List{System.Int32},System.String,System.String)">
 <summary>
 Deletes the resource in the database.
 </summary>
 <param name="composedResourceKey">ComposedResourceKey to process</param>
 <param name="accessToken">Access token</param>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.DeleteTagsIfOwner(InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo.ComposedResourceKey,System.Collections.Generic.List{System.Int32},System.String,System.String)">
 <summary>
 Deletes the resource in the database.
 </summary>
 <param name="composedResourceKey">ComposedResourceKey to process</param>
 <param name="accessToken">Access token</param>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.UpdateResource(InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.ResourceDTO,System.String,System.String)">
 <summary>
 Updates the resource in the database.
 </summary>
 <param name="resourceDTO">Resource to process</param>
 <param name="accessToken">Access token</param>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.UpdateResourceIfOwner(InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.ResourceDTO,System.String,System.String)">
 <summary>
 Updates the resource in the database.
 </summary>
 <param name="resourceDTO">Resource to process</param>
 <param name="accessToken">Access token</param>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.UpdateSequence(InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.SequenceDTO,System.String,System.String)">
 <summary>
 Updates the sequence in the database.
 </summary>
 <param name="sequeceDTO">Sequence to process</param>
 <param name="accessToken">Access token</param>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.ActivateTemporaryResources(System.Int32,InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.ShortTagDTO,System.String,System.String)">
 <summary>
 Converts a list of Resources that are with temporary state to Active
 </summary>
 <param name="sequenceId">Sequence to process</param>
 <param name="accessToken">Access token</param>       
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.RevertInsertionOfPreviousTemporaryStateItems(System.Int32,System.String,System.String)">
 <summary>
 Removes items with PreviousTemproary state and converts the backup records to active
 </summary>
 <param name="sequenceId">Sequence Id// Id Secuencia.</param>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.RevertDeleteTemporaryStateItems(System.Int32,System.String,System.String)">
 <summary>
 Removes items with Delete Temporary state and converts the backup records to active
 </summary>
 <param name="sequenceId">Sequence Id// Id Secuencia.</param>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.GetResource(InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo.ComposedResourceKey,System.String,System.String)">
 <summary>
 Gets Resource from the database.
 </summary>
 <param name="composedResourceKey">ComposedResourceKey to process</param>
 <param name="accessToken">Access token</param>
 <returns>ComposedResourceKey</returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.GetResourceContent(InMotionGIT.DatosNoEstruct.ContratoDeDatos.Modelo.ComposedResourceKey,System.String,System.String)">
 <summary>
 Gets Resource from the database.
 </summary>
 <param name="composedResourceKey">ComposedResourceKey to process</param>
 <param name="accessToken">Access token</param>
 <returns>ComposedResourceKey</returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.GetActiveResourceSequenceAndFormTemporals(System.Int32,System.Collections.Generic.List{InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.ShortTagDTO},System.String,System.Boolean,System.String)">
 <summary>
 Returns the active Resources(img, aud, doc, vid) and temporal resources that match the FormID tag. If tags are null, the elements retrieved will be the all ones related to the sequence.// Retorna los Recursos Activos(img, aud, doc, vid) asi como tambien los temporales que coinciden con el FormId tag. Si la variable de entrada(Tags) es nulo, se retornara todos los elementos relacionados a la secuencia. 
 </summary>
 <param name="sequenceId">Sequence to process</param>
 <param name="tags">Tag list used to filter elements</param>
 <param name="accessToken">Access token</param>
 <returns>ComposedResourceKey</returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.GetActiveResourceSequenceAndMyTemporals(System.Int32,System.Collections.Generic.List{InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.ShortTagDTO},System.String,System.Boolean,System.String)">
 <summary>
 Returns the Resources(img, aud, doc, vid) that match the tags. The elements to be retrieved are active. If tags are null, the elements retrieved will be the all ones related to the sequence. It will also return temporal elements related to the sequence // Retorna los Recursos (img, aud, doc, vid) que coinciden con los tags. Retorna tanto recursos activos . Si la variable de entrada(Tags) es nulo, se retornara todos los elementos relacionados a la secuencia. Retorna también los elementos temporales de la secuencia relacionados al usuario haciendo la consulta
 </summary>
 <param name="sequenceId">Sequence to process</param>
 <param name="tags">Tag list used to filter elements</param>
 <param name="accessToken">Access token</param>
 <returns>ComposedResourceKey</returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.GetOwnResourceSequenceActiveAndTemporaryState(System.Int32,System.Collections.Generic.List{InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.ShortTagDTO},System.String,System.Boolean,System.String)">
 <summary>
 Gets own Resource sequence from the database.
 </summary>
 <param name="sequenceId">Sequence to process</param>
 <param name="tags">Tag list used to filter elements</param>      
 <param name="accessToken">Access token</param>
 <returns>ComposedResourceKey</returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.GetResourceSequenceTemporaryStateOnly(System.Int32,System.Collections.Generic.List{InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.ShortTagDTO},System.String,System.Boolean,System.String)">
 <summary>
 Gets Resource sequence from the database.
 </summary>
 <param name="sequenceId">Sequence to process.</param>
 <param name="tags">Tag list used to filter elements</param>    
 <param name="accessToken">Access token</param>
 <returns>ComposedResourceKey</returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.GetNumberOfTemporaryResources(System.Int32,System.Collections.Generic.List{InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.ShortTagDTO},System.String,System.Boolean,System.String)">
 <summary>
 It obtains a Resource Sequence from the database only elements with temporary state. //  Obtiene una secuencia de Recursos con estado temporal de la Base de Datos.
 </summary>
 <param name="sequenceId">SequenceId. // Id Secuencia.</param>     
 <param name="tags">Tag list. // Lista de Etiquetas.</param>      
 <returns>Returns a list of NotaDTO related to the sequence. // Retorna una lista de NotaDTO relacionados a una secuencia. </returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.GetNumberOfActiveResources(System.Int32,System.Collections.Generic.List{InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.ShortTagDTO},System.String,System.Boolean,System.String)">
 <summary>
 It obtains a Resource Sequence from the database only elements with active state. //  Obtiene una secuencia de Recursos con estado activo de la Base de Datos.
 </summary>
 <param name="sequenceId">SequenceId. // Id Secuencia.</param>     
 <param name="tags">Tag list. // Lista de Etiquetas.</param>      
 <returns>Returns a list of NotaDTO related to the sequence. // Retorna una lista de NotaDTO relacionados a una secuencia. </returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.GetOwnResourceSequenceTemporaryStateOnly(System.Int32,System.Collections.Generic.List{InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.ShortTagDTO},System.String,System.Boolean,System.String)">
 <summary>
 Gets own Resource sequence from the database.
 </summary>
 <param name="sequenceId">Sequence to process</param>
 <param name="tags">Tag list used to filter elements</param>     
 <param name="accessToken">Access token</param>
 <returns>ComposedResourceKey</returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.GetFileExtensionsAllowed(System.String,System.String)">
 <summary>
 Obtiene la lista de extensiones permitidas por el servicio
 </summary>
 <param name="accessToken"></param>
 <returns></returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.GetTagsRelatedToResourceActiveAndTemporarySequence(System.Int32,System.String,System.String)">
 <summary>
 Obtiene los tags relacionados a Recursos dado un IdSecuencia
 </summary>
 <param name="accessToken"></param>
 <returns></returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.SequenceIdExist(System.Int32,System.String,System.String)">
 <summary>
 Verifies whether a SequenceId exist or not. // Verifica si un IdSequencia existe. 
 </summary>
 <param name="sequenceId">Sequence Id. // Id Secuencia.</param>   
 <returns>Returns true if SequenceId exist. // Retorna verdadero si la secuencia existe.</returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.SequenceExistInTags(System.Int32,System.String,System.String)">
 <summary>
  Obtains the sequence number if tag exist related to the caseId. // Obtiene el numero de sequence si existe algún tag asociado al IdCaso. 
 </summary>
 <param name="caseId">Case Id. // Id Secuencia.</param>   
 <returns>Returns true if SequenceId exist. // Retorna verdadero si la secuencia existe.</returns>
</member>
<member name="M:InMotionGIT.DatosNoEstruct.Proxy.DNE.OperationContracts.GetActiveResourceSequenceNote(System.Int32,System.String,System.String,System.Collections.Generic.List{InMotionGIT.DatosNoEstruct.ContratoDeDatos.DTOs.ShortTagDTO})">
 <summary>It obtains a Resource Sequence from the database only elements with active state. //  Obtiene una secuencia de Recursos con estado activo de la base de datos. </summary>
 <param name="sequenceId">SequenceId. // Id Secuencia.</param>
 <param name="accessToken">Access Token // Token de acceso.</param>
 <param name="provider">Provider // Proveedor.</param>
 <param name="tags">Tag list // Lista de etiquetas.</param>
 <returns>Resources List // Lista de recursos.</returns>
</member>
</members>
</doc>
