<?xml version="1.0"?>
<doc>
<assembly>
<name>
InMotionGIT.Policy.DataAccess
</name>
</assembly>
<members>
<member name="T:InMotionGIT.Policy.DataAccess.ActiveLife">
 <summary>
 Specific Information on Special Life Policies.
 </summary>
<remarks>Data-source is 'ACTIVELIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Synchronize(InMotionGIT.Policy.Entity.Contracts.ActiveLife,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Synchronize(InMotionGIT.Policy.Entity.Contracts.ActiveLife,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.ActiveLife,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.RetrieveByRecordTypePolicyNumberCertificate(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ActiveLife class</returns>
 <remarks>Datasource is 'XDELACTIVELIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.RetrieveByTypeOfDuration(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ActiveLife class</returns>
 <remarks>Datasource is 'XIF2217ACTIVELIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.RetrieveByTypeOfIndemnity(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ActiveLife class</returns>
 <remarks>Datasource is 'XIF1498ACTIVELIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.RetrieveByProfitabilityType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ActiveLife class</returns>
 <remarks>Datasource is 'XIF1330ACTIVELIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ActiveLife class</returns>
 <remarks>Datasource is 'XIF1948ACTIVELIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.RetrieveByRecordTypeLineOfBusinessProductCodePolicyNumberCertificate(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ActiveLife class</returns>
 <remarks>Datasource is 'XIF1729ACTIVELIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.ApplyChange(InMotionGIT.Policy.Entity.Contracts.ActiveLife,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ActiveLifeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.ApplyChange(InMotionGIT.Policy.Entity.Contracts.ActiveLife,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ActiveLifeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.ActiveLife,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ActiveLifeItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.ActiveLife,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ActiveLifeItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Synchronize(InMotionGIT.Policy.Entity.Contracts.ActiveLifeCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ActiveLife.Synchronize(InMotionGIT.Policy.Entity.Contracts.ActiveLifeCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy">
 <summary>
 Details for automatic payment by bank or credit card associated with the policy.
 </summary>
<remarks>Data-source is 'DIR_DEBIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.RetrieveByAuthorizationNumberRecordEffectiveDate(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomaticPaymentPolicy class</returns>
 <remarks>Datasource is 'XIE1DIR_DEBIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.RetrieveByBankCode(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomaticPaymentPolicy class</returns>
 <remarks>Datasource is 'XIF2177DIR_DEBIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.RetrieveByCreditCardType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomaticPaymentPolicy class</returns>
 <remarks>Datasource is 'XIF1282DIR_DEBIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomaticPaymentPolicy class</returns>
 <remarks>Datasource is 'XIF2176DIR_DEBIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomaticPaymentPolicy class</returns>
 <remarks>Datasource is 'XIF4DIR_DEBIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="AutomaticPaymentPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="AutomaticPaymentPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="AutomaticPaymentPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicy,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="AutomaticPaymentPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomaticPaymentPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.AutomaticPaymentPolicyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.AutomobileInformation">
 <summary>
 Contains all information from the automobile.
 </summary>
<remarks>Data-source is 'AUTO_DB'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.Synchronize(InMotionGIT.Policy.Entity.Contracts.AutomobileInformation,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.Synchronize(InMotionGIT.Policy.Entity.Contracts.AutomobileInformation,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.AutomobileInformation,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.RetrieveByLicensePlate(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileInformation class</returns>
 <remarks>Datasource is 'XIE3AUTO_DB'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.RetrieveByChassis(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileInformation class</returns>
 <remarks>Datasource is 'XIE2AUTO_DB'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.RetrieveByVehicleCode(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileInformation class</returns>
 <remarks>Datasource is 'XIF2036AUTO_DB'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.RetrieveByEngineSerialNumber(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileInformation class</returns>
 <remarks>Datasource is 'XIE1AUTO_DB'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.RetrieveByLicensePlateType(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileInformation class</returns>
 <remarks>Datasource is 'XIF2029AUTO_DB'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.RetrieveByTypeOfSpecialLicensePlates(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileInformation class</returns>
 <remarks>Datasource is 'XIF2039AUTO_DB'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.RetrieveBynVestatus(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileInformation class</returns>
 <remarks>Datasource is 'XIF784AUTO_DB'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.RetrieveByVehicleType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileInformation class</returns>
 <remarks>Datasource is 'XIF438AUTO_DB'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.RetrieveByVehicleOwner(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileInformation class</returns>
 <remarks>Datasource is 'XIF2034AUTO_DB'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileInformation class</returns>
 <remarks>Datasource is 'XIF2035AUTO_DB'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.Find(System.String,System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.Find(System.String,System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.ApplyChange(InMotionGIT.Policy.Entity.Contracts.AutomobileInformation,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="AutomobileInformationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.ApplyChange(InMotionGIT.Policy.Entity.Contracts.AutomobileInformation,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="AutomobileInformationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.Synchronize(InMotionGIT.Policy.Entity.Contracts.AutomobileInformationCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.Synchronize(InMotionGIT.Policy.Entity.Contracts.AutomobileInformationCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.String)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileInformation.LicensePlateSequence(System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness">
 <summary>
 Particular information on automobile policies.
 </summary>
<remarks>Data-source is 'AUTO'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.AutomobileLineOfBusiness,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.AutomobileLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.AutomobileLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileLineOfBusiness class</returns>
 <remarks>Datasource is 'XDELAUTO'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.RetrieveByVehicleCode(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF408AUTO'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.RetrieveByRecordTypePolicyIDCertificateIDLineOfBusinessProductCode(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF1895AUTO'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.RetrieveByLicensePlateLicensePlateType(System.String,System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2031AUTO'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDDivision(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2033AUTO'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF1AUTO'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.RetrieveByLicensePlateTypeLicensePlate(System.String,System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2AUTO'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.RetrieveByTypeOfSpecialLicensePlates(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2038AUTO'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.RetrieveByDrivingZone(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF754AUTO'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.RetrieveByVehicleType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF407AUTO'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.RetrieveByCancellationCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2032AUTO'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AutomobileLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2028AUTO'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.AutomobileLineOfBusiness,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="AutomobileLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.AutomobileLineOfBusiness,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="AutomobileLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.AutomobileLineOfBusiness,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="AutomobileLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.AutomobileLineOfBusiness,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="AutomobileLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.CustomString">
 <summary>
 Extensibility custom string property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.CustomStringEx">
 <summary>
 Extensibility custom string ex property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.CustomNumeric">
 <summary>
 Extensibility custom decimal property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.CustomNumericEx">
 <summary>
 Extensibility custom decimal ex property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.CustomDate">
 <summary>
 Extensibility custom date property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.CustomDateEx">
 <summary>
 Extensibility custom date ex property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.CustomBoolean">
 <summary>
 Extensibility custom boolean property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.CustomBooleanEx">
 <summary>
 Extensibility custom boolean ex property.
 </summary>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.AutomobileLineOfBusinessCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.AutomobileLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.AutomobileLineOfBusinessCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.BasicInsuredAmount">
 <summary>
 Basic sums insured of the policy/certificate.
 </summary>
<remarks>Data-source is 'SUM_INSUR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Synchronize(InMotionGIT.Policy.Entity.Contracts.BasicInsuredAmount,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Synchronize(InMotionGIT.Policy.Entity.Contracts.BasicInsuredAmount,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.BasicInsuredAmount,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.RetrieveByRecordTypePolicyIDCertificateIDProductCodeLineOfBusiness(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for BasicInsuredAmount class</returns>
 <remarks>Datasource is 'XIF91SUM_INSUR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for BasicInsuredAmount class</returns>
 <remarks>Datasource is 'XDELSUM_INSUR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for BasicInsuredAmount class</returns>
 <remarks>Datasource is 'XIF1SUM_INSUR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.ApplyChange(InMotionGIT.Policy.Entity.Contracts.BasicInsuredAmount,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="BasicInsuredAmountItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.ApplyChange(InMotionGIT.Policy.Entity.Contracts.BasicInsuredAmount,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="BasicInsuredAmountItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.BasicInsuredAmount,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="BasicInsuredAmountItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.BasicInsuredAmount,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="BasicInsuredAmountItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Synchronize(InMotionGIT.Policy.Entity.Contracts.BasicInsuredAmountCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.BasicInsuredAmount.Synchronize(InMotionGIT.Policy.Entity.Contracts.BasicInsuredAmountCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Beneficiary">
 <summary>
 Beneficiaries of a policy or certificate of a group.
 </summary>
<remarks>Data-source is 'BENEFICIAR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Synchronize(InMotionGIT.Policy.Entity.Contracts.Beneficiary,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Synchronize(InMotionGIT.Policy.Entity.Contracts.Beneficiary,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Beneficiary,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.RetrieveByRecordTypePolicyIDCertificateIDProductCodeLineOfBusiness(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Beneficiary class</returns>
 <remarks>Datasource is 'XIF92BENEFICIAR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Beneficiary class</returns>
 <remarks>Datasource is 'XDELBENEFICIAR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.RetrieveByRelationship(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Beneficiary class</returns>
 <remarks>Datasource is 'XIF94BENEFICIAR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Beneficiary class</returns>
 <remarks>Datasource is 'XIF109BENEFICIAR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Beneficiary class</returns>
 <remarks>Datasource is 'XIF3BENEFICIAR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Beneficiary,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="BeneficiaryItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Beneficiary,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="BeneficiaryItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Beneficiary,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="BeneficiaryItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Beneficiary,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="BeneficiaryItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Synchronize(InMotionGIT.Policy.Entity.Contracts.BeneficiaryCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Beneficiary.Synchronize(InMotionGIT.Policy.Entity.Contracts.BeneficiaryCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.String,System.DateTime,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Clause">
 <summary>
 Clause of a policy/Certificate.
 </summary>
<remarks>Data-source is 'CLAUSE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Synchronize(InMotionGIT.Policy.Entity.Contracts.Clause,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Synchronize(InMotionGIT.Policy.Entity.Contracts.Clause,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Clause,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Clause class</returns>
 <remarks>Datasource is 'XDELCLAUSE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.RetrieveByCause(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Clause class</returns>
 <remarks>Datasource is 'XIF2333CLAUSE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Clause class</returns>
 <remarks>Datasource is 'XIF2262CLAUSE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Clause,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ClauseItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Clause,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ClauseItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Clause,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ClauseItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Clause,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ClauseItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Synchronize(InMotionGIT.Policy.Entity.Contracts.ClauseCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Clause.Synchronize(InMotionGIT.Policy.Entity.Contracts.ClauseCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Client_tmp">
 <summary>
 Temporary list of Clients (Group quotation).
 </summary>
<remarks>Data-source is 'CLIENT_TMP'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Synchronize(InMotionGIT.Policy.Entity.Contracts.Client_tmp,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Synchronize(InMotionGIT.Policy.Entity.Contracts.Client_tmp,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Client_tmp,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.RetrieveByRecordTypePolicyNumber(System.String,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Client_tmp class</returns>
 <remarks>Datasource is 'XDELCLIENT_TMP'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.RetrieveByClientRole(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Client_tmp class</returns>
 <remarks>Datasource is 'XIF1886CLIENT_TMP'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.RetrieveByRecordTypeLineOfBusinessProductCodePolicyNumber(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Client_tmp class</returns>
 <remarks>Datasource is 'XIF1887CLIENT_TMP'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Client_tmp,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="Client_tmpItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Client_tmp,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="Client_tmpItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Synchronize(InMotionGIT.Policy.Entity.Contracts.Client_tmpCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Client_tmp.Synchronize(InMotionGIT.Policy.Entity.Contracts.Client_tmpCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.CoInsurance">
 <summary>
 Distribution co-insurance in a policy.
 </summary>
<remarks>Data-source is 'COINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoInsurance,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoInsurance,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.CoInsurance,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.RetrieveByRecordTypePolicyIDProductCodeLineOfBusiness(System.String,System.Int64,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoInsurance class</returns>
 <remarks>Datasource is 'XIF68COINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.RetrieveByRecordTypePolicyID(System.String,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoInsurance class</returns>
 <remarks>Datasource is 'XDELCOINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.RetrieveByRecordTypeLineOfBusinessProductCodePolicyID(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoInsurance class</returns>
 <remarks>Datasource is 'XIF1COINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.RetrieveByCompany(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoInsurance class</returns>
 <remarks>Datasource is 'XIF67COINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CoInsurance,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CoInsuranceItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CoInsurance,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CoInsuranceItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.CoInsurance,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CoInsuranceItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.CoInsurance,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CoInsuranceItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoInsuranceCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoInsurance.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoInsuranceCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Commission">
 <summary>
 Commissions of a policy.
 </summary>
<remarks>Data-source is 'COMMISSION'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Synchronize(InMotionGIT.Policy.Entity.Contracts.Commission,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Synchronize(InMotionGIT.Policy.Entity.Contracts.Commission,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Commission,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Commission class</returns>
 <remarks>Datasource is 'XDELCOMMISSION'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.RetrieveByCommissionType(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Commission class</returns>
 <remarks>Datasource is 'XIF2292COMMISSION'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.RetrieveByProducerType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Commission class</returns>
 <remarks>Datasource is 'XIF1596COMMISSION'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.RetrieveByProducerCode(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Commission class</returns>
 <remarks>Datasource is 'XIF104COMMISSION'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Commission class</returns>
 <remarks>Datasource is 'XIF2133COMMISSION'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Commission,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CommissionItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Commission,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CommissionItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Commission,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CommissionItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Commission,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CommissionItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Synchronize(InMotionGIT.Policy.Entity.Contracts.CommissionCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Commission.Synchronize(InMotionGIT.Policy.Entity.Contracts.CommissionCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.CommissionPerPolicy">
 <summary>
 Commissions per policy.
 </summary>
<remarks>Data-source is 'COMM_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.CommissionPerPolicy,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.CommissionPerPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.CommissionPerPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.RetrieveByTypeOfEntry(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CommissionPerPolicy class</returns>
 <remarks>Datasource is 'XIF2003COMM_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.RetrieveByCommissionsEntryType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CommissionPerPolicy class</returns>
 <remarks>Datasource is 'XIF1845COMM_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.RetrieveByStatus(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CommissionPerPolicy class</returns>
 <remarks>Datasource is 'XIF1846COMM_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.RetrieveByTransaction(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CommissionPerPolicy class</returns>
 <remarks>Datasource is 'XIF2002COMM_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.RetrieveByProducerCode(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CommissionPerPolicy class</returns>
 <remarks>Datasource is 'XIF1844COMM_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CommissionPerPolicy class</returns>
 <remarks>Datasource is 'XIE1COMM_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32,System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32,System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32,System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32,System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32,System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Find(System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CommissionPerPolicy,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CommissionPerPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CommissionPerPolicy,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CommissionPerPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.CommissionPerPolicyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CommissionPerPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.CommissionPerPolicyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Counterguarantee">
 <summary>
 Counterguarantees of a policy/certificate.
 </summary>
<remarks>Data-source is 'WARRANTY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Synchronize(InMotionGIT.Policy.Entity.Contracts.Counterguarantee,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Synchronize(InMotionGIT.Policy.Entity.Contracts.Counterguarantee,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Counterguarantee,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.RetrieveByRecordEffectiveDateProductCodeLineOfBusinessRecordTypePolicyIDCertificateIDConsecutiveNumber(System.Int32,System.Int32,System.String,System.Int64,System.Int64,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Counterguarantee class</returns>
 <remarks>Datasource is 'XPKWARRANTY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.RetrieveByTypeOfCounterguaranty(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Counterguarantee class</returns>
 <remarks>Datasource is 'XIF1WARRANTY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Counterguarantee,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CounterguaranteeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Counterguarantee,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CounterguaranteeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Counterguarantee,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CounterguaranteeItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Counterguarantee,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CounterguaranteeItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Synchronize(InMotionGIT.Policy.Entity.Contracts.CounterguaranteeCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Counterguarantee.Synchronize(InMotionGIT.Policy.Entity.Contracts.CounterguaranteeCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Coverage">
 <summary>
 Coverages of a policy.
 </summary>
<remarks>Data-source is 'COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.Coverage,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.Coverage,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Coverage,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XDELCOVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveByRecordTypeCoverageCodeClientID(System.String,System.Int32,System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XIE1COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveByClientIDLineOfBusinessProductCodeCoverageModuleCoverageCode(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XIE4COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveByFranchiseOrDeductibleIndicator(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XIF1COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveByTypeOfInsuranceDuration(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XIF2COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveByTypeOfDurationOfPayments(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XIF3COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveBynCauseUpd(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XIF4COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveByTypeOfPremiumRecalculation(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XIF5COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveByReinsuranceLineOfBusiness(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XIF6COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveByUnitsOfWaitingPeriod(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XIF7COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveByFranchiseOrDeductible(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XIF8COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveByClientRole(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XIF9COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XIF10COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Coverage class</returns>
 <remarks>Datasource is 'XIF11COVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Coverage,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CoverageItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Coverage,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CoverageItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Coverage,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CoverageItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Coverage,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CoverageItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoverageCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Coverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoverageCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.CoverageGroup">
 <summary>
 Coverages related with a group.
 </summary>
<remarks>Data-source is 'COVER_CO_G'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoverageGroup,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoverageGroup,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.CoverageGroup,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.RetrieveByRecordTypePolicyID(System.String,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoverageGroup class</returns>
 <remarks>Datasource is 'XDELCOVER_CO_G'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.RetrieveByFranchiseOrDeductibleIndicator(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoverageGroup class</returns>
 <remarks>Datasource is 'XIF1COVER_CO_G'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.RetrieveByTypeOfInsuranceDuration(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoverageGroup class</returns>
 <remarks>Datasource is 'XIF2COVER_CO_G'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.RetrieveByTypeOfDurationOfPayments(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoverageGroup class</returns>
 <remarks>Datasource is 'XIF3COVER_CO_G'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.RetrieveByTypeOfPremiumRecalculation(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoverageGroup class</returns>
 <remarks>Datasource is 'XIF4COVER_CO_G'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.RetrieveByReinsuranceLineOfBusiness(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoverageGroup class</returns>
 <remarks>Datasource is 'XIF5COVER_CO_G'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.RetrieveByTypeOfEliminationPeriod(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoverageGroup class</returns>
 <remarks>Datasource is 'XIF6COVER_CO_G'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.RetrieveByFranchiseOrDeductible(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoverageGroup class</returns>
 <remarks>Datasource is 'XIF7COVER_CO_G'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.RetrieveByClientRole(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoverageGroup class</returns>
 <remarks>Datasource is 'XIF8COVER_CO_G'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.RetrieveByRecordTypeLineOfBusinessProductCodePolicyID(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoverageGroup class</returns>
 <remarks>Datasource is 'XIF9COVER_CO_G'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CoverageGroup,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CoverageGroupItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CoverageGroup,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CoverageGroupItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.CoverageGroup,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CoverageGroupItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.CoverageGroup,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CoverageGroupItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoverageGroupCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageGroup.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoverageGroupCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.CoveragePolicy">
 <summary>
 Coverages related with a policy.
 </summary>
<remarks>Data-source is 'COVER_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoveragePolicy,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoveragePolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.CoveragePolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.RetrieveByRecordTypePolicyID(System.String,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoveragePolicy class</returns>
 <remarks>Datasource is 'XDELCOVER_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.RetrieveByTypeOfDurationOfPayments(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoveragePolicy class</returns>
 <remarks>Datasource is 'XIF1COVER_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.RetrieveByTypeOfInsuranceDuration(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoveragePolicy class</returns>
 <remarks>Datasource is 'XIF2COVER_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.RetrieveByTypeOfPremiumRecalculation(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoveragePolicy class</returns>
 <remarks>Datasource is 'XIF3COVER_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.RetrieveByReinsuranceLineOfBusiness(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoveragePolicy class</returns>
 <remarks>Datasource is 'XIF4COVER_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.RetrieveByTypeOfEliminationPeriod(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoveragePolicy class</returns>
 <remarks>Datasource is 'XIF5COVER_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.RetrieveByFranchiseOrDeductible(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoveragePolicy class</returns>
 <remarks>Datasource is 'XIF6COVER_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.RetrieveByRole(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoveragePolicy class</returns>
 <remarks>Datasource is 'XIF7COVER_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.RetrieveByRecordTypeLineOfBusinessProductCodePolicyID(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoveragePolicy class</returns>
 <remarks>Datasource is 'XIF8COVER_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.RetrieveByFranchiseOrDeductibleIndicator(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoveragePolicy class</returns>
 <remarks>Datasource is 'XIF9COVER_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CoveragePolicy,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CoveragePolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CoveragePolicy,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CoveragePolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.CoveragePolicy,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CoveragePolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.CoveragePolicy,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CoveragePolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoveragePolicyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoveragePolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoveragePolicyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.CoverageWithCalculatedPremium">
 <summary>
 Temporary Table used to Calculate The Following Cover's Components Sum Insured/ Premium Amount/ Franchise/ Deductible.
 </summary>
<remarks>Data-source is 'TCOVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageWithCalculatedPremium.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremium,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageWithCalculatedPremium.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremium,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageWithCalculatedPremium.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremium,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageWithCalculatedPremium.RetrieveByKeyRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoverageWithCalculatedPremium class</returns>
 <remarks>Datasource is 'XIE2TCOVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageWithCalculatedPremium.RetrieveByKeyRecordTypeLineOfBusinessProductCodeGroupClientRole(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoverageWithCalculatedPremium class</returns>
 <remarks>Datasource is 'XIE1TCOVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageWithCalculatedPremium.RetrieveByKey(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CoverageWithCalculatedPremium class</returns>
 <remarks>Datasource is 'XIE3TCOVER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageWithCalculatedPremium.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremium,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CoverageWithCalculatedPremiumItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageWithCalculatedPremium.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremium,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CoverageWithCalculatedPremiumItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageWithCalculatedPremium.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageWithCalculatedPremium.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageWithCalculatedPremium.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremiumCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CoverageWithCalculatedPremium.Synchronize(InMotionGIT.Policy.Entity.Contracts.CoverageWithCalculatedPremiumCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness">
 <summary>
 Particular information about credit and fidelity.
 </summary>
<remarks>Data-source is 'CREDIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.CreditLineOfBusiness,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.CreditLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.CreditLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.RetrieveByTimeUnits(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CreditLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF1CREDIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.RetrieveByForm(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CreditLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2CREDIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.RetrieveByBondType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CreditLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF3CREDIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CreditLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF4CREDIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CreditLineOfBusiness,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CreditLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CreditLineOfBusiness,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CreditLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.CreditLineOfBusiness,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CreditLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.CreditLineOfBusiness,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CreditLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.CreditLineOfBusinessCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CreditLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.CreditLineOfBusinessCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.CurrencyPolicy">
 <summary>
 Currencies associated with the policy/certificated.
 </summary>
<remarks>Data-source is 'CURREN_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.CurrencyPolicy,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.CurrencyPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.CurrencyPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CurrencyPolicy class</returns>
 <remarks>Datasource is 'XDELCURREN_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CurrencyPolicy class</returns>
 <remarks>Datasource is 'XIF1CURREN_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CurrencyPolicy,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CurrencyPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.CurrencyPolicy,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CurrencyPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.CurrencyPolicy,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CurrencyPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.CurrencyPolicy,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CurrencyPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.CurrencyPolicyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.CurrencyPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.CurrencyPolicyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported">
 <summary>
 Detail of the merchandise transported in a stage of the itinerary.
 </summary>
<remarks>Data-source is 'TRAN_STAGEDET'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Synchronize(InMotionGIT.Policy.Entity.Contracts.DetailMerchandiseTransported,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Synchronize(InMotionGIT.Policy.Entity.Contracts.DetailMerchandiseTransported,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.DetailMerchandiseTransported,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.ApplyChange(InMotionGIT.Policy.Entity.Contracts.DetailMerchandiseTransported,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DetailMerchandiseTransportedItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.ApplyChange(InMotionGIT.Policy.Entity.Contracts.DetailMerchandiseTransported,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DetailMerchandiseTransportedItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.DetailMerchandiseTransported,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="DetailMerchandiseTransportedItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.DetailMerchandiseTransported,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="DetailMerchandiseTransportedItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Synchronize(InMotionGIT.Policy.Entity.Contracts.DetailMerchandiseTransportedCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DetailMerchandiseTransported.Synchronize(InMotionGIT.Policy.Entity.Contracts.DetailMerchandiseTransportedCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel">
 <summary>
 Discounts / surcharges / taxes-defined in a group.
 </summary>
<remarks>Data-source is 'DISC_XPRE_G'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Synchronize(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInGroupLevel,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Synchronize(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInGroupLevel,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInGroupLevel,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.RetrieveByRecordTypePolicyIDDivisionProductCodeLineOfBusiness(System.String,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DiscountExtraPremiumTaxInGroupLevel class</returns>
 <remarks>Datasource is 'XIF98DISC_XPRE_G'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.ApplyChange(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInGroupLevel,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DiscountExtraPremiumTaxInGroupLevelItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.ApplyChange(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInGroupLevel,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DiscountExtraPremiumTaxInGroupLevelItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInGroupLevel,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="DiscountExtraPremiumTaxInGroupLevelItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInGroupLevel,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="DiscountExtraPremiumTaxInGroupLevelItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Synchronize(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInGroupLevelCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInGroupLevel.Synchronize(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInGroupLevelCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel">
 <summary>
 Discounts / surcharges / taxes-defined in a policy.
 </summary>
<remarks>Data-source is 'DISC_XPRE_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Synchronize(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInPolicyLevel,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Synchronize(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInPolicyLevel,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInPolicyLevel,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.RetrieveByRecordTypePolicyIDProductCodeLineOfBusiness(System.String,System.Int64,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DiscountExtraPremiumTaxInPolicyLevel class</returns>
 <remarks>Datasource is 'XIF99DISC_XPRE_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.RetrieveByRecordTypePolicyID(System.String,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DiscountExtraPremiumTaxInPolicyLevel class</returns>
 <remarks>Datasource is 'XDELDISC_XPRE_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.RetrieveByRecordTypeLineOfBusinessProductCodePolicyID(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DiscountExtraPremiumTaxInPolicyLevel class</returns>
 <remarks>Datasource is 'XIF1DISC_XPRE_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.ApplyChange(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInPolicyLevel,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DiscountExtraPremiumTaxInPolicyLevelItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.ApplyChange(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInPolicyLevel,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DiscountExtraPremiumTaxInPolicyLevelItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInPolicyLevel,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="DiscountExtraPremiumTaxInPolicyLevelItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInPolicyLevel,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="DiscountExtraPremiumTaxInPolicyLevelItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Synchronize(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInPolicyLevelCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxInPolicyLevel.Synchronize(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxInPolicyLevelCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy">
 <summary>
 Extra-premiums/technical discounts/taxes of a policy/certificate.
 </summary>
<remarks>Data-source is 'DISC_XPREM'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxOfPolicy,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxOfPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxOfPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DiscountExtraPremiumTaxOfPolicy class</returns>
 <remarks>Datasource is 'XDELDISC_XPREM'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.RetrieveByReason(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DiscountExtraPremiumTaxOfPolicy class</returns>
 <remarks>Datasource is 'XIF1DISC_XPREM'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DiscountExtraPremiumTaxOfPolicy class</returns>
 <remarks>Datasource is 'XIF2DISC_XPREM'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxOfPolicy,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DiscountExtraPremiumTaxOfPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxOfPolicy,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DiscountExtraPremiumTaxOfPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxOfPolicy,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="DiscountExtraPremiumTaxOfPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxOfPolicy,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="DiscountExtraPremiumTaxOfPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxOfPolicyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DiscountExtraPremiumTaxOfPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.DiscountExtraPremiumTaxOfPolicyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy">
 <summary>
 Documents requested in life policies.
 </summary>
<remarks>Data-source is 'LIFE_DOCU'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.DocumentRequestedLifePolicy,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.DocumentRequestedLifePolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.DocumentRequestedLifePolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DocumentRequestedLifePolicy class</returns>
 <remarks>Datasource is 'XDELLIFE_DOCU'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.RetrieveByRecordTypeLineOfBusinessPolicyIDCertificateIDProductCode(System.String,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DocumentRequestedLifePolicy class</returns>
 <remarks>Datasource is 'XIF1743LIFE_DOCU'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.RetrieveByDocumentStatus(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DocumentRequestedLifePolicy class</returns>
 <remarks>Datasource is 'XIF2019LIFE_DOCU'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.RetrieveByClientRole(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DocumentRequestedLifePolicy class</returns>
 <remarks>Datasource is 'XIF1744LIFE_DOCU'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.RetrieveByEvaluationID(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DocumentRequestedLifePolicy class</returns>
 <remarks>Datasource is 'XIF2046LIFE_DOCU'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DocumentRequestedLifePolicy class</returns>
 <remarks>Datasource is 'XIF1745LIFE_DOCU'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DocumentRequestedLifePolicy class</returns>
 <remarks>Datasource is 'XIF5LIFE_DOCU'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.DocumentRequestedLifePolicy,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DocumentRequestedLifePolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.DocumentRequestedLifePolicy,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DocumentRequestedLifePolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.DocumentRequestedLifePolicy,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="DocumentRequestedLifePolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.DocumentRequestedLifePolicy,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="DocumentRequestedLifePolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.DocumentRequestedLifePolicyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DocumentRequestedLifePolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.DocumentRequestedLifePolicyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT">
 <summary>
 
 </summary>
<remarks>Data-source is 'DYNAMICS_TABLE_CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Synchronize(InMotionGIT.Policy.Entity.Contracts.DYNAMICS_TABLE_CERTIFICAT,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Synchronize(InMotionGIT.Policy.Entity.Contracts.DYNAMICS_TABLE_CERTIFICAT,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.DYNAMICS_TABLE_CERTIFICAT,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.RetrieveByInterfaceCodeFieldCode(System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for DYNAMICS_TABLE_CERTIFICAT class</returns>
 <remarks>Datasource is 'XIF1DYNAMICS_TABLE_CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.ApplyChange(InMotionGIT.Policy.Entity.Contracts.DYNAMICS_TABLE_CERTIFICAT,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DYNAMICS_TABLE_CERTIFICATItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.ApplyChange(InMotionGIT.Policy.Entity.Contracts.DYNAMICS_TABLE_CERTIFICAT,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DYNAMICS_TABLE_CERTIFICATItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.DYNAMICS_TABLE_CERTIFICAT,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="DYNAMICS_TABLE_CERTIFICATItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.DYNAMICS_TABLE_CERTIFICAT,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="DYNAMICS_TABLE_CERTIFICATItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Synchronize(InMotionGIT.Policy.Entity.Contracts.DYNAMICS_TABLE_CERTIFICATCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.DYNAMICS_TABLE_CERTIFICAT.Synchronize(InMotionGIT.Policy.Entity.Contracts.DYNAMICS_TABLE_CERTIFICATCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund">
 <summary>
 Entries of policies investment funds.
 </summary>
<remarks>Data-source is 'MOVE_FUND'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Synchronize(InMotionGIT.Policy.Entity.Contracts.EntryPolicyInvestmentFund,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Synchronize(InMotionGIT.Policy.Entity.Contracts.EntryPolicyInvestmentFund,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.EntryPolicyInvestmentFund,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.RetrieveByEntryDatePolicyIDCertificateIDInvestmentFundSourceAccount(System.DateTime,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for EntryPolicyInvestmentFund class</returns>
 <remarks>Datasource is 'XIE2MOVE_FUND'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for EntryPolicyInvestmentFund class</returns>
 <remarks>Datasource is 'XDELMOVE_FUND'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for EntryPolicyInvestmentFund class</returns>
 <remarks>Datasource is 'XIF1MOVE_FUND'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.RetrieveByTypeOfEntry(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for EntryPolicyInvestmentFund class</returns>
 <remarks>Datasource is 'XIF831MOVE_FUND'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.RetrieveByInvestmentFund(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for EntryPolicyInvestmentFund class</returns>
 <remarks>Datasource is 'XIF829MOVE_FUND'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.ApplyChange(InMotionGIT.Policy.Entity.Contracts.EntryPolicyInvestmentFund,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="EntryPolicyInvestmentFundItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.ApplyChange(InMotionGIT.Policy.Entity.Contracts.EntryPolicyInvestmentFund,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="EntryPolicyInvestmentFundItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Synchronize(InMotionGIT.Policy.Entity.Contracts.EntryPolicyInvestmentFundCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.EntryPolicyInvestmentFund.Synchronize(InMotionGIT.Policy.Entity.Contracts.EntryPolicyInvestmentFundCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Int32,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy">
 <summary>
 Excluded illness (Health Policy).
 </summary>
<remarks>Data-source is 'TAB_AM_EXC'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.ExcludedIllnessInHealthPolicy,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.ExcludedIllnessInHealthPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.ExcludedIllnessInHealthPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.RetrieveByExclusionCause(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ExcludedIllnessInHealthPolicy class</returns>
 <remarks>Datasource is 'XIF797TAB_AM_EXC'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.RetrieveByIllness(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ExcludedIllnessInHealthPolicy class</returns>
 <remarks>Datasource is 'XIF798TAB_AM_EXC'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ExcludedIllnessInHealthPolicy class</returns>
 <remarks>Datasource is 'XIF2313TAB_AM_EXC'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ExcludedIllnessInHealthPolicy class</returns>
 <remarks>Datasource is 'XIF4TAB_AM_EXC'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.ExcludedIllnessInHealthPolicy,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ExcludedIllnessInHealthPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.ExcludedIllnessInHealthPolicy,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ExcludedIllnessInHealthPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.ExcludedIllnessInHealthPolicy,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ExcludedIllnessInHealthPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.ExcludedIllnessInHealthPolicy,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ExcludedIllnessInHealthPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.ExcludedIllnessInHealthPolicyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExcludedIllnessInHealthPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.ExcludedIllnessInHealthPolicyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured">
 <summary>
 Surcharges / Discounts by insured person and coverage.
 </summary>
<remarks>Data-source is 'INSURED_EXPDIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Synchronize(InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountByInsured,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Synchronize(InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountByInsured,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountByInsured,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ExtraPremiumDiscountByInsured class</returns>
 <remarks>Datasource is 'XDELINSURED_EXPDIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.RetrieveByUserCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ExtraPremiumDiscountByInsured class</returns>
 <remarks>Datasource is 'XIF1625INSURED_EXPDIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ExtraPremiumDiscountByInsured class</returns>
 <remarks>Datasource is 'XIF1624INSURED_EXPDIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ExtraPremiumDiscountByInsured class</returns>
 <remarks>Datasource is 'XIF1623INSURED_EXPDIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.ApplyChange(InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountByInsured,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ExtraPremiumDiscountByInsuredItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.ApplyChange(InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountByInsured,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ExtraPremiumDiscountByInsuredItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountByInsured,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ExtraPremiumDiscountByInsuredItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountByInsured,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ExtraPremiumDiscountByInsuredItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Synchronize(InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountByInsuredCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ExtraPremiumDiscountByInsured.Synchronize(InMotionGIT.Policy.Entity.Contracts.ExtraPremiumDiscountByInsuredCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.FireLineOfBusiness">
 <summary>
 Particular information on fire policies.
 </summary>
<remarks>Data-source is 'FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusiness,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XDELFIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveByArticleDetailArt(System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF1FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveByFrequencyOfValueReporting(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF3FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2098FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveBySideClosureType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF5FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveByRoofType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF6FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveByTypeOfSeismicConstruction(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF7FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveBySpontaneousCombustionType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF8FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveByActivityCategory(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF9FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveByActivityType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF10FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveByFamily(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF11FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveBySeismicZone(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF12FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveByConstructionClass(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF13FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.RetrieveByValueReportingType(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FireLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF14FIRE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusiness,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FireLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusiness,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FireLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusiness,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="FireLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusiness,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="FireLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusinessCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusinessCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration">
 <summary>
 Declarations in the fire line of business.
 </summary>
<remarks>Data-source is 'FIRE_DECLA'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Synchronize(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusinessDeclaration,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Synchronize(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusinessDeclaration,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusinessDeclaration,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Find(System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Find(System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Find(System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Find(System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Find(System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Find(System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Find(System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Find(System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Find(System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Find(System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.ApplyChange(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusinessDeclaration,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FireLineOfBusinessDeclarationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.ApplyChange(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusinessDeclaration,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FireLineOfBusinessDeclarationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusinessDeclaration,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="FireLineOfBusinessDeclarationItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusinessDeclaration,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="FireLineOfBusinessDeclarationItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Synchronize(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusinessDeclarationCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FireLineOfBusinessDeclaration.Synchronize(InMotionGIT.Policy.Entity.Contracts.FireLineOfBusinessDeclarationCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.FlatRateOFTax">
 <summary>
 Table of flat rates of tax.
 </summary>
<remarks>Data-source is 'TAX_FIXVAL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.Synchronize(InMotionGIT.Policy.Entity.Contracts.FlatRateOFTax,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.Synchronize(InMotionGIT.Policy.Entity.Contracts.FlatRateOFTax,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.FlatRateOFTax,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.RetrieveByTaxType(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FlatRateOFTax class</returns>
 <remarks>Datasource is 'XIF1TAX_FIXVAL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.RetrieveBySupportingDocument(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FlatRateOFTax class</returns>
 <remarks>Datasource is 'XIF2TAX_FIXVAL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.Find(System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.Find(System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.Find(System.Int32,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.Find(System.Int32,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.ApplyChange(InMotionGIT.Policy.Entity.Contracts.FlatRateOFTax,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FlatRateOFTaxItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.ApplyChange(InMotionGIT.Policy.Entity.Contracts.FlatRateOFTax,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FlatRateOFTaxItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.FlatRateOFTax,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="FlatRateOFTaxItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.FlatRateOFTax,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="FlatRateOFTaxItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.Synchronize(InMotionGIT.Policy.Entity.Contracts.FlatRateOFTaxCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FlatRateOFTax.Synchronize(InMotionGIT.Policy.Entity.Contracts.FlatRateOFTaxCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Franchise">
 <summary>
 Franchise or deductible of a policy or certificate.
 </summary>
<remarks>Data-source is 'FRANCHISE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Synchronize(InMotionGIT.Policy.Entity.Contracts.Franchise,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Synchronize(InMotionGIT.Policy.Entity.Contracts.Franchise,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Franchise,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.RetrieveByApplicationLevel(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Franchise class</returns>
 <remarks>Datasource is 'XIF1FRANCHISE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.RetrieveByDeductibleApplicationFrequency(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Franchise class</returns>
 <remarks>Datasource is 'XIF2FRANCHISE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.RetrieveByCoverageBillingItem(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Franchise class</returns>
 <remarks>Datasource is 'XIF3FRANCHISE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.RetrieveByRoleWhichDeductibleApplies(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Franchise class</returns>
 <remarks>Datasource is 'XIF4FRANCHISE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Franchise class</returns>
 <remarks>Datasource is 'XIF5FRANCHISE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.RetrieveByFranchiseOrDeductible(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Franchise class</returns>
 <remarks>Datasource is 'XIF2254FRANCHISE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.RetrieveByUnitsOfEliminationPeriod(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Franchise class</returns>
 <remarks>Datasource is 'XIF1279FRANCHISE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.RetrieveByUnitsOfWaitingPeriod(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Franchise class</returns>
 <remarks>Datasource is 'XIF1281FRANCHISE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.RetrieveByFranchiseOrDeductibleIsApplied(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Franchise class</returns>
 <remarks>Datasource is 'XIF1278FRANCHISE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Franchise,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FranchiseItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Franchise,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FranchiseItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Franchise,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="FranchiseItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Franchise,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="FranchiseItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Synchronize(InMotionGIT.Policy.Entity.Contracts.FranchiseCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Franchise.Synchronize(InMotionGIT.Policy.Entity.Contracts.FranchiseCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.FundOfMainPolicy">
 <summary>
 
 </summary>
<remarks>Data-source is 'FUNDS_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.FundOfMainPolicy,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.FundOfMainPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.FundOfMainPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.RetrieveByInvestmentFund(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FundOfMainPolicy class</returns>
 <remarks>Datasource is 'XIF830FUNDS_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FundOfMainPolicy class</returns>
 <remarks>Datasource is 'XIF825FUNDS_CO_P'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.FundOfMainPolicy,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FundOfMainPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.FundOfMainPolicy,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FundOfMainPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.FundOfMainPolicy,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="FundOfMainPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.FundOfMainPolicy,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="FundOfMainPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.FundOfMainPolicyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.FundOfMainPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.FundOfMainPolicyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Group">
 <summary>
 Groupings to use in a group policy.
 </summary>
<remarks>Data-source is 'GROUPS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Synchronize(InMotionGIT.Policy.Entity.Contracts.Group,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Synchronize(InMotionGIT.Policy.Entity.Contracts.Group,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Group,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.RetrieveByRecordTypePolicyID(System.String,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Group class</returns>
 <remarks>Datasource is 'XDELGROUPS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.RetrieveByRecordTypePolicyIDProductCodeLineOfBusiness(System.String,System.Int64,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Group class</returns>
 <remarks>Datasource is 'XIF59GROUPS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Group class</returns>
 <remarks>Datasource is 'XIF1614GROUPS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.RetrieveByRecordTypeLineOfBusinessProductCodePolicyID(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Group class</returns>
 <remarks>Datasource is 'XIF2GROUPS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Group,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="GroupItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Group,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="GroupItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Group,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="GroupItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Group,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="GroupItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Synchronize(InMotionGIT.Policy.Entity.Contracts.GroupCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Group.Synchronize(InMotionGIT.Policy.Entity.Contracts.GroupCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol">
 <summary>
 
 </summary>
<remarks>Data-source is 'GUAR_SAVING_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Synchronize(InMotionGIT.Policy.Entity.Contracts.GuarranteedSavingsPol,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Synchronize(InMotionGIT.Policy.Entity.Contracts.GuarranteedSavingsPol,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.GuarranteedSavingsPol,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.RetrieveByRecordTypePolicyNumberCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for GuarranteedSavingsPol class</returns>
 <remarks>Datasource is 'XDELGUAR_SAVING_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.RetrieveByRecordTypeLineOfBusinessProductCodePolicyNumberCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for GuarranteedSavingsPol class</returns>
 <remarks>Datasource is 'XIF1GUAR_SAVING_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.ApplyChange(InMotionGIT.Policy.Entity.Contracts.GuarranteedSavingsPol,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="GuarranteedSavingsPolItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.ApplyChange(InMotionGIT.Policy.Entity.Contracts.GuarranteedSavingsPol,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="GuarranteedSavingsPolItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.GuarranteedSavingsPol,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="GuarranteedSavingsPolItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.GuarranteedSavingsPol,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="GuarranteedSavingsPolItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Synchronize(InMotionGIT.Policy.Entity.Contracts.GuarranteedSavingsPolCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.GuarranteedSavingsPol.Synchronize(InMotionGIT.Policy.Entity.Contracts.GuarranteedSavingsPolCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness">
 <summary>
 Particular information on health policies.
 </summary>
<remarks>Data-source is 'HEALTH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.HealthLineOfBusiness,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.HealthLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.HealthLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.RetrieveByTypeOfInsuredPerson(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for HealthLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2050HEALTH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for HealthLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2HEALTH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.HealthLineOfBusiness,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="HealthLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.HealthLineOfBusiness,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="HealthLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.HealthLineOfBusiness,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="HealthLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.HealthLineOfBusiness,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="HealthLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.HealthLineOfBusinessCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HealthLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.HealthLineOfBusinessCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness">
 <summary>
 Particular information on homeowner policies.
 </summary>
<remarks>Data-source is 'HOMEOWNER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.HomeLineOfBusiness,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.HomeLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.HomeLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.RetrieveByConstructionMaterial(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for HomeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF1HOMEOWNER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.RetrieveByRoofType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for HomeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2HOMEOWNER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for HomeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF10HOMEOWNER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.RetrieveByPaymentFrequency(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for HomeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF4HOMEOWNER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.RetrieveByDwellingType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for HomeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF5HOMEOWNER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.RetrieveByOwnership(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for HomeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF6HOMEOWNER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.RetrieveByFoundation(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for HomeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF7HOMEOWNER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.RetrieveByHeating(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for HomeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF8HOMEOWNER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.RetrieveByAirConditioningType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for HomeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF9HOMEOWNER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.RetrieveByFloodZoneType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for HomeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF10HOMEOWNER'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.HomeLineOfBusiness,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="HomeLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.HomeLineOfBusiness,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="HomeLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.HomeLineOfBusiness,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="HomeLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.HomeLineOfBusiness,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="HomeLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.HomeLineOfBusinessCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.HomeLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.HomeLineOfBusinessCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage">
 <summary>
 Number of insured persons by coverage.
 </summary>
<remarks>Data-source is 'NOPAYROLL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.InsuredPersonsByCoverage,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.InsuredPersonsByCoverage,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.InsuredPersonsByCoverage,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for InsuredPersonsByCoverage class</returns>
 <remarks>Datasource is 'XDELNOPAYROLL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.RetrieveByClientRole(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for InsuredPersonsByCoverage class</returns>
 <remarks>Datasource is 'XIF1749NOPAYROLL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for InsuredPersonsByCoverage class</returns>
 <remarks>Datasource is 'XIF1748NOPAYROLL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.ApplyChange(InMotionGIT.Policy.Entity.Contracts.InsuredPersonsByCoverage,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="InsuredPersonsByCoverageItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.ApplyChange(InMotionGIT.Policy.Entity.Contracts.InsuredPersonsByCoverage,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="InsuredPersonsByCoverageItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.InsuredPersonsByCoverage,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="InsuredPersonsByCoverageItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.InsuredPersonsByCoverage,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="InsuredPersonsByCoverageItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.InsuredPersonsByCoverageCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InsuredPersonsByCoverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.InsuredPersonsByCoverageCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy">
 <summary>
 Funds associated with a policy.
 </summary>
<remarks>Data-source is 'FUNDS_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for InvestmentFundRelatedToPolicy class</returns>
 <remarks>Datasource is 'XDELFUNDS_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for InvestmentFundRelatedToPolicy class</returns>
 <remarks>Datasource is 'XIF1FUNDS_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.RetrieveByInvestmentFund(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for InvestmentFundRelatedToPolicy class</returns>
 <remarks>Datasource is 'XIF2FUNDS_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="InvestmentFundRelatedToPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="InvestmentFundRelatedToPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="InvestmentFundRelatedToPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicy,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="InvestmentFundRelatedToPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.InvestmentFundRelatedToPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.InvestmentFundRelatedToPolicyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.LastDetailCoverage">
 <summary>
 Valid record of the coverage
 </summary>
<remarks>Data-source is 'COVER_LAST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.LastDetailCoverage,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.LastDetailCoverage,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.LastDetailCoverage,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Find(System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.ApplyChange(InMotionGIT.Policy.Entity.Contracts.LastDetailCoverage,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="LastDetailCoverageItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.ApplyChange(InMotionGIT.Policy.Entity.Contracts.LastDetailCoverage,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="LastDetailCoverageItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.LastDetailCoverageCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LastDetailCoverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.LastDetailCoverageCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.LifeCoverageVariation">
 <summary>
 Variations in coverage of life (life).
 </summary>
<remarks>Data-source is 'LIFECOV_VAR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeCoverageVariation,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeCoverageVariation,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.LifeCoverageVariation,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateIDInsuredGroupingCoverageModuleClientIDCoverageCodeRecordEffectiveDate(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.String,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LifeCoverageVariation class</returns>
 <remarks>Datasource is 'XIF2014LIFECOV_VAR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LifeCoverageVariation class</returns>
 <remarks>Datasource is 'XDELLIFECOV_VAR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateIDInsuredGroupingCoverageModuleCoverageCodeClientIDRecordEffectiveDate(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LifeCoverageVariation class</returns>
 <remarks>Datasource is 'XIF1LIFECOV_VAR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LifeCoverageVariation class</returns>
 <remarks>Datasource is 'XIF1692LIFECOV_VAR'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.ApplyChange(InMotionGIT.Policy.Entity.Contracts.LifeCoverageVariation,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="LifeCoverageVariationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.ApplyChange(InMotionGIT.Policy.Entity.Contracts.LifeCoverageVariation,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="LifeCoverageVariationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.LifeCoverageVariation,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="LifeCoverageVariationItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.LifeCoverageVariation,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="LifeCoverageVariationItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeCoverageVariationCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeCoverageVariation.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeCoverageVariationCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage">
 <summary>
 Additional information on life insurances coverage.
 </summary>
<remarks>Data-source is 'COVER_LIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeInsuranceCoverage,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeInsuranceCoverage,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.LifeInsuranceCoverage,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LifeInsuranceCoverage class</returns>
 <remarks>Datasource is 'XDELCOVER_LIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateIDDivisionCoverageModuleCoverageCodeClientIDRecordEffectiveDate(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LifeInsuranceCoverage class</returns>
 <remarks>Datasource is 'XIF1COVER_LIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.ApplyChange(InMotionGIT.Policy.Entity.Contracts.LifeInsuranceCoverage,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="LifeInsuranceCoverageItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.ApplyChange(InMotionGIT.Policy.Entity.Contracts.LifeInsuranceCoverage,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="LifeInsuranceCoverageItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.LifeInsuranceCoverage,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="LifeInsuranceCoverageItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.LifeInsuranceCoverage,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="LifeInsuranceCoverageItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeInsuranceCoverageCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeInsuranceCoverage.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeInsuranceCoverageCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness">
 <summary>
 Particular data on life policies.
 </summary>
<remarks>Data-source is 'LIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.RetrieveByPolicyIDCertificateIDRecordType(System.Int64,System.Int64,System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LifeLineOfBusiness class</returns>
 <remarks>Datasource is 'XDELLIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.RetrieveByTypeOfInsurancePeriod(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LifeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF1LIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.RetrieveByInsuredAmountCalculation(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LifeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2LIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.RetrieveByPremiumCalculationIndicator(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LifeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF3LIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.RetrieveByTypeOfInsuredPerson(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LifeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF4LIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LifeLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF5LIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="LifeLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="LifeLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="LifeLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusiness,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="LifeLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.CustomString">
 <summary>
 Extensibility custom string property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.CustomStringEx">
 <summary>
 Extensibility custom string ex property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.CustomNumeric">
 <summary>
 Extensibility custom decimal property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.CustomNumericEx">
 <summary>
 Extensibility custom decimal ex property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.CustomDate">
 <summary>
 Extensibility custom date property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.CustomDateEx">
 <summary>
 Extensibility custom date ex property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.CustomBoolean">
 <summary>
 Extensibility custom boolean property.
 </summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.CustomBooleanEx">
 <summary>
 Extensibility custom boolean ex property.
 </summary>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusinessCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusinessCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue">
 <summary>
 
 </summary>
<remarks>Data-source is 'LIFE_LAST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusinessCurrentValue,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusinessCurrentValue,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusinessCurrentValue,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LifeLineOfBusinessCurrentValue class</returns>
 <remarks>Datasource is 'XIF1732LIFE_LAST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Find(System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Find(System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Find(System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Find(System.String,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.ApplyChange(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusinessCurrentValue,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="LifeLineOfBusinessCurrentValueItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.ApplyChange(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusinessCurrentValue,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="LifeLineOfBusinessCurrentValueItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusinessCurrentValueCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.LifeLineOfBusinessCurrentValue.Synchronize(InMotionGIT.Policy.Entity.Contracts.LifeLineOfBusinessCurrentValueCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness">
 <summary>
 Specifics of the machinery branch breakage.
 </summary>
<remarks>Data-source is 'MACHINE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.MachineryLineOfBusiness,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.MachineryLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.MachineryLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.RetrieveByPaymentFrequency(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for MachineryLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2MACHINE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for MachineryLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF1MACHINE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.MachineryLineOfBusiness,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="MachineryLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.MachineryLineOfBusiness,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="MachineryLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.MachineryLineOfBusiness,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="MachineryLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.MachineryLineOfBusiness,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="MachineryLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.MachineryLineOfBusinessCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MachineryLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.MachineryLineOfBusinessCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Module">
 <summary>
 Modules of the policy.
 </summary>
<remarks>Data-source is 'MODULES'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Synchronize(InMotionGIT.Policy.Entity.Contracts.Module,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Synchronize(InMotionGIT.Policy.Entity.Contracts.Module,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Module,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for [Module] class</returns>
 <remarks>Datasource is 'XIF1MODULES'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Module,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="[Module]Item">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Module,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ModuleItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Module,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ModuleItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Module,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ModuleItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Synchronize(InMotionGIT.Policy.Entity.Contracts.ModuleCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Module.Synchronize(InMotionGIT.Policy.Entity.Contracts.ModuleCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness">
 <summary>
 Details of the particular line of business multi risks.
 </summary>
<remarks>Data-source is 'MULTI_RISK'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.MultiRiskLineOfBusiness,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.MultiRiskLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.MultiRiskLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for MultiRiskLineOfBusiness class</returns>
 <remarks>Datasource is 'XDELMULTI_RISK'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.RetrieveByRecordTypePolicyIDCertificateIDProductCodeLineOfBusiness(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for MultiRiskLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF435MULTI_RISK'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for MultiRiskLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF1MULTI_RISK'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Find(System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Find(System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Find(System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Find(System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Find(System.Int32,System.Int32,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Find(System.Int32,System.Int32,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Find(System.Int32,System.Int32,System.String,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Find(System.Int32,System.Int32,System.String,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Find(System.Int32,System.Int32,System.String,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Find(System.Int32,System.Int32,System.String,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.MultiRiskLineOfBusiness,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="MultiRiskLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.MultiRiskLineOfBusiness,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="MultiRiskLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.MultiRiskLineOfBusiness,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="MultiRiskLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.MultiRiskLineOfBusiness,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="MultiRiskLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.MultiRiskLineOfBusinessCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.MultiRiskLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.MultiRiskLineOfBusinessCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32,System.String,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction">
 <summary>
 Entries pending for billing.
 </summary>
<remarks>Data-source is 'OUT_MOVEME'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Synchronize(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransaction,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Synchronize(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransaction,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransaction,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for OutstandingBillingTransaction class</returns>
 <remarks>Datasource is 'XDELOUT_MOVEME'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.RetrieveByEntryNumber(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for OutstandingBillingTransaction class</returns>
 <remarks>Datasource is 'XIE2OUT_MOVEME'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.RetrieveByPaymentMethod(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for OutstandingBillingTransaction class</returns>
 <remarks>Datasource is 'XIF1OUT_MOVEME'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for OutstandingBillingTransaction class</returns>
 <remarks>Datasource is 'XIF2OUT_MOVEME'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.ApplyChange(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransaction,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="OutstandingBillingTransactionItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.ApplyChange(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransaction,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="OutstandingBillingTransactionItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Synchronize(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransactionCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransaction.Synchronize(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransactionCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail">
 <summary>
 Details of entries pending for billing.
 </summary>
<remarks>Data-source is 'OUT_PREMIU'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Synchronize(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransactionsDetail,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Synchronize(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransactionsDetail,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransactionsDetail,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.RetrieveByRecordTypePolicyIDCertificateIDEntryNumberPendingOfBillingBillControlDigitProductCodeLineOfBusiness(System.String,System.Int64,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for OutstandingBillingTransactionsDetail class</returns>
 <remarks>Datasource is 'XIF53OUT_PREMIU'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.RetrieveByEntryNumberPendingOfBilling(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for OutstandingBillingTransactionsDetail class</returns>
 <remarks>Datasource is 'XIE1OUT_PREMIU'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateIDEntryNumberPendingOfBillingBillControlDigit(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for OutstandingBillingTransactionsDetail class</returns>
 <remarks>Datasource is 'XIF1OUT_PREMIU'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.ApplyChange(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransactionsDetail,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="OutstandingBillingTransactionsDetailItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.ApplyChange(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransactionsDetail,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="OutstandingBillingTransactionsDetailItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Synchronize(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransactionsDetailCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.OutstandingBillingTransactionsDetail.Synchronize(InMotionGIT.Policy.Entity.Contracts.OutstandingBillingTransactionsDetailCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy">
 <summary>
 PaymentAgreementByPolicy
 </summary>
<remarks>Data-source is 'AGREEMENT_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.PaymentAgreementByPolicy,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.PaymentAgreementByPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.PaymentAgreementByPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PaymentAgreementByPolicy,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PaymentAgreementByPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PaymentAgreementByPolicy,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PaymentAgreementByPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PaymentAgreementByPolicy,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PaymentAgreementByPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PaymentAgreementByPolicy,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PaymentAgreementByPolicyItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.PaymentAgreementByPolicyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentAgreementByPolicy.Synchronize(InMotionGIT.Policy.Entity.Contracts.PaymentAgreementByPolicyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.String,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.PaymentsPlan">
 <summary>
 Payment plan for contributions
 </summary>
<remarks>Data-source is 'PER_DEPOSIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Synchronize(InMotionGIT.Policy.Entity.Contracts.PaymentsPlan,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Synchronize(InMotionGIT.Policy.Entity.Contracts.PaymentsPlan,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.PaymentsPlan,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PaymentsPlan class</returns>
 <remarks>Datasource is 'XDELPER_DEPOSIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PaymentsPlan class</returns>
 <remarks>Datasource is 'XIF1730PER_DEPOSIT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PaymentsPlan,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PaymentsPlanItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PaymentsPlan,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PaymentsPlanItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PaymentsPlan,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PaymentsPlanItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PaymentsPlan,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PaymentsPlanItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Synchronize(InMotionGIT.Policy.Entity.Contracts.PaymentsPlanCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PaymentsPlan.Synchronize(InMotionGIT.Policy.Entity.Contracts.PaymentsPlanCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH">
 <summary>
 
 </summary>
<remarks>Data-source is 'PER_DEPOSIT_MONTH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Synchronize(InMotionGIT.Policy.Entity.Contracts.PER_DEPOSIT_MONTH,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Synchronize(InMotionGIT.Policy.Entity.Contracts.PER_DEPOSIT_MONTH,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.PER_DEPOSIT_MONTH,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.RetrieveByRecordTypePolicyNumberCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PER_DEPOSIT_MONTH class</returns>
 <remarks>Datasource is 'XDELPER_DEPOSIT_MONTH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.RetrieveByRecordTypeLineOfBusinessProductCodePolicyNumberCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PER_DEPOSIT_MONTH class</returns>
 <remarks>Datasource is 'XIF1PER_DEPOSIT_MONTH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PER_DEPOSIT_MONTH,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PER_DEPOSIT_MONTHItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PER_DEPOSIT_MONTH,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PER_DEPOSIT_MONTHItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PER_DEPOSIT_MONTH,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PER_DEPOSIT_MONTHItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PER_DEPOSIT_MONTH,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PER_DEPOSIT_MONTHItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Synchronize(InMotionGIT.Policy.Entity.Contracts.PER_DEPOSIT_MONTHCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PER_DEPOSIT_MONTH.Synchronize(InMotionGIT.Policy.Entity.Contracts.PER_DEPOSIT_MONTHCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Policy">
 <summary>
 General information in a policy.
 </summary>
<remarks>Data-source is 'POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.Synchronize(InMotionGIT.Policy.Entity.Contracts.Policy,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.Synchronize(InMotionGIT.Policy.Entity.Contracts.Policy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Policy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByRecordTypeLineOfBusinessProductCodeApplicationOrQuotationNumber(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIE3POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByRecordTypePolicyID(System.String,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIE2POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByReasonForNoConversion(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF1POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByCompanyCodeBranchOfficeOfCarrier(System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF2POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByMainProducer(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIE4POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByLeaderCompany(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF4POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByBranchOffice(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF5POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByOptionForClausesInGroups(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF6POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByOptionForExtraPremiumAndDiscountsInGroups(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF7POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByAgreement(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF8POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF9POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByAgency(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF10POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByOptionOfCoveragesForGroups(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF11POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByTypeOfBenefitDefinitionForGroups(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF12POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByCriteriaToDetermineDuplicationInUpload(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF13POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByRecordType(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF14POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByAgency2(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF15POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByOfficeCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF16POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByIndexationType(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF17POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByCommissionType(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF18POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByTypeOfReinsuranceForGroups(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF19POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByTypeOfBillForGroups(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF20POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByPaymentFrequency(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF21POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByTypeOfRenewalForGroups(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF22POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByOptionToApplyIndexation(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF23POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByPolicyStatus(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF24POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByCancellationCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF25POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.RetrieveByLineOfBusinessProductCode(System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Policy class</returns>
 <remarks>Datasource is 'XIF26POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.Find(System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.Find(System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.Find(System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.Find(System.String,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Policy,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Policy,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Policy.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount">
 <summary>
 Current account of the policy (only ActiveLife Policies).
 </summary>
<remarks>Data-source is 'ACCOUNT_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyCheckingAccount,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyCheckingAccount,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.PolicyCheckingAccount,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyCheckingAccount class</returns>
 <remarks>Datasource is 'XDELACCOUNT_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.RetrieveByUserCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyCheckingAccount class</returns>
 <remarks>Datasource is 'XIF1509ACCOUNT_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyCheckingAccount class</returns>
 <remarks>Datasource is 'XIF2ACCOUNT_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Find(System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Find(System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Find(System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PolicyCheckingAccount,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PolicyCheckingAccountItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PolicyCheckingAccount,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PolicyCheckingAccountItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyCheckingAccountCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyCheckingAccount.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyCheckingAccountCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.PolicyHistory">
 <summary>
 History of a policy.
 </summary>
<remarks>Data-source is 'POLICY_HIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyHistory,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyHistory,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.PolicyHistory,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.RetrieveByRecordTypePolicyIDPolicyEntryNumberCertificateIDLineOfBusinessProductCode(System.String,System.Int64,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyHistory class</returns>
 <remarks>Datasource is 'XIE4POLICY_HIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyHistory class</returns>
 <remarks>Datasource is 'XDELPOLICY_HIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.RetrieveByRecordTypePolicyIDCertificateIDTransactionTypePolicyEntryNumber(System.String,System.Int64,System.Int64,System.Int32,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyHistory class</returns>
 <remarks>Datasource is 'XIE3POLICY_HIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateIDTransactionType(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyHistory class</returns>
 <remarks>Datasource is 'XTYPOPOLICY_HIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.RetrieveByQuotationStatus(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyHistory class</returns>
 <remarks>Datasource is 'XIF1POLICY_HIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.RetrieveByTransactionType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyHistory class</returns>
 <remarks>Datasource is 'XIF2POLICY_HIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.RetrieveByServiceOrder(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyHistory class</returns>
 <remarks>Datasource is 'XIF3POLICY_HIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.RetrieveByReasonForNoConversion(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyHistory class</returns>
 <remarks>Datasource is 'XIF4POLICY_HIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.RetrieveByClaimID(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyHistory class</returns>
 <remarks>Datasource is 'XIF5POLICY_HIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyHistory class</returns>
 <remarks>Datasource is 'XIF6POLICY_HIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.RetrieveByReasonForOutstandingStatus(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyHistory class</returns>
 <remarks>Datasource is 'XIF7POLICY_HIS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Find(System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Find(System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Find(System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Find(System.String,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PolicyHistory,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PolicyHistoryItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PolicyHistory,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PolicyHistoryItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyHistoryCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyHistory.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyHistoryCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.PolicyProtectionElement">
 <summary>
 Protection elements of the policy / certificate.
 </summary>
<remarks>Data-source is 'PROTECTION'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyProtectionElement,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyProtectionElement,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.PolicyProtectionElement,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.RetrieveByRecordTypePolicyIDCertificateIDProductCodeLineOfBusiness(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyProtectionElement class</returns>
 <remarks>Datasource is 'XIF85PROTECTION'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyProtectionElement class</returns>
 <remarks>Datasource is 'XDELPROTECTION'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyProtectionElement class</returns>
 <remarks>Datasource is 'XIF1PROTECTION'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PolicyProtectionElement,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PolicyProtectionElementItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PolicyProtectionElement,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PolicyProtectionElementItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PolicyProtectionElement,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PolicyProtectionElementItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PolicyProtectionElement,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PolicyProtectionElementItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyProtectionElementCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyProtectionElement.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyProtectionElementCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.PolicyWindow">
 <summary>
 Windows associated with a policy/certificate.
 </summary>
<remarks>Data-source is 'POLICY_WIN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyWindow,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyWindow,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.PolicyWindow,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyWindow class</returns>
 <remarks>Datasource is 'XDELPOLICY_WIN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyWindow class</returns>
 <remarks>Datasource is 'XIF1POLICY_WIN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PolicyWindow,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PolicyWindowItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PolicyWindow,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PolicyWindowItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PolicyWindow,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PolicyWindowItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PolicyWindow,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PolicyWindowItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyWindowCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PolicyWindow.Synchronize(InMotionGIT.Policy.Entity.Contracts.PolicyWindowCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.PROJECTVUL">
 <summary>
 
 </summary>
<remarks>Data-source is 'PROJECTVUL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Synchronize(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Synchronize(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.RetrieveByPolicyID(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PROJECTVUL class</returns>
 <remarks>Datasource is 'IDX_PROJECTVUL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PROJECTVUL class</returns>
 <remarks>Datasource is 'XIF1PROJECTVUL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PROJECTVULItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PROJECTVULItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PROJECTVULItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PROJECTVULItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Synchronize(InMotionGIT.Policy.Entity.Contracts.PROJECTVULCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL.Synchronize(InMotionGIT.Policy.Entity.Contracts.PROJECTVULCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET">
 <summary>
 
 </summary>
<remarks>Data-source is 'PROJECTVUL_DET'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Synchronize(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL_DET,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Synchronize(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL_DET,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL_DET,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.RetrieveByPolicyID(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PROJECTVUL_DET class</returns>
 <remarks>Datasource is 'IDX_PROJECTVUL_DET'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PROJECTVUL_DET class</returns>
 <remarks>Datasource is 'XIF1PROJECTVUL_DET'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL_DET,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PROJECTVUL_DETItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL_DET,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PROJECTVUL_DETItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Synchronize(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL_DETCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PROJECTVUL_DET.Synchronize(InMotionGIT.Policy.Entity.Contracts.PROJECTVUL_DETCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.PropertyInsured">
 <summary>
 Property insured under the policy/proposal/quotation.
 </summary>
<remarks>Data-source is 'PROPERTY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Synchronize(InMotionGIT.Policy.Entity.Contracts.PropertyInsured,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Synchronize(InMotionGIT.Policy.Entity.Contracts.PropertyInsured,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.PropertyInsured,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PropertyInsured class</returns>
 <remarks>Datasource is 'XDELPROPERTY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.RetrieveByRecordTypePolicyIDCertificateIDProductCodeLineOfBusiness(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PropertyInsured class</returns>
 <remarks>Datasource is 'XIF84PROPERTY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.RetrieveByLineOfBusinessProductCodeInsuredProperty(System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PropertyInsured class</returns>
 <remarks>Datasource is 'XIF458PROPERTY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.RetrieveByServiceOrder(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PropertyInsured class</returns>
 <remarks>Datasource is 'XIF1640PROPERTY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PropertyInsured class</returns>
 <remarks>Datasource is 'XIF3PROPERTY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PropertyInsured,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PropertyInsuredItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.ApplyChange(InMotionGIT.Policy.Entity.Contracts.PropertyInsured,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PropertyInsuredItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PropertyInsured,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PropertyInsuredItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.PropertyInsured,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PropertyInsuredItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Synchronize(InMotionGIT.Policy.Entity.Contracts.PropertyInsuredCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.PropertyInsured.Synchronize(InMotionGIT.Policy.Entity.Contracts.PropertyInsuredCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.PolicyNumber">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.Certificate">
<summary>
Number identifying the Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.DeathInsuredAmount">
<summary>
Sum insured of death.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.ClientID">
<summary>
Code identifying the holder client of bills of the policy/certificate
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.TypeOfDuration">
<summary>
Type of insurance period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.InsurancePeriod">
<summary>
Insurance Period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.BasicPremiumAmount">
<summary>
Basic Annual Premium Amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.Amount">
<summary>
Discount amount of the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.Saldprog">
<summary>
Extended term insurance or paid-up policy indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.ProjectedProfitability">
<summary>
Projected profitability.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.WarMinInt">
<summary>
Guaranteed profitability.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.ExtendedTermInsuranceEffectiveDate">
<summary>
New effective date after applying the extended term insurance (ETI).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.TypeOfIndemnity">
<summary>
Type of Indemnity.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.ProfitabilityType">
<summary>
Code of profitability type.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.PremiumAmount">
<summary>
Premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.MinimumPremiumAmount">
<summary>
Minimum premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.InsuredAmount">
<summary>
Sum insured amount of the Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.PremiumAmountAgreed">
<summary>
Projected premium amount of the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.EffectiveDate">
<summary>
Effective date of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.IssueDate">
<summary>
Date when the policy/certificate is written.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.Transaction">
<summary>
Number of transaction recorded in the history of the policy (policy_his.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.CancellationCode">
<summary>
Policy/Certificate Cancellation Code.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.Group">
<summary>
Code of the Grouping within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.AnnualAmount">
<summary>
Annual amount of the agreed premium suggested.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.Usercode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.Agreement">
<summary>
Code of the agreement related to the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.PolicyValueSuggested">
<summary>
Policy value as the agreed premium suggested.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.PolicyValue">
<summary>
Policy value as the agreed premium.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ActiveLife.InsCalPre">
<summary>
Indicator of recalculation of the agreed premium.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.BankAccount">
<summary>
Number of the bank account.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.BankCode">
<summary>
Code of the bank.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.ClientID">
<summary>
Code of the owner of the bank account.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.CreditCardNumber">
<summary>
Credit Card Number.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.CreditCardType">
<summary>
Code of Credit Card Type.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.DirectDebitType">
<summary>
Type of direct debit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.ExpirationDate">
<summary>
Expiration date of the credit card.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.AuthorizationNumber">
<summary>
Authorization number for the direct debit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.ReusedAuthorizationNumber">
<summary>
Indicator of authorization number reused.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomaticPaymentPolicy.TypeOfBankAccount">
<summary>
Type of bank account.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.LicensePlateType">
<summary>
Type of License Plate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.LicensePlate">
<summary>
Number of the License Plate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.Chassis">
<summary>
Number of the vehicle chassis.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.EngineSerialNumber">
<summary>
Number identifying the engine of the insured vehicle.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.VehicleOwner">
<summary>
Code of the Client owner of the Vehicle.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.ClientID">
<summary>
Code of the policy holder or claimant related to the claim case.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.Color">
<summary>
Color of the vehicle.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.VehicleCode">
<summary>
Code of The Insured Vehicle
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.nVestatus">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.NoteID">
<summary>
Number of the note containing the comments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.YearOfManufactured">
<summary>
Year when the vehicle was manufactured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.VehicleType">
<summary>
Vehicle type.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.AnnualMileage">
<summary>
Annual mileage travelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.Mileage">
<summary>
Current mileage travelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.UsualParkingPlace">
<summary>
Usual parking place for the vehicle.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.RoadType">
<summary>
Type of roads where the vehicle will be used.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.Ordinance24449">
<summary>
Indicator of 24449 ordinance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.FuelType">
<summary>
Fuel type used.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.AlarmIndicator">
<summary>
Alarm system indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.sDigit">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileInformation.TypeOfSpecialLicensePlates">
<summary>
Type of special license plates.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.DrivingZone">
<summary>
Circulation zone.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.ClientID">
<summary>
Code that identifies the payer of the bills of the policy or certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.VehicleType">
<summary>
Vehicle type.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.Chassis">
<summary>
Number of the vehicle chassis.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.Color">
<summary>
Color of the vehicle.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.LicensePlate">
<summary>
Number of the License Plate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.LicensePlateType">
<summary>
Type of License Plate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.EngineSerialNumber">
<summary>
Number identifying the engine of the insured vehicle.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.VehicleCode">
<summary>
Code of The Insured Vehicle
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.IssueDate">
<summary>
Date when the policy/certificate is issued.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.EffectiveDate">
<summary>
Effective date of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.InsuredAmount">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.Premium">
<summary>
Premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.ValueOfTheVehicle">
<summary>
Value of the insured vehicle.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.ValueOfAccesories">
<summary>
Value of accessories of the insured vehicle.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.TransactionNumber">
<summary>
Transaction number recorded in the history of the policy (policy_his).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.CancellationCode">
<summary>
Code of cancellation of the specific information record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.Seats">
<summary>
Number of seats in the vehicle insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.GrossWeight">
<summary>
Gross weight in metric tons.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.YearOfManufactured">
<summary>
Year when the vehicle was manufactured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.NewVehicleIndicator">
<summary>
New vehicle indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.Reference">
<summary>
Reference number identifying the process as unique.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.ValueType">
<summary>
Type of vehicle value.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.CodeOfBonusMalus">
<summary>
Code of bonus-malus (no claims).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.AllowedDeductible">
<summary>
Percentage of deductible allowed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.UseOfVehicle">
<summary>
Use of vehicle.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.PercentageToAppliToValuesInTable">
<summary>
Percentage to be applied on the vehicle values in the table to calculate the sum insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.LastClaimDate">
<summary>
Date when the vehicle was last involved in a claim.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.sDigit">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.VehicleIsAlsoInAnotherPolicy">
<summary>
It Indicates that the vehicle is also in another policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.NoTickectsInTwelveMonths">
<summary>
Indicates that the policy hasn&#39;t had a traffic ticket in the last twelve months.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.Promotion">
<summary>
Car special offer indicator
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.TypeOfSpecialLicensePlates">
<summary>
Type of special license plates.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.ReturnedAuto">
<summary>
It indicates if the auto was returned.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.AutomobileLineOfBusiness.SoapPremiumCollected">
<summary>
Premium collected on sale SOAP
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.CodeOfTheInsuredAmount">
<summary>
Code identifying the sum insured
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.RealValueOfInsuredProperty">
<summary>
Real value of the insured property.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.InsuredValue">
<summary>
Insured value in the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.Coinsurance">
<summary>
Percentage of coinsurance agreed (coinsurance by the client).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.BasicInsuredAmount.TransactionNumber">
<summary>
Transaction number in the history of the policy (policy_his).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.CoverageCode">
<summary>
Code of the coverage related to the beneficiary.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.PercentageShare">
<summary>
Percentage of share of the beneficiary.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.Relationship">
<summary>
Relationship of the beneficiary with the insured of the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.DateOfBeneficiaryDesignation">
<summary>
Date when the beneficiary was named as such.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.IrrevocableBeneficiary">
<summary>
Irrevocable beneficiary indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Beneficiary.ContigentBeneficiaryIndicator">
<summary>
Contingent Beneficiary Indicator
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.ClauseCode">
<summary>
Number identifying the clause.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.ConsecutiveNumber">
<summary>
Consecutive number identifying the record (it is useful only when there are two clauses effective on the same date).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.NoteID">
<summary>
Number of the note containing the particular text of the clause.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.ClientID">
<summary>
Code of the client (useful only for Health Insurance).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.Cause">
<summary>
Cause of the application of the clause (health, sports, other).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.SurchargeAccepted">
<summary>
It indicates that the surcharge was accepted by the insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.HowClauseIsDecribed">
<summary>
Indicates how the clause is described
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Clause.AttachedDocument">
<summary>
Path and name of the attachment
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.PolicyNumber">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.ClientRole">
<summary>
Role of the client in the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.ConsecutiveNumber">
<summary>
Consecutive number.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.InformationType">
<summary>
Type of Information
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.BirthDate">
<summary>
Date of birth of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.InitAge">
<summary>
Initial age.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.EndingAge">
<summary>
Ending age.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.Insured">
<summary>
Quantity of insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.nRentAmount">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.Currency">
<summary>
Code of the currency of the income.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.Usercode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Client_tmp.VIPIndicator">
<summary>
It indicates that the Client is &#39;VIP&#39;.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoInsurance.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoInsurance.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoInsurance.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoInsurance.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoInsurance.Company">
<summary>
Code of the company.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoInsurance.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoInsurance.Expenses">
<summary>
Percentage of administrative expenses.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoInsurance.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoInsurance.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoInsurance.Share">
<summary>
Percentage of share of the coinsurance company on the total risk insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoInsurance.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.ProducerType">
<summary>
Type of producer.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.ProducerCode">
<summary>
Code of the producer.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.Amount">
<summary>
Commission amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.CommissionType">
<summary>
Types of commissions to be assigned to the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.FixedCommissionPercentage">
<summary>
Fixed commission percentage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.Share">
<summary>
Share Percentage of the producer on the policy commission.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.Discount">
<summary>
Discount percentage of the producer.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.PlusPremiumCollection">
<summary>
Additional commission for premium collection.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.PlusOfficeAllowance">
<summary>
Additional commission for office allowance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.PlusQuality">
<summary>
Additional commission for quality.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.Agreement">
<summary>
Agreement code for the agent in charge of collection.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.PercentageOfCededCommission">
<summary>
Percentage to cede of the producer commission.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Commission.nInstallCom">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.ProducerCode">
<summary>
Code of the producer.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.ConsecutiveNumber">
<summary>
Consecutive number within the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.CommissionsEntryType">
<summary>
Code of the type of entry of commissions.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.CommissionType">
<summary>
Type of commission of the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.TotalCommissionPending">
<summary>
Total of pending commission to pay.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.Installments">
<summary>
Number of installments in which the commission is paid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.OutstandingInstallmentsOfCommission">
<summary>
Number of outstanding installments of commissions
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.AmountOfEachInstallment">
<summary>
Amount of each installment of commission.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.CommissionPaymentID">
<summary>
Number of payment of commissions related to the entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.CurrentAccountProcessID">
<summary>
Number of the process of preparation of producers current accounts .
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.CommissionAvailable">
<summary>
Amount of commission available.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.TaxedAvailableAmount">
<summary>
Taxable amount .
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.ExemptAvailableAmount">
<summary>
Exempt available amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.Status">
<summary>
Status of the record of commissions of policies.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.TypeDocu">
<summary>
Type of document that generates the entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.DocumentIDNumber">
<summary>
Document number that generates the entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.InstallmentNumber">
<summary>
Number identifying the installment in the financial agreement.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.Transaction">
<summary>
Transaction originating the bill.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.TypeOfEntry">
<summary>
Type of entry of the bill.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CommissionPerPolicy.EntryNumber">
<summary>
Entry number.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.ConsecutiveNumber">
<summary>
Consecutive counter-guarantee number.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.AmountCounterguarantee">
<summary>
Amount of the counter-guarantee.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.CurrencyCode">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.DocumentNumber">
<summary>
Document number related to the counter-guarantee.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.TypeOfCounterguaranty">
<summary>
Code of type of counter-guaranty.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.NoteID">
<summary>
Number of the note containing the comments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.NTRANSACTIO">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.DISSUEDAT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.DSTARTDATE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.SCLIENT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.DEXPIRDAT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.NPREMIUM">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.NCAPITAL">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.NMATERIA">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.NLIMITCREDIT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.NMAXCAPITAL">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.SADDRESS">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.NNULLCODE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.SPROJECTNAME">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Counterguarantee.SIDENTIFY">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.ClientRole">
<summary>
Role of the client in the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.InsuredAmount">
<summary>
Insured amount of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.LowestLimitAmountRange">
<summary>
Lowest limit of the range of insured amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.CoverageChangeIndicator">
<summary>
Coverage change indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.FranchiseOrDeductibleIndicator">
<summary>
It indicates whether a franchise or deductible is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.DiscountPercentageBecauseFranchiseOrDeductible">
<summary>
Percentage of discount because of franchise or deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.FixedAmountOfFranchiseOrDeductible">
<summary>
Fixed franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.MaximumAmountOfFranchiseOrDeductible">
<summary>
Maximum franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.PremiumWaivedCoverage">
<summary>
Coverage with premium waived.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.MinimumDeductibleOrFranchiseAmount">
<summary>
Minimum franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.AnnualPremium">
<summary>
Annual premium amount of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.FranchiseOrDeductiblePercentage">
<summary>
Franchise or deductible percentage to be applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.WaitingPeriodNumber">
<summary>
Number of days/hours/months of the waiting period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.RatePerThousand">
<summary>
Rate to be applied (o/oo).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.UnitsOfWaitingPeriod">
<summary>
Units for Waiting Period (days, months).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.FranchiseOrDeductible">
<summary>
It indicates if a franchise/deductible is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.DiscountAmountBecauseFranchiseOrDeductible">
<summary>
Amount of discount because of the franchise or deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.TypeOfInsuranceDuration">
<summary>
Type of duration for the insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.DurationOfInsurance">
<summary>
Duration of the insurance (used for Life).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.nAgeMinIns">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.nAgeMaxIns">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.MaximumAgeInsurance">
<summary>
Maximum age of insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.TypeOfDurationOfPayments">
<summary>
Type of duration for the payments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.DurationOfPayments">
<summary>
Duration of the payments (used for Life).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.nCauseUpd">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.RequestedInsuredAmount">
<summary>
Sum Insured amount requested related to the insured person
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.MaximumInsurableAge">
<summary>
Maximum age to which the insured person is protected
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.MaximumAge">
<summary>
Maximum age for the insured person in this coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.CoverageAniversaryDate">
<summary>
Date of anniversary of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.dSeekTar">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.RetroactiveEndorsementDate">
<summary>
Date of The Retroactive Endorsement.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.ReinsuranceLineOfBusiness">
<summary>
Code of the line of business for reinsurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.TypeOfPremiumRecalculation">
<summary>
Type of recalculation of premium of a coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.OriginalInsuredAmount">
<summary>
Initial sum insured of the coverage (when the policy was issued)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.OriginalAnnualPremium">
<summary>
Annual premium amount of the coverage, as originally calculated.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.OriginalRatePerThousand">
<summary>
Rate to be applied (o/oo), as originally calculated.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.TaxAmount">
<summary>
Tax amount (related to the premium amount).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.AnnualExtraPremium">
<summary>
Annual amount of the surcharge.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.AnnualDiscount">
<summary>
Annual amount of the discount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.nCommi_an">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.GrossNetRate">
<summary>
Gross net rate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.SumInsuredRequiredByPolicyHolder">
<summary>
Amount of the sum insured required by the policy holder
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.FranchiseOrDeductiblePercentageClaim">
<summary>
Franchise or deductible percentage to be applied to the claim.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.FixedAmountOfFranchiseOrDeductibleClaim">
<summary>
Fixed amount franchise or deductible amount to be applied to the claim.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.MinimumAmountOfFranchiseOrDeductibleClaim">
<summary>
Minimum amount franchise or deductible amount to be applied to the claim.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.MaximumAmountOfFranchiseOrDeductibleClaim">
<summary>
Maximum franchise or deductible amount to be applied to the claim
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.DiscountPercentageClaim">
<summary>
Percentage of discount because of franchise or deductible Siniestro.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.DiscountAmountClaim">
<summary>
Amount of discount because of the franchise or deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Coverage.DaysFranchiseDeductible">
<summary>
Days of franchise or deductible to be applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.ClientRole">
<summary>
Role of the client in the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.Limit">
<summary>
Limit amount of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.CoverageChangeIndicator">
<summary>
Coverage change indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.FranchiseOrDeductibleIndicator">
<summary>
It indicates whether a franchise or deductible is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.DiscountPercentageBecauseFranchiseOrDeductible">
<summary>
Percentage of discount because of franchise or deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.FixedAmountOfFranchiseOrDeductible">
<summary>
Fixed franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.MaximumAmountOfFranchiseOrDeductible">
<summary>
Maximum franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.MinimumDeductibleOrFranchiseAmount">
<summary>
Minimum franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.WaitingPeriodNumber">
<summary>
Number of days/hours/months of the waiting period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.TypeOfEliminationPeriod">
<summary>
Type of Elimination Period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.FranchiseOrDeductiblePercentage">
<summary>
Franchise or deductible percentage to be applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.FranchiseOrDeductible">
<summary>
It indicates if a franchise/deductible is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.DiscountAmountBecauseFranchiseOrDeductible">
<summary>
Amount of discount because of the franchise or deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.TypeOfInsuranceDuration">
<summary>
Type of duration for the insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.DurationOfInsurance">
<summary>
Duration of the insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.MinimumEntryAgeMales">
<summary>
Minimum entry age for this role (males).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.MaximumEntryAgeMales">
<summary>
Maximum entry age for this role (males).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.MaximumAgeInsuranceMales">
<summary>
Maximum age of insurance (Masculine).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.MinimumEntryAgeFemales">
<summary>
Minimum entry age for this role (females).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.MaximumEntryAgeFemales">
<summary>
Maximum entry age for this role (females).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.MaximumAgeInsuranceFemale">
<summary>
Maximum age of insurance (Female).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.TypeOfDurationOfPayments">
<summary>
Type of duration for the payments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.DurationOfPayments">
<summary>
Duration of the payments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.RatePerThousand">
<summary>
Rate to be applied (o/oo).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.Premium">
<summary>
Annual premium amount of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.SelectedByDefault">
<summary>
Indicator of &#34;selected by default&#34; for the Treatment of policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.ReinsuranceLineOfBusiness">
<summary>
Code of the line of business for reinsurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.sRequired">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.TypeOfPremiumRecalculation">
<summary>
Type of recalculation of premium of a coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.OriginalInsuredAmount">
<summary>
Initial sum insured of the coverage (when the policy was issued)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.AnnualPremium">
<summary>
Annual premium amount of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.InitialRatePerThousand">
<summary>
Rate to be applied (o/oo).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.TotalInsuredAmount">
<summary>
Total annual amount of the sum insured under the coverage (sum of all certificates).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.TotalRequestedInsuredAmount">
<summary>
Total requested annual amount of the sum insured under the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.NetAnnualPremium">
<summary>
Annual total amount of net premium of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.AnnualNetRate">
<summary>
Annual net rate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.TaxAmount">
<summary>
Annual total amount of tax related to the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.CoverageExtraPremium">
<summary>
Annual total amount of surcharge for the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.AnnualDiscount">
<summary>
Annual total amount of discount of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.TotalAnnualCommission">
<summary>
Annual total amount of commission of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.GrossNetRate">
<summary>
Gross net rate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.MaximumAllowableSumInsured">
<summary>
Maximum allowable amount of sum insured for coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.MinimumAllowableSumInsured">
<summary>
Minimum allowable amount of sum insured for coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.MaximumAllowablePremium">
<summary>
Maximum allowable amount of premium for coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.MinimumAllowablePremium">
<summary>
Minumum allowable amount of premium for coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.FormMinimumAgeIsExpressedMale">
<summary>
Form in which the minimum age (male) is expressed
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageGroup.FormMinimumAgeIsExpressedFemale">
<summary>
Form in which the minimum age(female) is expressed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.Role">
<summary>
Role of the client in the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.Limit">
<summary>
Limit amount of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.CoverageChangeIndicator">
<summary>
Coverage change indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.FranchiseOrDeductibleIndicator">
<summary>
It indicates whether a franchise or deductible is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.DiscountPercentageBecauseFranchiseOrDeductible">
<summary>
Percentage of discount because of franchise or deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.FixedAmountOfFranchiseOrDeductible">
<summary>
Fixed franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.MaximumAmountOfFranchiseOrDeductible">
<summary>
Minimum franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.MinimumDeductibleOrFranchiseAmount">
<summary>
Minimum franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.WaitingPeriodNumber">
<summary>
Number of days/hours/months of the waiting period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.TypeOfEliminationPeriod">
<summary>
Type of Elimination Period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.FranchiseOrDeductiblePercentage">
<summary>
Franchise or deductible percentage to be applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.FranchiseOrDeductible">
<summary>
It indicates if a franchise/deductible is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.DiscountAmountBecauseFranchiseOrDeductible">
<summary>
Amount of discount because of the franchise or deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.DurationOfInsurance">
<summary>
Duration of the insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.TypeOfInsuranceDuration">
<summary>
Type of duration for the insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.MinimumEntryAgeMales">
<summary>
Minimum entry age for this role (males).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.MaximumEntryAgeMales">
<summary>
Maximum entry age for this role (males).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.nAgeMaxPerM">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.MinimumEntryAgeFemales">
<summary>
Minimum entry age for this role (females).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.MaximumEntryAgeFemales">
<summary>
Maximum entry age for this role (females).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.MaximumAgeInsuranceFemale">
<summary>
Maximum age of insurance (Female).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.DurationOfPayments">
<summary>
Duration of the payments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.TypeOfDurationOfPayments">
<summary>
Type of duration for the payments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.RatePerThousand">
<summary>
Rate to be applied (o/oo).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.nPremium">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.ReinsuranceLineOfBusiness">
<summary>
Code of the line of business for reinsurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.TypeOfPremiumRecalculation">
<summary>
Type of recalculation of premium of a coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.SelectedByDefault">
<summary>
Indicator of &#34;selected by default&#34; for the Treatment of policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.Required">
<summary>
Indicator of required coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.OriginalInsuredAmount">
<summary>
Initial sum insured of the coverage (when the policy was issued)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.AnnualPremium">
<summary>
Annual premium amount of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.InitialRatePerThousand">
<summary>
Rate to be applied (o/oo).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.TotalInsuredAmount">
<summary>
Total annual amount of the sum insured under the coverage (sum of all certificates).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.TotalRequestedInsuredAmount">
<summary>
Total requested annual amount of the sum insured under the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.NetAnnualPremium">
<summary>
Annual total amount of net premium of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.AnnualNetRate">
<summary>
Annual net rate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.TaxAmount">
<summary>
Annual total amount of tax related to the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.CoverageExtraPremium">
<summary>
Annual total amount of surcharge for the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.AnnualDiscount">
<summary>
Annual total amount of discount of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.TotalAnnualCommission">
<summary>
Annual total amount of commission of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.GrossNetRate">
<summary>
Gross net rate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.MaximumAllowableSumInsured">
<summary>
Maximum allowable amount of sum insured for coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.MinimumAllowableSumInsured">
<summary>
Minimum allowable amount of sum insured for coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.MaximumAllowablePremium">
<summary>
Maximum allowable amount of premium for coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.MinimumAllowablePremium">
<summary>
Minimum allowable amount of premium for coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.FormMinimumAgeIsExpressedMale">
<summary>
Form in which the minimum age (male) is expressed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoveragePolicy.FormMinimumAgeIsExpressedFemale">
<summary>
Form in which the minimum age (female) is expressed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.RecordType">
<summary>
Type or Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Change">
<summary>
Coverage change indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.FranchiseOrDeductibleIndicator">
<summary>
Type of franchise or deductible related to the coverage or policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Waittype">
<summary>
Type of Waiting Period
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.FranchiseOrDeductible">
<summary>
It indicates if a franchise or deductible is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Freepremi">
<summary>
Coverage released of premium payment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Description">
<summary>
Description of the coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Exist">
<summary>
Indicator of existence
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Required">
<summary>
It indicates that the coverage is required when issuing the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.SelectedByDefault">
<summary>
Indicator of &#34;selected by default&#34; for the Treatment of policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.UnlimitedCoverage">
<summary>
Unlimited sum insured indicator (infinite limit).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.TypeOfChangesAllowedOnInsuredAmount">
<summary>
Type of changes allowed on the sum insured (limit).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.TypeOfChangesAllowedOnPremium">
<summary>
Type of changes allowed on the premium
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.FranchiseOrDeductibleRequired">
<summary>
The franchise/deductible is required.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.RoutineForCalculationOfPremium">
<summary>
Routine of calculation and/or validation of the premium
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Effecdate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.InsuredAmount">
<summary>
Current amount of the sum insured of the coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.DiscountPercentageBecauseFranchiseOrDeductible">
<summary>
Type of record to which the extra-premium/discount/tax applies.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.FixedAmountOfFranchiseOrDeductible">
<summary>
Fixed franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MaximumAmountOfFranchiseOrDeductible">
<summary>
Maximum franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.FranchiseOrDeductiblePercentage">
<summary>
Percentage of discount for franchise or deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MinimumAmountOfFranchiseOrDeductible">
<summary>
Minimum franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.AnnualPremium">
<summary>
Annual premium amount of the coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.RatePerThousand">
<summary>
Rate per thousand (o/oo) of calculation of the premium of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Capitali">
<summary>
Lowest limit of the range of insured amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MaximumPercentageOfIncreaseOfInsuredAmount">
<summary>
Allowed maximum percentage of increase of the sum insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MaximumPercentageOfDecreaseOfInsuredAmount">
<summary>
Allowed maximum percentage of decrease of the sum insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.PercentageOfIncreasePermittedForPremium">
<summary>
Allowed maximum percentage of increase/decrease
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MaximumPercentageOfDecreaseOfPremium">
<summary>
Allowed maximum percentage of increase/decrease
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Discamoun">
<summary>
Amount related to the premium
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.FixedRate">
<summary>
Rate per thousand (o/oo) of calculation of the premium of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MinimumPremium">
<summary>
Minimum premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MaximumPremium">
<summary>
Maximum premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.PolicyID">
<summary>
Number identifying the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.CertificateID">
<summary>
Number of the certificate
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.LineOfBusiness">
<summary>
Code of the line of business
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Group">
<summary>
Code of the &#34;division&#34; within the group
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Waitquan">
<summary>
Number of days/hours/months of the waiting period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Groupinsu">
<summary>
Code of insured group
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.BaseCoverageThatContainThePremiumOfThis">
<summary>
Code of the coverage that contains the premium of this coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.CoverageToApplyRateOn">
<summary>
Code of the coverage on which the rate is applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Key">
<summary>
Key of the &#34;Tcover&#34; temporary file
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.FixedPremium">
<summary>
Fixed premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.FreeInsuredAmount">
<summary>
The sum insured will be entered by the user at the moment of issuing the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.SecurityLevelForUpdatingInsuredAmount">
<summary>
Security level needed for the user to update the sum insured
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.SecurityLevelForUpdatingPremium">
<summary>
Security level needed for the user to update the premium.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.SecurityLevelForUpdatingFranchiseOrDeductible">
<summary>
Level of the user (update or query) for franchise/deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.PossibleChangesToFranchiseOrDeductible">
<summary>
Type of changes allowed on the franchise/deductible
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MaximumPercentageOfIncreaseForFranchiseOrDeductible">
<summary>
Allowed maximum percentage of increase of the franchise/deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MaximumPercentageOfDecreaseForFranchiseOrDeductible">
<summary>
Allowed maximum percentage of decrease of the franchise/deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.BaseCoverageForInsuredAmount">
<summary>
Code of coverage on which the percentage is applied to obtain the limit of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.PercentageOverOtherCoverage">
<summary>
Percentage to be applied to the sum insured of another coverage to obtain this sum insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.PFrandedi">
<summary>
Type of franchise or deductible related to the coverage of the product
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MaximumInsuredAmount">
<summary>
Maximum sum insured
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MinimumInsuredAmount">
<summary>
Minimum sum insured
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.AddsToObtainInsuredAmount">
<summary>
Indicator of the addition to obtain the sum insured
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.TarifCurr">
<summary>
Code of the currency in which the rate of the coverage is expressed
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.RoutineForCalculationOfInsuredAmountAtRenewal">
<summary>
Calculation Routine for Sum Insured (Renewal Process).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.FixedInsuredAmount">
<summary>
Fixed amount of the sum insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.TypeOfInsuranceDuration">
<summary>
Type of duration for the insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.CoverageDuration">
<summary>
Duration of the insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MinimumEntryAge">
<summary>
Minimum entry age for this role
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MaximumEntryAge">
<summary>
Maximum entry age for this role
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MaximumAgeInsurance">
<summary>
Maximum age of insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.TypeOfDurationOfPayments">
<summary>
Type of duration for the payments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.DurationOfPayments">
<summary>
Duration of the payments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.CauseUpd">
<summary>
Reason why the insured person was excluded from the coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.RequestedInsuredAmount">
<summary>
Sum Insured amount requested related to the insured person
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.AgeLimit">
<summary>
Maximum age to which the insured person is protected
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Ageper">
<summary>
Maximum age of insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.CoverageAniversaryDate">
<summary>
Date of anniversary of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Seektar">
<summary>
Search date of the rate
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Fer">
<summary>
Date of The Retroactive Endorsement.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.ReinsuranceLineOfBusiness">
<summary>
Code of the reinsurance line of business
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.ClientRole">
<summary>
Role of the coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.RoleOfCoverageOverWhichAppliesThePercentOfInsuredAmount">
<summary>
Role of the coverage on which the insured amount calculation percentage is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.RoleOfBaseCoverageThatContainThePremiumOfThis">
<summary>
Role of the coverage on which the premium amount is included
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.TypeOfPremiumRecalculation">
<summary>
Type of recalculation of premium of a coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MinimumEntryAgeFemales">
<summary>
Minimum entry age for this role (Female)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MaximumEntryAgeFemales">
<summary>
Maximum entry age for this role (female)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MaximumAgeInsuranceFemale">
<summary>
Maximum age of insurance (female)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Defaultic">
<summary>
Ii indicates that the coverage is selected by default in the certificates of the master policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.Requirec">
<summary>
It indicates that the coverage is required in the certificates of the master policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.DependenceFromMainInsured">
<summary>
Dependence indicator of the main insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.ActionCov">
<summary>
Code of the action to be executed for the coverages involved in a claim.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.PercentToApply">
<summary>
Percentage to be applied to the premium/rate calculated by the system
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.LimitCalculatedOnBasicInsuredAmounts">
<summary>
It indicates that the sum insured will be determined based on the basic sums insured
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.OriginalInsuredAmount">
<summary>
Initial sum insured of the coverage (when the policy was issued)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.OriginalAnnualPremium">
<summary>
Annual premium amount of the coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.OriginalRatePerThousand">
<summary>
Calculation rate of the premium when issuing the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.RoutineForCalculationOfInsuredAmount">
<summary>
Calculation routine for sum insured or limit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.BaseCoverageForMaximumInsuredAmountAllowed">
<summary>
Coverage code to apply the percentage to obtain the maximum insured amount permitted.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.PercentageToApply">
<summary>
Percentage of limit on another coverage to control the maximum permitted.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.BaseRoleForCalculation">
<summary>
Role of the coverage to which the percentage must be applied to obtain the maximum allowed
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MultipleBaseForInsuredAmount">
<summary>
Base to calculate insured amount as a multiple of it.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.GenCurrency">
<summary>
Currency of the coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.SCONDSVS">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.NTYP_AGEMINM">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.NTYP_AGEMINF">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.NCAPITAL_REQ">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.SINHERIT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.FranchiseOrDeductiblePercentageClaim">
<summary>
Franchise or deductible percentage to be applied to the claim.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.FixedAmountOfFranchiseOrDeductibleClaim">
<summary>
fixed amount franchise or deductible amount to be applied to the claim.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MinimumAmountOfFranchiseOrDeductibleClaim">
<summary>
Minimum franchise or deductible amount Claim.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.MaximumAmountOfFranchiseOrDeductibleClaim">
<summary>
Maximum franchise or deductible amount to be applied to the claim.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.DiscountPercentageClaim">
<summary>
Percentage of discount because of franchise or deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.DiscountAmountClaim">
<summary>
Amount of discount because of the franchise or deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CoverageWithCalculatedPremium.DaysFranchiseDeductible">
<summary>
Days of franchise or deductible to be applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.InsuredAmount">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.ContractDate">
<summary>
Date of the contract.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.BondOrContractNumber">
<summary>
Number of the bond or house purchase contract.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.BondType">
<summary>
Code of bond type.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.IssueDate">
<summary>
Date when the policy/certificate is issued.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.CancellationCode">
<summary>
Code of cancellation of the specific information record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.Premium">
<summary>
Premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.EffectiveDate">
<summary>
Effective date of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.DateOfDelivery">
<summary>
Date when the construction is completed or when the dwelling is delivered.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.RunningTime">
<summary>
Execution time.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.TimeUnits">
<summary>
Unit in which the execution time is expressed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.Transaction">
<summary>
Transaction number in the history of the policy (policy_his).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.Form">
<summary>
Form of insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.CreditAmount">
<summary>
Credit amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.IndemnityPercentage">
<summary>
Percentage of losses to be covered.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.DelayedPaymentMonthsAllowed">
<summary>
Number of months permitted for delayed payment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.MonthsElapsedPart1">
<summary>
Number of months elapsed for the payment of 1st part of claim.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.MonthsElapsedPart2">
<summary>
Number of months elapsed for the payment of second part of claim.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.IndemnityPercentageFirstPeriod">
<summary>
Percentage of indemnity, once the first period has passed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.IndemnityPercentageSecondPeriod">
<summary>
Percentage of indemnity, once the second period has passed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NGUAR_KIND">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NPAY_QUANTI">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NPAY_AMOUNT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NDWUELL_NUM">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NEXE_NUM">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NMINPREM">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NMINPREMIUM">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NPERCENTPREMIUM">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NLIMITREQUEST">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NLIMITCURRENT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NMATERIA">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NAJUSTTYPE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NCLASSCLIENT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NMAXCAPITAL">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NRATE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NAGE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.NLIMITNOPAYROLL">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CreditLineOfBusiness.PaymentFrequency">
<summary>
Code of the payment frequency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CurrencyPolicy.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CurrencyPolicy.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CurrencyPolicy.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CurrencyPolicy.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CurrencyPolicy.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CurrencyPolicy.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CurrencyPolicy.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CurrencyPolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CurrencyPolicy.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.CurrencyPolicy.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.Stage">
<summary>
Number identifying the stage of the transportation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.ClassOfMerchandise">
<summary>
Classification of the Merchandise.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.Packaging">
<summary>
Type of Packaging used for the merchandise.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.Limit">
<summary>
Limit insured amount for the merchandise transported in this stage of the itinerary.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.FranchiseOrDeductible">
<summary>
Amount of franchise/deductible of the merchandise transported in the stage of the itinerary.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.NumberOfItems">
<summary>
Number of items that are transported of the specified unit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.Unit">
<summary>
Code of unit for capacity or weight of the items that are transported Example values
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.NoteID">
<summary>
Number of the note containing the comments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.ImageID">
<summary>
Number of the related image
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.Rating">
<summary>
Rate to be applied to the merchandise.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.UnitValue">
<summary>
Unit value of the merchandise.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DetailMerchandiseTransported.RecordEffectiveDateOfStage">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.ExtraPremiumDiscountOrTaxCode">
<summary>
Code of the extra-premium/discount/tax.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.FixedAmount">
<summary>
Fixed amount for extra-premiums/discounts.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.NoteID">
<summary>
Number of the note related to the extra-premium/discount/tax.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInGroupLevel.Percentage">
<summary>
Extra-premium/discount/tax percentage to be applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInPolicyLevel.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInPolicyLevel.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInPolicyLevel.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInPolicyLevel.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInPolicyLevel.ExtraPremiumDiscountOrTaxCode">
<summary>
Code of the extra-premium/discount/tax.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInPolicyLevel.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInPolicyLevel.FixedAmount">
<summary>
Fixed amount for extra-premiums/discounts.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInPolicyLevel.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInPolicyLevel.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInPolicyLevel.NoteID">
<summary>
Number of the note related to the extra-premium/discount/tax.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInPolicyLevel.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInPolicyLevel.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxInPolicyLevel.Percentage">
<summary>
Extra-premium/discount/tax percentage to be applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.ExtraPremiumDiscountOrTaxCode">
<summary>
Code of the extra-premium/discount/tax.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.FixedAmount">
<summary>
Fixed amount for extra-premiums/discounts.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.NoteID">
<summary>
Number of the note related to the extra-premium/discount/tax.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.Reason">
<summary>
Reason why the surcharge/discount/clause was applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.AcceptedSurcharge">
<summary>
It indicates that the surcharge was accepted by the insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DiscountExtraPremiumTaxOfPolicy.Percentage">
<summary>
Extra-premium/discount/tax percentage to be applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.ClientRole">
<summary>
Role of the client in the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.ClientID">
<summary>
Insured person related to the requested document.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.Document">
<summary>
Document related to the technical criteria required by the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.DateReceived">
<summary>
Date when the document was received.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.DocumentStatus">
<summary>
Status of the document.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.ExtendedDateForMedicalTest">
<summary>
Extended date for the medical test.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.LatestExemptionDate">
<summary>
Maximum date for the insured to be exempt of the medical test.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.EvaluationID">
<summary>
Evaluation ID number.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.EnfingValidityDate">
<summary>
Ending validity date of the medical test.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.NoteID">
<summary>
Number of the note containing the comments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DocumentRequestedLifePolicy.DocumentIndicator">
<summary>
It indicates if the requirement was done automatically from a table (
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.PolicyNumber">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.InterfaceCode">
<summary>
Interface Code
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.FieldCode">
<summary>
Code of the field in the template interface.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.ValueForColumnTypeVarchar">
<summary>
Value of the column of the DYNAMICS table for columns of char.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.ValueForColumnTypeNumber">
<summary>
Value of the column of the DYNAMICS table for columns of number.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.ValueForColumnTypeDate">
<summary>
Value of the column of the DYNAMICS table for columns of date.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.DYNAMICS_TABLE_CERTIFICAT.UpdateTimeStamUpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.InvestmentFund">
<summary>
Code of the investment fund.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.SourceAccount">
<summary>
Code of the source account (values
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.EntryDate">
<summary>
Date of the entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.EntryNumber">
<summary>
Entry number in the current account.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.EntryNumberConsecutive">
<summary>
Number that identifies the daily movement of buying and selling for the same fund / account
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.TypeOfEntry">
<summary>
Type of current account entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.Units">
<summary>
Total of units invested.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.UnitBalance">
<summary>
Individual balance of the entry of unit purchase.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.FinancialInstitution">
<summary>
Financial institution from which the deposits are coming from.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.DepositOriginalDate">
<summary>
Original date of the deposit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.MovementIndicatorReversed">
<summary>
Movement Indicator reversed
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.ValueUnit">
<summary>
Value unit. It takes courage when it comes to movements 741 and 742 (wrong value fee)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.ProcessIdentificationNumber">
<summary>
Process identification number
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.TypeOfTributaryBenefit">
<summary>
Type of Tributary Benefit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.EntryPolicyInvestmentFund.EntryNumberOfCurrentAccounGivingRiseToPurchaseSaleUnits">
<summary>
Number that identifies the movement of the current account (UL_MOVE_ACC_POL), giving rise to the purchase or sale of units
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.RatingTable">
<summary>
Code of the rating table used for the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.Illness">
<summary>
Code of the illness.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.ConsecutiveNumber">
<summary>
Consecutive number identifying the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.ExclusionCause">
<summary>
Code of the reason why the illness is excluded.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.ExclusionDate">
<summary>
Date when the disease was excluded.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.EndingDate">
<summary>
Date up to which the illness will remain excluded.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.DiseaseEnteredByExclusionPreexistence">
<summary>
Indicates whether a disease is being entered by exclusion or pre-existence
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.CoverModule">
<summary>
Code of the module of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExcludedIllnessInHealthPolicy.Cover">
<summary>
Code of the cover.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.nDisexprc">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.TypeOfItem">
<summary>
Extra-premium, discount or tax indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.TypeOfUnit">
<summary>
Type of unit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.Rate">
<summary>
Surcharge/discount rate (the unit indicated in the field is expressed in sUnit).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.Amount">
<summary>
Fixed amount to be added as a surcharge/discount
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.ExtraPremiumPermanentOrTemporary">
<summary>
Permanent/temporary extra premium indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.ExtraPremiumOrDiscountEffectiveDate">
<summary>
Effective date of the extra premium/discount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.EndingDateOfExtraPremiumOrDiscount">
<summary>
Ending date of duration of the extra premium/discount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.AgeToAddOrSubtract">
<summary>
Age to be added/subtracted to the insured for the extra-premium.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.NoteID">
<summary>
NoteID
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.Cause">
<summary>
Extra-Rating/discount cause.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ExtraPremiumDiscountByInsured.SurchargeAccepted">
<summary>
It indicates that the surcharge was accepted by the insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.InsuredAmount">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.Article">
<summary>
FIELD DELETED FROM THE SYSTEM
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.SpontaneousCombustionType">
<summary>
Type of spontaneous combustion.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.TypeOfSeismicConstruction">
<summary>
Type of seismic construction.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.ActivityType">
<summary>
FIELD DELETED FROM THE SYSTEM
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.Family">
<summary>
FIELD DELETED FROM THE SYSTEM
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.SeismicZone">
<summary>
Seismic areas.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.SideClosureType">
<summary>
Types of side closures.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.Clrisk">
<summary>
FIELD DELETED FROM THE SYSTEM
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.RoofType">
<summary>
Type of roof
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.ClientID">
<summary>
Code that identifies the payer of the bills of the policy or certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.ValueReportingType">
<summary>
Code of the type of value reporting for the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.FrequencyOfValueReporting">
<summary>
Frequency of value reporting.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.PremiumInDeposit">
<summary>
Deposit premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.BillingFrequencyForValueReports">
<summary>
Frequency at which value reports will be billed for.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.DetailArt">
<summary>
FIELD DELETED FROM THE SYSTEM
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.NumberOfFloors">
<summary>
Number of floors in the building.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.IssueDate">
<summary>
Date when the policy/certificate is issued
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.LocationCode">
<summary>
Code of the location of the risk.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.CancellationCode">
<summary>
Code of cancellation of the specific information record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.TypeOfLocation">
<summary>
Code of the type of city or town where the risk is located.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.Premium">
<summary>
Premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.AverageRate">
<summary>
Average Rate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.EffectiveDate">
<summary>
Effective date of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.IndemnityPeriod">
<summary>
Indemnity period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.ConstructionClass">
<summary>
Class of construction.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.Transaction">
<summary>
Transaction number in the history of the policy (policy_his).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.ActivityCategory">
<summary>
Category of the activity
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.PremiumPercentage">
<summary>
Percentage of loan premium.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.HurricanZone">
<summary>
Zone of Hurricane
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.Concatenation">
<summary>
Concatenation of the fields related to the business draft (nBusinessTy + nCommerGrp + nCodKind).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.SpecificDescription">
<summary>
Specific description of business draft.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.nCodKind">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.PaymentFrequency">
<summary>
Code of the payment frequency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.AnnualLimit">
<summary>
Annual maximum limit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusiness.PercentageForPremiumInDeposit">
<summary>
Percentage to obtain the deposit premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.YearAndMonth">
<summary>
Year and month.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.InsuredAmount">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.ValueReportingDate">
<summary>
Date when the Value Reporting Form was made.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.Billed">
<summary>
Billed value report indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.Premium">
<summary>
Premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.Rate">
<summary>
Rate applied to the value reported.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FireLineOfBusinessDeclaration.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FlatRateOFTax.TaxCode">
<summary>
Code of the tax.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FlatRateOFTax.TaxType">
<summary>
Tax type.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FlatRateOFTax.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FlatRateOFTax.SupportingDocument">
<summary>
Type of support document.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FlatRateOFTax.Percentage">
<summary>
Percentage to be applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FlatRateOFTax.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FlatRateOFTax.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FlatRateOFTax.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.CorrelativeNumber">
<summary>
Correlative sequence assigned to each record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.Division">
<summary>
Code of the Grouping within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.DurationOfEliminationPeriod">
<summary>
Number of days, months, hours of the elimination period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.UnitsOfEliminationPeriod">
<summary>
Units of Elimination Period (months, days, etc.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.DiscountAmountBecauseFranchiseOrDeductible">
<summary>
Amount of discount because of the franchise or deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.Discount">
<summary>
Franchise discount percentage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.FixedAmountOfFranchiseOrDeductible">
<summary>
Fixed Franchise or Deductible Amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.FranchiseOrDeductible">
<summary>
It indicates whether a franchise or deductible is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.MaximumAmountOfFranchiseOrDeductible">
<summary>
Maximum franchise/deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.MinimumDeductibleOrFranchiseAmount">
<summary>
Minimum franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.FranchisePercentage">
<summary>
Franchise Percentage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.DurationOfWaitingPeriod">
<summary>
Number of days/hours/months of the waiting period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.UnitsOfWaitingPeriod">
<summary>
Units of Waiting Period (months, days, etc.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.FranchiseOrDeductibleIsApplied">
<summary>
It indicates if a franchise or deductible is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.DeductibleApplicationFrequency">
<summary>
Frequency of application of the deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.CoverageCode">
<summary>
Code coverage on applying the deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.CoverageBillingItem">
<summary>
Payment concept of the coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.ApplicationLevel">
<summary>
Code of the application level of the deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.RoleWhichDeductibleApplies">
<summary>
Role of the client on which deductible applies
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.ApplicationOrder">
<summary>
Order in which to apply the deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Franchise.CoverageModule">
<summary>
Coverage module
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.LineOfBusiness">
<summary>
Code of The Line of Business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.CertificateID">
<summary>
Number identifying the Certificate
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.InvestmentFund">
<summary>
Code of the investment fund
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.Origin">
<summary>
Origin of the deposit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.SharePercentage">
<summary>
Percentage of share in the Fund
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.RedirectionIndicator">
<summary>
Redirection indicator
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.ActivePortfolio">
<summary>
Active Portfolio.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.Profitability">
<summary>
Projected profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.FundOfMainPolicy.AdviserProfitability">
<summary>
Projected profitability determined by the adviser
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Group.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Group.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Group.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Group.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Group.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Group.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Group.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Group.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Group.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Group.Description">
<summary>
Description of the division.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Group.EmployeePremiumShare">
<summary>
Percentage of premium contributed by the employee.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Group.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Group.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.PolicyNumber">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.ConsecutiveNumber">
<summary>
Consecutive number of the guaranteed saving
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.YearsForGuaranteedSaving">
<summary>
Period of years for the Guaranteed Saving
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.InitialDate">
<summary>
Date From of The Guaranteed Saving
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.EndDate">
<summary>
Date until which the guaranteed saving is in force
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.EndValue">
<summary>
Value of End of The Guaranteed Saving
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.PremiumAmountOfGuaranteedSaving">
<summary>
Premium amount of the guaranteed saving
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.Currency">
<summary>
Guaranteed Saving Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.Amount">
<summary>
Amount of The Cost of Purchase of The Guaranteed Saving
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.StatusOfTheGuaranteedSaving">
<summary>
Status of the guaranteed saving.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.GuaranteedSavingsIndicator">
<summary>
Indicator of the Guaranteed Savings collected
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.BillNumber">
<summary>
Number of the bill That Generates The Guaranteed Saving
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.GuaranteedProfitabilityPercentage">
<summary>
Percentage of Guaranteed Profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.ReserveOfGuaranteedSaving">
<summary>
Reserve of guaranteed saving
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.GuarranteedSavingsPol.ProfitabilityOfGuaranteedSaving">
<summary>
Profitability of guaranteed saving
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.InsuredAmount">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.ClientID">
<summary>
Code that identifies the payer of the bills of the policy or certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.TypeOfInsuredPerson">
<summary>
Type of insured person (main insured, children, spouse, …) for rating purposes in Health insurance
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.IssueDate">
<summary>
Date when the policy/certificate is issued
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.CancellationCode">
<summary>
Code of cancellation of the specific information record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.Premium">
<summary>
Premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.EffectiveDate">
<summary>
Effective Date of The Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.RatingTable">
<summary>
Code of the rating table used for the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.Transaction">
<summary>
Transaction number in the history of the policy (policy_his).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.InternationalCard">
<summary>
Number of international card.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.PaymentFrequency">
<summary>
Code of the payment frequency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.EligibilityPeriodUnits">
<summary>
Type of units for eligibility period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HealthLineOfBusiness.EligibilityPeriodNumber">
<summary>
Number of days/hours/months of the eligibility period
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.nNullcode">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.EffectiveDate">
<summary>
Effective Date of The Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.IssueDate">
<summary>
Date when the policy/certificate is issued
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.PremiumAmount">
<summary>
Premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.Transaction">
<summary>
Transaction number in the history of the policy (policy_his).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.DwellingType">
<summary>
Code of type of dwelling for homeowner policies.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.Ownership">
<summary>
Code of ownership/occupation of a home.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.YearBuilt">
<summary>
Year of construction.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.HomePurchasedCoverage">
<summary>
It indicates the home purchase is covered.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.PurchasePrice">
<summary>
Purchase price of the home.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.CurrencyOfPurchasePrice">
<summary>
Code of the currency of the purchase price.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.DateOfPurchase">
<summary>
Date of purchase of the property.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.AnotherPolicyIndicator">
<summary>
It indicates that the risk is covered by another policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.InsuredAmountOfTheOtherPolicy">
<summary>
Sum insured amount of the other policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.CurrencyOtherPolicy">
<summary>
Code of the currency for the insured amount of the other policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.ExpirationOfTheOtherPolicy">
<summary>
Expiration date of the other policy that is covering this risk.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.UbicationOfSwimmingPool">
<summary>
Code of the location of swimming pool.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.FencedPool">
<summary>
It indicates that the swimming pool is enclosed by a fence.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.FenceHeight">
<summary>
Height of the fence (in meters).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.Trampoline">
<summary>
It indicates that the home has a swimming pool with trampoline.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.PetsOrLivestock">
<summary>
It indicates that the home has pets or livestock.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.AnimalsDescriptions">
<summary>
Description of the animals.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.PreviousAttack">
<summary>
Indicates that any of the animals has attacked someone before.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.ConstructionMaterial">
<summary>
Material for the external part of the building.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.OtherConstructionMaterials">
<summary>
Description of others materials of construction.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.Stories">
<summary>
Stories of the construction.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.Foundation">
<summary>
Code of the foundation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.RoofType">
<summary>
Type of roof.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.RoofYear">
<summary>
Year when the roof was installed or when it was last changed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.Area">
<summary>
Area (mtrs2) of the home.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.LandArea">
<summary>
Area (mts2) of the land.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.NumberOfCars">
<summary>
Number of cars in the garage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.Chimneys">
<summary>
Number of chimneys.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.Bedrooms">
<summary>
Number of bedrooms of the dwelling.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.FullBathrooms">
<summary>
Number of full bathrooms.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.HalfBathrooms">
<summary>
Number of half bathrooms.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.Heating">
<summary>
Type of heating.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.AirConditioningType">
<summary>
Type of air conditioning.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.GasolineTank">
<summary>
Indicates whether the home has a gasoline tank.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.Sprinklers">
<summary>
It indicates that the dwelling has a sprinkler system.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.CompanyMonitoringTheAlarm">
<summary>
Name of the company that monitors the alarm.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.SmokingAllowed">
<summary>
It indicates that it is allowed to smoke in the dwelling.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.DistanceToFireDepartment">
<summary>
Distance to the nearest fire department.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.NearestFireDepartmentName">
<summary>
Name of the nearest fire department.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.DistanceToFireHydrant">
<summary>
Distance to the nearest fire hydrant.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.FloodZoneType">
<summary>
Flood zone type.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.FloodInsuranceIndicator">
<summary>
Indicator of flood insurance
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.InsuredAmount">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.PaymentFrequency">
<summary>
Code of the payment frequency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.HomeLineOfBusiness.SeismicArea">
<summary>
Seismic areas
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.ClientRole">
<summary>
Role of the client in the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.PolicyEntryNumber">
<summary>
Entry number in the history of a policy-certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.NumberOfInsuredPersons">
<summary>
Number of insured persons under the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InsuredPersonsByCoverage.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.InvestmentFund">
<summary>
Code of the investment fund.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.SourceAccount">
<summary>
Code of the source account (values
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.PercentageShare">
<summary>
Share percentage of the policy in the Fund.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.Readdress">
<summary>
Redirection indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.FundAvailableUnits">
<summary>
Number of investment units available.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.PortfolioActiveToInvestIndicator">
<summary>
Active Portfolio indicates if the fund is in place to invest the contributions that the client
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.ProjectedProfitability">
<summary>
Projected profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.InvestmentFundRelatedToPolicy.ProjectedProfitabilityGivenbyAdvisory">
<summary>
Projected profitability given by the advisory
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.PolicyQuotationProposalNumber">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.CertificateID">
<summary>
Number identifying the Certificate
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.LineOfBusiness">
<summary>
Code of The Line of Business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.ModuleCoverage">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.InsuredGroupCode">
<summary>
Code of the Insured Grouping
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.ClientID">
<summary>
Code of The Client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.ClientRole">
<summary>
Role of the client in the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.InsuredAmount">
<summary>
Current amount of the sum insured under the COVER_LAST
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.InitialInsuredAmount">
<summary>
Initial amount of the sum insured under the COVER_LAST (when the Policy was written)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.ChangeIndicator">
<summary>
Coverage change indicator
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.FranchiseDeductibleType">
<summary>
Type of franchise or deductible related to the policy/coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.DiscountPercentageDueToFranchiseDeductible">
<summary>
Percentage of discount by franchise or deductible
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.FixedFranchiseDedcutibleAmount">
<summary>
Fixed franchise or deductible amount
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.MaximumAmountOfFranchiseOrDeductible">
<summary>
Maximum franchise or deductible amount
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.CoverageWithPremiumWaived">
<summary>
Coverage with premium waived.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.MinimumAmountOfFranchiseOrDeductible">
<summary>
Minimum franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.AnnualPremiumAmount">
<summary>
Annual premium amount of the COVER_LAST.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.FranchiseDeductiblePercentage">
<summary>
Franchise or deductible percentage to be applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.Number">
<summary>
Number of days/hours/months of the waiting period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.Rate">
<summary>
Rate per thousand (o/oo) of the coverage premium calculation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.WaitingPeriodTime">
<summary>
Type of Waiting Period
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.FranchiseOrDeductible">
<summary>
It indicates if a franchise/deductible is applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.DiscountAmountDueToFranchiseDeductible">
<summary>
Amount of premium discount per franchise or deductible
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.InsuranceDurationType">
<summary>
Type of insurance period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.InsuranceDuration">
<summary>
Duration of the insurance
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.MinimumEntryAge">
<summary>
Maximum entry age for this role
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.MaximumEntryAge">
<summary>
Maximum entry age for this role
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.MaximumAgeOfPermanence">
<summary>
Maximum age of insurance
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.PaymentDurationType">
<summary>
Type of payment period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.PaymentDuration">
<summary>
Duration of the payments
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.ReasonOfExclusion">
<summary>
Reason why the insured person was excluded from the coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.InsuredAmountRequested">
<summary>
Sum insured requested related to insured person
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.MaximumInsurableAge">
<summary>
Maximum age to which the insured person is protected
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.MaximumAgeOfPermanenceWithCoverage">
<summary>
Maximum age to which the insured person is protected
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.CoverageAniversaryDate">
<summary>
Date of anniversary of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.SearchDate">
<summary>
Search date of the rate
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.RetroactiveEndorsementDate">
<summary>
Date of The Retroactive Endorsement.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.ReinsuranceLineOfBusiness">
<summary>
Code of the reinsurance line of business
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.RecalculationType">
<summary>
Type of recalculation of premium of a COVER_LASTage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.InitialInsuredAmountCalculated">
<summary>
Initial amount of the sum insured under the COVER_LAST (when the Policy was issued)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.InitialAnnualPremiumAmount">
<summary>
Annual premium amount of the COVER_LAST.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.RateCalculated">
<summary>
Rate per thousand (o/oo) of the premium calculation
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.TaxAmount">
<summary>
Tax amount related to the premium amount
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.SurchargeAnnualAmount">
<summary>
Annual amount of the surcharge
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.AnnualDiscountAmount">
<summary>
Annual amount of the discount
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.AnnualCommissionAmount">
<summary>
Annual amount of commission
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.GrossNetRate">
<summary>
Gross Net rate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LastDetailCoverage.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.InsuredGrouping">
<summary>
Code of insured grouping.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.EntryNumber">
<summary>
Entry number of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.InsuredAmount">
<summary>
Insured amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.Rate">
<summary>
Rate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.nPremium">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.BasicAccumulatedPremium">
<summary>
Basic accumulated premium
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.ExcessAccumulatedPremium">
<summary>
Excess accumulated premium
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.NumberOfPaymentsOfBasicPremiums">
<summary>
Number of payments of basic premiums.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.BasicPremiumAmount">
<summary>
Amount of basic premium
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.LayerBasicPremiumPaidAmount">
<summary>
Amount paid over the basic premium of the layer.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.LayerPremiumInExcessPaidAmount">
<summary>
Amount paid over the premium in excess of the layer.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.TypeOfEndorsement">
<summary>
Type of endorsement.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.MinimumPremium">
<summary>
Minimum premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.TransactionNumber">
<summary>
Number of the transaction generating the entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeCoverageVariation.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.Age">
<summary>
Age of the insured at the moment of the transaction.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.InsuredAmount">
<summary>
Amount of the sum insured involved.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.PremiumAmount">
<summary>
Premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.TypeOfTransaction">
<summary>
Type of transaction executed on the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.Transaction">
<summary>
Transaction number of the amendment applied on the life coverage (this number is unique within the coverage).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeInsuranceCoverage.SurrenderID">
<summary>
Number of the surrender.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.InsuredAge">
<summary>
Age of the insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.ClientID">
<summary>
Code that identifies the payer of the bills of the policy or certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.MaximumAge">
<summary>
Age up to which the Insured is covered under the Policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.ActuarialAge">
<summary>
Actuarial age.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.LoanPaymentMethod">
<summary>
Payment method of the loan.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.InsuredAmount">
<summary>
Insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.InsuredAmountForCalculation">
<summary>
Insured amount for calculation of the total annual premium.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.EndingNumberSecuritiesWritten">
<summary>
Last number assigned to the securities written.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.EntryFee">
<summary>
Client entry fee amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.MedicalTestCharge">
<summary>
Amount to be charged on account of the medical tests to be performed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.TypeOfMedicalTest">
<summary>
Type of medical test.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.TypeOfInsurancePeriod">
<summary>
Type of Insurance Period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.StartingNumberOfSecuritiesWritten">
<summary>
Initial number assigned to securities written.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.InsuranceDuration">
<summary>
Duration of insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.IssueDate">
<summary>
Date when the policy/certificate is issued
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.LoanNumber">
<summary>
Mortgage Loan Number.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.CancellationCode">
<summary>
Code of cancellation of the specific information record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.DurationOfPayments">
<summary>
Duration of premium payments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.TypeOfDurationOfPaymentsNose">
<summary>
Type of duration of premium payment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.InsuredAmountMustBeAMultipleOfThisAmount">
<summary>
Amount Multiple of .
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.MaximumNonStandardAmount">
<summary>
Maximum non-standard amount, periodical payment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.MinimumNonStandardAmount">
<summary>
Minimum non-standard amount, periodical payment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.AnnualPremium">
<summary>
Premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.PremiumToCalculateInsuredAmount">
<summary>
Total annual premium amount for sum insured calculation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.BillNumber">
<summary>
Number identifying the bill
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.ReducedPaidUpAmount">
<summary>
Reduced Paid Up (RPU) amount of the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.PaidUpIndicator">
<summary>
Extended term insurance or paid-up policy indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.EffectiveDate">
<summary>
Effective Date of The Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.NumberOfBonds">
<summary>
Total number of bonds subscribed for under the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.ExcessGuaranteedInterest">
<summary>
Interest percentage guaranteed on surplus.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.GuaranteedInterest">
<summary>
Interest percentage guaranteed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.DurationOfExtraPremiums">
<summary>
Number of years for the extra-premiums will be applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.YearsAsAClient">
<summary>
Seniority of the insured in the company.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.Transaction">
<summary>
Transaction number in the history of the policy (policy_his).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.ExtendedTermInsuranceEffectiveDate">
<summary>
New effective date after the extended term insurance (ETI) has been applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.AnnuityAmount">
<summary>
Amount of annuity.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.AnnuityCurrency">
<summary>
Code of the currency for the annuity.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.CreditNumber">
<summary>
Loan number (mortgage protection).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.CreditDurationInMonths">
<summary>
Duration of the credit in months.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.CreditDate">
<summary>
Date when the banking loan (mortgage or similar) was given.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.CreditEndingDate">
<summary>
Loan ending date (mortgage, banking loan).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.CreditCurrency">
<summary>
Code of the currency for the credit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.OriginalCreditAmount">
<summary>
Original amount of the banking loan.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.OutstandingCreditAmount">
<summary>
Outstanding credit amount
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.InsuredAmountCalculation">
<summary>
It indicates that the insured amount must (may) be calculated.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.PremiumCalculationIndicator">
<summary>
Indicator of premium calculation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.NumberOfInsuredPersons">
<summary>
Number of Insured Persons.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.TypeOfInsuredPerson">
<summary>
Type of insured person (main insured, children, spouse, …) for rating purposes in Health insurance
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.RatingTableForHealthInsurance">
<summary>
Code of the rating table used for health insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.Division">
<summary>
Code of the &#34;division&#34; within the group
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.BankAccount">
<summary>
Bank account number (mortgage protection).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.MaximumCreditAmount">
<summary>
Maximum loan amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.PercentageOfCapitalization">
<summary>
Percentage of capitalization (retirement products).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.Amount">
<summary>
Amount of Guaranteed Underwriting Limit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.TypeOfPaymentsPeriod">
<summary>
Type of Payment Period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.EndingDateOfPaymentPeriod">
<summary>
Ending date of the period of payment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.MortgageInterestRate">
<summary>
Interest rate percentage (only for mortgage protection)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.TypeOfDuration">
<summary>
Type of duration of insurance (open, age, number of years, etc.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.Installments">
<summary>
Number of installments for the credit (mortgage protection).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.PercentContributionUsedForInvesting">
<summary>
Percentage of each contribution will be used for investment and savings account (Product class &#61; nontraditional Life)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.PercentageOfCostPaidUsingSavingAccounts">
<summary>
Percentage of cost to be paid using savings accounts(Product class &#61; nontraditional Life)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.PercentageOfCostPaidUsingUnits">
<summary>
Percentage of cost accounts will be paid using units. (Product class &#61; nontraditional Life)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.TypeProfitabilityCode">
<summary>
The type profitability code
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.CodeOfTableUsingGuaranteedInterest">
<summary>
Code of table using Guaranteed Interest policy. (Product class &#61; nontraditional Life)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.TypeOfIndemnity">
<summary>
Type of Indemnity.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.BasicAmountOfAnnualPremium">
<summary>
Basic Amount of annual premium for the policy / certificate
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.PolicyModule">
<summary>
Code module associated with the policy at issue
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.AmountAgreedAccordingPaymentFrequency">
<summary>
Amount agreed / planned according to the policy premium payment frequency
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.AgreedProjectedAnnualPremium">
<summary>
Agreed amount / projected annual policy premium
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.MinimumPremiumAmountaccordingProduct">
<summary>
Minimum premium amount according product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.GuaranteedInterestInInvestment">
<summary>
Guaranteed interest in investment
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.PrintCoverageCertificatesIndicator">
<summary>
Indicator of print certificates of coverage status
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.FolioNumber">
<summary>
Folio number. Corresponds to the movement Folio related document. In APV corresponds to foil the return of chosen options.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.MonthYearFirstDiscount">
<summary>
Month-Year of first the discount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.TypeOfTributaryBenefit">
<summary>
Type of Tributary Benefit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.Folio">
<summary>
Number of the folio
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.FinancialInstitution">
<summary>
Code of the financial institution.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusiness.ExclusionCoverageType">
<summary>
Type of coverage per insured exclusion
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.CertificateID">
<summary>
Number identifying the Certificate
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.LineOfBusiness">
<summary>
Code of The Line of Business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.InsuredAge">
<summary>
Insured&#39;s actual age
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.MaximumAge">
<summary>
Age up to which the Insured is covered under the Policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.ActuarialAge">
<summary>
Actuarial age.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.LoanPaymentMethod">
<summary>
Payment method of the loan.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.InsuredAmount">
<summary>
Insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.InsuredAmountForCalculation">
<summary>
Insured amount for calculation of the total annual premium.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.EndingNumberSecuritiesWritten">
<summary>
Last number assigned to the securities written.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.EntryFee">
<summary>
Client entry fee amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.MedicalTestCharge">
<summary>
Amount to be charged on account of the medical tests to be performed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.TypeOfMedicalTest">
<summary>
Type of medical test.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.TypeOfInsurancePeriod">
<summary>
Type of Insurance Period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.StartingNumberOfSecuritiesWritten">
<summary>
Initial number assigned to securities written.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.InsuranceDuration">
<summary>
Duration of insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.IssueDate">
<summary>
Date when the policy/certificate is issued
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.LoanNumber">
<summary>
Mortgage Loan Number.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.CancellationCode">
<summary>
Policy/Certificate Cancellation Code.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.DurationOfPayments">
<summary>
Duration of premium payments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.TypeOfDurationOfPaymentsNose">
<summary>
Type of duration of premium payment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.InsuredAmountMustBeAMultipleOfThisAmount">
<summary>
Amount Multiple of .
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.MaximumNonStandardAmount">
<summary>
Maximum non-standard amount, periodical payment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.MinimumNonStandardAmount">
<summary>
Minimum non-standard amount, periodical payment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.PremiumAmount">
<summary>
Premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.PremiumToCalculateInsuredAmount">
<summary>
Total annual premium amount for sum insured calculation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.BillNumber">
<summary>
Number identifying the bill
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.ReducedPaidUpAmount">
<summary>
Reduced Paid Up (RPU) amount of the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.PaidUpExtentedTermIndicator">
<summary>
Extended term insurance or paid-up policy indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.EffectiveDate">
<summary>
Effective Date of The Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.NumberOfBonds">
<summary>
Total number of bonds subscribed for under the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.ExcessGuaranteedInterest">
<summary>
Interest percentage guaranteed on surplus.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.GuaranteedInterest">
<summary>
Interest percentage guaranteed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.DurationOfExtraPremiums">
<summary>
Number of years for the extra-premiums will be applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.YearsAsAClient">
<summary>
Seniority of the insured in the company.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.TransactionNumber">
<summary>
Transaction Number generated by the Entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.ExtendedTermInsuranceEffectiveDate">
<summary>
New effective date after the extended term insurance (ETI) has been applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.AnnuityAmount">
<summary>
Amount of annuity.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.AnnuityCurrency">
<summary>
Code of the currency for the annuity.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.CreditNumber">
<summary>
Loan number (mortgage protection).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.CreditDurationInMonths">
<summary>
Duration of the credit in months.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.CreditDate">
<summary>
Date when the banking loan (mortgage or similar) was granted
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.CreditEndingDate">
<summary>
Loan ending date (mortgage, banking loan).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.CreditCurrency">
<summary>
Code of the currency for the credit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.OriginalCreditAmount">
<summary>
Original amount of the banking loan.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.OutstandingCreditAmount">
<summary>
Outstanding credit amount
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.InsuredAmountCalculation">
<summary>
It indicates that the insured amount must (may) be calculated.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.PremiumCalculationIndicator">
<summary>
Indicator of premium calculation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.NumberOfInsuredPersons">
<summary>
Number of Insured Persons.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.TypeOfInsuredPerson">
<summary>
Type of insured person (main insured, children, spouse, …) for rating purposes in Health insurance
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.RatingTableForHealthInsurance">
<summary>
Code of the rating table used for health insurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.Division">
<summary>
Code of the &#34;division&#34; within the group
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.BankAccount">
<summary>
Bank account number (mortgage protection).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.MaximumCreditAmount">
<summary>
Maximum loan amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.PercentageOfCapitalization">
<summary>
Percentage of capitalization (retirement products).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.Amount">
<summary>
Amount of Guaranteed Underwriting Limit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.TypeOffPaymentsPeriod">
<summary>
Type of Payment Period.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.EndingDateOfPaymentPeriod">
<summary>
Ending date of the period of payment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.MortgageInterestRate">
<summary>
Interest rate percentage (only for mortgage protection)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.TypeOfDuration">
<summary>
Type of duration of insurance (open, age, number of years, etc.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.Isntallments">
<summary>
Number of installments for the credit (mortgage protection).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.SavingPercentage">
<summary>
Percentage of each contribution to be invested in a saving account
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.CostPercentageOnCurrentAccount">
<summary>
Percentage of cost that applies on the current account.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.CostPercentageOnUnits">
<summary>
Percentage of cost that applies on the units.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.CapitalizationIndexCode">
<summary>
Code of the Capitalization Index table that will be used in the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.GuaranteedInterestTable">
<summary>
Code of Table of Guaranteed Interest of The Policy (VNT)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.TypeOfIndemnity">
<summary>
Type of Indemnity.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.BasePremium">
<summary>
Total annual base premium amount
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.AgreedPremium">
<summary>
Premium Agreed by Saving Concept, according to the payment frequency
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.AnnualAgreedPremium">
<summary>
Premium Annual Agreed by Saving Concept
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.MinimumPremium">
<summary>
Annual minimum premium amount
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.GuaranteedProfitability">
<summary>
Guaranteed Profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.LifeLineOfBusinessCurrentValue.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.InsuredAmount">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.IssueDate">
<summary>
Date when the policy/certificate is issued
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.CancellationCode">
<summary>
Code of cancellation of the specific information record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.Premium">
<summary>
Certificate premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.Division">
<summary>
Code of the &#34;division&#34; within the group
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.EffectiveDate">
<summary>
Effective Date of The Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.TransactionNumber">
<summary>
Transaction number in the history of the policy (policy_his).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MachineryLineOfBusiness.PaymentFrequency">
<summary>
Code of the payment frequency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.ChangesAreAllowed">
<summary>
It Indicates that changes are allowed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.FixedRate">
<summary>
Fixed rate for this module.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.RatingByModuleIndicator">
<summary>
Indicator of rating by module.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Module.InheritCharacteristicsModuleRemovedIndicator">
<summary>
It indicates that you want to inherit settings from the module coverage removed
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.NARTICLEFIELDDELETEDFROMTHESYSTEM">
<summary>
FIELD DELETED FROM THE SYSTEM
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.InsuredAmount">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.ConstructionCategory">
<summary>
Category of insured risk construction.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.NCL_RISKFIELDDELETEDFROMTHESYSTEM">
<summary>
FIELD DELETED FROM THE SYSTEM
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.NDET_RISKFIELDDELETEDFROMTHESYSTEM">
<summary>
FIELD DELETED FROM THE SYSTEM
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.IssueDate">
<summary>
Date when the policy/certificate is issued.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.CancellationCode">
<summary>
Code of cancellation of the specific information record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.PremiumAmount">
<summary>
Certificate premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.EffectiveDate">
<summary>
Effective Date of The Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.Transaction">
<summary>
Transaction number in the history of the policy (policy_his).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.ClientID">
<summary>
Client code of the policy holder.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.Concatenation">
<summary>
Concatenation of the fields related to the business draft (nBusinessTy + nCommerGrp + nCodKind).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.SpecificDescription">
<summary>
Specific description of business draft.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.ConstructionClass">
<summary>
Class of construction.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.nCodKind">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.MultiRiskLineOfBusiness.PaymentFrequency">
<summary>
Code of the payment frequency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.EntryNumber">
<summary>
Number of the entry pending of billing.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.BillControlDigit">
<summary>
Bill control digit (used in policy modifications with changes in reinsurance)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.InsuredAmount">
<summary>
Sum insured amount related to the billing.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.ExchangeRate">
<summary>
Exchange rate of the entry to the local currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.EndingDate">
<summary>
Ending date of the entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.PremiumAmount">
<summary>
Amount of premium of the bill.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.EntryStatus">
<summary>
Status of the billing entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.TaxAmount">
<summary>
Tax amount (related to the premium amount).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.BillOrigin">
<summary>
Transaction originating the bill
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.YearAndMonth">
<summary>
Year and month when the entry is billed for.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.BranchOffice">
<summary>
Code of the Branch Office
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.StateOrProvince">
<summary>
Code of the state or province.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.EffectiveDate">
<summary>
Effective Date of The Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.InsuranceArea">
<summary>
Insurance area (Life or P&#38;C).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.PaymentMethod">
<summary>
Code of the payment method.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.SourceMovement">
<summary>
Source Movement
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransaction.Premiuminvoicenumber">
<summary>
Premium invoice number
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.EntryNumberPendingOfBilling">
<summary>
Number of the entry pending of billing.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.BillControlDigit">
<summary>
Bill control digit (used in policy modifications with changes in reinsurance)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.ConsecutiveNumber">
<summary>
Consecutive number of detail record for a premium bill.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.AddsToObtainInsuredAmount">
<summary>
Indicator of the addition to obtain the sum insured
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.TypeOfDetailRecord">
<summary>
Type of premium detail record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.BillingItem">
<summary>
Billing item.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.CodeOfDetailBilled">
<summary>
Code of the premium detail billed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.SolvencyMarginClass">
<summary>
Classification code for the solvency margin.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.AccountingLineOfBusiness">
<summary>
Code of the accounting line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.ReinsuranceLineOfBusiness">
<summary>
Code of the line of business for reinsurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.InsuredAmount">
<summary>
Sum insured amount related to the billing.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.CommissionPercentage">
<summary>
Commission percentage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.CommisionAmount">
<summary>
Commission amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.BilledPremium">
<summary>
Premium amount billed for in the entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.TaxAmount">
<summary>
Tax amount (related to the premium amount).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.StateOrProvince">
<summary>
Code of the state or province.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.PremiumAmount">
<summary>
Premium amount according to the policy effective period (maximum 1 year).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.CommissionAmount">
<summary>
Commission amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.AnnualPremium">
<summary>
Annual premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.AddsToObtainBaseForTaxes">
<summary>
Indicator of the addition to obtain taxes
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.AnnualCommissionAmount">
<summary>
Annual commission amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.TaxablePremium">
<summary>
Amount of the detail (taxable).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.ExemptPremium">
<summary>
Amount of the detail (exempt).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.TaxAmount2">
<summary>
Tax amount (related to the premium amount).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.CoverageExtraPremium">
<summary>
Total amount of surcharge for the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.DiscountAmount">
<summary>
Discount amount related to the premium of coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.RecordIdentifierNumber">
<summary>
Record identifier number (NID_BILL), which is associated the Rec / Desc / Imp
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.OutstandingBillingTransactionsDetail.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentAgreementByPolicy.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentAgreementByPolicy.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentAgreementByPolicy.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentAgreementByPolicy.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentAgreementByPolicy.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentAgreementByPolicy.ClientID">
<summary>
Code identifying a client associated with the agreement.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentAgreementByPolicy.AgreementCode">
<summary>
Agreement Code
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentAgreementByPolicy.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentAgreementByPolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentAgreementByPolicy.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentAgreementByPolicy.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.LowestLimitOfPolicyYear">
<summary>
Lowest limit for range of policy-year.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.HighestLimitOfPolicyYear">
<summary>
Highest limit for range of policy-year.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.ProjectedAnnualPayments">
<summary>
Estimated total amount of deposits (payments) during each year.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.ExtraordinaryAmountPolicyCurrencySpecificMonth">
<summary>
Amount extraordinary contribution in currency policy, applied to a specific month
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.MonthForExtraordinaryContribution">
<summary>
Month in which must be applied extraordinary contribution
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.PaymentFrequency">
<summary>
Code of the payment frequency
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.AmountExtraPremiumForPeriod">
<summary>
Amount of extra premium for the period
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.SimulatedWithdrawalAmountSspecificPeriod">
<summary>
Simulated withdrawal amount for a specific period
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PaymentsPlan.SourceOfDeposit">
<summary>
Source code of deposit
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PER_DEPOSIT_MONTH.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PER_DEPOSIT_MONTH.LineOfBusiness">
<summary>
Code of The Line of Business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PER_DEPOSIT_MONTH.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PER_DEPOSIT_MONTH.PolicyNumber">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PER_DEPOSIT_MONTH.CertificateID">
<summary>
Number identifying the Certificate
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PER_DEPOSIT_MONTH.InitialRange">
<summary>
Initial range of year when the policy is
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PER_DEPOSIT_MONTH.ContributionMonth">
<summary>
Month when the contribution must be applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PER_DEPOSIT_MONTH.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PER_DEPOSIT_MONTH.AgreedPremiun">
<summary>
Agreed premium of the month
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PER_DEPOSIT_MONTH.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PER_DEPOSIT_MONTH.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PER_DEPOSIT_MONTH.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.ClientID">
<summary>
Code that identifies the payer of the bills of the policy or certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.CurrentAccountIndicator">
<summary>
It indicates that the policy has a current account.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.SourceType">
<summary>
Type of source (direct, accepted coinsurance, accepted reinsurance).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.CoinsuranceCededIndicator">
<summary>
Coinsurance ceded indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.TypeOfBillForGroups">
<summary>
Type of bill for groups.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.TypeOfReinsuranceForGroups">
<summary>
Type of reinsurance in group policies.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.TypeOfRenewalForGroups">
<summary>
Type of renewal for groups.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.CommissionType">
<summary>
Types of commissions to be assigned to the policy (fixed, by table, none).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.ReportingValuesIndicator">
<summary>
It indicates that the policy must report values.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.DirectDebitBills">
<summary>
Bills to use Direct-Debit (all or only renewal)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.IndexationType">
<summary>
Indexation type (fixed factor, last
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.BillIDForLeadingCompany">
<summary>
Bill number in the leader company.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.DocumentNumber">
<summary>
Number of the notice by the leader company.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.PolicyIDForLeaderCompany">
<summary>
Number of the policy of the leader company.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.PolicyType">
<summary>
Policy type.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.OriginDocument">
<summary>
Type of Record (Application/Quotation) originating The Policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.AutomaticRenewal">
<summary>
Automatic renewal indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.OptionToApplyIndexation">
<summary>
Option to apply indexation on the original sum insured or on the last year
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.PolicyStatus">
<summary>
Policy status.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.ThisPolicySubstitutesOthers">
<summary>
The policy to which the record pertains has replaced other policies.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.OptionForClausesInGroups">
<summary>
It indicates how clauses will be processed when issuing the certificates
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.OptionForExtraPremiumAndDiscountsInGroups">
<summary>
It indicates how the extra-premiums/discounts will be processed when issuing the certificates
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.OptionOfCoveragesForGroups">
<summary>
It indicates how coverages will be processed when issuing the certificates
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.PolicyWillNotBeAutomaticallyCancelledForNoPayment">
<summary>
This policy is not taken into account in the automatic process of policies cancellation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.PolicyIncludedInPaymentAgreement">
<summary>
The policy is included in the payment agreement.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.ApplicationID">
<summary>
Number of application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.LastModificationDate">
<summary>
Date of last modification made to the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.ApplicationCancellationDate">
<summary>
Date when the application or quotation is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.OriginalEffectiveDate">
<summary>
Original effective date of the Policy/Certificate (first effective date).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.EffectiveDate">
<summary>
Effective Date of The Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.IssueDate">
<summary>
Date when the policy/certificate is issued
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.KeepUntil">
<summary>
Date until which the application or quotation may remain recorded in the system.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.ApplicationDate">
<summary>
Date of application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.NextBilling">
<summary>
Date of next billing.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.CommissionAmount">
<summary>
Commission amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.InsuredAmount">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.BonusMalus">
<summary>
Percentage of bonus for no-claims in groups.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.CommissionPercentage">
<summary>
Percentage of commission for this policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.IndexationFactor">
<summary>
Fixed indexation percentage of the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.LeaderCommission">
<summary>
Commission percentage of the leader company.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.Expenses">
<summary>
Percentage of administrative expenses.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.ShareOfLeaderCompany">
<summary>
Percentage of share of the leader company in the insured risk .
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.MainProducerShare">
<summary>
Percentage of share of the main producer of the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.AnnualPremium">
<summary>
Annual premium amount of the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.OwnShareInAcceptedRisks">
<summary>
Percentage of share on the accepted risk.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.PaymentFrequency">
<summary>
Code of the payment frequency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.MainProducer">
<summary>
Code of the main producer of the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.LastCertificateIDAssigned">
<summary>
Number identifying the last certificate assigned to this policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.NoteID">
<summary>
Number of the note containing the comments
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.BeneficiaryNoteID">
<summary>
Number of the note defining the beneficiaries as per free text.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.CommentsNoteID">
<summary>
Number of the note containing the comments related to the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.RenewalNoteID">
<summary>
Number of the note describing the conditions for renewal of the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.CoverageNoteID">
<summary>
Number of the text related to the coverage note.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.ApplicationOrQuotationNumber">
<summary>
Application or quotation number.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.MinimumNumberOfCertificates">
<summary>
Minimum number of certificates required.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.Transaction">
<summary>
Transaction generating the entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.LastHistoryEntryNumber">
<summary>
Number of the last historical entry generated for the policy (policy_his).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.OfficialPolicyID">
<summary>
Number of the policy for legal/official purposes.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.Copies">
<summary>
Default value for the number of copies to be printed for the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.LeaderCompany">
<summary>
Code of the leader company.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.ReasonForNoConversion">
<summary>
Code of the reason for non-conversion into policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.DaysOfNoticeForCancellation">
<summary>
Number of days of notice of cancellation of the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.CancellationCode">
<summary>
Policy/Certificate Cancellation Code.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.BranchOffice">
<summary>
Code of the Branch Office
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.BranchOfficeAdministrating">
<summary>
Code of the branch office/office/zone in charge of administrating this policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.RatingTable">
<summary>
Code of the rating table used for the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.AmendingUser">
<summary>
Code of the user amending the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.Installments">
<summary>
Number of installments to pay the premium.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.QuotationType">
<summary>
Quotation type is normal.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.BillingOptions">
<summary>
Options of policy/certificate billing (prorate, short-term, by installments).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.DaysBilledInFirstQuota">
<summary>
Number of days billed on the first installment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.DaysBilledInNextQuotas">
<summary>
Number of days billed on the next installment
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.CompanyCode">
<summary>
Code of the insurance company.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.BranchOfficeOfCarrier">
<summary>
Code of the branch office of the carrier.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.CarrierPolicyID">
<summary>
Code identifying the policy in the insurance company.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.Agreement">
<summary>
Discount or Agreement Code.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.TypeOfPayrollForQuotation">
<summary>
Type of payroll for the quotation (temporary or definitive).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.InnominatedPolicy">
<summary>
Indicator of &#39;innominated&#39; policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.BankassuranceIndicator">
<summary>
Indicator that the policy is a Bankassurance policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.GuaranteedUnderwritingLimitAmount">
<summary>
Amount of Guaranteed Underwriting Limit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.GuaranteendUnderwritingLimit">
<summary>
Indicator of calculation of Guaranteed Underwriting Limit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.Agency">
<summary>
Code of Agency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.OfficeCode">
<summary>
Code of Office.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.TypeOfBenefitDefinitionForGroups">
<summary>
Type of definition of benefits for groups (at Group level, division, certificate, etc.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.ProducersForGroupOrByCertificate">
<summary>
It indicates whether the producers were assigned for the group or for every single certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.CurrentAccountUse">
<summary>
Use of current account in the group (by group, certificate, division, etc.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.CriteriaToDetermineDuplicationInUpload">
<summary>
Criteria to determine duplication in upload document (by ID of the client or by credit number).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.NLOCAL">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.RenewalDatePolicy">
<summary>
Renewal date of the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.DaysReportingClaims">
<summary>
Days to reporting / casualty denounced
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.SMASSIVE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.PrintingCertificatesCoverageIndicator">
<summary>
Indicator printing certificates of coverage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.ReceiptOfGenerationIndicator">
<summary>
Receipt of generation indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.TypeOfMedicalEvaluation">
<summary>
Type of medical evaluation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.GracePeriod">
<summary>
Grace period
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.ProductClassLife">
<summary>
Product class life.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Policy.nLeadYM">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.PolicyValue">
<summary>
Policy value.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.SurrenderedAmount">
<summary>
Total amount of partial surrender made to the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.TotalFixedCharges">
<summary>
Total amount of fixed charges.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.CoverageCost">
<summary>
Total amount of the cost of coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.EarnedInterest">
<summary>
Total amount of earned interests.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.PaidNetPremiums">
<summary>
Total amount of paid net premiums.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.PaymentsTotalAmount">
<summary>
Total amount of the payments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.DateOfLastEntry">
<summary>
Date of the last entry in the current account.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.LapseDate">
<summary>
Date in which the policy cash value of policy turned negative
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.DateOfLastPayment">
<summary>
Date of the last payment entered to the current account.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.MonthForNextCalculation">
<summary>
Month of next calculation of the policy value.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.YearForNextCalculation">
<summary>
Year of next calculation of the policy value.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.FixedCost">
<summary>
Fixed cost to be charged.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.MonthToChargeFixedCost">
<summary>
Month when the fixed cost must be charged.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyCheckingAccount.YearToChargeFixedCost">
<summary>
Year when the fixed cost must be charged.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.PolicyEntryNumber">
<summary>
Entry number in the history of a policy-certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.ClaimID">
<summary>
Claim number.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.CancelledEntry">
<summary>
The entry has been cancelled
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.BillNumber">
<summary>
Number identifying the bill
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.Transaction">
<summary>
Number of the transaction generating the entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.TransactionType">
<summary>
Type of transaction performed on a policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.dLedgerDat">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.OfficialPolicyID">
<summary>
Number of the policy for legal/official purposes.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.EndorsementType">
<summary>
Code of type of endorsement.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.ServiceOrder">
<summary>
Number of the service order.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.NoteID">
<summary>
Number of the note related to the entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.ProcessedForCommissions">
<summary>
It indicates that it was processed by the commissions process of producers.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.RetroactiveEndorsementDate">
<summary>
Date of The Retroactive Endorsement.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.ApplicationOrQuotationNumber">
<summary>
Application or quotation number that originates the entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.Agency">
<summary>
Agency where the transaction was made.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.ReasonForOutstandingStatus">
<summary>
Reason why the policy/quotation/application is in outstanding status
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.QuotationStatus">
<summary>
Status of the quotation/application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.ReasonForNoConversion">
<summary>
Code of the reason for non-conversion into policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.PolicyCartolaNumber">
<summary>
Number of the cartola of the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.CartolaNumber">
<summary>
Number of the cartola
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.PolicyOriginDestination">
<summary>
Policy Number origin / destination linking source and target certificates when a transfer of insured person becomes
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.CertificateOriginDestination">
<summary>
Certificate Number origin / destination linking source and target certificates when a transfer of insured person becomes
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.PaymentFrequency">
<summary>
Code of the payment frequency
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.CancellationCode">
<summary>
Policy/Certificate Cancellation Code.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyHistory.sFile_report">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.ProtectionElement">
<summary>
Code of the Protection Element.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.CurrencyCode">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.DiscountAmount">
<summary>
Amount of discount because of element of protection.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.DiscountPercentage">
<summary>
Percentage of discount because of element of protection.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.MaximumDiscount">
<summary>
Maximum amount of discount to apply.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.MinimumDiscount">
<summary>
Minimum amount of discount to apply.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyProtectionElement.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyWindow.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyWindow.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyWindow.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyWindow.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyWindow.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyWindow.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyWindow.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyWindow.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyWindow.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyWindow.ContentIndicators">
<summary>
Contents indicator vector (t one-alphanumeric characters elements).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PolicyWindow.WindowsVector">
<summary>
Window Vector (Six-Alphanumeric Characters Elements).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.CertificateID">
<summary>
Number identifying the Certificate
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.TypeProyection">
<summary>
Proyection type.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.YearOfThePolicy">
<summary>
Current year of the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.CurrencyCode">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.PolicyValueOfProjectedProfitablity">
<summary>
Amount of the policy value according to the projected profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.AccumulatdAmount">
<summary>
Accumulated amount according to the payment schedule
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.SurrenderAvailableAmount">
<summary>
Available amount for surrender.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.SurrenderAvailablemountAccordingInterest">
<summary>
Available amount for surrender according to the projected interest
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.InsuredAge">
<summary>
Age of the insured for the year of registration
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.DeathCoverageAmount">
<summary>
Death coverage for the year of the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.PolicyValueOfSecondPercentageOfProjectedProfitability">
<summary>
Amount of the policy value according to the second percentage of projected profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.SurrenderAvailableAmountAccordingProjection">
<summary>
Available amount for surrender expressed in the policy&#39;s currency using the second percentage of projected profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.DeathCoverageProjected">
<summary>
Death coverage for the year of the policy using the second percentage of projected profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.ExcessAmount">
<summary>
Amount related to the excess accounts
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.PremiumOfThePolicyValueOfProjectedProfitablity">
<summary>
Premium amount of the policy value according to the projected profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.SavingAmountOfThePolicyValueOfProjectedProfitability">
<summary>
Saving amount of the policy value according to the projected profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.PremiumPolicyValueOfSecondPercentageOfProjectedProfitability">
<summary>
Amount of the premium of the policy value according to the second percentage of projected profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.SavingAmountOfThePolicyValueOfSecondPercentageOfProjectedProfitability">
<summary>
Saving amount of the policy value according to the second percentage of projected profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.SourceAccount">
<summary>
Code of the source account (values
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.RentabilityAmount">
<summary>
Amount of rentability as first rate projection.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.AmountChargesFirstProjection">
<summary>
Amount of charges and precargos as first rate projection.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.AmountPremiumFirstProjection">
<summary>
Amount of premium rate period as first projection.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.AmountRentabilitySecondProjection">
<summary>
Amount of rentability as second rate projection.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.AmountChargesSecondProyection">
<summary>
Amount of charges and precargos as second rate projection.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL.AmountPremiumSecondProjection">
<summary>
Amount of premium rate period as second projection.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.CertificateID">
<summary>
Number identifying the Certificate
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.TypeProyection">
<summary>
Type of proyection.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.SourceAccount">
<summary>
Code of the source account (values
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.YearOfThePolicy">
<summary>
Current year of the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.PolicyCurrentMonth">
<summary>
Current month of the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.ConsecutiveNumber">
<summary>
Consecutive Number identifying The Record as sole.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.EntryType">
<summary>
It indicates the type of entry
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.CoverageModule">
<summary>
Code of the module associated to the charge
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.TaxAmount">
<summary>
Tax amount
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.EntryTypeCurrentAccount">
<summary>
Type of entry of the current account.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.PolicyValueOfProjectedProfitablity">
<summary>
Amount of the policy value according to the projected profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.AccumulatdAmount">
<summary>
Accumulated amount according to the payment schedule
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.SurrenderAvailableAmount">
<summary>
Available amount for surrender.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.RealAge">
<summary>
Real age of the insured person when he/she was first registered
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.ActuarialAge">
<summary>
Actuarial age of the insured person when she/he was first registered
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.InsuredAmount">
<summary>
Death coverage for the year of the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.PremiumOfThePolicyValueOfProjectedProfitablity">
<summary>
Premium amount of the policy value according to the projected profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.SavingAmountOfThePolicyValueOfProjectedProfitability">
<summary>
Saving amount of the policy value according to the projected profitability
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.BeforeInvestmentChargeIndicator">
<summary>
It indicates that The Charge or Credit must be applied before the investment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.ChargeCode">
<summary>
Charge Code
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.ChargeAmount">
<summary>
Charge amount
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.Premium">
<summary>
Premium amount of the guaranteed saving
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.PurchaseCost">
<summary>
Amount of the purchase cost of the guaranteed saving
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.Reserve">
<summary>
Reserve of guaranteed saving
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.TributaryBenefit">
<summary>
Amount of the tributary benefit
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.Rentability">
<summary>
Amount of guaranteed rentability.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.CapitalRisk">
<summary>
Amount of capital at risk.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PROJECTVUL_DET.PercentajeRateApplied">
<summary>
Percentage rate applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.ConsecutiveNumber">
<summary>
Number identifying the property insured under a policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.InsuredProperty">
<summary>
Códe of the property insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.Limit">
<summary>
Insured value of the property.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.Description">
<summary>
Description of the insured property.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.FranchiseOrDeductible">
<summary>
It indicates whether a franchise or deductible is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.DiscountPercentageBecauseFranchiseOrDeductible">
<summary>
Percentage of discount because of franchise or deductible.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.Losses">
<summary>
Losses in the claim.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.NoteID">
<summary>
Number of the note containing the comments related to the insured property.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.FixedAmountOfFranchiseOrDeductible">
<summary>
Fixed franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.MaximumAmountOfFranchiseOrDeductible">
<summary>
Maximum franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.PremiumAmount">
<summary>
Premium amount for this property.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.MinimumDeductibleOrFranchiseAmount">
<summary>
Minimum franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.RatePerThousand">
<summary>
Rate (o/oo) to be applied to the insured property.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.FranchiseOrDeductiblePercentage">
<summary>
Franchise or deductible percentage to be applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.CurrencyCode">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.PropertyInsured.ServiceOrder">
<summary>
Number of the service order.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.ClassOfMerchandise">
<summary>
Classification of the insured merchandise.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.Packaging">
<summary>
Packaging type used for the merchandise.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.ValueLimit">
<summary>
Limit amount of the value of the merchandise.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.nRate">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.nAmo_Deduc">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.DeductiblePercentage">
<summary>
Deductible Percentage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.MaximumDeductible">
<summary>
Maximum deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.nMinAmount">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RateAndDeductibleForTransportMerchandise.FranchiseOrDeductible">
<summary>
It indicates if a franchise or deductible is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.RiskType">
<summary>
Type of risk.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.ConsecutiveNumber">
<summary>
Consecutive number identifying the record as unique.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.Age">
<summary>
Age of the rate
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.SmokerIndicator">
<summary>
Smoker client indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.InsuranceLowestYearsLimit">
<summary>
Lowest limit of the number of years of the insurance period
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.RateForWomen">
<summary>
Rate for women.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.PaymentLowestYearsLimit">
<summary>
Lowest limit of the number of years of the payment period
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.PremiumForWomen">
<summary>
Premium amount for women.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.RateForMen">
<summary>
Rate for men.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.PremiumForMen">
<summary>
Premium amount for men.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.RatingTableType">
<summary>
Type of rating.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.FinalYearOfInsurance">
<summary>
Final year of the insurance period of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.FinalYearOfPayment">
<summary>
Final year of the payment period of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.SingleRate">
<summary>
Single rate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RatingTableTraditionalLife.SinglePremium">
<summary>
Single Premium
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.CoverageModule">
<summary>
Code of The Module of The Coverage. Is zero unless the reinsurance is defined by &#34;coverage&#34;.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.CoverageCode">
<summary>
Code of the coverage. Is zero unless the reinsurance is defined by &#34;coverage&#34;.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.ReinsuranceLineOfBusiness">
<summary>
Code of the Reinsurance Line of Business
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.TypeOfTreaty">
<summary>
Type of reinsurance treaty.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.CompanyCode">
<summary>
Code of the company.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.AcceptanceDate">
<summary>
Date of acceptance of the facultative reinsurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.InsuredAmountCeded">
<summary>
Insured amount ceded in the treaty (calculated on the basis of participation in the contract total amount of reinsurance ceded).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.CommissionPercentage">
<summary>
Percentage of facultative reinsurance commission.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.CurrencyCode">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.Cumulus">
<summary>
Code of cumulus.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.InterestEarnedByPremiumReserves">
<summary>
Interest to be paid on premiums withheld for facultative reinsurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.ReinsuranceTreaty">
<summary>
Number of the reinsurance treaty.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.PremiumReservePercentageInFacultative">
<summary>
Premium percentage to be reserved for the reinsurance company.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.Share">
<summary>
Percentage of share on the total risk.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.TypeOfChange">
<summary>
Type of the change for reinsurance purposes.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.AcceptanceCode">
<summary>
Acceptance Code By The Facultative Reinsurer
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.ManualEntryIndicator">
<summary>
Manual entry indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.TotalReinsuranceCapital">
<summary>
Total reinsurance capital (accumulated coverages involved)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.ApplicationPriority">
<summary>
Order or priority in applying the reinsurance contract.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ReinsuranceDistribution.SharePercentage">
<summary>
Percentage reinsurance capital, given the contract (percentage of participation in the contract).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.RequestDate">
<summary>
Date of request of the transaction
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.InvestmentFundCode">
<summary>
Code of the investment fund
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.QuotationType">
<summary>
Code of type of quotation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.CancellationDate">
<summary>
Cancellation date of the request
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.SurrenderType">
<summary>
Type of surrender.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.PaymentOrder">
<summary>
Type of payment order.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.CancelOutstandingPremiums">
<summary>
It indicates that outstanding premiums must be cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.Amount">
<summary>
Amount of the partial surrender or loan.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.Description">
<summary>
Description of the request.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.NoteID">
<summary>
Number of the note related to the application
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.CancellationCode">
<summary>
Application cancellation code.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.BillingType">
<summary>
Type of billing for the refund (automatic, manual, no bill)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.ReinstateLastBill">
<summary>
It indicates that the last bill must be reinstated.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.InterestRate">
<summary>
Interest percentage applied to the amount
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.TypeOfPaymentForTheSurrender">
<summary>
Type of payment related to the surrender.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.EfectiveDate">
<summary>
Date of request of the surrender, cancellation, reinstatement, loan.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.SurrenderPaymentOrder">
<summary>
Number of the payment order to pay the surrender.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.ClientID">
<summary>
Client ID of the client that will receive the payment for the surrender.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.TypeofPaymentRecord">
<summary>
Type of record of the policy related to the request.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.LineOfBusinessSurrenderedPolicy">
<summary>
Line of business of the surrendered policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.ProductCodeBeingSurrendered">
<summary>
Code of the product of the policy that is being surrendered.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.PolicyIDBeingSurrendered">
<summary>
Policy ID that will be surrendered.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.Certificate">
<summary>
Certificate ID that was surrendered.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.Agency">
<summary>
Agency where the transaction was made.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.CauseOfTheSurrender">
<summary>
Cause of the surrender.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.SurrenderPaymentType">
<summary>
Type of payment of the surrender.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.FinancialInstitution">
<summary>
Financial institution to which the funds are transferred.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.ClientIDFinancialInstitutio">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.MethodForPremiumRefund">
<summary>
Method for premium refund in case of cancellation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.nReturn_rat">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.NORIGIN_APV">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.SurrenderCost">
<summary>
Cost of the surrender
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.TaxRateApplied">
<summary>
Tax rate applied.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.TaxAmountOfSurrender">
<summary>
Amount resulting from the application of the percentage tax to the amount of surrender.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.NSIGNAL">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.NUNITSCHANGE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.NCURRENCY">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.NSELL_COST">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.NBUY_COST">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.NSWI_COST">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.AmountOfInputOutputOfFund">
<summary>
Amount of input / output of the treatment fund
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.AccountCodeUsedInProcessSwitches">
<summary>
Account code that is used in the process switches
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.StatusSwitchProcess">
<summary>
Status of the record in the switch process
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.EvidenceOfInsurabilityIndicator">
<summary>
Indicator of evidence of insurability. (No capital reduces the Rescue - Option A).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.DateOfSurrenderPayment">
<summary>
Date of surrender payment
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Request.TypeOfTributaryBenefit">
<summary>
Type of Tributary Benefit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.PayerClientID">
<summary>
Code that identifies the payer of the bills of the policy or certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.InsuredAmount">
<summary>
Insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.CumulusCode">
<summary>
Code of the cumulus
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.QuotationCancellationDate">
<summary>
Date when the application or quotation is nullified.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.OriginalEffectiveDate">
<summary>
Original effective date of the Policy/Certificate (first effective date).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.LastModificationDate">
<summary>
Date of last modification made to the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.IssueDate">
<summary>
Date when the policy/certificate is issued
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.KeepUntil">
<summary>
Date until which the application or quotation may remain recorded in the system.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.ReasonForNoConversionIntoPolicy">
<summary>
Code of the reason for non conversion into policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.BeneficiaryNoteID">
<summary>
Number of the note defining the beneficiaries as per free text.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.RiskDescriptionNoteID">
<summary>
Number of the note describing the insured risk as per Free Text.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.CancellationCode">
<summary>
Policy/Certificate Cancellation Code.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.PaymentFrequency">
<summary>
Payment frequency of the premium.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.AnnualPremium">
<summary>
Certificate annual premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.ApplicationDate">
<summary>
Date of application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.AutomaticRenewal">
<summary>
Automatic renewal indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.EffectiveDate">
<summary>
Effective date of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.StatusOfPolicyCertificate">
<summary>
Policy/Certificate Status.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.AmendingUser">
<summary>
Code of the user amending the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.LineOfBusinessOfReplacedPolicy">
<summary>
Code of the line of business of the replaced policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.ReasonForOutstandingStatus">
<summary>
Reason why the policy/quotation/application is in outstanding status
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.ProductOfReplacedPolicy">
<summary>
Code of the product of the replaced policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.ReplacedPolicyID">
<summary>
Number of the policy replaced by this policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.CertificateIDOfReplacedPolicy">
<summary>
Number of the certificate of the policy that has been replaced by this Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.NextBilling">
<summary>
Date of next billing.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.ApplicationOrQuotationNumber">
<summary>
Application or quotation number that originated this policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.Installments">
<summary>
Number of installments to pay the premium.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.DaysBilledInFirstQuota">
<summary>
Number of days billed on the first installment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.BillingOptions">
<summary>
Options of policy/certificate billing (prorate, short-term, by installments).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.DaysBilledInNextQuotas">
<summary>
Number of days billed on the next installments
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.ApplicationID">
<summary>
Number of application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.ProportionalReinsurance">
<summary>
The certificate has a proportional reinsurance distribution.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.TotalLossWarning">
<summary>
It indicates that a claim of &#39;total loss&#39; has been declared to the policy-certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.RatingException">
<summary>
Indicator for rating table exception.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.RatingExceptionCause">
<summary>
Reason why the standard rating was not used.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.ProperUse">
<summary>
Indicator of property use.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.PremiumWaiver">
<summary>
Indicator of premium waiver (premiums have been waived).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.ImageID">
<summary>
Number of the image associated to the risk.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.DirectDebitIndicator">
<summary>
Indicator of automatic payments of premium from Bank Accounts or Credit Card.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.PaymentMethod">
<summary>
Code of the payment method.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.BillDueDate">
<summary>
Due date of the premium bill.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.TypeOfAddress">
<summary>
Type of address.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.NonForfeitureValuesCalculation">
<summary>
Mode of calculation of the non-forfeiture values of the policy (manual or automatic).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.TypeOfDistributionChannel">
<summary>
Code of type of distribution channel.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.BillingSuspensionEffectiveDate">
<summary>
Date as of which the billing of the policy/certificate is suspended.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.RetroactiveEndorsementDate">
<summary>
Date of The Retroactive Endorsement.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.BillingSuspensionEndingDate">
<summary>
Date until which the billing of the policy/certificate is suspended.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.QuotationIsValidForThisNumberOfDays">
<summary>
Number of days of validity of the quotation/application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.CauseOfSuspension">
<summary>
Code of the suspension reason
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.PolicyIDResultingFromThisQuotation">
<summary>
Number of policy to which the quotation belongs (only used in quotation records converted to policy).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.OriginOfSuspension">
<summary>
Indicator of origin of the suspension.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.DateQuotationAccepted">
<summary>
Date of acceptance of the quotation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.CancellationNotification">
<summary>
Indicates that a letter notifying the annulment has been issued.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.BillingIndicator">
<summary>
Billing indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.Refund">
<summary>
Indicator of refund of premiums in a quotation/application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.QuotationStatus">
<summary>
Status of the quotation/application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.PendingInformation">
<summary>
Pending information indicator for holding commission payment.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.NumberOfRenewals">
<summary>
Number of times the policy has been renewed (only in P &#38; C).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.Digit">
<summary>
Check digit of the policy, it is used for collection.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.Application">
<summary>
Number of regular application that motivates the application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.MaximumDaysForPaymentWhenReinstatingPoliicy">
<summary>
Maximum number of days to make the payment when reinstalling the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.DurationInMonths">
<summary>
Number of months of duration of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.AFPCharges">
<summary>
Commission amount that the Pension Fund Administrator charges to transfer the funds to the insurance company.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.CommissionCurrency">
<summary>
Currency in which the commission amount is expressed.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.SourceAccount">
<summary>
Code of the source account by default
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.CollectionAgent">
<summary>
Code of the agent, person or organization in charge of collecting this premium.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.ProrateFirstBillToGoWithMonth">
<summary>
It indicates if the first bill of the policy should be prorated when the effective date does not corresponds to the first of the month.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.AgreementCode">
<summary>
Discount or Agreement Code.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.MailingPreference">
<summary>
Mailing preference option of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.RepricingPremiumIndicator">
<summary>
Repricing indicator premium pricing as last date.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.LastPricingDate">
<summary>
Date of last pricing premium.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.OperationCode">
<summary>
Code of the operation
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.DatToBeUsedForTariff">
<summary>
It dates To include Date of tariff. Date whereupon the rate of premium is obtained. It corresponds to the date of the quote if the product requires quote. On the contrary date of the proposal.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.DateOfReceiptByIntermediary">
<summary>
Date of receipt by the intermediary policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.DateCompanyReceivesProofOfReceiptByIintermediary">
<summary>
Date the company receives proof of receipt of policy broker.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.DateOfPolicyReceiptByInsured">
<summary>
Date of receipt of policy by the insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.DateCompanyReceivesProofOfReceiptByInsuredPerson">
<summary>
Date the company receives proof of receipt by the policy insured person.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.SAPPLYCOSTFP">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.DigitizationControlHasBeenPrinted">
<summary>
Indicator that the digitization control has been printed
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.PaidUpDateForMigratedPolicies">
<summary>
Date of Paid up for migrated policies
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.RateForTechnicalReservesbase">
<summary>
Rate for calculating technical reserves base
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.NFOLIO">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.FacultativeReinsurance">
<summary>
It indicates that the certificate has facultative reinsurance.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.OfficialNumberOfPolicy">
<summary>
Number of official policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.OfficialNumberOfCertificate">
<summary>
Number of official certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.nSus_Office">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.AgreementDiscountCode">
<summary>
Discount and/or Agreement Code.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.CoverageExclusionType">
<summary>
Type of coverage exclusion per insured person
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.IntegratedSystem">
<summary>
Code integrated system that generated the request.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.CertificateCoverage">
<summary>
Number identifying the certificate of coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.StatusCertificateCoverage">
<summary>
Status of the certificate of coverage. (Values 1-Issued, 2-Pending)
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.RiskAcceptedDate">
<summary>
Date of acceptance of risk
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.NADDRESSID">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.RiskInformation.NPHONEID">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.ClientRole">
<summary>
Role of the client in the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.ProducerCode">
<summary>
Code of the producer.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.BirthDate">
<summary>
Date of birth of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.Gender">
<summary>
Gender of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.SmokerIndicator">
<summary>
Smoker client indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.RiskType">
<summary>
Type of risk.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.VIPInsured">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.Item">
<summary>
Item number when loading the insured person.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.InsuredStatus">
<summary>
Status of the insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.Rating">
<summary>
Rating related to the insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.TypeOfClientName">
<summary>
Type of client name.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.PositionOfTheClientRole">
<summary>
Position of the client-role within the internal coverage sequence.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.DateContinuationCoverage">
<summary>
Date from when continuation coverage applies
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.StipendContract">
<summary>
Code of the stipend contract
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.ContinuationCoverageIndicator">
<summary>
Continuation coverage indicator
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Role.SPRINTNAME">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.InsuredAmount">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.IssueDate">
<summary>
Date when the policy/certificate is issued
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.CancellationCode">
<summary>
Policy/Certificate Cancellation Code.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.PremiumAmount">
<summary>
Premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.EffectiveDate">
<summary>
Effective Date of The Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.Transaction">
<summary>
Transaction number in the history of the policy (policy_his).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.ShipName">
<summary>
Name of the ship.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.ShipRegistration">
<summary>
Ship registration.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.MaterialOfTheHull">
<summary>
Code of material of the hull.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.Color">
<summary>
Hull color
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.Builder">
<summary>
Builder of the ship.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.ConstructionYear">
<summary>
Year of construction.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.EquivalentYear">
<summary>
Equivalent year.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.LastCareeningDate">
<summary>
Last careening date.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.LastCareeningPlace">
<summary>
Last careening place.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.Depth">
<summary>
Depth measurement.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.Length">
<summary>
Length measurement.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.Width">
<summary>
Width.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.NumberOfEngines">
<summary>
Number of engines on the vessel.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.EnginesBrandAndModel">
<summary>
Model/Brand of the engines.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.SerialNumberOfEngines">
<summary>
Serial number of the engines.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.Power">
<summary>
Motor horsepower.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.GrossWeightInTons">
<summary>
Gross weight in metric tons.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.NetWeightInTons">
<summary>
Net weight in metric tons.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.LoadCapacity">
<summary>
Load capacity
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.Unit">
<summary>
Code of unit for capacity or weight of the items that are transported Example values
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.SeaPort">
<summary>
Port where the ship is registered.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.Equippment">
<summary>
Ship Equippment
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.ActionZone">
<summary>
Action zone of the ship.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.TypeOfShip">
<summary>
Type Ship Code.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.UseOfTheShip">
<summary>
Code of the ship usage
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.ShipLineOfBusiness.PaymentFrequency">
<summary>
Code of the payment frequency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.CoverageModule">
<summary>
Code of The Module of The Coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.ClientRole">
<summary>
Code of the client role.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.ConsecutiveNumber">
<summary>
Consecutive number.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.YoungestAge">
<summary>
Youngest age for this rate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.OldestAge">
<summary>
Oldest age for this rating.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.HighestInsuredAmount">
<summary>
Highest limit of the range of insured amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.LowestLimitAmountRange">
<summary>
Lowest limit of the range of insured amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.Document">
<summary>
Document related to the technical criterion required by the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.Gender">
<summary>
Gender of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.SpecificationsForLifeInsurance.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Tab_in_bu.BusinessType">
<summary>
Type of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Tab_in_bu.ActivityDetail">
<summary>
Detail number identifying the activity.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Tab_in_bu.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Tab_in_bu.Description">
<summary>
Description of the detail.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Tab_in_bu.NoteID">
<summary>
Number of the note containing the comments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Tab_in_bu.ShortDescription">
<summary>
Abbreviated description of the detail.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Tab_in_bu.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Tab_in_bu.Usercode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Tab_in_bu.TypeOfActivity">
<summary>
Type of activity
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Tab_in_bu.Family">
<summary>
Code of the fire category.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.SKEY">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NDISEXPRC">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.SCHANALLO">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.SDEFAULTI">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.SDESCRIPT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NDISEXMAX">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NDISEXMIN">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NDISEXPRA">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.SREQUIRE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.SROUTINE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.SDISEXPRI">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.SDISEXPRIDESC">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.SEDPERAPL">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NAMOUNT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NCURRENCY">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NCURR_DEXPR">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.SDEFPOL">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NEXIST">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NORIAMOUNT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NCAUSE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.SCAUSEDESC">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.SAGREE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NDISEXSUBPER">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NDISEXADDPER">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NPERCENT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TemporalDiscountSurchageCalculation.NORIPERCENT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.InsuredAmount">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.Area">
<summary>
Surveillance area (in m2).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.FIELDDELETEDFROMTHESYSTEM">
<summary>
FIELD DELETED FROM THE SYSTEM
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.RiskCategory">
<summary>
Code of the class of risk.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.RiskClass">
<summary>
Risk class.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.IssueDate">
<summary>
Date when the policy/certificate is issued
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.CancellationCode">
<summary>
Code of cancellation of the specific information record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.FirstRiskPercentage">
<summary>
Percentage insured under First risk.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.PremiumAmount">
<summary>
Certificate premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.EffectiveDate">
<summary>
Effective Date of The Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.TransactionNumber">
<summary>
Transaction number in the history of the policy (policy_his).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.NumberOfEmployeesTransportingTheValues">
<summary>
Number of employees transporting the money and/or securities.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.RiskLocation">
<summary>
Risk location.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.NumberOfWatchmen">
<summary>
Number of surveillance watchmen.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.Concatenation">
<summary>
Concatenation of the fields related to the business draft (nBusinessTy + nCommerGrp + nCodKind).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.SpecificDescription">
<summary>
Specific description of business draft.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.ConstructionClass">
<summary>
Class of construction.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.nCodKind">
<summary>
Code of the Business Kind
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.NBUSINESSTY">
<summary>
Type of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.NCOMMERGRP">
<summary>
Code of &#39;commercial group&#39; that includes this business draft.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Theft.PaymentFrequency">
<summary>
Code of the payment frequency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationMode.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationMode.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationMode.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationMode.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationMode.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationMode.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationMode.TransportationType">
<summary>
Code of the transportation type.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationMode.NoteID">
<summary>
Number of the note containing the comments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationMode.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationMode.Description">
<summary>
Description of the transportation mean.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationMode.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationMode.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationMode.NameOrLicense">
<summary>
Name or license identifying the transportation mean or vehicle
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.Stage">
<summary>
Number identifying the stage of the transportation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.ArrivalDate">
<summary>
Date of Arrival.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.DepartureDate">
<summary>
Date of departure.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.NameOrLicense">
<summary>
Name or license identifying the transportation mean or vehicle
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.Route">
<summary>
Code of the route covered.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.sOrigen">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportationRoutesMade.CityOfDestination">
<summary>
City of destination of the route.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.ClassOfMerchandise">
<summary>
Classification of the insured merchandise.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.PackagingType">
<summary>
Packaging type used for the merchandise.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.Description">
<summary>
Description of the merchandise.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.Amount">
<summary>
Insured amount of the merchandise in transit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.FranchiseOrDeductibleIndicator">
<summary>
It indicates whether a franchise or deductible is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.MinimumDeductibleOrFranchiseAmount">
<summary>
Minimum franchise or deductible amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.FranchiseOrDeductiblePercentage">
<summary>
Franchise/Deductible Percentage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.NumberOfItems">
<summary>
Number of items that are transported based on the specified unit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.Unit">
<summary>
Code of unit for capacity or weight of the items that are transported Example values
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportedMerchandise.FranchiseOrDeductibleType">
<summary>
It indicates whether a franchise or deductible is applied
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.InsuredAmount">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.LimitPerTrip">
<summary>
Maximum limit insured per trip.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.AnnualLimit">
<summary>
Annual maximum limit insured
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.EndingDate">
<summary>
Ending date of the policy/certificate (end of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.IssueDate">
<summary>
Date when the policy/certificate is issued
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.CancellationCode">
<summary>
Policy/Certificate Cancellation Code.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.PremiumAmount">
<summary>
Premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.EffectiveDate">
<summary>
Effective Date of The Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.TransactionNumber">
<summary>
Transaction number in the history of the policy (policy_his).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.PercentageForPremiumInDeposit">
<summary>
Percentage to obtain the deposit premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.DeclarationFrequency">
<summary>
Code identifying the declaration frequency
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.PercentageOverInsurance">
<summary>
Percentage of over line insurance applying to the values of the merchandise.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.PremiumInDeposit">
<summary>
Deposit premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.Modality">
<summary>
Code of insured value modality.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.Division">
<summary>
Code of the &#39;division&#39; within the Group.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.RiskSituation">
<summary>
Risk situation.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportLineOfBusiness.PaymentFrequency">
<summary>
Code of the payment frequency.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportRoutesInsured.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportRoutesInsured.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportRoutesInsured.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportRoutesInsured.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportRoutesInsured.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportRoutesInsured.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportRoutesInsured.Route">
<summary>
Code of the route covered.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportRoutesInsured.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportRoutesInsured.RouteType">
<summary>
Code of type of route.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportRoutesInsured.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportRoutesInsured.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportRoutesInsured.NoteID">
<summary>
Number of the note containing the comments.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TransportRoutesInsured.TransportationType">
<summary>
Transportation type.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.CompoundKey">
<summary>
Compound Key.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.PolicyNumber">
<summary>
Number identifying the policy/ quotation/ application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.CertificateID">
<summary>
Number identifying the Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.ExpiryDate">
<summary>
Expiry date of the policy/certificate (End of the effective period).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.InsuredAmount">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.AnnualPremium">
<summary>
Annual Premium.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.IncidenceType">
<summary>
Incidence Type.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.LineOfBusiness">
<summary>
Code of The Line of Business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.OutstandingBillsAmount">
<summary>
Number of outstanding bills
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.PaidClaims">
<summary>
Number of paid claims
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.PaidClaimAmount">
<summary>
Paid amount of claims
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.OutstandingClaims">
<summary>
Number of outstanding claims
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.OutstandingClaimAmount">
<summary>
Outstanding amount of claims
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.OutstandingBills">
<summary>
Number of outstanding bills
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.Claims">
<summary>
Number of claims
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.InsuredAmountCapital">
<summary>
Sum insured amount of the policy/certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.PremiumAmount">
<summary>
Premium amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.sText_err">
<summary>
Cadena de 10 caracteres.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.EffectiveDate">
<summary>
Effective Date of The Policy/Certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.BranchOffice">
<summary>
Code of the Branch Office
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.AgencyCode">
<summary>
Code of the agency
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.OfficeCode">
<summary>
Code of Office.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.ProducerCode">
<summary>
Code of the main producer of the policy.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.CurrencyCode">
<summary>
Code of the currency of the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.PaymentFrequency">
<summary>
Payment frequency of the policy
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.BillType">
<summary>
Type of bills for groups
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.TRenewPol.NPREMIUMPROYECT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.nCurrency">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.nBalance">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.nCredit">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.nDebit">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.nUsercode">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.dCompdate">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.nLed_compan">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.sAccount">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.sAux_accoun">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.Ul_curr_acc_pol.DVP_NEG">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.TransactionDate">
<summary>
Date of the transaction.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.ConsecutiveNumber">
<summary>
Consecutive number identifying the record as unique.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.EntryType">
<summary>
Type of current account entry.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.nCurrency">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.SourceAccount">
<summary>
Code of the source account (Values
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.CreditAmount">
<summary>
Amount of the entry in case of credit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.DebitAmount">
<summary>
Amount of the entry in case of debit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.BillNumber">
<summary>
Number identifying the bill
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.PayingClient">
<summary>
Code of the client to which the payment is applied to in case of credit entries
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.FinancialInstitution">
<summary>
Financial institution from which the deposits are coming from.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.ProcessedForCommissions">
<summary>
It indicates if the record was processed for commissions.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.DepositOriginalDate">
<summary>
Original date of the deposit.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.ContributionInvested">
<summary>
It indicates if the contribution has been invested or not.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.PostingDate">
<summary>
Date when the entry was posted in the accounting books.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.AccountingConsecutiveNumber">
<summary>
Unique identifier for the accounting process.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.ReferenceToTheRecordThatOriginatesTheTransaction">
<summary>
Reference to the record that originates the transaction of purchase or sale.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.CoverageCode">
<summary>
Code of the coverage.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.CoverageModule">
<summary>
Code of the module holding the coverage related to the charge.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.TaxAmount">
<summary>
Tax amount.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.AccountingLineOfBusiness">
<summary>
Code of the accounting line of business.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.DLEDGERDAT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.SREVERSE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.NID_REVERSE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.SPREINV">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.NREQUEST_NUM">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.NIDPROCES">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.NAMOUNT_INV">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.DVALUEDATE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.NLOAD_COD">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.NOBLIGATION">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.NTYP_PROFITWORKER">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.NIDPROCES_REV">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.NCAUSE_REV">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.SPARTCHARG_REV">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.NVP_CHARGE_REV">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.SPROCESSIND_REV">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.NAMOUNTRES_REV">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.NFUNDS_REV">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.SPENDING_REV">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.NCREDIT_AUX">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.TransferedMovement">
<summary>
Indicator of movement transfered.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.TransferedAmount">
<summary>
Transfered amount. (apv).
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.UnitLinkEntrySavingAccount.MovementType">
<summary>
Type of movement (Credit/Debit). The possible values as per table 5713.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInAuto.VehicleCode">
<summary>
Code of The Insured Vehicle
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInAuto.Description">
<summary>
Description of the vehicle.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInAuto.NationalOrImport">
<summary>
National or Import vehicle indicator.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInAuto.Make">
<summary>
Make of the vehicle.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInAuto.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInAuto.VehicleModel">
<summary>
Vehicle Model.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInAuto.VehicleType">
<summary>
Vehicle type.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInAuto.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInAuto.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInAuto.Seats">
<summary>
Number of seats in the vehicle insured.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInAuto.GrossWeight">
<summary>
Gross weight in metric tons.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInAuto.TypeOfVehicleSOAP">
<summary>
Type of vehicle SOAP
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInsuredValuesInAuto.VehicleCode">
<summary>
Code of The Insured Vehicle
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInsuredValuesInAuto.Year">
<summary>
Year of the vehicle.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInsuredValuesInAuto.Limit">
<summary>
Commercial value of the vehicle in the year specified
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInsuredValuesInAuto.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Policy.DataAccess.QueryStatement.VehiclesInsuredValuesInAuto.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise">
 <summary>
 Rate and Deductibles for transport of merchandise.
 </summary>
<remarks>Data-source is 'TRAN_RATE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Synchronize(InMotionGIT.Policy.Entity.Contracts.RateAndDeductibleForTransportMerchandise,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Synchronize(InMotionGIT.Policy.Entity.Contracts.RateAndDeductibleForTransportMerchandise,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.RateAndDeductibleForTransportMerchandise,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RateAndDeductibleForTransportMerchandise class</returns>
 <remarks>Datasource is 'XIF4TRAN_RATE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.RetrieveByClassOfMerchandise(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RateAndDeductibleForTransportMerchandise class</returns>
 <remarks>Datasource is 'XIF2TRAN_RATE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.RetrieveByPackaging(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RateAndDeductibleForTransportMerchandise class</returns>
 <remarks>Datasource is 'XIF3TRAN_RATE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.RetrieveByFranchiseOrDeductible(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RateAndDeductibleForTransportMerchandise class</returns>
 <remarks>Datasource is 'XIF4TRAN_RATE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.ApplyChange(InMotionGIT.Policy.Entity.Contracts.RateAndDeductibleForTransportMerchandise,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="RateAndDeductibleForTransportMerchandiseItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.ApplyChange(InMotionGIT.Policy.Entity.Contracts.RateAndDeductibleForTransportMerchandise,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="RateAndDeductibleForTransportMerchandiseItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.RateAndDeductibleForTransportMerchandise,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="RateAndDeductibleForTransportMerchandiseItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.RateAndDeductibleForTransportMerchandise,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="RateAndDeductibleForTransportMerchandiseItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Synchronize(InMotionGIT.Policy.Entity.Contracts.RateAndDeductibleForTransportMerchandiseCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RateAndDeductibleForTransportMerchandise.Synchronize(InMotionGIT.Policy.Entity.Contracts.RateAndDeductibleForTransportMerchandiseCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife">
 <summary>
 Rate of traditional life.
 </summary>
<remarks>Data-source is 'TAR_TRALIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Synchronize(InMotionGIT.Policy.Entity.Contracts.RatingTableTraditionalLife,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Synchronize(InMotionGIT.Policy.Entity.Contracts.RatingTableTraditionalLife,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.RatingTableTraditionalLife,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.RetrieveByUserCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RatingTableTraditionalLife class</returns>
 <remarks>Datasource is 'XIF1500TAR_TRALIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.RetrieveByRatingTableType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RatingTableTraditionalLife class</returns>
 <remarks>Datasource is 'XIF1513TAR_TRALIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.RetrieveByRiskType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RatingTableTraditionalLife class</returns>
 <remarks>Datasource is 'XIF2386TAR_TRALIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.RetrieveByLineOfBusinessProductCode(System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RatingTableTraditionalLife class</returns>
 <remarks>Datasource is 'XIF1501TAR_TRALIFE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Find(System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Find(System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Find(System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Find(System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Find(System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Find(System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Find(System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Find(System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Find(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Find(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Find(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Find(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.ApplyChange(InMotionGIT.Policy.Entity.Contracts.RatingTableTraditionalLife,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="RatingTableTraditionalLifeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.ApplyChange(InMotionGIT.Policy.Entity.Contracts.RatingTableTraditionalLife,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="RatingTableTraditionalLifeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.RatingTableTraditionalLife,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="RatingTableTraditionalLifeItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.RatingTableTraditionalLife,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="RatingTableTraditionalLifeItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Synchronize(InMotionGIT.Policy.Entity.Contracts.RatingTableTraditionalLifeCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RatingTableTraditionalLife.Synchronize(InMotionGIT.Policy.Entity.Contracts.RatingTableTraditionalLifeCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Int32,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution">
 <summary>
 Distribution of proportional reinsurance.
 </summary>
<remarks>Data-source is 'REINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Synchronize(InMotionGIT.Policy.Entity.Contracts.ReinsuranceDistribution,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Synchronize(InMotionGIT.Policy.Entity.Contracts.ReinsuranceDistribution,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.ReinsuranceDistribution,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ReinsuranceDistribution class</returns>
 <remarks>Datasource is 'XIF86REINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.RetrieveByLineOfBusinessProductCodeCoverageModuleCoverageCodeRecordEffectiveDate(System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ReinsuranceDistribution class</returns>
 <remarks>Datasource is 'XIE1REINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ReinsuranceDistribution class</returns>
 <remarks>Datasource is 'XDELREINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.RetrieveByCumulus(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ReinsuranceDistribution class</returns>
 <remarks>Datasource is 'XIF1290REINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.RetrieveByTypeOfChange(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ReinsuranceDistribution class</returns>
 <remarks>Datasource is 'XIF1REINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.RetrieveByReinsuranceLineOfBusiness(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ReinsuranceDistribution class</returns>
 <remarks>Datasource is 'XIF2REINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.RetrieveByTypeOfTreaty(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ReinsuranceDistribution class</returns>
 <remarks>Datasource is 'XIF3REINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.RetrieveByCompanyCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ReinsuranceDistribution class</returns>
 <remarks>Datasource is 'XIF4REINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ReinsuranceDistribution class</returns>
 <remarks>Datasource is 'XIF5REINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID2(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ReinsuranceDistribution class</returns>
 <remarks>Datasource is 'XIF6REINSURAN'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.ApplyChange(InMotionGIT.Policy.Entity.Contracts.ReinsuranceDistribution,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ReinsuranceDistributionItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.ApplyChange(InMotionGIT.Policy.Entity.Contracts.ReinsuranceDistribution,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ReinsuranceDistributionItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.ReinsuranceDistribution,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ReinsuranceDistributionItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.ReinsuranceDistribution,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ReinsuranceDistributionItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Synchronize(InMotionGIT.Policy.Entity.Contracts.ReinsuranceDistributionCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ReinsuranceDistribution.Synchronize(InMotionGIT.Policy.Entity.Contracts.ReinsuranceDistributionCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Request">
 <summary>
 Requests for redemptions, cancellations, rehabilitation, balance, extended, and collecting loans
 </summary>
<remarks>Data-source is 'REQUEST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Synchronize(InMotionGIT.Policy.Entity.Contracts.Request,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Synchronize(InMotionGIT.Policy.Entity.Contracts.Request,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Request,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Request class</returns>
 <remarks>Datasource is 'XDELREQUEST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Request class</returns>
 <remarks>Datasource is 'XIF1724REQUEST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.RetrieveByTypeofPaymentRecordLineOfBusinessSurrenderedPolicyProductCodeBeingSurrenderedPolicyIDBeingSurrenderedCertificate(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Request class</returns>
 <remarks>Datasource is 'XIF2REQUEST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.RetrieveByQuotationType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Request class</returns>
 <remarks>Datasource is 'XIF1723REQUEST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.RetrieveByCauseOfTheSurrender(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Request class</returns>
 <remarks>Datasource is 'XIF4REQUEST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.RetrieveBySurrenderPaymentType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Request class</returns>
 <remarks>Datasource is 'XIF5REQUEST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.RetrieveByTypeOfPaymentForTheSurrender(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Request class</returns>
 <remarks>Datasource is 'XIF1891REQUEST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.RetrieveByPaymentOrder(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Request class</returns>
 <remarks>Datasource is 'XIF1941REQUEST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.RetrieveByFinancialInstitution(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Request class</returns>
 <remarks>Datasource is 'XIF8REQUEST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.RetrieveByCancellationCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Request class</returns>
 <remarks>Datasource is 'XIF9REQUEST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Request class</returns>
 <remarks>Datasource is 'XIF10REQUEST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.RetrieveByClientIDFinancialInstitutio(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Request class</returns>
 <remarks>Datasource is 'XIF11REQUEST'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Request,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="RequestItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Request,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="RequestItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Request,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="RequestItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Request,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="RequestItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Synchronize(InMotionGIT.Policy.Entity.Contracts.RequestCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Request.Synchronize(InMotionGIT.Policy.Entity.Contracts.RequestCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.RiskInformation">
 <summary>
 Certificates of a Policy (general).
 </summary>
<remarks>Data-source is 'CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Synchronize(InMotionGIT.Policy.Entity.Contracts.RiskInformation,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Synchronize(InMotionGIT.Policy.Entity.Contracts.RiskInformation,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.RiskInformation,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateIDStatusOfPolicyCertificate(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XSTATUSCERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XDELCERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDResultingFromThisQuotationCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIE3CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByCancellationCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF1CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDRiskSituationAgreementDiscountCode(System.String,System.Int32,System.Int32,System.Int64,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF2CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByRecordTypeLineOfBusinessProductCodePolicyID(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF3CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByReasonForNoConversionIntoPolicy(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF4CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByCollectionAgent(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF5CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByPayerClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF6CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByAgreementCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF7CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByReasonForOutstandingStatus(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF8CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByQuotationStatus(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF9CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByTypeOfDistributionChannel(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF10CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByCauseOfSuspension(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF11CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByPaymentMethod(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF12CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByPaymentFrequency(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF13CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByMailingPreference(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF14CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByStatusOfPolicyCertificate(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XIF15CERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RiskInformation class</returns>
 <remarks>Datasource is 'XPKCERTIFICAT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Find(System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Find(System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Find(System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.ApplyChange(InMotionGIT.Policy.Entity.Contracts.RiskInformation,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="RiskInformationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.ApplyChange(InMotionGIT.Policy.Entity.Contracts.RiskInformation,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="RiskInformationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Synchronize(InMotionGIT.Policy.Entity.Contracts.RiskInformationCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.RiskInformation.Synchronize(InMotionGIT.Policy.Entity.Contracts.RiskInformationCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Role">
 <summary>
 Role of the client in the policy/certificate.
 </summary>
<remarks>Data-source is 'ROLES'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Synchronize(InMotionGIT.Policy.Entity.Contracts.Role,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Synchronize(InMotionGIT.Policy.Entity.Contracts.Role,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Role,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Role class</returns>
 <remarks>Datasource is 'XDELROLES'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.RetrieveByTypeOfClientName(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Role class</returns>
 <remarks>Datasource is 'XIF1ROLES'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.RetrieveByRiskType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Role class</returns>
 <remarks>Datasource is 'XIF2ROLES'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.RetrieveByInsuredStatus(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Role class</returns>
 <remarks>Datasource is 'XIF3ROLES'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.RetrieveByGender(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Role class</returns>
 <remarks>Datasource is 'XIF4ROLES'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.RetrieveByClientRole(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Role class</returns>
 <remarks>Datasource is 'XIF5ROLES'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.RetrieveByProducerCode(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Role class</returns>
 <remarks>Datasource is 'XIF1294ROLES'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.RetrieveByStipendContract(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Role class</returns>
 <remarks>Datasource is 'XIF7ROLES'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Role class</returns>
 <remarks>Datasource is 'XIF1318ROLES'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Role class</returns>
 <remarks>Datasource is 'XIF9ROLES'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Role,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="RoleItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Role,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="RoleItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Role,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="RoleItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Role,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="RoleItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Synchronize(InMotionGIT.Policy.Entity.Contracts.RoleCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Role.Synchronize(InMotionGIT.Policy.Entity.Contracts.RoleCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness">
 <summary>
 Particular information on Ship policies.
 </summary>
<remarks>Data-source is 'SHIP'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.ShipLineOfBusiness,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.ShipLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.ShipLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.RetrieveByUnit(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ShipLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF1SHIP'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.RetrieveByUseOfTheShip(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ShipLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2SHIP'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.RetrieveByMaterialOfTheHull(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ShipLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF3SHIP'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.RetrieveByTypeOfShip(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ShipLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF4SHIP'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ShipLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF4SHIP'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.RetrieveByPaymentFrequency(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ShipLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF6SHIP'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.ShipLineOfBusiness,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ShipLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.ShipLineOfBusiness,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ShipLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.ShipLineOfBusiness,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ShipLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.ShipLineOfBusiness,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="ShipLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.ShipLineOfBusinessCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.ShipLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.ShipLineOfBusinessCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance">
 <summary>
 Risk selection criteria for life insurance policies.
 </summary>
<remarks>Data-source is 'LIFE_P_SPECI'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Synchronize(InMotionGIT.Policy.Entity.Contracts.SpecificationsForLifeInsurance,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Synchronize(InMotionGIT.Policy.Entity.Contracts.SpecificationsForLifeInsurance,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.SpecificationsForLifeInsurance,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for SpecificationsForLifeInsurance class</returns>
 <remarks>Datasource is 'XDELLIFE_P_SPECI'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.RetrieveByDocument(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for SpecificationsForLifeInsurance class</returns>
 <remarks>Datasource is 'XIF1757LIFE_P_SPECI'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.RetrieveByGender(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for SpecificationsForLifeInsurance class</returns>
 <remarks>Datasource is 'XIF2288LIFE_P_SPECI'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for SpecificationsForLifeInsurance class</returns>
 <remarks>Datasource is 'XIF1758LIFE_P_SPECI'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.ApplyChange(InMotionGIT.Policy.Entity.Contracts.SpecificationsForLifeInsurance,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="SpecificationsForLifeInsuranceItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.ApplyChange(InMotionGIT.Policy.Entity.Contracts.SpecificationsForLifeInsurance,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="SpecificationsForLifeInsuranceItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.SpecificationsForLifeInsurance,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="SpecificationsForLifeInsuranceItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.SpecificationsForLifeInsurance,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="SpecificationsForLifeInsuranceItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Synchronize(InMotionGIT.Policy.Entity.Contracts.SpecificationsForLifeInsuranceCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.SpecificationsForLifeInsurance.Synchronize(InMotionGIT.Policy.Entity.Contracts.SpecificationsForLifeInsuranceCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Tab_in_bu">
 <summary>
 Defining insurable risk on fire policies.
 </summary>
<remarks>Data-source is 'TAB_IN_BUS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.Synchronize(InMotionGIT.Policy.Entity.Contracts.Tab_in_bu,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.Synchronize(InMotionGIT.Policy.Entity.Contracts.Tab_in_bu,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Tab_in_bu,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.RetrieveByFamily(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Tab_in_bu class</returns>
 <remarks>Datasource is 'XIF658TAB_IN_BUS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.RetrieveByBusinessType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Tab_in_bu class</returns>
 <remarks>Datasource is 'XIF605TAB_IN_BUS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.RetrieveByTypeOfActivity(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Tab_in_bu class</returns>
 <remarks>Datasource is 'XIF2100TAB_IN_BUS'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.Find(System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.Find(System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Tab_in_bu,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="Tab_in_buItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Tab_in_bu,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="Tab_in_buItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.Synchronize(InMotionGIT.Policy.Entity.Contracts.Tab_in_buCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Tab_in_bu.Synchronize(InMotionGIT.Policy.Entity.Contracts.Tab_in_buCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation">
 <summary>
 Temporary Table used to Calculate The Following Cover's Components Sum Insured/ Premium Amount/ Franchise/ Deductible.
 </summary>
<remarks>Data-source is 'T_INSREACA016'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation.Synchronize(InMotionGIT.Policy.Entity.Contracts.TemporalDiscountSurchageCalculation,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation.Synchronize(InMotionGIT.Policy.Entity.Contracts.TemporalDiscountSurchageCalculation,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.TemporalDiscountSurchageCalculation,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TemporalDiscountSurchageCalculation,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TemporalDiscountSurchageCalculationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TemporalDiscountSurchageCalculation,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TemporalDiscountSurchageCalculationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation.Synchronize(InMotionGIT.Policy.Entity.Contracts.TemporalDiscountSurchageCalculationCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TemporalDiscountSurchageCalculation.Synchronize(InMotionGIT.Policy.Entity.Contracts.TemporalDiscountSurchageCalculationCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Theft">
 <summary>
 Particular information on theft policies.
 </summary>
<remarks>Data-source is 'THEFT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Synchronize(InMotionGIT.Policy.Entity.Contracts.Theft,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Synchronize(InMotionGIT.Policy.Entity.Contracts.Theft,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Theft,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.RetrieveByRiskClass(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Theft class</returns>
 <remarks>Datasource is 'XIF1THEFT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.RetrieveByConstructionClass(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Theft class</returns>
 <remarks>Datasource is 'XIF2THEFT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.RetrieveByRiskLocation(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Theft class</returns>
 <remarks>Datasource is 'XIF3THEFT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.RetrieveByRiskCategory(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Theft class</returns>
 <remarks>Datasource is 'XIF4THEFT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.RetrieveByPaymentFrequency(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Theft class</returns>
 <remarks>Datasource is 'XIF5THEFT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.RetrieveBynCodKindNBUSINESSTYNCOMMERGRP(System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Theft class</returns>
 <remarks>Datasource is 'XIF6THEFT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Theft,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TheftItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Theft,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TheftItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Theft,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="TheftItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.Theft,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="TheftItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Synchronize(InMotionGIT.Policy.Entity.Contracts.TheftCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Theft.Synchronize(InMotionGIT.Policy.Entity.Contracts.TheftCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.TransportationMode">
 <summary>
 Transportation Modes
 </summary>
<remarks>Data-source is 'TRAN_WAY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportationMode,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportationMode,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.TransportationMode,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportationMode class</returns>
 <remarks>Datasource is 'XIF1TRAN_WAY'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TransportationMode,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TransportationModeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TransportationMode,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TransportationModeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.TransportationMode,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="TransportationModeItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.TransportationMode,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="TransportationModeItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportationModeCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationMode.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportationModeCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.TransportationRoutesMade">
 <summary>
 Routes made a statement.
 </summary>
<remarks>Data-source is 'TRAN_STAGE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportationRoutesMade,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportationRoutesMade,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.TransportationRoutesMade,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportationRoutesMade class</returns>
 <remarks>Datasource is 'XIF2588TRAN_STAGE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TransportationRoutesMade,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TransportationRoutesMadeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TransportationRoutesMade,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TransportationRoutesMadeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.TransportationRoutesMade,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="TransportationRoutesMadeItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.TransportationRoutesMade,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="TransportationRoutesMadeItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportationRoutesMadeCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportationRoutesMade.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportationRoutesMadeCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.TransportedMerchandise">
 <summary>
 Transported merchandise.
 </summary>
<remarks>Data-source is 'TRAN_MERCH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportedMerchandise,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportedMerchandise,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.TransportedMerchandise,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportedMerchandise class</returns>
 <remarks>Datasource is 'XIF1TRAN_MERCH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.RetrieveByClassOfMerchandise(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportedMerchandise class</returns>
 <remarks>Datasource is 'XIF2TRAN_MERCH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.RetrieveByPackagingType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportedMerchandise class</returns>
 <remarks>Datasource is 'XIF3TRAN_MERCH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.RetrieveByFranchiseOrDeductibleType(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportedMerchandise class</returns>
 <remarks>Datasource is 'XIF4TRAN_MERCH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.RetrieveByUnit(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportedMerchandise class</returns>
 <remarks>Datasource is 'XIF5TRAN_MERCH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TransportedMerchandise,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TransportedMerchandiseItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TransportedMerchandise,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TransportedMerchandiseItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.TransportedMerchandise,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="TransportedMerchandiseItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.TransportedMerchandise,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="TransportedMerchandiseItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportedMerchandiseCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportedMerchandise.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportedMerchandiseCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness">
 <summary>
 Particular informatin on transportation policies.
 </summary>
<remarks>Data-source is 'TRANSPORT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportLineOfBusiness,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.TransportLineOfBusiness,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF1TRANSPORT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF2TRANSPORT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.RetrieveByDeclarationFrequency(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF3TRANSPORT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.RetrieveByModality(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF4TRANSPORT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.RetrieveByPaymentFrequency(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportLineOfBusiness class</returns>
 <remarks>Datasource is 'XIF5TRANSPORT'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TransportLineOfBusiness,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TransportLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TransportLineOfBusiness,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TransportLineOfBusinessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.TransportLineOfBusiness,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="TransportLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.TransportLineOfBusiness,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="TransportLineOfBusinessItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportLineOfBusinessCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportLineOfBusiness.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportLineOfBusinessCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.TransportRoutesInsured">
 <summary>
 Routes insured in a policy.
 </summary>
<remarks>Data-source is 'TRAN_ROUTE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportRoutesInsured,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportRoutesInsured,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.TransportRoutesInsured,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.RetrieveByRouteType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportRoutesInsured class</returns>
 <remarks>Datasource is 'XIF1TRAN_ROUTE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportRoutesInsured class</returns>
 <remarks>Datasource is 'XIF2589TRAN_ROUTE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.RetrieveByTransportationType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransportRoutesInsured class</returns>
 <remarks>Datasource is 'XIF3TRAN_ROUTE'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Find(System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Find(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Find(System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Find(System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Find(System.String,System.Int32,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Find(System.String,System.Int32,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TransportRoutesInsured,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TransportRoutesInsuredItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TransportRoutesInsured,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TransportRoutesInsuredItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.TransportRoutesInsured,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="TransportRoutesInsuredItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.CancelCurrentRecord(InMotionGIT.Policy.Entity.Contracts.TransportRoutesInsured,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="TransportRoutesInsuredItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportRoutesInsuredCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TransportRoutesInsured.Synchronize(InMotionGIT.Policy.Entity.Contracts.TransportRoutesInsuredCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.TRenewPol">
 <summary>
 Temporary Table with processed record by The Policy Renewal Process.
 </summary>
<remarks>Data-source is 'TRENEWPOL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TRenewPol.Synchronize(InMotionGIT.Policy.Entity.Contracts.TRenewPol,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TRenewPol.Synchronize(InMotionGIT.Policy.Entity.Contracts.TRenewPol,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TRenewPol.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.TRenewPol,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TRenewPol.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TRenewPol,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TRenewPolItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TRenewPol.ApplyChange(InMotionGIT.Policy.Entity.Contracts.TRenewPol,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TRenewPolItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TRenewPol.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TRenewPol.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TRenewPol.Synchronize(InMotionGIT.Policy.Entity.Contracts.TRenewPolCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.TRenewPol.Synchronize(InMotionGIT.Policy.Entity.Contracts.TRenewPolCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol">
 <summary>
 
 </summary>
<remarks>Data-source is 'UL_CURR_ACC_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Synchronize(InMotionGIT.Policy.Entity.Contracts.Ul_curr_acc_pol,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Synchronize(InMotionGIT.Policy.Entity.Contracts.Ul_curr_acc_pol,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.Ul_curr_acc_pol,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.RetrieveByRecordTypePolicyIDCertificateID(System.String,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Ul_curr_acc_pol class</returns>
 <remarks>Datasource is 'XIE1UL_CURR_ACC_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.RetrieveByRecordTypeLineOfBusinessProductCode(System.String,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Ul_curr_acc_pol class</returns>
 <remarks>Datasource is 'XIE2UL_CURR_ACC_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Ul_curr_acc_pol class</returns>
 <remarks>Datasource is 'XIF1UL_CURR_ACC_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Find(System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Find(System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Find(System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Find(System.String,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Ul_curr_acc_pol,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="Ul_curr_acc_polItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.ApplyChange(InMotionGIT.Policy.Entity.Contracts.Ul_curr_acc_pol,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="Ul_curr_acc_polItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Synchronize(InMotionGIT.Policy.Entity.Contracts.Ul_curr_acc_polCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.Ul_curr_acc_pol.Synchronize(InMotionGIT.Policy.Entity.Contracts.Ul_curr_acc_polCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount">
 <summary>
 Entries of the saving account of the non tradicional policies (Unit Link).
 </summary>
<remarks>Data-source is 'UL_MOVE_ACC_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Synchronize(InMotionGIT.Policy.Entity.Contracts.UnitLinkEntrySavingAccount,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Synchronize(InMotionGIT.Policy.Entity.Contracts.UnitLinkEntrySavingAccount,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.UnitLinkEntrySavingAccount,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.RetrieveByRecordTypePolicyIDCertificateIDEntryTypeContributionInvested(System.String,System.Int64,System.Int64,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UnitLinkEntrySavingAccount class</returns>
 <remarks>Datasource is 'XIE1UL_MOVE_ACC_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.RetrieveByPolicyIDNIDPROCES(System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UnitLinkEntrySavingAccount class</returns>
 <remarks>Datasource is 'XIE3UL_MOVE_ACC_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UnitLinkEntrySavingAccount class</returns>
 <remarks>Datasource is 'XIF2359UL_MOVE_ACC_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.RetrieveByEntryType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UnitLinkEntrySavingAccount class</returns>
 <remarks>Datasource is 'XIF2492UL_MOVE_ACC_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.RetrieveBySourceAccount(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UnitLinkEntrySavingAccount class</returns>
 <remarks>Datasource is 'XIF2495UL_MOVE_ACC_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.RetrieveByFinancialInstitution(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UnitLinkEntrySavingAccount class</returns>
 <remarks>Datasource is 'XIF2493UL_MOVE_ACC_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UnitLinkEntrySavingAccount class</returns>
 <remarks>Datasource is 'XIF2496UL_MOVE_ACC_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.RetrieveByPayingClient(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UnitLinkEntrySavingAccount class</returns>
 <remarks>Datasource is 'XIF2497UL_MOVE_ACC_POL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String,System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Find(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.ApplyChange(InMotionGIT.Policy.Entity.Contracts.UnitLinkEntrySavingAccount,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="UnitLinkEntrySavingAccountItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.ApplyChange(InMotionGIT.Policy.Entity.Contracts.UnitLinkEntrySavingAccount,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="UnitLinkEntrySavingAccountItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Synchronize(InMotionGIT.Policy.Entity.Contracts.UnitLinkEntrySavingAccountCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.UnitLinkEntrySavingAccount.Synchronize(InMotionGIT.Policy.Entity.Contracts.UnitLinkEntrySavingAccountCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.VehiclesInAuto">
 <summary>
 Vehicles table.
 </summary>
<remarks>Data-source is 'TAB_AU_VEH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInAuto.Synchronize(InMotionGIT.Policy.Entity.Contracts.VehiclesInAuto,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInAuto.Synchronize(InMotionGIT.Policy.Entity.Contracts.VehiclesInAuto,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInAuto.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.VehiclesInAuto,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInAuto.RetrieveByMake(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for VehiclesInAuto class</returns>
 <remarks>Datasource is 'XIF583TAB_AU_VEH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInAuto.RetrieveByVehicleType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for VehiclesInAuto class</returns>
 <remarks>Datasource is 'XIF404TAB_AU_VEH'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInAuto.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInAuto.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInAuto.ApplyChange(InMotionGIT.Policy.Entity.Contracts.VehiclesInAuto,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="VehiclesInAutoItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInAuto.ApplyChange(InMotionGIT.Policy.Entity.Contracts.VehiclesInAuto,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="VehiclesInAutoItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInAuto.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInAuto.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInAuto.Synchronize(InMotionGIT.Policy.Entity.Contracts.VehiclesInAutoCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInAuto.Synchronize(InMotionGIT.Policy.Entity.Contracts.VehiclesInAutoCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto">
 <summary>
 Value of vehicles table.
 </summary>
<remarks>Data-source is 'TAB_AU_VAL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.Synchronize(InMotionGIT.Policy.Entity.Contracts.VehiclesInsuredValuesInAuto,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.Synchronize(InMotionGIT.Policy.Entity.Contracts.VehiclesInsuredValuesInAuto,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.SynchronizeChildren(InMotionGIT.Policy.Entity.Contracts.VehiclesInsuredValuesInAuto,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.RetrieveByVehicleCode(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for VehiclesInsuredValuesInAuto class</returns>
 <remarks>Datasource is 'XIF403TAB_AU_VAL'.</remarks>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.ApplyChange(InMotionGIT.Policy.Entity.Contracts.VehiclesInsuredValuesInAuto,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="VehiclesInsuredValuesInAutoItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.ApplyChange(InMotionGIT.Policy.Entity.Contracts.VehiclesInsuredValuesInAuto,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="VehiclesInsuredValuesInAutoItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.Synchronize(InMotionGIT.Policy.Entity.Contracts.VehiclesInsuredValuesInAutoCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Policy.DataAccess.VehiclesInsuredValuesInAuto.Synchronize(InMotionGIT.Policy.Entity.Contracts.VehiclesInsuredValuesInAutoCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
</members>
</doc>
