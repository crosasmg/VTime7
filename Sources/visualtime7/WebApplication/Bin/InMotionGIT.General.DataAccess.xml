<?xml version="1.0"?>
<doc>
<assembly>
<name>
InMotionGIT.General.DataAccess
</name>
</assembly>
<members>
<member name="T:InMotionGIT.General.DataAccess.My.Resources.Resources">
<summary>
  Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.My.Resources.Resources.ResourceManager">
<summary>
  Devuelve la instancia de ResourceManager almacenada en caché utilizada por esta clase.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.My.Resources.Resources.Culture">
<summary>
  Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las
  búsquedas de recursos mediante esta clase de recurso fuertemente tipado.
</summary>
</member>
<member name="T:InMotionGIT.General.DataAccess.Address.Address">
 <summary>
 Addresses.
 </summary>
<remarks>Data-source is 'ADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.Synchronize(InMotionGIT.General.Entity.Contracts.Address.Address,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.Synchronize(InMotionGIT.General.Entity.Contracts.Address.Address,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Address.Address,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.RetrieveByAgree(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Address class</returns>
 <remarks>Datasource is 'XIF2602ADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.RetrieveByKeyToAddressRecord(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Address class</returns>
 <remarks>Datasource is 'XIE2ADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateIDRecordEffectiveDate(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Address class</returns>
 <remarks>Datasource is 'XIE1ADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.RetrieveByCityCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Address class</returns>
 <remarks>Datasource is 'XIF2077ADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.RetrieveByCountry(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Address class</returns>
 <remarks>Datasource is 'XIF1313ADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.RetrieveByStateOrProvince(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Address class</returns>
 <remarks>Datasource is 'XIF431ADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.RetrieveByMunicipalityCode(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Address class</returns>
 <remarks>Datasource is 'XIF1095ADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Address class</returns>
 <remarks>Datasource is 'XIF2110ADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.Find(System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.Find(System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.Find(System.Int32,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.Find(System.Int32,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.Address,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="AddressItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.Address,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="AddressItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.CancelCurrentRecord(InMotionGIT.General.Entity.Contracts.Address.Address,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="AddressItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.CancelCurrentRecord(InMotionGIT.General.Entity.Contracts.Address.Address,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="AddressItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.Address.CustomString">
 <summary>
 Extensibility custom string property.
 </summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.Address.CustomStringEx">
 <summary>
 Extensibility custom string ex property.
 </summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.Address.CustomNumeric">
 <summary>
 Extensibility custom decimal property.
 </summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.Address.CustomNumericEx">
 <summary>
 Extensibility custom decimal ex property.
 </summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.Address.CustomDate">
 <summary>
 Extensibility custom date property.
 </summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.Address.CustomDateEx">
 <summary>
 Extensibility custom date ex property.
 </summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.Address.CustomBoolean">
 <summary>
 Extensibility custom boolean property.
 </summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.Address.CustomBooleanEx">
 <summary>
 Extensibility custom boolean ex property.
 </summary>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.Synchronize(InMotionGIT.General.Entity.Contracts.Address.AddressCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.Synchronize(InMotionGIT.General.Entity.Contracts.Address.AddressCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.RetrieveByClient(System.String,System.DateTime,System.String,System.Boolean,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Retrieve address information using the clientId and RecordOwner in 2
 </summary>
 <param name="ClientID">ClientCode</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Address class</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Address.RetrieveByPOBOX(System.String,System.DateTime,System.String,System.Boolean,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Retrieve address information using the POBOX
 </summary>
 <param name="POBOX">Postal Code. // Código postal.</param>
 <param name="atDate">Date of effect of the process used by the historical tables. // Fecha de efecto.</param>
 <param name="filter">Filter. // Filtro.</param>
 <returns>Collection for Address class // Colección de direcciones</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Address.City">
 <summary>
 Cities of a country.
 </summary>
<remarks>Data-source is 'TAB_LOCAT'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.City.Synchronize(InMotionGIT.General.Entity.Contracts.Address.City,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.City.Synchronize(InMotionGIT.General.Entity.Contracts.Address.City,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.City.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Address.City,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.City.RetrieveByStateOrProvince(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for City class</returns>
 <remarks>Datasource is 'XIF2246TAB_LOCAT'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.City.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.City.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.City.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.City,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CityItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.City.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.City,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CityItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.City.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.City.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.City.Synchronize(InMotionGIT.General.Entity.Contracts.Address.CityCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.City.Synchronize(InMotionGIT.General.Entity.Contracts.Address.CityCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Coordinate.DecimalCoordinateToDmsCoordinate(System.Decimal,System.Boolean)">
 <summary>
 Convierte una coordenada en representacion Decimal a una Representacion 
 en grados minutos y segundos y la retorna en un objeto de tipo Coordinate
 </summary>
 <param name="decimalCoordinate"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Coordinate.DmsCoordinateToDecimalCoordinate(InMotionGIT.General.DataAccess.Address.Coordinate)">
 <summary>
 Converts the coordinates in the format of the class which represents a DMS format 
 to a Decimal coodinate
 </summary>
 <param name="coordinate"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:InMotionGIT.General.DataAccess.Address.Municipality">
 <summary>
 Municipality / town
 </summary>
<remarks>Data-source is 'MUNICIPALITY'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Municipality.Synchronize(InMotionGIT.General.Entity.Contracts.Address.Municipality,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Municipality.Synchronize(InMotionGIT.General.Entity.Contracts.Address.Municipality,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Municipality.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Address.Municipality,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Municipality.RetrieveByCityCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Municipality class</returns>
 <remarks>Datasource is 'XIF2242MUNICIPALITY'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Municipality.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Municipality.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Municipality.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.Municipality,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="MunicipalityItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Municipality.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.Municipality,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="MunicipalityItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Municipality.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Municipality.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Municipality.Synchronize(InMotionGIT.General.Entity.Contracts.Address.MunicipalityCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Municipality.Synchronize(InMotionGIT.General.Entity.Contracts.Address.MunicipalityCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Address.Province">
 <summary>
 Particular information about provinces and states of a country.
 </summary>
<remarks>Data-source is 'PROVINCE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Province.Synchronize(InMotionGIT.General.Entity.Contracts.Address.Province,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Province.Synchronize(InMotionGIT.General.Entity.Contracts.Address.Province,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Province.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Address.Province,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Province.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Province.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Province.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.Province,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ProvinceItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Province.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.Province,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ProvinceItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Province.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Province.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Province.Synchronize(InMotionGIT.General.Entity.Contracts.Address.ProvinceCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.Province.Synchronize(InMotionGIT.General.Entity.Contracts.Address.ProvinceCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.RecordOwner">
<summary>
Owner of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.KeyToAddressRecord">
<summary>
Access Key of The Address Record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.TypeOfAddress">
<summary>
Type Of Address
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.StreetOrUrl">
<summary>
Address - Street - URL.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.Street">
<summary>
Address / Street.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.CityName">
<summary>
City/Location/Province.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.Email">
<summary>
Email address.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.LatitudeSeconds">
<summary>
Latitude of the address (Seconds)
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.LongitudeSeconds">
<summary>
Longitude of the address (Seconds)
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.LatitudeCoordinateGrades">
<summary>
Latitude coordinates of the address (Grades)
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.LonigitudeCoordinateGrades">
<summary>
Longitude coordinates of the address (grades)
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.PremiumFinancialAgreement">
<summary>
Code of the premium financial agreement related to the address.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.LatitudeCardinale">
<summary>
Latitude of the address with respect to the Equator
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.LatitudeMinutes">
<summary>
Latitude of the address (Minutes)
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.LongitudeCardinale">
<summary>
Longitude of the address with respect to Meridian 0
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.LongitudeMinutes">
<summary>
Longitud of the address (Minutes)
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.ClaimID">
<summary>
Claim number.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.ZipCode">
<summary>
Zip code.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.LatitudeGrades">
<summary>
Latitude of the address (Grades)
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.Country">
<summary>
Code of the country.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.LongitudeGrades">
<summary>
Longitude of the address (grades)
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.BankAgency">
<summary>
Code of The Bank Agency.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.BankInternalCode">
<summary>
Internal code of the banking institution or the savings and lending institution.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.BranchOffice">
<summary>
Code of the Branch Office
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.StateOrProvince">
<summary>
Code of the state or province.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.CityCode">
<summary>
City code.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.BuildingNumber">
<summary>
Number of the building in the street.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.MunicipalityCode">
<summary>
Code of the municipality.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.FloorNumber">
<summary>
Floor number
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.ApartmentNumber">
<summary>
Number of the apartment.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.Location">
<summary>
Village or town.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.MailingAddressIndicator">
<summary>
Indicator mailing documentation to the address registered
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.POBox">
<summary>
Post Office Box.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.CompleteAddress">
<summary>
Complete Address.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.Agree">
<summary>
Agree Code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.CostCenter">
<summary>
Cost center code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.NotInformeEMailCause">
<summary>
Indicates the justification for not to inform an email
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.LedgerProcessIndicator">
<summary>
Ledger process indicator
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.NTypeOfAddress">
<summary>
Type of address
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.ValidAddressIndicator">
<summary>
Valid address indicator
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.SSendMail">
<summary>
Indicator of correspondence by mail.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.SMail">
<summary>
Indicates that the address is used as a mail address.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Address.SBill">
<summary>
Indicates that the address is used as a collection address.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.City.CityCode">
<summary>
City code.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.City.Description">
<summary>
Description of the town
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.City.StateOrProvince">
<summary>
Code of the state or province.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.City.ShortDescription">
<summary>
Short description of the town
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.City.Location">
<summary>
Code of the location.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.City.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.City.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Municipality.MunicipalityCode">
<summary>
Code of the municipality.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Municipality.CityCode">
<summary>
Code from the city to which the municipality belongs.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Municipality.Description">
<summary>
Description of the code.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Municipality.ShortDescription">
<summary>
Short description of the code.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Municipality.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Municipality.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Province.StateOrProvince">
<summary>
Code of the state or province.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Province.Description">
<summary>
Description of the province.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Province.ShortDescription">
<summary>
Short description of the province.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Province.ProvinceCode">
<summary>
Code of the province
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Province.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.Province.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.ZipCode">
<summary>
Zip Code.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.GeographicalDistribution1">
<summary>
Code of the first level of the geographical distribution of the country
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.GeographicalDistribution2">
<summary>
Code of the second level of the geographical distribution of the country
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.GeographicalDistribution3">
<summary>
Code of the third level of the geographical distribution of the country
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.SeismicZone">
<summary>
Seismic Zone
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.DeductibleBySeismicZone">
<summary>
Deductible according to seismic zone
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.CoinsuranceBySeismicZone">
<summary>
Coinsurance according to seismic zone
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.FloodZone">
<summary>
Flood zone
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.DeductibleByFloodZone">
<summary>
Deductible according to flood zone
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.CoinsuranceByFloodZone">
<summary>
Coinsurance according to flood zone
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.NRATEEARTQUAKE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TabSeisMicFloodZone.NRATEFLOOD">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TypeAddress.AddressType">
<summary>
Type of address.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TypeAddress.RecordOwner">
<summary>
Owner of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TypeAddress.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.TypeAddress.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.ZipCode.ZipCodeNumber">
<summary>
Zip code.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.ZipCode.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Address.QueryStatement.ZipCode.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="T:InMotionGIT.General.DataAccess.Address.TabSeisMicFloodZone">
 <summary>
 
 </summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TabSeisMicFloodZone.Synchronize(InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TabSeisMicFloodZone.Synchronize(InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TabSeisMicFloodZone.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TabSeisMicFloodZone.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TabSeisMicFloodZone.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TabSeisMicFloodZone.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TabSeisMicFloodZoneItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TabSeisMicFloodZone.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TabSeisMicFloodZoneItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TabSeisMicFloodZone.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TabSeisMicFloodZone.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TabSeisMicFloodZone.Synchronize(InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZoneCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TabSeisMicFloodZone.Synchronize(InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZoneCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Address.TypeAddress">
 <summary>
 Types of addresses associated with the owner of record.
 </summary>
<remarks>Data-source is 'TAB_TYPADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.Synchronize(InMotionGIT.General.Entity.Contracts.Address.TypeAddress,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.Synchronize(InMotionGIT.General.Entity.Contracts.Address.TypeAddress,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Address.TypeAddress,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.RetrieveByAddressType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TypeAddress class</returns>
 <remarks>Datasource is 'XIF1TAB_TYPADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.RetrieveByRecordOwner(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TypeAddress class</returns>
 <remarks>Datasource is 'XIF2TAB_TYPADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.Find(System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.Find(System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.TypeAddress,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TypeAddressItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.TypeAddress,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TypeAddressItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.Synchronize(InMotionGIT.General.Entity.Contracts.Address.TypeAddressCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.TypeAddress.Synchronize(InMotionGIT.General.Entity.Contracts.Address.TypeAddressCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Address.ZipCode">
 <summary>
 Zip codes.
 </summary>
<remarks>Data-source is 'ZIP_CODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.ZipCode.Synchronize(InMotionGIT.General.Entity.Contracts.Address.ZipCode,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.ZipCode.Synchronize(InMotionGIT.General.Entity.Contracts.Address.ZipCode,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.ZipCode.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Address.ZipCode,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.ZipCode.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.ZipCode.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.ZipCode.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.ZipCode,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ZipCodeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.ZipCode.ApplyChange(InMotionGIT.General.Entity.Contracts.Address.ZipCode,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ZipCodeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.ZipCode.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.ZipCode.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.ZipCode.Synchronize(InMotionGIT.General.Entity.Contracts.Address.ZipCodeCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Address.ZipCode.Synchronize(InMotionGIT.General.Entity.Contracts.Address.ZipCodeCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection">
 <summary>
 Modified VTime components for the correction of an error.
 </summary>
<remarks>Data-source is 'ERR_COMP'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.Synchronize(InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.Synchronize(InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.RetrieveByErrorNumberConsecutiveNumber(System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ComponentModifiedByCorrection class</returns>
 <remarks>Datasource is 'XAK1ERR_COMP'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.RetrieveByTypeOfComponent(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ComponentModifiedByCorrection class</returns>
 <remarks>Datasource is 'XIF1ERR_COMP'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.RetrieveByErrorNumber(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ComponentModifiedByCorrection class</returns>
 <remarks>Datasource is 'XIF2ERR_COMP'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.ApplyChange(InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ComponentModifiedByCorrectionItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.ApplyChange(InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ComponentModifiedByCorrectionItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.Synchronize(InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrectionCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ComponentModifiedByCorrection.Synchronize(InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrectionCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Errors.ErrorHistory">
 <summary>
 History of an program error.
 </summary>
<remarks>Data-source is 'ERR_HISTOR'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.Synchronize(InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.Synchronize(InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.RetrieveByErrorStatus(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ErrorHistory class</returns>
 <remarks>Datasource is 'XIF1ERR_HISTOR'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.Find(System.Int64,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.Find(System.Int64,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.ApplyChange(InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ErrorHistoryItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.ApplyChange(InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ErrorHistoryItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.Synchronize(InMotionGIT.General.Entity.Contracts.Errors.ErrorHistoryCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.ErrorHistory.Synchronize(InMotionGIT.General.Entity.Contracts.Errors.ErrorHistoryCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Errors.SystemError">
 <summary>
 Functional errors found into the system.
 </summary>
<remarks>Data-source is 'ERRORS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.Synchronize(InMotionGIT.General.Entity.Contracts.Errors.SystemError,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.Synchronize(InMotionGIT.General.Entity.Contracts.Errors.SystemError,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Errors.SystemError,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.RetrieveByWindowLogicalCode(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for SystemError class</returns>
 <remarks>Datasource is 'XIF1ERRORS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.RetrieveByModule(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for SystemError class</returns>
 <remarks>Datasource is 'XIF2ERRORS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.RetrieveBySeverity(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for SystemError class</returns>
 <remarks>Datasource is 'XIF3ERRORS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.RetrieveByPriority(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for SystemError class</returns>
 <remarks>Datasource is 'XIF4ERRORS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.RetrieveByStatus(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for SystemError class</returns>
 <remarks>Datasource is 'XIF5ERRORS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.RetrieveBySource(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for SystemError class</returns>
 <remarks>Datasource is 'XIF6ERRORS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.ApplyChange(InMotionGIT.General.Entity.Contracts.Errors.SystemError,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="SystemErrorItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.ApplyChange(InMotionGIT.General.Entity.Contracts.Errors.SystemError,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="SystemErrorItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.Synchronize(InMotionGIT.General.Entity.Contracts.Errors.SystemErrorCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Errors.SystemError.Synchronize(InMotionGIT.General.Entity.Contracts.Errors.SystemErrorCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ComponentModifiedByCorrection.Sequence">
<summary>
Consecutive number identifying the record as sole.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ComponentModifiedByCorrection.ErrorNumber">
<summary>
Error number.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ComponentModifiedByCorrection.ConsecutiveNumber">
<summary>
Consecutive number identifying the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ComponentModifiedByCorrection.TypeOfComponent">
<summary>
Type of component of software.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ComponentModifiedByCorrection.Component">
<summary>
Software component.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ComponentModifiedByCorrection.ComponentPath">
<summary>
Component path.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ComponentModifiedByCorrection.Version">
<summary>
Version number of the component in VisualTIME DB.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ComponentModifiedByCorrection.DateSentToQC">
<summary>
Date when the component was sent to Quality Control
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ComponentModifiedByCorrection.DateSentToQA">
<summary>
Date when the component was sent to Quality Assurance
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ComponentModifiedByCorrection.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ComponentModifiedByCorrection.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ErrorHistory.ErrorNumber">
<summary>
Error number.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ErrorHistory.ConsecutiveNumber">
<summary>
Consecutive number to use as record key.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ErrorHistory.ErrorStatus">
<summary>
Status of the error.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ErrorHistory.DateOfStatus">
<summary>
Date when the record took its current status.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ErrorHistory.TimeOfStatus">
<summary>
Time in which the error takes the actual status.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ErrorHistory.ResponsibleUser">
<summary>
Responsible user.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ErrorHistory.Time">
<summary>
Hour and minutes stored in hhmm format.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ErrorHistory.Days">
<summary>
Number of days to correct or confirm the error.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ErrorHistory.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.ErrorHistory.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.ErrorNumber">
<summary>
Error number.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.WindowPhysicalCode">
<summary>
Code of the window (physical code).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.WindowLogicalCode">
<summary>
Code of the window (logical code).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.DateOfAssignment">
<summary>
Date when the error is assigned.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.ShortDescription">
<summary>
Short description of the program error.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.FreeText">
<summary>
Free text (Error description).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.Priority">
<summary>
Priority of the error.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.Source">
<summary>
Code specifying the source of the error.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.Status">
<summary>
Status of the error.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.UserAssignedToCorrectError">
<summary>
User assigned to correct the error.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.Version">
<summary>
Number of the Version in which the Error is detected.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.Module">
<summary>
Code of module to which the error belongs.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.Severity">
<summary>
Severity code.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.CorrectionTrasnferredToUsersEnvironmet">
<summary>
It indicates that the error correction was transferred to users environment.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Errors.QueryStatement.SystemError.ErrorType">
<summary>
Type of error.
</summary>
</member>
<member name="T:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE">
 <summary>
 
 </summary>
<remarks>Data-source is 'HOMOLOG_TABLE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.RetrieveByMapingTableExternalCodeToMap(System.Int32,System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for HOMOLOG_TABLE class</returns>
 <remarks>Datasource is 'XIEHOMOLOG_TABLE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.Find(System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.Find(System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.Find(System.Int32,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.Find(System.Int32,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="HOMOLOG_TABLEItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="HOMOLOG_TABLEItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLECollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.HOMOLOG_TABLE.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLECollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Interfaces.CALEND_INTERFACE">
 <summary>
 
 </summary>
<remarks>Data-source is 'CALEND_INTERFACE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.CALEND_INTERFACE.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.CALEND_INTERFACE.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.CALEND_INTERFACE.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.CALEND_INTERFACE.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CALEND_INTERFACEItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.CALEND_INTERFACE.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CALEND_INTERFACEItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.CALEND_INTERFACE.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.CALEND_INTERFACE.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.CALEND_INTERFACE.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACECollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.CALEND_INTERFACE.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACECollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET">
 <summary>
 
 </summary>
<remarks>Data-source is 'DEPEND_SHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET.Find(System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET.Find(System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DEPEND_SHEETItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="DEPEND_SHEETItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEETCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.DEPEND_SHEET.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEETCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET">
 <summary>
 Field Sheet
 </summary>
<remarks>Data-source is 'FIELDSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.RetrieveByInterfaceCodeFieldType(System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FIELDSHEET class</returns>
 <remarks>Datasource is 'XIE1FIELDSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.RetrieveByInterfaceCodeFieldName(System.Int32,System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FIELDSHEET class</returns>
 <remarks>Datasource is 'XIE2FIELDSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.RetrieveByFieldType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FIELDSHEET class</returns>
 <remarks>Datasource is 'XIF2FIELDSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.RetrieveByDeploymentObjectTypes(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FIELDSHEET class</returns>
 <remarks>Datasource is 'XIF4FIELDSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.RetrieveByOperator(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FIELDSHEET class</returns>
 <remarks>Datasource is 'XIF5FIELDSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.RetrieveByCondition(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FIELDSHEET class</returns>
 <remarks>Datasource is 'XIF6FIELDSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.RetrieveByHomologousTableCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FIELDSHEET class</returns>
 <remarks>Datasource is 'XIF7FIELDSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.RetrieveByInterfaceCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FIELDSHEET class</returns>
 <remarks>Datasource is 'XIF1FIELDSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.Find(System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.Find(System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FIELDSHEETItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FIELDSHEETItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEETCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.FIELDSHEET.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEETCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.CALEND_INTERFACE.InterfaceCode">
<summary>
Interface Code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.CALEND_INTERFACE.ID">
<summary>
Consecutive Number identifying The Record as sole.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.CALEND_INTERFACE.ProcessDay">
<summary>
Day when the process must be executed
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.CALEND_INTERFACE.ProcessDate">
<summary>
Date when the process must be executed
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.CALEND_INTERFACE.ProcessTime">
<summary>
Time when the process must be executed
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.CALEND_INTERFACE.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.CALEND_INTERFACE.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.DEPEND_SHEET.ParentInterface">
<summary>
Parent interface
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.DEPEND_SHEET.ChildInterface">
<summary>
Child interface
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.DEPEND_SHEET.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.DEPEND_SHEET.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.InterfaceCode">
<summary>
Interface Code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.FieldCode">
<summary>
Code of the field in the template interface.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.FieldType">
<summary>
Type of field for the interface.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.TableName">
<summary>
Name of the table to which the field belongs.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.FieldName">
<summary>
Name or description field.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.ColumnName">
<summary>
Name of the column in the database
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.DafaultValue">
<summary>
Default Value
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.RoutineName">
<summary>
Name of the routine that calculates the value of the field.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.Order">
<summary>
Order to generate the output data of the interface.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.OrderOfAppearance">
<summary>
Order of appearance of the column in the template
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.TableNameOrProcess">
<summary>
Table name or process (Store Procedure) from which the list of values is generated.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.FieldLength">
<summary>
Length of the field.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.DeploymentObjectTypes">
<summary>
Object Types deployment.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.HomologousTableCode">
<summary>
Homologous table code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.Operator">
<summary>
Logical code of the condition.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.Condition">
<summary>
Logical code of the condition.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.CommentRelatedToTheField">
<summary>
Comment related to the field
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.TextRelatedByTheCondition">
<summary>
Text related by the condition.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.RequiredField">
<summary>
It indicates whether the field is required.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.LastEntry">
<summary>
It Indicates whether to prosecute from the last entry reported by the interface.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.TypeofField">
<summary>
Type of Field.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.RightParenthesisIndicator">
<summary>
Indicator of right parenthesis
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.LeftParenthesisIndicator">
<summary>
Indicator of left parenthesis
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.DecimalsOfTheField">
<summary>
Number of decimal digits in the field
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.ReportIndicator">
<summary>
It indicates that a report will be generated
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.DummyLPADVAR">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.DummyRPADVAR">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.Level">
<summary>
Level to the field
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.DuplicityOrder">
<summary>
Field Order Duplicity
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.UpdateMark">
<summary>
Indicator that the status has been updated. Unique Values 1-Affirmative/2-Negative
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.Description">
<summary>
Complete description of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.ConsecutiveNumber">
<summary>
Consecutive number identifying the record as unique
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.FIELDSHEET.TypeDefinitionCode">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.HOMOLOG_TABLE.ExternalSystemCode">
<summary>
Code of the external system.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.HOMOLOG_TABLE.MapingTable">
<summary>
Code identifying the table to homologate
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.HOMOLOG_TABLE.ConsecutiveNumber">
<summary>
Unique correlative number of the record
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.HOMOLOG_TABLE.ColumnNameInTheTemplate">
<summary>
Name of the column in the internal template
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.HOMOLOG_TABLE.InternalCodeToMap">
<summary>
Internal code to be mapped to the external code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.HOMOLOG_TABLE.AllowedValues">
<summary>
Possible Values Table in the system
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.HOMOLOG_TABLE.TableAssociatedField">
<summary>
Table related to the field.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.HOMOLOG_TABLE.ColumnName">
<summary>
Name of the column in the external template
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.HOMOLOG_TABLE.ExternalCodeToMap">
<summary>
External code to be mapped to the internal code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.HOMOLOG_TABLE.OverridingValue">
<summary>
Indicator used to determine which is the overrading value (prevailing value)
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.HOMOLOG_TABLE.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.HOMOLOG_TABLE.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TABLESHEET.InterfaceCode">
<summary>
Code of the interface template
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TABLESHEET.Name">
<summary>
Name of the database table
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TABLESHEET.Alias">
<summary>
Alias of the name of the database table
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TABLESHEET.TableLocation">
<summary>
Location of the table in the &#34;FROM&#34; instruction
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TABLESHEET.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TABLESHEET.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.InterfaceCode">
<summary>
Interface Code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.InterfaceType">
<summary>
Type of interface.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.ProcessRoutineNameExecutedBefore">
<summary>
Name of the process or routine that must be executed before the interfaces execution generic process
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.InterfaceFormat">
<summary>
Formats of the interface.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.ExternalSystemCode">
<summary>
Code of the external system.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.SelectInstructionOfTheInterface">
<summary>
&#34;Select&#34; Instruction related to the interface
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.InterfaceExecutionPeriod">
<summary>
Frequency of execution of the automatic interface.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.TemplateDescription">
<summary>
Description of the template
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.OperatorUserCode">
<summary>
Code of the user who executes the process (automatic interface)
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.AutomaticExecution">
<summary>
Indicator of automatic execution of the interface
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.ShortDescription">
<summary>
Short description of the Interface.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.GroupingIndicator">
<summary>
It indicates that the interface is generated from the grouping of the selected information
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.GeneralStatusofTheRecord">
<summary>
General status of the record
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.OperationType">
<summary>
Type of Vtime operation.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.ExecutedOnline">
<summary>
It indicates if the interface is executed online
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.NoteID">
<summary>
Number of the note containing the comments.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.ProcessRoutineNameExecutedAfter">
<summary>
Name of the process or routine that must be executed after the interfaces execution generic process
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.FilePrefixName">
<summary>
Prefix for the name of the output file
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.Header">
<summary>
Interface - header
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.Interface">
<summary>
Interface - Management of total amounts
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.ColumnIndicator">
<summary>
Column indicator of the type of record
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.MassiveProcessingIndicator">
<summary>
Indicator of massive processing.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.OutputInterfaceFile">
<summary>
Fill in of blanks for the output interface file
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.AlignmentType">
<summary>
Type of alignment
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.PathOfTheOutputFile">
<summary>
Path of the output file
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.FieldSeparator">
<summary>
Definition of the field separator
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.RoutineName">
<summary>
Name of the routine to name files
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.GridIndicator">
<summary>
It indicates whether the grid of the window must be shown
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.ViewOutput">
<summary>
Indicator of generation of output interface view
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.ReportIndicator">
<summary>
Indicator of generation of .
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.FileNameGeneratedByTheInterface">
<summary>
Name of the .
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.ParentInterfaceIndicator">
<summary>
Indicator of parent interface
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.GeneratedUniqueFile">
<summary>
It indicates that the interface is generated in one file.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.InterfaceQuery">
<summary>
Query of interface generation
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.XSLFileIndicator">
<summary>
It indicates that the interface generates a XSL file
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.QueryToGenerateXSLFile">
<summary>
Query to generate the .
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.RoutineForOutputName">
<summary>
Name of the routine to generate the name of the output interface
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.OutputRoutine">
<summary>
Name of the routine to generate the output
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.WorkflowName">
<summary>
Workflow name
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.NameOfTheWorkflowFolder">
<summary>
Name of the Workflow Folder
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.SQUEPROCESS">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.SQUEQUERY">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.ST_INTERFACE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.DateFormat">
<summary>
Date Format
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.Decimalseparator">
<summary>
Character to use as a decimal separator.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.TotalColumns">
<summary>
Total File Columns.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.TemplateInterface.AverageRecords">
<summary>
Average number of records.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.Key">
<summary>
Key of the temporary table
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.CorrelativeNumber">
<summary>
Correlative number of error messages
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.Record">
<summary>
Number of the record originating the error
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.ErrorNumber">
<summary>
Error number
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.Description">
<summary>
Description of the error
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.CertificateNumber">
<summary>
Number identifying the Certificate
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.ClientID">
<summary>
Code of The Client.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.CliamNumber">
<summary>
Number identifying the claim
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Interfaces.QueryStatement.T_ERR_INTERFACE.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="T:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET">
 <summary>
 
 </summary>
<remarks>Data-source is 'TABLESHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.RetrieveByInterfaceCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TABLESHEET class</returns>
 <remarks>Datasource is 'XIF1TABLESHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.Find(System.Int32,System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.Find(System.Int32,System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TABLESHEETItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TABLESHEETItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEETCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TABLESHEET.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEETCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.String)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface">
 <summary>
 Master Sheet
 </summary>
<remarks>Data-source is 'MASTERSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.RetrieveByOperationType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TemplateInterface class</returns>
 <remarks>Datasource is 'XIF4MASTERSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.RetrieveByInterfaceExecutionPeriod(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TemplateInterface class</returns>
 <remarks>Datasource is 'XIF5MASTERSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.RetrieveByInterfaceType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TemplateInterface class</returns>
 <remarks>Datasource is 'XIF1MASTERSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.RetrieveByInterfaceFormat(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TemplateInterface class</returns>
 <remarks>Datasource is 'XIF2MASTERSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.RetrieveByExternalSystemCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TemplateInterface class</returns>
 <remarks>Datasource is 'XIF3MASTERSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TemplateInterfaceItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TemplateInterfaceItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterfaceCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.TemplateInterface.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterfaceCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE">
 <summary>
 
 </summary>
<remarks>Data-source is 'T_ERR_INTERFACE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.RetrieveByRecord(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for T_ERR_INTERFACE class</returns>
 <remarks>Datasource is 'XIE1T_ERR_INTERFACE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.Find(System.String,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.Find(System.String,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="T_ERR_INTERFACEItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.ApplyChange(InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="T_ERR_INTERFACEItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACECollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Interfaces.T_ERR_INTERFACE.Synchronize(InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACECollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch">
 <summary>
 
 </summary>
<remarks>Data-source is 'FUNDS_SWITCH'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.RetrieveByInvestmentFundCodeOutput(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FundAllowedBySwitch class</returns>
 <remarks>Datasource is 'XIF1FUNDS_SWITCH'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.RetrieveByInvestmentFundCodeInput(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FundAllowedBySwitch class</returns>
 <remarks>Datasource is 'XIF2FUNDS_SWITCH'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.RetrieveByGeneralstatusoftherecord(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FundAllowedBySwitch class</returns>
 <remarks>Datasource is 'XIF3FUNDS_SWITCH'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.RetrieveBySourceAccount(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FundAllowedBySwitch class</returns>
 <remarks>Datasource is 'XIF4FUNDS_SWITCH'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.Find(System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.Find(System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.Find(System.Int32,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.Find(System.Int32,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.ApplyChange(InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FundAllowedBySwitchItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.ApplyChange(InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FundAllowedBySwitchItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitchCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundAllowedBySwitch.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitchCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Funds.FundStockMovement">
 <summary>
 Stock Movements of funds.
 </summary>
<remarks>Data-source is 'FUND_STOCK'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.RetrieveByTypeOfEntry(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FundStockMovement class</returns>
 <remarks>Datasource is 'XIF823FUND_STOCK'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.RetrieveByInvestmentFund(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FundStockMovement class</returns>
 <remarks>Datasource is 'XIF822FUND_STOCK'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.Find(System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.Find(System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.Find(System.Int32,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.Find(System.Int32,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.ApplyChange(InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FundStockMovementItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.ApplyChange(InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FundStockMovementItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.FundStockMovementCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundStockMovement.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.FundStockMovementCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Funds.FundValue">
 <summary>
 Nominal value of investment fund units.
 </summary>
<remarks>Data-source is 'FUND_VALUE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.FundValue,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.FundValue,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Funds.FundValue,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.RetrieveByInvestmentFund(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FundValue class</returns>
 <remarks>Datasource is 'XIF821FUND_VALUE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.Find(System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.Find(System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.ApplyChange(InMotionGIT.General.Entity.Contracts.Funds.FundValue,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FundValueItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.ApplyChange(InMotionGIT.General.Entity.Contracts.Funds.FundValue,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FundValueItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.CancelCurrentRecord(InMotionGIT.General.Entity.Contracts.Funds.FundValue,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="FundValueItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.CancelCurrentRecord(InMotionGIT.General.Entity.Contracts.Funds.FundValue,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="FundValueItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.FundValueCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.FundValue.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.FundValueCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Funds.InvestmentFund">
 <summary>
 Investment funds available in the enterprise.
 </summary>
<remarks>Data-source is 'FUND_INV'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.InvestmentFund.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.InvestmentFund.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.InvestmentFund.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.InvestmentFund.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.InvestmentFund.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.InvestmentFund.ApplyChange(InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="InvestmentFundItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.InvestmentFund.ApplyChange(InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="InvestmentFundItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.InvestmentFund.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.InvestmentFund.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.InvestmentFund.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Funds.InvestmentFund.Synchronize(InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundAllowedBySwitch.SourceAccount">
<summary>
Code of the source account (values
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundAllowedBySwitch.InvestmentFundCodeInput">
<summary>
Investment Fund Code - Input
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundAllowedBySwitch.InvestmentFundCodeOutput">
<summary>
Investment Fund Code - Output
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundAllowedBySwitch.Generalstatusoftherecord">
<summary>
General status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundAllowedBySwitch.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundAllowedBySwitch.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundStockMovement.InvestmentFund">
<summary>
Code of the investment fund.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundStockMovement.TypeOfEntry">
<summary>
Type of entry (buy/sale).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundStockMovement.EntryID">
<summary>
Number identifying the stock entry.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundStockMovement.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundStockMovement.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundStockMovement.Units">
<summary>
Number of investment units.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundStockMovement.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundValue.InvestmentFund">
<summary>
Code of the investment fund.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundValue.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundValue.Amount">
<summary>
Nominal value of each investment unit.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundValue.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundValue.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundValue.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.FundValue.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.Fund">
<summary>
Code of the investment fund.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.dCompdate">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.sDescript">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.FundAvailableUnits">
<summary>
Number of units available in the fund (The policy entries don&#39;t affect this value).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.MaximumNumberOfUnits">
<summary>
Maximum number of units.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.DateOfIngress">
<summary>
Date when the information was first entered into the system.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.MinimumNumberOfUnits">
<summary>
Minimum number of units.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.CountryBelongingFunds">
<summary>
Country belonging to investment funds.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.FundSeries">
<summary>
Fund series
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.FundRun">
<summary>
Run of the fund
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.CreditDividends">
<summary>
Indicator of accreditation of dividends, possible values 1- Affirmative 2- Negative
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.DescriptionFund">
<summary>
Long description of the fund.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Funds.QueryStatement.InvestmentFund.ShortDescriptionFund">
<summary>
Short description of the fund.
</summary>
</member>
<member name="T:InMotionGIT.General.DataAccess.General.Company">
 <summary>
 Information about companies.
 </summary>
<remarks>Data-source is 'COMPANY'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Company.Synchronize(InMotionGIT.General.Entity.Contracts.General.Company,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Company.Synchronize(InMotionGIT.General.Entity.Contracts.General.Company,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Company.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.General.Company,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Company.RetrieveByCompanyClassification(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Company class</returns>
 <remarks>Datasource is 'XIF1591COMPANY'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Company.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Company class</returns>
 <remarks>Datasource is 'XIF595COMPANY'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Company.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Company.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Company.ApplyChange(InMotionGIT.General.Entity.Contracts.General.Company,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CompanyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Company.ApplyChange(InMotionGIT.General.Entity.Contracts.General.Company,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CompanyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Company.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Company.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Company.Synchronize(InMotionGIT.General.Entity.Contracts.General.CompanyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Company.Synchronize(InMotionGIT.General.Entity.Contracts.General.CompanyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.General.ComunicationBu">
 <summary>
 Ways of sending or receiving information.
 </summary>
<remarks>Data-source is 'TABLE8201'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ComunicationBu.Synchronize(InMotionGIT.General.Entity.Contracts.General.ComunicationBu,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ComunicationBu.Synchronize(InMotionGIT.General.Entity.Contracts.General.ComunicationBu,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ComunicationBu.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.General.ComunicationBu,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ComunicationBu.RetrieveByCode(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ComunicationBu class</returns>
 <remarks>Datasource is 'XIF1TABLE8201'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ComunicationBu.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ComunicationBu.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ComunicationBu.ApplyChange(InMotionGIT.General.Entity.Contracts.General.ComunicationBu,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ComunicationBuItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ComunicationBu.ApplyChange(InMotionGIT.General.Entity.Contracts.General.ComunicationBu,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ComunicationBuItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ComunicationBu.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ComunicationBu.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ComunicationBu.Synchronize(InMotionGIT.General.Entity.Contracts.General.ComunicationBuCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ComunicationBu.Synchronize(InMotionGIT.General.Entity.Contracts.General.ComunicationBuCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate">
 <summary>
 Exchange rate of a currency.
 </summary>
<remarks>Data-source is 'EXCHANGE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate.Synchronize(InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate.Synchronize(InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate.Find(System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate.Find(System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate.ApplyChange(InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CurrencyExchangeRateItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate.ApplyChange(InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CurrencyExchangeRateItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate.CancelCurrentRecord(InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CurrencyExchangeRateItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate.CancelCurrentRecord(InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="CurrencyExchangeRateItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate.Synchronize(InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRateCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.CurrencyExchangeRate.Synchronize(InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRateCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.General.FORMATVALUE">
 <summary>
 
 </summary>
<remarks>Data-source is 'FORMATVALUES'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.Synchronize(InMotionGIT.General.Entity.Contracts.General.FORMATVALUE,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.Synchronize(InMotionGIT.General.Entity.Contracts.General.FORMATVALUE,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.General.FORMATVALUE,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.RetrieveByClassOfDocumentFormat(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for FORMATVALUE class</returns>
 <remarks>Datasource is 'XIF1FORMATVALUES'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.Find(System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.Find(System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.ApplyChange(InMotionGIT.General.Entity.Contracts.General.FORMATVALUE,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FORMATVALUEItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.ApplyChange(InMotionGIT.General.Entity.Contracts.General.FORMATVALUE,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="FORMATVALUEItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.Synchronize(InMotionGIT.General.Entity.Contracts.General.FORMATVALUECollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.FORMATVALUE.Synchronize(InMotionGIT.General.Entity.Contracts.General.FORMATVALUECollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.General.Holiday">
 <summary>
 Table of holidays.
 </summary>
<remarks>Data-source is 'HOLLIDAYS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.Synchronize(InMotionGIT.General.Entity.Contracts.General.Holiday,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.Synchronize(InMotionGIT.General.Entity.Contracts.General.Holiday,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.General.Holiday,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.RetrieveByCode(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Holiday class</returns>
 <remarks>Datasource is 'XIF2397HOLLIDAYS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.Find(System.Int64,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.Find(System.Int64,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.Find(System.Int64,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.Find(System.Int64,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.ApplyChange(InMotionGIT.General.Entity.Contracts.General.Holiday,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="HolidayItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.ApplyChange(InMotionGIT.General.Entity.Contracts.General.Holiday,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="HolidayItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.Synchronize(InMotionGIT.General.Entity.Contracts.General.HolidayCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holiday.Synchronize(InMotionGIT.General.Entity.Contracts.General.HolidayCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.General.Holliday">
 <summary>
 Table of hollidays.
 </summary>
<remarks>Data-source is 'HOLLIDAYS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.Synchronize(InMotionGIT.General.Entity.Contracts.General.Holliday,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.Synchronize(InMotionGIT.General.Entity.Contracts.General.Holliday,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.General.Holliday,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.RetrieveByCode(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Holliday class</returns>
 <remarks>Datasource is 'XIF2397HOLLIDAYS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.Find(System.Int64,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.Find(System.Int64,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.Find(System.Int64,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.Find(System.Int64,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.ApplyChange(InMotionGIT.General.Entity.Contracts.General.Holliday,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="HollidayItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.ApplyChange(InMotionGIT.General.Entity.Contracts.General.Holliday,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="HollidayItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.Synchronize(InMotionGIT.General.Entity.Contracts.General.HollidayCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Holliday.Synchronize(InMotionGIT.General.Entity.Contracts.General.HollidayCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.General.LoansLifeInsurance">
 <summary>
 Loans/advances of life.
 </summary>
<remarks>Data-source is 'LOANS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Synchronize(InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Synchronize(InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.RetrieveByNextBilling(System.DateTime,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LoansLifeInsurance class</returns>
 <remarks>Datasource is 'XIE2LOANS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.RetrieveByLoanEffectiveDate(System.DateTime,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for LoansLifeInsurance class</returns>
 <remarks>Datasource is 'XIE1LOANS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Find(System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Find(System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Find(System.Int32,System.Int32,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Find(System.Int32,System.Int32,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Find(System.Int32,System.Int32,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Find(System.Int32,System.Int32,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Find(System.Int32,System.Int32,System.Int64,System.Int64,System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Find(System.Int32,System.Int32,System.Int64,System.Int64,System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.ApplyChange(InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="LoansLifeInsuranceItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.ApplyChange(InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="LoansLifeInsuranceItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Synchronize(InMotionGIT.General.Entity.Contracts.General.LoansLifeInsuranceCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.LoansLifeInsurance.Synchronize(InMotionGIT.General.Entity.Contracts.General.LoansLifeInsuranceCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.General.Numerator">
 <summary>
 Numerator.
 </summary>
<remarks>Data-source is 'NUMERATOR'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Numerator.Synchronize(InMotionGIT.General.Entity.Contracts.General.Numerator,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Numerator.Synchronize(InMotionGIT.General.Entity.Contracts.General.Numerator,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Numerator.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.General.Numerator,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Numerator.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Numerator.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Numerator.Find(System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Numerator.Find(System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Numerator.ApplyChange(InMotionGIT.General.Entity.Contracts.General.Numerator,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="NumeratorItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Numerator.ApplyChange(InMotionGIT.General.Entity.Contracts.General.Numerator,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="NumeratorItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Numerator.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Numerator.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Numerator.Synchronize(InMotionGIT.General.Entity.Contracts.General.NumeratorCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.Numerator.Synchronize(InMotionGIT.General.Entity.Contracts.General.NumeratorCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.General.ParticularDataAttribute">
 <summary>
 Particular Data Attributes.
 </summary>
<remarks>Data-source is 'TABLE6786'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ParticularDataAttribute.Synchronize(InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ParticularDataAttribute.Synchronize(InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ParticularDataAttribute.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ParticularDataAttribute.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ParticularDataAttribute.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ParticularDataAttribute.ApplyChange(InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ParticularDataAttributeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ParticularDataAttribute.ApplyChange(InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ParticularDataAttributeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ParticularDataAttribute.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ParticularDataAttribute.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ParticularDataAttribute.Synchronize(InMotionGIT.General.Entity.Contracts.General.ParticularDataAttributeCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ParticularDataAttribute.Synchronize(InMotionGIT.General.Entity.Contracts.General.ParticularDataAttributeCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.General.PolicyInstallation">
 <summary>
 Policy installation options.
 </summary>
<remarks>Data-source is 'OPT_POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.PolicyInstallation.Synchronize(InMotionGIT.General.Entity.Contracts.General.PolicyInstallation,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.PolicyInstallation.Synchronize(InMotionGIT.General.Entity.Contracts.General.PolicyInstallation,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.PolicyInstallation.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.General.PolicyInstallation,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.PolicyInstallation.RetrieveBySalesOperation(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyInstallation class</returns>
 <remarks>Datasource is 'XIF1290OPT_POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.PolicyInstallation.RetrieveBySpecialProducer(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PolicyInstallation class</returns>
 <remarks>Datasource is 'XIF1291OPT_POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.PolicyInstallation.ApplyChange(InMotionGIT.General.Entity.Contracts.General.PolicyInstallation,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PolicyInstallationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.PolicyInstallation.ApplyChange(InMotionGIT.General.Entity.Contracts.General.PolicyInstallation,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PolicyInstallationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.PolicyInstallation.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.PolicyInstallation.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.PolicyInstallation.Synchronize(InMotionGIT.General.Entity.Contracts.General.PolicyInstallationCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.PolicyInstallation.Synchronize(InMotionGIT.General.Entity.Contracts.General.PolicyInstallationCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.General.ProcessStatus">
 <summary>
 Massive process status.
 </summary>
<remarks>Data-source is 'TABLE8202'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ProcessStatus.Synchronize(InMotionGIT.General.Entity.Contracts.General.ProcessStatus,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ProcessStatus.Synchronize(InMotionGIT.General.Entity.Contracts.General.ProcessStatus,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ProcessStatus.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.General.ProcessStatus,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ProcessStatus.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ProcessStatus.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ProcessStatus.ApplyChange(InMotionGIT.General.Entity.Contracts.General.ProcessStatus,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ProcessStatusItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ProcessStatus.ApplyChange(InMotionGIT.General.Entity.Contracts.General.ProcessStatus,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ProcessStatusItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ProcessStatus.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ProcessStatus.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ProcessStatus.Synchronize(InMotionGIT.General.Entity.Contracts.General.ProcessStatusCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.ProcessStatus.Synchronize(InMotionGIT.General.Entity.Contracts.General.ProcessStatusCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.Company">
<summary>
Code of the company.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.BankAccount">
<summary>
Number of the bank account.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.BankName">
<summary>
Name of the bank for payment agreements.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.Country">
<summary>
Code of the country where the principal office of the company is located.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.DateOfIngress">
<summary>
Date when the information was first entered into the system.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.WithholdingTaxRate">
<summary>
Tax percentage to be withheld from the producer.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.CompanyType">
<summary>
Company Type.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.OfficialInscription">
<summary>
Number of inscription in the Insurance Superintendence.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.NationalCompany">
<summary>
National company indicator.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Company.CompanyClassification">
<summary>
Company Classification.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ComunicationBu.CommunicationBus">
<summary>
Communication Bus code.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ComunicationBu.Code">
<summary>
Code of the record status.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ComunicationBu.UpdateTimeStamp">
<summary>
Computer date Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ComunicationBu.Description">
<summary>
Bus Description.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ComunicationBu.ShortDescription">
<summary>
Bus Short description
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ComunicationBu.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.CurrencyExchangeRate.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.CurrencyExchangeRate.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.CurrencyExchangeRate.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.CurrencyExchangeRate.ExchangeRate">
<summary>
Exchange rate of the entry to the local currency.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.CurrencyExchangeRate.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.CurrencyExchangeRate.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.FORMATVALUE.ClassOfDocumentFormat">
<summary>
Type of document
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.FORMATVALUE.TypeCodeClientIDs">
<summary>
Type code of Client IDs.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.FORMATVALUE.Description">
<summary>
Description of the Type of Client IDs.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.FORMATVALUE.AbbreviatedDescription">
<summary>
Abbreviated description of the Type of Client IDs.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.FORMATVALUE.DocumentFormat">
<summary>
Format of the document.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.FORMATVALUE.PersonType">
<summary>
Indicator of type of client for whom it applies the type of Client IDs
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.FORMATVALUE.FormatValidatingRoutine">
<summary>
Name of the routine used for validating the number or code of Client IDs (structure, number, etc.).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.FORMATVALUE.RecordStatus">
<summary>
General status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.FORMATVALUE.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.FORMATVALUE.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Holiday.Code">
<summary>
Code of the month.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Holiday.Holiday">
<summary>
Holiday.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Holiday.CountryCode">
<summary>
Country code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Holiday.Description">
<summary>
Description of the holiday.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Holiday.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Holiday.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Holliday.Code">
<summary>
Code of the month.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Holliday.Holiday">
<summary>
Holiday.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Holliday.CountryCode">
<summary>
Country code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Holliday.Description">
<summary>
Description of the holiday.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Holliday.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Holliday.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.CertificateID">
<summary>
Certificate ID subject to the loan.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.Key">
<summary>
Consecutive number identifying the record as unique for the policy-certificate.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.TotalAmount">
<summary>
Loan total amount.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.Balance">
<summary>
Outstanding balance of the loan.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.InterestRate">
<summary>
Interest percentage applied to the loan.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.LoanEffectiveDate">
<summary>
Effective date of the advance payment.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.PaymentOrder">
<summary>
Number of the payment order to pay the loan.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.TaxAmount">
<summary>
Tax amount applied to the loan.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.NextBilling">
<summary>
Date of next billing.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.AmountOfCapitalizedInterest">
<summary>
Amount of capitalized interest.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.Agency">
<summary>
Agency where the transaction was made.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.LoansLifeInsurance.AmountOfLoanLocalCurrency">
<summary>
Amount of loan / advance expressed in local currency
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Numerator.RecordType">
<summary>
Type of record to which the numbering pertains.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Numerator.Key">
<summary>
Complementary key to obtain the appropriate numerator.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Numerator.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Numerator.EndingNumber">
<summary>
Ending number for numbering purposes.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Numerator.StartingNumber">
<summary>
Initial number for numbering purposes.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Numerator.LastNumberUsed">
<summary>
Last number assigned.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.Numerator.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ParticularDataAttribute.CodeTypeDefinition">
<summary>
Code type definition
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ParticularDataAttribute.DescriptionDefinitionType">
<summary>
Description Definition type
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ParticularDataAttribute.AbbreviatedDescriptionAttribute">
<summary>
Abbreviated description of the attribute of the particular data.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ParticularDataAttribute.GeneralStatusOfTheRecord">
<summary>
General status of the record. Possible values according to table 26
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ParticularDataAttribute.UpdateTimeStamp">
<summary>
Computer date Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ParticularDataAttribute.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.PolicyInstallation.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.PolicyInstallation.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.PolicyInstallation.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.PolicyInstallation.SalesOperation">
<summary>
Type of sales operation of the insurance company (direct or with intermediaries).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.PolicyInstallation.SpecialProducer">
<summary>
Code of the producer used for direct sales.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.PolicyInstallation.PrintClauseTextTogetherPolicydocument">
<summary>
It indicates that the text associated with the clause of a policy will be printed by the system together with the policy documents
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.PolicyInstallation.SSTOCK_IND">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.PolicyInstallation.SAAPVFormIntitution">
<summary>
Code of the institution of origin of SAAPV application form.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.PolicyInstallation.WhenChargesApplyIndicator">
<summary>
Indicator when charges apply.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ProcessStatus.ProcessSataus">
<summary>
Massive process status.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ProcessStatus.Description">
<summary>
Massive process status description.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ProcessStatus.ShortDescription">
<summary>
Massive process status Short description.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ProcessStatus.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ProcessStatus.UpdateTimeStamp">
<summary>
Computer date Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.ProcessStatus.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.RelationBetweenOffice.Agency">
<summary>
Code of Agency.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.RelationBetweenOffice.OfficeCode">
<summary>
Code of Office.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.RelationBetweenOffice.BranchOffice">
<summary>
Code of the branch office.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.RelationBetweenOffice.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.RelationBetweenOffice.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.RelationBetweenOffice.PaymentAgencyIndicator">
<summary>
Paymen agency indicator
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.InitialDate">
<summary>
Date in which the company begins to use the system.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.ClauseTextWillBePrinted">
<summary>
Clause text will be printed.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.DescriptionToBeDisplayed">
<summary>
It indicates the type of Description to be Displayed.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.Module">
<summary>
Code of the module.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.Language">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.PersonClientCodeFormat">
<summary>
Format used for client codes of the system, individuals.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.ModuleInstallationDate">
<summary>
Date when a module is installed.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.CompanyClientCodeFormat">
<summary>
Format used for client codes of the system, commercial clients.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.Country">
<summary>
Code of the country.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.PolicyIDingMethod">
<summary>
Method for numbering policies.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.ClaimNumberingMethod">
<summary>
Method for numbering claims.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.BillsNumberingMethod">
<summary>
Method for numbering premium bills.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.Company">
<summary>
Code of the company.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.TypeOfSecurity">
<summary>
Type of system security.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.InsuranceArea">
<summary>
Insurance area (Life or P&#38;C).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.FEMNumberDBServer">
<summary>
FEM number of the Data Base server
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.TypeOfCompanyThatOperatesTheSystem">
<summary>
Type of Company that operates the system
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.LastUpdatedQuotationDate">
<summary>
Date last updated quotation
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.AutomaticNumberingOfQuotations">
<summary>
Automatic numbering of quotations
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.SMASSIVE_DIR">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.CompanyWorksWithItsOwnStockMutualFunds">
<summary>
For Non-Traditional Life products indicates that the company works with its own stock mutual funds...
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.TraceStoredProceduresMustBeActivatedIndicator">
<summary>
Indicator that the trace stored procedures must be activated
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.OfficialpolicyNumberFormat">
<summary>
Official policy number format.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.General.QueryStatement.SystemInstallation.OfficialCertificateNumberFormat">
<summary>
Official certificate number format.
</summary>
</member>
<member name="T:InMotionGIT.General.DataAccess.General.RelationBetweenOffice">
 <summary>
 Relationship between branch office and field office.
 </summary>
<remarks>Data-source is 'AGENCIES'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.Synchronize(InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.Synchronize(InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.RetrieveByAgency(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RelationBetweenOffice class</returns>
 <remarks>Datasource is 'XIF1AGENCIES'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.RetrieveByOfficeCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RelationBetweenOffice class</returns>
 <remarks>Datasource is 'XIF1547AGENCIES'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.RetrieveByBranchOffice(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for RelationBetweenOffice class</returns>
 <remarks>Datasource is 'XIF1548AGENCIES'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.ApplyChange(InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="RelationBetweenOfficeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.ApplyChange(InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="RelationBetweenOfficeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.Synchronize(InMotionGIT.General.Entity.Contracts.General.RelationBetweenOfficeCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.RelationBetweenOffice.Synchronize(InMotionGIT.General.Entity.Contracts.General.RelationBetweenOfficeCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.General.SystemInstallation">
 <summary>
 System installation options.
 </summary>
<remarks>Data-source is 'OPT_SYSTEM'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.SystemInstallation.Synchronize(InMotionGIT.General.Entity.Contracts.General.SystemInstallation,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.SystemInstallation.Synchronize(InMotionGIT.General.Entity.Contracts.General.SystemInstallation,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.SystemInstallation.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.General.SystemInstallation,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.SystemInstallation.RetrieveByInsuranceArea(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for SystemInstallation class</returns>
 <remarks>Datasource is 'XIF2480OPT_SYSTEM'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.SystemInstallation.ApplyChange(InMotionGIT.General.Entity.Contracts.General.SystemInstallation,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="SystemInstallationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.SystemInstallation.ApplyChange(InMotionGIT.General.Entity.Contracts.General.SystemInstallation,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="SystemInstallationItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.SystemInstallation.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.SystemInstallation.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.SystemInstallation.Synchronize(InMotionGIT.General.Entity.Contracts.General.SystemInstallationCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.General.SystemInstallation.Synchronize(InMotionGIT.General.Entity.Contracts.General.SystemInstallationCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Images.Image">
 <summary>
 Images associated with a claim.
 </summary>
<remarks>Data-source is 'IMAGES'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Images.Image.Synchronize(InMotionGIT.General.Entity.Contracts.Images.Image,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Images.Image.Synchronize(InMotionGIT.General.Entity.Contracts.Images.Image,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Images.Image.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Images.Image,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Images.Image.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Images.Image.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Images.Image.Find(System.Int64,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Images.Image.Find(System.Int64,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Images.Image.ApplyChange(InMotionGIT.General.Entity.Contracts.Images.Image,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ImageItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Images.Image.ApplyChange(InMotionGIT.General.Entity.Contracts.Images.Image,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ImageItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Images.Image.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Images.Image.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Images.Image.Synchronize(InMotionGIT.General.Entity.Contracts.Images.ImageCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Images.Image.Synchronize(InMotionGIT.General.Entity.Contracts.Images.ImageCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.General.DataAccess.Images.QueryStatement.Image.ImageID">
<summary>
Number of the image.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Images.QueryStatement.Image.ConsecutiveNumber">
<summary>
Consecutive number to use as record key.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Images.QueryStatement.Image.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Images.QueryStatement.Image.Description">
<summary>
Description related to the image.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Images.QueryStatement.Image.ImageContent">
<summary>
Contents of The Image.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Images.QueryStatement.Image.KeepUntil">
<summary>
Date until which the image will be kept in the system
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Images.QueryStatement.Image.RecordType">
<summary>
Record type to which the image belongs.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Images.QueryStatement.Image.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="T:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet">
 <summary>
 Columns in the excel sheet.
 </summary>
<remarks>Data-source is 'COLSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.Synchronize(InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.Synchronize(InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.RetrieveByWorkSheetID(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ColumnExcelSheet class</returns>
 <remarks>Datasource is 'XIF883COLSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.RetrieveByConsecutiveNumber(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ColumnExcelSheet class</returns>
 <remarks>Datasource is 'XIF1458COLSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.Find(System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.Find(System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.ApplyChange(InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ColumnExcelSheetItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.ApplyChange(InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ColumnExcelSheetItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.Synchronize(InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheetCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ColumnExcelSheet.Synchronize(InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheetCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Loader.ExcelWorksheetForPolicy">
 <summary>
 Excel templates for loading policies/certificates.
 </summary>
<remarks>Data-source is 'WORKSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ExcelWorksheetForPolicy.Synchronize(InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ExcelWorksheetForPolicy.Synchronize(InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ExcelWorksheetForPolicy.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ExcelWorksheetForPolicy.RetrieveByLineOfBusinessProductCode(System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ExcelWorksheetForPolicy class</returns>
 <remarks>Datasource is 'XIF2093WORKSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ExcelWorksheetForPolicy.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ExcelWorksheetForPolicy.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ExcelWorksheetForPolicy.ApplyChange(InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ExcelWorksheetForPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ExcelWorksheetForPolicy.ApplyChange(InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ExcelWorksheetForPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ExcelWorksheetForPolicy.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ExcelWorksheetForPolicy.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ExcelWorksheetForPolicy.Synchronize(InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.ExcelWorksheetForPolicy.Synchronize(InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ColumnExcelSheet.WorkSheetID">
<summary>
Consecutive number identifying the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ColumnExcelSheet.ConsecutiveNumber">
<summary>
Consecutive number identifying the record as unique.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ColumnExcelSheet.ColumnName">
<summary>
Column name in the worksheet.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ColumnExcelSheet.Order">
<summary>
Number of order.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ColumnExcelSheet.SelectionIndicator">
<summary>
Selection indicator.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ColumnExcelSheet.Required">
<summary>
Indicator of required column.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ColumnExcelSheet.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ColumnExcelSheet.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ExcelWorksheetForPolicy.WorkSheetID">
<summary>
Consecutive number identifying the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ExcelWorksheetForPolicy.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ExcelWorksheetForPolicy.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ExcelWorksheetForPolicy.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ExcelWorksheetForPolicy.GenerationOfValueList">
<summary>
It indicates whether the list of values are generated in the worksheet .
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ExcelWorksheetForPolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ExcelWorksheetForPolicy.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.ExcelWorksheetForPolicy.Description">
<summary>
Description of the template.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.TemplateColumnsUploadPolicy.ConsecutiveNumber">
<summary>
Consecutive number identifying the record as unique.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.TemplateColumnsUploadPolicy.ExcelSpreadsheet">
<summary>
Worksheet code to which the column is associated.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.TemplateColumnsUploadPolicy.FieldName">
<summary>
Field name related to a column.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.TemplateColumnsUploadPolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.TemplateColumnsUploadPolicy.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.TemplateColumnsUploadPolicy.ColumnName">
<summary>
Column name in the worksheet.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.TemplateColumnsUploadPolicy.Order">
<summary>
Order of the column in the worksheet.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.TemplateColumnsUploadPolicy.SourceOfValuesList">
<summary>
Name of the table or stored procedure to generate the list of values.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.TemplateColumnsUploadPolicy.FileName">
<summary>
File name related to the field.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.TemplateColumnsUploadPolicy.RequiredColumn">
<summary>
Column required indicator.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.TemplateColumnsUploadPolicy.Comment">
<summary>
Comment that must appear in the worksheet related to the column
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Loader.QueryStatement.TemplateColumnsUploadPolicy.UpdateMark">
<summary>
Indicator that the status has been updated. Unique Values 1-Affirmative/2-Negative
</summary>
</member>
<member name="T:InMotionGIT.General.DataAccess.Loader.TemplateColumnsUploadPolicy">
 <summary>
 Columns Excel template to upload policies / certificates.
 </summary>
<remarks>Data-source is 'GROUP_COLUMNS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.TemplateColumnsUploadPolicy.Synchronize(InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.TemplateColumnsUploadPolicy.Synchronize(InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.TemplateColumnsUploadPolicy.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.TemplateColumnsUploadPolicy.RetrieveByExcelSpreadsheet(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TemplateColumnsUploadPolicy class</returns>
 <remarks>Datasource is 'XIF864GROUP_COLUMNS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.TemplateColumnsUploadPolicy.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.TemplateColumnsUploadPolicy.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.TemplateColumnsUploadPolicy.ApplyChange(InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TemplateColumnsUploadPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.TemplateColumnsUploadPolicy.ApplyChange(InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TemplateColumnsUploadPolicyItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.TemplateColumnsUploadPolicy.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.TemplateColumnsUploadPolicy.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.TemplateColumnsUploadPolicy.Synchronize(InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicyCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Loader.TemplateColumnsUploadPolicy.Synchronize(InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicyCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Notes.Note">
 <summary>
 Notes of free text.
 </summary>
<remarks>Data-source is 'NOTES'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.Synchronize(InMotionGIT.General.Entity.Contracts.Notes.Note,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.Synchronize(InMotionGIT.General.Entity.Contracts.Notes.Note,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Notes.Note,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.RetrieveByRecordType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Note class</returns>
 <remarks>Datasource is 'XIF2289NOTES'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.Find(System.Int64,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.Find(System.Int64,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.ApplyChange(InMotionGIT.General.Entity.Contracts.Notes.Note,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="NoteItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.ApplyChange(InMotionGIT.General.Entity.Contracts.Notes.Note,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="NoteItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.Synchronize(InMotionGIT.General.Entity.Contracts.Notes.NoteCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Notes.Note.Synchronize(InMotionGIT.General.Entity.Contracts.Notes.NoteCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.General.DataAccess.Notes.QueryStatement.Note.NoteID">
<summary>
Number of the note containing the comments.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Notes.QueryStatement.Note.Consecutive">
<summary>
Consecutive number to use as record key.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Notes.QueryStatement.Note.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Notes.QueryStatement.Note.Description">
<summary>
General description of the note.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Notes.QueryStatement.Note.FreeText">
<summary>
Free Text - Note Description.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Notes.QueryStatement.Note.KeepUntil">
<summary>
Date until which the note will be kept in the system.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Notes.QueryStatement.Note.RecordType">
<summary>
Type of record identifying the note content.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Notes.QueryStatement.Note.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="T:InMotionGIT.General.DataAccess.Phones.Phone">
 <summary>
 Table of Phones.
 </summary>
<remarks>Data-source is 'PHONES'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.Synchronize(InMotionGIT.General.Entity.Contracts.Phones.Phone,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.Synchronize(InMotionGIT.General.Entity.Contracts.Phones.Phone,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Phones.Phone,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.RetrieveByBestTimeToCall(System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Phone class</returns>
 <remarks>Datasource is 'XIF1PHONES'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.RetrieveByTelephoneType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Phone class</returns>
 <remarks>Datasource is 'XIF2PHONES'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.Find(System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.Find(System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.Find(System.Int32,System.String,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.Find(System.Int32,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.Find(System.Int32,System.String,System.Int32,System.DateTime)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.Find(System.Int32,System.String,System.Int32,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.ApplyChange(InMotionGIT.General.Entity.Contracts.Phones.Phone,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PhoneItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.ApplyChange(InMotionGIT.General.Entity.Contracts.Phones.Phone,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PhoneItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.CancelCurrentRecord(InMotionGIT.General.Entity.Contracts.Phones.Phone,System.String)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PhoneItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.CancelCurrentRecord(InMotionGIT.General.Entity.Contracts.Phones.Phone,System.String,System.Data.Common.DbConnection)">
 <summary>
 Method that allows to perform an update in the tables of type history
 </summary>
 <param name="PhoneItem">Instance of the object to perform the update.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="currentConnection">Current connection, this to improve performance.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.Synchronize(InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Phones.Phone.Synchronize(InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.String,System.Int32,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.RecordOwner">
<summary>
Owner of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.KeyToPhoneRecord">
<summary>
Access Key of The Phones Record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.KeyPhone">
<summary>
Consecutive number of the phone.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.BestTimeToCall">
<summary>
Best time to call.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.AreaCode">
<summary>
Area Code.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.PhoneNumber">
<summary>
Telephone number.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.Order">
<summary>
Number of order.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.Extension1">
<summary>
Number of the extension.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.Extension2">
<summary>
Number of the extension (complementary).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.TelephoneType">
<summary>
Telephone type.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.CountryCode">
<summary>
Code of country to call.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Phones.QueryStatement.Phone.RelatedAddress">
<summary>
Address related to the phone number.
</summary>
</member>
<member name="T:InMotionGIT.General.DataAccess.Schedule.BatchProcess">
 <summary>
 Procesos batch ejecutados o en ejecución.
 </summary>
<remarks>Data-source is 'BATCH_JOB'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcess.Synchronize(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcess.Synchronize(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcess.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcess.RetrieveByUserCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for BatchProcess class</returns>
 <remarks>Datasource is 'XIF2536BATCH_JOB'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcess.RetrieveByBatchID(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for BatchProcess class</returns>
 <remarks>Datasource is 'XIF2535BATCH_JOB'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcess.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcess.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcess.ApplyChange(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="BatchProcessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcess.ApplyChange(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="BatchProcessItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcess.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcess.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcess.Synchronize(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcess.Synchronize(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter">
 <summary>
 Batch Process Parameters.
 </summary>
<remarks>Data-source is 'BATCH_PARAM'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.Synchronize(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.Synchronize(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.RetrieveByUserCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for BatchProcessParameter class</returns>
 <remarks>Datasource is 'XIF2555BATCH_PARAM'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.RetrieveByBatchID(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for BatchProcessParameter class</returns>
 <remarks>Datasource is 'XIF2556BATCH_PARAM'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.Find(System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.Find(System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.Find(System.Int32,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.Find(System.Int32,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.ApplyChange(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="BatchProcessParameterItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.ApplyChange(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="BatchProcessParameterItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.Synchronize(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameterCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Schedule.BatchProcessParameter.Synchronize(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameterCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.CompoundKey">
<summary>
Compound Key.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.BatchID">
<summary>
ID number of the batch process.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.ExecutionStartingDate">
<summary>
Date of beginning of execution.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.ExecutionEndingDate">
<summary>
Date when the execution finishes.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.Status">
<summary>
Status of the execution of this process.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.ExecutedProcess">
<summary>
Executed process (Procedure + parameters).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.CreationDate">
<summary>
Date of creation of the process.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.OracleJob">
<summary>
Number of Job assigned by Oracle to the executed process.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.UserThatStartedTheProcess">
<summary>
Code of the user who starts the process.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.nSheet">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.ProcessParentKey">
<summary>
Key of the parent process.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.GeneratedFile">
<summary>
File generated by the process.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcess.sFile">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcessParameter.BatchID">
<summary>
ID number of the batch process.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcessParameter.UseOfThisParameter">
<summary>
Use of this parameter
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcessParameter.Sequence">
<summary>
Parameter sequential number.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcessParameter.NameOfParameter">
<summary>
Name of the parameter
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcessParameter.Description">
<summary>
Description of the parameter.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcessParameter.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Schedule.QueryStatement.BatchProcessParameter.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="T:InMotionGIT.General.DataAccess.Security.AuthorizationLevel">
 <summary>
 Authority levels by module and transaction.
 </summary>
<remarks>Data-source is 'LEVELS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.Synchronize(InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.Synchronize(InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.RetrieveByModuleOrTransaction(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AuthorizationLevel class</returns>
 <remarks>Datasource is 'XIF1993LEVELS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.RetrieveBySecuritySchemeCode(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for AuthorizationLevel class</returns>
 <remarks>Datasource is 'XIF347LEVELS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.Find(System.String,System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.Find(System.String,System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.Find(System.String,System.String,System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.Find(System.String,System.String,System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="AuthorizationLevelItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="AuthorizationLevelItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.Synchronize(InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevelCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.AuthorizationLevel.Synchronize(InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevelCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.String,System.String)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces">
 <summary>
 Access to offices and companies.
 </summary>
<remarks>Data-source is 'OFF_ACC'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.Synchronize(InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.Synchronize(InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.RetrieveByBranchOffice(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for BranchOfficeAcces class</returns>
 <remarks>Datasource is 'XIF373OFF_ACC'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.RetrieveBySecuritySchemeCode(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for BranchOfficeAcces class</returns>
 <remarks>Datasource is 'XIF346OFF_ACC'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="BranchOfficeAccesItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="BranchOfficeAccesItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.Synchronize(InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAccesCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.BranchOfficeAcces.Synchronize(InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAccesCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme">
 <summary>
 Currencies allowed in the security schema.
 </summary>
<remarks>Data-source is 'SCHEMA_CUR'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.RetrieveBySecuritySchemeCode(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for CurrencyAllowedByScheme class</returns>
 <remarks>Datasource is 'XIF349SCHEMA_CUR'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CurrencyAllowedBySchemeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="CurrencyAllowedBySchemeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedBySchemeCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.CurrencyAllowedByScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedBySchemeCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Security.User">
 <summary>
 Systems users.
 </summary>
<remarks>Data-source is 'USERS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.Synchronize(InMotionGIT.General.Entity.Contracts.Security.User,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.Synchronize(InMotionGIT.General.Entity.Contracts.Security.User,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Security.User,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.RetrieveByUserInitials(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for User class</returns>
 <remarks>Datasource is 'XIE1USERS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.RetrieveByDepartment(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for User class</returns>
 <remarks>Datasource is 'XIF1324USERS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.RetrieveByBranchOffice(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for User class</returns>
 <remarks>Datasource is 'XIF374USERS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.RetrieveByUserType(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for User class</returns>
 <remarks>Datasource is 'XIF1992USERS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.RetrieveBySecuritySchemeCode(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for User class</returns>
 <remarks>Datasource is 'XIF352USERS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for User class</returns>
 <remarks>Datasource is 'XIF1991USERS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.User,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="UserItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.User,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="UserItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.Synchronize(InMotionGIT.General.Entity.Contracts.Security.UserCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.User.Synchronize(InMotionGIT.General.Entity.Contracts.Security.UserCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme">
 <summary>
 Payment Request Concepts possible to use under a specific security scheme.
 </summary>
<remarks>Data-source is 'SCHE_PCON'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.RetrieveBySecuritySchemeCode(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PaymentRequestConceptByScheme class</returns>
 <remarks>Datasource is 'XIF1319SCHE_PCON'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.RetrieveByRequestReason(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for PaymentRequestConceptByScheme class</returns>
 <remarks>Datasource is 'XIF1980SCHE_PCON'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PaymentRequestConceptBySchemeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="PaymentRequestConceptBySchemeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptBySchemeCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.PaymentRequestConceptByScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptBySchemeCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.AuthorizationLevel.SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.AuthorizationLevel.ModuleOrTransaction">
<summary>
Module or transaction indicator.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.AuthorizationLevel.ModuleOrTransactionCode">
<summary>
Code of the Module/Transaction.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.AuthorizationLevel.MinimumSecurityLevel">
<summary>
Minimum updating level (security) that the user must have in order to execute the transaction update.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.AuthorizationLevel.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.AuthorizationLevel.InquirySecurityLevel">
<summary>
Minimum required security level for inquiry.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.AuthorizationLevel.SupervisionIndicator">
<summary>
Supervision indicator.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.AuthorizationLevel.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.AuthorizationLevel.Permitted">
<summary>
Allowed scheme indicator.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.BranchOfficeAcces.SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.BranchOfficeAcces.BranchOffice">
<summary>
Code of the Branch Office
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.BranchOfficeAcces.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.BranchOfficeAcces.InquiryIndicator">
<summary>
Inquiry indicator.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.BranchOfficeAcces.UpdateIndicator">
<summary>
Update indicator.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.BranchOfficeAcces.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.BranchOfficeAcces.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.CurrencyAllowedByScheme.SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.CurrencyAllowedByScheme.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.CurrencyAllowedByScheme.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.CurrencyAllowedByScheme.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.CurrencyAllowedByScheme.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.PaymentRequestConceptByScheme.SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.PaymentRequestConceptByScheme.RequestReason">
<summary>
Reason why The check is requested.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.PaymentRequestConceptByScheme.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.PaymentRequestConceptByScheme.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.PaymentRequestConceptByScheme.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.BranchOfficesAccess">
<summary>
Access to branch offices (indicator).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.EffectiveDate">
<summary>
Date as of which the security scheme becomes effective.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.EndingDate">
<summary>
Date up to which the security scheme will remain effective.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.AccessToForeignCurrencies">
<summary>
Indicator of access to foreign currencies
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.UnderwritingLimitsApply">
<summary>
It indicates that underwriting limits apply.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.Description">
<summary>
Complete description of the security scheme.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.SecurityLevel">
<summary>
Security level.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.ShortDescription">
<summary>
Short description of the security scheme.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.StartingTime1">
<summary>
Starting time for first daily period.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.EndingTime1">
<summary>
Ending time for first daily period.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.StartingTime2">
<summary>
Starting time for second daily period.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.EndingTime">
<summary>
Ending time for second daily period.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.QueryStartingTime1">
<summary>
Starting time for first query period.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.QueryEndingTime1">
<summary>
Ending time for first query period.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.QueryStartingTime2">
<summary>
Starting time for second query period.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.QueryEndingTime2">
<summary>
Ending time for second query period.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.QueryByExampleIndicator">
<summary>
Indicator of use of query by example
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.PaymentOrderRestriction">
<summary>
It indicates security restrictions for payment orders.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.DayLifeVersionOfQuotation">
<summary>
Day life of the stand alone version of the quotation, from the date of last update.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.SecurityScheme.DaysNoticeExpiryVersionQuotation">
<summary>
Days notice of expiry of the stand alone version of the quotation
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.TransactionsByScheme.SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.TransactionsByScheme.TransactionCode">
<summary>
Transaction code.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.TransactionsByScheme.Transaction">
<summary>
Transactions of policies and claims.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.TransactionsByScheme.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.TransactionsByScheme.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UnderwritingAndClaimLimit.SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UnderwritingAndClaimLimit.Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UnderwritingAndClaimLimit.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UnderwritingAndClaimLimit.ProductCode">
<summary>
Product to which the writing and claims limits are defined.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UnderwritingAndClaimLimit.LimitToRegisterClaims">
<summary>
Security limit to register claims.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UnderwritingAndClaimLimit.LimitToPayClaims">
<summary>
Security limit to pay claims.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UnderwritingAndClaimLimit.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UnderwritingAndClaimLimit.PolicySecurityLimit">
<summary>
Security limit for writing policies.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UnderwritingAndClaimLimit.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UnderwritingAndClaimLimit.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.Password">
<summary>
Password
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.BranchOffice">
<summary>
Code of the Branch Office
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.UserInitials">
<summary>
Initials of the user.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.UserType">
<summary>
Users type.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.Department">
<summary>
Code of the department.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.Menu">
<summary>
Code of the menu related to the transaction.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.PasswordChangeIsAllowed">
<summary>
Change of password allowed.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.NeverChangePasswordIndicator">
<summary>
Never change password indicator.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.NeverExpiresPasswordIndicator">
<summary>
Never expires password indicator.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.BlockedIndicator">
<summary>
Blocked Indicator.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.EffectiveDate">
<summary>
Initial date of the effective period
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.nOfficeAgen">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.Agency">
<summary>
Agency to which the user belongs.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.FailedLogonAttempts">
<summary>
Number of consecutive failed login attempts.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.User.PasswordExpires">
<summary>
Date of expiry of the password.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UserCashNumber.CashRegisterNumber">
<summary>
Number of the cash register related to the entry.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UserCashNumber.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UserCashNumber.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UserCashNumber.CashUserCode">
<summary>
Code of the user of the cash register.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UserCashNumber.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UserCashNumber.UserIDOfSupervisor">
<summary>
User ID supervising the cashier register.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UserCashNumber.Supervisor">
<summary>
User code of the supervisor of the cashier register.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.UserCashNumber.OfficeCode">
<summary>
Code of Office.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.WindowLogicalCode">
<summary>
Code of the window (logical code).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.MinimumSecurityLevel">
<summary>
Minimum updating level (security) that the user must have in order to execute the transaction update.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.WindowPhysicalCode">
<summary>
Code of the window (physical code).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.ImageID">
<summary>
Number of the image related to the transaction type (It is showed at main menu).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.Menu">
<summary>
Code of the Menu related to the transaction.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.Description">
<summary>
Transaction or window title.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.DirectExecution">
<summary>
The transaction can be executed directly
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.TableID">
<summary>
Number identifying the generic table updated by the transaction.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.InquirySecurityLevel">
<summary>
Minimum required security level for inquiry.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.Module">
<summary>
Code of the module.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.Alias">
<summary>
Mnemonic to be used to access the transaction.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.Sequence">
<summary>
Order in which the transaction appear in the menu.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.ShortDescription">
<summary>
Short description of the transaction.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.WindowType">
<summary>
Code of the window type.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.HelpFilePath">
<summary>
Path where the help file for the transaction is.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.Width">
<summary>
Width of the transaction header (ASP Version).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.AutomaticReportAtPolicyIssue">
<summary>
It indicates if the transaction corresponds to an automatic execution report during the policy/certificate issue.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.SQUOTE">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.NTYPE_REPORT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.Security.QueryStatement.WindowsSystem.SINDLETTER">
<summary>

</summary>
</member>
<member name="T:InMotionGIT.General.DataAccess.Security.SecurityScheme">
 <summary>
 General information of security schemes.
 </summary>
<remarks>Data-source is 'SECUR_SCHE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.SecurityScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.SecurityScheme,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.SecurityScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.SecurityScheme,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.SecurityScheme.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Security.SecurityScheme,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.SecurityScheme.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.SecurityScheme.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.SecurityScheme.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.SecurityScheme,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="SecuritySchemeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.SecurityScheme.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.SecurityScheme,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="SecuritySchemeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.SecurityScheme.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.SecurityScheme.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.SecurityScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.SecuritySchemeCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.SecurityScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.SecuritySchemeCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Security.TransactionsByScheme">
 <summary>
 Table of transactions / operations permitted for a security scheme.
 </summary>
<remarks>Data-source is 'SCHE_TRANSAC'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.RetrieveByUserCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransactionsByScheme class</returns>
 <remarks>Datasource is 'XIF2532SCHE_TRANSAC'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.RetrieveByTransactionCode(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransactionsByScheme class</returns>
 <remarks>Datasource is 'XIF2531SCHE_TRANSAC'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.RetrieveBySecuritySchemeCode(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for TransactionsByScheme class</returns>
 <remarks>Datasource is 'XIF2530SCHE_TRANSAC'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.Find(System.String,System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.Find(System.String,System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.Find(System.String,System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.Find(System.String,System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TransactionsBySchemeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="TransactionsBySchemeItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.TransactionsBySchemeCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.TransactionsByScheme.Synchronize(InMotionGIT.General.Entity.Contracts.Security.TransactionsBySchemeCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.String,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit">
 <summary>
 Limits underwriting and claims payment.
 </summary>
<remarks>Data-source is 'LIMITS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.Synchronize(InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.Synchronize(InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.RetrieveByLineOfBusiness(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UnderwritingAndClaimLimit class</returns>
 <remarks>Datasource is 'XIF1994LIMITS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.RetrieveBySecuritySchemeCode(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UnderwritingAndClaimLimit class</returns>
 <remarks>Datasource is 'XIF348LIMITS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.Find(System.String,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.Find(System.String,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.Find(System.String,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.Find(System.String,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.Find(System.String,System.Int32,System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.Find(System.String,System.Int32,System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="UnderwritingAndClaimLimitItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="UnderwritingAndClaimLimitItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.Synchronize(InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimitCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UnderwritingAndClaimLimit.Synchronize(InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimitCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Security.UserCashNumber">
 <summary>
 Table of user cash entry.
 </summary>
<remarks>Data-source is 'USER_CASHNUM'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.Synchronize(InMotionGIT.General.Entity.Contracts.Security.UserCashNumber,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.Synchronize(InMotionGIT.General.Entity.Contracts.Security.UserCashNumber,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Security.UserCashNumber,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.RetrieveByOfficeCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UserCashNumber class</returns>
 <remarks>Datasource is 'XIE1USER_CASHNUM'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.RetrieveByRecordStatus(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UserCashNumber class</returns>
 <remarks>Datasource is 'XIE2USER_CASHNUM'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.RetrieveByCashUserCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UserCashNumber class</returns>
 <remarks>Datasource is 'XIF1584USER_CASHNUM'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.RetrieveByUserCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UserCashNumber class</returns>
 <remarks>Datasource is 'XIF1585USER_CASHNUM'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.RetrieveByUserIDOfSupervisor(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UserCashNumber class</returns>
 <remarks>Datasource is 'XIF2294USER_CASHNUM'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.RetrieveBySupervisor(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for UserCashNumber class</returns>
 <remarks>Datasource is 'XIF2295USER_CASHNUM'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.UserCashNumber,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="UserCashNumberItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.UserCashNumber,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="UserCashNumberItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.Synchronize(InMotionGIT.General.Entity.Contracts.Security.UserCashNumberCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.UserCashNumber.Synchronize(InMotionGIT.General.Entity.Contracts.Security.UserCashNumberCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.Security.WindowsSystem">
 <summary>
 System windows/transactions.
 </summary>
<remarks>Data-source is 'WINDOWS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.Synchronize(InMotionGIT.General.Entity.Contracts.Security.WindowsSystem,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.Synchronize(InMotionGIT.General.Entity.Contracts.Security.WindowsSystem,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.Security.WindowsSystem,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.RetrieveByMenu(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for WindowsSystem class</returns>
 <remarks>Datasource is 'XIE1WINDOWS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.RetrieveByModule(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for WindowsSystem class</returns>
 <remarks>Datasource is 'XIF1995WINDOWS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.RetrieveByWindowType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for WindowsSystem class</returns>
 <remarks>Datasource is 'XIF1996WINDOWS'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.Find(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.Find(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.WindowsSystem,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="WindowsSystemItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.ApplyChange(InMotionGIT.General.Entity.Contracts.Security.WindowsSystem,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="WindowsSystemItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.Synchronize(InMotionGIT.General.Entity.Contracts.Security.WindowsSystemCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.Security.WindowsSystem.Synchronize(InMotionGIT.General.Entity.Contracts.Security.WindowsSystemCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder">
 <summary>
 Professional Service Orders.
 </summary>
<remarks>Data-source is 'PROF_ORD'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.Synchronize(InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.Synchronize(InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.RetrieveByRecordTypeLineOfBusinessProductCodePolicyIDCertificateID(System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ProfessionalServiceOrder class</returns>
 <remarks>Datasource is 'XIE1PROF_ORD'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.RetrieveByVendorCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ProfessionalServiceOrder class</returns>
 <remarks>Datasource is 'XIF205PROF_ORD'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.RetrieveByGarageShop(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ProfessionalServiceOrder class</returns>
 <remarks>Datasource is 'XIF2153PROF_ORD'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.RetrieveByOrderType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ProfessionalServiceOrder class</returns>
 <remarks>Datasource is 'XIF1405PROF_ORD'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.RetrieveByServiceOrderType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ProfessionalServiceOrder class</returns>
 <remarks>Datasource is 'XIF2048PROF_ORD'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.RetrieveBySourceOfTheServiceOrder(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ProfessionalServiceOrder class</returns>
 <remarks>Datasource is 'XIF1592PROF_ORD'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.RetrieveByStatus(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ProfessionalServiceOrder class</returns>
 <remarks>Datasource is 'XIF1404PROF_ORD'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.RetrieveByMunicipality(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ProfessionalServiceOrder class</returns>
 <remarks>Datasource is 'XIF1309PROF_ORD'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ProfessionalServiceOrder class</returns>
 <remarks>Datasource is 'XIF2152PROF_ORD'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.RetrieveByClaimIDClaimCodeClaimTypeClaimEntryNumber(System.Int64,System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for ProfessionalServiceOrder class</returns>
 <remarks>Datasource is 'XIF209PROF_ORD'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.Find(System.Int64)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.Find(System.Int64,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.ApplyChange(InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ProfessionalServiceOrderItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.ApplyChange(InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="ProfessionalServiceOrderItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.Synchronize(InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrderCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.ProfessionalServiceOrder.Synchronize(InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrderCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int64)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ServiceOrder">
<summary>
Number of the service order.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ClaimID">
<summary>
Claim number.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ClaimCode">
<summary>
Code of The Claim Case or Claimant.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ClaimType">
<summary>
Claim Type.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ClaimEntryNumber">
<summary>
Entry number related to a claim.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.Amount">
<summary>
Amount paid to the expert.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.CurrencyCode">
<summary>
Code of The Currency.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.DateOfPayment">
<summary>
Date of the payment.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ScheduledDate">
<summary>
Date when the service was scheduled.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.DateRendered">
<summary>
Date when the service was completed.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.VendorCode">
<summary>
Code of the vendor.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.TimeWhenCompleted">
<summary>
Time when the order was completed.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.Status">
<summary>
Status of the service order.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ScheduledTimeForTheService">
<summary>
Time when service was scheduled.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.GarageShop">
<summary>
Code of the garage (for motor vehicle claims).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.OrderType">
<summary>
Type of professional service order.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ServiceOrderNoteID">
<summary>
Number of the note related to the professional service order.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.SourceOfTheServiceOrder">
<summary>
Professional service order source.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ClientID">
<summary>
Client code identifying the vendor.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.Municipality">
<summary>
Code of the municipality for the inspection.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.GroupOfVendors">
<summary>
Vendors group code.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.sPlace">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.NFREIGHTAGE">
<summary>
Freight or cost of shipment (included in the recovered quotation).
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.NoteID">
<summary>
Note number containing the comments related to the inspection report.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.SendByPhysicalMail">
<summary>
It indicates that the order must be sent by mail.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ImageID">
<summary>
Image number related to the order.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ContactName">
<summary>
Contact name.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ContactAddress">
<summary>
Contact address.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.Phone">
<summary>
Contact telephone.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ServiceOrderType">
<summary>
Service order type to obtain costs.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.AssignmentDate">
<summary>
Assignment date of the service order to the person in charge of fulfill it.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.RecordDate">
<summary>
Date when the information was first entered into the system.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.DeductiblePaymentInGarageShop">
<summary>
Deductible payment indicator in the garage shop.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.VAT">
<summary>
Value Added Tax to apply in the budget.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.EndCostOfShipment">
<summary>
Cost of shipment.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.PartsAndMaterials">
<summary>
Amount corresponding to the value of parts and materials.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.LaborCost">
<summary>
Amount corresponding to the labor value.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.DeductibleAmount">
<summary>
Amount of the deductible value.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.Depreciation">
<summary>
Amount of the depreciation value.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.ProfessionalServiceOrder.ClasOrder">
<summary>
Class Order
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.Vendor.VendorCode">
<summary>
Code of the vendor.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.Vendor.VendorType">
<summary>
Type of vendor.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.Vendor.ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.Vendor.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.Vendor.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.Vendor.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.Vendor.RecordDate">
<summary>
Date when the information was first entered into the system.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.Vendor.EndingDate">
<summary>
Ending date of the vendor as valid in the system.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.Vendor.BranchOffice">
<summary>
Branch office to which the vendor belongs.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.Vendor.PendingOrdersPermitted">
<summary>
Maximum number of service orders with pending status permitted to a vendor.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.Vendor.SupportingDocument">
<summary>
Type of support document.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.Vendor.DiscountByVendor">
<summary>
Discount percent that the vendor grants.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.Vendor.Concessionaire">
<summary>
Indicator that the vendor is an auto concessionaire or distributor.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.VendorsZone.VendorCode">
<summary>
Code of the vendor.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.VendorsZone.Zone">
<summary>
Code of zone where the vendor can operate.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.VendorsZone.Order">
<summary>
Order or priority to operate in each municipality.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.VendorsZone.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.DataAccess.ServiceOrders.QueryStatement.VendorsZone.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="T:InMotionGIT.General.DataAccess.ServiceOrders.Vendor">
 <summary>
 Providers table.
 </summary>
<remarks>Data-source is 'TAB_PROVIDER'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.Synchronize(InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.Synchronize(InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.RetrieveByBranchOffice(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Vendor class</returns>
 <remarks>Datasource is 'XIF1672TAB_PROVIDER'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.RetrieveByVendorType(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Vendor class</returns>
 <remarks>Datasource is 'XIF492TAB_PROVIDER'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.RetrieveBySupportingDocument(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Vendor class</returns>
 <remarks>Datasource is 'XIF1301TAB_PROVIDER'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.RetrieveByClientID(System.String,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for Vendor class</returns>
 <remarks>Datasource is 'XIF244TAB_PROVIDER'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.ApplyChange(InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="VendorItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.ApplyChange(InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="VendorItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.Synchronize(InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.Vendor.Synchronize(InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone">
 <summary>
 Table of communities associated with a supplier.
 </summary>
<remarks>Data-source is 'TAB_PROV_ZONE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.Synchronize(InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.Synchronize(InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.SynchronizeChildren(InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone,System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.RetrieveByVendorCode(System.Int32,System.DateTime,System.String,System.Boolean,System.Int32)">
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="filter"></param>
 <returns>Collection for VendorsZone class</returns>
 <remarks>Datasource is 'XIF1673TAB_PROV_ZONE'.</remarks>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.Find(System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.Find(System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.Find(System.Int32,System.Int32)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.Find(System.Int32,System.Int32,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.ApplyChange(InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone,System.String,System.Boolean,System.DateTime)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="VendorsZoneItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.ApplyChange(InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone,System.String,System.Boolean,System.DateTime,System.String@)">
 <summary>
 Method that allows you to apply changes in class
 </summary>
 <param name="VendorsZoneItem">Instance to compare.</param>
 <param name="auditUserIdentify">This identifies the user making the change.</param>
 <param name="apply">Defines whether the object is affected for changes.</param>
 <param name="atDate">Defines the date of the call for history.</param>
 <param name="compareResult">Display results of changes between the two objects.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.FindByCondition(System.String)">
 <summary>
 Check if there is a record in the table using the primary key.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.FindByCondition(System.String,System.Data.Common.DbConnection)">
 <summary>
 Check if there is a record in the table using the primary key. It allows reuse of a connection to the database.
 </summary>
 <returns>True if the record exist or false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.Synchronize(InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZoneCollection,System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.DataAccess.ServiceOrders.VendorsZone.Synchronize(InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZoneCollection,System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
</members>
</doc>
