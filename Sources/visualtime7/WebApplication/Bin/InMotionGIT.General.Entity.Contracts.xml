<?xml version="1.0"?>
<doc>
<assembly>
<name>
InMotionGIT.General.Entity.Contracts
</name>
</assembly>
<members>
<member name="T:InMotionGIT.General.Entity.Contracts.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_1012_1">
<summary>
  Looks up a localized string similar to Campo número de edificio es obligatorio.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_1049">
<summary>
  Looks up a localized string similar to Pais, no esta registrado.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_1906">
<summary>
  Looks up a localized string similar to La dirección debe estar llena.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_1907">
<summary>
  Looks up a localized string similar to Campo ciudad es obligatorio.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_1910">
<summary>
  Looks up a localized string similar to El campo &quot;Región&quot; es obligatorio.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_1915">
<summary>
  Looks up a localized string similar to Si min. y/o seg. son &gt; 0, los grados deben estar entre 0-89.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_1916">
<summary>
  Looks up a localized string similar to Si los min. y/o seg. son &gt;0 los grd. deben estar entre 0-179.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_1917">
<summary>
  Looks up a localized string similar to La longitud debe estar en el rango 0-180.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_1970_1">
<summary>
  Looks up a localized string similar to Campo Municipalidad es obligatorio.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_55648_1">
<summary>
  Looks up a localized string similar to Campo PO Box es obligatorio.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_55738">
<summary>
  Looks up a localized string similar to Indicador de dirección de envío no puede estar marcado para más de una dirección.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_55739">
<summary>
  Looks up a localized string similar to La dirección de E-mail debe contener el caracter &quot;@&quot;.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_80012">
<summary>
  Looks up a localized string similar to La latitud debe estar comprendida entre un rango de 0 - 90 g.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_80013_1">
<summary>
  Looks up a localized string similar to Los min. de la longitud debe estar comprendido entre un rango de 0 - 60.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_80013_2">
<summary>
  Looks up a localized string similar to Los min. de la latitud debe estar comprendido entre un rango de 0 - 60.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_80014_1">
<summary>
  Looks up a localized string similar to Los seg de la longitud debe estar comprendido entre un rango de 0 - 60.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.My.Resources.Resources.Msg_80014_2">
<summary>
  Looks up a localized string similar to Los seg de la latitud debe estar comprendido entre un rango de 0 - 60.
</summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.Enumerations.EnumAddressChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Enumerations.EnumCoordinatesPosition.None">
 <summary>
 Desconocido
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.Enumerations.EnumTabSeisMicFloodZoneChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.Enumerations.EnumCityChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.Enumerations.EnumMunicipalityChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.Enumerations.EnumProvinceChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.Enumerations.EnumTypeAddressChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.Enumerations.EnumZipCodeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.Address">
 <summary>
 Addresses.
 </summary>
<remarks>Data-source is 'ADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.CreateNewAddress">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._RecordOwner">
<summary>
Owner of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._KeyToAddressRecord">
<summary>
Access Key of The Address Record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._TypeOfAddress">
<summary>
Type Of Address
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._StreetOrUrl">
<summary>
Address - Street - URL.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._Street">
<summary>
Address / Street.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._CityName">
<summary>
City/Location/Province.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._Email">
<summary>
Email address.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._LatitudeSeconds">
<summary>
Latitude of the address (Seconds)
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._LongitudeSeconds">
<summary>
Longitude of the address (Seconds)
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._LatitudeCoordinateGrades">
<summary>
Latitude coordinates of the address (Grades)
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._LonigitudeCoordinateGrades">
<summary>
Longitude coordinates of the address (grades)
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._PremiumFinancialAgreement">
<summary>
Code of the premium financial agreement related to the address.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._LatitudeCardinale">
<summary>
Latitude of the address with respect to the Equator
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._LatitudeMinutes">
<summary>
Latitude of the address (Minutes)
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._LongitudeCardinale">
<summary>
Longitude of the address with respect to Meridian 0
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._LongitudeMinutes">
<summary>
Longitud of the address (Minutes)
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._ClaimID">
<summary>
Claim number.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._ZipCode">
<summary>
Zip code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._LatitudeGrades">
<summary>
Latitude of the address (Grades)
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._Country">
<summary>
Code of the country.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._LongitudeGrades">
<summary>
Longitude of the address (grades)
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._BankAgency">
<summary>
Code of The Bank Agency.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._BankInternalCode">
<summary>
Internal code of the banking institution or the savings and lending institution.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._BranchOffice">
<summary>
Code of the Branch Office
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._StateOrProvince">
<summary>
Code of the state or province.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._CityCode">
<summary>
City code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._BuildingNumber">
<summary>
Number of the building in the street.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._MunicipalityCode">
<summary>
Code of the municipality.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._FloorNumber">
<summary>
Floor number
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._ApartmentNumber">
<summary>
Number of the apartment.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._Location">
<summary>
Village or town.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._MailingAddressIndicator">
<summary>
Indicator mailing documentation to the address registered
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._POBox">
<summary>
Post Office Box.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._CompleteAddress">
<summary>
Complete Address.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._Agree">
<summary>
Agree Code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._CostCenter">
<summary>
Cost center code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._NotInformeEMailCause">
<summary>
Indicates the justification for not to inform an email
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._LedgerProcessIndicator">
<summary>
Ledger process indicator
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._NTypeOfAddress">
<summary>
Type of address
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._ValidAddressIndicator">
<summary>
Valid address indicator
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._NDelegation">
<summary>
Code of the delegation.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._SSendMail">
<summary>
Indicator of correspondence by mail.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._SMail">
<summary>
Indicates that the address is used as a mail address.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._SBill">
<summary>
Indicates that the address is used as a collection address.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._NNormStatus">
<summary>
Code of normalization status.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._DNormDate">
<summary>
Effective date normalization.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._SZipCode">
<summary>
Zip code (Used in Argentina).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._SIndSentEmail">
<summary>
Send indicator of collection notice by email.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._SElevation">
<summary>
Elevation. Distance from the sea level.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Address._dEffecdateOld">
<summary>
pending
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.RecordOwner">
<summary>
Owner of the record. (NRECOWNER)..
</summary>
<remarks>Data-source is 'ADDRESS.NRECOWNER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.KeyToAddressRecord">
<summary>
Access Key of The Address Record. (SKEYADDRESS)..
</summary>
<remarks>Data-source is 'ADDRESS.SKEYADDRESS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.RecordEffectiveDate">
<summary>
Date from which the record is valid. (DEFFECDATE)..
</summary>
<remarks>Data-source is 'ADDRESS.DEFFECDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.TypeOfAddress">
<summary>
Type Of Address (SRECTYPE)..
</summary>
<remarks>Data-source is 'ADDRESS.SRECTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.TypeOfAddressEnum">
<summary>
Type Of Address
</summary>
<remarks>This property use a enumeration based on property 'TypeOfAddress'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.TypeOfAddressEnumText">
<summary>
Type Of Address
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.StreetOrUrl">
<summary>
Address - Street - URL. (SSTREET)..
</summary>
<remarks>Data-source is 'ADDRESS.SSTREET'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.Street">
<summary>
Address / Street. (SSTREET1)..
</summary>
<remarks>Data-source is 'ADDRESS.SSTREET1'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CityName">
<summary>
City/Location/Province. (SZONE)..
</summary>
<remarks>Data-source is 'ADDRESS.SZONE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.ClientID">
<summary>
Code of the client. (SCLIENT)..
</summary>
<remarks>Data-source is 'ADDRESS.SCLIENT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.RecordType">
<summary>
Type of Record. (SCERTYPE)..
</summary>
<remarks>Data-source is 'ADDRESS.SCERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.RecordTypeEnum">
<summary>
Type of Record.
</summary>
<remarks>This property use a enumeration based on property 'RecordType'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.RecordTypeEnumText">
<summary>
Type of Record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.Email">
<summary>
Email address. (SE_MAIL)..
</summary>
<remarks>Data-source is 'ADDRESS.SE_MAIL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'ADDRESS.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.LatitudeSeconds">
<summary>
Latitude of the address (Seconds) (NLAT_SECOND)..
</summary>
<remarks>Data-source is 'ADDRESS.NLAT_SECOND'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.LongitudeSeconds">
<summary>
Longitude of the address (Seconds) (NLON_SECOND)..
</summary>
<remarks>Data-source is 'ADDRESS.NLON_SECOND'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.LatitudeCoordinateGrades">
<summary>
Latitude coordinates of the address (Grades) (NLAT_COORD)..
</summary>
<remarks>Data-source is 'ADDRESS.NLAT_COORD'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.LonigitudeCoordinateGrades">
<summary>
Longitude coordinates of the address (grades) (NLON_COORD)..
</summary>
<remarks>Data-source is 'ADDRESS.NLON_COORD'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.PremiumFinancialAgreement">
<summary>
Code of the premium financial agreement related to the address. (NCONTRAT)..
</summary>
<remarks>Data-source is 'ADDRESS.NCONTRAT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.LatitudeCardinale">
<summary>
Latitude of the address with respect to the Equator (NLAT_CARDIN)..
</summary>
<remarks>Data-source is 'ADDRESS.NLAT_CARDIN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.LatitudeMinutes">
<summary>
Latitude of the address (Minutes) (NLAT_MINUTE)..
</summary>
<remarks>Data-source is 'ADDRESS.NLAT_MINUTE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.LongitudeCardinale">
<summary>
Longitude of the address with respect to Meridian 0 (NLON_CARDIN)..
</summary>
<remarks>Data-source is 'ADDRESS.NLON_CARDIN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.LongitudeMinutes">
<summary>
Longitud of the address (Minutes) (NLON_MINUTE)..
</summary>
<remarks>Data-source is 'ADDRESS.NLON_MINUTE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CertificateID">
<summary>
Number identifying the certificate. (NCERTIF)..
</summary>
<remarks>Data-source is 'ADDRESS.NCERTIF'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.ClaimID">
<summary>
Claim number. (NCLAIM)..
</summary>
<remarks>Data-source is 'ADDRESS.NCLAIM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application. (NPOLICY)..
</summary>
<remarks>Data-source is 'ADDRESS.NPOLICY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.ZipCode">
<summary>
Zip code. (NZIP_CODE)..
</summary>
<remarks>Data-source is 'ADDRESS.NZIP_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.LatitudeGrades">
<summary>
Latitude of the address (Grades) (NLAT_GRADE)..
</summary>
<remarks>Data-source is 'ADDRESS.NLAT_GRADE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.Country">
<summary>
Code of the country. (NCOUNTRY)..
</summary>
<remarks>Data-source is 'ADDRESS.NCOUNTRY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.LongitudeGrades">
<summary>
Longitude of the address (grades) (NLON_GRADE)..
</summary>
<remarks>Data-source is 'ADDRESS.NLON_GRADE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'ADDRESS.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.BankAgency">
<summary>
Code of The Bank Agency. (NBK_AGENCY)..
</summary>
<remarks>Data-source is 'ADDRESS.NBK_AGENCY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.BankInternalCode">
<summary>
Internal code of the banking institution or the savings and lending institution. (NBANK_CODE)..
</summary>
<remarks>Data-source is 'ADDRESS.NBANK_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.LineOfBusiness">
<summary>
Code of the line of business. (NBRANCH)..
</summary>
<remarks>Data-source is 'ADDRESS.NBRANCH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.BranchOffice">
<summary>
Code of the Branch Office (NOFFICE)..
</summary>
<remarks>Data-source is 'ADDRESS.NOFFICE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.StateOrProvince">
<summary>
Code of the state or province. (NPROVINCE)..
</summary>
<remarks>Data-source is 'ADDRESS.NPROVINCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.ProductCode">
<summary>
Code of the product. (NPRODUCT)..
</summary>
<remarks>Data-source is 'ADDRESS.NPRODUCT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CityCode">
<summary>
City code. (NLOCAL)..
</summary>
<remarks>Data-source is 'ADDRESS.NLOCAL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CancellationDate">
<summary>
Date when the record is cancelled. (DNULLDATE)..
</summary>
<remarks>Data-source is 'ADDRESS.DNULLDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.BuildingNumber">
<summary>
Number of the building in the street. (SBUILD)..
</summary>
<remarks>Data-source is 'ADDRESS.SBUILD'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.MunicipalityCode">
<summary>
Code of the municipality. (NMUNICIPALITY)..
</summary>
<remarks>Data-source is 'ADDRESS.NMUNICIPALITY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.FloorNumber">
<summary>
Floor number (NFLOOR)..
</summary>
<remarks>Data-source is 'ADDRESS.NFLOOR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.ApartmentNumber">
<summary>
Number of the apartment. (SDEPARTMENT)..
</summary>
<remarks>Data-source is 'ADDRESS.SDEPARTMENT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.Location">
<summary>
Village or town. (SPOPULATION)..
</summary>
<remarks>Data-source is 'ADDRESS.SPOPULATION'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.MailingAddressIndicator">
<summary>
Indicator mailing documentation to the address registered (SINFOR)..
</summary>
<remarks>Data-source is 'ADDRESS.SINFOR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.POBox">
<summary>
Post Office Box. (SPOBOX)..
</summary>
<remarks>Data-source is 'ADDRESS.SPOBOX'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CompleteAddress">
<summary>
Complete Address. (SDESCADD)..
</summary>
<remarks>Data-source is 'ADDRESS.SDESCADD'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.Agree">
<summary>
Agree Code (NCOD_AGREE)..
</summary>
<remarks>Data-source is 'ADDRESS.NCOD_AGREE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CostCenter">
<summary>
Cost center code (SCOSTCENTER)..
</summary>
<remarks>Data-source is 'ADDRESS.SCOSTCENTER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.NotInformeEMailCause">
<summary>
Indicates the justification for not to inform an email (NNOTINFORMEMAIL)..
</summary>
<remarks>Data-source is 'ADDRESS.NNOTINFORMEMAIL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.LedgerProcessIndicator">
<summary>
Ledger process indicator (SLEDGERPROCESS)..
</summary>
<remarks>Data-source is 'ADDRESS.SLEDGERPROCESS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.NTypeOfAddress">
<summary>
Type of address.
</summary>
<remarks>Data-source is 'ADDRESS.NTYPEOFADDRESS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.ValidAddressIndicator">
<summary>
Valid address indicator (SINVALID_IND)..
</summary>
<remarks>Data-source is 'ADDRESS.SINVALID_IND'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.NDelegation">
<summary>
Code of the delegation..
</summary>
<remarks>Data-source is 'ADDRESS.NDELEGATION'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.SSendMail">
<summary>
Indicator of correspondence by mail. (SSEND_MAIL)..
</summary>
<remarks>Data-source is 'ADDRESS.SSEND_MAIL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.SMail">
<summary>
Indicates that the address is used as a mail address..
</summary>
<remarks>Data-source is 'ADDRESS.SMAIL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.SBill">
<summary>
Indicates that the address is used as a collection address..
</summary>
<remarks>Data-source is 'ADDRESS.SBILL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.NNormStatus">
<summary>
Code of normalization status..
</summary>
<remarks>Data-source is 'ADDRESS.NNORMSTATUS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.DNormDate">
<summary>
Effective date normalization..
</summary>
<remarks>Data-source is 'ADDRESS.DNORMDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.SZipCode">
<summary>
Zip code (Used in Argentina). (SZIP_CODE)..
</summary>
<remarks>Data-source is 'ADDRESS.SZIP_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.SIndSentEmail">
<summary>
Send indicator of collection notice by email..
</summary>
<remarks>Data-source is 'ADDRESS.SINDSENTEMAIL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.SElevation">
<summary>
Elevation. Distance from the sea level..
</summary>
<remarks>Data-source is 'ADDRESS.SELEVATION'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.Compare(InMotionGIT.General.Entity.Contracts.Address.Address,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="AddressItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CustomString">
 <summary>
 Extensibility custom string property.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CustomStringEx">
 <summary>
 Extensibility custom string ex property.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CustomNumeric">
 <summary>
 Extensibility custom decimal property.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CustomNumericEx">
 <summary>
 Extensibility custom decimal ex property.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CustomDate">
 <summary>
 Extensibility custom date property.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CustomDateEx">
 <summary>
 Extensibility custom date ex property.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CustomBoolean">
 <summary>
 Extensibility custom boolean property.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CustomBooleanEx">
 <summary>
 Extensibility custom boolean ex property.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Address.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Address.CountryDescription">
 <summary>
 Code of the country.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE66'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.AddressCollection">
 <summary>
 Collection for Address class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.AddressCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.AddressCollection.AddAddress">
 <summary>
 Add an instance of class 'Address' in the AddressCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.AddressCollection.Compare(InMotionGIT.General.Entity.Contracts.Address.AddressCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.AddressCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.AddressCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.AddressCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone">
 <summary>
 
 </summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.CreateNewTabSeisMicFloodZone">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._ZipCode">
<summary>
Zip Code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._GeographicalDistribution1">
<summary>
Code of the first level of the geographical distribution of the country
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._GeographicalDistribution2">
<summary>
Code of the second level of the geographical distribution of the country
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._GeographicalDistribution3">
<summary>
Code of the third level of the geographical distribution of the country
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._SeismicZone">
<summary>
Seismic Zone
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._DeductibleBySeismicZone">
<summary>
Deductible according to seismic zone
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._CoinsuranceBySeismicZone">
<summary>
Coinsurance according to seismic zone
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._FloodZone">
<summary>
Flood zone
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._DeductibleByFloodZone">
<summary>
Deductible according to flood zone
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._CoinsuranceByFloodZone">
<summary>
Coinsurance according to flood zone
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._NRATEEARTQUAKE">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone._NRATEFLOOD">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.ZipCode">
<summary>
Zip Code. (NZIP_CODE)..
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.NZIP_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.GeographicalDistribution1">
<summary>
Code of the first level of the geographical distribution of the country (NGEOGRAPHICZONE1)..
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.NGEOGRAPHICZONE1'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.GeographicalDistribution2">
<summary>
Code of the second level of the geographical distribution of the country (NGEOGRAPHICZONE2)..
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.NGEOGRAPHICZONE2'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.GeographicalDistribution3">
<summary>
Code of the third level of the geographical distribution of the country (NGEOGRAPHICZONE3)..
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.NGEOGRAPHICZONE3'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.SeismicZone">
<summary>
Seismic Zone (NSEISMICZONE)..
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.NSEISMICZONE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.DeductibleBySeismicZone">
<summary>
Deductible according to seismic zone (NDEDUSEISMICZONE)..
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.NDEDUSEISMICZONE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.CoinsuranceBySeismicZone">
<summary>
Coinsurance according to seismic zone (NCOASSEISMICZONE)..
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.NCOASSEISMICZONE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.FloodZone">
<summary>
Flood zone (NZONETYPE)..
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.NZONETYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.DeductibleByFloodZone">
<summary>
Deductible according to flood zone (NDEDUZONETYPE)..
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.NDEDUZONETYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.CoinsuranceByFloodZone">
<summary>
Coinsurance according to flood zone (NCOASZONETYPE)..
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.NCOASZONETYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.RecordStatus">
<summary>
Status of the record. (SSTATREGT)..
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.RecordStatusEnum">
<summary>
Status of the record.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.RecordStatusEnumText">
<summary>
Status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.NRATEEARTQUAKE">
<summary>
.
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.NRATEEARTQUAKE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.NRATEFLOOD">
<summary>
.
</summary>
<remarks>Data-source is 'TABSEISMICFLOODZONE.NRATEFLOOD'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.Compare(InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabSeisMicFloodZoneItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZone.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZoneCollection">
 <summary>
 Collection for TabSeisMicFloodZone class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZoneCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZoneCollection.AddTabSeisMicFloodZone">
 <summary>
 Add an instance of class 'TabSeisMicFloodZone' in the TabSeisMicFloodZoneCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZoneCollection.Compare(InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZoneCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZoneCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZoneCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TabSeisMicFloodZoneCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.City">
 <summary>
 Cities of a country.
 </summary>
<remarks>Data-source is 'TAB_LOCAT'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.CreateNewCity">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.City._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.City._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.City._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.City._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.City._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.City._CityCode">
<summary>
City code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.City._Description">
<summary>
Description of the town
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.City._StateOrProvince">
<summary>
Code of the state or province.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.City._ShortDescription">
<summary>
Short description of the town
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.City._Location">
<summary>
Code of the location.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.City._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.City._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.City._CountyCode">
<summary>
Code of the country.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.CityCode">
<summary>
City code. (NLOCAL)..
</summary>
<remarks>Data-source is 'TAB_LOCAT.NLOCAL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.Description">
<summary>
Description of the town (SDESCRIPT)..
</summary>
<remarks>Data-source is 'TAB_LOCAT.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.StateOrProvince">
<summary>
Code of the state or province. (NPROVINCE)..
</summary>
<remarks>Data-source is 'TAB_LOCAT.NPROVINCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.ShortDescription">
<summary>
Short description of the town (SSHORT_DES)..
</summary>
<remarks>Data-source is 'TAB_LOCAT.SSHORT_DES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.Location">
<summary>
Code of the location. (SLEGAL_LOC)..
</summary>
<remarks>Data-source is 'TAB_LOCAT.SLEGAL_LOC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'TAB_LOCAT.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'TAB_LOCAT.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.CountyCode">
<summary>
Code of the country. (NCOUNTRY)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'TAB_LOCAT.NCOUNTRY'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.Compare(InMotionGIT.General.Entity.Contracts.Address.City,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="CityItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.City.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.City.CountyCodeDescription">
 <summary>
 Code of the country.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE66'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.CityCollection">
 <summary>
 Collection for City class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.CityCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.CityCollection.AddCity">
 <summary>
 Add an instance of class 'City' in the CityCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.CityCollection.Compare(InMotionGIT.General.Entity.Contracts.Address.CityCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.CityCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.CityCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.CityCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.Municipality">
 <summary>
 Municipality / town
 </summary>
<remarks>Data-source is 'MUNICIPALITY'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.CreateNewMunicipality">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Municipality._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Municipality._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Municipality._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Municipality._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Municipality._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Municipality._MunicipalityCode">
<summary>
Code of the municipality.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Municipality._CityCode">
<summary>
Code from the city to which the municipality belongs.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Municipality._Description">
<summary>
Description of the code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Municipality._ShortDescription">
<summary>
Short description of the code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Municipality._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Municipality._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Municipality._CountyCode">
<summary>
Code of the country.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Municipality._StateOrProvince">
<summary>
Code of the state or province.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Municipality.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Municipality.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Municipality.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Municipality.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Municipality.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Municipality.MunicipalityCode">
<summary>
Code of the municipality. (NMUNICIPALITY)..
</summary>
<remarks>Data-source is 'MUNICIPALITY.NMUNICIPALITY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Municipality.CityCode">
<summary>
Code from the city to which the municipality belongs. (NLOCAL)..
</summary>
<remarks>Data-source is 'MUNICIPALITY.NLOCAL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Municipality.Description">
<summary>
Description of the code. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'MUNICIPALITY.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Municipality.ShortDescription">
<summary>
Short description of the code. (SSHORT_DES)..
</summary>
<remarks>Data-source is 'MUNICIPALITY.SSHORT_DES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Municipality.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'MUNICIPALITY.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Municipality.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'MUNICIPALITY.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Municipality.CountyCode">
<summary>
Code of the country. (NCOUNTRY)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'MUNICIPALITY.NCOUNTRY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Municipality.StateOrProvince">
<summary>
Code of the state or province. (NPROVINCE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'MUNICIPALITY.NPROVINCE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.Compare(InMotionGIT.General.Entity.Contracts.Address.Municipality,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="MunicipalityItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Municipality.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.MunicipalityCollection">
 <summary>
 Collection for Municipality class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.MunicipalityCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.MunicipalityCollection.AddMunicipality">
 <summary>
 Add an instance of class 'Municipality' in the MunicipalityCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.MunicipalityCollection.Compare(InMotionGIT.General.Entity.Contracts.Address.MunicipalityCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.MunicipalityCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.MunicipalityCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.MunicipalityCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.Province">
 <summary>
 Particular information about provinces and states of a country.
 </summary>
<remarks>Data-source is 'PROVINCE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.CreateNewProvince">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._StateOrProvince">
<summary>
Code of the state or province.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._Description">
<summary>
Description of the province.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._ShortDescription">
<summary>
Short description of the province.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._ProvinceCode">
<summary>
Code of the province
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._Country">
<summary>
Code of the country
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._NTAX_RATE">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._Province">
<summary>
Particular information about provinces and states of a country.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.Province._Cities">
<summary>
Cities of a country.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.StateOrProvince">
<summary>
Code of the state or province. (NPROVINCE)..
</summary>
<remarks>Data-source is 'PROVINCE.NPROVINCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.Description">
<summary>
Description of the province. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'PROVINCE.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.ShortDescription">
<summary>
Short description of the province. (SSHORT_DES)..
</summary>
<remarks>Data-source is 'PROVINCE.SSHORT_DES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.ProvinceCode">
<summary>
Code of the province (NDGI_CODE)..
</summary>
<remarks>Data-source is 'PROVINCE.NDGI_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'PROVINCE.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'PROVINCE.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.Country">
<summary>
Code of the country (NCOUNTRY)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROVINCE.NCOUNTRY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.NTAX_RATE">
<summary>
.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROVINCE.NTAX_RATE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.NewProvinceInstance">
<summary>
Initializes the 'Province' instance.
</summary>
 <returns>The 'Province' class instance.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.Province">
<summary>
Particular information about provinces and states of a country. collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.NewCitiesInstance">
<summary>
Initializes the 'Cities' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.NewCityItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Cities', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'City' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.Cities">
<summary>
Cities of a country. collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.Compare(InMotionGIT.General.Entity.Contracts.Address.Province,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ProvinceItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.Province.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.Province.CountryDescription">
 <summary>
 Code of the country
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE66'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.ProvinceCollection">
 <summary>
 Collection for Province class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ProvinceCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ProvinceCollection.AddProvince">
 <summary>
 Add an instance of class 'Province' in the ProvinceCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ProvinceCollection.Compare(InMotionGIT.General.Entity.Contracts.Address.ProvinceCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ProvinceCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ProvinceCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ProvinceCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.TypeAddress">
 <summary>
 Types of addresses associated with the owner of record.
 </summary>
<remarks>Data-source is 'TAB_TYPADDRESS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.CreateNewTypeAddress">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TypeAddress._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TypeAddress._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TypeAddress._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TypeAddress._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TypeAddress._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TypeAddress._AddressType">
<summary>
Type of address.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TypeAddress._RecordOwner">
<summary>
Owner of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TypeAddress._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.TypeAddress._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.AddressType">
<summary>
Type of address. (NTYPEOFADDRESS)..
</summary>
<remarks>Data-source is 'TAB_TYPADDRESS.NTYPEOFADDRESS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.RecordOwner">
<summary>
Owner of the record. (NRECOWNER)..
</summary>
<remarks>Data-source is 'TAB_TYPADDRESS.NRECOWNER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'TAB_TYPADDRESS.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'TAB_TYPADDRESS.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.Compare(InMotionGIT.General.Entity.Contracts.Address.TypeAddress,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TypeAddressItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.AddressTypeDescription">
 <summary>
 Type of address.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE6000'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TypeAddress.RecordOwnerDescription">
 <summary>
 Owner of the record.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE3019'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.TypeAddressCollection">
 <summary>
 Collection for TypeAddress class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddressCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddressCollection.AddTypeAddress">
 <summary>
 Add an instance of class 'TypeAddress' in the TypeAddressCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddressCollection.Compare(InMotionGIT.General.Entity.Contracts.Address.TypeAddressCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.TypeAddressCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddressCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.TypeAddressCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.ZipCode">
 <summary>
 Zip codes.
 </summary>
<remarks>Data-source is 'ZIP_CODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.CreateNewZipCode">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._ZipCodeNumber">
<summary>
Zip code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._Country">
<summary>
Code of the country
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._Province">
<summary>
Code of the state
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._City">
<summary>
Code of the city
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._Municipality">
<summary>
Code of the municipality
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._Zipcode">
<summary>
Zip code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._CatastrophicEvent">
<summary>
Code of catastrophic event.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._SeismicArea">
<summary>
Code of the seismic area.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._HurricaneZone">
<summary>
Zone of Hurricane.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._PeakArea">
<summary>
Indicates the geographic peak area.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._RiskAreas">
<summary>
Indicates another&#39;s risk areas.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._MinimumSalaryArea">
<summary>
Indicates the minimal salary area.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._NMUNICIPALITYSB">
<summary>
NMUNICIPALITYSB
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._NPROVINCESB">
<summary>
NPROVINCESB
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Address.ZipCode._SSTATREGT">
<summary>
SSTATREGT
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.ZipCodeNumber">
<summary>
Zip code. (NZIP_CODE)..
</summary>
<remarks>Data-source is 'ZIP_CODE.NZIP_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'ZIP_CODE.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'ZIP_CODE.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.Country">
<summary>
Code of the country (NCOUNTRY)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.NCOUNTRY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.Province">
<summary>
Code of the state (NPROVINCE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.NPROVINCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.City">
<summary>
Code of the city (NLOCAL)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.NLOCAL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.Municipality">
<summary>
Code of the municipality (NMUNICIPALITY)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.NMUNICIPALITY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.Zipcode">
<summary>
Zip code (SZIP_CODE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.SZIP_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.CatastrophicEvent">
<summary>
Code of catastrophic event. (NIDCATAS)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.NIDCATAS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.SeismicArea">
<summary>
Code of the seismic area. (NSEISMICCODE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.NSEISMICCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.HurricaneZone">
<summary>
Zone of Hurricane. (NHURRICAN_ZONE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.NHURRICAN_ZONE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.PeakArea">
<summary>
Indicates the geographic peak area. (NPEAKAREA)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.NPEAKAREA'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.RiskAreas">
<summary>
Indicates another&#39;s risk areas. (NRISKAREA)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.NRISKAREA'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.MinimumSalaryArea">
<summary>
Indicates the minimal salary area. (NMINSALARY)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.NMINSALARY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.NMUNICIPALITYSB">
<summary>
NMUNICIPALITYSB.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.NMUNICIPALITYSB'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.NPROVINCESB">
<summary>
NPROVINCESB.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.NPROVINCESB'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.SSTATREGT">
<summary>
SSTATREGT.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'ZIP_CODE.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.SSTATREGTEnum">
<summary>
SSTATREGT
</summary>
<remarks>This property use a enumeration based on property 'SSTATREGT'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.SSTATREGTEnumText">
<summary>
SSTATREGT
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.Compare(InMotionGIT.General.Entity.Contracts.Address.ZipCode,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ZipCodeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCode.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.CatastrophicEventDescription">
 <summary>
 Code of catastrophic event.
 </summary>
 <remarks>
 This property is associated with the field 'TABLE1507' on the table 'TABLE1507'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.SeismicAreaDescription">
 <summary>
 Code of the seismic area.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE7047'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.HurricaneZoneDescription">
 <summary>
 Zone of Hurricane.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE6036'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.PeakAreaDescription">
 <summary>
 Indicates the geographic peak area.
 </summary>
 <remarks>
 This property is associated with the field 'TABLE1502' on the table 'TABLE1502'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.RiskAreasDescription">
 <summary>
 Indicates another&#39;s risk areas.
 </summary>
 <remarks>
 This property is associated with the field 'TABLE1504' on the table 'TABLE1504'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCode.MinimumSalaryAreaDescription">
 <summary>
 Indicates the minimal salary area.
 </summary>
 <remarks>
 This property is associated with the field 'TABLE1503' on the table 'TABLE1503'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Address.ZipCodeCollection">
 <summary>
 Collection for ZipCode class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCodeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCodeCollection.AddZipCode">
 <summary>
 Add an instance of class 'ZipCode' in the ZipCodeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCodeCollection.Compare(InMotionGIT.General.Entity.Contracts.Address.ZipCodeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Address.ZipCodeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCodeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Address.ZipCodeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Errors.Enumerations.EnumErrorStatus">
 <summary>
 Error status.
 </summary>
 <remarks>Source Table999. Error status.</remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Errors.Enumerations.EnumPriority">
 <summary>
 Priority/Error importance level/Amendment required into the system.
 </summary>
 <remarks>Source Table1006.</remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Errors.Enumerations.EnumComponentModifiedByCorrectionChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Errors.Enumerations.EnumErrorHistoryChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Errors.Enumerations.EnumSystemErrorChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection">
 <summary>
 Modified VTime components for the correction of an error.
 </summary>
<remarks>Data-source is 'ERR_COMP'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.CreateNewComponentModifiedByCorrection">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._Sequence">
<summary>
Consecutive number identifying the record as sole.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._ErrorNumber">
<summary>
Error number.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._ConsecutiveNumber">
<summary>
Consecutive number identifying the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._TypeOfComponent">
<summary>
Type of component of software.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._Component">
<summary>
Software component.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._ComponentPath">
<summary>
Component path.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._Version">
<summary>
Version number of the component in VisualTIME DB.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._DateSentToQC">
<summary>
Date when the component was sent to Quality Control
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._DateSentToQA">
<summary>
Date when the component was sent to Quality Assurance
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.Sequence">
<summary>
Consecutive number identifying the record as sole. (NSEQ)..
</summary>
<remarks>Data-source is 'ERR_COMP.NSEQ'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.ErrorNumber">
<summary>
Error number. (NERRORNUM)..
</summary>
<remarks>Data-source is 'ERR_COMP.NERRORNUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.ConsecutiveNumber">
<summary>
Consecutive number identifying the record. (NID)..
</summary>
<remarks>Data-source is 'ERR_COMP.NID'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.TypeOfComponent">
<summary>
Type of component of software. (NCOMPTYPE)..
</summary>
<remarks>Data-source is 'ERR_COMP.NCOMPTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.Component">
<summary>
Software component. (SCOMPNAME)..
</summary>
<remarks>Data-source is 'ERR_COMP.SCOMPNAME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.ComponentPath">
<summary>
Component path. (SCOMPPATH)..
</summary>
<remarks>Data-source is 'ERR_COMP.SCOMPPATH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.Version">
<summary>
Version number of the component in VisualTIME DB. (NCOMPVERS)..
</summary>
<remarks>Data-source is 'ERR_COMP.NCOMPVERS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.DateSentToQC">
<summary>
Date when the component was sent to Quality Control (DTOQC)..
</summary>
<remarks>Data-source is 'ERR_COMP.DTOQC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.DateSentToQA">
<summary>
Date when the component was sent to Quality Assurance (DTOQA)..
</summary>
<remarks>Data-source is 'ERR_COMP.DTOQA'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'ERR_COMP.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'ERR_COMP.DCOMPDATE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.Compare(InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ComponentModifiedByCorrectionItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrection.TypeOfComponentDescription">
 <summary>
 Type of component of software.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE998'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrectionCollection">
 <summary>
 Collection for ComponentModifiedByCorrection class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrectionCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrectionCollection.AddComponentModifiedByCorrection">
 <summary>
 Add an instance of class 'ComponentModifiedByCorrection' in the ComponentModifiedByCorrectionCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrectionCollection.Compare(InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrectionCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrectionCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrectionCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ComponentModifiedByCorrectionCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory">
 <summary>
 History of an program error.
 </summary>
<remarks>Data-source is 'ERR_HISTOR'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.CreateNewErrorHistory">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._ErrorNumber">
<summary>
Error number.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._ConsecutiveNumber">
<summary>
Consecutive number to use as record key.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._ErrorStatus">
<summary>
Status of the error.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._DateOfStatus">
<summary>
Date when the record took its current status.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._TimeOfStatus">
<summary>
Time in which the error takes the actual status.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._ResponsibleUser">
<summary>
Responsible user.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._Time">
<summary>
Hour and minutes stored in hhmm format.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._Days">
<summary>
Number of days to correct or confirm the error.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.ErrorNumber">
<summary>
Error number. (NERRORNUM)..
</summary>
<remarks>Data-source is 'ERR_HISTOR.NERRORNUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.ConsecutiveNumber">
<summary>
Consecutive number to use as record key. (NCONSECUT)..
</summary>
<remarks>Data-source is 'ERR_HISTOR.NCONSECUT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.ErrorStatus">
<summary>
Status of the error. (SSTAT_ERROR)..
</summary>
<remarks>Data-source is 'ERR_HISTOR.SSTAT_ERROR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.DateOfStatus">
<summary>
Date when the record took its current status. (DDATE)..
</summary>
<remarks>Data-source is 'ERR_HISTOR.DDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.TimeOfStatus">
<summary>
Time in which the error takes the actual status. (SHOUR)..
</summary>
<remarks>Data-source is 'ERR_HISTOR.SHOUR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.ResponsibleUser">
<summary>
Responsible user. (SUSER)..
</summary>
<remarks>Data-source is 'ERR_HISTOR.SUSER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.Time">
<summary>
Hour and minutes stored in hhmm format. (SHOUR_USER)..
</summary>
<remarks>Data-source is 'ERR_HISTOR.SHOUR_USER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.Days">
<summary>
Number of days to correct or confirm the error. (NDAYS_USER)..
</summary>
<remarks>Data-source is 'ERR_HISTOR.NDAYS_USER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'ERR_HISTOR.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'ERR_HISTOR.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.Compare(InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ErrorHistoryItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistory.ErrorStatusDescription">
 <summary>
 Status of the error.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE999'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistoryCollection">
 <summary>
 Collection for ErrorHistory class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistoryCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistoryCollection.AddErrorHistory">
 <summary>
 Add an instance of class 'ErrorHistory' in the ErrorHistoryCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistoryCollection.Compare(InMotionGIT.General.Entity.Contracts.Errors.ErrorHistoryCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistoryCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistoryCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.ErrorHistoryCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Errors.SystemError">
 <summary>
 Functional errors found into the system.
 </summary>
<remarks>Data-source is 'ERRORS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.CreateNewSystemError">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._ErrorNumber">
<summary>
Error number.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._WindowPhysicalCode">
<summary>
Code of the window (physical code).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._WindowLogicalCode">
<summary>
Code of the window (logical code).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._DateOfAssignment">
<summary>
Date when the error is assigned.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._ShortDescription">
<summary>
Short description of the program error.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._FreeText">
<summary>
Free text (Error description).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._Priority">
<summary>
Priority of the error.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._Source">
<summary>
Code specifying the source of the error.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._Status">
<summary>
Status of the error.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._UserAssignedToCorrectError">
<summary>
User assigned to correct the error.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._Version">
<summary>
Number of the Version in which the Error is detected.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._Module">
<summary>
Code of module to which the error belongs.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._Severity">
<summary>
Severity code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._CorrectionTrasnferredToUsersEnvironmet">
<summary>
It indicates that the error correction was transferred to users environment.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._ErrorType">
<summary>
Type of error.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Errors.SystemError._ErrorHistories">
<summary>
History of an program error.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.ErrorNumber">
<summary>
Error number. (NERRORNUM)..
</summary>
<remarks>Data-source is 'ERRORS.NERRORNUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.WindowPhysicalCode">
<summary>
Code of the window (physical code). (SCODISP)..
</summary>
<remarks>Data-source is 'ERRORS.SCODISP'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.WindowLogicalCode">
<summary>
Code of the window (logical code). (SCODISPL)..
</summary>
<remarks>Data-source is 'ERRORS.SCODISPL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.DateOfAssignment">
<summary>
Date when the error is assigned. (DDAT_ASSIGN)..
</summary>
<remarks>Data-source is 'ERRORS.DDAT_ASSIGN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.ShortDescription">
<summary>
Short description of the program error. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'ERRORS.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.FreeText">
<summary>
Free text (Error description). (TDS_TEXT)..
</summary>
<remarks>Data-source is 'ERRORS.TDS_TEXT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.Priority">
<summary>
Priority of the error. (NPRIORITY)..
</summary>
<remarks>Data-source is 'ERRORS.NPRIORITY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.PriorityEnum">
<summary>
Priority of the error.
</summary>
<remarks>This property use a enumeration based on property 'Priority'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.PriorityEnumText">
<summary>
Priority of the error.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.Source">
<summary>
Code specifying the source of the error. (NSOURCE)..
</summary>
<remarks>Data-source is 'ERRORS.NSOURCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.Status">
<summary>
Status of the error. (SSTAT_ERROR)..
</summary>
<remarks>Data-source is 'ERRORS.SSTAT_ERROR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.StatusEnum">
<summary>
Status of the error.
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.StatusEnumText">
<summary>
Status of the error.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.UserAssignedToCorrectError">
<summary>
User assigned to correct the error. (SUSE_ASSIGN)..
</summary>
<remarks>Data-source is 'ERRORS.SUSE_ASSIGN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.Version">
<summary>
Number of the Version in which the Error is detected. (SVERSION)..
</summary>
<remarks>Data-source is 'ERRORS.SVERSION'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.Module">
<summary>
Code of module to which the error belongs. (NMODULE_ERR)..
</summary>
<remarks>Data-source is 'ERRORS.NMODULE_ERR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.Severity">
<summary>
Severity code. (NSEVERITY)..
</summary>
<remarks>Data-source is 'ERRORS.NSEVERITY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.CorrectionTrasnferredToUsersEnvironmet">
<summary>
It indicates that the error correction was transferred to users environment. (STRANSFER)..
</summary>
<remarks>Data-source is 'ERRORS.STRANSFER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.ErrorType">
<summary>
Type of error. (NTYPE_ERR)..
</summary>
<remarks>Data-source is 'ERRORS.NTYPE_ERR'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.NewErrorHistoriesInstance">
<summary>
Initializes the 'ErrorHistories' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.NewErrorHistoryItem(System.Boolean)">
<summary>
Add a new item to the collection of 'ErrorHistories', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'ErrorHistory' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.ErrorHistories">
<summary>
History of an program error. collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.Compare(InMotionGIT.General.Entity.Contracts.Errors.SystemError,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="SystemErrorItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemError.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.PriorityDescription">
 <summary>
 Priority of the error.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE1006'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.SourceDescription">
 <summary>
 Code specifying the source of the error.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE531'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.StatusDescription">
 <summary>
 Status of the error.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE999'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.ModuleDescription">
 <summary>
 Code of module to which the error belongs.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE997'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemError.SeverityDescription">
 <summary>
 Severity code.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE6014'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Errors.SystemErrorCollection">
 <summary>
 Collection for SystemError class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemErrorCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemErrorCollection.AddSystemError">
 <summary>
 Add an instance of class 'SystemError' in the SystemErrorCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemErrorCollection.Compare(InMotionGIT.General.Entity.Contracts.Errors.SystemErrorCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Errors.SystemErrorCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemErrorCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Errors.SystemErrorCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.Enumerations.EnumFundAllowedBySwitchChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.Enumerations.EnumFundStockMovementChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.Enumerations.EnumFundValueChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.Enumerations.EnumInvestmentFundChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.Enumerations.EnumInvestmentFundRelatedToProductChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch">
 <summary>
 
 </summary>
<remarks>Data-source is 'FUNDS_SWITCH'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.CreateNewFundAllowedBySwitch">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch._SourceAccount">
<summary>
Code of the source account (values
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch._InvestmentFundCodeInput">
<summary>
Investment Fund Code - Input
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch._InvestmentFundCodeOutput">
<summary>
Investment Fund Code - Output
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch._Generalstatusoftherecord">
<summary>
General status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.SourceAccount">
<summary>
Code of the source account (values (NORIGIN)..
</summary>
<remarks>Data-source is 'FUNDS_SWITCH.NORIGIN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.InvestmentFundCodeInput">
<summary>
Investment Fund Code - Input (NTOFUNDS)..
</summary>
<remarks>Data-source is 'FUNDS_SWITCH.NTOFUNDS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.InvestmentFundCodeOutput">
<summary>
Investment Fund Code - Output (NFROMFUNDS)..
</summary>
<remarks>Data-source is 'FUNDS_SWITCH.NFROMFUNDS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.Generalstatusoftherecord">
<summary>
General status of the record. (NSTATREGT)..
</summary>
<remarks>Data-source is 'FUNDS_SWITCH.NSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.GeneralstatusoftherecordEnum">
<summary>
General status of the record.
</summary>
<remarks>This property use a enumeration based on property 'Generalstatusoftherecord'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.GeneralstatusoftherecordEnumText">
<summary>
General status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'FUNDS_SWITCH.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'FUNDS_SWITCH.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.Compare(InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="FundAllowedBySwitchItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.SourceAccountDescription">
 <summary>
 Code of the source account (values
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE5633'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitch.GeneralstatusoftherecordDescription">
 <summary>
 General status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE26'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitchCollection">
 <summary>
 Collection for FundAllowedBySwitch class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitchCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitchCollection.AddFundAllowedBySwitch">
 <summary>
 Add an instance of class 'FundAllowedBySwitch' in the FundAllowedBySwitchCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitchCollection.Compare(InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitchCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitchCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitchCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundAllowedBySwitchCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement">
 <summary>
 Stock Movements of funds.
 </summary>
<remarks>Data-source is 'FUND_STOCK'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.CreateNewFundStockMovement">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement._InvestmentFund">
<summary>
Code of the investment fund.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement._TypeOfEntry">
<summary>
Type of entry (buy/sale).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement._EntryID">
<summary>
Number identifying the stock entry.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement._RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement._Units">
<summary>
Number of investment units.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.InvestmentFund">
<summary>
Code of the investment fund. (NFUNDS)..
</summary>
<remarks>Data-source is 'FUND_STOCK.NFUNDS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.TypeOfEntry">
<summary>
Type of entry (buy/sale). (NMOVE_TYPE)..
</summary>
<remarks>Data-source is 'FUND_STOCK.NMOVE_TYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.EntryID">
<summary>
Number identifying the stock entry. (NNUM_MOV)..
</summary>
<remarks>Data-source is 'FUND_STOCK.NNUM_MOV'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'FUND_STOCK.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.RecordEffectiveDate">
<summary>
Date from which the record is valid. (DEFFECDATE)..
</summary>
<remarks>Data-source is 'FUND_STOCK.DEFFECDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.Units">
<summary>
Number of investment units. (NUNITS)..
</summary>
<remarks>Data-source is 'FUND_STOCK.NUNITS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'FUND_STOCK.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.Compare(InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="FundStockMovementItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovement.TypeOfEntryDescription">
 <summary>
 Type of entry (buy/sale).
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE415'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovementCollection">
 <summary>
 Collection for FundStockMovement class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovementCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovementCollection.AddFundStockMovement">
 <summary>
 Add an instance of class 'FundStockMovement' in the FundStockMovementCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovementCollection.Compare(InMotionGIT.General.Entity.Contracts.Funds.FundStockMovementCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovementCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovementCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundStockMovementCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.FundValue">
 <summary>
 Nominal value of investment fund units.
 </summary>
<remarks>Data-source is 'FUND_VALUE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.CreateNewFundValue">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundValue._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundValue._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundValue._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundValue._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundValue._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundValue._InvestmentFund">
<summary>
Code of the investment fund.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundValue._RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundValue._Amount">
<summary>
Nominal value of each investment unit.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundValue._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundValue._Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundValue._CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundValue._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.FundValue._dEffecdateOld">
<summary>
pending
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundValue.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundValue.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundValue.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundValue.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundValue.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundValue.InvestmentFund">
<summary>
Code of the investment fund. (NFUNDS)..
</summary>
<remarks>Data-source is 'FUND_VALUE.NFUNDS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundValue.RecordEffectiveDate">
<summary>
Date from which the record is valid. (DEFFECDATE)..
</summary>
<remarks>Data-source is 'FUND_VALUE.DEFFECDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundValue.Amount">
<summary>
Nominal value of each investment unit. (NAMOUNT)..
</summary>
<remarks>Data-source is 'FUND_VALUE.NAMOUNT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundValue.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'FUND_VALUE.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundValue.Currency">
<summary>
Code of The Currency. (NCURRENCY)..
</summary>
<remarks>Data-source is 'FUND_VALUE.NCURRENCY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundValue.CancellationDate">
<summary>
Date when the record is cancelled. (DNULLDATE)..
</summary>
<remarks>Data-source is 'FUND_VALUE.DNULLDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundValue.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'FUND_VALUE.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.Compare(InMotionGIT.General.Entity.Contracts.Funds.FundValue,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="FundValueItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValue.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.FundValueCollection">
 <summary>
 Collection for FundValue class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValueCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValueCollection.AddFundValue">
 <summary>
 Add an instance of class 'FundValue' in the FundValueCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValueCollection.Compare(InMotionGIT.General.Entity.Contracts.Funds.FundValueCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.FundValueCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValueCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.FundValueCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund">
 <summary>
 Investment funds available in the enterprise.
 </summary>
<remarks>Data-source is 'FUND_INV'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.CreateNewInvestmentFund">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._Fund">
<summary>
Code of the investment fund.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._dCompdate">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._sDescript">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._FundAvailableUnits">
<summary>
Number of units available in the fund (The policy entries don&#39;t affect this value).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._MaximumNumberOfUnits">
<summary>
Maximum number of units.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._DateOfIngress">
<summary>
Date when the information was first entered into the system.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._MinimumNumberOfUnits">
<summary>
Minimum number of units.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._CountryBelongingFunds">
<summary>
Country belonging to investment funds.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._FundSeries">
<summary>
Fund series
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._FundRun">
<summary>
Run of the fund
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._NLIQTYPEFUND">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._FundStockMovements">
<summary>
Stock Movements of funds.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund._FundValue">
<summary>
Nominal value of investment fund units.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.Fund">
<summary>
Code of the investment fund. (NFUNDS)..
</summary>
<remarks>Data-source is 'FUND_INV.NFUNDS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.dCompdate">
<summary>
.
</summary>
<remarks>Data-source is 'FUND_INV.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.sDescript">
<summary>
.
</summary>
<remarks>Data-source is 'FUND_INV.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.FundAvailableUnits">
<summary>
Number of units available in the fund (The policy entries don&#39;t affect this value). (NQUAN_AVAIL)..
</summary>
<remarks>Data-source is 'FUND_INV.NQUAN_AVAIL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.MaximumNumberOfUnits">
<summary>
Maximum number of units. (NQUAN_MAX)..
</summary>
<remarks>Data-source is 'FUND_INV.NQUAN_MAX'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.DateOfIngress">
<summary>
Date when the information was first entered into the system. (DINPDATE)..
</summary>
<remarks>Data-source is 'FUND_INV.DINPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.MinimumNumberOfUnits">
<summary>
Minimum number of units. (NQUAN_MIN)..
</summary>
<remarks>Data-source is 'FUND_INV.NQUAN_MIN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.RecordStatus">
<summary>
Status of the record. (SSTATREGT)..
</summary>
<remarks>Data-source is 'FUND_INV.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.RecordStatusEnum">
<summary>
Status of the record.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.RecordStatusEnumText">
<summary>
Status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'FUND_INV.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.CountryBelongingFunds">
<summary>
Country belonging to investment funds. (NCOUNTRY)..
</summary>
<remarks>Data-source is 'FUND_INV.NCOUNTRY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.FundSeries">
<summary>
Fund series (NSERIES)..
</summary>
<remarks>Data-source is 'FUND_INV.NSERIES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.FundRun">
<summary>
Run of the fund (NRUN)..
</summary>
<remarks>Data-source is 'FUND_INV.NRUN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.NLIQTYPEFUND">
<summary>
.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'FUND_INV.NLIQTYPEFUND'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.NewFundStockMovementsInstance">
<summary>
Initializes the 'FundStockMovements' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.NewFundStockMovementItem(System.Boolean)">
<summary>
Add a new item to the collection of 'FundStockMovements', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'FundStockMovement' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.FundStockMovements">
<summary>
Stock Movements of funds. collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.NewFundValueInstance">
<summary>
Initializes the 'FundValue' instance.
</summary>
 <returns>The 'FundValue' class instance.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.FundValue">
<summary>
Nominal value of investment fund units. collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.Compare(InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="InvestmentFundItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFund.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundCollection">
 <summary>
 Collection for InvestmentFund class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundCollection.AddInvestmentFund">
 <summary>
 Add an instance of class 'InvestmentFund' in the InvestmentFundCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundCollection.Compare(InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct">
 <summary>
 Associated investment funds to a product.
 </summary>
<remarks>Data-source is 'FUNDS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.CreateNewInvestmentFundRelatedToProduct">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._InvestmentFund">
<summary>
Code of the investment fund.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._SourceAccount">
<summary>
Code of the source account (Values
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._BuyingCommission">
<summary>
Percentage to charge (commission) when purchasing units.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._MinimumSharePercentage">
<summary>
Minimum percentage of share in the fund.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._PercentageShare">
<summary>
Percentage of share in the fund.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._PercentageForUnitSells">
<summary>
Percentage to charge for sale of units.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._ProjectedProfitability">
<summary>
Projected profitability
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._ProjectedHighPerformanceAdvisor">
<summary>
Projected High Performance Advisor
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._ProjectedNetReturn">
<summary>
Projected net return
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._FundisRestrictedForSaleIndicator">
<summary>
Indicates if the fund is restricted for sale.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._MaximumSharePercentage">
<summary>
Maximum percentage of share in the fund
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._MinimunAmountToleftinTheFund">
<summary>
Minimum amount to be left in the fund
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._FreeLookFlag">
<summary>
Free Look Flag
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct._dEffecdateOld">
<summary>
pending
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.LineOfBusiness">
<summary>
Code of the line of business. (NBRANCH)..
</summary>
<remarks>Data-source is 'FUNDS.NBRANCH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.ProductCode">
<summary>
Code of the product. (NPRODUCT)..
</summary>
<remarks>Data-source is 'FUNDS.NPRODUCT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.InvestmentFund">
<summary>
Code of the investment fund. (NFUNDS)..
</summary>
<remarks>Data-source is 'FUNDS.NFUNDS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.SourceAccount">
<summary>
Code of the source account (Values (NORIGIN)..
</summary>
<remarks>Data-source is 'FUNDS.NORIGIN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.RecordEffectiveDate">
<summary>
Date from which the record is valid. (DEFFECDATE)..
</summary>
<remarks>Data-source is 'FUNDS.DEFFECDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.BuyingCommission">
<summary>
Percentage to charge (commission) when purchasing units. (NBUY_COST)..
</summary>
<remarks>Data-source is 'FUNDS.NBUY_COST'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'FUNDS.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.CancellationDate">
<summary>
Date when the record is cancelled. (DNULLDATE)..
</summary>
<remarks>Data-source is 'FUNDS.DNULLDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.MinimumSharePercentage">
<summary>
Minimum percentage of share in the fund. (NPARTIC_MIN)..
</summary>
<remarks>Data-source is 'FUNDS.NPARTIC_MIN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.PercentageShare">
<summary>
Percentage of share in the fund. (NPARTICIP)..
</summary>
<remarks>Data-source is 'FUNDS.NPARTICIP'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.PercentageForUnitSells">
<summary>
Percentage to charge for sale of units. (NSELL_COST)..
</summary>
<remarks>Data-source is 'FUNDS.NSELL_COST'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'FUNDS.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.ProjectedProfitability">
<summary>
Projected profitability (NINTPROY)..
</summary>
<remarks>Data-source is 'FUNDS.NINTPROY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.ProjectedHighPerformanceAdvisor">
<summary>
Projected High Performance Advisor (NINTPROYVARMAX)..
</summary>
<remarks>Data-source is 'FUNDS.NINTPROYVARMAX'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.ProjectedNetReturn">
<summary>
Projected net return (NINTPROYVARCLE)..
</summary>
<remarks>Data-source is 'FUNDS.NINTPROYVARCLE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.FundisRestrictedForSaleIndicator">
<summary>
Indicates if the fund is restricted for sale. (SVIGEN)..
</summary>
<remarks>Data-source is 'FUNDS.SVIGEN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.MaximumSharePercentage">
<summary>
Maximum percentage of share in the fund (NPARTIC_MAX)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'FUNDS.NPARTIC_MAX'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.MinimunAmountToleftinTheFund">
<summary>
Minimum amount to be left in the fund (NAMOUNTMIN)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'FUNDS.NAMOUNTMIN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.FreeLookFlag">
<summary>
Free Look Flag (NFREELOOK)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'FUNDS.NFREELOOK'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.Compare(InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="InvestmentFundRelatedToProductItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProduct.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProductCollection">
 <summary>
 Collection for InvestmentFundRelatedToProduct class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProductCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProductCollection.AddInvestmentFundRelatedToProduct">
 <summary>
 Add an instance of class 'InvestmentFundRelatedToProduct' in the InvestmentFundRelatedToProductCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProductCollection.Compare(InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProductCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProductCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProductCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Funds.InvestmentFundRelatedToProductCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumAutomaticSystemTaskChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumCompanyChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumComunicationBuChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumContractServiceChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumCurrencyExchangeRateChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumExternalservicescontractChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumFORMATVALUEChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumHolidayChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumHollidayChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumLoansLifeInsuranceChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumOriginCodeOfLetterChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumParticularDataAttributeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumPolicyInstallationChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumPrintingDocumentChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumPrintParameterChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumProcessStatusChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumRelationBetweenOfficeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumSystemInstallationChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumUserMessageChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Enumerations.EnumNumeratorChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask">
 <summary>
 Control of automatic system tasks
 </summary>
<remarks>Data-source is 'CTROL_SCHEDULER'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.CreateNewAutomaticSystemTask">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask._ProcessId">
<summary>
Process ID
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask._ProcessDescription">
<summary>
Process description
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask._ProcessStatus">
<summary>
Status of the process
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask._ExecutionProcess">
<summary>
Execution process
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask._User">
<summary>
UserCode
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.ProcessId">
<summary>
Process ID (NID_PROCESS)..
</summary>
<remarks>Data-source is 'CTROL_SCHEDULER.NID_PROCESS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.ProcessDescription">
<summary>
Process description (SDESCRIPT)..
</summary>
<remarks>Data-source is 'CTROL_SCHEDULER.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.ProcessStatus">
<summary>
Status of the process (SSTATREGT)..
</summary>
<remarks>Data-source is 'CTROL_SCHEDULER.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.ProcessStatusEnum">
<summary>
Status of the process
</summary>
<remarks>This property use a enumeration based on property 'ProcessStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.ProcessStatusEnumText">
<summary>
Status of the process
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.ExecutionProcess">
<summary>
Execution process (SINPROGRESS)..
</summary>
<remarks>Data-source is 'CTROL_SCHEDULER.SINPROGRESS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.User">
<summary>
UserCode (NUSERCODE)..
</summary>
<remarks>Data-source is 'CTROL_SCHEDULER.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.ComputersDate">
<summary>
Date of the computer (DCOMPDATE)..
</summary>
<remarks>Data-source is 'CTROL_SCHEDULER.DCOMPDATE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.Compare(InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="AutomaticSystemTaskItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTask.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTaskCollection">
 <summary>
 Collection for AutomaticSystemTask class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTaskCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTaskCollection.AddAutomaticSystemTask">
 <summary>
 Add an instance of class 'AutomaticSystemTask' in the AutomaticSystemTaskCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTaskCollection.Compare(InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTaskCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTaskCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTaskCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.AutomaticSystemTaskCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Company">
 <summary>
 Information about companies.
 </summary>
<remarks>Data-source is 'COMPANY'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.CreateNewCompany">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._Company">
<summary>
Code of the company.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._BankAccount">
<summary>
Number of the bank account.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._BankName">
<summary>
Name of the bank for payment agreements.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._Country">
<summary>
Code of the country where the principal office of the company is located.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._DateOfIngress">
<summary>
Date when the information was first entered into the system.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._WithholdingTaxRate">
<summary>
Tax percentage to be withheld from the producer.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._CompanyType">
<summary>
Company Type.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._OfficialInscription">
<summary>
Number of inscription in the Insurance Superintendence.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._NationalCompany">
<summary>
National company indicator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Company._CompanyClassification">
<summary>
Company Classification.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.Company">
<summary>
Code of the company. (NCOMPANY)..
</summary>
<remarks>Data-source is 'COMPANY.NCOMPANY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.BankAccount">
<summary>
Number of the bank account. (SACCOUNT)..
</summary>
<remarks>Data-source is 'COMPANY.SACCOUNT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.ClientID">
<summary>
Code of the client. (SCLIENT)..
</summary>
<remarks>Data-source is 'COMPANY.SCLIENT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.BankName">
<summary>
Name of the bank for payment agreements. (SBANKNAME)..
</summary>
<remarks>Data-source is 'COMPANY.SBANKNAME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'COMPANY.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.Country">
<summary>
Code of the country where the principal office of the company is located. (NCOUNTRY)..
</summary>
<remarks>Data-source is 'COMPANY.NCOUNTRY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.DateOfIngress">
<summary>
Date when the information was first entered into the system. (DINPDATE)..
</summary>
<remarks>Data-source is 'COMPANY.DINPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.RecordStatus">
<summary>
Status of the record. (SSTATREGT)..
</summary>
<remarks>Data-source is 'COMPANY.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.RecordStatusEnum">
<summary>
Status of the record.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.RecordStatusEnumText">
<summary>
Status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.WithholdingTaxRate">
<summary>
Tax percentage to be withheld from the producer. (NTAXRATE)..
</summary>
<remarks>Data-source is 'COMPANY.NTAXRATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.CompanyType">
<summary>
Company Type. (STYPE)..
</summary>
<remarks>Data-source is 'COMPANY.STYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.OfficialInscription">
<summary>
Number of inscription in the Insurance Superintendence. (SREGSVS)..
</summary>
<remarks>Data-source is 'COMPANY.SREGSVS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'COMPANY.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.NationalCompany">
<summary>
National company indicator. (SNATIONAL)..
</summary>
<remarks>Data-source is 'COMPANY.SNATIONAL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.CompanyClassification">
<summary>
Company Classification. (NCLASIFIC)..
</summary>
<remarks>Data-source is 'COMPANY.NCLASIFIC'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.Compare(InMotionGIT.General.Entity.Contracts.General.Company,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="CompanyItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Company.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Company.CompanyClassificationDescription">
 <summary>
 Company Classification.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE5563'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.CompanyCollection">
 <summary>
 Collection for Company class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CompanyCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CompanyCollection.AddCompany">
 <summary>
 Add an instance of class 'Company' in the CompanyCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CompanyCollection.Compare(InMotionGIT.General.Entity.Contracts.General.CompanyCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.CompanyCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CompanyCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CompanyCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.ComunicationBu">
 <summary>
 Ways of sending or receiving information.
 </summary>
<remarks>Data-source is 'TABLE8201'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.CreateNewComunicationBu">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ComunicationBu._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ComunicationBu._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ComunicationBu._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ComunicationBu._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ComunicationBu._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ComunicationBu._CommunicationBus">
<summary>
Communication Bus code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ComunicationBu._Code">
<summary>
Code of the record status.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ComunicationBu._UpdateTimeStamp">
<summary>
Computer date Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ComunicationBu._Description">
<summary>
Bus Description.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ComunicationBu._ShortDescription">
<summary>
Bus Short description
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ComunicationBu._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.CommunicationBus">
<summary>
Communication Bus code. (NBUS)..
</summary>
<remarks>Data-source is 'TABLE8201.NBUS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.Code">
<summary>
Code of the record status. (SSTATREGT)..
</summary>
<remarks>Data-source is 'TABLE8201.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.CodeEnum">
<summary>
Code of the record status.
</summary>
<remarks>This property use a enumeration based on property 'Code'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.CodeEnumText">
<summary>
Code of the record status.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.UpdateTimeStamp">
<summary>
Computer date Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'TABLE8201.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.Description">
<summary>
Bus Description. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'TABLE8201.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.ShortDescription">
<summary>
Bus Short description (SSHORT_DES)..
</summary>
<remarks>Data-source is 'TABLE8201.SSHORT_DES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'TABLE8201.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.Compare(InMotionGIT.General.Entity.Contracts.General.ComunicationBu,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ComunicationBuItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBu.CodeDescription">
 <summary>
 Code of the record status.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE26'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.ComunicationBuCollection">
 <summary>
 Collection for ComunicationBu class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBuCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBuCollection.AddComunicationBu">
 <summary>
 Add an instance of class 'ComunicationBu' in the ComunicationBuCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBuCollection.Compare(InMotionGIT.General.Entity.Contracts.General.ComunicationBuCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ComunicationBuCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBuCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ComunicationBuCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.ContractService">
 <summary>
 Contract Services
 </summary>
<remarks>Data-source is 'ProviderContractServices'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.CreateNewContractService">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._VendorCode">
<summary>
Code of the vendor.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._ContractIdentification">
<summary>
Contract identification
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._EffectiveDate">
<summary>
Effective Date of the register
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._TypeOfService">
<summary>
Type of service
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._DateWhenRecordCancelled">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._User">
<summary>
UserCode
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ContractService._dEffecdateOld">
<summary>
pending
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.VendorCode">
<summary>
Code of the vendor. (NPROVIDER)..
</summary>
<remarks>Data-source is 'ProviderContractServices.NPROVIDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.ContractIdentification">
<summary>
Contract identification (sContract)..
</summary>
<remarks>Data-source is 'ProviderContractServices.sContract'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.EffectiveDate">
<summary>
Effective Date of the register (dEffecDate)..
</summary>
<remarks>Data-source is 'ProviderContractServices.dEffecDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.TypeOfService">
<summary>
Type of service (nTypeOfService)..
</summary>
<remarks>Data-source is 'ProviderContractServices.nTypeOfService'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.DateWhenRecordCancelled">
<summary>
Date when the record is cancelled. (dNullDate)..
</summary>
<remarks>Data-source is 'ProviderContractServices.dNullDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.Status">
<summary>
Register status (sStatregt)..
</summary>
<remarks>Data-source is 'ProviderContractServices.sStatregt'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.ComputersDate">
<summary>
Date of the computer (dCompDate)..
</summary>
<remarks>Data-source is 'ProviderContractServices.dCompDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.User">
<summary>
UserCode (nUserCode)..
</summary>
<remarks>Data-source is 'ProviderContractServices.nUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.Compare(InMotionGIT.General.Entity.Contracts.General.ContractService,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ContractServiceItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractService.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractService.TypeOfServiceDescription">
 <summary>
 Type of service
 </summary>
 <remarks>
 This property is associated with the field 'TABLE6815' on the table 'TABLE6815'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.ContractServiceCollection">
 <summary>
 Collection for ContractService class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractServiceCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractServiceCollection.AddContractService">
 <summary>
 Add an instance of class 'ContractService' in the ContractServiceCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractServiceCollection.Compare(InMotionGIT.General.Entity.Contracts.General.ContractServiceCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ContractServiceCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractServiceCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ContractServiceCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate">
 <summary>
 Exchange rate of a currency.
 </summary>
<remarks>Data-source is 'EXCHANGE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.CreateNewCurrencyExchangeRate">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate._Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate._RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate._ExchangeRate">
<summary>
Exchange rate of the entry to the local currency.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate._CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate._dEffecdateOld">
<summary>
pending
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.Currency">
<summary>
Code of The Currency. (NCURRENCY)..
</summary>
<remarks>Data-source is 'EXCHANGE.NCURRENCY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.RecordEffectiveDate">
<summary>
Date from which the record is valid. (DEFFECDATE)..
</summary>
<remarks>Data-source is 'EXCHANGE.DEFFECDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'EXCHANGE.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.ExchangeRate">
<summary>
Exchange rate of the entry to the local currency. (NEXCHANGE)..
</summary>
<remarks>Data-source is 'EXCHANGE.NEXCHANGE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.CancellationDate">
<summary>
Date when the record is cancelled. (DNULLDATE)..
</summary>
<remarks>Data-source is 'EXCHANGE.DNULLDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'EXCHANGE.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.Compare(InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="CurrencyExchangeRateItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRate.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRateCollection">
 <summary>
 Collection for CurrencyExchangeRate class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRateCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRateCollection.AddCurrencyExchangeRate">
 <summary>
 Add an instance of class 'CurrencyExchangeRate' in the CurrencyExchangeRateCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRateCollection.Compare(InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRateCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRateCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRateCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.CurrencyExchangeRateCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.GenericTable.CreateNewTableGenericTable">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.GenericTable.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.GenericTable._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.GenericTable._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.GenericTable._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.GenericTable._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.GenericTable._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.GenericTable.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.GenericTable.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.GenericTable.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.GenericTable.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.GenericTable.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.GenericTable.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.GenericTable.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.GenericTable.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.GenericTable.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.GenericTableCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.GenericTableCollection.AddTable">
 <summary>
 Add an instance of class 'GenericTable' in the GenericTableCollection.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.GenericTableCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.GenericTableCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.GenericTableCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract">
 <summary>
 External services contracts
 </summary>
<remarks>Data-source is 'ProviderContract'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.CreateNewExternalservicescontract">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._VendorCode">
<summary>
Code of the vendor.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._ContractIdentification">
<summary>
Contract identification
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._EffectiveDate">
<summary>
Effective Date of the register
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._CurrencyCode">
<summary>
Code of The Currency
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._CapitaAmount">
<summary>
Capita amount
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._Description">
<summary>
Description
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._DateWhenRecordCancelled">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._User">
<summary>
UserCode
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._dEffecdateOld">
<summary>
pending
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract._ContractServicess">
<summary>
Contract Services
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.VendorCode">
<summary>
Code of the vendor. (NPROVIDER)..
</summary>
<remarks>Data-source is 'ProviderContract.NPROVIDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.ContractIdentification">
<summary>
Contract identification (sContract)..
</summary>
<remarks>Data-source is 'ProviderContract.sContract'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.EffectiveDate">
<summary>
Effective Date of the register (dEffecDate)..
</summary>
<remarks>Data-source is 'ProviderContract.dEffecDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.CurrencyCode">
<summary>
Code of The Currency (nCurrency)..
</summary>
<remarks>Data-source is 'ProviderContract.nCurrency'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.CapitaAmount">
<summary>
Capita amount (nCapitaAmount)..
</summary>
<remarks>Data-source is 'ProviderContract.nCapitaAmount'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.Description">
<summary>
Description (sDescript)..
</summary>
<remarks>Data-source is 'ProviderContract.sDescript'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.DateWhenRecordCancelled">
<summary>
Date when the record is cancelled. (dNullDate)..
</summary>
<remarks>Data-source is 'ProviderContract.dNullDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.Status">
<summary>
Register status (sStatregt)..
</summary>
<remarks>Data-source is 'ProviderContract.sStatregt'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.ComputersDate">
<summary>
Date of the computer (dCompDate)..
</summary>
<remarks>Data-source is 'ProviderContract.dCompDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.User">
<summary>
UserCode (nUserCode)..
</summary>
<remarks>Data-source is 'ProviderContract.nUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.NewContractServicessInstance">
<summary>
Initializes the 'ContractServicess' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.NewContractServiceItem(System.Boolean)">
<summary>
Add a new item to the collection of 'ContractServicess', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'ContractService' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.ContractServicess">
<summary>
Contract Services collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.Compare(InMotionGIT.General.Entity.Contracts.General.Externalservicescontract,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ExternalservicescontractItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Externalservicescontract.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.ExternalservicescontractCollection">
 <summary>
 Collection for Externalservicescontract class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ExternalservicescontractCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ExternalservicescontractCollection.AddExternalservicescontract">
 <summary>
 Add an instance of class 'Externalservicescontract' in the ExternalservicescontractCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ExternalservicescontractCollection.Compare(InMotionGIT.General.Entity.Contracts.General.ExternalservicescontractCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ExternalservicescontractCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ExternalservicescontractCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ExternalservicescontractCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE">
 <summary>
 
 </summary>
<remarks>Data-source is 'FORMATVALUES'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.CreateNewFORMATVALUE">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._ClassOfDocumentFormat">
<summary>
Type of document
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._TypeCodeClientIDs">
<summary>
Type code of Client IDs.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._Description">
<summary>
Description of the Type of Client IDs.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._AbbreviatedDescription">
<summary>
Abbreviated description of the Type of Client IDs.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._DocumentFormat">
<summary>
Format of the document.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._PersonType">
<summary>
Indicator of type of client for whom it applies the type of Client IDs
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._FormatValidatingRoutine">
<summary>
Name of the routine used for validating the number or code of Client IDs (structure, number, etc.).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._RecordStatus">
<summary>
General status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.ClassOfDocumentFormat">
<summary>
Type of document (NCLASSTYPDOC)..
</summary>
<remarks>Data-source is 'FORMATVALUES.NCLASSTYPDOC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.TypeCodeClientIDs">
<summary>
Type code of Client IDs. (NTYPCLIENTDOC)..
</summary>
<remarks>Data-source is 'FORMATVALUES.NTYPCLIENTDOC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.Description">
<summary>
Description of the Type of Client IDs. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'FORMATVALUES.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.AbbreviatedDescription">
<summary>
Abbreviated description of the Type of Client IDs. (SSHORT_DES)..
</summary>
<remarks>Data-source is 'FORMATVALUES.SSHORT_DES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.DocumentFormat">
<summary>
Format of the document. (SFORMAT)..
</summary>
<remarks>Data-source is 'FORMATVALUES.SFORMAT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.PersonType">
<summary>
Indicator of type of client for whom it applies the type of Client IDs (STYPPERSON)..
</summary>
<remarks>Data-source is 'FORMATVALUES.STYPPERSON'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.FormatValidatingRoutine">
<summary>
Name of the routine used for validating the number or code of Client IDs (structure, number, etc.). (SROUTINE)..
</summary>
<remarks>Data-source is 'FORMATVALUES.SROUTINE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.RecordStatus">
<summary>
General status of the record. (SSTATREGT)..
</summary>
<remarks>Data-source is 'FORMATVALUES.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.RecordStatusEnum">
<summary>
General status of the record.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.RecordStatusEnumText">
<summary>
General status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'FORMATVALUES.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'FORMATVALUES.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.Compare(InMotionGIT.General.Entity.Contracts.General.FORMATVALUE,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="FORMATVALUEItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUE.ClassOfDocumentFormatDescription">
 <summary>
 Type of document
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE6023'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.FORMATVALUECollection">
 <summary>
 Collection for FORMATVALUE class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUECollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUECollection.AddFORMATVALUE">
 <summary>
 Add an instance of class 'FORMATVALUE' in the FORMATVALUECollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUECollection.Compare(InMotionGIT.General.Entity.Contracts.General.FORMATVALUECollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.FORMATVALUECollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUECollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.FORMATVALUECollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Holiday">
 <summary>
 Table of holidays.
 </summary>
<remarks>Data-source is 'HOLLIDAYS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.CreateNewHoliday">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holiday._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holiday._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holiday._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holiday._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holiday._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holiday._Code">
<summary>
Code of the month.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holiday._Holiday">
<summary>
Holiday.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holiday._CountryCode">
<summary>
Country code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holiday._Description">
<summary>
Description of the holiday.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holiday._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holiday._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holiday.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holiday.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holiday.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holiday.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holiday.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holiday.Code">
<summary>
Code of the month. (NMONTH)..
</summary>
<remarks>Data-source is 'HOLLIDAYS.NMONTH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holiday.Holiday">
<summary>
Holiday. (NDAY)..
</summary>
<remarks>Data-source is 'HOLLIDAYS.NDAY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holiday.CountryCode">
<summary>
Country code (NCOUNTRY)..
</summary>
<remarks>Data-source is 'HOLLIDAYS.NCOUNTRY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holiday.Description">
<summary>
Description of the holiday. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'HOLLIDAYS.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holiday.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'HOLLIDAYS.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holiday.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'HOLLIDAYS.DCOMPDATE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.Compare(InMotionGIT.General.Entity.Contracts.General.Holiday,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="HolidayItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holiday.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holiday.CodeDescription">
 <summary>
 Code of the month.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE7013'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.HolidayCollection">
 <summary>
 Collection for Holiday class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.HolidayCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.HolidayCollection.AddHoliday">
 <summary>
 Add an instance of class 'Holiday' in the HolidayCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.HolidayCollection.Compare(InMotionGIT.General.Entity.Contracts.General.HolidayCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.HolidayCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.HolidayCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.HolidayCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Holliday">
 <summary>
 Table of hollidays.
 </summary>
<remarks>Data-source is 'HOLLIDAYS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.CreateNewHolliday">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holliday._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holliday._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holliday._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holliday._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holliday._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holliday._Code">
<summary>
Code of the month.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holliday._Holiday">
<summary>
Holiday.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holliday._CountryCode">
<summary>
Country code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holliday._Description">
<summary>
Description of the holiday.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holliday._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Holliday._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holliday.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holliday.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holliday.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holliday.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holliday.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holliday.Code">
<summary>
Code of the month. (NMONTH)..
</summary>
<remarks>Data-source is 'HOLLIDAYS.NMONTH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holliday.Holiday">
<summary>
Holiday. (NDAY)..
</summary>
<remarks>Data-source is 'HOLLIDAYS.NDAY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holliday.CountryCode">
<summary>
Country code (NCOUNTRY)..
</summary>
<remarks>Data-source is 'HOLLIDAYS.NCOUNTRY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holliday.Description">
<summary>
Description of the holiday. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'HOLLIDAYS.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holliday.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'HOLLIDAYS.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holliday.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'HOLLIDAYS.DCOMPDATE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.Compare(InMotionGIT.General.Entity.Contracts.General.Holliday,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="HollidayItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Holliday.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Holliday.CodeDescription">
 <summary>
 Code of the month.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE7013'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.HollidayCollection">
 <summary>
 Collection for Holliday class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.HollidayCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.HollidayCollection.AddHolliday">
 <summary>
 Add an instance of class 'Holliday' in the HollidayCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.HollidayCollection.Compare(InMotionGIT.General.Entity.Contracts.General.HollidayCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.HollidayCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.HollidayCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.HollidayCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance">
 <summary>
 Loans/advances of life.
 </summary>
<remarks>Data-source is 'LOANS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.CreateNewLoansLifeInsurance">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._CertificateID">
<summary>
Certificate ID subject to the loan.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._Key">
<summary>
Consecutive number identifying the record as unique for the policy-certificate.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._TotalAmount">
<summary>
Loan total amount.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._Balance">
<summary>
Outstanding balance of the loan.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._InterestRate">
<summary>
Interest percentage applied to the loan.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._LoanEffectiveDate">
<summary>
Effective date of the advance payment.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._PaymentOrder">
<summary>
Number of the payment order to pay the loan.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._TaxAmount">
<summary>
Tax amount applied to the loan.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._NextBilling">
<summary>
Date of next billing.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._AmountOfCapitalizedInterest">
<summary>
Amount of capitalized interest.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._Agency">
<summary>
Agency where the transaction was made.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance._AmountOfLoanLocalCurrency">
<summary>
Amount of loan / advance expressed in local currency
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.LineOfBusiness">
<summary>
Code of the line of business. (NBRANCH)..
</summary>
<remarks>Data-source is 'LOANS.NBRANCH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.ProductCode">
<summary>
Code of the product. (NPRODUCT)..
</summary>
<remarks>Data-source is 'LOANS.NPRODUCT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application. (NPOLICY)..
</summary>
<remarks>Data-source is 'LOANS.NPOLICY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.CertificateID">
<summary>
Certificate ID subject to the loan. (NCERTIF)..
</summary>
<remarks>Data-source is 'LOANS.NCERTIF'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.Key">
<summary>
Consecutive number identifying the record as unique for the policy-certificate. (NCODE)..
</summary>
<remarks>Data-source is 'LOANS.NCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.TotalAmount">
<summary>
Loan total amount. (NAMOUNT)..
</summary>
<remarks>Data-source is 'LOANS.NAMOUNT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.Balance">
<summary>
Outstanding balance of the loan. (NBALANCE)..
</summary>
<remarks>Data-source is 'LOANS.NBALANCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'LOANS.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.InterestRate">
<summary>
Interest percentage applied to the loan. (NINTEREST)..
</summary>
<remarks>Data-source is 'LOANS.NINTEREST'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.LoanEffectiveDate">
<summary>
Effective date of the advance payment. (DLOAN_DATE)..
</summary>
<remarks>Data-source is 'LOANS.DLOAN_DATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'LOANS.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.PaymentOrder">
<summary>
Number of the payment order to pay the loan. (NREQUEST_NU)..
</summary>
<remarks>Data-source is 'LOANS.NREQUEST_NU'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.TaxAmount">
<summary>
Tax amount applied to the loan. (NAMOTAX)..
</summary>
<remarks>Data-source is 'LOANS.NAMOTAX'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.NextBilling">
<summary>
Date of next billing. (DNEXTRECEIPT)..
</summary>
<remarks>Data-source is 'LOANS.DNEXTRECEIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.AmountOfCapitalizedInterest">
<summary>
Amount of capitalized interest. (NINTERESTCAP)..
</summary>
<remarks>Data-source is 'LOANS.NINTERESTCAP'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.Agency">
<summary>
Agency where the transaction was made. (NAGENCY)..
</summary>
<remarks>Data-source is 'LOANS.NAGENCY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.AmountOfLoanLocalCurrency">
<summary>
Amount of loan / advance expressed in local currency (NAMOUNTLOC)..
</summary>
<remarks>Data-source is 'LOANS.NAMOUNTLOC'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.Compare(InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="LoansLifeInsuranceItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsurance.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsuranceCollection">
 <summary>
 Collection for LoansLifeInsurance class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsuranceCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsuranceCollection.AddLoansLifeInsurance">
 <summary>
 Add an instance of class 'LoansLifeInsurance' in the LoansLifeInsuranceCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsuranceCollection.Compare(InMotionGIT.General.Entity.Contracts.General.LoansLifeInsuranceCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsuranceCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsuranceCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.LoansLifeInsuranceCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter">
 <summary>
 Origin code of letters
 </summary>
<remarks>Data-source is 'OriginOfLetter'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.CreateNewOriginCodeOfLetter">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._OriginCode">
<summary>
Origin code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._RecordType">
<summary>
Record type to which the note belongs.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._Code">
<summary>
Code of the type of record to be numbered
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._LongDescription">
<summary>
Long description
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._ShortDescription">
<summary>
Short Description
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._User">
<summary>
UserCode
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._PrintingDocumentss">
<summary>
Printing Documents
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter._PrintParameterss">
<summary>
Print parameters
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.OriginCode">
<summary>
Origin code (nOriginCode)..
</summary>
<remarks>Data-source is 'OriginOfLetter.nOriginCode'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.RecordType">
<summary>
Record type to which the note belongs. (NRECTYPE)..
</summary>
<remarks>Data-source is 'OriginOfLetter.NRECTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.Code">
<summary>
Code of the type of record to be numbered (NCODIGINT)..
</summary>
<remarks>Data-source is 'OriginOfLetter.NCODIGINT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.LongDescription">
<summary>
Long description (sDescript)..
</summary>
<remarks>Data-source is 'OriginOfLetter.sDescript'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.ShortDescription">
<summary>
Short Description (sShort_Des)..
</summary>
<remarks>Data-source is 'OriginOfLetter.sShort_Des'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.Status">
<summary>
Register status (sStatregt)..
</summary>
<remarks>Data-source is 'OriginOfLetter.sStatregt'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.ComputersDate">
<summary>
Date of the computer (dCompDate)..
</summary>
<remarks>Data-source is 'OriginOfLetter.dCompDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.User">
<summary>
UserCode (nUserCode)..
</summary>
<remarks>Data-source is 'OriginOfLetter.nUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.NewPrintingDocumentssInstance">
<summary>
Initializes the 'PrintingDocumentss' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.NewPrintingDocumentItem(System.Boolean)">
<summary>
Add a new item to the collection of 'PrintingDocumentss', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'PrintingDocument' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.PrintingDocumentss">
<summary>
Printing Documents collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.NewPrintParameterssInstance">
<summary>
Initializes the 'PrintParameterss' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.NewPrintParameterItem(System.Boolean)">
<summary>
Add a new item to the collection of 'PrintParameterss', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'PrintParameter' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.PrintParameterss">
<summary>
Print parameters collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.Compare(InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="OriginCodeOfLetterItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.RecordTypeDescription">
 <summary>
 Record type to which the note belongs.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE62'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetter.CodeDescription">
 <summary>
 Code of the type of record to be numbered
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE297'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetterCollection">
 <summary>
 Collection for OriginCodeOfLetter class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetterCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetterCollection.AddOriginCodeOfLetter">
 <summary>
 Add an instance of class 'OriginCodeOfLetter' in the OriginCodeOfLetterCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetterCollection.Compare(InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetterCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetterCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetterCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.OriginCodeOfLetterCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute">
 <summary>
 Particular Data Attributes.
 </summary>
<remarks>Data-source is 'TABLE6786'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.CreateNewParticularDataAttribute">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute._AttributeCode">
<summary>
Particular data attribute code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute._AttributeDescription">
<summary>
Particular Data Attribute Description.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute._UpdateTimeStamp">
<summary>
Computer date Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute._AbbreviatedDescriptionAttribute">
<summary>
Abbreviated description of the attribute of the particular data.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute._Code">
<summary>
Code of the record status.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.AttributeCode">
<summary>
Particular data attribute code. (NDEFTYPE)..
</summary>
<remarks>Data-source is 'TABLE6786.NDEFTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.AttributeDescription">
<summary>
Particular Data Attribute Description. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'TABLE6786.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.UpdateTimeStamp">
<summary>
Computer date Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'TABLE6786.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.AbbreviatedDescriptionAttribute">
<summary>
Abbreviated description of the attribute of the particular data. (SSHORT_DES)..
</summary>
<remarks>Data-source is 'TABLE6786.SSHORT_DES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.Code">
<summary>
Code of the record status. (SSTATREGT)..
</summary>
<remarks>Data-source is 'TABLE6786.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.CodeEnum">
<summary>
Code of the record status.
</summary>
<remarks>This property use a enumeration based on property 'Code'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.CodeEnumText">
<summary>
Code of the record status.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'TABLE6786.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.Compare(InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ParticularDataAttributeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttribute.CodeDescription">
 <summary>
 Code of the record status.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE26'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttributeCollection">
 <summary>
 Collection for ParticularDataAttribute class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttributeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttributeCollection.AddParticularDataAttribute">
 <summary>
 Add an instance of class 'ParticularDataAttribute' in the ParticularDataAttributeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttributeCollection.Compare(InMotionGIT.General.Entity.Contracts.General.ParticularDataAttributeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttributeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttributeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ParticularDataAttributeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation">
 <summary>
 Policy installation options.
 </summary>
<remarks>Data-source is 'OPT_POLICY'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.CreateNewPolicyInstallation">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._SalesOperation">
<summary>
Type of sales operation of the insurance company (direct or with intermediaries).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._SpecialProducer">
<summary>
Code of the producer used for direct sales.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._PrintClauseTextTogetherPolicydocument">
<summary>
It indicates that the text associated with the clause of a policy will be printed by the system together with the policy documents
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._SSTOCK_IND">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._SAAPVFormIntitution">
<summary>
Code of the institution of origin of SAAPV application form.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._WhenChargesApplyIndicator">
<summary>
Indicator when charges apply.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._VerifyRelationshipClientIntermediary">
<summary>
Verify client intermediary relationship
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._MaximunNumberOfFiles">
<summary>
Maximum number of files per batch, to send to stamp.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._MaximunNumberOfRows">
<summary>
Maximum number of rows by file, to send to stamp.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._SimulateIndicator">
<summary>
CFDI simulate indicator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._NALPHADIVRESERVE">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation._NGLOBEXPMINPERDI">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.Currency">
<summary>
Code of The Currency. (NCURRENCY)..
</summary>
<remarks>Data-source is 'OPT_POLICY.NCURRENCY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'OPT_POLICY.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'OPT_POLICY.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.SalesOperation">
<summary>
Type of sales operation of the insurance company (direct or with intermediaries). (NPOLICYSALE)..
</summary>
<remarks>Data-source is 'OPT_POLICY.NPOLICYSALE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.SpecialProducer">
<summary>
Code of the producer used for direct sales. (NINTERMED)..
</summary>
<remarks>Data-source is 'OPT_POLICY.NINTERMED'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.PrintClauseTextTogetherPolicydocument">
<summary>
It indicates that the text associated with the clause of a policy will be printed by the system together with the policy documents (SCLAUSEIMP)..
</summary>
<remarks>Data-source is 'OPT_POLICY.SCLAUSEIMP'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.SSTOCK_IND">
<summary>
.
</summary>
<remarks>Data-source is 'OPT_POLICY.SSTOCK_IND'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.SAAPVFormIntitution">
<summary>
Code of the institution of origin of SAAPV application form. (NINSTITUTION)..
</summary>
<remarks>Data-source is 'OPT_POLICY.NINSTITUTION'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.WhenChargesApplyIndicator">
<summary>
Indicator when charges apply. (SDATE_APLY_CHARGE)..
</summary>
<remarks>Data-source is 'OPT_POLICY.SDATE_APLY_CHARGE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.VerifyRelationshipClientIntermediary">
<summary>
Verify client intermediary relationship (NCLIINTREL)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'OPT_POLICY.NCLIINTREL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.MaximunNumberOfFiles">
<summary>
Maximum number of files per batch, to send to stamp. (NMAXNUMFILES)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'OPT_POLICY.NMAXNUMFILES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.MaximunNumberOfRows">
<summary>
Maximum number of rows by file, to send to stamp. (NMAXNUMROWS)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'OPT_POLICY.NMAXNUMROWS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.SimulateIndicator">
<summary>
CFDI simulate indicator. (SCFDI_SIMULATE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'OPT_POLICY.SCFDI_SIMULATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.NALPHADIVRESERVE">
<summary>
.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'OPT_POLICY.NALPHADIVRESERVE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.NGLOBEXPMINPERDI">
<summary>
.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'OPT_POLICY.NGLOBEXPMINPERDI'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.Compare(InMotionGIT.General.Entity.Contracts.General.PolicyInstallation,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="PolicyInstallationItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallation.SalesOperationDescription">
 <summary>
 Type of sales operation of the insurance company (direct or with intermediaries).
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE696'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.PolicyInstallationCollection">
 <summary>
 Collection for PolicyInstallation class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallationCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallationCollection.AddPolicyInstallation">
 <summary>
 Add an instance of class 'PolicyInstallation' in the PolicyInstallationCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallationCollection.Compare(InMotionGIT.General.Entity.Contracts.General.PolicyInstallationCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PolicyInstallationCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallationCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PolicyInstallationCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.PrintingDocument">
 <summary>
 Printing Documents
 </summary>
<remarks>Data-source is 'PRINTDOCUMENTS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.CreateNewPrintingDocument">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._OriginCode">
<summary>
Origin code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._LetterNumber">
<summary>
Letter number
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._EffectiveDate">
<summary>
Effective Date of the register
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._TypeOfLetter">
<summary>
Type of letter
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._ComputerDateWhenBatchRecorded">
<summary>
Computer date when the record is batch recorded
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._User">
<summary>
UserCode
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._TypeOfRecord">
<summary>
Type of record
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._CodeLineBusiness">
<summary>
Code of the line of business
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._ProductCode">
<summary>
Code of the product
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._NumberPolicyQuotationApplication">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._CertificateNumber">
<summary>
Number identifying the certificate
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._PolicyCertificateEntryNumber">
<summary>
Policy-certificate Entry number
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._ClaimNumber">
<summary>
Claim number
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._CaseId">
<summary>
Case id
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._ClaimType">
<summary>
Claim type
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._ClaimEntryNumber">
<summary>
Claim entry number
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._UnderwritingCase">
<summary>
Underwriting Case
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._Requeryment">
<summary>
Requeryment
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._FreeTextOfLetter">
<summary>
Free text of letter
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._CodeOfTheModuleOfTheCoverage">
<summary>
Code of the module of the coverage
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._AccountingDate">
<summary>
Date of accounting
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._ClientFirstName">
<summary>
Cliente First Name
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._ClientLastName">
<summary>
Client Last Name
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._TypeCodeOfClientId">
<summary>
Type code of Client IDs
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._NumberOfTheClient">
<summary>
Number of the Client
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._Street">
<summary>
Street
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._BuildingNumber">
<summary>
Building number
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._FloorNumber">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._ApartmentNumber">
<summary>
Apartment number
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._ZipCode">
<summary>
Zip code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._City">
<summary>
City
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._Province">
<summary>
Province
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._Country">
<summary>
Country
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._MovilPhone">
<summary>
Movil pone
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._Email">
<summary>
Email
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._Gender">
<summary>
Gender
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._ExternalCodeOfLetter">
<summary>
External code of letter
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._Reason">
<summary>
Code of reason
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._NumberOfOfficialPolicy">
<summary>
Number of official policy
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._Decision">
<summary>
Decision
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._SellInstance">
<summary>
Sell Instance
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._SentMode">
<summary>
Sent Mode
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._SentWayReq">
<summary>
Sent Way Req
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._SentDate">
<summary>
Sent Date
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintingDocument._SentWay">
<summary>
Sent Way
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.OriginCode">
<summary>
Origin code (NORIGINCODE)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NORIGINCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.LetterNumber">
<summary>
Letter number (NLETTERNUM)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NLETTERNUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.EffectiveDate">
<summary>
Effective Date of the register (DEFFECDATE)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.DEFFECDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.TypeOfLetter">
<summary>
Type of letter (SLETTER)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SLETTER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.CreationDate">
<summary>
Computer date when the record is created. (DCREATIONDATE)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.DCREATIONDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.ComputerDateWhenBatchRecorded">
<summary>
Computer date when the record is batch recorded (DPRINTDATE)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.DPRINTDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.User">
<summary>
UserCode (NUSERCODE)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.ComputersDate">
<summary>
Date of the computer (DCOMPDATE)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.TypeOfRecord">
<summary>
Type of record (SCERTYPE)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SCERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.TypeOfRecordEnum">
<summary>
Type of record
</summary>
<remarks>This property use a enumeration based on property 'TypeOfRecord'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.TypeOfRecordEnumText">
<summary>
Type of record
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.CodeLineBusiness">
<summary>
Code of the line of business (NBRANCH)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NBRANCH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.ProductCode">
<summary>
Code of the product (NPRODUCT)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NPRODUCT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.NumberPolicyQuotationApplication">
<summary>
Number identifying the Policy/Quotation/Application. (NPOLICY)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NPOLICY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.CertificateNumber">
<summary>
Number identifying the certificate (NCERTIF)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NCERTIF'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.PolicyCertificateEntryNumber">
<summary>
Policy-certificate Entry number (NMOVEMENT)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NMOVEMENT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.ClaimNumber">
<summary>
Claim number (NCLAIM)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NCLAIM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.CaseId">
<summary>
Case id (NCASE_NUM)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NCASE_NUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.ClaimType">
<summary>
Claim type (NDEMAN_TYPE)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NDEMAN_TYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.ClaimEntryNumber">
<summary>
Claim entry number (NTRANSAC)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NTRANSAC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.UnderwritingCase">
<summary>
Underwriting Case (UNDERWRITINGCASEID)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.UNDERWRITINGCASEID'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.Requeryment">
<summary>
Requeryment (REQUIREMENTID)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.REQUIREMENTID'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.FreeTextOfLetter">
<summary>
Free text of letter (SNOTENUM)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SNOTENUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.CodeOfTheModuleOfTheCoverage">
<summary>
Code of the module of the coverage (NMODULEC)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NMODULEC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.AccountingDate">
<summary>
Date of accounting (DLEDGERDAT)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.DLEDGERDAT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.ClientFirstName">
<summary>
Cliente First Name (SFIRSTNAME)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SFIRSTNAME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.ClientLastName">
<summary>
Client Last Name (SLASTNAME)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SLASTNAME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.TypeCodeOfClientId">
<summary>
Type code of Client IDs (NTYPCLIENTDOC)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NTYPCLIENTDOC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.NumberOfTheClient">
<summary>
Number of the Client (SCLINUMDOCU)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SCLINUMDOCU'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.Street">
<summary>
Street (SSTREET)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SSTREET'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.BuildingNumber">
<summary>
Building number (SBUILD)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SBUILD'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.FloorNumber">
<summary>
 (NFLOOR)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NFLOOR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.ApartmentNumber">
<summary>
Apartment number (SDEPARTMENT)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SDEPARTMENT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.ZipCode">
<summary>
Zip code (SZIPCODE)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SZIPCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.City">
<summary>
City (NLOCAL)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NLOCAL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.Province">
<summary>
Province (NPROVINCE)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NPROVINCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.Country">
<summary>
Country (NCOUNTRY)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NCOUNTRY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.MovilPhone">
<summary>
Movil pone (SPHONE)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SPHONE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.Email">
<summary>
Email (SEMAIL)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SEMAIL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.Gender">
<summary>
Gender (SSEXCLIEN)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SSEXCLIEN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.ExternalCodeOfLetter">
<summary>
External code of letter (SEXTLETTER)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SEXTLETTER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.Reason">
<summary>
Code of reason (NUWREASON)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NUWREASON'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.NumberOfOfficialPolicy">
<summary>
Number of official policy (SOFFICIALPOL)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.SOFFICIALPOL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.Decision">
<summary>
Decision (NDECISION)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NDECISION'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.SellInstance">
<summary>
Sell Instance (NINSTANCE)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NINSTANCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.SentMode">
<summary>
Sent Mode (NDIGITAL_SEND)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NDIGITAL_SEND'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.SentWayReq">
<summary>
Sent Way Req (NREQWAYSENT)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NREQWAYSENT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.SentDate">
<summary>
Sent Date (DSENTDATE)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.DSENTDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.SentWay">
<summary>
Sent Way (NWAYSENT)..
</summary>
<remarks>Data-source is 'PRINTDOCUMENTS.NWAYSENT'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.Compare(InMotionGIT.General.Entity.Contracts.General.PrintingDocument,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="PrintingDocumentItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocument.SentModeDescription">
 <summary>
 Sent Mode
 </summary>
 <remarks>
 This property is associated with the field 'Table6817' on the table 'Table6817'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.PrintingDocumentCollection">
 <summary>
 Collection for PrintingDocument class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocumentCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocumentCollection.AddPrintingDocument">
 <summary>
 Add an instance of class 'PrintingDocument' in the PrintingDocumentCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocumentCollection.Compare(InMotionGIT.General.Entity.Contracts.General.PrintingDocumentCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintingDocumentCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocumentCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintingDocumentCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.PrintParameter">
 <summary>
 Print parameters
 </summary>
<remarks>Data-source is 'PRINTPARAMETERS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.CreateNewPrintParameter">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._OriginCode">
<summary>
Origin code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._ConsecutiveNumber">
<summary>
Consecutive Number
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._SentWay">
<summary>
Sent way
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._CodeOfLetter">
<summary>
Code of letter
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._ManualInput">
<summary>
Manual input
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._User">
<summary>
UserCode
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._TypeOfTransaction">
<summary>
Types of transactions in the policy history.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._EndorsementType">
<summary>
Code of type of endorsement.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._CancellationCode">
<summary>
Policy/Certificate Cancellation Code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._OperationType">
<summary>
Operation type.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._PaymentType">
<summary>
Type of claim payment.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._ClaimPaymentMode">
<summary>
Code of the claim payment mode
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._DecisionTaken">
<summary>
Decision taken
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._InstanceCode">
<summary>
Instance Code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._UnderwritingRequeryment">
<summary>
Underwriting requeryment
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._ExternalCodeOfLetter">
<summary>
External code of letter
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.PrintParameter._Reason">
<summary>
Code of reason
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.OriginCode">
<summary>
Origin code (NORIGINCODE)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NORIGINCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.ConsecutiveNumber">
<summary>
Consecutive Number (NCONSEC)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NCONSEC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.SentWay">
<summary>
Sent way (NWAYSENT)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NWAYSENT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.CodeOfLetter">
<summary>
Code of letter (SLETTER)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.SLETTER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.ManualInput">
<summary>
Manual input (NMANUAL)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NMANUAL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.Status">
<summary>
Register status (SSTATREGT)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.ComputersDate">
<summary>
Date of the computer (DCOMPDATE)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.User">
<summary>
UserCode (NUSERCODE)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.TypeOfTransaction">
<summary>
Types of transactions in the policy history. (NTYPE_HIS)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NTYPE_HIS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.EndorsementType">
<summary>
Code of type of endorsement. (NTYPE_AMEND)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NTYPE_AMEND'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.CancellationCode">
<summary>
Policy/Certificate Cancellation Code. (NNULL_CODE)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NNULL_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.OperationType">
<summary>
Operation type. (NOPERTYPE)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NOPERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.PaymentType">
<summary>
Type of claim payment. (NPAYTYPE)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NPAYTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.ClaimPaymentMode">
<summary>
Code of the claim payment mode (NPAYFORM)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NPAYFORM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.DecisionTaken">
<summary>
Decision taken (NDECISION)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NDECISION'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.InstanceCode">
<summary>
Instance Code (NINSTANCE)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NINSTANCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.UnderwritingRequeryment">
<summary>
Underwriting requeryment (NREQUERYMENTTYPE)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NREQUERYMENTTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.ExternalCodeOfLetter">
<summary>
External code of letter (SEXTLETTER)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.SEXTLETTER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.Reason">
<summary>
Code of reason (NUWREASON)..
</summary>
<remarks>Data-source is 'PRINTPARAMETERS.NUWREASON'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.Compare(InMotionGIT.General.Entity.Contracts.General.PrintParameter,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="PrintParameterItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameter.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.SentWayDescription">
 <summary>
 Sent way
 </summary>
 <remarks>
 This property is associated with the field 'TABLE6838' on the table 'TABLE6838'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.TypeOfTransactionDescription">
 <summary>
 Types of transactions in the policy history.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE165'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.EndorsementTypeDescription">
 <summary>
 Code of type of endorsement.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE6059'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.CancellationCodeDescription">
 <summary>
 Policy/Certificate Cancellation Code.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE13'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.OperationTypeDescription">
 <summary>
 Operation type.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE140'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.PaymentTypeDescription">
 <summary>
 Type of claim payment.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE199'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameter.ClaimPaymentModeDescription">
 <summary>
 Code of the claim payment mode
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE138'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.PrintParameterCollection">
 <summary>
 Collection for PrintParameter class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameterCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameterCollection.AddPrintParameter">
 <summary>
 Add an instance of class 'PrintParameter' in the PrintParameterCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameterCollection.Compare(InMotionGIT.General.Entity.Contracts.General.PrintParameterCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.PrintParameterCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameterCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.PrintParameterCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.ProcessStatus">
 <summary>
 Massive process status.
 </summary>
<remarks>Data-source is 'TABLE8202'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.CreateNewProcessStatus">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ProcessStatus._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ProcessStatus._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ProcessStatus._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ProcessStatus._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ProcessStatus._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ProcessStatus._ProcessSataus">
<summary>
Massive process status.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ProcessStatus._UpdateTimeStamp">
<summary>
Computer date Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ProcessStatus._Description">
<summary>
Massive process status description.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ProcessStatus._ShortDescription">
<summary>
Massive process status Short description.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ProcessStatus._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.ProcessStatus._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.ProcessSataus">
<summary>
Massive process status. (NSTATUS)..
</summary>
<remarks>Data-source is 'TABLE8202.NSTATUS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.UpdateTimeStamp">
<summary>
Computer date Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'TABLE8202.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.Description">
<summary>
Massive process status description. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'TABLE8202.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.ShortDescription">
<summary>
Massive process status Short description. (SSHORT_DES)..
</summary>
<remarks>Data-source is 'TABLE8202.SSHORT_DES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.RecordStatus">
<summary>
Status of the record. (SSTATREGT)..
</summary>
<remarks>Data-source is 'TABLE8202.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.RecordStatusEnum">
<summary>
Status of the record.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.RecordStatusEnumText">
<summary>
Status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'TABLE8202.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.Compare(InMotionGIT.General.Entity.Contracts.General.ProcessStatus,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ProcessStatusItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatus.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.ProcessStatusCollection">
 <summary>
 Collection for ProcessStatus class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatusCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatusCollection.AddProcessStatus">
 <summary>
 Add an instance of class 'ProcessStatus' in the ProcessStatusCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatusCollection.Compare(InMotionGIT.General.Entity.Contracts.General.ProcessStatusCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.ProcessStatusCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatusCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.ProcessStatusCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice">
 <summary>
 Relationship between branch office and field office.
 </summary>
<remarks>Data-source is 'AGENCIES'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.CreateNewRelationBetweenOffice">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice._Agency">
<summary>
Code of Agency.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice._OfficeCode">
<summary>
Code of Office.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice._BranchOffice">
<summary>
Code of the branch office.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice._PaymentAgencyIndicator">
<summary>
Paymen agency indicator
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice._SCLIENT">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.Agency">
<summary>
Code of Agency. (NAGENCY)..
</summary>
<remarks>Data-source is 'AGENCIES.NAGENCY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.OfficeCode">
<summary>
Code of Office. (NOFFICEAGEN)..
</summary>
<remarks>Data-source is 'AGENCIES.NOFFICEAGEN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.BranchOffice">
<summary>
Code of the branch office. (NBRAN_OFF)..
</summary>
<remarks>Data-source is 'AGENCIES.NBRAN_OFF'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'AGENCIES.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'AGENCIES.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.PaymentAgencyIndicator">
<summary>
Paymen agency indicator (SPAY)..
</summary>
<remarks>Data-source is 'AGENCIES.SPAY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.SCLIENT">
<summary>
.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'AGENCIES.SCLIENT'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.Compare(InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="RelationBetweenOfficeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.AgencyDescription">
 <summary>
 Code of Agency.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE5555'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.OfficeCodeDescription">
 <summary>
 Code of Office.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE5556'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOffice.BranchOfficeDescription">
 <summary>
 Code of the branch office.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE9'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOfficeCollection">
 <summary>
 Collection for RelationBetweenOffice class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOfficeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOfficeCollection.AddRelationBetweenOffice">
 <summary>
 Add an instance of class 'RelationBetweenOffice' in the RelationBetweenOfficeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOfficeCollection.Compare(InMotionGIT.General.Entity.Contracts.General.RelationBetweenOfficeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOfficeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOfficeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.RelationBetweenOfficeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.SystemInstallation">
 <summary>
 System installation options.
 </summary>
<remarks>Data-source is 'OPT_SYSTEM'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.CreateNewSystemInstallation">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._InitialDate">
<summary>
Date in which the company begins to use the system.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._ClauseTextWillBePrinted">
<summary>
Clause text will be printed.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._DescriptionToBeDisplayed">
<summary>
It indicates the type of Description to be Displayed.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._Module">
<summary>
Code of the module.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._Language">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._PersonClientCodeFormat">
<summary>
Format used for client codes of the system, individuals.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._ModuleInstallationDate">
<summary>
Date when a module is installed.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._CompanyClientCodeFormat">
<summary>
Format used for client codes of the system, commercial clients.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._Country">
<summary>
Code of the country.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._PolicyIDingMethod">
<summary>
Method for numbering policies.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._ClaimNumberingMethod">
<summary>
Method for numbering claims.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._BillsNumberingMethod">
<summary>
Method for numbering premium bills.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._Company">
<summary>
Code of the company.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._TypeOfSecurity">
<summary>
Type of system security.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._InsuranceArea">
<summary>
Insurance area (Life or P&#38;C).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._FEMNumberDBServer">
<summary>
FEM number of the Data Base server
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._TypeOfCompanyThatOperatesTheSystem">
<summary>
Type of Company that operates the system
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._LastUpdatedQuotationDate">
<summary>
Date last updated quotation
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._AutomaticNumberingOfQuotations">
<summary>
Automatic numbering of quotations
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._SMASSIVE_DIR">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._CompanyWorksWithItsOwnStockMutualFunds">
<summary>
For Non-Traditional Life products indicates that the company works with its own stock mutual funds...
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._TraceStoredProceduresMustBeActivatedIndicator">
<summary>
Indicator that the trace stored procedures must be activated
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._OfficialpolicyNumberFormat">
<summary>
Official policy number format.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._OfficialCertificateNumberFormat">
<summary>
Official certificate number format.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._NID">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.SystemInstallation._SGENCOLLECT_DB">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.InitialDate">
<summary>
Date in which the company begins to use the system. (DINIT_DATE)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.DINIT_DATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.ClauseTextWillBePrinted">
<summary>
Clause text will be printed. (SPRINT_TX_C)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SPRINT_TX_C'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.DescriptionToBeDisplayed">
<summary>
It indicates the type of Description to be Displayed. (SQ_VALUE)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SQ_VALUE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.Module">
<summary>
Code of the module. (NMODULES)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.NMODULES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.ModuleEnum">
<summary>
Code of the module.
</summary>
<remarks>This property use a enumeration based on property '[Module]'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.ModuleEnumText">
<summary>
Code of the module.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.RecordEffectiveDate">
<summary>
Date from which the record is valid. (DEFFECDATE)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.DEFFECDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.Language">
<summary>
Language in which the system shows the information. (NLANGUAGE)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.NLANGUAGE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.PersonClientCodeFormat">
<summary>
Format used for client codes of the system, individuals. (SFORMATPER)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SFORMATPER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.ModuleInstallationDate">
<summary>
Date when a module is installed. (DINITMOD)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.DINITMOD'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.CompanyClientCodeFormat">
<summary>
Format used for client codes of the system, commercial clients. (SFORMATCOMP)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SFORMATCOMP'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.Country">
<summary>
Code of the country. (NCOUNTRY)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.NCOUNTRY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.PolicyIDingMethod">
<summary>
Method for numbering policies. (SPOLICYNUM)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SPOLICYNUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.ClaimNumberingMethod">
<summary>
Method for numbering claims. (SCLAIMNUM)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SCLAIMNUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.BillsNumberingMethod">
<summary>
Method for numbering premium bills. (SRECEIPTNUM)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SRECEIPTNUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.Company">
<summary>
Code of the company. (NCOMPANY)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.NCOMPANY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.TypeOfSecurity">
<summary>
Type of system security. (SSECURE)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SSECURE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.InsuranceArea">
<summary>
Insurance area (Life or P&#38;C). (NINSUR_AREA)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.NINSUR_AREA'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.FEMNumberDBServer">
<summary>
FEM number of the Data Base server (NNUM_FEM)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.NNUM_FEM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.TypeOfCompanyThatOperatesTheSystem">
<summary>
Type of Company that operates the system (NCOMPANY_TYPE)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.NCOMPANY_TYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.LastUpdatedQuotationDate">
<summary>
Date last updated quotation (DLASTDATE)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.DLASTDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.AutomaticNumberingOfQuotations">
<summary>
Automatic numbering of quotations (SQUOTNUMAUTO)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SQUOTNUMAUTO'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.SMASSIVE_DIR">
<summary>
.
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SMASSIVE_DIR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.CompanyWorksWithItsOwnStockMutualFunds">
<summary>
For Non-Traditional Life products indicates that the company works with its own stock mutual funds... (SWITH_STOCK)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SWITH_STOCK'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.TraceStoredProceduresMustBeActivatedIndicator">
<summary>
Indicator that the trace stored procedures must be activated (STRACE)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.STRACE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.OfficialpolicyNumberFormat">
<summary>
Official policy number format. (SOFFICIALPOLNUM)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SOFFICIALPOLNUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.OfficialCertificateNumberFormat">
<summary>
Official certificate number format. (SOFFICIALCERTNUM)..
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SOFFICIALCERTNUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.NID">
<summary>
.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'OPT_SYSTEM.NID'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.SGENCOLLECT_DB">
<summary>
.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'OPT_SYSTEM.SGENCOLLECT_DB'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.Compare(InMotionGIT.General.Entity.Contracts.General.SystemInstallation,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="SystemInstallationItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallation.InsuranceAreaDescription">
 <summary>
 Insurance area (Life or P&#38;C).
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE5001'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.SystemInstallationCollection">
 <summary>
 Collection for SystemInstallation class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallationCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallationCollection.AddSystemInstallation">
 <summary>
 Add an instance of class 'SystemInstallation' in the SystemInstallationCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallationCollection.Compare(InMotionGIT.General.Entity.Contracts.General.SystemInstallationCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.SystemInstallationCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallationCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.SystemInstallationCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.UserMessage">
 <summary>
 User Messages
 </summary>
<remarks>Data-source is 'USERMESSAGE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.CreateNewUserMessage">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.UserMessage._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.UserMessage._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.UserMessage._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.UserMessage._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.UserMessage._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.UserMessage._MessageId">
<summary>
Message Id
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.UserMessage._ServiceOrder">
<summary>
Service Order
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.UserMessage._ToUser">
<summary>
To user
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.UserMessage._Message">
<summary>
Message
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.UserMessage._StateMessage">
<summary>
State message
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.UserMessage._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.UserMessage._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.UserMessage.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.UserMessage.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.UserMessage.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.UserMessage.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.UserMessage.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.UserMessage.MessageId">
<summary>
Message Id (NIDMESSAGE)..
</summary>
<remarks>Data-source is 'USERMESSAGE.NIDMESSAGE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.UserMessage.ServiceOrder">
<summary>
Service Order (NSERV_ORDER)..
</summary>
<remarks>Data-source is 'USERMESSAGE.NSERV_ORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.UserMessage.ToUser">
<summary>
To user (NTO)..
</summary>
<remarks>Data-source is 'USERMESSAGE.NTO'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.UserMessage.Message">
<summary>
Message (SMESSAGE)..
</summary>
<remarks>Data-source is 'USERMESSAGE.SMESSAGE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.UserMessage.StateMessage">
<summary>
State message (NINDSTATE)..
</summary>
<remarks>Data-source is 'USERMESSAGE.NINDSTATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.UserMessage.ComputersDate">
<summary>
Date of the computer (DCOMPDATE)..
</summary>
<remarks>Data-source is 'USERMESSAGE.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.UserMessage.User">
<summary>
UserCode (NUSERCODE)..
</summary>
<remarks>Data-source is 'USERMESSAGE.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.Compare(InMotionGIT.General.Entity.Contracts.General.UserMessage,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="UserMessageItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessage.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.UserMessageCollection">
 <summary>
 Collection for UserMessage class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessageCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessageCollection.AddUserMessage">
 <summary>
 Add an instance of class 'UserMessage' in the UserMessageCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessageCollection.Compare(InMotionGIT.General.Entity.Contracts.General.UserMessageCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.UserMessageCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessageCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.UserMessageCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.Numerator">
 <summary>
 Numerator.
 </summary>
<remarks>Data-source is 'NUMERATOR'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.CreateNewNumerator">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Numerator._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Numerator._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Numerator._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Numerator._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Numerator._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Numerator._RecordType">
<summary>
Type of record to which the numbering pertains.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Numerator._Key">
<summary>
Complementary key to obtain the appropriate numerator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Numerator._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Numerator._EndingNumber">
<summary>
Ending number for numbering purposes.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Numerator._StartingNumber">
<summary>
Initial number for numbering purposes.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Numerator._LastNumberUsed">
<summary>
Last number assigned.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.General.Numerator._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Numerator.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Numerator.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Numerator.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Numerator.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Numerator.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Numerator.RecordType">
<summary>
Type of record to which the numbering pertains. (NTYPENUM)..
</summary>
<remarks>Data-source is 'NUMERATOR.NTYPENUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Numerator.Key">
<summary>
Complementary key to obtain the appropriate numerator. (NORD_NUM)..
</summary>
<remarks>Data-source is 'NUMERATOR.NORD_NUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Numerator.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'NUMERATOR.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Numerator.EndingNumber">
<summary>
Ending number for numbering purposes. (NEND_NUM)..
</summary>
<remarks>Data-source is 'NUMERATOR.NEND_NUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Numerator.StartingNumber">
<summary>
Initial number for numbering purposes. (NINITIAL)..
</summary>
<remarks>Data-source is 'NUMERATOR.NINITIAL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Numerator.LastNumberUsed">
<summary>
Last number assigned. (NLASTNUMB)..
</summary>
<remarks>Data-source is 'NUMERATOR.NLASTNUMB'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.Numerator.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'NUMERATOR.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.Compare(InMotionGIT.General.Entity.Contracts.General.Numerator,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="NumeratorItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.Numerator.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.General.NumeratorCollection">
 <summary>
 Collection for Numerator class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.NumeratorCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.NumeratorCollection.AddNumerator">
 <summary>
 Add an instance of class 'Numerator' in the NumeratorCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.NumeratorCollection.Compare(InMotionGIT.General.Entity.Contracts.General.NumeratorCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.General.NumeratorCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.NumeratorCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.General.NumeratorCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.Enumerations.EnumTemplateInterfaceChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.Enumerations.EnumT_ERR_INTERFACEChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.Enumerations.EnumCALEND_INTERFACEChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.Enumerations.EnumDEPEND_SHEETChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.Enumerations.EnumFIELDSHEETChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.Enumerations.EnumHOMOLOG_TABLEChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.Enumerations.EnumTABLESHEETChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface">
 <summary>
 
 </summary>
<remarks>Data-source is 'MASTERSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.CreateNewTemplateInterface">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._InterfaceCode">
<summary>
Interface Code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._InterfaceType">
<summary>
Type of interface.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._ProcessRoutineNameExecutedBefore">
<summary>
Name of the process or routine that must be executed before the interfaces execution generic process
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._InterfaceFormat">
<summary>
Formats of the interface.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._ExternalSystemCode">
<summary>
Code of the external system.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._SelectInstructionOfTheInterface">
<summary>
&#34;Select&#34; Instruction related to the interface
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._InterfaceExecutionPeriod">
<summary>
Frequency of execution of the automatic interface.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._TemplateDescription">
<summary>
Description of the template
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._OperatorUserCode">
<summary>
Code of the user who executes the process (automatic interface)
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._AutomaticExecution">
<summary>
Indicator of automatic execution of the interface
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._ShortDescription">
<summary>
Short description of the Interface.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._GroupingIndicator">
<summary>
It indicates that the interface is generated from the grouping of the selected information
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._GeneralStatusofTheRecord">
<summary>
General status of the record
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._OperationType">
<summary>
Type of Vtime operation.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._ExecutedOnline">
<summary>
It indicates if the interface is executed online
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._NoteID">
<summary>
Number of the note containing the comments.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._ProcessRoutineNameExecutedAfter">
<summary>
Name of the process or routine that must be executed after the interfaces execution generic process
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._FilePrefixName">
<summary>
Prefix for the name of the output file
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._Header">
<summary>
Interface - header
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._Interface">
<summary>
Interface - Management of total amounts
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._ColumnIndicator">
<summary>
Column indicator of the type of record
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._MassiveProcessingIndicator">
<summary>
Indicator of massive processing.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._OutputInterfaceFile">
<summary>
Fill in of blanks for the output interface file
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._AlignmentType">
<summary>
Type of alignment
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._PathOfTheOutputFile">
<summary>
Path of the output file
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._FieldSeparator">
<summary>
Definition of the field separator
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._RoutineName">
<summary>
Name of the routine to name files
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._GridIndicator">
<summary>
It indicates whether the grid of the window must be shown
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._ViewOutput">
<summary>
Indicator of generation of output interface view
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._ReportIndicator">
<summary>
Indicator of generation of .
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._FileNameGeneratedByTheInterface">
<summary>
Name of the .
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._ParentInterfaceIndicator">
<summary>
Indicator of parent interface
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._GeneratedUniqueFile">
<summary>
It indicates that the interface is generated in one file.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._InterfaceQuery">
<summary>
Query of interface generation
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._XSLFileIndicator">
<summary>
It indicates that the interface generates a XSL file
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._QueryToGenerateXSLFile">
<summary>
Query to generate the .
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._RoutineForOutputName">
<summary>
Name of the routine to generate the name of the output interface
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._OutputRoutine">
<summary>
Name of the routine to generate the output
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._WorkflowName">
<summary>
Workflow name
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._NameOfTheWorkflowFolder">
<summary>
Name of the Workflow Folder
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._SQUEPROCESS">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._SQUEQUERY">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._ST_INTERFACE">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._DateFormat">
<summary>
Date Format.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._Decimalseparator">
<summary>
Character to use as a decimal separator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._TotalColumns">
<summary>
Total File Columns.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._AverageRecords">
<summary>
Average number of records.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._XSLHeader">
<summary>
XSL Header.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._CharacterSet">
<summary>
Character set of the output file.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._UnicodeIndicator">
<summary>
Unicode indicator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._SMOVE_PROCESSED">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._FIELDSHEETs">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._TABLESHEETs">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.InterfaceCode">
<summary>
Interface Code (NSHEET)..
</summary>
<remarks>Data-source is 'MASTERSHEET.NSHEET'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.InterfaceType">
<summary>
Type of interface. (NINTERTYPE)..
</summary>
<remarks>Data-source is 'MASTERSHEET.NINTERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.ProcessRoutineNameExecutedBefore">
<summary>
Name of the process or routine that must be executed before the interfaces execution generic process (SPROCESS)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SPROCESS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.InterfaceFormat">
<summary>
Formats of the interface. (NFORMAT)..
</summary>
<remarks>Data-source is 'MASTERSHEET.NFORMAT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'MASTERSHEET.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.ExternalSystemCode">
<summary>
Code of the external system. (NSYSTEM)..
</summary>
<remarks>Data-source is 'MASTERSHEET.NSYSTEM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.SelectInstructionOfTheInterface">
<summary>
&#34;Select&#34; Instruction related to the interface (SSELECT)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SSELECT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.InterfaceExecutionPeriod">
<summary>
Frequency of execution of the automatic interface. (NPERIOD)..
</summary>
<remarks>Data-source is 'MASTERSHEET.NPERIOD'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'MASTERSHEET.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.TemplateDescription">
<summary>
Description of the template (SDESCRIPT)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.OperatorUserCode">
<summary>
Code of the user who executes the process (automatic interface) (NUSEROPER)..
</summary>
<remarks>Data-source is 'MASTERSHEET.NUSEROPER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.AutomaticExecution">
<summary>
Indicator of automatic execution of the interface (SAUTOMATIC)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SAUTOMATIC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.ShortDescription">
<summary>
Short description of the Interface. (SSHORTDESC)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SSHORTDESC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.GroupingIndicator">
<summary>
It indicates that the interface is generated from the grouping of the selected information (SGROUPBY)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SGROUPBY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.GeneralStatusofTheRecord">
<summary>
General status of the record (SSTATUSSHEET)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SSTATUSSHEET'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.OperationType">
<summary>
Type of Vtime operation. (NOPERTYPE)..
</summary>
<remarks>Data-source is 'MASTERSHEET.NOPERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.ExecutedOnline">
<summary>
It indicates if the interface is executed online (SONLINE)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SONLINE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.NoteID">
<summary>
Number of the note containing the comments. (NNOTENUM)..
</summary>
<remarks>Data-source is 'MASTERSHEET.NNOTENUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.ProcessRoutineNameExecutedAfter">
<summary>
Name of the process or routine that must be executed after the interfaces execution generic process (SPROCESS_END)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SPROCESS_END'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.FilePrefixName">
<summary>
Prefix for the name of the output file (SPREFIX_FNAME)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SPREFIX_FNAME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.Header">
<summary>
Interface - header (SHEADER)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SHEADER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.Interface">
<summary>
Interface - Management of total amounts (STOTAL)..
</summary>
<remarks>Data-source is 'MASTERSHEET.STOTAL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.ColumnIndicator">
<summary>
Column indicator of the type of record (NPOSITION)..
</summary>
<remarks>Data-source is 'MASTERSHEET.NPOSITION'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.MassiveProcessingIndicator">
<summary>
Indicator of massive processing. (SMASSIVE)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SMASSIVE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.OutputInterfaceFile">
<summary>
Fill in of blanks for the output interface file (SSPACE)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SSPACE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.AlignmentType">
<summary>
Type of alignment (NTYPE_ALIGN)..
</summary>
<remarks>Data-source is 'MASTERSHEET.NTYPE_ALIGN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.PathOfTheOutputFile">
<summary>
Path of the output file (SPATH)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SPATH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.FieldSeparator">
<summary>
Definition of the field separator (SSEPARATOR)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SSEPARATOR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.RoutineName">
<summary>
Name of the routine to name files (SROUTINE)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SROUTINE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.GridIndicator">
<summary>
It indicates whether the grid of the window must be shown (SNOGRID)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SNOGRID'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.ViewOutput">
<summary>
Indicator of generation of output interface view (SVIEW_INTERFACE)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SVIEW_INTERFACE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.ReportIndicator">
<summary>
Indicator of generation of . (SVIEW_REPORT)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SVIEW_REPORT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.FileNameGeneratedByTheInterface">
<summary>
Name of the . (SREPORT)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SREPORT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.ParentInterfaceIndicator">
<summary>
Indicator of parent interface (SSHEET_FATHER)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SSHEET_FATHER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.GeneratedUniqueFile">
<summary>
It indicates that the interface is generated in one file. (SFILE_UNIQUE)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SFILE_UNIQUE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.InterfaceQuery">
<summary>
Query of interface generation (SQUERY)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SQUERY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.XSLFileIndicator">
<summary>
It indicates that the interface generates a XSL file (SXSL)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SXSL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.QueryToGenerateXSLFile">
<summary>
Query to generate the . (SQUERY_XSL)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SQUERY_XSL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.RoutineForOutputName">
<summary>
Name of the routine to generate the name of the output interface (SNAME_ROUTINE)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SNAME_ROUTINE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.OutputRoutine">
<summary>
Name of the routine to generate the output (SOUT_ROUTINE)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SOUT_ROUTINE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.WorkflowName">
<summary>
Workflow name (SWORKFLOWNAME)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SWORKFLOWNAME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.NameOfTheWorkflowFolder">
<summary>
Name of the Workflow Folder (SFOLDER)..
</summary>
<remarks>Data-source is 'MASTERSHEET.SFOLDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.SQUEPROCESS">
<summary>
.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'MASTERSHEET.SQUEPROCESS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.SQUEQUERY">
<summary>
.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'MASTERSHEET.SQUEQUERY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.ST_INTERFACE">
<summary>
.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'MASTERSHEET.ST_INTERFACE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.DateFormat">
<summary>
Date Format. (SDATEFORMAT)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'MASTERSHEET.SDATEFORMAT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.Decimalseparator">
<summary>
Character to use as a decimal separator. (SDECIMAL)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'MASTERSHEET.SDECIMAL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.TotalColumns">
<summary>
Total File Columns. (NTOTALCOLUMNS)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'MASTERSHEET.NTOTALCOLUMNS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.AverageRecords">
<summary>
Average number of records. (NAVERAGERECORDS)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'MASTERSHEET.NAVERAGERECORDS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.XSLHeader">
<summary>
XSL Header. (SHEADER_XSL)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'MASTERSHEET.SHEADER_XSL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.CharacterSet">
<summary>
Character set of the output file. (SENCODING)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'MASTERSHEET.SENCODING'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.UnicodeIndicator">
<summary>
Unicode indicator. (SUNICODE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'MASTERSHEET.SUNICODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.SMOVE_PROCESSED">
<summary>
.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'MASTERSHEET.SMOVE_PROCESSED'.</remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface._Notes">
<summary>
Notes.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.Notes">
<summary>
Notes.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.NewNotesInstance">
<summary>
Initializes the 'Notes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.NewNoteItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Notes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'Notes' class, previously added to the collection.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.NewFIELDSHEETsInstance">
<summary>
Initializes the 'FIELDSHEETs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.NewFIELDSHEETItem(System.Boolean)">
<summary>
Add a new item to the collection of 'FIELDSHEETs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'FIELDSHEET' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.FIELDSHEETs">
<summary>
 collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.NewTABLESHEETsInstance">
<summary>
Initializes the 'TABLESHEETs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.NewTABLESHEETItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TABLESHEETs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TABLESHEET' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.TABLESHEETs">
<summary>
 collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TemplateInterfaceItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterface.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterfaceCollection">
 <summary>
 Collection for TemplateInterface class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterfaceCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterfaceCollection.AddTemplateInterface">
 <summary>
 Add an instance of class 'TemplateInterface' in the TemplateInterfaceCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterfaceCollection.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterfaceCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterfaceCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterfaceCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TemplateInterfaceCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE">
 <summary>
 
 </summary>
<remarks>Data-source is 'T_ERR_INTERFACE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.CreateNewT_ERR_INTERFACE">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._Key">
<summary>
Key of the temporary table
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._CorrelativeNumber">
<summary>
Correlative number of error messages
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._Record">
<summary>
Number of the record originating the error
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._ErrorNumber">
<summary>
Error number
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._Description">
<summary>
Description of the error
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._CertificateNumber">
<summary>
Number identifying the Certificate
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._ClientID">
<summary>
Code of The Client.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._CliamNumber">
<summary>
Number identifying the claim
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.Key">
<summary>
Key of the temporary table (SKEY)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.SKEY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.CorrelativeNumber">
<summary>
Correlative number of error messages (NSEQ)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.NSEQ'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.Record">
<summary>
Number of the record originating the error (NROW)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.NROW'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.ErrorNumber">
<summary>
Error number (NERROR)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.NERROR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.Description">
<summary>
Description of the error (SDESCRIPT)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.RecordType">
<summary>
Type of Record. (SCERTYPE)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.SCERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.RecordTypeEnum">
<summary>
Type of Record.
</summary>
<remarks>This property use a enumeration based on property 'RecordType'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.RecordTypeEnumText">
<summary>
Type of Record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.LineOfBusiness">
<summary>
Code of the line of business. (NBRANCH)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.NBRANCH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.ProductCode">
<summary>
Code of the product. (NPRODUCT)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.NPRODUCT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application. (NPOLICY)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.NPOLICY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.CertificateNumber">
<summary>
Number identifying the Certificate (NCERTIF)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.NCERTIF'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.ClientID">
<summary>
Code of The Client. (SCLIENT)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.SCLIENT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.CliamNumber">
<summary>
Number identifying the claim (NCLAIM)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.NCLAIM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'T_ERR_INTERFACE.DCOMPDATE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="T_ERR_INTERFACEItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACE.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACECollection">
 <summary>
 Collection for T_ERR_INTERFACE class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACECollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACECollection.AddT_ERR_INTERFACE">
 <summary>
 Add an instance of class 'T_ERR_INTERFACE' in the T_ERR_INTERFACECollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACECollection.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACECollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACECollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACECollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.T_ERR_INTERFACECollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE">
 <summary>
 
 </summary>
<remarks>Data-source is 'CALEND_INTERFACE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.CreateNewCALEND_INTERFACE">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE._InterfaceCode">
<summary>
Interface Code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE._ID">
<summary>
Consecutive Number identifying The Record as sole.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE._ProcessDay">
<summary>
Day when the process must be executed
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE._ProcessDate">
<summary>
Date when the process must be executed
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE._ProcessTime">
<summary>
Time when the process must be executed
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE._ExecutingMonth">
<summary>
Month when the process must be executed
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.InterfaceCode">
<summary>
Interface Code (NSHEET)..
</summary>
<remarks>Data-source is 'CALEND_INTERFACE.NSHEET'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.ID">
<summary>
Consecutive Number identifying The Record as sole. (NID)..
</summary>
<remarks>Data-source is 'CALEND_INTERFACE.NID'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.ProcessDay">
<summary>
Day when the process must be executed (NDAY)..
</summary>
<remarks>Data-source is 'CALEND_INTERFACE.NDAY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.ProcessDate">
<summary>
Date when the process must be executed (DDATEPROC)..
</summary>
<remarks>Data-source is 'CALEND_INTERFACE.DDATEPROC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.ProcessTime">
<summary>
Time when the process must be executed (SHOUR)..
</summary>
<remarks>Data-source is 'CALEND_INTERFACE.SHOUR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'CALEND_INTERFACE.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'CALEND_INTERFACE.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.ExecutingMonth">
<summary>
Month when the process must be executed (NMONTH)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'CALEND_INTERFACE.NMONTH'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="CALEND_INTERFACEItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACE.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACECollection">
 <summary>
 Collection for CALEND_INTERFACE class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACECollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACECollection.AddCALEND_INTERFACE">
 <summary>
 Add an instance of class 'CALEND_INTERFACE' in the CALEND_INTERFACECollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACECollection.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACECollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACECollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACECollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.CALEND_INTERFACECollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET">
 <summary>
 
 </summary>
<remarks>Data-source is 'DEPEND_SHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.CreateNewDEPEND_SHEET">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET._ParentInterface">
<summary>
Parent interface
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET._ChildInterface">
<summary>
Child interface
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.ParentInterface">
<summary>
Parent interface (NSHEET_FATHER)..
</summary>
<remarks>Data-source is 'DEPEND_SHEET.NSHEET_FATHER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.ChildInterface">
<summary>
Child interface (NSHEET_CHILD)..
</summary>
<remarks>Data-source is 'DEPEND_SHEET.NSHEET_CHILD'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'DEPEND_SHEET.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'DEPEND_SHEET.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="DEPEND_SHEETItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEET.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEETCollection">
 <summary>
 Collection for DEPEND_SHEET class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEETCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEETCollection.AddDEPEND_SHEET">
 <summary>
 Add an instance of class 'DEPEND_SHEET' in the DEPEND_SHEETCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEETCollection.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEETCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEETCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEETCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.DEPEND_SHEETCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET">
 <summary>
 
 </summary>
<remarks>Data-source is 'FIELDSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.CreateNewFIELDSHEET">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._InterfaceCode">
<summary>
Interface Code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._FieldCode">
<summary>
Code of the field in the template interface.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._FieldType">
<summary>
Type of field for the interface.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._TableName">
<summary>
Name of the table to which the field belongs.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._FieldName">
<summary>
Name or description field.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._ColumnName">
<summary>
Name of the column in the database
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._DafaultValue">
<summary>
Default Value
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._RoutineName">
<summary>
Name of the routine that calculates the value of the field.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._Order">
<summary>
Order to generate the output data of the interface.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._OrderOfAppearance">
<summary>
Order of appearance of the column in the template
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._TableNameOrProcess">
<summary>
Table name or process (Store Procedure) from which the list of values is generated.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._FieldLength">
<summary>
Length of the field.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._DeploymentObjectTypes">
<summary>
Object Types deployment.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._HomologousTableCode">
<summary>
Homologous table code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._Operator">
<summary>
Logical code of the condition.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._Condition">
<summary>
Logical code of the condition.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._CommentRelatedToTheField">
<summary>
Comment related to the field
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._TextRelatedByTheCondition">
<summary>
Text related by the condition.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._RequiredField">
<summary>
It indicates whether the field is required.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._LastEntry">
<summary>
It Indicates whether to prosecute from the last entry reported by the interface.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._TypeofField">
<summary>
Type of Field.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._RightParenthesisIndicator">
<summary>
Indicator of right parenthesis
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._LeftParenthesisIndicator">
<summary>
Indicator of left parenthesis
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._DecimalsOfTheField">
<summary>
Number of decimal digits in the field
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._ReportIndicator">
<summary>
It indicates that a report will be generated
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._DummyLPADVAR">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._DummyRPADVAR">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._Level">
<summary>
Level to the field
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._DuplicityOrder">
<summary>
Field Order Duplicity
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._ConsecutiveNumber">
<summary>
Consecutive number identifying the record as unique.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._TypeDefinitionCode">
<summary>
Code definition type.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._AttributeDescription">
<summary>
Particular Data Attribute Description.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET._Hidden">
<summary>
Hidden
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.InterfaceCode">
<summary>
Interface Code (NSHEET)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NSHEET'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.FieldCode">
<summary>
Code of the field in the template interface. (NFIELD)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NFIELD'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'FIELDSHEET.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.FieldType">
<summary>
Type of field for the interface. (NFIELDTYPE)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NFIELDTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.TableName">
<summary>
Name of the table to which the field belongs. (STABLE)..
</summary>
<remarks>Data-source is 'FIELDSHEET.STABLE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.FieldName">
<summary>
Name or description field. (SFIELDDESC)..
</summary>
<remarks>Data-source is 'FIELDSHEET.SFIELDDESC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.ColumnName">
<summary>
Name of the column in the database (SCOLUMNNAME)..
</summary>
<remarks>Data-source is 'FIELDSHEET.SCOLUMNNAME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.DafaultValue">
<summary>
Default Value (SVALUE)..
</summary>
<remarks>Data-source is 'FIELDSHEET.SVALUE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.RoutineName">
<summary>
Name of the routine that calculates the value of the field. (SRUTINE)..
</summary>
<remarks>Data-source is 'FIELDSHEET.SRUTINE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.Order">
<summary>
Order to generate the output data of the interface. (NROWORDER)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NROWORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.OrderOfAppearance">
<summary>
Order of appearance of the column in the template (NFIELDORDER)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NFIELDORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.TableNameOrProcess">
<summary>
Table name or process (Store Procedure) from which the list of values is generated. (SVALUESLIST)..
</summary>
<remarks>Data-source is 'FIELDSHEET.SVALUESLIST'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.FieldLength">
<summary>
Length of the field. (NFIELDLARGE)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NFIELDLARGE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.DeploymentObjectTypes">
<summary>
Object Types deployment. (NOBJTYPE)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NOBJTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.HomologousTableCode">
<summary>
Homologous table code (NTABLEHOMO)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NTABLEHOMO'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.Operator">
<summary>
Logical code of the condition. (NOPERATOR)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NOPERATOR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.Condition">
<summary>
Logical code of the condition. (NCONDIT)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NCONDIT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.CommentRelatedToTheField">
<summary>
Comment related to the field (SFIELDCOMMEN)..
</summary>
<remarks>Data-source is 'FIELDSHEET.SFIELDCOMMEN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.TextRelatedByTheCondition">
<summary>
Text related by the condition. (SFIELDREL)..
</summary>
<remarks>Data-source is 'FIELDSHEET.SFIELDREL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.RequiredField">
<summary>
It indicates whether the field is required. (SOBLIGATORY)..
</summary>
<remarks>Data-source is 'FIELDSHEET.SOBLIGATORY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.LastEntry">
<summary>
It Indicates whether to prosecute from the last entry reported by the interface. (SLASTMOVE)..
</summary>
<remarks>Data-source is 'FIELDSHEET.SLASTMOVE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.TypeofField">
<summary>
Type of Field. (NDATATYPE)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NDATATYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.RightParenthesisIndicator">
<summary>
Indicator of right parenthesis (SRPARENTH)..
</summary>
<remarks>Data-source is 'FIELDSHEET.SRPARENTH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.LeftParenthesisIndicator">
<summary>
Indicator of left parenthesis (SLPARENTH)..
</summary>
<remarks>Data-source is 'FIELDSHEET.SLPARENTH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.DecimalsOfTheField">
<summary>
Number of decimal digits in the field (NDECIMAL)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NDECIMAL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.ReportIndicator">
<summary>
It indicates that a report will be generated (SREPORT)..
</summary>
<remarks>Data-source is 'FIELDSHEET.SREPORT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.DummyLPADVAR">
<summary>
 (LPADVAR)..
</summary>
<remarks>Data-source is 'FIELDSHEET.LPADVAR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.DummyRPADVAR">
<summary>
 (RPADVAR)..
</summary>
<remarks>Data-source is 'FIELDSHEET.RPADVAR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.Level">
<summary>
Level to the field (NLEVEL)..
</summary>
<remarks>Data-source is 'FIELDSHEET.NLEVEL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.DuplicityOrder">
<summary>
Field Order Duplicity (NCRITER_ORDER)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'FIELDSHEET.NCRITER_ORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.ConsecutiveNumber">
<summary>
Consecutive number identifying the record as unique. (NIDREC)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'FIELDSHEET.NIDREC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.TypeDefinitionCode">
<summary>
Code definition type. (NDEFTYPE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'FIELDSHEET.NDEFTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.AttributeDescription">
<summary>
Particular Data Attribute Description. (SDESCRIPT)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'FIELDSHEET.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.Hidden">
<summary>
Hidden (SHIDDEN)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'FIELDSHEET.SHIDDEN'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="FIELDSHEETItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEET.AttributeDescriptionDescription">
 <summary>
 Particular Data Attribute Description.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE6786'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEETCollection">
 <summary>
 Collection for FIELDSHEET class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEETCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEETCollection.AddFIELDSHEET">
 <summary>
 Add an instance of class 'FIELDSHEET' in the FIELDSHEETCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEETCollection.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEETCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEETCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEETCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.FIELDSHEETCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE">
 <summary>
 
 </summary>
<remarks>Data-source is 'HOMOLOG_TABLE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.CreateNewHOMOLOG_TABLE">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._ExternalSystemCode">
<summary>
Code of the external system.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._MapingTable">
<summary>
Code identifying the table to homologate
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._ConsecutiveNumber">
<summary>
Unique correlative number of the record
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._ColumnNameInTheTemplate">
<summary>
Name of the column in the internal template
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._InternalCodeToMap">
<summary>
Internal code to be mapped to the external code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._AllowedValues">
<summary>
Possible Values Table in the system
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._TableAssociatedField">
<summary>
Table related to the field.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._ColumnName">
<summary>
Name of the column in the external template
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._ExternalCodeToMap">
<summary>
External code to be mapped to the internal code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._OverridingValue">
<summary>
Indicator used to determine which is the overrading value (prevailing value)
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.ExternalSystemCode">
<summary>
Code of the external system. (NSYSTEM)..
</summary>
<remarks>Data-source is 'HOMOLOG_TABLE.NSYSTEM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.MapingTable">
<summary>
Code identifying the table to homologate (NTABLE)..
</summary>
<remarks>Data-source is 'HOMOLOG_TABLE.NTABLE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.ConsecutiveNumber">
<summary>
Unique correlative number of the record (NID)..
</summary>
<remarks>Data-source is 'HOMOLOG_TABLE.NID'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.ColumnNameInTheTemplate">
<summary>
Name of the column in the internal template (SCOLUMNNAME_VT)..
</summary>
<remarks>Data-source is 'HOMOLOG_TABLE.SCOLUMNNAME_VT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.InternalCodeToMap">
<summary>
Internal code to be mapped to the external code (SCODVALUE_VT)..
</summary>
<remarks>Data-source is 'HOMOLOG_TABLE.SCODVALUE_VT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.AllowedValues">
<summary>
Possible Values Table in the system (SVALUE_VT)..
</summary>
<remarks>Data-source is 'HOMOLOG_TABLE.SVALUE_VT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.TableAssociatedField">
<summary>
Table related to the field. (STABLENAME)..
</summary>
<remarks>Data-source is 'HOMOLOG_TABLE.STABLENAME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.ColumnName">
<summary>
Name of the column in the external template (SCOLUMNNAME)..
</summary>
<remarks>Data-source is 'HOMOLOG_TABLE.SCOLUMNNAME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.ExternalCodeToMap">
<summary>
External code to be mapped to the internal code (SCODVALUE)..
</summary>
<remarks>Data-source is 'HOMOLOG_TABLE.SCODVALUE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.OverridingValue">
<summary>
Indicator used to determine which is the overrading value (prevailing value) (SPREDOM)..
</summary>
<remarks>Data-source is 'HOMOLOG_TABLE.SPREDOM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'HOMOLOG_TABLE.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'HOMOLOG_TABLE.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="HOMOLOG_TABLEItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLE.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLECollection">
 <summary>
 Collection for HOMOLOG_TABLE class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLECollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLECollection.AddHOMOLOG_TABLE">
 <summary>
 Add an instance of class 'HOMOLOG_TABLE' in the HOMOLOG_TABLECollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLECollection.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLECollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLECollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLECollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.HOMOLOG_TABLECollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET">
 <summary>
 
 </summary>
<remarks>Data-source is 'TABLESHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.CreateNewTABLESHEET">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET._InterfaceCode">
<summary>
Code of the interface template
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET._Name">
<summary>
Name of the database table
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET._Alias">
<summary>
Alias of the name of the database table
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET._TableLocation">
<summary>
Location of the table in the &#34;FROM&#34; instruction
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.InterfaceCode">
<summary>
Code of the interface template (NSHEET)..
</summary>
<remarks>Data-source is 'TABLESHEET.NSHEET'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.Name">
<summary>
Name of the database table (STABLE)..
</summary>
<remarks>Data-source is 'TABLESHEET.STABLE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.Alias">
<summary>
Alias of the name of the database table (SALIAS)..
</summary>
<remarks>Data-source is 'TABLESHEET.SALIAS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.TableLocation">
<summary>
Location of the table in the &#34;FROM&#34; instruction (NORDER)..
</summary>
<remarks>Data-source is 'TABLESHEET.NORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'TABLESHEET.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'TABLESHEET.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TABLESHEETItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEET.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEETCollection">
 <summary>
 Collection for TABLESHEET class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEETCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEETCollection.AddTABLESHEET">
 <summary>
 Add an instance of class 'TABLESHEET' in the TABLESHEETCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEETCollection.Compare(InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEETCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEETCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEETCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Interfaces.TABLESHEETCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.Enumerations.EnumAuthorizationLevelChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.Enumerations.EnumBranchOfficeAccesChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.Enumerations.EnumCurrencyAllowedBySchemeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.Enumerations.EnumPaymentRequestConceptBySchemeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.Enumerations.EnumSecuritySchemeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.Enumerations.EnumTransactionsBySchemeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.Enumerations.EnumUnderwritingAndClaimLimitChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.Enumerations.EnumUserChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.Enumerations.EnumUserCashNumberChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.Enumerations.EnumWindowsSystemChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel">
 <summary>
 Authority levels by module and transaction.
 </summary>
<remarks>Data-source is 'LEVELS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.CreateNewAuthorizationLevel">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._ModuleOrTransaction">
<summary>
Module or transaction indicator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._ModuleOrTransactionCode">
<summary>
Code of the Module/Transaction.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._MinimumSecurityLevel">
<summary>
Minimum updating level (security) that the user must have in order to execute the transaction update.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._InquirySecurityLevel">
<summary>
Minimum required security level for inquiry.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._SupervisionIndicator">
<summary>
Supervision indicator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._Permitted">
<summary>
Allowed scheme indicator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel._UserIP">
<summary>
IP Address of the User.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.SecuritySchemeCode">
<summary>
Security Scheme Code (SSCHE_CODE)..
</summary>
<remarks>Data-source is 'LEVELS.SSCHE_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.ModuleOrTransaction">
<summary>
Module or transaction indicator. (SIND_TYPE)..
</summary>
<remarks>Data-source is 'LEVELS.SIND_TYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.ModuleOrTransactionCode">
<summary>
Code of the Module/Transaction. (SCODE_MT)..
</summary>
<remarks>Data-source is 'LEVELS.SCODE_MT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.MinimumSecurityLevel">
<summary>
Minimum updating level (security) that the user must have in order to execute the transaction update. (NAMELEVEL)..
</summary>
<remarks>Data-source is 'LEVELS.NAMELEVEL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'LEVELS.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.InquirySecurityLevel">
<summary>
Minimum required security level for inquiry. (NINQLEVEL)..
</summary>
<remarks>Data-source is 'LEVELS.NINQLEVEL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.SupervisionIndicator">
<summary>
Supervision indicator. (SSUPERVIS)..
</summary>
<remarks>Data-source is 'LEVELS.SSUPERVIS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'LEVELS.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.Permitted">
<summary>
Allowed scheme indicator. (SPERMITTED)..
</summary>
<remarks>Data-source is 'LEVELS.SPERMITTED'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.UserIP">
<summary>
IP Address of the User. (SIPUSER)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'LEVELS.SIPUSER'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.Compare(InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="AuthorizationLevelItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevel.ModuleOrTransactionDescription">
 <summary>
 Module or transaction indicator.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE511'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevelCollection">
 <summary>
 Collection for AuthorizationLevel class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevelCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevelCollection.AddAuthorizationLevel">
 <summary>
 Add an instance of class 'AuthorizationLevel' in the AuthorizationLevelCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevelCollection.Compare(InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevelCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevelCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevelCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.AuthorizationLevelCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces">
 <summary>
 Access to offices and companies.
 </summary>
<remarks>Data-source is 'OFF_ACC'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.CreateNewBranchOfficeAcces">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces._SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces._BranchOffice">
<summary>
Code of the Branch Office
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces._InquiryIndicator">
<summary>
Inquiry indicator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces._UpdateIndicator">
<summary>
Update indicator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces._UserIP">
<summary>
IP Address of the User.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.SecuritySchemeCode">
<summary>
Security Scheme Code (SSCHE_CODE)..
</summary>
<remarks>Data-source is 'OFF_ACC.SSCHE_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.BranchOffice">
<summary>
Code of the Branch Office (NOFFICE)..
</summary>
<remarks>Data-source is 'OFF_ACC.NOFFICE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'OFF_ACC.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.InquiryIndicator">
<summary>
Inquiry indicator. (SIND_INQU)..
</summary>
<remarks>Data-source is 'OFF_ACC.SIND_INQU'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.UpdateIndicator">
<summary>
Update indicator. (SIND_UPDA)..
</summary>
<remarks>Data-source is 'OFF_ACC.SIND_UPDA'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.RecordStatus">
<summary>
Status of the record. (SSTATREGT)..
</summary>
<remarks>Data-source is 'OFF_ACC.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.RecordStatusEnum">
<summary>
Status of the record.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.RecordStatusEnumText">
<summary>
Status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'OFF_ACC.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.UserIP">
<summary>
IP Address of the User. (SIPUSER)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'OFF_ACC.SIPUSER'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.Compare(InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="BranchOfficeAccesItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAcces.BranchOfficeDescription">
 <summary>
 Code of the Branch Office
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE9'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAccesCollection">
 <summary>
 Collection for BranchOfficeAcces class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAccesCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAccesCollection.AddBranchOfficeAcces">
 <summary>
 Add an instance of class 'BranchOfficeAcces' in the BranchOfficeAccesCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAccesCollection.Compare(InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAccesCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAccesCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAccesCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.BranchOfficeAccesCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme">
 <summary>
 Currencies allowed in the security schema.
 </summary>
<remarks>Data-source is 'SCHEMA_CUR'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.CreateNewCurrencyAllowedByScheme">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme._SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme._Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme._UserIP">
<summary>
IP Address of the User.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.SecuritySchemeCode">
<summary>
Security Scheme Code (SSCHE_CODE)..
</summary>
<remarks>Data-source is 'SCHEMA_CUR.SSCHE_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.Currency">
<summary>
Code of The Currency. (NCURRENCY)..
</summary>
<remarks>Data-source is 'SCHEMA_CUR.NCURRENCY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'SCHEMA_CUR.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.RecordStatus">
<summary>
Status of the record. (SSTATREGT)..
</summary>
<remarks>Data-source is 'SCHEMA_CUR.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.RecordStatusEnum">
<summary>
Status of the record.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.RecordStatusEnumText">
<summary>
Status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'SCHEMA_CUR.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.UserIP">
<summary>
IP Address of the User. (SIPUSER)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'SCHEMA_CUR.SIPUSER'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.Compare(InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="CurrencyAllowedBySchemeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedByScheme.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedBySchemeCollection">
 <summary>
 Collection for CurrencyAllowedByScheme class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedBySchemeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedBySchemeCollection.AddCurrencyAllowedByScheme">
 <summary>
 Add an instance of class 'CurrencyAllowedByScheme' in the CurrencyAllowedBySchemeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedBySchemeCollection.Compare(InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedBySchemeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedBySchemeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedBySchemeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.CurrencyAllowedBySchemeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem">
 <summary>
 System windows/transactions.
 </summary>
<remarks>Data-source is 'WINDOWS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.CreateNewWindowsSystem">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._WindowLogicalCode">
<summary>
Code of the window (logical code).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._MinimumSecurityLevel">
<summary>
Minimum updating level (security) that the user must have in order to execute the transaction update.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._WindowPhysicalCode">
<summary>
Code of the window (physical code).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._ImageID">
<summary>
Number of the image related to the transaction type (It is showed at main menu).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._Menu">
<summary>
Code of the Menu related to the transaction.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._Description">
<summary>
Transaction or window title.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._DirectExecution">
<summary>
The transaction can be executed directly
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._TableID">
<summary>
Number identifying the generic table updated by the transaction.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._InquirySecurityLevel">
<summary>
Minimum required security level for inquiry.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._Module">
<summary>
Code of the module.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._Alias">
<summary>
Mnemonic to be used to access the transaction.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._Sequence">
<summary>
Order in which the transaction appear in the menu.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._ShortDescription">
<summary>
Short description of the transaction.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._WindowType">
<summary>
Code of the window type.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._HelpFilePath">
<summary>
Path where the help file for the transaction is.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._Width">
<summary>
Width of the transaction header (ASP Version).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._AutomaticReportAtPolicyIssue">
<summary>
It indicates if the transaction corresponds to an automatic execution report during the policy/certificate issue.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._SQUOTE">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._NTYPE_REPORT">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem._SINDLETTER">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.WindowLogicalCode">
<summary>
Code of the window (logical code). (SCODISPL)..
</summary>
<remarks>Data-source is 'WINDOWS.SCODISPL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.MinimumSecurityLevel">
<summary>
Minimum updating level (security) that the user must have in order to execute the transaction update. (NAMELEVEL)..
</summary>
<remarks>Data-source is 'WINDOWS.NAMELEVEL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.WindowPhysicalCode">
<summary>
Code of the window (physical code). (SCODISP)..
</summary>
<remarks>Data-source is 'WINDOWS.SCODISP'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.ImageID">
<summary>
Number of the image related to the transaction type (It is showed at main menu). (NIMG_INDEX)..
</summary>
<remarks>Data-source is 'WINDOWS.NIMG_INDEX'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.Menu">
<summary>
Code of the Menu related to the transaction. (SCODMEN)..
</summary>
<remarks>Data-source is 'WINDOWS.SCODMEN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'WINDOWS.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.Description">
<summary>
Transaction or window title. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'WINDOWS.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.DirectExecution">
<summary>
The transaction can be executed directly (SDIRECTGO)..
</summary>
<remarks>Data-source is 'WINDOWS.SDIRECTGO'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.TableID">
<summary>
Number identifying the generic table updated by the transaction. (NG_IDENTI)..
</summary>
<remarks>Data-source is 'WINDOWS.NG_IDENTI'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.InquirySecurityLevel">
<summary>
Minimum required security level for inquiry. (NINQLEVEL)..
</summary>
<remarks>Data-source is 'WINDOWS.NINQLEVEL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.Module">
<summary>
Code of the module. (NMODULES)..
</summary>
<remarks>Data-source is 'WINDOWS.NMODULES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.ModuleEnum">
<summary>
Code of the module.
</summary>
<remarks>This property use a enumeration based on property '[Module]'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.ModuleEnumText">
<summary>
Code of the module.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.Alias">
<summary>
Mnemonic to be used to access the transaction. (SPSEUDO)..
</summary>
<remarks>Data-source is 'WINDOWS.SPSEUDO'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.Sequence">
<summary>
Order in which the transaction appear in the menu. (NSEQUENCE)..
</summary>
<remarks>Data-source is 'WINDOWS.NSEQUENCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.ShortDescription">
<summary>
Short description of the transaction. (SSHORT_DES)..
</summary>
<remarks>Data-source is 'WINDOWS.SSHORT_DES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.RecordStatus">
<summary>
Status of the record. (SSTATREGT)..
</summary>
<remarks>Data-source is 'WINDOWS.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.RecordStatusEnum">
<summary>
Status of the record.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.RecordStatusEnumText">
<summary>
Status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'WINDOWS.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.WindowType">
<summary>
Code of the window type. (NWINDOWTY)..
</summary>
<remarks>Data-source is 'WINDOWS.NWINDOWTY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.WindowTypeEnum">
<summary>
Code of the window type.
</summary>
<remarks>This property use a enumeration based on property 'WindowType'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.WindowTypeEnumText">
<summary>
Code of the window type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.HelpFilePath">
<summary>
Path where the help file for the transaction is. (SHELPPATH)..
</summary>
<remarks>Data-source is 'WINDOWS.SHELPPATH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.Width">
<summary>
Width of the transaction header (ASP Version). (NHEIGHT)..
</summary>
<remarks>Data-source is 'WINDOWS.NHEIGHT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.AutomaticReportAtPolicyIssue">
<summary>
It indicates if the transaction corresponds to an automatic execution report during the policy/certificate issue. (SAUTOREP)..
</summary>
<remarks>Data-source is 'WINDOWS.SAUTOREP'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.SQUOTE">
<summary>
.
</summary>
<remarks>Data-source is 'WINDOWS.SQUOTE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.NTYPE_REPORT">
<summary>
.
</summary>
<remarks>Data-source is 'WINDOWS.NTYPE_REPORT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.SINDLETTER">
<summary>
.
</summary>
<remarks>Data-source is 'WINDOWS.SINDLETTER'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.Compare(InMotionGIT.General.Entity.Contracts.Security.WindowsSystem,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="WindowsSystemItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.ModuleDescription">
 <summary>
 Code of the module.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE87'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystem.WindowTypeDescription">
 <summary>
 Code of the window type.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE88'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme">
 <summary>
 Payment Request Concepts possible to use under a specific security scheme.
 </summary>
<remarks>Data-source is 'SCHE_PCON'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.CreateNewPaymentRequestConceptByScheme">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme._SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme._RequestReason">
<summary>
Reason why The check is requested.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme._UserIP">
<summary>
IP Address of the User.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.SecuritySchemeCode">
<summary>
Security Scheme Code (SSCHE_CODE)..
</summary>
<remarks>Data-source is 'SCHE_PCON.SSCHE_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.RequestReason">
<summary>
Reason why The check is requested. (NCONCEPT)..
</summary>
<remarks>Data-source is 'SCHE_PCON.NCONCEPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'SCHE_PCON.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'SCHE_PCON.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.RecordStatus">
<summary>
Status of the record. (SSTATREGT)..
</summary>
<remarks>Data-source is 'SCHE_PCON.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.RecordStatusEnum">
<summary>
Status of the record.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.RecordStatusEnumText">
<summary>
Status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.UserIP">
<summary>
IP Address of the User. (SIPUSER)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'SCHE_PCON.SIPUSER'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.Compare(InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="PaymentRequestConceptBySchemeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptByScheme.RequestReasonDescription">
 <summary>
 Reason why The check is requested.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE293'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptBySchemeCollection">
 <summary>
 Collection for PaymentRequestConceptByScheme class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptBySchemeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptBySchemeCollection.AddPaymentRequestConceptByScheme">
 <summary>
 Add an instance of class 'PaymentRequestConceptByScheme' in the PaymentRequestConceptBySchemeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptBySchemeCollection.Compare(InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptBySchemeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptBySchemeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptBySchemeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.PaymentRequestConceptBySchemeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme">
 <summary>
 General information of security schemes.
 </summary>
<remarks>Data-source is 'SECUR_SCHE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.CreateNewSecurityScheme">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._BranchOfficesAccess">
<summary>
Access to branch offices (indicator).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._EffectiveDate">
<summary>
Date as of which the security scheme becomes effective.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._EndingDate">
<summary>
Date up to which the security scheme will remain effective.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._AccessToForeignCurrencies">
<summary>
Indicator of access to foreign currencies
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._UnderwritingLimitsApply">
<summary>
It indicates that underwriting limits apply.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._Description">
<summary>
Complete description of the security scheme.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._SecurityLevel">
<summary>
Security level.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._ShortDescription">
<summary>
Short description of the security scheme.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._StartingTime1">
<summary>
Starting time for first daily period.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._EndingTime1">
<summary>
Ending time for first daily period.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._StartingTime2">
<summary>
Starting time for second daily period.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._EndingTime">
<summary>
Ending time for second daily period.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._QueryStartingTime1">
<summary>
Starting time for first query period.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._QueryEndingTime1">
<summary>
Ending time for first query period.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._QueryStartingTime2">
<summary>
Starting time for second query period.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._QueryEndingTime2">
<summary>
Ending time for second query period.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._QueryByExampleIndicator">
<summary>
Indicator of use of query by example
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._PaymentOrderRestriction">
<summary>
It indicates security restrictions for payment orders.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._DayLifeVersionOfQuotation">
<summary>
Day life of the stand alone version of the quotation, from the date of last update.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._DaysNoticeExpiryVersionQuotation">
<summary>
Days notice of expiry of the stand alone version of the quotation
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._NoteID">
<summary>
Number of the note containing the particular text of the security Scheme.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._UserIP">
<summary>
IP Address of the User.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._AuthorizationLevels">
<summary>
Authority levels by module and transaction.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._UnderwritingAndClaimLimits">
<summary>
Limits underwriting and claims payment.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._BranchOfficeAccesses">
<summary>
Access to offices and companies.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._PaymentRequestConceptBySchemes">
<summary>
Payment Request Concepts possible to use under a specific security scheme.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._TransactionsBySchemes">
<summary>
Table of transactions / operations permitted for a security scheme.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._CurrencyAllowedBySchemes">
<summary>
Currencies allowed in the security schema.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.SecuritySchemeCode">
<summary>
Security Scheme Code (SSCHE_CODE)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.SSCHE_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.BranchOfficesAccess">
<summary>
Access to branch offices (indicator). (NACCESOF)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.NACCESOF'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.EffectiveDate">
<summary>
Date as of which the security scheme becomes effective. (DDATE_FROM)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.DDATE_FROM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.EndingDate">
<summary>
Date up to which the security scheme will remain effective. (DDATE_TO)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.DDATE_TO'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.AccessToForeignCurrencies">
<summary>
Indicator of access to foreign currencies (NIND_CURREN)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.NIND_CURREN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.UnderwritingLimitsApply">
<summary>
It indicates that underwriting limits apply. (NIND_LIMITS)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.NIND_LIMITS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.Description">
<summary>
Complete description of the security scheme. (SLONGDESC)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.SLONGDESC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.SecurityLevel">
<summary>
Security level. (NSECURLEV)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.NSECURLEV'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.ShortDescription">
<summary>
Short description of the security scheme. (SSHORTDES)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.SSHORTDES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.RecordStatus">
<summary>
Status of the record. (SSTATREGT)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.RecordStatusEnum">
<summary>
Status of the record.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.RecordStatusEnumText">
<summary>
Status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.StartingTime1">
<summary>
Starting time for first daily period. (STIME1_FROM)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.STIME1_FROM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.EndingTime1">
<summary>
Ending time for first daily period. (STIME1_TO)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.STIME1_TO'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.StartingTime2">
<summary>
Starting time for second daily period. (STIME2_FROM)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.STIME2_FROM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.EndingTime">
<summary>
Ending time for second daily period. (STIME2_TO)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.STIME2_TO'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.QueryStartingTime1">
<summary>
Starting time for first query period. (STIMEQ1_FRO)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.STIMEQ1_FRO'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.QueryEndingTime1">
<summary>
Ending time for first query period. (STIMEQ1_TO)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.STIMEQ1_TO'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.QueryStartingTime2">
<summary>
Starting time for second query period. (STIMEQ2_FRO)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.STIMEQ2_FRO'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.QueryEndingTime2">
<summary>
Ending time for second query period. (STIMEQ2_TO)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.STIMEQ2_TO'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.QueryByExampleIndicator">
<summary>
Indicator of use of query by example (SUSEQUERY)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.SUSEQUERY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.PaymentOrderRestriction">
<summary>
It indicates security restrictions for payment orders. (NIND_CONCE)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.NIND_CONCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.DayLifeVersionOfQuotation">
<summary>
Day life of the stand alone version of the quotation, from the date of last update. (NDURATION)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.NDURATION'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.DaysNoticeExpiryVersionQuotation">
<summary>
Days notice of expiry of the stand alone version of the quotation (NDAYSADV)..
</summary>
<remarks>Data-source is 'SECUR_SCHE.NDAYSADV'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NoteID">
<summary>
Number of the note containing the particular text of the security Scheme. (NNOTENUM)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'SECUR_SCHE.NNOTENUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.UserIP">
<summary>
IP Address of the User. (SIPUSER)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'SECUR_SCHE.SIPUSER'.</remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme._Notes">
<summary>
Notes.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.Notes">
<summary>
Notes.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewNotesInstance">
<summary>
Initializes the 'Notes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewNoteItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Notes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'Notes' class, previously added to the collection.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewAuthorizationLevelsInstance">
<summary>
Initializes the 'AuthorizationLevels' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewAuthorizationLevelItem(System.Boolean)">
<summary>
Add a new item to the collection of 'AuthorizationLevels', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'AuthorizationLevel' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.AuthorizationLevels">
<summary>
Authority levels by module and transaction. collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewUnderwritingAndClaimLimitsInstance">
<summary>
Initializes the 'UnderwritingAndClaimLimits' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewUnderwritingAndClaimLimitItem(System.Boolean)">
<summary>
Add a new item to the collection of 'UnderwritingAndClaimLimits', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'UnderwritingAndClaimLimit' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.UnderwritingAndClaimLimits">
<summary>
Limits underwriting and claims payment. collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewBranchOfficeAccessesInstance">
<summary>
Initializes the 'BranchOfficeAccesses' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewBranchOfficeAccesItem(System.Boolean)">
<summary>
Add a new item to the collection of 'BranchOfficeAccesses', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'BranchOfficeAcces' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.BranchOfficeAccesses">
<summary>
Access to offices and companies. collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewPaymentRequestConceptBySchemesInstance">
<summary>
Initializes the 'PaymentRequestConceptBySchemes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewPaymentRequestConceptBySchemeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'PaymentRequestConceptBySchemes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'PaymentRequestConceptByScheme' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.PaymentRequestConceptBySchemes">
<summary>
Payment Request Concepts possible to use under a specific security scheme. collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewTransactionsBySchemesInstance">
<summary>
Initializes the 'TransactionsBySchemes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewTransactionsBySchemeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransactionsBySchemes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransactionsByScheme' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.TransactionsBySchemes">
<summary>
Table of transactions / operations permitted for a security scheme. collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewCurrencyAllowedBySchemesInstance">
<summary>
Initializes the 'CurrencyAllowedBySchemes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.NewCurrencyAllowedBySchemeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'CurrencyAllowedBySchemes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'CurrencyAllowedByScheme' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.CurrencyAllowedBySchemes">
<summary>
Currencies allowed in the security schema. collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.Compare(InMotionGIT.General.Entity.Contracts.Security.SecurityScheme,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="SecuritySchemeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecurityScheme.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.SecuritySchemeCollection">
 <summary>
 Collection for SecurityScheme class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecuritySchemeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecuritySchemeCollection.AddSecurityScheme">
 <summary>
 Add an instance of class 'SecurityScheme' in the SecuritySchemeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecuritySchemeCollection.Compare(InMotionGIT.General.Entity.Contracts.Security.SecuritySchemeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.SecuritySchemeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecuritySchemeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.SecuritySchemeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme">
 <summary>
 Table of transactions / operations permitted for a security scheme.
 </summary>
<remarks>Data-source is 'SCHE_TRANSAC'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.CreateNewTransactionsByScheme">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme._SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme._TransactionCode">
<summary>
Transaction code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme._Transaction">
<summary>
Transactions of policies and claims.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme._UserIP">
<summary>
IP Address of the User.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.SecuritySchemeCode">
<summary>
Security Scheme Code (SSCHE_CODE)..
</summary>
<remarks>Data-source is 'SCHE_TRANSAC.SSCHE_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.TransactionCode">
<summary>
Transaction code. (SCODISPL)..
</summary>
<remarks>Data-source is 'SCHE_TRANSAC.SCODISPL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.Transaction">
<summary>
Transactions of policies and claims. (NTRANSAC)..
</summary>
<remarks>Data-source is 'SCHE_TRANSAC.NTRANSAC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'SCHE_TRANSAC.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'SCHE_TRANSAC.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.UserIP">
<summary>
IP Address of the User. (SIPUSER)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'SCHE_TRANSAC.SIPUSER'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.Compare(InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransactionsBySchemeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsByScheme.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.TransactionsBySchemeCollection">
 <summary>
 Collection for TransactionsByScheme class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsBySchemeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsBySchemeCollection.AddTransactionsByScheme">
 <summary>
 Add an instance of class 'TransactionsByScheme' in the TransactionsBySchemeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsBySchemeCollection.Compare(InMotionGIT.General.Entity.Contracts.Security.TransactionsBySchemeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.TransactionsBySchemeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsBySchemeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.TransactionsBySchemeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit">
 <summary>
 Limits underwriting and claims payment.
 </summary>
<remarks>Data-source is 'LIMITS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.CreateNewUnderwritingAndClaimLimit">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._Currency">
<summary>
Code of The Currency.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._ProductCode">
<summary>
Product to which the writing and claims limits are defined.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._LimitToRegisterClaims">
<summary>
Security limit to register claims.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._LimitToPayClaims">
<summary>
Security limit to pay claims.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._PolicySecurityLimit">
<summary>
Security limit for writing policies.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._LimitExgratiaPayment">
<summary>
Security limit to ex gratia payment claims
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit._UserIP">
<summary>
IP Address of the User.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.SecuritySchemeCode">
<summary>
Security Scheme Code (SSCHE_CODE)..
</summary>
<remarks>Data-source is 'LIMITS.SSCHE_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.Currency">
<summary>
Code of The Currency. (NCURRENCY)..
</summary>
<remarks>Data-source is 'LIMITS.NCURRENCY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.LineOfBusiness">
<summary>
Code of the line of business. (NBRANCH)..
</summary>
<remarks>Data-source is 'LIMITS.NBRANCH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.ProductCode">
<summary>
Product to which the writing and claims limits are defined. (NPRODUCT)..
</summary>
<remarks>Data-source is 'LIMITS.NPRODUCT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.LimitToRegisterClaims">
<summary>
Security limit to register claims. (NCLAIM_D)..
</summary>
<remarks>Data-source is 'LIMITS.NCLAIM_D'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.LimitToPayClaims">
<summary>
Security limit to pay claims. (NCLAIM_P)..
</summary>
<remarks>Data-source is 'LIMITS.NCLAIM_P'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'LIMITS.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.PolicySecurityLimit">
<summary>
Security limit for writing policies. (NISSUELIM)..
</summary>
<remarks>Data-source is 'LIMITS.NISSUELIM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.RecordStatus">
<summary>
Status of the record. (SSTATREGT)..
</summary>
<remarks>Data-source is 'LIMITS.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.RecordStatusEnum">
<summary>
Status of the record.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.RecordStatusEnumText">
<summary>
Status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'LIMITS.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.LimitExgratiaPayment">
<summary>
Security limit to ex gratia payment claims (NCLAIM_PEX)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'LIMITS.NCLAIM_PEX'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.UserIP">
<summary>
IP Address of the User. (SIPUSER)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'LIMITS.SIPUSER'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.Compare(InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="UnderwritingAndClaimLimitItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimit.LineOfBusinessDescription">
 <summary>
 Code of the line of business.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE10'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimitCollection">
 <summary>
 Collection for UnderwritingAndClaimLimit class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimitCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimitCollection.AddUnderwritingAndClaimLimit">
 <summary>
 Add an instance of class 'UnderwritingAndClaimLimit' in the UnderwritingAndClaimLimitCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimitCollection.Compare(InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimitCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimitCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimitCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UnderwritingAndClaimLimitCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.User">
 <summary>
 Systems users.
 </summary>
<remarks>Data-source is 'USERS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.CreateNewUser">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._Password">
<summary>
Password
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._BranchOffice">
<summary>
Code of the Branch Office
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._UserInitials">
<summary>
Initials of the user.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._SecuritySchemeCode">
<summary>
Security Scheme Code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._UserType">
<summary>
Users type.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._Department">
<summary>
Code of the department.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._Menu">
<summary>
Code of the menu related to the transaction.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._PasswordChangeIsAllowed">
<summary>
Change of password allowed.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._NeverChangePasswordIndicator">
<summary>
Never change password indicator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._NeverExpiresPasswordIndicator">
<summary>
Never expires password indicator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._BlockedIndicator">
<summary>
Blocked Indicator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._EffectiveDate">
<summary>
Initial date of the effective period
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._nOfficeAgen">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._Agency">
<summary>
Agency to which the user belongs.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._FailedLogonAttempts">
<summary>
Number of consecutive failed login attempts.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._PasswordExpires">
<summary>
Date of expiry of the password.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._LastLogin">
<summary>
Last Login Date
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._IPAddress">
<summary>
IP Address of the user
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.User._UserAmmend">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'USERS.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.Password">
<summary>
Password (SACCESSWO)..
</summary>
<remarks>Data-source is 'USERS.SACCESSWO'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.BranchOffice">
<summary>
Code of the Branch Office (NOFFICE)..
</summary>
<remarks>Data-source is 'USERS.NOFFICE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.ClientID">
<summary>
Code of the client. (SCLIENT)..
</summary>
<remarks>Data-source is 'USERS.SCLIENT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'USERS.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.UserInitials">
<summary>
Initials of the user. (SINITIALS)..
</summary>
<remarks>Data-source is 'USERS.SINITIALS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.SecuritySchemeCode">
<summary>
Security Scheme Code (SSCHE_CODE)..
</summary>
<remarks>Data-source is 'USERS.SSCHE_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.RecordStatus">
<summary>
Status of the record. (SSTATREGT)..
</summary>
<remarks>Data-source is 'USERS.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.RecordStatusEnum">
<summary>
Status of the record.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.RecordStatusEnumText">
<summary>
Status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.UserType">
<summary>
Users type. (STYPE)..
</summary>
<remarks>Data-source is 'USERS.STYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.Department">
<summary>
Code of the department. (NDEPARTME)..
</summary>
<remarks>Data-source is 'USERS.NDEPARTME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.Menu">
<summary>
Code of the menu related to the transaction. (SMENU)..
</summary>
<remarks>Data-source is 'USERS.SMENU'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.PasswordChangeIsAllowed">
<summary>
Change of password allowed. (SCHNEXTLOGON)..
</summary>
<remarks>Data-source is 'USERS.SCHNEXTLOGON'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.NeverChangePasswordIndicator">
<summary>
Never change password indicator. (SNEVERCHANGE)..
</summary>
<remarks>Data-source is 'USERS.SNEVERCHANGE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.NeverExpiresPasswordIndicator">
<summary>
Never expires password indicator. (SNEVEREXPIRES)..
</summary>
<remarks>Data-source is 'USERS.SNEVEREXPIRES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.BlockedIndicator">
<summary>
Blocked Indicator. (SLOCKEDOUT)..
</summary>
<remarks>Data-source is 'USERS.SLOCKEDOUT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.EffectiveDate">
<summary>
Initial date of the effective period (DFROMDATE)..
</summary>
<remarks>Data-source is 'USERS.DFROMDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.nOfficeAgen">
<summary>
.
</summary>
<remarks>Data-source is 'USERS.NOFFICEAGEN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.Agency">
<summary>
Agency to which the user belongs. (NAGENCY)..
</summary>
<remarks>Data-source is 'USERS.NAGENCY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.FailedLogonAttempts">
<summary>
Number of consecutive failed login attempts. (NFAILED_LOGON_ATTEMPTS)..
</summary>
<remarks>Data-source is 'USERS.NFAILED_LOGON_ATTEMPTS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.PasswordExpires">
<summary>
Date of expiry of the password. (DPASSWORD_EXPIRES)..
</summary>
<remarks>Data-source is 'USERS.DPASSWORD_EXPIRES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.LastLogin">
<summary>
Last Login Date (DLASTLOGIN)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'USERS.DLASTLOGIN'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.IPAddress">
<summary>
IP Address of the user (SIPUSER)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'USERS.SIPUSER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.UserAmmend">
<summary>
Code of the user creating or updating the record. (NUSERCODE_ATTACK)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'USERS.NUSERCODE_ATTACK'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.Compare(InMotionGIT.General.Entity.Contracts.Security.User,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="UserItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.User.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.BranchOfficeDescription">
 <summary>
 Code of the Branch Office
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE9'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.UserTypeDescription">
 <summary>
 Users type.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE105'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.User.DepartmentDescription">
 <summary>
 Code of the department.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE84'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.UserCollection">
 <summary>
 Collection for User class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCollection.AddUser">
 <summary>
 Add an instance of class 'User' in the UserCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCollection.Compare(InMotionGIT.General.Entity.Contracts.Security.UserCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber">
 <summary>
 Table of user cash entry.
 </summary>
<remarks>Data-source is 'USER_CASHNUM'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.CreateNewUserCashNumber">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber._CashRegisterNumber">
<summary>
Number of the cash register related to the entry.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber._CashUserCode">
<summary>
Code of the user of the cash register.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber._UserIDOfSupervisor">
<summary>
User ID supervising the cashier register.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber._Supervisor">
<summary>
User code of the supervisor of the cashier register.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber._OfficeCode">
<summary>
Code of Office.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.CashRegisterNumber">
<summary>
Number of the cash register related to the entry. (NCASHNUM)..
</summary>
<remarks>Data-source is 'USER_CASHNUM.NCASHNUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.RecordStatus">
<summary>
Status of the record. (SSTATUS)..
</summary>
<remarks>Data-source is 'USER_CASHNUM.SSTATUS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'USER_CASHNUM.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.CashUserCode">
<summary>
Code of the user of the cash register. (NUSER)..
</summary>
<remarks>Data-source is 'USER_CASHNUM.NUSER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'USER_CASHNUM.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.UserIDOfSupervisor">
<summary>
User ID supervising the cashier register. (NCASHSUP)..
</summary>
<remarks>Data-source is 'USER_CASHNUM.NCASHSUP'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.Supervisor">
<summary>
User code of the supervisor of the cashier register. (NHEADSUP)..
</summary>
<remarks>Data-source is 'USER_CASHNUM.NHEADSUP'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.OfficeCode">
<summary>
Code of Office. (NOFFICEAGEN)..
</summary>
<remarks>Data-source is 'USER_CASHNUM.NOFFICEAGEN'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.Compare(InMotionGIT.General.Entity.Contracts.Security.UserCashNumber,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="UserCashNumberItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumber.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.UserCashNumberCollection">
 <summary>
 Collection for UserCashNumber class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumberCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumberCollection.AddUserCashNumber">
 <summary>
 Add an instance of class 'UserCashNumber' in the UserCashNumberCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumberCollection.Compare(InMotionGIT.General.Entity.Contracts.Security.UserCashNumberCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.UserCashNumberCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumberCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.UserCashNumberCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Security.WindowsSystemCollection">
 <summary>
 Collection for WindowsSystem class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystemCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystemCollection.AddWindowsSystem">
 <summary>
 Add an instance of class 'WindowsSystem' in the WindowsSystemCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystemCollection.Compare(InMotionGIT.General.Entity.Contracts.Security.WindowsSystemCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Security.WindowsSystemCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystemCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Security.WindowsSystemCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Images.Enumerations.EnumImageChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Images.Image">
 <summary>
 Images associated with a claim.
 </summary>
<remarks>Data-source is 'IMAGES'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.CreateNewImage">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._ImageID">
<summary>
Number of the image.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._ConsecutiveNumber">
<summary>
Consecutive number to use as record key.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._Description">
<summary>
Description related to the image.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._ImageContent">
<summary>
Contents of The Image.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._ImageContentPath">
<summary>
This property defines the path of the file that I want to load the byte vector of 'Contents of The Image.'
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._KeepUntil">
<summary>
Date until which the image will be kept in the system
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._RecordType">
<summary>
Record type to which the image belongs.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.ImageID">
<summary>
Number of the image. (NIMAGENUM)..
</summary>
<remarks>Data-source is 'IMAGES.NIMAGENUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.ConsecutiveNumber">
<summary>
Consecutive number to use as record key. (NCONSEC)..
</summary>
<remarks>Data-source is 'IMAGES.NCONSEC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'IMAGES.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.Description">
<summary>
Description related to the image. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'IMAGES.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.ImageContent">
<summary>
Contents of The Image. (IIMAGE)..
</summary>
<remarks>Data-source is 'IMAGES.IIMAGE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.ImageContentPath">
<summary>
This property defines the path of the file that I want to load the byte vector of 'IIMAGE' (IIMAGE).
</summary>
<remarks>Data-source is 'IMAGES.IIMAGE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.KeepUntil">
<summary>
Date until which the image will be kept in the system (DNULLDATE)..
</summary>
<remarks>Data-source is 'IMAGES.DNULLDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.RecordType">
<summary>
Record type to which the image belongs. (NRECTYPE)..
</summary>
<remarks>Data-source is 'IMAGES.NRECTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'IMAGES.NUSERCODE'.</remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Images.Image._Images">
<summary>
Images.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.Image.Images">
<summary>
Images.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.NewImagesInstance">
<summary>
Initializes the 'Images' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.NewImagesItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Images', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'Images' class, previously added to the collection.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.Compare(InMotionGIT.General.Entity.Contracts.Images.Image,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ImageItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.Image.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Images.ImageCollection">
 <summary>
 Collection for Image class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.ImageCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.ImageCollection.AddImage">
 <summary>
 Add an instance of class 'Image' in the ImageCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.ImageCollection.Compare(InMotionGIT.General.Entity.Contracts.Images.ImageCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Images.ImageCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.ImageCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Images.ImageCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Loader.Enumerations.EnumColumnExcelSheetChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Loader.Enumerations.EnumExcelWorksheetForPolicyChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Loader.Enumerations.EnumTemplateColumnsUploadPolicyChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet">
 <summary>
 Columns in the excel sheet.
 </summary>
<remarks>Data-source is 'COLSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.CreateNewColumnExcelSheet">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet._WorkSheetID">
<summary>
Consecutive number identifying the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet._ConsecutiveNumber">
<summary>
Consecutive number identifying the record as unique.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet._ColumnName">
<summary>
Column name in the worksheet.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet._Order">
<summary>
Number of order.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet._SelectionIndicator">
<summary>
Selection indicator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet._Required">
<summary>
Indicator of required column.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.WorkSheetID">
<summary>
Consecutive number identifying the record. (NID)..
</summary>
<remarks>Data-source is 'COLSHEET.NID'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.ConsecutiveNumber">
<summary>
Consecutive number identifying the record as unique. (NIDREC)..
</summary>
<remarks>Data-source is 'COLSHEET.NIDREC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.ColumnName">
<summary>
Column name in the worksheet. (SCOLUMNNAME)..
</summary>
<remarks>Data-source is 'COLSHEET.SCOLUMNNAME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.Order">
<summary>
Number of order. (NORDER)..
</summary>
<remarks>Data-source is 'COLSHEET.NORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.SelectionIndicator">
<summary>
Selection indicator. (SSELECTED)..
</summary>
<remarks>Data-source is 'COLSHEET.SSELECTED'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.Required">
<summary>
Indicator of required column. (SREQUIRE)..
</summary>
<remarks>Data-source is 'COLSHEET.SREQUIRE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'COLSHEET.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'COLSHEET.DCOMPDATE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.Compare(InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ColumnExcelSheetItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheet.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheetCollection">
 <summary>
 Collection for ColumnExcelSheet class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheetCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheetCollection.AddColumnExcelSheet">
 <summary>
 Add an instance of class 'ColumnExcelSheet' in the ColumnExcelSheetCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheetCollection.Compare(InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheetCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheetCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheetCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ColumnExcelSheetCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy">
 <summary>
 Excel templates for loading policies/certificates.
 </summary>
<remarks>Data-source is 'WORKSHEET'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.CreateNewExcelWorksheetForPolicy">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._WorkSheetID">
<summary>
Consecutive number identifying the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._GenerationOfValueList">
<summary>
It indicates whether the list of values are generated in the worksheet .
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._Description">
<summary>
Description of the template.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy._ColumnExcelSheets">
<summary>
Columns in the excel sheet.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.WorkSheetID">
<summary>
Consecutive number identifying the record. (NID)..
</summary>
<remarks>Data-source is 'WORKSHEET.NID'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.LineOfBusiness">
<summary>
Code of the line of business. (NBRANCH)..
</summary>
<remarks>Data-source is 'WORKSHEET.NBRANCH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.ProductCode">
<summary>
Code of the product. (NPRODUCT)..
</summary>
<remarks>Data-source is 'WORKSHEET.NPRODUCT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application. (NPOLICY)..
</summary>
<remarks>Data-source is 'WORKSHEET.NPOLICY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.GenerationOfValueList">
<summary>
It indicates whether the list of values are generated in the worksheet . (SVALUESLIST)..
</summary>
<remarks>Data-source is 'WORKSHEET.SVALUESLIST'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'WORKSHEET.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'WORKSHEET.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.Description">
<summary>
Description of the template. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'WORKSHEET.SDESCRIPT'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.NewColumnExcelSheetsInstance">
<summary>
Initializes the 'ColumnExcelSheets' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.NewColumnExcelSheetItem(System.Boolean)">
<summary>
Add a new item to the collection of 'ColumnExcelSheets', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'ColumnExcelSheet' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.ColumnExcelSheets">
<summary>
Columns in the excel sheet. collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.Compare(InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ExcelWorksheetForPolicyItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicy.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicyCollection">
 <summary>
 Collection for ExcelWorksheetForPolicy class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicyCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicyCollection.AddExcelWorksheetForPolicy">
 <summary>
 Add an instance of class 'ExcelWorksheetForPolicy' in the ExcelWorksheetForPolicyCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicyCollection.Compare(InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicyCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicyCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicyCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.ExcelWorksheetForPolicyCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy">
 <summary>
 Columns Excel template to upload policies / certificates.
 </summary>
<remarks>Data-source is 'GROUP_COLUMNS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.CreateNewTemplateColumnsUploadPolicy">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._ConsecutiveNumber">
<summary>
Consecutive number identifying the record as unique.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._ExcelSpreadsheet">
<summary>
Worksheet code to which the column is associated.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._FieldName">
<summary>
Field name related to a column.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._ColumnName">
<summary>
Column name in the worksheet.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._Order">
<summary>
Order of the column in the worksheet.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._SourceOfValuesList">
<summary>
Name of the table or stored procedure to generate the list of values.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._FileName">
<summary>
File name related to the field.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._RequiredColumn">
<summary>
Column required indicator.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy._Comment">
<summary>
Comment that must appear in the worksheet related to the column
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.ConsecutiveNumber">
<summary>
Consecutive number identifying the record as unique. (NIDREC)..
</summary>
<remarks>Data-source is 'GROUP_COLUMNS.NIDREC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.ExcelSpreadsheet">
<summary>
Worksheet code to which the column is associated. (NSHEET)..
</summary>
<remarks>Data-source is 'GROUP_COLUMNS.NSHEET'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.FieldName">
<summary>
Field name related to a column. (SFIELD)..
</summary>
<remarks>Data-source is 'GROUP_COLUMNS.SFIELD'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'GROUP_COLUMNS.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'GROUP_COLUMNS.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.ColumnName">
<summary>
Column name in the worksheet. (SCOLUMNNAME)..
</summary>
<remarks>Data-source is 'GROUP_COLUMNS.SCOLUMNNAME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.Order">
<summary>
Order of the column in the worksheet. (NORDER)..
</summary>
<remarks>Data-source is 'GROUP_COLUMNS.NORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.SourceOfValuesList">
<summary>
Name of the table or stored procedure to generate the list of values. (SVALUESLIST)..
</summary>
<remarks>Data-source is 'GROUP_COLUMNS.SVALUESLIST'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.FileName">
<summary>
File name related to the field. (STABLE)..
</summary>
<remarks>Data-source is 'GROUP_COLUMNS.STABLE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.RequiredColumn">
<summary>
Column required indicator. (SREQUIRE)..
</summary>
<remarks>Data-source is 'GROUP_COLUMNS.SREQUIRE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.Comment">
<summary>
Comment that must appear in the worksheet related to the column (SCOMMENT)..
</summary>
<remarks>Data-source is 'GROUP_COLUMNS.SCOMMENT'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.Compare(InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TemplateColumnsUploadPolicyItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicy.ExcelSpreadsheetDescription">
 <summary>
 Worksheet code to which the column is associated.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE697'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicyCollection">
 <summary>
 Collection for TemplateColumnsUploadPolicy class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicyCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicyCollection.AddTemplateColumnsUploadPolicy">
 <summary>
 Add an instance of class 'TemplateColumnsUploadPolicy' in the TemplateColumnsUploadPolicyCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicyCollection.Compare(InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicyCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicyCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicyCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Loader.TemplateColumnsUploadPolicyCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Notes.Enumerations.EnumNoteChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Notes.Note">
 <summary>
 Notes of free text.
 </summary>
<remarks>Data-source is 'NOTES'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.CreateNewNote">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._NoteID">
<summary>
Number of the note containing the comments.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._Consecutive">
<summary>
Consecutive number to use as record key.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._Description">
<summary>
General description of the note.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._FreeText">
<summary>
Free Text - Note Description.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._KeepUntil">
<summary>
Date until which the note will be kept in the system.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._RecordType">
<summary>
Type of record identifying the note content.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._DateValidationRecord">
<summary>
DateWhenTheRecordIsValidated
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._ValidUserCode">
<summary>
CodeOfTheUserWhoValidatesTheRecord
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._DateCreationRecord">
<summary>
DateWhenTheRecordIsCreated
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._UserCodeWhoCreates">
<summary>
CodeOfTheUserWhoCreatesTheRecord
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._UserIP">
<summary>
IP Address of the User.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.NoteID">
<summary>
Number of the note containing the comments. (NNOTENUM)..
</summary>
<remarks>Data-source is 'NOTES.NNOTENUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.Consecutive">
<summary>
Consecutive number to use as record key. (NCONSEC)..
</summary>
<remarks>Data-source is 'NOTES.NCONSEC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'NOTES.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.Description">
<summary>
General description of the note. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'NOTES.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.FreeText">
<summary>
Free Text - Note Description. (TDS_TEXT)..
</summary>
<remarks>Data-source is 'NOTES.TDS_TEXT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.KeepUntil">
<summary>
Date until which the note will be kept in the system. (DNULLDATE)..
</summary>
<remarks>Data-source is 'NOTES.DNULLDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.RecordType">
<summary>
Type of record identifying the note content. (NRECTYPE)..
</summary>
<remarks>Data-source is 'NOTES.NRECTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'NOTES.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.DateValidationRecord">
<summary>
DateWhenTheRecordIsValidated (DCHECKDATE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'NOTES.DCHECKDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.ValidUserCode">
<summary>
CodeOfTheUserWhoValidatesTheRecord (NCHECKUSER)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'NOTES.NCHECKUSER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.DateCreationRecord">
<summary>
DateWhenTheRecordIsCreated (DCREATEDATE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'NOTES.DCREATEDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.UserCodeWhoCreates">
<summary>
CodeOfTheUserWhoCreatesTheRecord (NCREATEUSER)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'NOTES.NCREATEUSER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.UserIP">
<summary>
IP Address of the User. (SIPUSER)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'NOTES.SIPUSER'.</remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Notes.Note._Notes">
<summary>
Notes.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.Notes">
<summary>
Notes.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.NewNotesInstance">
<summary>
Initializes the 'Notes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.NewNoteItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Notes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'Notes' class, previously added to the collection.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.Compare(InMotionGIT.General.Entity.Contracts.Notes.Note,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="NoteItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.Note.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.Note.RecordTypeDescription">
 <summary>
 Type of record identifying the note content.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE62'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Notes.NoteCollection">
 <summary>
 Collection for Note class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.NoteCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.NoteCollection.AddNote">
 <summary>
 Add an instance of class 'Note' in the NoteCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.NoteCollection.Compare(InMotionGIT.General.Entity.Contracts.Notes.NoteCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Notes.NoteCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.NoteCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Notes.NoteCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Phones.Enumerations.EnumTelephoneType">
 <summary>
 Tipo de telefonos
 </summary>
 <remarks>Datasource: Table564</remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Phones.Enumerations.EnumPhoneChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Phones.Phone">
 <summary>
 Table of Phones.
 </summary>
<remarks>Data-source is 'PHONES'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.CreateNewPhone">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._RecordOwner">
<summary>
Owner of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._KeyToPhoneRecord">
<summary>
Access Key of The Phones Record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._KeyPhone">
<summary>
Consecutive number of the phone.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._RecordEffectiveDate">
<summary>
Date from which the record is valid.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._BestTimeToCall">
<summary>
Best time to call.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._AreaCode">
<summary>
Area Code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._PhoneNumber">
<summary>
Telephone number.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._Order">
<summary>
Number of order.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._Extension1">
<summary>
Number of the extension.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._Extension2">
<summary>
Number of the extension (complementary).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._TelephoneType">
<summary>
Telephone type.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._CancellationDate">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._CountryCode">
<summary>
Code of country to call.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._RelatedAddress">
<summary>
Address related to the phone number.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._NPhoneClas">
<summary>
Phone clasification.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Phones.Phone._dEffecdateOld">
<summary>
pending
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.RecordOwner">
<summary>
Owner of the record. (NRECOWNER)..
</summary>
<remarks>Data-source is 'PHONES.NRECOWNER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.KeyToPhoneRecord">
<summary>
Access Key of The Phones Record. (SKEYADDRESS)..
</summary>
<remarks>Data-source is 'PHONES.SKEYADDRESS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.KeyPhone">
<summary>
Consecutive number of the phone. (NKEYPHONES)..
</summary>
<remarks>Data-source is 'PHONES.NKEYPHONES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.RecordEffectiveDate">
<summary>
Date from which the record is valid. (DEFFECDATE)..
</summary>
<remarks>Data-source is 'PHONES.DEFFECDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.BestTimeToCall">
<summary>
Best time to call. (NBESTTIMETOCALL)..
</summary>
<remarks>Data-source is 'PHONES.NBESTTIMETOCALL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.AreaCode">
<summary>
Area Code. (NAREA_CODE)..
</summary>
<remarks>Data-source is 'PHONES.NAREA_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.PhoneNumber">
<summary>
Telephone number. (SPHONE)..
</summary>
<remarks>Data-source is 'PHONES.SPHONE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.Order">
<summary>
Number of order. (NORDER)..
</summary>
<remarks>Data-source is 'PHONES.NORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.Extension1">
<summary>
Number of the extension. (NEXTENS1)..
</summary>
<remarks>Data-source is 'PHONES.NEXTENS1'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.Extension2">
<summary>
Number of the extension (complementary). (NEXTENS2)..
</summary>
<remarks>Data-source is 'PHONES.NEXTENS2'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.TelephoneType">
<summary>
Telephone type. (NPHONE_TYPE)..
</summary>
<remarks>Data-source is 'PHONES.NPHONE_TYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.TelephoneTypeEnum">
<summary>
Telephone type.
</summary>
<remarks>This property use a enumeration based on property 'TelephoneType'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.TelephoneTypeEnumText">
<summary>
Telephone type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'PHONES.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'PHONES.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.CancellationDate">
<summary>
Date when the record is cancelled. (DNULLDATE)..
</summary>
<remarks>Data-source is 'PHONES.DNULLDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.CountryCode">
<summary>
Code of country to call. (NCOUNTRY_CODE)..
</summary>
<remarks>Data-source is 'PHONES.NCOUNTRY_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.RelatedAddress">
<summary>
Address related to the phone number. (SASSOCADDR)..
</summary>
<remarks>Data-source is 'PHONES.SASSOCADDR'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.NPhoneClas">
<summary>
Phone clasification..
</summary>
<remarks>Data-source is 'PHONES.NPHONECLAS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.Compare(InMotionGIT.General.Entity.Contracts.Phones.Phone,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="PhoneItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.Phone.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.BestTimeToCallDescription">
 <summary>
 Best time to call.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE8060'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.Phone.TelephoneTypeDescription">
 <summary>
 Telephone type.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE564'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection">
 <summary>
 Collection for Phone class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection.AddPhone">
 <summary>
 Add an instance of class 'Phone' in the PhoneCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection.Compare(InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Phones.PhoneCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Schedule.Enumerations.EnumBatchProcessChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Schedule.Enumerations.EnumBatchProcessParameterChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess">
 <summary>
 Procesos batch ejecutados o en ejecución.
 </summary>
<remarks>Data-source is 'BATCH_JOB'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.CreateNewBatchProcess">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._CompoundKey">
<summary>
Compound Key.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._BatchID">
<summary>
ID number of the batch process.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._ExecutionStartingDate">
<summary>
Date of beginning of execution.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._ExecutionEndingDate">
<summary>
Date when the execution finishes.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._Status">
<summary>
Status of the execution of this process.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._ExecutedProcess">
<summary>
Executed process (Procedure + parameters).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._CreationDate">
<summary>
Date of creation of the process.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._OracleJob">
<summary>
Number of Job assigned by Oracle to the executed process.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._UserThatStartedTheProcess">
<summary>
Code of the user who starts the process.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._nSheet">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._ProcessParentKey">
<summary>
Key of the parent process.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._GeneratedFile">
<summary>
File generated by the process.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess._sFile">
<summary>

</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.CompoundKey">
<summary>
Compound Key. (SKEY)..
</summary>
<remarks>Data-source is 'BATCH_JOB.SKEY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.BatchID">
<summary>
ID number of the batch process. (NBATCH)..
</summary>
<remarks>Data-source is 'BATCH_JOB.NBATCH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.ExecutionStartingDate">
<summary>
Date of beginning of execution. (DSTART)..
</summary>
<remarks>Data-source is 'BATCH_JOB.DSTART'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.ExecutionEndingDate">
<summary>
Date when the execution finishes. (DEND)..
</summary>
<remarks>Data-source is 'BATCH_JOB.DEND'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.Status">
<summary>
Status of the execution of this process. (NSTATUS)..
</summary>
<remarks>Data-source is 'BATCH_JOB.NSTATUS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'BATCH_JOB.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'BATCH_JOB.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.ExecutedProcess">
<summary>
Executed process (Procedure + parameters). (SCOMMAND)..
</summary>
<remarks>Data-source is 'BATCH_JOB.SCOMMAND'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.CreationDate">
<summary>
Date of creation of the process. (DSUBMIT)..
</summary>
<remarks>Data-source is 'BATCH_JOB.DSUBMIT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.OracleJob">
<summary>
Number of Job assigned by Oracle to the executed process. (NORAJOB)..
</summary>
<remarks>Data-source is 'BATCH_JOB.NORAJOB'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.UserThatStartedTheProcess">
<summary>
Code of the user who starts the process. (NUSERSUBMIT)..
</summary>
<remarks>Data-source is 'BATCH_JOB.NUSERSUBMIT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.nSheet">
<summary>
.
</summary>
<remarks>Data-source is 'BATCH_JOB.NSHEET'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.ProcessParentKey">
<summary>
Key of the parent process. (SKEY_FATHER)..
</summary>
<remarks>Data-source is 'BATCH_JOB.SKEY_FATHER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.GeneratedFile">
<summary>
File generated by the process. (SOUTPUTFILE)..
</summary>
<remarks>Data-source is 'BATCH_JOB.SOUTPUTFILE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.sFile">
<summary>
.
</summary>
<remarks>Data-source is 'BATCH_JOB.SFILE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.Compare(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="BatchProcessItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcess.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessCollection">
 <summary>
 Collection for BatchProcess class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessCollection.AddBatchProcess">
 <summary>
 Add an instance of class 'BatchProcess' in the BatchProcessCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessCollection.Compare(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter">
 <summary>
 Batch Process Parameters.
 </summary>
<remarks>Data-source is 'BATCH_PARAM'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.CreateNewBatchProcessParameter">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter._BatchID">
<summary>
ID number of the batch process.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter._UseOfThisParameter">
<summary>
Use of this parameter
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter._Sequence">
<summary>
Parameter sequential number.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter._NameOfParameter">
<summary>
Name of the parameter
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter._Description">
<summary>
Description of the parameter.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.BatchID">
<summary>
ID number of the batch process. (NBATCH)..
</summary>
<remarks>Data-source is 'BATCH_PARAM.NBATCH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.UseOfThisParameter">
<summary>
Use of this parameter (NAREA)..
</summary>
<remarks>Data-source is 'BATCH_PARAM.NAREA'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.Sequence">
<summary>
Parameter sequential number. (NSEQ)..
</summary>
<remarks>Data-source is 'BATCH_PARAM.NSEQ'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.NameOfParameter">
<summary>
Name of the parameter (SNAME)..
</summary>
<remarks>Data-source is 'BATCH_PARAM.SNAME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.Description">
<summary>
Description of the parameter. (SDESCRIPT)..
</summary>
<remarks>Data-source is 'BATCH_PARAM.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'BATCH_PARAM.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'BATCH_PARAM.DCOMPDATE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.Compare(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="BatchProcessParameterItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameter.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameterCollection">
 <summary>
 Collection for BatchProcessParameter class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameterCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameterCollection.AddBatchProcessParameter">
 <summary>
 Add an instance of class 'BatchProcessParameter' in the BatchProcessParameterCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameterCollection.Compare(InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameterCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameterCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameterCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.Schedule.BatchProcessParameterCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumAdministrativeFormOfAnOrderForServiceChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumAttachCodeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumAttachFromAnOrderForServiceChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumCostForTypesOfOrdersForServiceChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumEntitiesAssociatedZoneChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumGeographicZoneChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumHistoryOfAnOrderForServiceChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumProfessionalServiceOrderChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumRegistrationDocumentTypeInAttachmentChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumRelationBetweenRegistrationDocumentsAndOrdersForServiceChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumRepresentativeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumRepresentativeAssociatedChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumResultConclusionUsedByTypeOfOrderForServiceChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumSLATASK_ASSOCIATEDChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumSubClassificationOfTypesOfOrdersForServiceChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumTasksAssociatedToATypeOfOrderForServiceChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumTasksAssociatedToTypeOfOrderForServiceChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumVendorChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumVendorsZoneChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumZone_ComponentChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Enumerations.EnumZone_Entity_MemberChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService">
 <summary>
 Administrative form of an order for service
 </summary>
<remarks>Data-source is 'Prof_ord_Form'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.CreateNewAdministrativeFormOfAnOrderForService">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService._OrderType">
<summary>
Code of the type of orders for service.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService._SourceOfTheServiceOrder">
<summary>
Professional service order source.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService._RequirementType">
<summary>
Requirement type
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService._RequirementForm">
<summary>
Requirement Form
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.OrderType">
<summary>
Code of the type of orders for service. (NORDERTYPE)..
</summary>
<remarks>Data-source is 'Prof_ord_Form.NORDERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.SourceOfTheServiceOrder">
<summary>
Professional service order source. (NORDCLASS)..
</summary>
<remarks>Data-source is 'Prof_ord_Form.NORDCLASS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.RequirementType">
<summary>
Requirement type (nRequirementType)..
</summary>
<remarks>Data-source is 'Prof_ord_Form.nRequirementType'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.RequirementForm">
<summary>
Requirement Form (sFormName)..
</summary>
<remarks>Data-source is 'Prof_ord_Form.sFormName'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.Status">
<summary>
Register status (sStatregt)..
</summary>
<remarks>Data-source is 'Prof_ord_Form.sStatregt'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.ComputersDate">
<summary>
Date of the computer (dCompDate)..
</summary>
<remarks>Data-source is 'Prof_ord_Form.dCompDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.User">
<summary>
UserCode (nUserCode)..
</summary>
<remarks>Data-source is 'Prof_ord_Form.nUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="AdministrativeFormOfAnOrderForServiceItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.OrderTypeDescription">
 <summary>
 Code of the type of orders for service.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE7100'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForService.SourceOfTheServiceOrderDescription">
 <summary>
 Professional service order source.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE560'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForServiceCollection">
 <summary>
 Collection for AdministrativeFormOfAnOrderForService class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForServiceCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForServiceCollection.AddAdministrativeFormOfAnOrderForService">
 <summary>
 Add an instance of class 'AdministrativeFormOfAnOrderForService' in the AdministrativeFormOfAnOrderForServiceCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForServiceCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForServiceCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForServiceCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForServiceCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AdministrativeFormOfAnOrderForServiceCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode">
 <summary>
 Attach codes
 </summary>
<remarks>Data-source is 'RelatedDocCode'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.CreateNewAttachCode">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode._CodeOfAttach">
<summary>
Code of attach
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode._DocumentType">
<summary>
Document type
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode._DescriptionOfTheCodeOfAttach">
<summary>
Description of the code of attach
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode._ShortDescriptionOfTheCodeOfAttach">
<summary>
Short Description Of The code of attach
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.CodeOfAttach">
<summary>
Code of attach (nCodeOfAttach)..
</summary>
<remarks>Data-source is 'RelatedDocCode.nCodeOfAttach'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.DocumentType">
<summary>
Document type (nDocumentType)..
</summary>
<remarks>Data-source is 'RelatedDocCode.nDocumentType'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.DescriptionOfTheCodeOfAttach">
<summary>
Description of the code of attach (sDescript)..
</summary>
<remarks>Data-source is 'RelatedDocCode.sDescript'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.ShortDescriptionOfTheCodeOfAttach">
<summary>
Short Description Of The code of attach (sShort_Des)..
</summary>
<remarks>Data-source is 'RelatedDocCode.sShort_Des'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.Status">
<summary>
Register status (sStatregt)..
</summary>
<remarks>Data-source is 'RelatedDocCode.sStatregt'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.ComputersDate">
<summary>
Date of the computer (dCompDate)..
</summary>
<remarks>Data-source is 'RelatedDocCode.dCompDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.User">
<summary>
UserCode (nUserCode)..
</summary>
<remarks>Data-source is 'RelatedDocCode.nUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="AttachCodeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCode.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCodeCollection">
 <summary>
 Collection for AttachCode class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCodeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCodeCollection.AddAttachCode">
 <summary>
 Add an instance of class 'AttachCode' in the AttachCodeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCodeCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCodeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCodeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCodeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachCodeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService">
 <summary>
 Attach from an order for service
 </summary>
<remarks>Data-source is 'Prof_ord_Attach'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.CreateNewAttachFromAnOrderForService">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._ServiceOrder">
<summary>
Number of the service order.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._ConsecutiveNumber">
<summary>
Consecutive number
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._CodeOfAttach">
<summary>
Code of attach
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._ImageID">
<summary>
Image identification
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._ConsecutiveImageId">
<summary>
Consecutive of the image id
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.ServiceOrder">
<summary>
Number of the service order. (NSERV_ORDER)..
</summary>
<remarks>Data-source is 'Prof_ord_Attach.NSERV_ORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.ConsecutiveNumber">
<summary>
Consecutive number (nConsec)..
</summary>
<remarks>Data-source is 'Prof_ord_Attach.nConsec'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.CodeOfAttach">
<summary>
Code of attach (NCODEOFATTACH)..
</summary>
<remarks>Data-source is 'Prof_ord_Attach.NCODEOFATTACH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.ImageID">
<summary>
Image identification (nImageNum)..
</summary>
<remarks>Data-source is 'Prof_ord_Attach.nImageNum'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.ConsecutiveImageId">
<summary>
Consecutive of the image id (nImageConsec)..
</summary>
<remarks>Data-source is 'Prof_ord_Attach.nImageConsec'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.Status">
<summary>
Register status (sStatregt)..
</summary>
<remarks>Data-source is 'Prof_ord_Attach.sStatregt'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.ComputersDate">
<summary>
Date of the computer (dCompDate)..
</summary>
<remarks>Data-source is 'Prof_ord_Attach.dCompDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.User">
<summary>
UserCode (nUserCode)..
</summary>
<remarks>Data-source is 'Prof_ord_Attach.nUserCode'.</remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService._Images">
<summary>
Images.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.Images">
<summary>
Images.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.NewImagesInstance">
<summary>
Initializes the 'Images' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.NewImagesItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Images', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'Images' class, previously added to the collection.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="AttachFromAnOrderForServiceItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForService.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForServiceCollection">
 <summary>
 Collection for AttachFromAnOrderForService class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForServiceCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForServiceCollection.AddAttachFromAnOrderForService">
 <summary>
 Add an instance of class 'AttachFromAnOrderForService' in the AttachFromAnOrderForServiceCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForServiceCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForServiceCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForServiceCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForServiceCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.AttachFromAnOrderForServiceCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService">
 <summary>
 Cost for Types of orders for service
 </summary>
<remarks>Data-source is 'PROF_ORD_COST'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.CreateNewCostForTypesOfOrdersForService">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._VendorCode">
<summary>
Code of the vendor.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._TypeOfOrderForService">
<summary>
Type of order for service
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._SubtypeOfOrderForService">
<summary>
Subtype of order for service
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._CostCriteria">
<summary>
Cost Criteria
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._EffectiveDate">
<summary>
Effective Date of the register
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._DateWhenRecordCancelled">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._CurrencyCode">
<summary>
Code of the currency.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._CostOfTheTypeOfOrderForService">
<summary>
Cost of the type of order for service.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._AdditionalCostOfTheTypeOfOrderForService">
<summary>
Additional Cost of the type of order for service.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._User">
<summary>
UserCode
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService._dEffecdateOld">
<summary>
pending
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.VendorCode">
<summary>
Code of the vendor. (NPROVIDER)..
</summary>
<remarks>Data-source is 'PROF_ORD_COST.NPROVIDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.TypeOfOrderForService">
<summary>
Type of order for service (NORDERTYPE)..
</summary>
<remarks>Data-source is 'PROF_ORD_COST.NORDERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.SubtypeOfOrderForService">
<summary>
Subtype of order for service (NORDERSUBTYPE)..
</summary>
<remarks>Data-source is 'PROF_ORD_COST.NORDERSUBTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.CostCriteria">
<summary>
Cost Criteria (NCOSTCRITERIA)..
</summary>
<remarks>Data-source is 'PROF_ORD_COST.NCOSTCRITERIA'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.EffectiveDate">
<summary>
Effective Date of the register (DEFFECDATE)..
</summary>
<remarks>Data-source is 'PROF_ORD_COST.DEFFECDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.DateWhenRecordCancelled">
<summary>
Date when the record is cancelled. (DNULLDATE)..
</summary>
<remarks>Data-source is 'PROF_ORD_COST.DNULLDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.CurrencyCode">
<summary>
Code of the currency. (NCURRENCY)..
</summary>
<remarks>Data-source is 'PROF_ORD_COST.NCURRENCY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.CostOfTheTypeOfOrderForService">
<summary>
Cost of the type of order for service. (NCOST)..
</summary>
<remarks>Data-source is 'PROF_ORD_COST.NCOST'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.AdditionalCostOfTheTypeOfOrderForService">
<summary>
Additional Cost of the type of order for service. (NADDITIONALCOST)..
</summary>
<remarks>Data-source is 'PROF_ORD_COST.NADDITIONALCOST'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.ComputersDate">
<summary>
Date of the computer (DCOMPDATE)..
</summary>
<remarks>Data-source is 'PROF_ORD_COST.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.User">
<summary>
UserCode (NUSERCODE)..
</summary>
<remarks>Data-source is 'PROF_ORD_COST.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="CostForTypesOfOrdersForServiceItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForService.CurrencyCodeDescription">
 <summary>
 Code of the currency.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE11'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForServiceCollection">
 <summary>
 Collection for CostForTypesOfOrdersForService class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForServiceCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForServiceCollection.AddCostForTypesOfOrdersForService">
 <summary>
 Add an instance of class 'CostForTypesOfOrdersForService' in the CostForTypesOfOrdersForServiceCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForServiceCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForServiceCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForServiceCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForServiceCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.CostForTypesOfOrdersForServiceCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone">
 <summary>
 Entities associated to zones
 </summary>
<remarks>Data-source is 'Zone_Entities'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.CreateNewEntitiesAssociatedZone">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone._IdentificationOfTheEntity">
<summary>
Identification of the entity
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone._DescriptionOfTheEntity">
<summary>
Description of the entity
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone._EntityName">
<summary>
Entity name
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone._User">
<summary>
UserCode
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone._Zone_Entity_MemberCollection">
<summary>
Group of members of an entity
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.IdentificationOfTheEntity">
<summary>
Identification of the entity (nEntityId)..
</summary>
<remarks>Data-source is 'Zone_Entities.nEntityId'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.DescriptionOfTheEntity">
<summary>
Description of the entity (sDescript)..
</summary>
<remarks>Data-source is 'Zone_Entities.sDescript'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.EntityName">
<summary>
Entity name (sTable_Name)..
</summary>
<remarks>Data-source is 'Zone_Entities.sTable_Name'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.Status">
<summary>
Register status (sStatregt)..
</summary>
<remarks>Data-source is 'Zone_Entities.sStatregt'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.ComputersDate">
<summary>
Date of the computer (dCompDate)..
</summary>
<remarks>Data-source is 'Zone_Entities.dCompDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.User">
<summary>
UserCode (nUserCode)..
</summary>
<remarks>Data-source is 'Zone_Entities.nUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.NewZone_Entity_MemberCollectionInstance">
<summary>
Initializes the 'Zone_Entity_MemberCollection' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.NewZone_Entity_MemberItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Zone_Entity_MemberCollection', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'Zone_Entity_Member' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.Zone_Entity_MemberCollection">
<summary>
Group of members of an entity collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="EntitiesAssociatedZoneItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZone.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZoneCollection">
 <summary>
 Collection for EntitiesAssociatedZone class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZoneCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZoneCollection.AddEntitiesAssociatedZone">
 <summary>
 Add an instance of class 'EntitiesAssociatedZone' in the EntitiesAssociatedZoneCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZoneCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZoneCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZoneCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZoneCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.EntitiesAssociatedZoneCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone">
 <summary>
 Geographic Zones
 </summary>
<remarks>Data-source is 'ZONES'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.CreateNewGeographicZone">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._GeographicZone">
<summary>
Geographic zone
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._DescriptionOfTheZone">
<summary>
Description of the zone
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._ShortDescriptionOfTheZone">
<summary>
Short Description Of The Zone
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._IdentificationOfTheGroup">
<summary>
Identification of the group
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._User">
<summary>
UserCode
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._IdentificationOfTheEntity">
<summary>
Identification of the entity
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone._Zone_ComponentsCollection">
<summary>
Zone components
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.GeographicZone">
<summary>
Geographic zone (NZONE)..
</summary>
<remarks>Data-source is 'ZONES.NZONE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.DescriptionOfTheZone">
<summary>
Description of the zone (SDESCRIPT)..
</summary>
<remarks>Data-source is 'ZONES.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.ShortDescriptionOfTheZone">
<summary>
Short Description Of The Zone (SSHORT_DES)..
</summary>
<remarks>Data-source is 'ZONES.SSHORT_DES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.IdentificationOfTheGroup">
<summary>
Identification of the group (NGROUP)..
</summary>
<remarks>Data-source is 'ZONES.NGROUP'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.Status">
<summary>
Register status (SSTATREGT)..
</summary>
<remarks>Data-source is 'ZONES.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.ComputersDate">
<summary>
Date of the computer (DCOMPDATE)..
</summary>
<remarks>Data-source is 'ZONES.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.User">
<summary>
UserCode (NUSERCODE)..
</summary>
<remarks>Data-source is 'ZONES.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.IdentificationOfTheEntity">
<summary>
Identification of the entity (NENTITYID)..
</summary>
<remarks>Data-source is 'ZONES.NENTITYID'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.NewZone_ComponentsCollectionInstance">
<summary>
Initializes the 'Zone_ComponentsCollection' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.NewZone_ComponentItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Zone_ComponentsCollection', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'Zone_Component' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.Zone_ComponentsCollection">
<summary>
Zone components collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="GeographicZoneItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZone.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZoneCollection">
 <summary>
 Collection for GeographicZone class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZoneCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZoneCollection.AddGeographicZone">
 <summary>
 Add an instance of class 'GeographicZone' in the GeographicZoneCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZoneCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZoneCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZoneCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZoneCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.GeographicZoneCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService">
 <summary>
 History of an order for service
 </summary>
<remarks>Data-source is 'Prof_ord_His'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.CreateNewHistoryOfAnOrderForService">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._ServiceOrder">
<summary>
Number of the service order.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._EntryNumberInHistoryOfAnOrderForService">
<summary>
Entry number in the history of an order for service
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._Task">
<summary>
Task
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._ExecutionLimitDate">
<summary>
Execution limit date
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._ExecutionDate">
<summary>
Execution date
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._IdentificationOfTheRepresentative">
<summary>
Identification of the representative
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._StatusOrderForService">
<summary>
Status of the service order
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.ServiceOrder">
<summary>
Number of the service order. (NSERV_ORDER)..
</summary>
<remarks>Data-source is 'Prof_ord_His.NSERV_ORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.EntryNumberInHistoryOfAnOrderForService">
<summary>
Entry number in the history of an order for service (nMovement)..
</summary>
<remarks>Data-source is 'Prof_ord_His.nMovement'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.Task">
<summary>
Task (NTASK)..
</summary>
<remarks>Data-source is 'Prof_ord_His.NTASK'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.ExecutionLimitDate">
<summary>
Execution limit date (dLimitDate)..
</summary>
<remarks>Data-source is 'Prof_ord_His.dLimitDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.ExecutionDate">
<summary>
Execution date (dExecutionDate)..
</summary>
<remarks>Data-source is 'Prof_ord_His.dExecutionDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.IdentificationOfTheRepresentative">
<summary>
Identification of the representative (NREPRESENTATIVE)..
</summary>
<remarks>Data-source is 'Prof_ord_His.NREPRESENTATIVE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.StatusOrderForService">
<summary>
Status of the service order (nStatus_Ord)..
</summary>
<remarks>Data-source is 'Prof_ord_His.nStatus_Ord'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.ComputersDate">
<summary>
Date of the computer (dCompDate)..
</summary>
<remarks>Data-source is 'Prof_ord_His.dCompDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.User">
<summary>
UserCode (nUserCode)..
</summary>
<remarks>Data-source is 'Prof_ord_His.nUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="HistoryOfAnOrderForServiceItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForService.TaskDescription">
 <summary>
 Task
 </summary>
 <remarks>
 This property is associated with the field 'TABLE6811' on the table 'TABLE6811'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForServiceCollection">
 <summary>
 Collection for HistoryOfAnOrderForService class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForServiceCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForServiceCollection.AddHistoryOfAnOrderForService">
 <summary>
 Add an instance of class 'HistoryOfAnOrderForService' in the HistoryOfAnOrderForServiceCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForServiceCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForServiceCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForServiceCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForServiceCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.HistoryOfAnOrderForServiceCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder">
 <summary>
 Professional Service Orders.
 </summary>
<remarks>Data-source is 'PROF_ORD'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.CreateNewProfessionalServiceOrder">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ServiceOrder">
<summary>
Number of the service order.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ClaimID">
<summary>
Claim number.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ClaimCode">
<summary>
Code of The Claim Case or Claimant.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ClaimType">
<summary>
Claim Type.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ClaimEntryNumber">
<summary>
Entry number related to a claim.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._Amount">
<summary>
Amount paid to the expert.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._CurrencyCode">
<summary>
Code of The Currency.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._DateOfPayment">
<summary>
Date of the payment.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ScheduledDate">
<summary>
Date when the service was scheduled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._DateRendered">
<summary>
Date when the service was completed.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._VendorCode">
<summary>
Code of the vendor.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._TimeWhenCompleted">
<summary>
Time when the order was completed.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._Status">
<summary>
Status of the service order.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ScheduledTimeForTheService">
<summary>
Time when service was scheduled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._GarageShop">
<summary>
Code of the garage (for motor vehicle claims).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._OrderType">
<summary>
Type of professional service order.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ServiceOrderNoteID">
<summary>
Number of the note related to the professional service order.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._SourceOfTheServiceOrder">
<summary>
Professional service order source.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ClientID">
<summary>
Client code identifying the vendor.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ProductCode">
<summary>
Code of the product.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._Municipality">
<summary>
Code of the municipality for the inspection.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._GroupOfVendors">
<summary>
Vendors group code.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._sPlace">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._NFREIGHTAGE">
<summary>
Freight or cost of shipment (included in the recovered quotation).
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._NoteID">
<summary>
Note number containing the comments related to the inspection report.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._SendByPhysicalMail">
<summary>
It indicates that the order must be sent by mail.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ImageID">
<summary>
Image number related to the order.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ContactName">
<summary>
Contact name.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ContactAddress">
<summary>
Contact address.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._Phone">
<summary>
Contact telephone.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ServiceOrderType">
<summary>
Service order type to obtain costs.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._AssignmentDate">
<summary>
Assignment date of the service order to the person in charge of fulfill it.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._RecordDate">
<summary>
Date when the information was first entered into the system.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._DeductiblePaymentInGarageShop">
<summary>
Deductible payment indicator in the garage shop.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._VAT">
<summary>
Value Added Tax to apply in the budget.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._EndCostOfShipment">
<summary>
Cost of shipment.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._PartsAndMaterials">
<summary>
Amount corresponding to the value of parts and materials.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._LaborCost">
<summary>
Amount corresponding to the labor value.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._DeductibleAmount">
<summary>
Amount of the deductible value.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._Depreciation">
<summary>
Amount of the depreciation value.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._ClasOrder">
<summary>
Class Order
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._StatusPaymentDocuments">
<summary>
Status of Payment documents
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._SubtypeOfOrderforServide">
<summary>
Subtype of Order for service
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._CountryCode">
<summary>
Code of the country.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._StateOrProvince">
<summary>
Code of the state or province.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._CityCode">
<summary>
Code from the city to which the municipality belongs.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._Zipcode">
<summary>
Zip code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._FinalNote">
<summary>
Final note
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._CompleteReportOfInspection">
<summary>
Complete report of inspection
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._QualifyProvider">
<summary>
Qualify provider
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._AdditionalAmountOfTheOrderForService">
<summary>
Additional amount of the order for service.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._AdditionalUnits">
<summary>
Additional units
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._CostCriteria">
<summary>
Cost Criteria
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._UnderwritingCase">
<summary>
Underwriting case
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._Requirement">
<summary>
Requirement
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._IdentificationOfTheRepresentative">
<summary>
Identification of the representative
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._InspectionInstance">
<summary>
Inspection Instance
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._PolicyType">
<summary>
Poicy Type
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._DateLastView">
<summary>
Last date the information was viewed
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._SBILLNUM">
<summary>

</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._AttachFromAnOrderForServices">
<summary>
Attach from an order for service
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._HistoryOfAnOrderForServices">
<summary>
History of an order for service
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._TasksAssociatedToATypeOfOrderForServices">
<summary>
Tasks associated to a Type of order for service
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ServiceOrder">
<summary>
Number of the service order. (NSERV_ORDER)..
</summary>
<remarks>Data-source is 'PROF_ORD.NSERV_ORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ClaimID">
<summary>
Claim number. (NCLAIM)..
</summary>
<remarks>Data-source is 'PROF_ORD.NCLAIM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ClaimCode">
<summary>
Code of The Claim Case or Claimant. (NCASE_NUM)..
</summary>
<remarks>Data-source is 'PROF_ORD.NCASE_NUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ClaimType">
<summary>
Claim Type. (NDEMAN_TYPE)..
</summary>
<remarks>Data-source is 'PROF_ORD.NDEMAN_TYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ClaimEntryNumber">
<summary>
Entry number related to a claim. (NTRANSAC)..
</summary>
<remarks>Data-source is 'PROF_ORD.NTRANSAC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.Amount">
<summary>
Amount paid to the expert. (NAMOUNT)..
</summary>
<remarks>Data-source is 'PROF_ORD.NAMOUNT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.CurrencyCode">
<summary>
Code of The Currency. (NCURRENCY)..
</summary>
<remarks>Data-source is 'PROF_ORD.NCURRENCY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'PROF_ORD.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.DateOfPayment">
<summary>
Date of the payment. (DDATE_DONE)..
</summary>
<remarks>Data-source is 'PROF_ORD.DDATE_DONE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ScheduledDate">
<summary>
Date when the service was scheduled. (DFEC_PROG)..
</summary>
<remarks>Data-source is 'PROF_ORD.DFEC_PROG'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.DateRendered">
<summary>
Date when the service was completed. (DMADE_DATE)..
</summary>
<remarks>Data-source is 'PROF_ORD.DMADE_DATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.VendorCode">
<summary>
Code of the vendor. (NPROVIDER)..
</summary>
<remarks>Data-source is 'PROF_ORD.NPROVIDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.TimeWhenCompleted">
<summary>
Time when the order was completed. (SMADE_TIME)..
</summary>
<remarks>Data-source is 'PROF_ORD.SMADE_TIME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.Status">
<summary>
Status of the service order. (NSTATUS_ORD)..
</summary>
<remarks>Data-source is 'PROF_ORD.NSTATUS_ORD'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ScheduledTimeForTheService">
<summary>
Time when service was scheduled. (STIME_PROG)..
</summary>
<remarks>Data-source is 'PROF_ORD.STIME_PROG'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'PROF_ORD.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.GarageShop">
<summary>
Code of the garage (for motor vehicle claims). (NWORKSH)..
</summary>
<remarks>Data-source is 'PROF_ORD.NWORKSH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.OrderType">
<summary>
Type of professional service order. (NORDERTYPE)..
</summary>
<remarks>Data-source is 'PROF_ORD.NORDERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ServiceOrderNoteID">
<summary>
Number of the note related to the professional service order. (NNOTEORDER)..
</summary>
<remarks>Data-source is 'PROF_ORD.NNOTEORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.SourceOfTheServiceOrder">
<summary>
Professional service order source. (NORDCLASS)..
</summary>
<remarks>Data-source is 'PROF_ORD.NORDCLASS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ClientID">
<summary>
Client code identifying the vendor. (SCLIENT)..
</summary>
<remarks>Data-source is 'PROF_ORD.SCLIENT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.RecordType">
<summary>
Type of Record. (SCERTYPE)..
</summary>
<remarks>Data-source is 'PROF_ORD.SCERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.RecordTypeEnum">
<summary>
Type of Record.
</summary>
<remarks>This property use a enumeration based on property 'RecordType'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.RecordTypeEnumText">
<summary>
Type of Record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.LineOfBusiness">
<summary>
Code of the line of business. (NBRANCH)..
</summary>
<remarks>Data-source is 'PROF_ORD.NBRANCH'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ProductCode">
<summary>
Code of the product. (NPRODUCT)..
</summary>
<remarks>Data-source is 'PROF_ORD.NPRODUCT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application. (NPOLICY)..
</summary>
<remarks>Data-source is 'PROF_ORD.NPOLICY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.CertificateID">
<summary>
Number identifying the certificate. (NCERTIF)..
</summary>
<remarks>Data-source is 'PROF_ORD.NCERTIF'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.Municipality">
<summary>
Code of the municipality for the inspection. (NMUNICIPALITY)..
</summary>
<remarks>Data-source is 'PROF_ORD.NMUNICIPALITY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.GroupOfVendors">
<summary>
Vendors group code. (NPROFGROUP)..
</summary>
<remarks>Data-source is 'PROF_ORD.NPROFGROUP'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.sPlace">
<summary>
.
</summary>
<remarks>Data-source is 'PROF_ORD.SPLACE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.NFREIGHTAGE">
<summary>
Freight or cost of shipment (included in the recovered quotation)..
</summary>
<remarks>Data-source is 'PROF_ORD.NFREIGHTAGE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.NoteID">
<summary>
Note number containing the comments related to the inspection report. (NNOTENUM)..
</summary>
<remarks>Data-source is 'PROF_ORD.NNOTENUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.SendByPhysicalMail">
<summary>
It indicates that the order must be sent by mail. (SMAILBAG)..
</summary>
<remarks>Data-source is 'PROF_ORD.SMAILBAG'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ImageID">
<summary>
Image number related to the order. (NIMAGENUM)..
</summary>
<remarks>Data-source is 'PROF_ORD.NIMAGENUM'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ContactName">
<summary>
Contact name. (SNAME_CONT)..
</summary>
<remarks>Data-source is 'PROF_ORD.SNAME_CONT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ContactAddress">
<summary>
Contact address. (SADD_CONTACT)..
</summary>
<remarks>Data-source is 'PROF_ORD.SADD_CONTACT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.Phone">
<summary>
Contact telephone. (SPHONE_CONT)..
</summary>
<remarks>Data-source is 'PROF_ORD.SPHONE_CONT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ServiceOrderType">
<summary>
Service order type to obtain costs. (NORD_TYPECOST)..
</summary>
<remarks>Data-source is 'PROF_ORD.NORD_TYPECOST'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.AssignmentDate">
<summary>
Assignment date of the service order to the person in charge of fulfill it. (DASSIGNDATE)..
</summary>
<remarks>Data-source is 'PROF_ORD.DASSIGNDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.RecordDate">
<summary>
Date when the information was first entered into the system. (DINPDATE)..
</summary>
<remarks>Data-source is 'PROF_ORD.DINPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.DeductiblePaymentInGarageShop">
<summary>
Deductible payment indicator in the garage shop. (SWSDEDUC)..
</summary>
<remarks>Data-source is 'PROF_ORD.SWSDEDUC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.VAT">
<summary>
Value Added Tax to apply in the budget. (NIVA)..
</summary>
<remarks>Data-source is 'PROF_ORD.NIVA'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.EndCostOfShipment">
<summary>
Cost of shipment. (NSENDCOST)..
</summary>
<remarks>Data-source is 'PROF_ORD.NSENDCOST'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.PartsAndMaterials">
<summary>
Amount corresponding to the value of parts and materials. (NMAT_AMOUNT)..
</summary>
<remarks>Data-source is 'PROF_ORD.NMAT_AMOUNT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.LaborCost">
<summary>
Amount corresponding to the labor value. (NHAND_AMOUNT)..
</summary>
<remarks>Data-source is 'PROF_ORD.NHAND_AMOUNT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.DeductibleAmount">
<summary>
Amount of the deductible value. (NDEDUC_AMOUNT)..
</summary>
<remarks>Data-source is 'PROF_ORD.NDEDUC_AMOUNT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.Depreciation">
<summary>
Amount of the depreciation value. (NDEPREC_AMOUNT)..
</summary>
<remarks>Data-source is 'PROF_ORD.NDEPREC_AMOUNT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ClasOrder">
<summary>
Class Order (NCLASS)..
</summary>
<remarks>Data-source is 'PROF_ORD.NCLASS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.StatusPaymentDocuments">
<summary>
Status of Payment documents (NBILLSTATUS)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.NBILLSTATUS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.SubtypeOfOrderforServide">
<summary>
Subtype of Order for service (NORDERSUBTYPE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.NORDERSUBTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.CountryCode">
<summary>
Code of the country. (NCOUNTRY)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.NCOUNTRY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.StateOrProvince">
<summary>
Code of the state or province. (NPROVINCE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.NPROVINCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.CityCode">
<summary>
Code from the city to which the municipality belongs. (NLOCAL)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.NLOCAL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.Zipcode">
<summary>
Zip code (SZIP_CODE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.SZIP_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.FinalNote">
<summary>
Final note (nFinalNote)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.nFinalNote'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.CompleteReportOfInspection">
<summary>
Complete report of inspection (nCompleteReport)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.nCompleteReport'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.QualifyProvider">
<summary>
Qualify provider (nQualifyProvider)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.nQualifyProvider'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.AdditionalAmountOfTheOrderForService">
<summary>
Additional amount of the order for service. (nAdd_amount)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.nAdd_amount'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.AdditionalUnits">
<summary>
Additional units (nAdd_Unit)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.nAdd_Unit'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.CostCriteria">
<summary>
Cost Criteria (nCostCriteria)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.nCostCriteria'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.UnderwritingCase">
<summary>
Underwriting case (UnderwritingCaseId)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.UnderwritingCaseId'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.Requirement">
<summary>
Requirement (RequirementId)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.RequirementId'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.IdentificationOfTheRepresentative">
<summary>
Identification of the representative (NREPRESENTATIVE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.NREPRESENTATIVE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.InspectionInstance">
<summary>
Inspection Instance (NINSTANCE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.NINSTANCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.PolicyType">
<summary>
Poicy Type (SPOLITYPE)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.SPOLITYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.PolicyTypeEnum">
<summary>
Poicy Type
</summary>
<remarks>This property use a enumeration based on property 'PolicyType'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.PolicyTypeEnumText">
<summary>
Poicy Type
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.DateLastView">
<summary>
Last date the information was viewed (DLASTVIEW)..
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.DLASTVIEW'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.SBILLNUM">
<summary>
.
Source 'InMotion-BackOffice (INSUDB)'
</summary>
<remarks>Data-source is 'PROF_ORD.SBILLNUM'.</remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._Notes">
<summary>
Notes.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.Notes">
<summary>
Notes.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.NewNotesInstance">
<summary>
Initializes the 'Notes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.NewNoteItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Notes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'Notes' class, previously added to the collection.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder._Images">
<summary>
Images.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.Images">
<summary>
Images.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.NewImagesInstance">
<summary>
Initializes the 'Images' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.NewImagesItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Images', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'Images' class, previously added to the collection.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.NewAttachFromAnOrderForServicesInstance">
<summary>
Initializes the 'AttachFromAnOrderForServices' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.NewAttachFromAnOrderForServiceItem(System.Boolean)">
<summary>
Add a new item to the collection of 'AttachFromAnOrderForServices', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'AttachFromAnOrderForService' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.AttachFromAnOrderForServices">
<summary>
Attach from an order for service collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.NewHistoryOfAnOrderForServicesInstance">
<summary>
Initializes the 'HistoryOfAnOrderForServices' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.NewHistoryOfAnOrderForServiceItem(System.Boolean)">
<summary>
Add a new item to the collection of 'HistoryOfAnOrderForServices', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'HistoryOfAnOrderForService' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.HistoryOfAnOrderForServices">
<summary>
History of an order for service collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.NewTasksAssociatedToATypeOfOrderForServicesInstance">
<summary>
Initializes the 'TasksAssociatedToATypeOfOrderForServices' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.NewTasksAssociatedToATypeOfOrderForServiceItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TasksAssociatedToATypeOfOrderForServices', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TasksAssociatedToATypeOfOrderForService' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.TasksAssociatedToATypeOfOrderForServices">
<summary>
Tasks associated to a Type of order for service collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ProfessionalServiceOrderItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.StatusDescription">
 <summary>
 Status of the service order.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE215'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.OrderTypeDescription">
 <summary>
 Type of professional service order.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE7100'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.SourceOfTheServiceOrderDescription">
 <summary>
 Professional service order source.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE560'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.ServiceOrderTypeDescription">
 <summary>
 Service order type to obtain costs.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE5597'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.SubtypeOfOrderforServideDescription">
 <summary>
 Subtype of Order for service
 </summary>
 <remarks>
 This property is associated with the field 'TABLE6810' on the table 'TABLE6810'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.CostCriteriaDescription">
 <summary>
 Cost Criteria
 </summary>
 <remarks>
 This property is associated with the field 'TABLE6814' on the table 'TABLE6814'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrder.InspectionInstanceDescription">
 <summary>
 Inspection Instance
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE165'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrderCollection">
 <summary>
 Collection for ProfessionalServiceOrder class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrderCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrderCollection.AddProfessionalServiceOrder">
 <summary>
 Add an instance of class 'ProfessionalServiceOrder' in the ProfessionalServiceOrderCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrderCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrderCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrderCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrderCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ProfessionalServiceOrderCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment">
 <summary>
 Registration document type in Attachment
 </summary>
<remarks>Data-source is 'RELATEDDOCTYPE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.CreateNewRegistrationDocumentTypeInAttachment">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment._RegistrationDocument">
<summary>
Registration document
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment._ExtensionType">
<summary>
Extension type
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment._RegistrationForm">
<summary>
Registration form
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment._LongDescription">
<summary>
Long description
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment._ShortDescription">
<summary>
Short Description
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.RegistrationDocument">
<summary>
Registration document (NDOCUMENTTYPE)..
</summary>
<remarks>Data-source is 'RELATEDDOCTYPE.NDOCUMENTTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.ExtensionType">
<summary>
Extension type (SEXTENSIONTYPE)..
</summary>
<remarks>Data-source is 'RELATEDDOCTYPE.SEXTENSIONTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.RegistrationForm">
<summary>
Registration form (SFORMNAME)..
</summary>
<remarks>Data-source is 'RELATEDDOCTYPE.SFORMNAME'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.LongDescription">
<summary>
Long description (SDESCRIPT)..
</summary>
<remarks>Data-source is 'RELATEDDOCTYPE.SDESCRIPT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.ShortDescription">
<summary>
Short Description (SSHORT_DES)..
</summary>
<remarks>Data-source is 'RELATEDDOCTYPE.SSHORT_DES'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.Status">
<summary>
Register status (SSTATREGT)..
</summary>
<remarks>Data-source is 'RELATEDDOCTYPE.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.ComputersDate">
<summary>
Date of the computer (DCOMPDATE)..
</summary>
<remarks>Data-source is 'RELATEDDOCTYPE.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.User">
<summary>
UserCode (NUSERCODE)..
</summary>
<remarks>Data-source is 'RELATEDDOCTYPE.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="RegistrationDocumentTypeInAttachmentItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachment.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachmentCollection">
 <summary>
 Collection for RegistrationDocumentTypeInAttachment class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachmentCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachmentCollection.AddRegistrationDocumentTypeInAttachment">
 <summary>
 Add an instance of class 'RegistrationDocumentTypeInAttachment' in the RegistrationDocumentTypeInAttachmentCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachmentCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachmentCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachmentCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachmentCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RegistrationDocumentTypeInAttachmentCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService">
 <summary>
 Relation between Registration documents and Orders for service
 </summary>
<remarks>Data-source is 'Prof_ord_RelDocs'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.CreateNewRelationBetweenRegistrationDocumentsAndOrdersForService">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService._OrderType">
<summary>
Code of the type of orders for service.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService._CodeOfAttach">
<summary>
Code of attach
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService._Multiple">
<summary>
Multiple
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService._OptionalIndicator">
<summary>
Optional
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.OrderType">
<summary>
Code of the type of orders for service. (NORDERTYPE)..
</summary>
<remarks>Data-source is 'Prof_ord_RelDocs.NORDERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.CodeOfAttach">
<summary>
Code of attach (nCodeOfAttach)..
</summary>
<remarks>Data-source is 'Prof_ord_RelDocs.nCodeOfAttach'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.Multiple">
<summary>
Multiple (nMultiple)..
</summary>
<remarks>Data-source is 'Prof_ord_RelDocs.nMultiple'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.OptionalIndicator">
<summary>
Optional (nOptional)..
</summary>
<remarks>Data-source is 'Prof_ord_RelDocs.nOptional'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.Status">
<summary>
Register status (sStatregt)..
</summary>
<remarks>Data-source is 'Prof_ord_RelDocs.sStatregt'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.ComputersDate">
<summary>
Date of the computer (dCompDate)..
</summary>
<remarks>Data-source is 'Prof_ord_RelDocs.dCompDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.User">
<summary>
UserCode (nUserCode)..
</summary>
<remarks>Data-source is 'Prof_ord_RelDocs.nUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="RelationBetweenRegistrationDocumentsAndOrdersForServiceItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.OrderTypeDescription">
 <summary>
 Code of the type of orders for service.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE7100'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.MultipleDescription">
 <summary>
 Multiple
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE23'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForService.OptionalIndicatorDescription">
 <summary>
 Optional
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE23'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForServiceCollection">
 <summary>
 Collection for RelationBetweenRegistrationDocumentsAndOrdersForService class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForServiceCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForServiceCollection.AddRelationBetweenRegistrationDocumentsAndOrdersForService">
 <summary>
 Add an instance of class 'RelationBetweenRegistrationDocumentsAndOrdersForService' in the RelationBetweenRegistrationDocumentsAndOrdersForServiceCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForServiceCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForServiceCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForServiceCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForServiceCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RelationBetweenRegistrationDocumentsAndOrdersForServiceCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative">
 <summary>
 Representative
 </summary>
<remarks>Data-source is 'REPRESENTATIVE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.CreateNewRepresentative">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative._IdentificationOfTheRepresentative">
<summary>
Identification of the representative
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative._ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative._User">
<summary>
UserCode
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative._Status">
<summary>
Register status
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.IdentificationOfTheRepresentative">
<summary>
Identification of the representative (NREPRESENTATIVE)..
</summary>
<remarks>Data-source is 'REPRESENTATIVE.NREPRESENTATIVE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.ClientID">
<summary>
Code of the client. (SCLIENT)..
</summary>
<remarks>Data-source is 'REPRESENTATIVE.SCLIENT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.ComputersDate">
<summary>
Date of the computer (DCOMPDATE)..
</summary>
<remarks>Data-source is 'REPRESENTATIVE.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.User">
<summary>
UserCode (NUSERCODE)..
</summary>
<remarks>Data-source is 'REPRESENTATIVE.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.Status">
<summary>
Register status (SSTATREGT)..
</summary>
<remarks>Data-source is 'REPRESENTATIVE.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="RepresentativeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Representative.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeCollection">
 <summary>
 Collection for Representative class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeCollection.AddRepresentative">
 <summary>
 Add an instance of class 'Representative' in the RepresentativeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated">
 <summary>
 Representative Associated
 </summary>
<remarks>Data-source is 'REPRESENTATIVEASSO'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.CreateNewRepresentativeAssociated">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated._VendorCode">
<summary>
Code of the vendor.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated._IdentificationOfTheRepresentative">
<summary>
Identification of the representative
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated._EffectiveDate">
<summary>
Effective Date of the register
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated._DateWhenRecordCancelled">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.VendorCode">
<summary>
Code of the vendor. (NPROVIDER)..
</summary>
<remarks>Data-source is 'REPRESENTATIVEASSO.NPROVIDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.IdentificationOfTheRepresentative">
<summary>
Identification of the representative (NREPRESENTATIVE)..
</summary>
<remarks>Data-source is 'REPRESENTATIVEASSO.NREPRESENTATIVE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.EffectiveDate">
<summary>
Effective Date of the register (DEFFECDATE)..
</summary>
<remarks>Data-source is 'REPRESENTATIVEASSO.DEFFECDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.DateWhenRecordCancelled">
<summary>
Date when the record is cancelled. (DNULLDATE)..
</summary>
<remarks>Data-source is 'REPRESENTATIVEASSO.DNULLDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.Status">
<summary>
Register status (SSTATREGT)..
</summary>
<remarks>Data-source is 'REPRESENTATIVEASSO.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.ComputersDate">
<summary>
Date of the computer (DCOMPDATE)..
</summary>
<remarks>Data-source is 'REPRESENTATIVEASSO.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.User">
<summary>
UserCode (NUSERCODE)..
</summary>
<remarks>Data-source is 'REPRESENTATIVEASSO.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="RepresentativeAssociatedItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociated.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociatedCollection">
 <summary>
 Collection for RepresentativeAssociated class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociatedCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociatedCollection.AddRepresentativeAssociated">
 <summary>
 Add an instance of class 'RepresentativeAssociated' in the RepresentativeAssociatedCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociatedCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociatedCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociatedCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociatedCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.RepresentativeAssociatedCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService">
 <summary>
 Result/Conclusion used by type of order for service (Inspection/Survey)
 </summary>
<remarks>Data-source is 'Prof_ord_FinalNote'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.CreateNewResultConclusionUsedByTypeOfOrderForService">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._TypeOfOrderForService">
<summary>
Type of order for service
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._ResultConclusion">
<summary>
Result/Conclusion
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._LongDescription">
<summary>
Long description
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._ShortDescription">
<summary>
Short Description
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._CaseStatus">
<summary>
Case status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._FinalDecision">
<summary>
Final decision
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._FinalDecisionCause">
<summary>
Cause of the final decision
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.TypeOfOrderForService">
<summary>
Type of order for service (nOrderType)..
</summary>
<remarks>Data-source is 'Prof_ord_FinalNote.nOrderType'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.ResultConclusion">
<summary>
Result/Conclusion (nFinalNote)..
</summary>
<remarks>Data-source is 'Prof_ord_FinalNote.nFinalNote'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.LongDescription">
<summary>
Long description (sDescript)..
</summary>
<remarks>Data-source is 'Prof_ord_FinalNote.sDescript'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.ShortDescription">
<summary>
Short Description (sShort_Des)..
</summary>
<remarks>Data-source is 'Prof_ord_FinalNote.sShort_Des'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.CaseStatus">
<summary>
Case status (nUWCaseStatus)..
</summary>
<remarks>Data-source is 'Prof_ord_FinalNote.nUWCaseStatus'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.FinalDecision">
<summary>
Final decision (nUWDecision)..
</summary>
<remarks>Data-source is 'Prof_ord_FinalNote.nUWDecision'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.FinalDecisionCause">
<summary>
Cause of the final decision (nUWMotive)..
</summary>
<remarks>Data-source is 'Prof_ord_FinalNote.nUWMotive'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.Status">
<summary>
Register status (sStatregt)..
</summary>
<remarks>Data-source is 'Prof_ord_FinalNote.sStatregt'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.ComputersDate">
<summary>
Date of the computer (dCompDate)..
</summary>
<remarks>Data-source is 'Prof_ord_FinalNote.dCompDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.User">
<summary>
UserCode (nUserCode)..
</summary>
<remarks>Data-source is 'Prof_ord_FinalNote.nUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="ResultConclusionUsedByTypeOfOrderForServiceItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForService.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForServiceCollection">
 <summary>
 Collection for ResultConclusionUsedByTypeOfOrderForService class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForServiceCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForServiceCollection.AddResultConclusionUsedByTypeOfOrderForService">
 <summary>
 Add an instance of class 'ResultConclusionUsedByTypeOfOrderForService' in the ResultConclusionUsedByTypeOfOrderForServiceCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForServiceCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForServiceCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForServiceCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForServiceCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.ResultConclusionUsedByTypeOfOrderForServiceCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED">
 <summary>
 
 </summary>
<remarks>Data-source is 'SLATASK_ASSOCIATED'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.CreateNewSLATASK_ASSOCIATED">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._OrderType">
<summary>
Code of the type of orders for service.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._Task">
<summary>
Task
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._GeographicZone">
<summary>
Geographic zone
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._DeadLineDays">
<summary>
Dead line days
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._SupportModification">
<summary>
Support manual modification
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._EffectiveDate">
<summary>
Effective Date of the register
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._DateWhenRecordCancelled">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.OrderType">
<summary>
Code of the type of orders for service. (NORDERTYPE)..
</summary>
<remarks>Data-source is 'SLATASK_ASSOCIATED.NORDERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.Task">
<summary>
Task (NTASK)..
</summary>
<remarks>Data-source is 'SLATASK_ASSOCIATED.NTASK'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.GeographicZone">
<summary>
Geographic zone (NZONE)..
</summary>
<remarks>Data-source is 'SLATASK_ASSOCIATED.NZONE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.DeadLineDays">
<summary>
Dead line days (NDEADLINEDAYS)..
</summary>
<remarks>Data-source is 'SLATASK_ASSOCIATED.NDEADLINEDAYS'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.SupportModification">
<summary>
Support manual modification (NMANUALMOD)..
</summary>
<remarks>Data-source is 'SLATASK_ASSOCIATED.NMANUALMOD'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.EffectiveDate">
<summary>
Effective Date of the register (DEFFECDATE)..
</summary>
<remarks>Data-source is 'SLATASK_ASSOCIATED.DEFFECDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.DateWhenRecordCancelled">
<summary>
Date when the record is cancelled. (DNULLDATE)..
</summary>
<remarks>Data-source is 'SLATASK_ASSOCIATED.DNULLDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.Status">
<summary>
Register status (SSTATREGT)..
</summary>
<remarks>Data-source is 'SLATASK_ASSOCIATED.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.ComputersDate">
<summary>
Date of the computer (DCOMPDATE)..
</summary>
<remarks>Data-source is 'SLATASK_ASSOCIATED.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.User">
<summary>
UserCode (NUSERCODE)..
</summary>
<remarks>Data-source is 'SLATASK_ASSOCIATED.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="SLATASK_ASSOCIATEDItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.OrderTypeDescription">
 <summary>
 Code of the type of orders for service.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE7100'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.TaskDescription">
 <summary>
 Task
 </summary>
 <remarks>
 This property is associated with the field 'TABLE6811' on the table 'TABLE6811'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATED.SupportModificationDescription">
 <summary>
 Support manual modification
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE23'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATEDCollection">
 <summary>
 Collection for SLATASK_ASSOCIATED class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATEDCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATEDCollection.AddSLATASK_ASSOCIATED">
 <summary>
 Add an instance of class 'SLATASK_ASSOCIATED' in the SLATASK_ASSOCIATEDCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATEDCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATEDCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATEDCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATEDCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SLATASK_ASSOCIATEDCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService">
 <summary>
 Sub Classification of Types of orders for service
 </summary>
<remarks>Data-source is 'ORDERTYPE_SUBCLASS'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.CreateNewSubClassificationOfTypesOfOrdersForService">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService._OrderType">
<summary>
Code of the type of orders for service.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService._SubtypeOfOrderforServide">
<summary>
Subtype of Order for service
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService._EffectiveDate">
<summary>
Effective Date of the register
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService._DateWhenRecordCancelled">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService._User">
<summary>
UserCode
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService._dEffecdateOld">
<summary>
pending
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.OrderType">
<summary>
Code of the type of orders for service. (NORDERTYPE)..
</summary>
<remarks>Data-source is 'ORDERTYPE_SUBCLASS.NORDERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.SubtypeOfOrderforServide">
<summary>
Subtype of Order for service (NORDERSUBTYPE)..
</summary>
<remarks>Data-source is 'ORDERTYPE_SUBCLASS.NORDERSUBTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.EffectiveDate">
<summary>
Effective Date of the register (DEFFECDATE)..
</summary>
<remarks>Data-source is 'ORDERTYPE_SUBCLASS.DEFFECDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.DateWhenRecordCancelled">
<summary>
Date when the record is cancelled. (DNULLDATE)..
</summary>
<remarks>Data-source is 'ORDERTYPE_SUBCLASS.DNULLDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.Status">
<summary>
Register status (SSTATREGT)..
</summary>
<remarks>Data-source is 'ORDERTYPE_SUBCLASS.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.ComputersDate">
<summary>
Date of the computer (DCOMPDATE)..
</summary>
<remarks>Data-source is 'ORDERTYPE_SUBCLASS.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.User">
<summary>
UserCode (NUSERCODE)..
</summary>
<remarks>Data-source is 'ORDERTYPE_SUBCLASS.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="SubClassificationOfTypesOfOrdersForServiceItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.OrderTypeDescription">
 <summary>
 Code of the type of orders for service.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE7100'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForService.SubtypeOfOrderforServideDescription">
 <summary>
 Subtype of Order for service
 </summary>
 <remarks>
 This property is associated with the field 'TABLE6810' on the table 'TABLE6810'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForServiceCollection">
 <summary>
 Collection for SubClassificationOfTypesOfOrdersForService class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForServiceCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForServiceCollection.AddSubClassificationOfTypesOfOrdersForService">
 <summary>
 Add an instance of class 'SubClassificationOfTypesOfOrdersForService' in the SubClassificationOfTypesOfOrdersForServiceCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForServiceCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForServiceCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForServiceCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForServiceCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.SubClassificationOfTypesOfOrdersForServiceCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService">
 <summary>
 Tasks associated to a Type of order for service
 </summary>
<remarks>Data-source is 'Prof_ord_Task'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.CreateNewTasksAssociatedToATypeOfOrderForService">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService._ServiceOrder">
<summary>
Number of the service order.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService._Task">
<summary>
Task
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService._ExecutionLimitDate">
<summary>
Execution limit date
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService._ExecutionDate">
<summary>
Execution date
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.ServiceOrder">
<summary>
Number of the service order. (NSERV_ORDER)..
</summary>
<remarks>Data-source is 'Prof_ord_Task.NSERV_ORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.Task">
<summary>
Task (NTASK)..
</summary>
<remarks>Data-source is 'Prof_ord_Task.NTASK'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.ExecutionLimitDate">
<summary>
Execution limit date (dLimitDate)..
</summary>
<remarks>Data-source is 'Prof_ord_Task.dLimitDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.ExecutionDate">
<summary>
Execution date (dExecutionDate)..
</summary>
<remarks>Data-source is 'Prof_ord_Task.dExecutionDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.ComputersDate">
<summary>
Date of the computer (dCompDate)..
</summary>
<remarks>Data-source is 'Prof_ord_Task.dCompDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.User">
<summary>
UserCode (nUserCode)..
</summary>
<remarks>Data-source is 'Prof_ord_Task.nUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TasksAssociatedToATypeOfOrderForServiceItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForService.TaskDescription">
 <summary>
 Task
 </summary>
 <remarks>
 This property is associated with the field 'TABLE6811' on the table 'TABLE6811'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForServiceCollection">
 <summary>
 Collection for TasksAssociatedToATypeOfOrderForService class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForServiceCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForServiceCollection.AddTasksAssociatedToATypeOfOrderForService">
 <summary>
 Add an instance of class 'TasksAssociatedToATypeOfOrderForService' in the TasksAssociatedToATypeOfOrderForServiceCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForServiceCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForServiceCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForServiceCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForServiceCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToATypeOfOrderForServiceCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService">
 <summary>
 Tasks associated to a Type of order for service
 </summary>
<remarks>Data-source is 'TASK_ASSOCIATED'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.CreateNewTasksAssociatedToTypeOfOrderForService">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._OrderType">
<summary>
Code of the type of orders for service.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._Task">
<summary>
Task
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._ExecutionSequence">
<summary>
Execution sequence
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._Code">
<summary>
Affirmative/Negative values.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._EffectiveDate">
<summary>
Effective Date of the register
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._DateWhenRecordCancelled">
<summary>
Date when the record is cancelled.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.OrderType">
<summary>
Code of the type of orders for service. (NORDERTYPE)..
</summary>
<remarks>Data-source is 'TASK_ASSOCIATED.NORDERTYPE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.Task">
<summary>
Task (NTASK)..
</summary>
<remarks>Data-source is 'TASK_ASSOCIATED.NTASK'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.ExecutionSequence">
<summary>
Execution sequence (NSEQUENCE)..
</summary>
<remarks>Data-source is 'TASK_ASSOCIATED.NSEQUENCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.Code">
<summary>
Affirmative/Negative values. (NUSERTASK)..
</summary>
<remarks>Data-source is 'TASK_ASSOCIATED.NUSERTASK'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.EffectiveDate">
<summary>
Effective Date of the register (DEFFECDATE)..
</summary>
<remarks>Data-source is 'TASK_ASSOCIATED.DEFFECDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.DateWhenRecordCancelled">
<summary>
Date when the record is cancelled. (DNULLDATE)..
</summary>
<remarks>Data-source is 'TASK_ASSOCIATED.DNULLDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.Status">
<summary>
Register status (SSTATREGT)..
</summary>
<remarks>Data-source is 'TASK_ASSOCIATED.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.ComputersDate">
<summary>
Date of the computer (DCOMPDATE)..
</summary>
<remarks>Data-source is 'TASK_ASSOCIATED.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.User">
<summary>
UserCode (NUSERCODE)..
</summary>
<remarks>Data-source is 'TASK_ASSOCIATED.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TasksAssociatedToTypeOfOrderForServiceItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.OrderTypeDescription">
 <summary>
 Code of the type of orders for service.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE7100'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.TaskDescription">
 <summary>
 Task
 </summary>
 <remarks>
 This property is associated with the field 'TABLE6811' on the table 'TABLE6811'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForService.CodeDescription">
 <summary>
 Affirmative/Negative values.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE23'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForServiceCollection">
 <summary>
 Collection for TasksAssociatedToTypeOfOrderForService class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForServiceCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForServiceCollection.AddTasksAssociatedToTypeOfOrderForService">
 <summary>
 Add an instance of class 'TasksAssociatedToTypeOfOrderForService' in the TasksAssociatedToTypeOfOrderForServiceCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForServiceCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForServiceCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForServiceCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForServiceCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.TasksAssociatedToTypeOfOrderForServiceCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor">
 <summary>
 Providers table.
 </summary>
<remarks>Data-source is 'TAB_PROVIDER'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.CreateNewVendor">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._VendorCode">
<summary>
Code of the vendor.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._VendorType">
<summary>
Type of vendor.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._RecordDate">
<summary>
Date when the information was first entered into the system.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._EndingDate">
<summary>
Ending date of the vendor as valid in the system.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._BranchOffice">
<summary>
Branch office to which the vendor belongs.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._PendingOrdersPermitted">
<summary>
Maximum number of service orders with pending status permitted to a vendor.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._SupportingDocument">
<summary>
Type of support document.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._DiscountByVendor">
<summary>
Discount percent that the vendor grants.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._Concessionaire">
<summary>
Indicator that the vendor is an auto concessionaire or distributor.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._VendorsZones">
<summary>
Table of communities associated with a supplier.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._CostForTypesOfOrdersForServices">
<summary>
Cost for Types of orders for service
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor._RepresentativeAssociateds">
<summary>
Representative Associated
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.VendorCode">
<summary>
Code of the vendor. (NPROVIDER)..
</summary>
<remarks>Data-source is 'TAB_PROVIDER.NPROVIDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.VendorType">
<summary>
Type of vendor. (NTYPEPROV)..
</summary>
<remarks>Data-source is 'TAB_PROVIDER.NTYPEPROV'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.ClientID">
<summary>
Code of the client. (SCLIENT)..
</summary>
<remarks>Data-source is 'TAB_PROVIDER.SCLIENT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'TAB_PROVIDER.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.RecordStatus">
<summary>
Status of the record. (SSTATREGT)..
</summary>
<remarks>Data-source is 'TAB_PROVIDER.SSTATREGT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.RecordStatusEnum">
<summary>
Status of the record.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.RecordStatusEnumText">
<summary>
Status of the record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'TAB_PROVIDER.NUSERCODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.RecordDate">
<summary>
Date when the information was first entered into the system. (DINPDATE)..
</summary>
<remarks>Data-source is 'TAB_PROVIDER.DINPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.EndingDate">
<summary>
Ending date of the vendor as valid in the system. (DOUTDATE)..
</summary>
<remarks>Data-source is 'TAB_PROVIDER.DOUTDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.BranchOffice">
<summary>
Branch office to which the vendor belongs. (NOFFICE)..
</summary>
<remarks>Data-source is 'TAB_PROVIDER.NOFFICE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.PendingOrdersPermitted">
<summary>
Maximum number of service orders with pending status permitted to a vendor. (NMAX_SERV_ORD)..
</summary>
<remarks>Data-source is 'TAB_PROVIDER.NMAX_SERV_ORD'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.SupportingDocument">
<summary>
Type of support document. (NTYPESUPPORT)..
</summary>
<remarks>Data-source is 'TAB_PROVIDER.NTYPESUPPORT'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.DiscountByVendor">
<summary>
Discount percent that the vendor grants. (NPER_DISC)..
</summary>
<remarks>Data-source is 'TAB_PROVIDER.NPER_DISC'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.Concessionaire">
<summary>
Indicator that the vendor is an auto concessionaire or distributor. (SCONCESIONARY)..
</summary>
<remarks>Data-source is 'TAB_PROVIDER.SCONCESIONARY'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.NewVendorsZonesInstance">
<summary>
Initializes the 'VendorsZones' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.NewVendorsZoneItem(System.Boolean)">
<summary>
Add a new item to the collection of 'VendorsZones', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'VendorsZone' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.VendorsZones">
<summary>
Table of communities associated with a supplier. collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.NewCostForTypesOfOrdersForServicesInstance">
<summary>
Initializes the 'CostForTypesOfOrdersForServices' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.NewCostForTypesOfOrdersForServiceItem(System.Boolean)">
<summary>
Add a new item to the collection of 'CostForTypesOfOrdersForServices', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'CostForTypesOfOrdersForService' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.CostForTypesOfOrdersForServices">
<summary>
Cost for Types of orders for service collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.NewRepresentativeAssociatedsInstance">
<summary>
Initializes the 'RepresentativeAssociateds' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.NewRepresentativeAssociatedItem(System.Boolean)">
<summary>
Add a new item to the collection of 'RepresentativeAssociateds', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'RepresentativeAssociated' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.RepresentativeAssociateds">
<summary>
Representative Associated collection.
</summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="VendorItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.VendorTypeDescription">
 <summary>
 Type of vendor.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE7027'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.BranchOfficeDescription">
 <summary>
 Branch office to which the vendor belongs.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE9'.
 </remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Vendor.SupportingDocumentDescription">
 <summary>
 Type of support document.
 </summary>
 <remarks>
 This property is associated with the field 'SDESCRIPT' on the table 'TABLE5570'.
 </remarks>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorCollection">
 <summary>
 Collection for Vendor class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorCollection.AddVendor">
 <summary>
 Add an instance of class 'Vendor' in the VendorCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone">
 <summary>
 Table of communities associated with a supplier.
 </summary>
<remarks>Data-source is 'TAB_PROV_ZONE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.CreateNewVendorsZone">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone._VendorCode">
<summary>
Code of the vendor.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone._Zone">
<summary>
Code of zone where the vendor can operate.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone._Order">
<summary>
Order or priority to operate in each municipality.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.VendorCode">
<summary>
Code of the vendor. (NPROVIDER)..
</summary>
<remarks>Data-source is 'TAB_PROV_ZONE.NPROVIDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.Zone">
<summary>
Code of zone where the vendor can operate. (NZONE)..
</summary>
<remarks>Data-source is 'TAB_PROV_ZONE.NZONE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.Order">
<summary>
Order or priority to operate in each municipality. (NORDER)..
</summary>
<remarks>Data-source is 'TAB_PROV_ZONE.NORDER'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (DCOMPDATE)..
</summary>
<remarks>Data-source is 'TAB_PROV_ZONE.DCOMPDATE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.UserCode">
<summary>
Code of the user creating or updating the record. (NUSERCODE)..
</summary>
<remarks>Data-source is 'TAB_PROV_ZONE.NUSERCODE'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="VendorsZoneItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZone.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZoneCollection">
 <summary>
 Collection for VendorsZone class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZoneCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZoneCollection.AddVendorsZone">
 <summary>
 Add an instance of class 'VendorsZone' in the VendorsZoneCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZoneCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZoneCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZoneCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZoneCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.VendorsZoneCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component">
 <summary>
 Zone components
 </summary>
<remarks>Data-source is 'Zone_Components'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.CreateNewZone_Component">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._GeographicZone">
<summary>
Geographic zone
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._ConsecutiveNumber">
<summary>
Consecutive Number
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._CountyCode">
<summary>
Code of the country.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._StateOrProvince">
<summary>
Code of the state or province.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._CityCode">
<summary>
Code from the city to which the municipality belongs.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._MunicipalityCode">
<summary>
Code of the municipality.
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._Zipcode">
<summary>
Zip code
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.GeographicZone">
<summary>
Geographic zone (NZONE)..
</summary>
<remarks>Data-source is 'Zone_Components.NZONE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.ConsecutiveNumber">
<summary>
Consecutive Number (nConsec)..
</summary>
<remarks>Data-source is 'Zone_Components.nConsec'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.CountyCode">
<summary>
Code of the country. (NCOUNTRY)..
</summary>
<remarks>Data-source is 'Zone_Components.NCOUNTRY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.StateOrProvince">
<summary>
Code of the state or province. (NPROVINCE)..
</summary>
<remarks>Data-source is 'Zone_Components.NPROVINCE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.CityCode">
<summary>
Code from the city to which the municipality belongs. (NLOCAL)..
</summary>
<remarks>Data-source is 'Zone_Components.NLOCAL'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.MunicipalityCode">
<summary>
Code of the municipality. (NMUNICIPALITY)..
</summary>
<remarks>Data-source is 'Zone_Components.NMUNICIPALITY'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.Zipcode">
<summary>
Zip code (SZIP_CODE)..
</summary>
<remarks>Data-source is 'Zone_Components.SZIP_CODE'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.Status">
<summary>
Register status (sStatregt)..
</summary>
<remarks>Data-source is 'Zone_Components.sStatregt'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.ComputersDate">
<summary>
Date of the computer (dCompDate)..
</summary>
<remarks>Data-source is 'Zone_Components.dCompDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.User">
<summary>
UserCode (nUserCode)..
</summary>
<remarks>Data-source is 'Zone_Components.nUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="Zone_ComponentItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Component.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_ComponentCollection">
 <summary>
 Collection for Zone_Component class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_ComponentCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_ComponentCollection.AddZone_Component">
 <summary>
 Add an instance of class 'Zone_Component' in the Zone_ComponentCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_ComponentCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_ComponentCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_ComponentCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_ComponentCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_ComponentCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member">
 <summary>
 Group of members of an entity
 </summary>
<remarks>Data-source is 'Zone_Entity_Members'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.CreateNewZone_Entity_Member">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member._IdentificationOfTheEntity">
<summary>
Identification of the entity
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member._ValueOFTheEntity">
<summary>
Value of the entity
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member._DescriptionOfTheRelation">
<summary>
Description of the relation
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member._ShortDescription">
<summary>
Short Description
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member._Group">
<summary>
Group
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member._Status">
<summary>
Register status
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member._ComputersDate">
<summary>
Date of the computer
</summary>
</member>
<member name="F:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member._User">
<summary>
UserCode
</summary>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.IdentificationOfTheEntity">
<summary>
Identification of the entity (nEntityId)..
</summary>
<remarks>Data-source is 'Zone_Entity_Members.nEntityId'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.ValueOFTheEntity">
<summary>
Value of the entity (nEntityVal)..
</summary>
<remarks>Data-source is 'Zone_Entity_Members.nEntityVal'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.DescriptionOfTheRelation">
<summary>
Description of the relation (sDescript)..
</summary>
<remarks>Data-source is 'Zone_Entity_Members.sDescript'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.ShortDescription">
<summary>
Short Description (sShort_Des)..
</summary>
<remarks>Data-source is 'Zone_Entity_Members.sShort_Des'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.Group">
<summary>
Group (nGroup)..
</summary>
<remarks>Data-source is 'Zone_Entity_Members.nGroup'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.Status">
<summary>
Register status (sStatregt)..
</summary>
<remarks>Data-source is 'Zone_Entity_Members.sStatregt'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.StatusEnum">
<summary>
Register status
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.StatusEnumText">
<summary>
Register status
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.ComputersDate">
<summary>
Date of the computer (dCompDate)..
</summary>
<remarks>Data-source is 'Zone_Entity_Members.dCompDate'.</remarks>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.User">
<summary>
UserCode (nUserCode)..
</summary>
<remarks>Data-source is 'Zone_Entity_Members.nUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="Zone_Entity_MemberItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_Member.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_MemberCollection">
 <summary>
 Collection for Zone_Entity_Member class
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_MemberCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_MemberCollection.AddZone_Entity_Member">
 <summary>
 Add an instance of class 'Zone_Entity_Member' in the Zone_Entity_MemberCollection.
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_MemberCollection.Compare(InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_MemberCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_MemberCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_MemberCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.General.Entity.Contracts.ServiceOrders.Zone_Entity_MemberCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
</members>
</doc>
