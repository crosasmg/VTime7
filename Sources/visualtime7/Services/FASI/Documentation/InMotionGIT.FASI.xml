<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InMotionGIT.FASI</name>
    </assembly>
    <members>
        <member name="T:InMotionGIT.FASI.App_Start.AddAuthTokenHeaderParameter">
             <summary>
            
             </summary>
        </member>
        <member name="T:InMotionGIT.FASI.App_Start.AuthorizationManager">
            <summary>
            Custom verification for the access of the webapi.
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.App_Start.AuthorizationManager.IsAuthorized(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Verifies the roles of the token after the OnAuthorization is called.
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.App_Start.AuthorizationManager.GetPathName(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            Gets the full path of the action.
            </summary>
            <param name="actionContext"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.App_Start.Startup.Configuration(Owin.IAppBuilder)">
             <summary>
            
             </summary>
             <param name="app"></param>
        </member>
        <member name="M:InMotionGIT.FASI.App_Start.Startup.GetXmlCommentsPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.App_Start.SwaggerConfig.GetXmlCommentsPath">
            <summary>
            Obtiene el path de la documentación del API
            </summary>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.UnityConfig">
            <summary>
            Specifies the Unity configuration for the main container.
            </summary>
        </member>
        <member name="P:InMotionGIT.FASI.UnityConfig.Container">
            <summary>
            Configured Unity Container.
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.UnityConfig.RegisterTypes(Unity.IUnityContainer)">
            <summary>
            Registers the type mappings with the Unity container.
            </summary>
            <param name="container">The unity container to configure.</param>
            <remarks>
            There is no need to register concrete types such as controllers or
            API controllers (unless you want to change the defaults), as Unity
            allows resolving a concrete type even if it was not previously
            registered.
            </remarks>
        </member>
        <member name="T:InMotionGIT.FASI.UnityWebApiActivator">
            <summary>
            Provides the bootstrapping for integrating Unity with WebApi when it is hosted in ASP.NET.
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.UnityWebApiActivator.Start">
            <summary>
            Integrates Unity when the application starts.
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.UnityWebApiActivator.Shutdown">
            <summary>
            Disposes the Unity container when the application is shut down.
            </summary>
        </member>
        <member name="T:InMotionGIT.FASI.Controllers.AuthenticationController">
             <summary>
             Controlador que permite operaciones de seguridad
             </summary>
            
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.AuthenticationController.Token(System.String,System.String,System.String)">
            <summary>
             Genera un token de acceso a la aplicación, a partir de las credenciales de un usuario valido.
            </summary>
            <param name="email">Email o usuario a validar</param>
            <param name="password">Password </param>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.AuthenticationController.ValidateRoleByToken(System.String,System.String)">
            <summary>
             Valida los roles de un usuario en base al token y su id embebido
            </summary>
            <param name="Token">Token de usuario a validar</param>
            <param name="Roles">Roles a validar separados por ',' </param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.AuthenticationController.PortalAuthentication(System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
             Realiza la validación de credenciales de un usuario en específico, de acuerdo a el resultado de la validación retorna información.
            </summary>
            <param name="email">Email del usuario.</param>
            <param name="password">Clave para acceder al sistema.</param>
            <param name="companyId">Código de la compañía.</param>
            
            
            4
            <param name="ip">IP.</param>
            <param name="languageId">Language Id</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.AuthenticationController.ValidateAccessRoles(System.String[])">
            <summary>
             Realiza la validación acceso de los roles para las forms, query y cruds
            </summary>
            <param name="roles">Array de roles a validar</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Controllers.BackOfficeController">
            <summary>
            Controlador que administra las operaciones de BackOffice
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.FullMenuInformation(System.String,System.String,System.Int32)">
            <summary>
             Retorna la información de un menú de BackOffice por su código
            </summary>
            <param name="menuCode">Code of the menu..</param>
            <param name="schemaCode">Code of the schema..</param>
            <param name="companyId">Identification of the company..</param>
            <returns>List of the items</returns>
            <remarks></remarks>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.MakeURL(System.String,System.String,System.Int32)">
            <summary>
             Crea la URL para acceder a las transacciones de BackOffice
            </summary>
            <param name="windowLogicalCode">Código de la ventana (código lógico)</param>
            <param name="schemaCode">Code of the schema..</param>
            <param name="companyId">Identification of the company..</param>
            <returns>List of the items</returns>
            <remarks></remarks>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.MakeURLIfAllowed(System.String,System.String,System.Int32)">
            <summary>
             Crea la URL para acceder a las transacciones de BackOffice
            </summary>
            <param name="windowLogicalCode">Código de la ventana (código lógico)</param>
            <param name="schemaCode">Code of the schema..</param>
            <param name="companyId">Identification of the company..</param>
            <returns>List of the items</returns>
            <remarks></remarks>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.IsAllowed(System.String,System.String,System.String,System.Int32)">
            <summary>
            Validar si un usuario tiene esta permitido utilizar una transacción determinada
            </summary>
            <param name="userCode">User code</param>
            <param name="userSchema">User Schema</param>
            <param name="windowLogicalCode">Transaction code de la ventana</param>
            <param name="languageId">Lenguaje</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.GetTransaction(System.String,System.String,System.String)">
            <summary>
             Obtiene las operaciones que tiene acceso el usuario
            </summary>
            <param name="prefix">Código de esquema del usuario</param>
            <param name="userSchema">Código de schema</param>
            <param name="transactionCode">Código a ubicar en la tabla windows</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.ClientsLkp(System.String)">
            <summary>
             Lookup de Clientes
            </summary>
            <param name="Ids">Código de esquema del usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.ClientsLkpPagination(System.Int32,System.Int32,System.String)">
            <summary>
             Lookup de Clientes paginado
            </summary>
            <param name="startIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="endIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="filter">Permite realizar un filtro por los campos UserName, Email, ClientId y ProducerId</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.ClientByIdLkp(System.String)">
            <summary>
             Retorna el nombre de usuario especifico
            </summary>
            <param name="Id">Id de usuario a consultar el nombre</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.ProducerLkpPagination(System.Int32,System.Int32,System.String)">
            <summary>
             Lookup del productor paginados
            </summary>
            <param name="startIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="endIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="filter">Permite realizar un filtro por los campos UserName, Email, ClientId y ProducerId</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.ProducerLkp(System.String)">
            <summary>
             Lookup de producer
            </summary>
            <param name="Ids">Código del ids de los productores separados por ';' de ser mas de uno mas si se desea todos sebe ser ''*</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.ProducerByIdLkp(System.String)">
            <summary>
            Retorna el nombre del Productor con base del id
            </summary>
            <param name="Id">Id del productor id</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.LineOfBusinessLkp">
            <summary>
             Lookup de líneas de negocio o ramos
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.LoadCustomMenues">
            <summary>
             Carga de menues personalizados según el usuario conectado 
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.SecuritySchemaLkp">
            <summary>
             Lookup de líneas de negocio o ramos
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.LookupUsers">
            <summary>
            Lookup de usuarios del Backoffice.
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.CompleteClientName(System.String,System.Boolean)">
            <summary>
            Permite recuperar el nombre completo de un cliente a partir de su código.
            </summary>
            <param name="clientID">Código de cliente.</param>
            <param name="withClientId">Valor booleano que representa si se agrega el clientId al resultado.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.BackOfficeController.LookupClient(System.String,System.Int32,System.Int32)">
            <summary>
            Retorna una lista filtrada y paginada de los clientes del Backoffice.
            </summary>
            <param name="filter">Filtro de búsqueda si es numérico se busca por código y si es texto por el nombre del cliente.</param>
            <param name="beginIndex">Número de registro inicial.</param>
            <param name="endIndex">Número de registro final.</param>
        </member>
        <member name="T:InMotionGIT.FASI.Controllers.CorrespondenceController">
            <summary>
             Controlador dedicado a envió de Emails
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.CorrespondenceController.SendMailWithTemplate(InMotionGIT.FASI.Correspondence.Entity.Parameter)">
            <summary>
            Envía email en base a un template
            </summary>
            <param name="item">Configuración para el envió de email</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Controllers.DiaryController">
            <summary>
            Controlador que administra las operaciones de agenda
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.Lookups(System.String,System.Int32)">
            <summary>
             Método que retorna los lookup de agenda
            </summary>
            <param name="key">Key del lookup, en caso de pasar "*" se devuelve una lista con los lookups disponibles</param>
            <param name="languageId">Id del lenguaje</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:InMotionGIT.FASI.Controllers.DiaryController.GroupsUsedInTask(System.String)" -->
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.GetTasksToNotify(System.DateTime,System.DateTime)">
            <summary>
            Obtiene lista de tareas por notificar en un perido de tiempo
            </summary>
            <param name="from">Fecha de inicio de periodo</param>       
            <param name="to">Fecha de termino del periodo</param>       
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.MailBoxes(System.Int32)">
            <summary>
            Define la estructura del menus disponibles en la ventana de agenda
            </summary>        
            <param name="languageId">Lenguaje para filtrado de traducción</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.RetrieveMailBoxById(System.Int32,System.Int32)">
            <summary>
            Obtiene mailbox por su código
            </summary>
            <param name="mailBoxId">Código del mailbox</param>        
            <param name="languageId">Lenguaje para filtrado de traducción</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.CreateMailBox(System.Int32,System.Int32)">
            <summary>
            Crea una bandeja de tareas vinculada a otra bandeja (superior)
            </summary>
            <param name="parentId">Código de la bandeja de tarea superior</param>
            <param name="languageId">Lenguaje para filtrado de traducción</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.UpdateMailBox(System.Int32,System.Collections.Generic.KeyValuePair{System.String,System.String},System.Int32)">
            <summary>
            Actualiza una columnas determinada en la table MailBoxes
            </summary>
            <param name="mailBoxId">Código de la bandeja de tareas</param>
            <param name="value">Objeto KeyValuePair que contiene el nombre del campo y el valor del mismo</param>
            <param name="languageId">Lenguaje para filtrado de traducción</param>        
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.UpdateMailBoxChildrenPosition(System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}})">
            <summary>
            Actualiza las posiciones de las ramas inferiores
            </summary>
            <param name="parentId">Código de la bandeja de tarea superior</param>
            <param name="nodes">Lista de codigo (mailBox) y posición</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.UpdateSemaphore(System.Int32,System.Collections.Generic.List{System.Int16})">
            <summary>
            Actualiza la configuración del semáforo
            </summary>
            <param name="mailboxid">Código de la bandeja de tareas</param>        
            <param name="items">Rango configarado</param>        
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.DeleteMailBox(System.Int32)">
            <summary>
            Elimina una bandeja de tareas
            </summary>
            <param name="mailBoxId">Codigo de la bandeja</param>           
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.Tasks(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Método que prove las tareas de un mailbox especifico por un id de usuario
            </summary>
            <param name="mailBoxId">Identificador del Mailbox</param>
            <param name="sourceType">Tipo de fuente</param>
            <param name="beginIndex">Inicio de index</param>
            <param name="endIndex">Final de index</param>
            <param name="search">Parámetro de búsqueda</param>
            <param name="languageId">Id del lenguaje</param>
            <param name="filterId">Id del filtro</param>
            <param name="sort">Parámetro de orden</param>
            <param name="order">Parámetro de orden por</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.RetrieveTaskById(System.String)">
            <summary>
            Obtiene una tarea por su código
            </summary>
            <param name="taskId">Código de la tarea</param>        
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.RetrieveTaskHistoryById(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Obtiene el histórico de la tarea
            </summary>
            <param name="taskId">Código de la tarea</param>   
            <param name="offset">Cantidad de registro a ignorar</param>
            <param name="limit">Cantidad de registros</param>
            <param name="languageId">Id del lenguaje</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.RetrieveTaskElementsById(System.String)">
            <summary>
            Obtiene los parámetros para ejucución de transacción
            </summary>
            <param name="taskId">Código de la tarea</param>        
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.SynchronizeTask(InMotionGIT.FASI.Contracts.Diary.DTOs.TaskDTO,System.Int32)">
            <summary>
            Agrega o actualiza una tarea
            </summary>
            <param name="task">Data transfer object con los datos de la tarea</param>   
            <param name="languageId">Id del lenguaje</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.DeleteTask(System.String)">
            <summary>
            Elimina una tarea en la base de datos
            </summary>
            <param name="taskId">Codigo de la tarea</param>           
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.UpdateTaskStatus(InMotionGIT.FASI.Contracts.Diary.DTOs.TaskDTO)">
            <summary>
            Actualiza el estado de la tarea
            </summary>
            <param name="task">Data transfer object con los datos de la tarea</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.UpdateTaskMultipleAssign(InMotionGIT.FASI.Contracts.Diary.DTOs.TaskMultipleAssignDTO)">
            <summary>
            Actualiza los asignados de las tareas
            </summary>
            <param name="tasksAssigneds">Data transfer object con los datos de las tareas y los asignados</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.InactivateUser(InMotionGIT.FASI.Contracts.Diary.DTOs.InactivateUserDTO)">
            <summary>
            Inactiva el usuario por un periodo
            </summary>
            <param name="inactivateUserDto">Objecto con fecha de inicio y fin</param>        
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.RetrieveInactivates(System.Int32,System.Int32)">
            <summary>
            Obtiene las próximas fechas de inactivación del usuario
            </summary>
            <param name="offset">Cantidad de registro a ignorar</param>
            <param name="limit">Cantidad de registros</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.DeleteInactivateUser(System.String)">
            <summary>
            Elimina un registro de usuario inactivado
            </summary>
            <param name="id">Codigo del registro</param>  
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.IsUserInactive(System.DateTime,System.DateTime)">
            <summary>
            Verifica si el usuario está inactivo en el periodo
            </summary>        
            <param name="startingDate">Fecha de inicio</param>
            <param name="endingDate">Fecha de fin</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.IsUsersInactive(System.String,System.DateTime,System.DateTime)">
            <summary>
            Verifica si los usuarios están inactivos en el periodo
            </summary>
            <param name="users">Códigos de los usuarios</param>
            <param name="startingDate">Fecha de inicio</param>
            <param name="endingDate">Fecha de fin</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.DefaultMailBoxes(System.Int32)">
            <summary>
            Define la estructura del menus disponibles, por defecto, en la ventana de agenda
            </summary>        
            <param name="languageId">Lenguaje para filtrado de traducción</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.CreateDefaultMailBox(System.Int32,System.Int32)">
            <summary>
            Crea una bandeja de tareas por defecto, vinculada a otra bandeja (superior)
            </summary>
            <param name="parentId">Código de la bandeja de tarea superior</param>
            <param name="languageId">Lenguaje para filtrado de traducción</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.DiaryController.ForceMailBoxDeletion(System.Int32)">
            <summary>
            Elimina una bandeja de tareas por defecto
            </summary>
            <param name="mailBoxId">Codigo de la bandeja</param>           
        </member>
        <member name="T:InMotionGIT.FASI.Controllers.FasiController">
             <summary>
             Controlador que permite operaciones de FASI
             </summary>
            
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.CacheCleanByKey(System.String)">
            <summary>
             Limpieza de cache por Key
            </summary>
            <param name="Key">Key a eliminar en el cache</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.STSCreateUser(InMotionGIT.Seguridad.Contrato.DTOs.UserDTO)">
            <summary>
            Crea un usuario en STS.
            </summary>
            <param name="user">Crea un usuario especifico en el STS.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.CreatePortalUser(InMotionGIT.FASI.Contracts.Security.UserInformation)">
            <summary>
            Crea un usuario en FASI y STS.
            </summary>
            <param name="user">Usuario para crear la en el sistema de STS</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.Language(System.Int32)">
            <summary>
            Obtiene los lenguajes disponibles en fasi
            </summary>
            <param name="languageId"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.PageByUserName(System.String,System.Int32)">
            <summary>
            Retorna las páginas asociadas a un usuario por el nombre.
            </summary>
            <param name="userName">Nombre usuario</param>
            <param name="languageId">Lenguaje</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.PagesByUserId(System.Int32,System.Int32)">
            <summary>
            Retorna las páginas asociadas a un usuario por el Id.
            </summary>
            <param name="userId">User Id del usuario</param>
            <param name="languageId">Lenguaje</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.PageAdd(System.Int32)">
            <summary>
             Agrega una nueva página a un usuario
            </summary>
            <param name="languageId">Language Id</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.PageDelete(System.Int32)">
            <summary>
             Elimina una página a un usuario
            </summary>
            <param name="pageId">Id de la pagina</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.PageChange(System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Permite realizar cambios en una pagina, a nivel de las propiedades: Title, LayoutType, Order.
            </summary>
            <param name="pageId">Id de la pagina</param>
            <param name="newTitle">Id de la pagina</param>
            <param name="layoutType">formato layoutType</param>
            <param name="order">Orden a cambiar</param>
            <param name="languageId">Language Id</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.MultiCompany">
            <summary>
            Retorna la lista de compañías disponibles
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.MenuByName(System.String,System.Int32)">
            <summary>
            Retorna el menú por un código respectivo
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.WidgetsInPage(System.Int32,System.Int32)">
            <summary>
            Obtiene los widget de un pagina en especifico
            </summary>
            <param name="pageId"></param>
            <param name="languageId"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.UserAllowWidgets(System.Int32,System.Int32)">
            <summary>
             Retorna los widgets permitidos a un usuario acorde a los roles asignados
            </summary>
            <param name="userId">Id del usuario a buscar</param>
            <param name="languageId">Lenguaje a filtra los títulos del los widgets</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.WidgetAddInPage(System.Int32,System.Int32,System.Int32)">
            <summary>
              Agrega un Widget en una página.
            </summary>
            <param name="pageId">Id de la página.</param>
            <param name="widgetId">Código de WidgetInstance.</param>
            <param name="languageId">Código de lenguaje.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.WidgetExistInRole(System.Int32)">
            <summary>
            Verifica si existe una relación en widget relacionado con un role
            </summary>
            <param name="WidgetId">Id del widget</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.WidgetInstanceRemove(System.Int32)">
            <summary>
            Elimina un widget de una pagina
            </summary>
            <param name="id">Id del widgetintace a eliminar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.UpdateWidgetInstanceTitle(System.Int32,System.String,System.Int32)">
            <summary>
            Permite actualizar el título de un widget vinculado a un usuario.
            </summary>
            <param name="id">Id de Widget al cual el titulo será modificado.</param>
            <param name="title">Nuevo título del widget.</param>
            <param name="languageId">Lenguaje a Actualizar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.WidgetsInstanceChange(System.Collections.Generic.List{InMotionGIT.FASI.Contracts.General.WidgetInstance})">
            <summary>
            Permite realizar cambios en widget vinculado a un usuario
            </summary>
            <param name="items">Lista de widgets</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.WidgetIndex">
            <summary>
            Obtiene el ultimo id de tabla widget
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.Widgets(System.Int32,System.Int32,System.Int32)">
            <summary>
            Obtiene los widgets disponibles
            </summary>
            <param name="languageId">Lenguaje a seleccionar</param>
            <param name="startIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="endIndex">Inicio de indice para seleccionar la pagina</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.WidgetsLkp(System.String,System.Int32)">
            <summary>
            Obtiene los lookups de widget  por sus Ids, de pasar * retorna todos loso widgets
            </summary>
            <param name="widgetIds">Ids de los widgets</param>
            <param name="languageId">Lenguaje a seleccionar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.WidgetAdd(InMotionGIT.FASI.Contracts.General.Widget)">
            <summary>
            Crea un widget en la FASI
            </summary>
            <param name="item">Entidad a agregar de widget</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.WidgetUpdate(InMotionGIT.FASI.Contracts.General.Widget)">
            <summary>
            Actualiza un widget en la FASI
            </summary>
            <param name="item">Entidad a actualizar de widget</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.WidgetDelete(System.Int32)">
            <summary>
            Elimina un widget de Fasi
            </summary>
            <param name="Id">Id del widget a eliminar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.WidgetByRole(System.Int32,System.Int32)">
            <summary>
            Entrega un lista de los widget por role
            </summary>
            <param name="RoleId">Id del role</param>
            <param name="languageId">Lenguaje a seleccionar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.RoleWidgetsIndex">
            <summary>
             Obtiene el ultimo id de tabla WidgetInRole
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.RoleWidgetsAdd(InMotionGIT.FASI.Contracts.General.RoleWidget)">
            <summary>
            Crea un RoleWidgets en la FASI
            </summary>
            <param name="item">Entidad a agregar de RoleWidgets</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.RoleWidgetsUpdate(InMotionGIT.FASI.Contracts.General.RoleWidget)">
            <summary>
            Actualiza un widget en la FASI
            </summary>
            <param name="item">Entidad a actualizar de RoleWidget</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.RoleWidgetDelete(System.Int32)">
            <summary>
            Elimina un RoleWidget de Fasi
            </summary>
            <param name="Id">Id del RoleWidget a eliminar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.RolesByWidgetId(System.Int32)">
            <summary>
            Permite obtener una cadena de carácteres con todos los nombres de los roles relacionados a un widget en particular.
            </summary>
            <param name="WidgetId">Identificador del widget.</param>
            <returns>Cadena de carácteres con todos los nombres de los roles relacionados a un widget</returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.LookUps(System.String,System.Int32)">
            <summary>
            Retorna los lookup de un key
            </summary>
            <param name="Key">key del lookup</param>
            <param name="languageId">Lenguaje a seleccionar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.FasiController.ErrorMessage(System.Int16,System.Int16)">
            <summary>
            Retorna descrpción de un error por su código.
            </summary>
            <param name="code">Código del error.</param>
            <param name="languageId">Lenguaje a seleccionar.</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Controllers.InitializationController">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.InitializationController.InitialCleaning(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Limpieza inicial de datos FASI
            </summary>
            <param name="cleanWorkflows"></param>
            <param name="cleanRoleAndUsers"></param>
            <param name="cleanPendingDoc"></param>
            <param name="cleanAnonimousUsers"></param>
            <param name="cleanNavigationDirectory"></param>
            <param name="cleanTasks"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.InitializationController.InitializingRoles(System.Boolean,System.Boolean,System.Boolean,System.String)">
             <summary>
            
             </summary>
             <param name="initBasicAppRoles"></param>
             <param name="initSecuritySchema"></param>
             <param name="rolesToInitialize"></param>
             <param name="initWidgetConfiguration"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.InitializationController.InitializeBackOfficeUsers(System.String,System.Boolean,System.Boolean)">
            <summary>
            Inicializacion los usuarios del backoffice listados o todos
            </summary>
            <param name="usersToInitialize"></param>
            <param name="inicializeAll"></param>
            <param name="notifyByEmail"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.InitializationController.Integration(InMotionGIT.FASI.Contracts.Integration.Integration)">
            <summary>
            Method que permite crear un usuario con la integración BackOffice-FrontOffice por medio de la operaciones de Back-Office
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.InitializationController.InitializationSecuritySync">
            <summary>
            Sinconiza todos los usuarios al esquema de seguridad
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.InitializationController.CopyUserConfigurationToAll(System.Int32,System.String,System.String)">
            <summary>
            Copia la configuracion de un usuario a todos los demas.
            </summary>
        </member>
        <member name="T:InMotionGIT.FASI.Controllers.MembersController">
            <summary>
            Controlador que provee operaciones a nivel de usuario
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.ClientCodeChange(System.String)">
            <summary>
            Cambia el código del cliente a un usuario existente
            </summary>
            <param name="clientCode">Código del usuario a asignar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.ProducerCodeChange(System.String)">
            <summary>
            Cambia el código del productor a un usuario existente
            </summary>
            <param name="producerCode">Código del productor a asignar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserAllowAdministrator(System.Boolean)">
            <summary>
            Permite definir si un usuario es administrador.
            </summary>
            <param name="enable">Estado del IsAdministrator</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserAllowDiary(System.Boolean)">
            <summary>
            Define si se permite el acceso al modulo de Agenda
            </summary>
            <param name="enable">Código del productor a asignar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserIsAllowDiary">
            <summary>
            Pregunta si un usuario tiene el check de permitir el agenda
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserEmailChange(System.String)">
            <summary>
            Permite cambiar el email de un usuario determinado
            </summary>
            <param name="email">Email a cambiar del usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserLockedChange(System.Boolean)">
            <summary>
            Permite bloquear/ desbloquear un usuario existente
            </summary>
            <param name="state">Define si se bloquea o no el usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserFirstVisitChange(System.Boolean)">
            <summary>
            Permite cambiar el estado de la propiedad de FirstVisit
            </summary>
            <param name="state">Define si se bloquea o no el usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserLockedChangeByUserId(System.Int32,System.Boolean)">
            <summary>
            Permite bloquear/ desbloquear un usuario existente
            </summary>
            <param name="state">Define si se bloquea o no el usuario</param>
            <param name="userId">Id de usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserApproval(System.Int32)">
            <summary>
            Permite aprobar un usuario que esta pendiente de aprovasion
            </summary>
            <param name="userId">Id de usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserSecurityLevel(System.Int32)">
            <summary>
            Permite cambiar el nivel de seguridad de un usuario existente
            </summary>
            <param name="SecurityLevel">Define el valor de 1 a 9, siendo 1 el mayor nivel de acceso y 9 el menor</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserInactiveChange(System.Boolean)">
            <summary>
            Permite cambiar el estado de inactivo de un usuario determinado
            </summary>
            <param name="isInactive">Define el estado de usuario esta inactivo o activo</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserPasswordNeverExpiredChange(System.Boolean)">
            <summary>
            Permite definir si el password expira de un usuario existente
            </summary>
            <param name="isExpired">Define el estado de expirar del password</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.EncryptString(System.String)">
            <summary>
            Method de encryption
            </summary>
            <param name="value">Value to encrypted</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UsersAndGroups(System.Int32)">
            <summary>
            Retorna una lista de lookup de los grupos y usuarios en fasi.
            </summary>
            <param name="userType">Tipo de usuario, 1 = son todos excepto los anónimos, 2= solo los aprobados, 3= solo los que tiene permitido agenda  </param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UsersExistEMail(System.String)">
            <summary>
            Verifica si un usuario existe o no por medio del email.
            </summary>
            <param name="email"> Email del usuario.</param>
            <returns>Boolean.</returns>
            <remarks></remarks>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UsersExistUsername(System.String)">
            <summary>
            Verifica si un usuario existe por medio de user-name.
            </summary>
            <param name="username"> Email del usuario.</param>
            <returns>Boolean.</returns>
            <remarks></remarks>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UsersLkp(System.Int32,System.String)">
            <summary>
            Retorna el lookup de los usuarios en fasi, esto por id y nombre.
            </summary>
            <param name="userType">Posibles valores: 2 son todos lo usuario aprobados y en el caso del 3 solo son lo usuarios de tipo scheduler</param>
            <param name="Ids">Define los Ids específicos, de pasar '*' retorna todos los usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.GetUsersEmail(System.String)">
            <summary>
            Obtiene el email de una lista de usuarios
            </summary>
            <param name="usersId">Código de los usuarios</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.GroupLkp(System.String)">
            <summary>
            Retorna el lookup de los grupos en fasi, esto por id y nombre.
            </summary>
            <param name="Ids">Define los Ids específicos, de pasar vació retorna todos los usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.GroupIdByUserId(System.Int32)">
            <summary>
            Obtiene los ids de los grupos en los cuales esta vinculados un usuario
            </summary>
            <param name="userId">Email del usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.ChangePassword(System.String,System.String,System.String,System.String)">
            <summary>
            Método que permite el cambio del password de un usuario especifico
            </summary>
            <param name="UserName">Nombre del usuario a cambiar el password</param>
            <param name="PasswordOld">Contraseña antigua</param>
            <param name="PasswordNew">Contraseña nueva</param>
            <param name="Language">Lenguaje de los mensajes</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.ValidateCurrentPassword(System.String)">
            <summary>
            Método que permite validar el actual password del user
            </summary>
            <param name="Password">Actual contraseña</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.PasswordChange(System.Int32,System.String)">
            <summary>
            Método que permite el cambio del password de un usuario especifico
            </summary>
            <param name="userId">Id del usuario a cambiar el password</param>
            <param name="password">Password a cambiar</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.EmailChange(System.Int32,System.String)">
            <summary>
            Método que permite el cambio del email de un usuario especifico
            </summary>
            <param name="userId">Id del usuario a cambiar el password</param>
            <param name="email">Password a cambiar</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.PasswordRecovery(System.Int32)">
            <summary>
            Método permite enviar un email solicitando un password
            </summary>
            <param name="userId">Id de usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.PasswordRecoveryByEmail(System.String)">
            <summary>
            Envía un correo para recobrar el password del usuario
            </summary>
            <param name="email">Email de usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserAnonymous">
            <summary>
            Crea un usuario anónimo en Fasi
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.GetSupervisorsLkp(System.Int32,System.String)">
            <summary>
            Retorna el lookup de los supervisores en fasi, esto por id y subordinado.
            </summary>
            <param name="subordinate">UserId de subordinado</param>
            <param name="Ids">Define los Ids específicos, de pasar '*' retorna todos los usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserNameEmailExist(System.String)">
            <summary>
            Verifica si un email existe en FASI.
            </summary>
            <param name="email">Email a verificar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserAllByPage(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Obtiene todos los usuarios de FASI, de manera paginada
            </summary>
            <param name="type">Define si se retorna todos los usuario o solo los que están en proceso de activación</param>
            <param name="startIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="endIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="filter">Permite realizar un filtro por los campos UserName, Email, ClientId y ProducerId</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserUpdate(InMotionGIT.FASI.Contracts.Security.User)">
            <summary>
            Operación que permite realizar un update del usuario
            </summary>
            <param name="item">User a realizar el update en FASI</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserLogOff">
            <summary>
            Se realiza el cambio de estado del usuario de conectado a desconectado
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserOffLineAll">
            <summary>
            Permite hacer un  on-line off masivo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.ValidatePassword(System.String,System.String,System.Int32)">
            <summary>
            Realiza una validation del password, bajo los parámetros de web.config
            </summary>
            <param name="UserName">Usuario de contraseña</param>
            <param name="Password">Contraseña a validar</param>
            <param name="languageId">Lenguaje</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.ValidatePasswordByUserId(System.String,System.Int32)">
            <summary>
            Realiza una validation del password, bajo los parámetros de web.config
            </summary>
            <param name="Password">Contraseña a validar</param>
            <param name="languageId">Lenguaje</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserCreateSTS(InMotionGIT.Seguridad.Contrato.DTOs.UserDTO)">
            <summary>
            Crea un en el STS
            </summary>
            <param name="item">Instance guardar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserDeleteById(System.Int32,System.Boolean)">
            <summary>
            Elimina un usuario de Fasi por su Id
            </summary>
            <param name="DeleteAllRelatedData">Define si elimina todos los datos relacionados con el usuario</param>
            <param name="userId">Define si elimina todos los datos relacionados con el usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserDeleteByUserName(System.String,System.Boolean)">
            <summary>
            Elimina un usuario de Fasi por nombre
            </summary>
            <param name="UserName">Nombre del usuario</param>
            <param name="DeleteAllRelatedData">Define si elimina todos los datos relacionados con el usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserNumberOfUsersOnline">
            <summary>
            Obtiene todo los usuarios que están conectados en Fasi
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.ValidateUser(System.String,System.String,System.String)">
            <summary>
            Valida el password de un usuario de fasi si es valido.
            </summary>
            <param name="UserName"></param>
            <param name="PasswordOld"></param>
            <param name="PasswordNew"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.Groups(System.Int32,System.Int32,System.String)">
            <summary>
             Retorna todo los Groups de Fasi
            </summary>
            <param name="startIndex">inicio del index</param>
            <param name="endIndex">Fin del index</param>
            <param name="filter">Filtro que se aplica al campo de nombre de grupo</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.GroupIndex">
            <summary>
             Obtiene el ultimo id de tabla Group
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.GroupUpdate(InMotionGIT.FASI.Contracts.Security.UserGroup)">
            <summary>
            Actualiza un grupo en especifico en fasi
            </summary>
            <param name="item">Entidad de grupo a actualizar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.GroupsAdd(InMotionGIT.FASI.Contracts.Security.UserGroup)">
            <summary>
             Crea un Group en Fasi
            </summary>
            <param name="item">inicio del index</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.GroupRemove(System.Int32)">
            <summary>
             Elimina un group de fasi por Id
            </summary>
            <param name="Id">Id del role</param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.Roles(System.Int32,System.Int32,System.String)">
            <summary>
             Retorna todo los roles de Fasi
            </summary>
            <param name="startIndex">inicio del index</param>
            <param name="endIndex">Fin del index</param>
            <param name="filter">Filtro que se aplica el role name</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.RolesLkp">
            <summary>
             Lookup de roles
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.RelesByUserId(System.Int32)">
            <summary>
             Retorna los roles vinculados a un usuario en Fasi
            </summary>
            <param name="userId">Id usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserRoleAdd(System.Collections.Generic.List{InMotionGIT.FASI.Contracts.Security.Role})">
            <summary>
             Asigna un role en especifico a un usuario de Fasi
            </summary>
            <param name="items">Colección de roles a agregar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.RoleAdd(InMotionGIT.FASI.Contracts.Security.Role)">
            <summary>
             Crea un role en Fasi
            </summary>
            <param name="item">Rol a agregar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.UserRoleRemove(System.Collections.Generic.List{InMotionGIT.FASI.Contracts.Security.Role})">
            <summary>
             Elimina un role asignado a un usuario en Fasi
            </summary>
            <param name="items">Colección de roles a eliminar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.RoleUpdate(InMotionGIT.FASI.Contracts.Security.Role)">
            <summary>
             Actualiza un role en especifico en fasi
            </summary>
            <param name="item">Entidad a actualizar en el role</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.RoleRemove(System.Int32)">
            <summary>
             Elimina un role de fasi por Id
            </summary>
            <param name="Id">Id del role</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.RoleIndex">
            <summary>
             Obtiene el ultimo id de tabla Role
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.MembersController.RoleInUser(System.Int32)">
            <summary>
              Verifica si existe un rol asociado a un usuario.
            </summary>
            <param name="roleId">Id del rol</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Controllers.NotificationsController">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.NotificationsController.#ctor(InMotionGIT.FASI.Helpers.UserNotifyHandler)">
            <summary>
             Constructor
            </summary>
            <param name="userNotifyHandler"></param>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.NotificationsController.GetNotifications">
            <summary>
            Obtiene las notificaciones del usuario conectado
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.NotificationsController.NotificationsUpdate(InMotionGIT.FASI.Contracts.Notification.Notification)">
            <summary>
            Realiza un update del notification
            </summary>
            <param name="item">Instancia a modificar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.NotificationsController.NotificationsCreate(InMotionGIT.FASI.Contracts.Notification.Notification)">
            <summary>
            Crea un notificación para un usuario especifico
            </summary>
            <param name="item">Instancia a modificar</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Controllers.SecurityController">
            <summary>
            Controlador que permite la administrar las operaciones de seguridad.
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SecurityController.UserPasswordChange(System.String,System.String)">
            <summary>
            Método que permite el cambio del password de un usuario especifico
            </summary>
            <param name="PasswordOld">Contraseña antigua</param>
            <param name="PasswordNew">Contraseña nueva</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SecurityController.PasswordRecovery(System.String)">
            <summary>
            Método permite enviar un email solicitando un password
            </summary>
            <param name="email">Email de usuario</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Controllers.SmcController">
            <summary>
            Controlador que administra las operaciones de smc
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.Create(InMotionGIT.FASI.Contracts.SMC.Smc)">
            <summary>
            Crea un nuevo mensaje.
            </summary>
            <param name="smc">Entidad a agregar de smc.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.Update(InMotionGIT.FASI.Contracts.SMC.Smc)">
            <summary>
            Actualiza un mensaje.
            </summary>
            <param name="smc">Entidad a actualizar de smc.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.Delete(System.Int32)">
            <summary>
            Elimina un mensaje.
            </summary>
            <param name="id">Identificador del mensaje a eliminar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.Message(System.Int32)">
            <summary>
            Obtiene un mensaje por su identificador.
            </summary>
            <param name="id">Identificador del mensaje a buscar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.RecordCount">
            <summary>
            Obtiene cantidad de registro que posee la tabla.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.InBox">
            <summary>
            Obtiene lista de mensajes asociados a un usuario.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.SendItems">
            <summary>
            Obtiene lista de mensajes asociados a un usuario con estado enviado.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.MailBoxInformation">
            <summary>
            Obtiene conteo de mensajes por estado de un usuario.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.Usuarios(System.String)">
            <summary>
            Obtiene lista de usuarios que concidan con el filtro.
            </summary>
            <param name="filter">Valor usado para el filtro de los usuarios (nombre o apellido) .</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.Drafts">
            <summary>
            Obtiene lista de mensajes con estado de borrador filtrado por el identificador del usuario.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.Trash">
            <summary>
            Obtiene lista de mensajes con estado eliminado filtrado por el identificador del usuario.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.ChangeStateMessage(System.Int32,System.Int16)">
            <summary>
            Permite cambiarle el estado a un mensaje.
            </summary>
            <param name="id">Identificador del mensaje a cambiar estado.</param>
            <param name="state">Estado a asignar al mensaje.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.ViewMessage(System.Int32)">
            <summary>
            Obtiene un mensaje por su identificador se verifica que el usuario sea uno de los receptores del mensaje.
            </summary>
            <param name="id">Identificador del mensaje a buscar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.MarkImportant(System.Int32[])">
            <summary>
            Marca como importante uno o varios mensajes.
            </summary>
            <param name="ids">Lista de identificadores que van a ser marcados como importantes.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.MarkRead(System.Int32[])">
            <summary>
            Marca como leido uno o varios mensajes.
            </summary>
            <param name="ids">Lista de identificadores que van a ser marcados como leidos.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.MoveTrash(System.Int32[])">
            <summary>
            Coloca uno o varios mensajes en estado eliminado.
            </summary>
            <param name="ids">Lista de identificadores que van a ser enviados al estado eliminado.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.SearchMessage(System.Int32,System.String)">
            <summary>
            Realiza busqueda de mensaje que contenga un texto específico.
            </summary>
            <param name="typeSearch">Tipo de consulta a realizar.</param>
            <param name="textSearch">Texto a buscar en los mensajes.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.CreateMessageByEmail(InMotionGIT.FASI.Contracts.SMC.Smc,System.String)">
            <summary>
            Crea un nuevo mensaje con una lista de correos como destinatarios.
            </summary>
            <param name="smc">Entidad a agregar de smc.</param>
            <param name="emails">Cadena de caracteres que contiene los emails de los destinariarios separados por ";".</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.SmcController.GetDefaultUserId">
            <summary>
            Permite obtener el identificador del usuario por defecto utilizado para enviar los mensajes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Controllers.TransitionController">
            <summary>
            FASI Transición
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.TransitionController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.TransitionController.Rat(System.String)">
            <summary>
            Método que realiza check.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.TransitionController.Check">
            <summary>
            Método que realiza check.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.TransitionController.CreatePortalUser(InMotionGIT.FASI.Contracts.Security.UserInformation)">
            <summary>
            Crea un usuario en FASI y STS.
            </summary>
            <param name="user">Usuario para crear la en el sistema de STS</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.TransitionController.UserDeleteById(System.Int32,System.Boolean)">
            <summary>
            Elimina un usuario de Fasi por su Id
            </summary>
            <param name="DeleteAllRelatedData">Define si elimina todos los datos relacionados con el usuario</param>
            <param name="userId">Define si elimina todos los datos relacionados con el usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.TransitionController.UserDeleteByUserName(System.String,System.Boolean)">
            <summary>
            Elimina un usuario de Fasi por nombre
            </summary>
            <param name="UserName">Nombre del usuario</param>
            <param name="DeleteAllRelatedData">Define si elimina todos los datos relacionados con el usuario</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Controllers.v2.MembersController">
            <summary>
            Controlador que provee operaciones a nivel de usuario
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.v2.MembersController.RelesByUserId(System.Int32)">
            <summary>
             Retorna los roles vinculados a un usuario en Fasi
            </summary>
            <param name="userId">Id usuario</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Controllers.WidgetController">
            <summary>
            Controlador que administra las operaciones de soporte a los widget's
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Controllers.WidgetController.NavigationDirectory(System.Int32)">
            <summary>
            Permite obtener un lista de directorios de navegación filtrada por la categoría.
            </summary>
            <param name="category">Código de la categoría a filtrar.</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Extensions.FasiExtension">
             <summary>
            
             </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Extensions.FasiExtension._configurations">
            <summary>
            Variable que lee los configuration de web.confi
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Extensions.FasiExtension.GetContext``1(System.Data.Entity.DbSet{``0})">
             <summary>
            
             </summary>
             <typeparam name="TEntity"></typeparam>
             <param name="dbSet"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Extensions.FasiExtension.InicializationLanguage(System.Web.Http.ApiController,System.String)">
            <summary>
            Method que crea contexto de lenguaje sobre el Thread.CurrentThread.CurrrentCUlture por medio del cultural language
            </summary>
            <param name="controller">Controlador</param>
            <param name="culturalLanguage">Código de language de cultura</param>
        </member>
        <member name="M:InMotionGIT.FASI.Extensions.FasiExtension.LanguageId(System.Web.Http.ApiController)">
            <summary>
            Retorna el language id de controlador
            </summary>
            <param name="controller"></param>
            <param name=""></param>
        </member>
        <member name="M:InMotionGIT.FASI.Extensions.FasiExtension.InicializationLanguage(System.Web.Http.ApiController,System.Int32)">
            <summary>
             Method que crea contexto de lenguaje sobre el Thread.CurrentThread.CurrrentCUlture por medio de languajeId
            </summary>
            <param name="controller">Controlador</param>
            <param name="languajeId">Id del language</param>
        </member>
        <member name="M:InMotionGIT.FASI.Extensions.FasiExtension.GetUserCodeFromToken(System.Web.Http.ApiController)">
             <summary>
            
             </summary>
             <param name="controller"></param>
             <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Extensions.HttpRequestMessageExtensions">
            <summary>
            HttpRequestMessage Extension
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Extensions.HttpRequestMessageExtensions.IsLocal(System.Net.Http.HttpRequestMessage)">
            <summary>
            Check if the request is comming from a local app
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Extensions.PerRequestLifetimeManager">
            <summary>
            A <see cref="T:Unity.Lifetime.LifetimeManager"/> that holds onto the instance given to it during
            the lifetime of a single HTTP request.
            This lifetime manager enables you to create instances of registered types that behave like
            singletons within the scope of an HTTP request.
            See remarks for important usage information.
            </summary>
            <remarks>
            <para>
            Although the <see cref="T:InMotionGIT.FASI.Extensions.PerRequestLifetimeManager"/> lifetime manager works correctly and can help
            in working with stateful or thread-unsafe dependencies within the scope of an HTTP request, it is
            generally not a good idea to use it when it can be avoided, as it can often lead to bad practices or
            hard to find bugs in the end-user's application code when used incorrectly. 
            It is recommended that the dependencies you register are stateless and if there is a need to share
            common state between several objects during the lifetime of an HTTP request, then you can
            have a stateless service that explicitly stores and retrieves this state using the
            <see cref="P:System.Web.HttpContext.Items"/> collection of the <see cref="P:System.Web.HttpContext.Current"/> object.
            </para>
            <para>
            For the instance of the registered type to be disposed automatically when the HTTP request completes,
            make sure to register the <see cref="T:InMotionGIT.FASI.Extensions.UnityPerRequestHttpModule"/> with the web application.
            To do this, invoke the following in the Unity bootstrapping class (typically UnityMvcActivator.cs):
            <code>DynamicModuleUtility.RegisterModule(typeof(UnityPerRequestHttpModule));</code>
            </para>
            </remarks>
        </member>
        <member name="M:InMotionGIT.FASI.Extensions.PerRequestLifetimeManager.GetValue(Unity.Lifetime.ILifetimeContainer)">
            <summary>
            Retrieves a value from the backing store associated with this lifetime policy.
            </summary>
            <returns>The desired object, or null if no such object is currently stored.</returns>
        </member>
        <member name="M:InMotionGIT.FASI.Extensions.PerRequestLifetimeManager.SetValue(System.Object,Unity.Lifetime.ILifetimeContainer)">
            <summary>
            Stores the given value into the backing store for retrieval later.
            </summary>
            <param name="newValue">The object being stored.</param>
            <param name="container"></param>
        </member>
        <member name="M:InMotionGIT.FASI.Extensions.PerRequestLifetimeManager.RemoveValue(Unity.Lifetime.ILifetimeContainer)">
            <summary>
            Removes the given object from the backing store.
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Extensions.PerRequestLifetimeManager.OnCreateLifetimeManager">
            <summary>
            Creates clone
            </summary>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Extensions.UnityPerRequestHttpModule">
            <summary>
            Implementation of the <see cref="T:System.Web.IHttpModule"/> interface that provides support for using the
            <see cref="T:InMotionGIT.FASI.Extensions.PerRequestLifetimeManager"/> lifetime manager, and enables it to
            dispose the instances after the HTTP request ends.
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Extensions.UnityPerRequestHttpModule.Dispose">
            <summary>
            Disposes the resources used by this module.
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Extensions.UnityPerRequestHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties,
            and events common to all application objects within an ASP.NET application.</param>
        </member>
        <member name="T:InMotionGIT.FASI.Extensions.UnhandledExceptionLogger">
            <summary>
            Represents an unhandled exception logger.
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Extensions.UnhandledExceptionLogger.LogAsync(System.Web.Http.ExceptionHandling.ExceptionLoggerContext,System.Threading.CancellationToken)">
            <summary>
            When overridden in a derived class, logs the exception asynchronously.
            </summary>
            <param name="context"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.AuthenticationHandler">
             <summary>
            
             </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Handlers.AuthenticationHandler._configurations">
            <summary>
            Variable que lee los configuration de web.confi
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.AuthenticationHandler.Token(System.String,System.String,System.String)">
            <summary>
             Method que permite generar un token de un usuario por email y su password
            </summary>
            <param name="email">Email o usuario a validar</param>
            <param name="password">Password </param>
            <param name="companyId"></param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.AuthenticationHandler.ValidateRoleByToken(System.String,System.String)">
            <summary>
             Method que permite generar un token de un usuario por email y su password
            </summary>
            <param name="Token">Token de usuario a validar</param>
            <param name="Roles">Arreglo de roles a validar </param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.AuthenticationHandler.ExistInTrace(System.Diagnostics.StackFrame[],System.String)">
             <summary>
            
             </summary>
             <param name="stacks"></param>
             <param name="name"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.AuthenticationHandler.PortalAuthentication(System.String,System.String,System.Int32,System.String)">
            <summary>
             Portal authentication.
            </summary>
            <param name="email">Email del usuario.</param>
            <param name="password">Clave para acceder al sistema.</param>
            <param name="companyId">Código de la compañía.</param>
            <param name="ip">IP.</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.BackOfficeHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.MakeURL(System.String,System.String,System.Int32)">
            <summary>
             Crea la URL para acceder a las transacciones de BackOffice
            </summary>
            <param name="windowLogicalCode">Código de la ventana (código lógico)</param>
            <param name="companyId">Identification of the company..</param>
            <param name="schemaCode">Code of the schema..</param>
            <returns>List of the items</returns>
            <remarks></remarks>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.FullMenuInformation(System.String,System.String,System.Int32)">
            <summary>
             Return the items information of the current menu (module)
            </summary>
            <param name="menuCode">Code of the menu..</param>
            <param name="schemaCode">Code of the schema..</param>
            <param name="companyId">Identification of the company..</param>
            <returns>List of the items</returns>
            <remarks></remarks>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.IsAllowed(System.String,System.String,System.String)">
            <summary>
            Se valida la operación
            </summary>
            <param name="userCode">User code</param>
            <param name="userSchema">User Schema</param>
            <param name="windowLogicalCode">Transaction code de la ventana</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.IsAllowTransaction(System.String)">
            <summary>
            Validación a nivel de transacción
            </summary>
            <param name="transactionCode">Código de transacción</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.GetTransaction(System.String,System.String)">
            <summary>
            Obtiene las operaciones que tiene acceso el usuario
            </summary>
            <param name="prefix">User code</param>
            <param name="userSchema">Código de esquema del usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.ClientByIdLkp(System.String)">
            <summary>
             Retorna el nombre de usuario especifico
            </summary>
            <param name="Id">Id de usuario a consultar el nombre</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.ClientsLkp(System.String)">
            <summary>
             Retorna los usuarios
            </summary>
            <param name="Ids"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.ClientsLkpPagination(System.Int32,System.Int32,System.String)">
            <summary>
             Método que permite realizar un lookup paginado de clientes
            </summary>
            <param name="startIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="endIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="filter">Permite realizar un filtro por los campos UserName, Email, ClientId y ProducerId</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.ProducerLkpPagination(System.Int32,System.Int32,System.String)">
            <summary>
             Retorna los lookups de Producer
            </summary>
            <param name="startIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="endIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="filter">Permite realizar un filtro por los campos NINTERMED y SCLIENAME</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.ProducerByIdLkp(System.String)">
            <summary>
            Retorna el nombre del Productor con base del id
            </summary>
            <param name="Id">Id del productor id</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.ProducerLkp(System.String)">
            <summary>
            Retorna los lookups de Producer
            </summary>
            <param name="Ids"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.LineOfBusinessLkp">
            <summary>
             Retorna una lista con las lineas de negocio o ramos
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.LoadCustomMenus(System.Int32)">
            <summary>
            Carga de la lista de menues personalizados
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.GetBackOfficeUsersLkp">
            <summary>
            Retorna una lista con lo usuarios de BO
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.GetBackOfficeUsers(System.Collections.Generic.List{System.String})">
             <summary>
            
             </summary>
             <param name="usersName"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.GetBackOfficeUsersByCompanyRaw(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Método que extrae en formato data table del query de inicializacion de los usuarios
            </summary>
            <param name="usersName"></param>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.GetBackOfficeUsersByCompany(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Método que permita la extracción de usuario de Back-Office y el casting a list de UserInformation
            </summary>
            <param name="usersName"></param>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.SecuritySchemaLkp">
            <summary>
             Retorna una lista con las lineas de negocio o ramos
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.CompleteClientName(System.String,System.Boolean)">
            <summary>
            Permite recuperar el nombre completo de un cliente a partir de su código.
            </summary>
            <param name="clientID">Código de cliente.</param>
            <param name="withClientId">Valor booleano que representa si se agrega el clientId al resultado.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.BackOfficeHandler.LookupClient(System.String,System.Int32,System.Int32)">
            <summary>
            Retorna una lista filtrada y paginada de los clientes del Backoffice.
            </summary>
            <param name="filter">Filtro de búsqueda si es numérico se busca por código y si es texto por el nombre del cliente.</param>
            <param name="beginIndex">Número de registro inicial.</param>
            <param name="endIndex">Número de registro final.</param>
            <returns>Lista de clientes.</returns>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.BaseHandler">
            <summary>
            Clase base de Handlers esto para poder tener de una las propiedades de Configurations
            </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Handlers.BaseHandler._configurations">
            <summary>
            Clase que permite usar el configuration de InMotionGIT.Core.Configuration.FASIConfiguration
            </summary>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.InitializationHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.InitializationHandler.InitialCleaning(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Limpieza inicial de datos FASI
            </summary>
            <param name="tokenUserId">Token del id del usuario</param>
            <param name="cleanWorkflows"></param>
            <param name="cleanRoleAndUsers"></param>
            <param name="cleanPendingDoc"></param>
            <param name="cleanAnonimousUsers"></param>
            <param name="cleanNavigationDirectory"></param>
            <param name="cleanTasks"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.InitializationHandler.InitializingRoles(System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{System.String})">
             <summary>
            
             </summary>
             <param name="initBasicAppRoles"></param>
             <param name="initSecuritySchema">Bandera que indica si se deben importar todos los esquemas desde el BO</param>
             <param name="rolesToInitialize">Listado de roles a iniciar desde BO</param>
             <param name="initWidgetConfiguration"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.InitializationHandler.InitializeWidgetsInRolesDefaultConfiguration">
            <summary>
            Crea la configuración inicial de los widgets por rol
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.InitializationHandler.CopyUserConfigurationToAll(System.Int32,System.Collections.Generic.List{System.Int64},System.String)">
             <summary>
            
             </summary>
             <param name="baseUserCode"></param>
             <param name="targetUsers"></param>
             <param name="copyConfigurationOption"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.InitializationHandler.InitializationSecuritySync">
            <summary>
            Sinconiza todos los usuarios al esquema de seguridad
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.InitializationHandler.Integration(InMotionGIT.FASI.Contracts.Integration.Integration)">
             <summary>
            
             </summary>
             <param name="item"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.InitializationHandler.InitializeBackOfficeUsers(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
             <summary>
            
             </summary>
             <param name="usersToInitialize"></param>
             <param name="inicializeAll"></param>
             <param name="notifyByEmail"></param>
             <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.RoleHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.RelesByUserIdWithFormat(System.Int32)">
            <summary>
             Retorna los roles vinculados a un usuario
            </summary>
            <param name="userId">Nombre usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.IsProducer(System.String)">
             <summary>
            
             </summary>
             <param name="AllRolesString"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.ValidateAccessRoles(System.Int32,System.String[])">
            <summary>
             Realiza la validación acceso de los roles para las forms, query y cruds
            </summary>
            <param name="roles">Array de roles a validar</param>
            <param name="userId">Id de usuarios</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.RoleExists(System.String)">
            <summary>
            Verifica la existencia de un role por su nombre
            </summary>
            <param name="name">Nombre del role</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.InitializeBackOfficeRoles(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="rolesToInitialize"></param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.IsClient(System.String)">
             <summary>
            
             </summary>
             <param name="AllRolesString"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.RolesByUserId(System.Int32)">
            <summary>
             Retorna los roles vinculados a un usuario
            </summary>
            <param name="userId">Nombre usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.Roles(System.Int32,System.Int32,System.String)">
            <summary>
             Retorna todo los roles
            </summary>
            <param name="startIndex">inicio del index</param>
            <param name="endIndex">Fin del index</param>
            <param name="filter">Filtro que se aplica el role name</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.RolesLk">
            <summary>
             Retorna todo los roles para un lookup
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.RoleUpdate(InMotionGIT.FASI.Contracts.Security.Role)">
            <summary>
             Actualiza un role en especifico en fasi
            </summary>
            <param name="item">Entidad a actualizar en el role</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.RoleIndex">
            <summary>
             Obtiene el ultimo id de tabla Role
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.RoleRemove(System.Int32)">
            <summary>
             Elimina un role de fasi por Id
            </summary>
            <param name="Id">Id del role</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.RoleAdd(InMotionGIT.FASI.Contracts.Security.Role)">
            <summary>
             Asigna roles a un usuario
            </summary>
            <param name="item">Colección de roles a agregar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.UserRoleAdd(System.Int64,System.Collections.Generic.List{InMotionGIT.FASI.Contracts.Security.Role})">
            <summary>
             Asigna roles a un usuario
            </summary>
            <param name="userId">Id el usuario a agregar los roles</param>
            <param name="items">Colección de roles a agregar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.UserRoleAdd(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
             Asigna roles a un usuario
            </summary>
            <param name="userId">Id el usuario a agregar los roles</param>
            <param name="itemsId">Coleccione de ids de roles</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.UserRoleRemove(System.Int32,System.Collections.Generic.List{InMotionGIT.FASI.Contracts.Security.Role})">
            <summary>
             Elimina un role en especifico roles a un usuario
            </summary>
            <param name="userId">Id el usuario a agregar los roles</param>
            <param name="items">Colección de roles a eliminar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.SpecialRoles(InMotionGIT.FASI.Contracts.Security.FrontOfficeMembershipUser@)">
            <summary>
            Asigna los roles especiales
            </summary>
            <param name="item">Instancia de user</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.SpecialRoles(System.Boolean,System.Boolean,System.Collections.Generic.List{InMotionGIT.FASI.Contracts.Security.Role}@)">
             <summary>
            
             </summary>
             <param name="IsAdministrator"></param>
             <param name="IsEmployee"></param>
             <param name="items"></param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.Role(System.String,System.Boolean)">
            <summary>
            Retorna el role por un nombre
            </summary>
            <param name="name">Nombre del role a buscar</param>
            <param name="IsCaching">Define si es cacheado o no el role</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.Role(System.Int32,System.Boolean)">
            <summary>
            Retorna el role por un id
            </summary>
            <param name="Id">Id del role a buscar</param>
            <param name="IsCaching">Define si es cacheado o no el role</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.RoleByName(System.String)">
            <summary>
            Retornar el id del role por su nombre
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.RoleByIds(System.Collections.Generic.List{System.Int64})">
            <summary>
            Retornar los nombres de los roles a buscar
            </summary>
            <param name="Ids">Ids de roles a buscar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.RoleInUser(System.Int32)">
            <summary>
            Verifica si existe un rol asociado a un usuario.
            </summary>
            <param name="roleId">Id del rol</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.RoleByRoleName(System.String)">
            <summary>
            Retornar el id del role por su nombre
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.InitializeFrontOfficeRoles">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.RoleHandler.GetIdRoles(System.String)">
            <summary>
            Permite obtener los id's de los roles del esquema FrontOffice en base a un string con los nombres de los Roles del BackOffice
            </summary>
            <param name="roleBackOffice">Cadena de cáracteres que contiene los nombres de los roles del BackOffice separados por una coma ','</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.SmcHandler">
            <summary>
            Clase de manejo de smc en el api de FASI
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.CreateSMC(InMotionGIT.FASI.Contracts.SMC.Smc,System.Int32)">
            <summary>
            Crea un nuevo mensaje
            </summary>
            <param name="item">Entidad a agregar de smc.</param>
            <param name="userId">Identificador del usuario que realiza la operación.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.UpdateSMC(InMotionGIT.FASI.Contracts.SMC.Smc,System.Int32)">
            <summary>
            Actualiza un Smc
            </summary>
            <param name="item">Entidad a actualizar de smc.</param>
            <param name="userId">Identificador del usuario que realiza la operación.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.DeleteSMC(System.Int32)">
            <summary>
            Elimina un Smc
            </summary>
            <param name="id">Identificador del smc.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.Message(System.Int32,System.Int32)">
            <summary>
            Obtiene un mensaje por su identificador
            </summary>
            <param name="id">Identificador del mensaje a buscar.</param>
            <param name="userId">Identificador del usuario a filtrar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.RecordCount">
            <summary>
            Obtiene cantidad de registro que posee la tabla.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.InBox(System.Int32)">
            <summary>
            Obtiene lista de mensajes asociados a un usuario.
            </summary>
            <param name="userId">Identificador del usuario a buscar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.SendItems(System.Int32)">
            <summary>
            Obtiene lista de mensajes asociados a un usuario con estado enviado.
            </summary>
            <param name="userId">Identificador del usuario a buscar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.MailBoxInformation(System.Int32)">
            <summary>
            Obtiene conteo de mensajes por estado de un usuario.
            </summary>
            <param name="userId">Identificador del usuario a buscar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.Usuarios(System.String)">
            <summary>
            Obtiene lista de usuarios que concidan con el filtro.
            </summary>
            <param name="filter">Valor usado para el filtro de los usuarios (nombre o apellido) .</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.Drafts(System.Int32)">
            <summary>
            Obtiene lista de mensajes con estado de borrador filtrado por el identificador del usuario.
            </summary>
            <param name="userId">Identificador del usuario a filtrar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.Trash(System.Int32)">
            <summary>
            Obtiene lista de mensajes con estado eliminado filtrado por el identificador del usuario.
            </summary>
            <param name="userId">Identificador del usuario a filtrar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.ChangeStateMessage(System.Int32,System.Int16)">
            <summary>
            Permite cambiarle el estado a un mensaje.
            </summary>
            <param name="id">Identificador del mensaje a cambiar estado.</param>
            <param name="state">Estado a asignar al mensaje.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.SendMailSMCTemplate(System.Collections.Generic.List{InMotionGIT.FASI.DataAccess.Model.SMCRECEIVER})">
            <summary>
            Permite envíar correo electrónico a usuarios asociados mensaje.
            </summary>
            <param name="lstreceiver">Objeto que contiene los receptores del mensaje.</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.ViewMessage(System.Int32,System.Int32)">
            <summary>
            Obtiene un mensaje por su identificador se verifica que el usuario sea uno de los receptores del mensaje.
            </summary>
            <param name="id">Identificador del mensaje a buscar.</param>
            <param name="userId">Identificador del usuario a filtrar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.MarkImportant(System.Int32[])">
            <summary>
            Marca como importante uno o varios mensajes.
            </summary>
            <param name="ids">Lista de identificadores que van a ser marcados como importantes.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.MarkRead(System.Int32[],System.Int32)">
            <summary>
            Marca como importante uno o varios mensajes.
            </summary>
            <param name="ids">Lista de identificadores que van a ser marcados como importantes.</param>
            <param name="userId">Identificador del usuario a filtrar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.MoveTrash(System.Int32[])">
            <summary>
            Coloca uno o varios mensajes en estado eliminado.
            </summary>
            <param name="ids">Lista de identificadores que van a ser enviados al estado eliminado.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.SearchMessage(System.Int32,System.String,System.Int32)">
            <summary>
            Realiza busqueda de mensaje que contenga un texto.
            </summary>
            <param name="typeSearch">Tipo de consulta a realizar.</param>
            <param name="textSearch">Texto a buscar en los mensajes.</param>
            <param name="userId">Identificador del usuario a buscar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.CreateMessageByEmail(InMotionGIT.FASI.Contracts.SMC.Smc,System.Collections.Generic.List{System.String})">
            <summary>
            Crea un nuevo mensaje con una lista de correos como destinatarios.
            </summary>
            <param name="smc">Entidad a agregar de smc.</param>
            <param name="emails">Lista de string que contiene todos los destinatarios.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.GetDefaultUserId">
            <summary>
            Permite obtener el identificador del usuario por defecto utilizado para enviar los mensajes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.SmcHandler.GetSettingsDefaultUserId">
            <summary>
            Permite obtener el identificador del usuario por defecto utilizado para enviar los mensajes.
            </summary>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.TransitionHandler">
            <summary>
            Clase de administración de procesos
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.TransitionHandler.Check">
            <summary>
            Realiza el check de procesos
            </summary>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.UserSettingHandler">
            <summary>
            Clase de administrador de Page
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.UserSettingHandler.UserSettingAdd(System.Int64,System.Int64)">
            <summary>
             Agrega una nueva tab a la página.
            </summary>
            <param name="userId">Id de usuario</param>
            <param name="pageId">Id de la pagina que se quiere hacer por current page</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.UserSettingHandler.UserSettingIndex">
            <summary>
             Obtiene el ultimo id de tabla Page
            </summary>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.PageHandler">
            <summary>
            Clase de administrador de Page
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.PageHandler.PageAdd(System.Int64,System.Int32,System.Int32,System.Collections.Generic.List{InMotionGIT.Common.DataType.LookUpValue})">
            <summary>
             Agrega una nueva tab a la página.
            </summary>
            <param name="userId">Id de usuario</param>
            <param name="languageId">Language Id</param>
            <param name="layoutType">Layout Type</param>
            <param name="titles">Titles</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.PageHandler.PageIndex">
            <summary>
             Obtiene el ultimo id de tabla Page
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.PageHandler.PageFirstByUserId(System.Int64)">
            <summary>
            Método que devuelve los id de un usuario en el home
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.LanguajeHandler">
            <summary>
            Clases que ayuda a en el ámbito de lenguaje
            </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Handlers.LanguajeHandler._configurations">
            <summary>
            Variable que lee los configuration de web.confi
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.LanguajeHandler.Language(System.Int32)">
            <summary>
            Retorna los lenguajes disponibles en fasi
            </summary>
            <param name="LanguageId"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.LanguajeHandler.Check(System.Int32,System.String)">
            <summary>
             Método para aliar lenguajes
            </summary>
            <param name="languageID"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.LanguajeHandler.AllowLanguageId">
            <summary>
            Método que retorna los lenguajes permitidos por el id
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.LanguajeHandler.AllowLanguageCulture">
            <summary>
            Método que retorna los lenguajes permitidos por el culture
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.LanguajeHandler.GetAllResourcesWithFormat(System.String,System.Boolean)">
            <summary>
             Método que retorna en formato para el SP de first visit
            </summary>
            <param name="key"></param>
            <param name="IsLanguajeId"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.LanguajeHandler.GetAllResources(System.String,System.Boolean)">
            <summary>
            Método que retorna todos los posibles valores de un key en los recursos
            </summary>
            <param name="key"> Valor de key a buscar en los recursos</param>
            <param name="IsLanguajeId">Define si se hace la conversion de cultural code a lenguaje Id</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.LanguajeHandler.Convert(System.String)">
            <summary>
            Convierte de cultural code a lenguaje id
            </summary>
            <param name="CulturalCode"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.LanguajeHandler.LanguageInit(System.Web.Http.ApiController,System.String)">
            <summary>
            Selecciona el lenguaje de culturalName o el header de AcceptLanguage
            </summary>
            <param name="controller">Controlador actual</param>
            <param name="culturalLanguage">Cultural language a evaluar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.LanguajeHandler.ConvertLanguageIdToLanguageName(System.Int32)">
            <summary>
            Convierte de lenguaje id a cultural code
            </summary>
            <param name="languajeId">Language Id</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.LanguajeHandler.ConvertLanguageNameToLanguageId(System.String)">
            <summary>
            Convierte de cultural code a lenguaje id
            </summary>
            <param name="languageName">Language Name</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.MembersHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserIndex">
            <summary>
            Retorna un id de usuario valido para su creación.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserDeleteById(System.Int32,System.Boolean)">
            <summary>
            Elimina un usuario de FrontOffice por nombre// Remove a FrontOffice user by name
            </summary>
            <param name="UserId">Id del usuario/ User Id</param>
            <param name="DeleteAllRelatedData">Define si elimina todos los datos relacionados con el usuario//Define if you delete all the data related to the user</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ClientCodeChange(System.Int32,System.String,System.Int32)">
            <summary>
            Cambia el código del cliente
            </summary>
            <param name="userId">Id de usuario</param>
            <param name="clientCode">Código del usuario a asignar</param>
            <param name="tokenUserId">Token del id del usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ProducerCodeChange(System.Int32,System.String,System.Int32)">
            <summary>
            Cambia el código del productor
            </summary>
            <param name="userId">Id de usuario</param>
            <param name="producerCode">Código de productor a asignar</param>
            <param name="tokenUserId">Token del id del usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserFirstVisitChange(System.Int32,System.Boolean)">
            <summary>
            Permite cambiar el estado de la propiedad de FirstVisit
            </summary>
            <param name="userId"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserAllowAdministrator(System.Int32,System.Boolean)">
            <summary>
            Permite cambiar el estado de IsAdministrator de un usuario determinado
            </summary>
            <param name="userId">Id de usuario</param>
            <param name="enable">Estado del IsAdministrator</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserAllowDiary(System.Int32,System.Boolean)">
            <summary>
            Permite cambiar el estado de AllowDiary de un usuario determinado
            </summary>
            <param name="userId">Id de usuario</param>
            <param name="enable">Código del productor a asignar</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserIsAllowDiary(System.Int32)">
            <summary>
            Permite cambiar el estado de AllowDiary de un usuario determinado
            </summary>
            <param name="userId">Id de usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.FrontOfficeMembershipUserByUserDTO(InMotionGIT.FASI.Contracts.Security.FrontOfficeMembershipUser,System.String,System.String)">
            <summary>
             Conversion de FrontOfficeMembership a UserDTO
            </summary>
            <param name="user"></param>
            <param name="assignedRole"></param>
            <param name="assignedRoleId"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserEmailChange(System.Int32,System.String)">
            <summary>
            Permite cambiar el estado de AllowDiary de un usuario determinado
            </summary>
            <param name="userId">Id de usuario</param>
            <param name="email">Email a cambiar del usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserLockedChange(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Permite cambiar el estado de  bloqueado de un usuario determinado
            </summary>
            <param name="userId">Id de usuario</param>
            <param name="state">Define el estado de usuario en el bloqueo</param>
            <param name="tokenUserId">Token del id del usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserLockedChange(System.Int32,System.Boolean,System.Int32,System.String)">
            <summary>
            Permite cambiar el estado de bloqueado de un usuario determinado.
            </summary>
            <param name="userId">Id de usuario a modificar.</param>
            <param name="state">Define el estado de usuario en el bloqueo.</param>
            <param name="userIdAcction">Identificador del usuario que realiza la operación.</param>
            <param name="ip">Dirección ip que realiza la petición.</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserApproval(System.Int32,System.Int32)">
            <summary>
            Permite aprobar un usuario que esta pendiente de aprovasion
            </summary>
            <param name="userId">Id de usuario</param>
            <param name="tokenUserId">Token del id del usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserInactiveChange(System.Int32,System.Boolean)">
            <summary>
            Permite cambiar el estado de  bloqueado de un usuario determinado
            </summary>
            <param name="userId">Id de usuario</param>
            <param name="isInactive">Define el estado de usuario esta inactivo o activo</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:InMotionGIT.FASI.Handlers.MembersHandler.UserPasswordNeverExpiredChange(System.Int32,System.Boolean)" -->
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserSecurityLevel(System.Int32,System.Int32)">
            <summary>
            Permite cambiar el nivel de seguridad
            </summary>
            <param name="userId">Id de usuario</param>
            <param name="securityLevel">Define el valor de 1 a 9, siendo 1 el mayor nivel de acceso y 9 el menor</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserGetPassword(System.String,System.String)">
            <summary>
            Obtiene la contraseña del usuario por medio de la respuesta secreta
            </summary>
            <param name="Username">Usuario a obtener el password</param>
            <param name="Answer">Respuesta secreta</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserNameEmailExist(System.String)">
            <summary>
            Verifica si un email existe en FASI.
            </summary>
            <param name="email">Email a verificar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserOnLine(System.Int32)">
            <summary>
            Se activa el usuario a nivel de base de datos.
            </summary>
            <param name="userId">Id del usuario a poner on line en base de datos</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.PasswordRecovery(System.Int32,System.String)">
            <summary>
            Envía un correo para recobrar el password del usuario
            </summary>
            <param name="userId">Identificador de usuario</param>
            <param name="languageName">El código de lenguaje</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.PasswordRecoveryByEmail(System.String,System.String)">
            <summary>
            Envía un correo para recobrar el password del usuario
            </summary>
            <param name="email">Email de usuario</param>
            <param name="languageName">El código de lenguaje</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ValidateUser(System.String,System.String)">
            <summary>
             Realiza la validación de un usuario para ver si es valido para el cambio de contraseña//Perform the validation of a user to see if it is valid for the password change
            </summary>
            <param name="UserName">Nombre de usuario// UserName</param>
            <param name="Password">Password a validar//Password to validate</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
            <summary>
            Permite el cambio de la pregunta y respuesta secreta // Allows the change of the secret question and answer
            </summary>
            <param name="UserName">Nombre del usuario a cambiar el password//Name of the user to change the password</param>
            <param name="Password">Contraseña actual//Current password</param>
            <param name="MewPasswordQuestion">Nueva pregunta secreta//New secret question</param>
            <param name="NewPasswordAnswer">Nueva respuesta secreta//New secret answer</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserDeleteByUserNameInternal(System.String,System.Boolean)">
            <summary>
            Elimina un usuario de FrontOffice por nombre// Remove a FrontOffice user by name
            </summary>
            <param name="UserName">Nombre del usuario/ User Name</param>
            <param name="DeleteAllRelatedData">Define si elimina todos los datos relacionados con el usuario//Define if you delete all the data related to the user</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ValidatePasswordByUserId(System.Int32,System.String)">
            <summary>
            Se realiza las validaciones de formato para el nuevo password//Format validations for the new password are performed
            </summary>
            <param name="UserId">Name User//Nombre de usuario</param>
            <param name="Password">Password a validar//Password to validate</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ValidatePasswordStrength(System.String)">
            <summary>
            Se realiza las validaciones de formato para el nuevo password//Format validations for the new password are performed
            </summary>
            <param name="Password">Password a validar//Password to validate</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ValidatePassword(System.String,System.String)">
            <summary>
            Se realiza las validaciones de formato para el nuevo password//Format validations for the new password are performed
            </summary>
            <param name="UserName">Name User//Nombre de usuario</param>
            <param name="Password">Password a validar//Password to validate</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ValidateExistencePassword(System.String,System.String)">
            <summary>
            Método valida que el password no se sea igual//Método valida que la contraseña no se mar igual
            </summary>
            <param name="newPassword">Nueva clave//New password</param>
            <param name="oldPassword">Antigua contraseña//Old password</param>
            <returns>De ser iguales se retorna un false y de ser contrario un true//If they are the same, a false is returned and if it is not true</returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.EmailChange(System.Int32,System.String,System.Int32)">
            <summary>
            Método que permite el cambio del email de un usuario especifico
            </summary>
            <param name="userId">Id del usuario a cambiar el password</param>
            <param name="email">Password a cambiar</param>
            <param name="tokenUserId">Token del id del usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.PasswordChange(System.Int32,System.String,System.Int32)">
            <summary>
            Método que permite el cambio del password de un usuario especifico//Method that allows the password change of a specific user
            </summary>
            <param name="userId">Nombre del usuario a cambiar el password//Name of the user to change the password</param>
            <param name="password">Password a cambiar</param>
            <param name="tokenUserId">Token del id del usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ValidateCurrentPassword(System.Int32,System.String)">
            <summary>
            Método que permite validar el actual password del user
            </summary>
            <param name="userId">Id de usuario</param>
            <param name="password">Actual contraseña</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ChangePasswordById(System.Int32,System.String,System.String)">
            <summary>
            Método que permite el cambio del password de un usuario especifico//Method that allows the password change of a specific user
            </summary>
            <param name="userId">Id del usuario a cambiar el password//Name of the user to change the password</param>
            <param name="PasswordOld">Contraseña antigua//Old password</param>
            <param name="PasswordNew">Contraseña nueva//New password</param>       
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ChangePassword(System.String,System.String,System.String,System.Int32)">
            <summary>
            Método que permite el cambio del password de un usuario especifico//Method that allows the password change of a specific user
            </summary>
            <param name="UserName">Nombre del usuario a cambiar el password//Name of the user to change the password</param>
            <param name="PasswordOld">Contraseña antigua//Old password</param>
            <param name="PasswordNew">Contraseña nueva//New password</param>
            <param name="tokenUserId">Token del id del usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UnlockUser(System.String)">
            <summary>
            Desbloquea un usuario por medio de User name
            </summary>
            <param name="Username">Nombre del usuario a desbloquear</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserGetAllUserByEmail(System.String)">
            <summary>
            Obtiene todos los usuario de una email especifico
            </summary>
            <param name="UserName">Nombre del usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserNumberOfUsersOnline">
            <summary>
            Obtiene todo los usuarios que están conectados
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserUpdate(InMotionGIT.FASI.Contracts.Security.User,System.Int32)">
            <summary>
            Operación que permite realizar un update del usuario
            </summary>
            <param name="item">User a realizar el update en FASI</param>
            <param name="tokenUserId">Token del id del usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserAllByPage(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Obtiene todos los usuarios de FASI, de manera paginada
            </summary>
            <param name="type">Define si se retorna todos los usuario o solo los que están en proceso de activación</param>
            <param name="startIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="endIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="filter">Permite realizar un filtro por los campos UserName, Email, ClientId y ProducerId</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserAll">
            <summary>
            Obtiene todos los usuarios de FASI, de manera paginada
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UsersLkp(System.Int32,System.String)">
            <summary>
            Retorna los id de los usuario y grupos de FASI
            </summary>
            <param name="userType">Posibles valores: 2 son todos lo usuario aprobados y en el caso del 3 solo son lo usuarios de tipo scheduler</param>
            <param name="Ids">Define los Ids específicos, de pasar vació retorna todos los usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.GroupLkp(System.String)">
            <summary>
            Retorna los id de los usuario y grupos de FASI
            <param name="Ids">Define los Ids específicos, de pasar vació retorna todos los grupos</param>
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UsersExistEMail(System.String)">
            <summary>
            Verifica si un usuario existe o no por medio del email.
            </summary>
            <param name="email"> Email del usuario.</param>
            <returns>Boolean.</returns>
            <remarks></remarks>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UsersExistUsername(System.String)">
            <summary>
            Verifica si un usuario existe por medio de user-name.
            </summary>
            <param name="username">Nombre de usuario</param>
            <returns>Boolean.</returns>
            <remarks></remarks>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UsersAndGroups(System.Int32)">
            <summary>
            Retorna los id de los usuario y grupos de FASI
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.GroupIdByUserId(System.Int32)">
            <summary>
            Obtiene los ids de los grupos en los cuales esta vinculados
            </summary>
            <param name="userId">Email del usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.GroupIdByUserIdProxy(System.Int32)">
            <summary>
            Obtiene los ids de los grupos en los cuales esta vinculados, por medio de servicio
            </summary>
            <param name="userId">Email del usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserByEmail(System.String)">
            <summary>
            Obtiene todos los usuario de una email especifico
            </summary>
            <param name="email">Email del usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserFindUserIdByUserName(System.String)">
            <summary>
            Permite ubicar el UserId por medio del UserName//It allows locating the User through the UserName
            </summary>
            <param name="UserName">Nombre de usuario para el filtro del UserId//User name for the User's filter</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserFindEmailByUserId(System.Int32)">
            <summary>
            Permite ubicar el UserId por medio del UserName//It allows locating the User through the UserName
            </summary>
            <param name="userId">Id de usuario para aplicar filtro</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserByName(System.String)">
            <summary>
            Obtiene el usuario por medio del name
            </summary>
            <param name="name">Nombre del usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserIdByUser(System.String)">
            <summary>
            Retorna el id del usuario en base al nombre de usuario
            </summary>
            <param name="userName">Nombre de usuario a buscar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.CheckPassword(System.String,System.String)">
            <summary>
            Realiza una comparación del password teniendo en cuenta el formato de encryption
            </summary>
            <param name="Password">Nueva clave</param>
            <param name="dbPassword">Antigua contraseña</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UpdateFailureCount(System.String,System.String)">
            <summary>
            Actualiza los intentos fallidos de cambio de contraseña//Update unsuccessful password change attempts
            </summary>
            <param name="UserName">Nombre del usuario//Name User</param>
            <param name="FailureType">Tipo de fallo a realizar update//Type of failure to perform update</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ActiveDirectoryValidateUserPassword(System.String,System.String)">
            <summary>
            Validate el user and password in server from active directory
            </summary>
            <param name="username">Nombre de usuario</param>
            <param name="password">Clave del usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserCreate(InMotionGIT.FASI.Contracts.Security.FrontOfficeMembershipUser,System.Boolean)">
             <summary>
            
             </summary>
             <param name="item">Item a crear en base de datos</param>
             <param name="IsFirst">Define ciertos campos en null para el tracking esto por términos de uso</param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserInformationByFrontOfficeMembershipUser(InMotionGIT.FASI.Contracts.Security.UserInformation)">
            <summary>
            Convierte de UserInformation a FrontOfficeMemberShipUser
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserAdminCreate(System.String@,System.Int32)">
            <summary>
            Crea el usuario administrador
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.JobUserCreate(System.Int32)">
            <summary>
            Crea usuario para el motos de jobs
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.AnonymousCreate(System.Int32)">
            <summary>
            Crea usuario anonimo para inicializacion en STS y portal.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserAnonymousCreate">
            <summary>
            Crea un usuario anónimo
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.AnonymousGetId">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ValidateUserPassword(InMotionGIT.FASI.Contracts.Security.FrontOfficeMembershipUser,System.String)">
            <summary>
             Valida un usuario
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.ResetFailedPasswordAttemptCount(System.Int32)">
            <summary>
             Permite reiniciar el contador de fallos
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserLastLogin(System.Int32)">
            <summary>
             Actualiza el ultimo acceso del un usuario por id
            </summary>
            <param name="userId">Id del usuario</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserStatusChangeById(System.Int32,System.Boolean)">
            <summary>
             Cambia el estado a en linea o no
            </summary>
            <param name="userId">Id del usuario para cambiar el estado</param>
            <param name="state">Estado a cambiar</param>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserOffLineAll">
            <summary>
            Permite cambiar el estado de on-line en off de los usuarios.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.UserByUserId(System.Int32)">
            <summary>
            Obtiene un usuario por el Id//Get a user by the Id
            </summary>
            <param name="UserId">Id a buscar //Go find</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.GetUsersEmail(System.Collections.Generic.List{System.Int32})">
            <summary>
            Obtiene la lista de emails de los usuarios por una lista de Ids
            </summary>
            <param name="users">Lista de Ids a buscar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.GetUsersBySupervisor(System.Int32)">
            <summary>
            Obtiene todos los usuarios bajo la supervision de un supervisor
            </summary>
            <param name="supervisorId">ID de usuario supervidor</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.MembersHandler.GetSupervisorsLkp(System.Int32,System.String)">
            <summary>
            Obtiene todos los supervisores de un usuario
            </summary>
            <param name="subordinate">ID de subordinado</param>
            <param name="ids">IDs de supervisores</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.v2.RoleHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.v2.RoleHandler.RolesByUserId(System.Int32)">
            <summary>
             Retorna los roles vinculados a un usuario
            </summary>
            <param name="userId">Nombre usuario</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.WidgetHandler">
             <summary>
            
             </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Handlers.WidgetHandler.WidgetVersionDefaul">
            <summary>
            Default de tipo de widgets
            </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Handlers.WidgetHandler.WidgetAllowVersion">
            <summary>
            Default de tipo de widgets incluidos el compartido
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.WidgetHandler.WidgetExistInRole(System.Int32)">
            <summary>
            Verifica si existe una relación en widget relacionado con un role
            </summary>
            <param name="WidgetId">Id del widget</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.WidgetHandler.IsOnlyDefault(InMotionGIT.FASI.DataAccess.Model.WIDGETSINROLE,System.Boolean)">
            <summary>
            Solo filtrar el only
            </summary>
            <param name="item"></param>
            <param name="IsOnlyDefault"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.WidgetHandler.WidgetAddInPage(System.Int64,System.Int64,System.Int32)">
            <summary>
              Agrega un Widget en una página.
            </summary>
            <param name="pageId">Id de la página.</param>
            <param name="widgetId">Código de WidgetInstance.</param>
            <param name="languageId">Código de lenguaje.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.WidgetHandler.WidgetAllowByUserId(System.Int64,System.Int64[])">
            <summary>
            Obtiene los widgets autorizados para un usuario especifico
            </summary>
            <param name="UserId">Id a buscar</param>
            <param name="rolesId">Id de roles a filtrar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.WidgetHandler.WidgetAdd(InMotionGIT.FASI.Contracts.General.Widget)">
            <summary>
            Crea un widget en la FASI
            </summary>
            <param name="item">Entidad a agregar de widget</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.WidgetHandler.WidgetUpdate(InMotionGIT.FASI.Contracts.General.Widget)">
            <summary>
            Actualiza un widget en la FASI
            </summary>
            <param name="item">Entidad a actualizar de widget</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.WidgetHandler.WidgetDelete(System.Int32)">
            <summary>
            Elimina un widget de Fasi
            </summary>
            <param name="Id">Id del widget a eliminar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.WidgetHandler.Widgets(System.Int32,System.Int32,System.Int32)">
            <summary>
            Obtiene los widgets disponibles
            </summary>
            <param name="languageId">Lenguaje a seleccionar</param>
            <param name="startIndex">Inicio de indice para seleccionar la pagina</param>
            <param name="endIndex">Inicio de indice para seleccionar la pagina</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.WidgetHandler.WidgetIndex">
            <summary>
             Obtiene el ultimo id de tabla Role
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.WidgetHandler.WidgetsLkp(System.String,System.Int32)">
            <summary>
            Obtiene los lookups de widget  por sus Ids
            </summary>
            <param name="widgetIds">Ids de los widgets</param>
            <param name="languageId">Lenguaje a seleccionar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.WidgetHandler.RolesByWidgetId(System.Int32)">
            <summary>
            Permite obtener una cadena de carácteres con todos los nombres de los roles relacionados a un widget en particular. 
            </summary>
            <param name="WidgetId">Identificador del widget.</param>
            <returns>Cadena de carácteres con todos los nombres de los roles relacionados a un widget</returns>
        </member>
        <member name="T:InMotionGIT.FASI.Handlers.WidgetSupportHandler">
            <summary>
            Clase que se encarga de administrar las operaciones de soporte a los widget's
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Handlers.WidgetSupportHandler.NavigationDirectory(System.Int32,System.Int32)">
            <summary>
            Permite obtener un lista de directorios de navegación filtrada por la categoría.
            </summary>
            <param name="category">Código de la categoría a filtrar.</param>
            <param name="languageId">Id del lenguaje id.</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.BackOffice.ConstanteBackOffice">
            <summary>
            Define variables de constante en el controlador de Back office
            </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Helpers.BackOffice.ConstanteBackOffice.CacheName">
            <summary>
            Define el nombre del key de Cache del Controlador de Backoffice
            </summary>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.BackOffice.MenuHandler">
            <summary>
            Clase de administración de menu
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.BackOffice.MenuHandler.insMakeURL(System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
             Crea un URL con las paginas
            </summary>
            <param name="sCodisp"></param>
            <param name="sDescript"></param>
            <param name="nWindowTy"></param>
            <param name="sModule"></param>
            <param name="sProject"></param>
            <param name="nHeight"></param>
            <param name="sCodispl"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.BackOffice.Secur_scheHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.BackOffice.Secur_scheHandler.Find(System.String,System.Int32,System.Boolean)">
            <summary>
            This method returns TRUE or FALSE depending if the records exists in the table "Secur_sche", Este método retorna VERDADERO o FALSO dependiendo de la existencia o no de registros en la tabla "Secur_sche"
            </summary>
            <param name="sSche_code"></param>
            <param name="companyId"></param>
            <param name="ReadAll"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.BackOffice.Secur_scheHandler.FindLevels(System.Int32,System.String)">
             <summary>
            
             </summary>
             <param name="companyId"></param>
             <param name="sSche_code"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.BackOffice.Secur_scheHandler.FindSche_pcon(System.Int32,System.String)">
             <summary>
            
             </summary>
             <param name="companyId"></param>
             <param name="sSche_code"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.BackOffice.Secur_scheHandler.FindSchema_cur(System.Int32,System.String)">
            <summary>
             Reads the related information with the security levels to restrict the user against the use of certain currencies lee la información relacionada con los niveles de seguridad para restringir al usuario sobre el uso de ciertas monedas
            </summary>
            <param name="companyId"></param>
            <param name="sSche_code"></param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.BackOffice.Secur_scheHandler.FindOff_acc(System.Int32,System.String)">
             <summary>
            
             </summary>
             <param name="companyId"></param>
             <param name="sSche_code"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.BackOffice.Secur_scheHandler.FindLimits(System.Int32,System.String)">
            <summary>
             Reads the information related with the security levels to restrict  the user against the use of the declarations and issues amounts lee la información relacionada con los niveles de seguridad para restringir  usuario sobre el uso de montos de declaraciones y emisiones
            </summary>
            <param name="companyId"></param>
            <param name="sSche_code"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.BackOffice.Secur_scheHandler.GetAllSchemaCodes">
            <summary>
            Return the information of all the schemas
            </summary>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.BackOffice.WindowsHandler">
            <summary>
            Clase que administra el acceso y métodos de Windows
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.BackOffice.WindowsHandler.ReaWindows(System.String,System.Int32)">
            <summary>
            Searches by the transaction code in the table "Windows"
            </summary>
            <param name="sCodispl">Código de windows</param>
            <param name="companyId">Código de la compania</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.BackOffice.WindowsHandler.FindWindowsWindowLogicalCode(System.String)">
            <summary>
            
            </summary>
            <param name="windowLogicalCode"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.BackOffice.WindowsHandler.FindCodMen(System.String,System.Int32,System.Int32,System.String)">
            <summary>
             Busca una transacción en windows por el código de menu
            </summary>
            <param name="sCodispl"></param>
            <param name="companyId"></param>
            <param name="securityLevel"></param>
            <param name="sSche_Code"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.ConstanteFASI">
            <summary>
            Define variables de constante en el controlador de Back office
            </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Helpers.ConstanteFASI.CacheName">
            <summary>
            Define el nombre del key de Cache del Controlador de FASI
            </summary>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.Diary.DiaryHandler">
            <summary>
            Clase da soporte a todo lo de Agenda
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.DiaryHandler.Lookup(System.String,System.Int32)">
            <summary>
             Método que retorna los lookup de agenda
            </summary>
            <param name="key">Key del lookup, en caso de pasar "*" se devuelve una lista con los lookups disponibles</param>
            <param name="languageId">Id del lenguaje</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:InMotionGIT.FASI.Helpers.Diary.DiaryHandler.GroupsUsedInTask(System.String)" -->
        <member name="T:InMotionGIT.FASI.Helpers.Diary.MailBoxesHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.MailBoxesHandler.MailBoxes(System.Int32,System.Int32)">
            <summary>
            Define la estructura del menus disponibles en la ventana de agenda
            </summary>
            <param name="userId">Código de usuario, de no tener unos asignado se trae todo lo que es "genérico" y así mismo lo particular para el código</param>
            <param name="languageId">Lenguaje para filtrado de traducción</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.MailBoxesHandler.GetById(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Obtiene el mailBox a través de su código
            </summary>
            <param name="mailBoxId">Código del mailBox</param>
            <param name="userId">Codigo del usuario conectado</param>
            <param name="languageId">Lenguaje para filtrado de traducción</param>
            <returns>MailBox con sus parents</returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.MailBoxesHandler.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Crea una bandeja de tareas vinculada a otra bandeja (superior)
            </summary>
            <param name="parentId">Código de la bandeja de tarea superior</param>
            <param name="userId">Código del usuario conectado</param>
            <param name="languageId">Lenguaje para filtrado de traducción</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.MailBoxesHandler.Update(System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Actualiza una columnas determinada en la table MailBoxes
            </summary>
            <param name="mailBoxId">Código de la bandeja de tareas</param>
            <param name="field">Columna que se desea actualizar</param>
            <param name="value">Valor</param>
            <param name="userId">Código del usuario conectado</param>
            <param name="languageId">Lenguaje para filtrado de traducción</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.MailBoxesHandler.UpdateChildrenPosition(System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}},System.Int32)">
            <summary>
            Actualiza las posiciones de las ramas inferiores
            </summary>
            <param name="parentId">Código de la bandeja de tarea superior</param>
            <param name="nodes">Lista de codigo (mailBox) y posición</param>
            <param name="userId">Código del usuario conectado</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.MailBoxesHandler.UpdateSemaphore(System.Int32,System.Collections.Generic.List{System.Int16},System.Int32)">
            <summary>
            Actualiza la configuración del semáforo
            </summary>
            <param name="mailboxid">Código de la bandeja de tareas</param>
            <param name="items">Rango configarado</param>
            <param name="userId">Codigo del usuario conectado</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.MailBoxesHandler.Delete(System.Int32)">
            <summary>
            Elimina una bandeja de tareas
            </summary>
            <param name="mailBoxId">Código de la bandeja de tareas</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.MailBoxesHandler.ForceDeletion(System.Int32)">
            <summary>
            Elimina una bandeja de tareas
            </summary>
            <param name="mailBoxId">Código de la bandeja de tareas</param>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.Diary.TableHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TableHandler.Tasks(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.String,System.String,System.Delegate)">
             <summary>
            
             </summary>
             <param name="mailBoxId"></param>
             <param name="sourceType"></param>
             <param name="userId"></param>
             <param name="beginIndex"></param>
             <param name="endIndex"></param>
             <param name="search"></param>
             <param name="languageId"></param>
             <param name="filterId"></param>
             <param name="sort"></param>
             <param name="order"></param>
             <param name="methodInjection">Método delegado para llamado del GroupId</param>
             <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.Diary.TabRepeatFrequency">
            <summary>
            Retorna el numero de frecuencia para los lookups
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TabRepeatFrequency.LookUp(System.Int32)">
            <summary>
             Retorna los lookup de TabRepeatFrequency
            </summary>
            <param name="languageId"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.Diary.TabTaskPriority">
            <summary>
            
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TabTaskPriority.LookUp(System.Int32)">
            <summary>
             Retorna los lookup de TabTaskPriority
            </summary>
            <param name="languageId"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.Diary.TabRecordTypes">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TabRecordTypes.LookUp(System.Int32)">
            <summary>
            Retorna los lookup de TabRecordTypes
            </summary>
            <param name="languageId">Lenguaje para los status</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.Diary.TabOriginType">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TabOriginType.LookUp(System.Int32)">
            <summary>
            Retorna los lookup de TabOriginType
            </summary>
            <param name="languageId">Lenguaje para los status</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.Diary.TabTaskStatus">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TabTaskStatus.LookUp(System.Int32)">
            <summary>
            Retorna los lookup de TabTaskStatus
            </summary>
            <param name="languageId">Lenguaje para los status</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.Diary.TasksHandler">
            <summary>
            Operaciones CRUD en la tabla TASK
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.GetById(System.String,System.Int32)">
            <summary>
            Obtiene una tarea a través de su código
            </summary>
            <param name="taskId">Código de la tarea</param>
            <param name="userId">Código del usuario conectado</param>
            <returns>Tarea</returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.GetTasksToNotify(System.DateTime,System.DateTime)">
            <summary>
            Obtiene una tarea a través de su código
            </summary>
            <param name="from">Fecha desde</param>
            <param name="to">Fecha hasta</param>
            <returns>Tarea</returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.GetHistoryById(System.String,System.Int32,System.Int32,System.Int32,System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
            Obtiene el histórico de la tarea
            </summary>
            <param name="taskId">Código de la tarea</param> 
            <param name="offset">Cantidad de registro a ignorar</param>
            <param name="limit">Cantidad de registros</param>
            <param name="languageId">Id del lenguaje</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.GetElements(System.String)">
            <summary>
            Obtiene los parámetros para ejucución de transacción
            </summary>
            <param name="taskId">Código de la tarea</param>       
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.Synchronize(InMotionGIT.FASI.Contracts.Diary.DTOs.TaskDTO,System.Int32,System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
            Agrega o actualiza una tarea
            </summary>
            <param name="taskDto">Datos de la tarea</param>
            <param name="userId">Código del usuario conectado (el que está creando la tarea)</param>        
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.Delete(System.String,System.Int32)">
            <summary>
            Elimina una tarea en la base de datos
            </summary>
            <param name="taskId">Código de la tarea</param>
            <param name="userId">Código del usuario conectado (el que está creando la tarea)</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.UpdateStatus(System.String,System.Int16,System.Int32)">
            <summary>
            Actualiza el estado de la tarea
            </summary>
            <param name="taskId">Código de la tarea</param>
            <param name="status">Nuevo estado de la tarea</param>
            <param name="userId">Código del usuario conectado (el que está creando la tarea)</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.UpdateMultipleAssign(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Int64},System.Int32,System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
            Actualiza los asignados de las tareas
            </summary>
            <param name="taskIds">Códigos de las tareas</param>
            <param name="owners">Códigos de los usuários asiganados</param>
            <param name="userId">Código del usuario conectado (el que está creando la tarea)</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.MakeTaskObject(InMotionGIT.FASI.Contracts.Diary.DTOs.TaskDTO,System.Collections.ObjectModel.Collection{InMotionGIT.Diary.DataAccess.Model.TASKOWNER},System.String,System.Int32,System.DateTime)">
            <summary>
            Crea un objeto de una nueva tarea
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.MakeTaskHistoryObject(InMotionGIT.Diary.DataAccess.Model.TASK,System.String)">
            <summary>
            Crea objecto del historico de una tarea
            </summary>
            <param name="task">Objeto de la tarea</param>
            <param name="operation">Tipo la operación</param>        
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.MakeTaskOwnerObject(System.Int64,System.String,System.Int32,System.DateTime,System.Boolean,System.Net.Http.Headers.AuthenticationHeaderValue)">
            <summary>
            Crea un objeto de un nuevo dueño de tarea
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.GetAlarmDatetime(System.DateTime,System.String)">
            <summary>
            Calcula la fecha del decordatorio
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.GetAlarmValue(System.DateTime,System.DateTime)">
            <summary>
            Calcula el valor que se deve enviar a pantalla
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.SendMailTaskComplete(InMotionGIT.FASI.Contracts.Diary.DTOs.TaskDTO)">
            <summary>
            Permite envíar el correo electrónico a usuarios dueños de la tarea cuando la tarea ha sido completada al 100%
            </summary>
            <param name="taskDto">Objeto que contiene la información de la tarea.</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.TasksHandler.CleanAllTasks">
            <summary>
            Elimina todas las tareas de la base de datos, usualmente usada en la inicializacion de FASI.
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.UserInactivateHandler.GetList(System.Int32,System.Int32,System.Int32)">
            <summary>
            Obtiene las próximas fechas de inactivación del usuario
            </summary>
            <param name="userId">Codigo del usuario conectado</param>
            <param name="offset">Cantidad de registro a ignorar</param>
            <param name="limit">Cantidad de registros</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.UserInactivateHandler.Create(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Crea un registro de usuario inactivado
            </summary>
            <param name="userId">Codigo del usuario conectado</param>
            <param name="startingDate">Fecha y hora de inicio</param>
            <param name="endingDate">Fecha y hora de fin</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.UserInactivateHandler.Delete(System.String)">
            <summary>
            Elimina un registro de usuario inactivado
            </summary>
            <param name="id">Codigo del registro</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.UserInactivateHandler.IsUserInactive(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Verifica si el usuario está inactivo en el periodo
            </summary>
            <param name="userId">Código del usuario conectado</param>
            <param name="startingDateValue">Fecha de inicio</param>
            <param name="endingDateValue">Fecha de fin</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Diary.UserInactivateHandler.IsUsersInactive(System.String,System.DateTime,System.DateTime)">
            <summary>
            Verifica si los usuarios están inactivos en el periodo
            </summary>
            <param name="usersIds">Códigos de los usuarios</param>
            <param name="startingDate">Fecha de inicio</param>
            <param name="endingDate">Fecha de fin</param>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.ExceptionHandler">
            <summary>
             Handler de manejo de Exception
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ExceptionHandler.Process(System.Exception)">
            <summary>
             Procesa las exception
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.FasiHandler">
             <summary>
            
             </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Helpers.FasiHandler._configurations">
            <summary>
            Variable que lee los configuration de web.confi
            </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Helpers.FasiHandler._Prefix">
            <summary>
            Variable para el prefix de cache
            </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Helpers.FasiHandler.KeyAnonymous">
            <summary>
            Key para el caching de anonimous
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.CacheCleanByKey(System.String)">
             <summary>
            
             </summary>
             <param name="Key"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.RemoveChachinAnonymous">
            <summary>
            Método para eliminar caching de user Anonymous
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.CreatePortalUser(InMotionGIT.FASI.Contracts.Security.UserInformation,System.Int32)">
            <summary>
            Crea un usuario en FASI y STS.
            </summary>
            <param name="user">Usuario para crear la en el sistema de STS</param>
            <param name="tokenUserId">Token del id del usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.EMailMask(System.String)">
             <summary>
             Permite aplicar una máscara para un correo electrónico.
            </summary>
            <param name="email">correo electrónico</param>
            <returns>correo electrónico enmascarado</returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.PageByUserName(System.String,System.Int32)">
            <summary>
             Retorna el paginas asociadas al usuario por el nombre del mismo
            </summary>
            <param name="userName">Nombre usuario</param>
            <param name="languageId">Lenguaje</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.PageChange(System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
             Cambia el titulo de la pagina por un lenguaje determinado y por su id de pagina
            </summary>
            <param name="pageId">Id de la pagina</param>
            <param name="newTitle">Id de la pagina</param>
            <param name="layoutType">formato layoutType</param>
            <param name="order">Orden a cambiar</param>
            <param name="languageId">Language Id</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.PageDelete(System.Int32)">
            <summary>
             Elimina una pagina por medio del id de la pagina
            </summary>
            <param name="pageId">Id de la pagina</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.PagesByUserId(System.Int64,System.Int32)">
            <summary>
             Retorna el paginas asociadas al usuario por el id del mismo
            </summary>
            <param name="userId">User Id del usuario</param>
            <param name="languageId">Lenguaje</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.MenuByName(System.String,System.Int32)">
            <summary>
            Retorna el menu por el name
            </summary>
            <param name="name">Nombre del menu</param>
            <param name="languageId">Lenguaje a solicitar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.AddUsersSecurityTrace(System.String,InMotionGIT.FASI.Contracts.Enumerations.EnumUserSecurity,System.String,System.String,System.Int32)">
            <summary>
             Método para crear un traza del la activada del log in
            </summary>
            <param name="email">Correo electronico del usuario afectado.</param>
            <param name="state">Estado de la modificación.</param>
            <param name="comment">Comentarios adicionales.</param>
            <param name="ip">Dirección Ip desde la cual se realizó la operación.</param>
            <param name="userLockedChangeByUserId">Identificador del usuario que realizó la modificación.</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.AuthenticationInternal(System.String,System.String,System.Int32,System.Boolean,InMotionGIT.Core.Configuration.FASI.Enumerations.EnumSecurityMode)">
            <summary>
            Validate user credentials. // Valida las credenciales del usuario.
            </summary>
            <param name="userInitials">Initials of the User. // Iniciales del usuario.</param>
            <param name="password">Password for access to the system. // Clave para acceder al sistema.</param>
            <param name="companyId">Code of the company. // Código de la compañía.</param>
            <param name="isPortal">Indicate if the user is authenticated by FrontOffice(True) or for the BackOffice(False). // Indica si el usuario es autenticado por el Portal(True) por el BackOffice(False).</param>
            <param name="securityMode">Type security mode. // Modo de seguridad.</param>
            <returns>User information authenticated. // Información del usuario autenticado.</returns>
            <remarks></remarks>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.FindOperationSystem(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            TODO: Crear la rutina  para poder contemplar el id del company
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.FindUserInitial(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Int32)">
             <summary>
            
             </summary>
             <param name="initials"></param>
             <param name="find"></param>
             <param name="parameters"></param>
             <param name="companyId"></param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.GetUserInformation(InMotionGIT.FASI.Contracts.Security.FrontOfficeMembershipUser)">
             <summary>
            
             </summary>
             <param name="membershipUser"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.WidgetsInPage(System.Int64,System.Int32,System.Int32)">
            <summary>
            Obtiene los widget de un pagina en especifico
            </summary>
            <param name="userId"></param>
            <param name="pageId"></param>
            <param name="languageId"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.WidgetAllowByUserId(System.Int32,System.Int32)">
            <summary>
             Método que permite ver los widget permitidos por el usuarios en base a sus roles.
            </summary>
            <param name="userId">Id del usuario a buscar</param>
            <param name="languageId">Lenguaje a filtra los títulos del los widgets</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.WidgetInstanceRemove(System.Int32)">
            <summary>
             Elimina un widget de una pagina
            </summary>
            <param name="id">Id del widgetintace a eliminar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.UpdateWidgetInstanceTitle(System.Int32,System.String,System.Int32)">
            <summary>
             Almacena los cambios en el titulo de un widget.
            </summary>
            <param name="id">Id de Widget al cual el titulo será modificado.</param>
            <param name="title">Nuevo título del widget.</param>
            <param name="languageId">Lenguaje a Actualizar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.WidgetsInstanceChange(System.Collections.Generic.List{InMotionGIT.FASI.Contracts.General.WidgetInstance})">
            <summary>
             Almacena los cambios de in widgetsInstance
            </summary>
            <param name="items">Lista de widgets</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.DeletePortalUser(System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <param name="DeleteAllRelatedData"></param>
            <param name="accessToken"></param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.FasiHandler.CreateBackOfficePortalUser(InMotionGIT.FASI.Contracts.Security.UserInformation,System.Boolean,System.String)">
            <summary>
            Crea un usuario en FASI y STS.
            </summary>
            <param name="user">Usuario para crear la en el sistema de STS</param>
            <param name="notifyByEmail">Bandera para el envió de email de confirmación</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.STS.STSHandler">
            <summary>
            Clase de manejo de sts en el api de FASI
            </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Helpers.STS.STSHandler._configurations">
            <summary>
            Variable que lee los configuration de web.confi
            </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Helpers.STS.STSHandler._Prefix">
            <summary>
            Variable para el prefix de cache
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.STS.STSHandler.UpdateEmail(System.String,System.String,System.String)">
            <summary>
            Elimina un usuario del STST por medio de la dirección de correo electrónico
            </summary>
            <param name="currentEmail">Correo electrónico actual del usuario en el STS</param>
            <param name="newEmail">Correo electrónico que se desea asignar nuevo</param>
            <param name="token">Token del usuario a eliminar</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.STS.STSHandler.UpdateRoles(System.String,System.String,System.String,System.String)">
            <summary>
            Método para realizar el update de los roles en el sts
            </summary>
            <param name="email"></param>
            <param name="roles"></param>
            <param name="rolesId"></param>
            <param name="token"></param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.STS.STSHandler.Delete(System.String,System.String)">
            <summary>
            Elimina un usuario del STS por medio de la dirección de correo electrónico
            </summary>
            <param name="email">Correo electrónico del usuario</param>
            <param name="token">Token del usuario a eliminar</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.STS.STSHandler.AcceptAllCertifications(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Bypass the cert validation.
            </summary>
            <param name="sender"></param>
            <param name="certificate"></param>
            <param name="chain"></param>
            <param name="sslPolicyErrors"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.STS.STSHandler.Create(InMotionGIT.Seguridad.Contrato.DTOs.UserDTO,System.String)">
            <summary>
             Crea un usuario en el STS
            </summary>
            <param name="item">Nombre usuario</param>
            <param name="token">El token del usuario</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.STS.STSHandler.Find(System.String,System.String)">
            <summary>
             Método que verifica la existencia de un usuario por medio de email
            </summary>
            <param name="Email">Email a buscar</param>
            <param name="Token">Token de validación</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.STS.STSHandler.SynchronizeUsers(System.Collections.Generic.List{InMotionGIT.Seguridad.Contrato.DTOs.UserDTO},System.String)">
            <summary>
            Método que sincroniza los usuarios en la lista usersDTO
            </summary>
            <param name="usersDTO"></param>
            <param name="token"></param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.STS.STSHandler.CleanUsers(System.Boolean,System.String)">
            <summary>
            Elimina un usuario del STS por medio de la dirección de correo electrónico
            </summary>
            <param name="CleanExternal">Bandera para señalar si se deben borrar lo usuarios externos o internos</param>
            <param name="token">Token del usuario a eliminar</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.STS.STSHandler.CleanRoles(System.String)">
            <summary>
            Borra todas las relaciones de roles con grupos de acceso
            </summary>
            <param name="token">Token del usuario a eliminar</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.STS.STSHandler.SetGroupsToRole(System.Int32,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Borra todas las relaciones de roles con grupos de acceso
            </summary>
            <param name="roleId">Id de rol a asignar grupos</param>
            <param name="groups">Listado con los nombres de los grupos a asignar</param>
            <param name="token">Token del usuario a eliminar</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.STS.STSHandler.SetRolesToGroup(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Borra todas las relaciones de roles con grupos de acceso
            </summary>
            <param name="groupName">Id de grupo a asignar</param>
            <param name="roles">Listado con los roles a asignar</param>
            <param name="token">Token del usuario a eliminar</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.STS.STSHandler.SyncRoles(System.Collections.Generic.List{InMotionGIT.Seguridad.Contrato.DTOs.AccessGroupDTO},System.Boolean,System.String)">
            <summary>
            Borra todas las relaciones de roles con grupos de acceso
            </summary>
            <param name="accessGroups">Id de grupo a asignar</param>
            <param name="fullSync">Id de grupo a asignar</param>
            <param name="token">Token del usuario a eliminar</param>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.TokenHandler">
            <summary>
            Clase le permite generar un token de un user
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.TokenHandler.Token(System.String,System.DateTime)">
            <summary>
            Genera el token
            </summary>
            <param name="userName"></param>
            <param name="expired"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.UserGroupHander">
            <summary>
            Clase que administra las operaciones de grupos de FASI
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.UserGroupHander.UserGroupAll(System.String)">
            <summary>
            Retorna todo los grupos de fasi
            <param name="Ids">Define los Ids específicos, de pasar vació retorna todos los grupos</param>
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.UserGroupHander.Groups(System.Int32,System.Int32,System.String)">
            <summary>
             Retorna todo los Groups
            </summary>
            <param name="startIndex">Inicio del index</param>
            <param name="endIndex">Fin del index</param>
            <param name="filter">Filtro que se aplica al campo de nombre de grupo</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.UserGroupHander.GroupUpdate(InMotionGIT.FASI.Contracts.Security.UserGroup,System.Int32)">
            <summary>
             Actualiza un grupo en especifico en fasi
            </summary>
            <param name="item">Entidad a actualizar en el role</param>
            <param name="userId">Id del usuario </param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.UserGroupHander.GroupsAdd(InMotionGIT.FASI.Contracts.Security.UserGroup,System.Int32)">
            <summary>
             Crea un Group en Fasi
            </summary>
            <param name="item">inicio del index</param>
            <param name="userId">Id del usuario </param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.UserGroupHander.GroupRemove(System.Int32)">
            <summary>
             Elimina un group de fasi por Id
            </summary>
            <param name="Id">Id del role</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.UserGroupHander.GroupIndex">
            <summary>
            Obtiene el ultimo id de tabla Group
            </summary>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.Helper">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Helper.GetTokenByHeader">
            <summary>
            Get Authorization token from request headers
            </summary>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.MessageHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.MessageHandler.Find(System.Int32,System.Int32)">
            <summary>
             Ubica el mensaje del error
            </summary>
            <param name="nErrorNum"></param>
            <param name="companyId"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.MultiCompanyHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.MultiCompanyHandler.GetUserInfo(System.Int16)">
             <summary>
            
             </summary>
             <param name="nCompanyId"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.MultiCompanyHandler.IsMultiCompany">
            <summary>
             Validate the multiCompany using settings of eFunctions. // Valida la multi compañía usando la configuración de eFunctions.
            </summary>
            <returns>True if multiCompany is equals to 1 or it's equals to YES; otherwise, false. // Verdadero si multi compañía es 1 o TRUE, de otra forma FALSE.</returns>
            <remarks></remarks>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.MultiCompanyHandler.MultiCompanyList">
            <summary>
             Build the list of the multiCompanies. // Construye la lista de multi compañías.
            </summary>
            <returns>List of the companies VT. // Lista de compañías de VT.</returns>
            <remarks></remarks>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.MultiCompanyHandler.MultiCompanyListWithFormat">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.OptionsInstallationHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.OptionsInstallationHandler.GetFem(System.String,System.String,System.String)">
            <summary>
            Se toman los valore del registro
            </summary>
            <param name="Name"></param>
            <param name="DefValue"></param>
            <param name="Group"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.ProviderHandler">
             <summary>
            
             </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Helpers.ProviderHandler.confi">
             <summary>
            
             </summary>
        </member>
        <member name="F:InMotionGIT.FASI.Helpers.ProviderHandler.machineKey">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="P:InMotionGIT.FASI.Helpers.ProviderHandler.EnablePasswordRetrieval">
             <summary>
            
             </summary>
        </member>
        <member name="P:InMotionGIT.FASI.Helpers.ProviderHandler.EnablePasswordReset">
             <summary>
            
             </summary>
        </member>
        <member name="P:InMotionGIT.FASI.Helpers.ProviderHandler.RequiresQuestionAndAnswer">
             <summary>
            
             </summary>
        </member>
        <member name="P:InMotionGIT.FASI.Helpers.ProviderHandler.ApplicationName">
             <summary>
            
             </summary>
        </member>
        <member name="P:InMotionGIT.FASI.Helpers.ProviderHandler.MaxInvalidPasswordAttempts">
             <summary>
            
             </summary>
        </member>
        <member name="P:InMotionGIT.FASI.Helpers.ProviderHandler.PasswordAttemptWindow">
             <summary>
            
             </summary>
        </member>
        <member name="P:InMotionGIT.FASI.Helpers.ProviderHandler.RequiresUniqueEmail">
             <summary>
            
             </summary>
        </member>
        <member name="P:InMotionGIT.FASI.Helpers.ProviderHandler.PasswordFormat">
             <summary>
            
             </summary>
        </member>
        <member name="P:InMotionGIT.FASI.Helpers.ProviderHandler.MinRequiredPasswordLength">
             <summary>
            
             </summary>
        </member>
        <member name="P:InMotionGIT.FASI.Helpers.ProviderHandler.MinRequiredNonAlphanumericCharacters">
             <summary>
            
             </summary>
        </member>
        <member name="P:InMotionGIT.FASI.Helpers.ProviderHandler.PasswordStrengthRegularExpression">
            <summary>
            /
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.ChangePassword(System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="username"></param>
             <param name="oldPassword"></param>
             <param name="newPassword"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.ChangePasswordQuestionAndAnswer(System.String,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="username"></param>
             <param name="password"></param>
             <param name="newPasswordQuestion"></param>
             <param name="newPasswordAnswer"></param>
             <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.CreateUser(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Object,System.Web.Security.MembershipCreateStatus@)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="email"></param>
            <param name="passwordQuestion"></param>
            <param name="passwordAnswer"></param>
            <param name="isApproved"></param>
            <param name="providerUserKey"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.DeleteUser(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="deleteAllRelatedData"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.FindUsersByEmail(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="emailToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.FindUsersByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="usernameToMatch"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.GetAllUsers(System.Int32,System.Int32,System.Int32@)">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="totalRecords"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.GetNumberOfUsersOnline">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.GetPassword(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.GetUser(System.Object,System.Boolean)">
            <summary>
            
            </summary>
            <param name="providerUserKey"></param>
            <param name="userIsOnline"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.GetUser(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="userIsOnline"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.GetUserNameByEmail(System.String)">
            <summary>
            
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.ResetPassword(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.UnlockUser(System.String)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.UpdateUser(System.Web.Security.MembershipUser)">
            <summary>
            
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.ValidateUser(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.RecoverPassword(System.String)">
            <summary>
            
            </summary>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.RecoverPasswordInternal(System.String)">
            <summary>
            
            </summary>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.ConvertPasswordInternal(System.String)">
            <summary>
            
            </summary>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.UnEncodePassword(System.String)">
            <summary>
            
            </summary>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.UnEncodePasswordInternal(System.String)">
            <summary>
            
            </summary>
            <param name="encodedPassword"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.EncodePassword(System.String)">
            <summary>
            
            </summary>
            <param name="Password"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.EncodePasswordInternal(System.String)">
            <summary>
            
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.ProviderHandler.HexToByte(System.String)">
            <summary>
            
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.SettingsHandler">
            <summary>
             Clase settings.
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.SettingsHandler.IsMultiCompany">
            <summary>
            Valida la multi compañía usando la configuración de eFunctions.
            </summary>
            <returns>Verdadero si multi compañía es 1 o TRUE, de otra forma FALSE.</returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.UserNotifyHandler">
            <summary>
             Clase que administra las notificaciones
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.UserNotifyHandler.GetNotifications(System.Int32)">
            <summary>
            Obtiene las notificaciones del usuario conectado
            </summary>
            <param name="userId">Código del usuario conectado</param>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.UserNotifyHandler.NotificationsUpdate(System.Int32,InMotionGIT.FASI.Contracts.Notification.Notification)">
            <summary>
            Realiza un update del notification
            </summary>
            <param name="userId">Código del usuario conectado</param>
            <param name="item">Instancia a modificar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.UserNotifyHandler.NotificationsCreate(InMotionGIT.FASI.Contracts.Notification.Notification)">
            <summary>
            Crea un notificación para un usuario especifico
            </summary>
            <param name="item">Instancia a crear</param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.Values">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.Values.insGetSetting(System.String,System.String,System.String)">
            <summary>
             se toman los valore del registro
            </summary>
            <param name="Name"></param>
            <param name="DefValue"></param>
            <param name="Group"></param>
            <returns></returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.RoleWidgetsHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.RoleWidgetsHandler.WidgetByRoleName(System.String,System.Boolean)">
            <summary>
            Method que permite retornar los widget autorizados para un role y sin son o no por default
            </summary>
            <param name="RoleName"></param>
            <param name="IsDefault"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.RoleWidgetsHandler.WidgetByRole(System.Int32,System.Int32)">
            <summary>
            Entrega un lista de los widget por role
            </summary>
            <param name="RoleId">Id del role</param>
            <param name="languageId">Lenguaje a seleccionar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.RoleWidgetsHandler.RoleWidgetsAdd(InMotionGIT.FASI.Contracts.General.RoleWidget)">
            <summary>
            Crea un RoleWidgets en la FASI
            </summary>
            <param name="item">Entidad a agregar de RoleWidgets</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.RoleWidgetsHandler.RoleWidgetsUpdate(InMotionGIT.FASI.Contracts.General.RoleWidget)">
            <summary>
            Actualiza un widget en la FASI
            </summary>
            <param name="item">Entidad a actualizar de RoleWidget</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.RoleWidgetsHandler.RoleWidgetDelete(System.Int32)">
            <summary>
            Elimina un RoleWidget de Fasi
            </summary>
            <param name="Id">Id del RoleWidget a eliminar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.RoleWidgetsHandler.RoleWidgetsIndex">
            <summary>
             Obtiene el ultimo id de tabla WidgetInRole
            </summary>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.LookUpHandler">
            <summary>
            Clase que se encarga de manipular el lookup
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.LookUpHandler.LookUps(System.String,System.Int32)">
            <summary>
            Retorna los lookup de un key
            </summary>
            <param name="Key">key del lookup</param>
            <param name="languageId">Lenguaje a seleccionar</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.LookUpHandler.ErrorMessage(System.Int16,System.Int16)">
            <summary>
            Retorna descrpción de un error por su código.
            </summary>
            <param name="code">Código del error.</param>
            <param name="languageId">Lenguaje a seleccionar.</param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.LookUpHandler.GetLanguageInitialsById(System.Int32)">
            <summary>
            Permite obtener las iniciales del idioma en función de su identificador.
            </summary>
            <param name="languageID">Identificador del idioma.</param>
            <returns>Iniciales del idioma.</returns>
        </member>
        <member name="T:InMotionGIT.FASI.Helpers.AuthenticationHelper">
            <summary>
            Clase que proporciona métodos de ayuda para AuthenticationHandler
            </summary>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.AuthenticationHelper.CreateRandomPassword">
            <summary>
            Método de generación de password temporal
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.AuthenticationHelper.CreateRandomSecretAnswer">
            <summary>
            Crear el Secrete Answer
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.AuthenticationHelper.HMACCreator(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.AuthenticationHelper.Sha256Creator(System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.AuthenticationHelper.CreateDefaultUserPassword(System.String,System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.AuthenticationHelper.CreateDefaultUserSTSPassword(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.AuthenticationHelper.GetConectedUserId">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.AuthenticationHelper.CreateAdministratorPassword">
            <summary>
            Create a new admin password
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.AuthenticationHelper.IsDefaultAdmin">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:InMotionGIT.FASI.Helpers.AuthenticationHelper.GetClaimValue(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
