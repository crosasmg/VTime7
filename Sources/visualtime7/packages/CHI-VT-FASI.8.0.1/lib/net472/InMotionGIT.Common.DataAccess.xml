<?xml version="1.0"?>
<doc>
<assembly>
<name>
InMotionGIT.Common.DataAccess
</name>
</assembly>
<members>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumEnumFranchiseOrDeductibleChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumEnumLineOfBusinessTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumEnumPlaceOfInterestTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumEnumRecordOwnerTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumEnumRecordStatusChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumEnumUsePostalCodeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumETranFranchiseOrDeductibleChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumETranLineOfBusinessTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumETranPlaceOfInterestTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumETranRecordOwnerTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumETranRecordStatusChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumETranUsePostalCodeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumPlaceOfInterestChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumTabCompanyChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumTabCountryChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumTabCurrencyChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumTabLanguageChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumTabOfficeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumTransCompanyChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumTransCountryChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumTransCurrencyChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumTransLanguageChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.Enumerations.EnumTransOfficeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible">
 <summary>
 Indicator of franchise or deductible.
 </summary>
<remarks>Datasource is 'EnumFranchiseOrDeductible'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.CreateNewEnumFranchiseOrDeductible">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible._FranchiseOrDeductible">
<summary>
Indicates whether a franchise or a deductible apply (it selects one of the two).
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible._ETranFranchiseOrDeductibles">
<summary>
Descriptions of franchise / deductible indicator table.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.FranchiseOrDeductible">
<summary>
Indicates whether a franchise or a deductible apply (it selects one of the two).
</summary>
<remarks>Datasource is 'EnumFranchiseOrDeductible.FranchiseOrDeductible'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'EnumFranchiseOrDeductible.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'EnumFranchiseOrDeductible.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.RecordStatus">
<summary>
Status of the record.
</summary>
<remarks>Datasource is 'EnumFranchiseOrDeductible.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (UpdateDate).
</summary>
<remarks>Datasource is 'EnumFranchiseOrDeductible.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.UserCode">
<summary>
Code of the user creating or updating the record. (UpdateUserCode).
</summary>
<remarks>Datasource is 'EnumFranchiseOrDeductible.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.NewETranFranchiseOrDeductiblesInstance">
<summary>
Initializes the 'ETranFranchiseOrDeductibles' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.NewETranFranchiseOrDeductibleItem(System.Boolean)">
<summary>
Add a new item to the collection of 'ETranFranchiseOrDeductibles', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'ETranFranchiseOrDeductible' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.ETranFranchiseOrDeductibles">
<summary>
Descriptions of franchise / deductible indicator table.
</summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductible.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductibleCollection">
 <summary>
 Collection for EnumFranchiseOrDeductible class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductibleCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductibleCollection.AddEnumFranchiseOrDeductible">
 <summary>
 Add an instance of class 'EnumFranchiseOrDeductible' in the EnumFranchiseOrDeductibleCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductibleCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumFranchiseOrDeductibleCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType">
 <summary>
 Type of line of business (Life, Fitre, Health, etc)
 </summary>
<remarks>Datasource is 'EnumLineOfBusinessType'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.CreateNewEnumLineOfBusinessType">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType._LineOfBusinessType">
<summary>
Type of line of business (Life, Fitre, Health, etc)
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType._RecordStatusKey">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType._ETranLineOfBusinessTypes">
<summary>
Descriptions of Type of line of business (Life, Fire, Health, etc).
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.LineOfBusinessType">
<summary>
Type of line of business (Life, Fitre, Health, etc)
</summary>
<remarks>Datasource is 'EnumLineOfBusinessType.LineOfBusinessType'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'EnumLineOfBusinessType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'EnumLineOfBusinessType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.RecordStatusKey">
<summary>
Status of the record. (RecordStatus).
</summary>
<remarks>Datasource is 'EnumLineOfBusinessType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'EnumLineOfBusinessType.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'EnumLineOfBusinessType.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.NewETranLineOfBusinessTypesInstance">
<summary>
Initializes the 'ETranLineOfBusinessTypes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.NewETranLineOfBusinessTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'ETranLineOfBusinessTypes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'ETranLineOfBusinessType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.ETranLineOfBusinessTypes">
<summary>
Descriptions of Type of line of business (Life, Fire, Health, etc).
</summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumLineOfBusinessType.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.EnumLineOfBusinessTypeCollection">
 <summary>
 Collection for EnumLineOfBusinessType class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumLineOfBusinessTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumLineOfBusinessTypeCollection.AddEnumLineOfBusinessType">
 <summary>
 Add an instance of class 'EnumLineOfBusinessType' in the EnumLineOfBusinessTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumLineOfBusinessTypeCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumLineOfBusinessTypeCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType">
 <summary>
 Number that identifies the type of the place of interest.
 </summary>
<remarks>Datasource is 'EnumPlaceOfInterestType'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.CreateNewEnumPlaceOfInterestType">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType._PlaceOfInterest">
<summary>
Type of place of interest.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType._DaylightSavingTime">
<summary>
Daylight Saving Time (DST) indicator.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType._RecordStatus">
<summary>
General status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType._ETranPlaceOfInterestTypes">
<summary>
Descriptions of thethe type of the place of interest table.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.PlaceOfInterest">
<summary>
Type of place of interest. (PlaceOfInterestType).
</summary>
<remarks>Datasource is 'EnumPlaceOfInterestType.PlaceOfInterestType'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'EnumPlaceOfInterestType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'EnumPlaceOfInterestType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.DaylightSavingTime">
<summary>
Daylight Saving Time (DST) indicator. (DSTIndicator).
</summary>
<remarks>Datasource is 'EnumPlaceOfInterestType.DSTIndicator'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.RecordStatus">
<summary>
General status of the record.
</summary>
<remarks>Datasource is 'EnumPlaceOfInterestType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (UpdateDate).
</summary>
<remarks>Datasource is 'EnumPlaceOfInterestType.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'EnumPlaceOfInterestType.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.NewETranPlaceOfInterestTypesInstance">
<summary>
Initializes the 'ETranPlaceOfInterestTypes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.NewETranPlaceOfInterestTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'ETranPlaceOfInterestTypes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'ETranPlaceOfInterestType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.ETranPlaceOfInterestTypes">
<summary>
Descriptions of thethe type of the place of interest table.
</summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestType.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestTypeCollection">
 <summary>
 Collection for EnumPlaceOfInterestType class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestTypeCollection.AddEnumPlaceOfInterestType">
 <summary>
 Add an instance of class 'EnumPlaceOfInterestType' in the EnumPlaceOfInterestTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestTypeCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumPlaceOfInterestTypeCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.EnumRecordOwnerType">
 <summary>
 Owner of the record.
 </summary>
<remarks>Datasource is 'EnumRecordOwnerType'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.CreateNewEnumRecordOwnerType">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordOwnerType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordOwnerType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordOwnerType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordOwnerType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordOwnerType._RecordOwnerType">
<summary>
Owner of the record. 
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordOwnerType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordOwnerType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordOwnerType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordOwnerType._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordOwnerType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordOwnerType._ETranRecordOwnerTypes">
<summary>
Descriptions of the owner of the record table.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.RecordOwnerType">
<summary>
Owner of the record. 
</summary>
<remarks>Datasource is 'EnumRecordOwnerType.RecordOwnerType'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'EnumRecordOwnerType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'EnumRecordOwnerType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.RecordStatus">
<summary>
Status of the record.
</summary>
<remarks>Datasource is 'EnumRecordOwnerType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (UpdateDate).
</summary>
<remarks>Datasource is 'EnumRecordOwnerType.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'EnumRecordOwnerType.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.NewETranRecordOwnerTypesInstance">
<summary>
Initializes the 'ETranRecordOwnerTypes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.NewETranRecordOwnerTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'ETranRecordOwnerTypes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'ETranRecordOwnerType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.ETranRecordOwnerTypes">
<summary>
Descriptions of the owner of the record table.
</summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordOwnerType.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.EnumRecordOwnerTypeCollection">
 <summary>
 Collection for EnumRecordOwnerType class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordOwnerTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordOwnerTypeCollection.AddEnumRecordOwnerType">
 <summary>
 Add an instance of class 'EnumRecordOwnerType' in the EnumRecordOwnerTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordOwnerTypeCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordOwnerTypeCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.EnumRecordStatus">
 <summary>
 Status of records table.
 </summary>
<remarks>Datasource is 'EnumRecordStatus'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordStatus.CreateNewEnumRecordStatus">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordStatus.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordStatus._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordStatus._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordStatus._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordStatus._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordStatus._RecordStatusKey">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordStatus._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordStatus._CreatorUserCode">
<summary>
Code of the user creating the record. 
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordStatus._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordStatus._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordStatus._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumRecordStatus._ETranRecordStatus">
<summary>
Status of records table.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordStatus.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordStatus.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordStatus.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordStatus.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordStatus.RecordStatusKey">
<summary>
Status of the record. (RecordStatus).
</summary>
<remarks>Datasource is 'EnumRecordStatus.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordStatus.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'EnumRecordStatus.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordStatus.CreatorUserCode">
<summary>
Code of the user creating the record. 
</summary>
<remarks>Datasource is 'EnumRecordStatus.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordStatus.RecordStatus">
<summary>
Status of the record. (RecordStatusCode).
</summary>
<remarks>Datasource is 'EnumRecordStatus.RecordStatusCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordStatus.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'EnumRecordStatus.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordStatus.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'EnumRecordStatus.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordStatus.NewETranRecordStatusInstance">
<summary>
Initializes the 'ETranRecordStatus' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordStatus.NewETranRecordStatusItem(System.Boolean)">
<summary>
Add a new item to the collection of 'ETranRecordStatus', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'ETranRecordStatus' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumRecordStatus.ETranRecordStatus">
<summary>
Status of records table.
</summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordStatus.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordStatus.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordStatus.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.EnumRecordStatusCollection">
 <summary>
 Collection for EnumRecordStatus class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordStatusCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordStatusCollection.AddEnumRecordStatus">
 <summary>
 Add an instance of class 'EnumRecordStatus' in the EnumRecordStatusCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordStatusCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumRecordStatusCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.EnumUsePostalCode">
 <summary>
 Use postal code table.
 </summary>
<remarks>Datasource is 'EnumUsePostalCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumUsePostalCode.CreateNewEnumUsePostalCode">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumUsePostalCode.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumUsePostalCode._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumUsePostalCode._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumUsePostalCode._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumUsePostalCode._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumUsePostalCode._UsePostalCode">
<summary>
Use postal code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumUsePostalCode._RecordStatus">
<summary>
General status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumUsePostalCode._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumUsePostalCode._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumUsePostalCode._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumUsePostalCode._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.EnumUsePostalCode._ETranUsePostalCodes">
<summary>
Descriptions of the use postal code table.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumUsePostalCode.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumUsePostalCode.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumUsePostalCode.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumUsePostalCode.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumUsePostalCode.UsePostalCode">
<summary>
Use postal code.
</summary>
<remarks>Datasource is 'EnumUsePostalCode.UsePostalCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumUsePostalCode.RecordStatus">
<summary>
General status of the record.
</summary>
<remarks>Datasource is 'EnumUsePostalCode.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumUsePostalCode.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'EnumUsePostalCode.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumUsePostalCode.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'EnumUsePostalCode.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumUsePostalCode.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (UpdateDate).
</summary>
<remarks>Datasource is 'EnumUsePostalCode.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumUsePostalCode.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'EnumUsePostalCode.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumUsePostalCode.NewETranUsePostalCodesInstance">
<summary>
Initializes the 'ETranUsePostalCodes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumUsePostalCode.NewETranUsePostalCodeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'ETranUsePostalCodes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'ETranUsePostalCode' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.EnumUsePostalCode.ETranUsePostalCodes">
<summary>
Descriptions of the use postal code table.
</summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumUsePostalCode.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumUsePostalCode.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumUsePostalCode.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.EnumUsePostalCodeCollection">
 <summary>
 Collection for EnumUsePostalCode class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumUsePostalCodeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumUsePostalCodeCollection.AddEnumUsePostalCode">
 <summary>
 Add an instance of class 'EnumUsePostalCode' in the EnumUsePostalCodeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumUsePostalCodeCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.EnumUsePostalCodeCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible">
 <summary>
 Descriptions of franchise / deductible indicator table.
 </summary>
<remarks>Datasource is 'ETranFranchiseOrDeductible'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.CreateNewETranFranchiseOrDeductible">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible._FranchiseOrDeductible">
<summary>
Indicates whether a franchise or a deductible apply (it selects one of the two).
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible._LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible._Description">
<summary>
Description of the code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible._ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.FranchiseOrDeductible">
<summary>
Indicates whether a franchise or a deductible apply (it selects one of the two).
</summary>
<remarks>Datasource is 'ETranFranchiseOrDeductible.FranchiseOrDeductible'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.LanguageID">
<summary>
Language in which the description is indicated
</summary>
<remarks>Datasource is 'ETranFranchiseOrDeductible.LanguageID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'ETranFranchiseOrDeductible.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'ETranFranchiseOrDeductible.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.Description">
<summary>
Description of the code.
</summary>
<remarks>Datasource is 'ETranFranchiseOrDeductible.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
<remarks>Datasource is 'ETranFranchiseOrDeductible.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'ETranFranchiseOrDeductible.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'ETranFranchiseOrDeductible.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductible.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductibleCollection">
 <summary>
 Collection for ETranFranchiseOrDeductible class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductibleCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductibleCollection.AddETranFranchiseOrDeductible">
 <summary>
 Add an instance of class 'ETranFranchiseOrDeductible' in the ETranFranchiseOrDeductibleCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductibleCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranFranchiseOrDeductibleCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType">
 <summary>
 Descriptions of Type of line of business (Life, Fire, Health, etc).
 </summary>
<remarks>Datasource is 'ETranLineOfBusinessType'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.CreateNewETranLineOfBusinessType">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType._LineOfBusinessType">
<summary>
Type of line of business (Life, Fitre, Health, etc)
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType._LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType._Description">
<summary>
Description of the code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType._ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.LineOfBusinessType">
<summary>
Type of line of business (Life, Fitre, Health, etc)
</summary>
<remarks>Datasource is 'ETranLineOfBusinessType.LineOfBusinessType'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.LanguageID">
<summary>
Language in which the description is indicated
</summary>
<remarks>Datasource is 'ETranLineOfBusinessType.LanguageID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'ETranLineOfBusinessType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'ETranLineOfBusinessType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.Description">
<summary>
Description of the code.
</summary>
<remarks>Datasource is 'ETranLineOfBusinessType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
<remarks>Datasource is 'ETranLineOfBusinessType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'ETranLineOfBusinessType.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'ETranLineOfBusinessType.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranLineOfBusinessType.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.ETranLineOfBusinessTypeCollection">
 <summary>
 Collection for ETranLineOfBusinessType class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranLineOfBusinessTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranLineOfBusinessTypeCollection.AddETranLineOfBusinessType">
 <summary>
 Add an instance of class 'ETranLineOfBusinessType' in the ETranLineOfBusinessTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranLineOfBusinessTypeCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranLineOfBusinessTypeCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType">
 <summary>
 Descriptions of thethe type of the place of interest table.
 </summary>
<remarks>Datasource is 'ETranPlaceOfInterestType'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.CreateNewETranPlaceOfInterestType">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType._PlaceOfInterest">
<summary>
Type of place of interest.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType._LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType._Description">
<summary>
Description of the place of interest.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType._ShortDescription">
<summary>
Abbreviated description of the place of interest.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.PlaceOfInterest">
<summary>
Type of place of interest. (PlaceOfInterestType).
</summary>
<remarks>Datasource is 'ETranPlaceOfInterestType.PlaceOfInterestType'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.LanguageID">
<summary>
Language in which the description is indicated
</summary>
<remarks>Datasource is 'ETranPlaceOfInterestType.LanguageID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'ETranPlaceOfInterestType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'ETranPlaceOfInterestType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.Description">
<summary>
Description of the place of interest.
</summary>
<remarks>Datasource is 'ETranPlaceOfInterestType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.ShortDescription">
<summary>
Abbreviated description of the place of interest.
</summary>
<remarks>Datasource is 'ETranPlaceOfInterestType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'ETranPlaceOfInterestType.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'ETranPlaceOfInterestType.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestType.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestTypeCollection">
 <summary>
 Collection for ETranPlaceOfInterestType class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestTypeCollection.AddETranPlaceOfInterestType">
 <summary>
 Add an instance of class 'ETranPlaceOfInterestType' in the ETranPlaceOfInterestTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestTypeCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranPlaceOfInterestTypeCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.ETranRecordOwnerType">
 <summary>
 Descriptions of the owner of the record table.
 </summary>
<remarks>Datasource is 'ETranRecordOwnerType'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.CreateNewETranRecordOwnerType">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordOwnerType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordOwnerType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordOwnerType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordOwnerType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordOwnerType._RecordOwnerType">
<summary>
Owner of the record. 
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordOwnerType._LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordOwnerType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordOwnerType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordOwnerType._Description">
<summary>
Description of the record owner.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordOwnerType._ShortDescription">
<summary>
Short description of the record owner.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordOwnerType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordOwnerType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.RecordOwnerType">
<summary>
Owner of the record. 
</summary>
<remarks>Datasource is 'ETranRecordOwnerType.RecordOwnerType'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.LanguageID">
<summary>
Language in which the description is indicated
</summary>
<remarks>Datasource is 'ETranRecordOwnerType.LanguageID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'ETranRecordOwnerType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'ETranRecordOwnerType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.Description">
<summary>
Description of the record owner.
</summary>
<remarks>Datasource is 'ETranRecordOwnerType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.ShortDescription">
<summary>
Short description of the record owner.
</summary>
<remarks>Datasource is 'ETranRecordOwnerType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'ETranRecordOwnerType.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'ETranRecordOwnerType.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordOwnerType.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.ETranRecordOwnerTypeCollection">
 <summary>
 Collection for ETranRecordOwnerType class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordOwnerTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordOwnerTypeCollection.AddETranRecordOwnerType">
 <summary>
 Add an instance of class 'ETranRecordOwnerType' in the ETranRecordOwnerTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordOwnerTypeCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordOwnerTypeCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.ETranRecordStatus">
 <summary>
 Status of records table.
 </summary>
<remarks>Datasource is 'ETranRecordStatus'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordStatus.CreateNewETranRecordStatus">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordStatus.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordStatus._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordStatus._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordStatus._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordStatus._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordStatus._RecordStatusKey">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordStatus._LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordStatus._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordStatus._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordStatus._Description">
<summary>
Description of the record status.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordStatus._ShortDescription">
<summary>
Abbreviated description of the record status.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordStatus._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranRecordStatus._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordStatus.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordStatus.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordStatus.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordStatus.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordStatus.RecordStatusKey">
<summary>
Status of the record. (RecordStatus).
</summary>
<remarks>Datasource is 'ETranRecordStatus.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordStatus.LanguageID">
<summary>
Language in which the description is indicated
</summary>
<remarks>Datasource is 'ETranRecordStatus.LanguageID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordStatus.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'ETranRecordStatus.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordStatus.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'ETranRecordStatus.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordStatus.Description">
<summary>
Description of the record status.
</summary>
<remarks>Datasource is 'ETranRecordStatus.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordStatus.ShortDescription">
<summary>
Abbreviated description of the record status.
</summary>
<remarks>Datasource is 'ETranRecordStatus.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordStatus.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'ETranRecordStatus.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranRecordStatus.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'ETranRecordStatus.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordStatus.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordStatus.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordStatus.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.ETranRecordStatusCollection">
 <summary>
 Collection for ETranRecordStatus class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordStatusCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordStatusCollection.AddETranRecordStatus">
 <summary>
 Add an instance of class 'ETranRecordStatus' in the ETranRecordStatusCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordStatusCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranRecordStatusCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.String,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.ETranUsePostalCode">
 <summary>
 Descriptions of the use postal code table.
 </summary>
<remarks>Datasource is 'ETranUsePostalCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranUsePostalCode.CreateNewETranUsePostalCode">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranUsePostalCode.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranUsePostalCode._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranUsePostalCode._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranUsePostalCode._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranUsePostalCode._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranUsePostalCode._UsePostalCode">
<summary>
Use postal code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranUsePostalCode._LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranUsePostalCode._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranUsePostalCode._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranUsePostalCode._Description">
<summary>
Description of the code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranUsePostalCode._ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranUsePostalCode._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.ETranUsePostalCode._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranUsePostalCode.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranUsePostalCode.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranUsePostalCode.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranUsePostalCode.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranUsePostalCode.UsePostalCode">
<summary>
Use postal code.
</summary>
<remarks>Datasource is 'ETranUsePostalCode.UsePostalCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranUsePostalCode.LanguageID">
<summary>
Language in which the description is indicated
</summary>
<remarks>Datasource is 'ETranUsePostalCode.LanguageID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranUsePostalCode.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'ETranUsePostalCode.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranUsePostalCode.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'ETranUsePostalCode.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranUsePostalCode.Description">
<summary>
Description of the code.
</summary>
<remarks>Datasource is 'ETranUsePostalCode.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranUsePostalCode.ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
<remarks>Datasource is 'ETranUsePostalCode.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranUsePostalCode.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'ETranUsePostalCode.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.ETranUsePostalCode.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'ETranUsePostalCode.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranUsePostalCode.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranUsePostalCode.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranUsePostalCode.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.ETranUsePostalCodeCollection">
 <summary>
 Collection for ETranUsePostalCode class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranUsePostalCodeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranUsePostalCodeCollection.AddETranUsePostalCode">
 <summary>
 Add an instance of class 'ETranUsePostalCode' in the ETranUsePostalCodeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranUsePostalCodeCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.ETranUsePostalCodeCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.PlaceOfInterest">
 <summary>
 Place of interest.
 </summary>
<remarks>Datasource is 'PlaceOfInterest'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.PlaceOfInterest.CreateNewPlaceOfInterest">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.PlaceOfInterest.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._Country">
<summary>
Code of the country. 
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._PlaceOfInterestID">
<summary>
Place of interest code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._AddressID">
<summary>
Access Key of The Address Record. 
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._Description">
<summary>
Description of the code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._PlaceOfInterestType">
<summary>
Type of place of interest.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._PhoneID">
<summary>
Access Key of the phone Record. 
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.PlaceOfInterest._UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.Country">
<summary>
Code of the country.  (CountryID).
</summary>
<remarks>Datasource is 'PlaceOfInterest.CountryID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.PlaceOfInterestID">
<summary>
Place of interest code.
</summary>
<remarks>Datasource is 'PlaceOfInterest.PlaceOfInterestID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.AddressID">
<summary>
Access Key of The Address Record. 
</summary>
<remarks>Datasource is 'PlaceOfInterest.AddressID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'PlaceOfInterest.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'PlaceOfInterest.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.Description">
<summary>
Description of the code.
</summary>
<remarks>Datasource is 'PlaceOfInterest.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.PlaceOfInterestType">
<summary>
Type of place of interest.
</summary>
<remarks>Datasource is 'PlaceOfInterest.PlaceOfInterestType'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.PhoneID">
<summary>
Access Key of the phone Record. 
</summary>
<remarks>Datasource is 'PlaceOfInterest.PhoneID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.RecordStatus">
<summary>
Status of the record.
</summary>
<remarks>Datasource is 'PlaceOfInterest.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
<remarks>Datasource is 'PlaceOfInterest.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'PlaceOfInterest.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.PlaceOfInterest.UserCode">
<summary>
Code of the user creating or updating the record. (UpdateUserCode).
</summary>
<remarks>Datasource is 'PlaceOfInterest.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.PlaceOfInterest.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.PlaceOfInterest.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.PlaceOfInterest.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.PlaceOfInterestCollection">
 <summary>
 Collection for PlaceOfInterest class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.PlaceOfInterestCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.PlaceOfInterestCollection.AddPlaceOfInterest">
 <summary>
 Add an instance of class 'PlaceOfInterest' in the PlaceOfInterestCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.PlaceOfInterestCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.PlaceOfInterestCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.String)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumFranchiseOrDeductible.FranchiseOrDeductible">
<summary>
Indicates whether a franchise or a deductible apply (it selects one of the two).
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumFranchiseOrDeductible.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumFranchiseOrDeductible.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumFranchiseOrDeductible.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumFranchiseOrDeductible.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumFranchiseOrDeductible.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumLineOfBusinessType.LineOfBusinessType">
<summary>
Type of line of business (Life, Fitre, Health, etc)
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumLineOfBusinessType.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumLineOfBusinessType.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumLineOfBusinessType.RecordStatusKey">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumLineOfBusinessType.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumLineOfBusinessType.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumPlaceOfInterestType.PlaceOfInterest">
<summary>
Type of place of interest.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumPlaceOfInterestType.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumPlaceOfInterestType.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumPlaceOfInterestType.DaylightSavingTime">
<summary>
Daylight Saving Time (DST) indicator.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumPlaceOfInterestType.RecordStatus">
<summary>
General status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumPlaceOfInterestType.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumPlaceOfInterestType.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumRecordOwnerType.RecordOwnerType">
<summary>
Owner of the record. 
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumRecordOwnerType.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumRecordOwnerType.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumRecordOwnerType.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumRecordOwnerType.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumRecordOwnerType.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumRecordStatus.RecordStatusKey">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumRecordStatus.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumRecordStatus.CreatorUserCode">
<summary>
Code of the user creating the record. 
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumRecordStatus.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumRecordStatus.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumRecordStatus.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumUsePostalCode.UsePostalCode">
<summary>
Use postal code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumUsePostalCode.RecordStatus">
<summary>
General status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumUsePostalCode.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumUsePostalCode.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumUsePostalCode.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.EnumUsePostalCode.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranFranchiseOrDeductible.FranchiseOrDeductible">
<summary>
Indicates whether a franchise or a deductible apply (it selects one of the two).
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranFranchiseOrDeductible.LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranFranchiseOrDeductible.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranFranchiseOrDeductible.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranFranchiseOrDeductible.Description">
<summary>
Description of the code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranFranchiseOrDeductible.ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranFranchiseOrDeductible.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranFranchiseOrDeductible.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranLineOfBusinessType.LineOfBusinessType">
<summary>
Type of line of business (Life, Fitre, Health, etc)
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranLineOfBusinessType.LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranLineOfBusinessType.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranLineOfBusinessType.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranLineOfBusinessType.Description">
<summary>
Description of the code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranLineOfBusinessType.ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranLineOfBusinessType.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranLineOfBusinessType.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranPlaceOfInterestType.PlaceOfInterest">
<summary>
Type of place of interest.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranPlaceOfInterestType.LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranPlaceOfInterestType.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranPlaceOfInterestType.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranPlaceOfInterestType.Description">
<summary>
Description of the place of interest.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranPlaceOfInterestType.ShortDescription">
<summary>
Abbreviated description of the place of interest.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranPlaceOfInterestType.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranPlaceOfInterestType.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordOwnerType.RecordOwnerType">
<summary>
Owner of the record. 
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordOwnerType.LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordOwnerType.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordOwnerType.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordOwnerType.Description">
<summary>
Description of the record owner.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordOwnerType.ShortDescription">
<summary>
Short description of the record owner.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordOwnerType.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordOwnerType.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordStatus.RecordStatusKey">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordStatus.LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordStatus.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordStatus.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordStatus.Description">
<summary>
Description of the record status.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordStatus.ShortDescription">
<summary>
Abbreviated description of the record status.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordStatus.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranRecordStatus.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranUsePostalCode.UsePostalCode">
<summary>
Use postal code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranUsePostalCode.LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranUsePostalCode.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranUsePostalCode.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranUsePostalCode.Description">
<summary>
Description of the code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranUsePostalCode.ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranUsePostalCode.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.ETranUsePostalCode.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.PlaceOfInterest.Country">
<summary>
Code of the country. 
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.PlaceOfInterest.PlaceOfInterestID">
<summary>
Place of interest code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.PlaceOfInterest.AddressID">
<summary>
Access Key of The Address Record. 
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.PlaceOfInterest.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.PlaceOfInterest.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.PlaceOfInterest.Description">
<summary>
Description of the code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.PlaceOfInterest.PlaceOfInterestType">
<summary>
Type of place of interest.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.PlaceOfInterest.PhoneID">
<summary>
Access Key of the phone Record. 
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.PlaceOfInterest.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.PlaceOfInterest.ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.PlaceOfInterest.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.PlaceOfInterest.UserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCompany.UserCompany">
<summary>
Code that identifies the user company owner of the information.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCompany.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCompany.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCompany.RecordStatusKey">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCompany.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCompany.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.Country">
<summary>
Code of the country. 
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.CityBasedZipCode">
<summary>
You can get the city or town based on zip code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.CityLevel">
<summary>
Level of the geographical area corresponding to the city.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.CountryPhoneArea">
<summary>
Country phone code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.InternationalCountryCode">
<summary>
International country code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.CountryCodeTwoCharacters">
<summary>
International country code according ISO 3166 specifications (two alphabetic characters code).
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.CountryCodeThreeCharacters">
<summary>
International country code according ISO 3166 specifications (three alphabetic characters code).
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.MaximumNumberGeographicalAreas">
<summary>
Maximum number of geographical areas.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.RecordStatus">
<summary>
General status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.StateOrProvinceLevel">
<summary>
Level of the geographical area corresponding to the state or province.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCountry.UsePostalCodeIndicator">
<summary>
Use postal code indicator
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCurrency.Currency">
<summary>
Code of the currency.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCurrency.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCurrency.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCurrency.RecordStatusKey">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCurrency.Symbol">
<summary>
Symbol associated with the currency.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCurrency.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabCurrency.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabLanguage.LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabLanguage.RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabLanguage.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabLanguage.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabLanguage.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabLanguage.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabOffice.UserCompany">
<summary>
Code that identifies the user company owner of the information.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabOffice.BranchOffice">
<summary>
Code of the branch office.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabOffice.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabOffice.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabOffice.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabOffice.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TabOffice.RecordStatusKey">
<summary>
Status of the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCompany.UserCompany">
<summary>
Code that identifies the user company owner of the information.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCompany.LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCompany.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCompany.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCompany.Description">
<summary>
Description of the company.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCompany.ShortDescription">
<summary>
Abbreviated description of the companía.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCompany.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCompany.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCountry.Country">
<summary>
Code of the country. 
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCountry.LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCountry.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCountry.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCountry.Description">
<summary>
Description of the country.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCountry.ShortDescription">
<summary>
Abbreviated description of the country.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCountry.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCountry.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCurrency.Currency">
<summary>
Code of the currency.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCurrency.LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCurrency.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCurrency.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCurrency.Description">
<summary>
Description of the code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCurrency.ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCurrency.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransCurrency.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransLanguage.LanguageIDKey">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransLanguage.LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransLanguage.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransLanguage.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransLanguage.Description">
<summary>
Description of the language.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransLanguage.ShortDescription">
<summary>
Abbreviated description of the language.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransLanguage.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransLanguage.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransOffice.UserCompany">
<summary>
Code that identifies the user company owner of the information.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransOffice.BranchOffice">
<summary>
Code of the branch office.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransOffice.LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransOffice.CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransOffice.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransOffice.Description">
<summary>
Description of the code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransOffice.ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransOffice.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.QueryStatement.TransOffice.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TabCompany">
 <summary>
 Companies
 </summary>
<remarks>Datasource is 'TabCompany'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCompany.CreateNewTabCompany">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCompany.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCompany._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCompany._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCompany._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCompany._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCompany._UserCompany">
<summary>
Code that identifies the user company owner of the information.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCompany._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCompany._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCompany._RecordStatusKey">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCompany._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCompany._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCompany._TabOffices">
<summary>
Branch offices/Zones.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCompany._TransCompanies">
<summary>
Descriptions of the companies table.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCompany.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCompany.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCompany.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCompany.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCompany.UserCompany">
<summary>
Code that identifies the user company owner of the information. (CompanyID).
</summary>
<remarks>Datasource is 'TabCompany.CompanyID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCompany.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'TabCompany.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCompany.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'TabCompany.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCompany.RecordStatusKey">
<summary>
Status of the record. (RecordStatus).
</summary>
<remarks>Datasource is 'TabCompany.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCompany.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'TabCompany.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCompany.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'TabCompany.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCompany.NewTabOfficesInstance">
<summary>
Initializes the 'TabOffices' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCompany.NewTabOfficeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TabOffices', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TabOffice' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCompany.TabOffices">
<summary>
Branch offices/Zones.
</summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCompany.NewTransCompaniesInstance">
<summary>
Initializes the 'TransCompanies' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCompany.NewTransCompanyItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransCompanies', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransCompany' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCompany.TransCompanies">
<summary>
Descriptions of the companies table.
</summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCompany.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCompany.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCompany.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TabCompanyCollection">
 <summary>
 Collection for TabCompany class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCompanyCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCompanyCollection.AddTabCompany">
 <summary>
 Add an instance of class 'TabCompany' in the TabCompanyCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCompanyCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCompanyCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TabCountry">
 <summary>
 Country table.
 </summary>
<remarks>Datasource is 'TabCountry'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCountry.CreateNewTabCountry">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCountry.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._Country">
<summary>
Code of the country. 
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._CityBasedZipCode">
<summary>
You can get the city or town based on zip code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._CityLevel">
<summary>
Level of the geographical area corresponding to the city.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._CountryPhoneArea">
<summary>
Country phone code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._InternationalCountryCode">
<summary>
International country code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._CountryCodeTwoCharacters">
<summary>
International country code according ISO 3166 specifications (two alphabetic characters code).
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._CountryCodeThreeCharacters">
<summary>
International country code according ISO 3166 specifications (three alphabetic characters code).
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._MaximumNumberGeographicalAreas">
<summary>
Maximum number of geographical areas.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._RecordStatus">
<summary>
General status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._StateOrProvinceLevel">
<summary>
Level of the geographical area corresponding to the state or province.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._UpdateTimeStamp">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._UsePostalCodeIndicator">
<summary>
Use postal code indicator
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._PlaceOfInterests">
<summary>
Place of interest.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCountry._TransCountries">
<summary>
Descriptions of the country table.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.Country">
<summary>
Code of the country.  (CountryID).
</summary>
<remarks>Datasource is 'TabCountry.CountryID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.CityBasedZipCode">
<summary>
You can get the city or town based on zip code. (CityFromZipCode).
</summary>
<remarks>Datasource is 'TabCountry.CityFromZipCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.CityLevel">
<summary>
Level of the geographical area corresponding to the city.
</summary>
<remarks>Datasource is 'TabCountry.CityLevel'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.CountryPhoneArea">
<summary>
Country phone code.
</summary>
<remarks>Datasource is 'TabCountry.CountryPhoneArea'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'TabCountry.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'TabCountry.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.InternationalCountryCode">
<summary>
International country code. (CountryCodeISO3166).
</summary>
<remarks>Datasource is 'TabCountry.CountryCodeISO3166'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.CountryCodeTwoCharacters">
<summary>
International country code according ISO 3166 specifications (two alphabetic characters code). (CountryCodeISO3166TwoChar).
</summary>
<remarks>Datasource is 'TabCountry.CountryCodeISO3166TwoChar'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.CountryCodeThreeCharacters">
<summary>
International country code according ISO 3166 specifications (three alphabetic characters code). (CountryCodeISO3166ThreeChar).
</summary>
<remarks>Datasource is 'TabCountry.CountryCodeISO3166ThreeChar'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.MaximumNumberGeographicalAreas">
<summary>
Maximum number of geographical areas.
</summary>
<remarks>Datasource is 'TabCountry.MaximumNumberGeographicalAreas'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.RecordStatus">
<summary>
General status of the record.
</summary>
<remarks>Datasource is 'TabCountry.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.StateOrProvinceLevel">
<summary>
Level of the geographical area corresponding to the state or province.
</summary>
<remarks>Datasource is 'TabCountry.StateOrProvinceLevel'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.UpdateTimeStamp">
<summary>
Computer date when the record is updated or created. (UpdateDate).
</summary>
<remarks>Datasource is 'TabCountry.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'TabCountry.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.UsePostalCodeIndicator">
<summary>
Use postal code indicator
</summary>
<remarks>Datasource is 'TabCountry.UsePostalCodeIndicator'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCountry.NewPlaceOfInterestsInstance">
<summary>
Initializes the 'PlaceOfInterests' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCountry.NewPlaceOfInterestItem(System.Boolean)">
<summary>
Add a new item to the collection of 'PlaceOfInterests', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'PlaceOfInterest' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.PlaceOfInterests">
<summary>
Place of interest.
</summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCountry.NewTransCountriesInstance">
<summary>
Initializes the 'TransCountries' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCountry.NewTransCountryItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransCountries', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransCountry' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCountry.TransCountries">
<summary>
Descriptions of the country table.
</summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCountry.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCountry.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCountry.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TabCountryCollection">
 <summary>
 Collection for TabCountry class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCountryCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCountryCollection.AddTabCountry">
 <summary>
 Add an instance of class 'TabCountry' in the TabCountryCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCountryCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCountryCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TabCurrency">
 <summary>
 Currencies.
 </summary>
<remarks>Datasource is 'TabCurrency'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCurrency.CreateNewTabCurrency">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCurrency.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCurrency._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCurrency._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCurrency._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCurrency._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCurrency._Currency">
<summary>
Code of the currency.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCurrency._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCurrency._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCurrency._RecordStatusKey">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCurrency._Symbol">
<summary>
Symbol associated with the currency.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCurrency._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCurrency._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabCurrency._TransCurrencies">
<summary>
Descriptions of the currencies table.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCurrency.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCurrency.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCurrency.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCurrency.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCurrency.Currency">
<summary>
Code of the currency.
</summary>
<remarks>Datasource is 'TabCurrency.Currency'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCurrency.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'TabCurrency.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCurrency.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'TabCurrency.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCurrency.RecordStatusKey">
<summary>
Status of the record. (RecordStatus).
</summary>
<remarks>Datasource is 'TabCurrency.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCurrency.Symbol">
<summary>
Symbol associated with the currency.
</summary>
<remarks>Datasource is 'TabCurrency.Symbol'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCurrency.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'TabCurrency.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCurrency.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'TabCurrency.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCurrency.NewTransCurrenciesInstance">
<summary>
Initializes the 'TransCurrencies' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCurrency.NewTransCurrencyItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransCurrencies', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransCurrency' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabCurrency.TransCurrencies">
<summary>
Descriptions of the currencies table.
</summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCurrency.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCurrency.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCurrency.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TabCurrencyCollection">
 <summary>
 Collection for TabCurrency class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCurrencyCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCurrencyCollection.AddTabCurrency">
 <summary>
 Add an instance of class 'TabCurrency' in the TabCurrencyCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCurrencyCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabCurrencyCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TabLanguage">
 <summary>
 Language table.
 </summary>
<remarks>Datasource is 'TabLanguage'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabLanguage.CreateNewTabLanguage">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabLanguage.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabLanguage._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabLanguage._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabLanguage._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabLanguage._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabLanguage._LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabLanguage._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabLanguage._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabLanguage._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabLanguage._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabLanguage._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabLanguage._TransLanguages">
<summary>
Descriptions of the language table.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabLanguage.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabLanguage.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabLanguage.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabLanguage.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabLanguage.LanguageID">
<summary>
Language in which the description is indicated
</summary>
<remarks>Datasource is 'TabLanguage.LanguageID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabLanguage.RecordStatus">
<summary>
Status of the record.
</summary>
<remarks>Datasource is 'TabLanguage.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabLanguage.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'TabLanguage.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabLanguage.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'TabLanguage.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabLanguage.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'TabLanguage.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabLanguage.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'TabLanguage.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabLanguage.NewTransLanguagesInstance">
<summary>
Initializes the 'TransLanguages' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabLanguage.NewTransLanguageItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransLanguages', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransLanguage' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabLanguage.TransLanguages">
<summary>
Descriptions of the language table.
</summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabLanguage.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabLanguage.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabLanguage.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TabLanguageCollection">
 <summary>
 Collection for TabLanguage class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabLanguageCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabLanguageCollection.AddTabLanguage">
 <summary>
 Add an instance of class 'TabLanguage' in the TabLanguageCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabLanguageCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabLanguageCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TabOffice">
 <summary>
 Branch offices/Zones.
 </summary>
<remarks>Datasource is 'TabOffice'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabOffice.CreateNewTabOffice">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabOffice.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabOffice._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabOffice._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabOffice._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabOffice._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabOffice._UserCompany">
<summary>
Code that identifies the user company owner of the information.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabOffice._BranchOffice">
<summary>
Code of the branch office.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabOffice._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabOffice._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabOffice._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabOffice._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabOffice._RecordStatusKey">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TabOffice._TransOffices">
<summary>
Descriptions of the Branch Offices table.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabOffice.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabOffice.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabOffice.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabOffice.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabOffice.UserCompany">
<summary>
Code that identifies the user company owner of the information. (CompanyID).
</summary>
<remarks>Datasource is 'TabOffice.CompanyID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabOffice.BranchOffice">
<summary>
Code of the branch office. (Office).
</summary>
<remarks>Datasource is 'TabOffice.Office'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabOffice.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'TabOffice.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabOffice.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'TabOffice.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabOffice.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'TabOffice.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabOffice.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'TabOffice.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabOffice.RecordStatusKey">
<summary>
Status of the record. (RecordStatus).
</summary>
<remarks>Datasource is 'TabOffice.RecordStatus'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabOffice.NewTransOfficesInstance">
<summary>
Initializes the 'TransOffices' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabOffice.NewTransOfficeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransOffices', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransOffice' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TabOffice.TransOffices">
<summary>
Descriptions of the Branch Offices table.
</summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabOffice.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabOffice.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabOffice.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TabOfficeCollection">
 <summary>
 Collection for TabOffice class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabOfficeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabOfficeCollection.AddTabOffice">
 <summary>
 Add an instance of class 'TabOffice' in the TabOfficeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabOfficeCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TabOfficeCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TransCompany">
 <summary>
 Descriptions of the companies table.
 </summary>
<remarks>Datasource is 'TransCompany'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCompany.CreateNewTransCompany">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCompany.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCompany._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCompany._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCompany._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCompany._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCompany._UserCompany">
<summary>
Code that identifies the user company owner of the information.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCompany._LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCompany._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCompany._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCompany._Description">
<summary>
Description of the company.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCompany._ShortDescription">
<summary>
Abbreviated description of the companía.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCompany._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCompany._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCompany.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCompany.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCompany.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCompany.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCompany.UserCompany">
<summary>
Code that identifies the user company owner of the information. (CompanyID).
</summary>
<remarks>Datasource is 'TransCompany.CompanyID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCompany.LanguageID">
<summary>
Language in which the description is indicated
</summary>
<remarks>Datasource is 'TransCompany.LanguageID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCompany.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'TransCompany.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCompany.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'TransCompany.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCompany.Description">
<summary>
Description of the company.
</summary>
<remarks>Datasource is 'TransCompany.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCompany.ShortDescription">
<summary>
Abbreviated description of the companía.
</summary>
<remarks>Datasource is 'TransCompany.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCompany.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'TransCompany.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCompany.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'TransCompany.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCompany.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCompany.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCompany.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TransCompanyCollection">
 <summary>
 Collection for TransCompany class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCompanyCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCompanyCollection.AddTransCompany">
 <summary>
 Add an instance of class 'TransCompany' in the TransCompanyCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCompanyCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCompanyCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TransCountry">
 <summary>
 Descriptions of the country table.
 </summary>
<remarks>Datasource is 'TransCountry'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCountry.CreateNewTransCountry">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCountry.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCountry._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCountry._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCountry._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCountry._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCountry._Country">
<summary>
Code of the country. 
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCountry._LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCountry._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCountry._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCountry._Description">
<summary>
Description of the country.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCountry._ShortDescription">
<summary>
Abbreviated description of the country.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCountry._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCountry._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCountry.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCountry.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCountry.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCountry.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCountry.Country">
<summary>
Code of the country.  (CountryID).
</summary>
<remarks>Datasource is 'TransCountry.CountryID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCountry.LanguageID">
<summary>
Language in which the description is indicated
</summary>
<remarks>Datasource is 'TransCountry.LanguageID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCountry.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'TransCountry.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCountry.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'TransCountry.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCountry.Description">
<summary>
Description of the country.
</summary>
<remarks>Datasource is 'TransCountry.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCountry.ShortDescription">
<summary>
Abbreviated description of the country.
</summary>
<remarks>Datasource is 'TransCountry.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCountry.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'TransCountry.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCountry.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'TransCountry.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCountry.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCountry.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCountry.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TransCountryCollection">
 <summary>
 Collection for TransCountry class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCountryCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCountryCollection.AddTransCountry">
 <summary>
 Add an instance of class 'TransCountry' in the TransCountryCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCountryCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCountryCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TransCurrency">
 <summary>
 Descriptions of the currencies table.
 </summary>
<remarks>Datasource is 'TransCurrency'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCurrency.CreateNewTransCurrency">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCurrency.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCurrency._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCurrency._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCurrency._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCurrency._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCurrency._Currency">
<summary>
Code of the currency.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCurrency._LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCurrency._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCurrency._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCurrency._Description">
<summary>
Description of the code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCurrency._ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCurrency._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransCurrency._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCurrency.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCurrency.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCurrency.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCurrency.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCurrency.Currency">
<summary>
Code of the currency.
</summary>
<remarks>Datasource is 'TransCurrency.Currency'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCurrency.LanguageID">
<summary>
Language in which the description is indicated
</summary>
<remarks>Datasource is 'TransCurrency.LanguageID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCurrency.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'TransCurrency.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCurrency.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'TransCurrency.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCurrency.Description">
<summary>
Description of the code.
</summary>
<remarks>Datasource is 'TransCurrency.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCurrency.ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
<remarks>Datasource is 'TransCurrency.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCurrency.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'TransCurrency.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransCurrency.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'TransCurrency.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCurrency.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCurrency.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCurrency.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TransCurrencyCollection">
 <summary>
 Collection for TransCurrency class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCurrencyCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCurrencyCollection.AddTransCurrency">
 <summary>
 Add an instance of class 'TransCurrency' in the TransCurrencyCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCurrencyCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransCurrencyCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TransLanguage">
 <summary>
 Descriptions of the language table.
 </summary>
<remarks>Datasource is 'TransLanguage'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransLanguage.CreateNewTransLanguage">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransLanguage.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransLanguage._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransLanguage._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransLanguage._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransLanguage._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransLanguage._LanguageIDKey">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransLanguage._LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransLanguage._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransLanguage._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransLanguage._Description">
<summary>
Description of the language.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransLanguage._ShortDescription">
<summary>
Abbreviated description of the language.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransLanguage._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransLanguage._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransLanguage.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransLanguage.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransLanguage.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransLanguage.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransLanguage.LanguageIDKey">
<summary>
Language in which the description is indicated (LanguageCodeID).
</summary>
<remarks>Datasource is 'TransLanguage.LanguageCodeID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransLanguage.LanguageID">
<summary>
Language in which the description is indicated
</summary>
<remarks>Datasource is 'TransLanguage.LanguageID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransLanguage.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'TransLanguage.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransLanguage.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'TransLanguage.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransLanguage.Description">
<summary>
Description of the language.
</summary>
<remarks>Datasource is 'TransLanguage.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransLanguage.ShortDescription">
<summary>
Abbreviated description of the language.
</summary>
<remarks>Datasource is 'TransLanguage.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransLanguage.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'TransLanguage.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransLanguage.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'TransLanguage.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransLanguage.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransLanguage.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransLanguage.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TransLanguageCollection">
 <summary>
 Collection for TransLanguage class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransLanguageCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransLanguageCollection.AddTransLanguage">
 <summary>
 Add an instance of class 'TransLanguage' in the TransLanguageCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransLanguageCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransLanguageCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TransOffice">
 <summary>
 Descriptions of the Branch Offices table.
 </summary>
<remarks>Datasource is 'TransOffice'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransOffice.CreateNewTransOffice">
 <summary>
 This is the public class factory method.
 </summary>
 <returns></returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransOffice.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransOffice._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransOffice._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransOffice._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransOffice._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransOffice._UserCompany">
<summary>
Code that identifies the user company owner of the information.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransOffice._BranchOffice">
<summary>
Code of the branch office.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransOffice._LanguageID">
<summary>
Language in which the description is indicated
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransOffice._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransOffice._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransOffice._Description">
<summary>
Description of the code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransOffice._ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransOffice._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Common.DataAccess.TransOffice._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransOffice.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>true if the object is loaded from database; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransOffice.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransOffice.IsDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
 <value>true if the object is delete masked; otherwise, false.</value>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransOffice.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransOffice.UserCompany">
<summary>
Code that identifies the user company owner of the information. (CompanyID).
</summary>
<remarks>Datasource is 'TransOffice.CompanyID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransOffice.BranchOffice">
<summary>
Code of the branch office. (Office).
</summary>
<remarks>Datasource is 'TransOffice.Office'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransOffice.LanguageID">
<summary>
Language in which the description is indicated
</summary>
<remarks>Datasource is 'TransOffice.LanguageID'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransOffice.CreationDate">
<summary>
Computer date when the record is created.
</summary>
<remarks>Datasource is 'TransOffice.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransOffice.CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
<remarks>Datasource is 'TransOffice.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransOffice.Description">
<summary>
Description of the code.
</summary>
<remarks>Datasource is 'TransOffice.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransOffice.ShortDescription">
<summary>
Abbreviated description of the code.
</summary>
<remarks>Datasource is 'TransOffice.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransOffice.UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
<remarks>Datasource is 'TransOffice.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Common.DataAccess.TransOffice.UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
<remarks>Datasource is 'TransOffice.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransOffice.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransOffice.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransOffice.SynchronizeChildren(System.String,System.DateTime,System.Data.Common.DbConnection)">
 <summary>
 pending...
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
</member>
<member name="T:InMotionGIT.Common.DataAccess.TransOfficeCollection">
 <summary>
 Collection for TransOffice class
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransOfficeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransOfficeCollection.AddTransOffice">
 <summary>
 Add an instance of class 'TransOffice' in the TransOfficeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransOfficeCollection.Synchronize(System.String,System.DateTime)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Common.DataAccess.TransOfficeCollection.Synchronize(System.String,System.DateTime,System.Data.Common.DbConnection,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)">
 <summary>
 Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.
 </summary>
 <param name="auditUserIdentify">Code of the user creating or updating the information.</param>
 <param name="atDate">Date of effect of the process used by the historical tables.</param>
 <param name="currentConnection">missing.</param>
 <param name="isParentNew">missing.</param>
 <param name="isParentDeletedMark">missing.</param>
 <returns>true if successful synchronization; otherwise, false.</returns>
</member>
</members>
</doc>
