<?xml version="1.0"?>
<doc>
<assembly>
<name>
InMotionGIT.Underwriting.Contracts
</name>
</assembly>
<members>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumAttachmentChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumCaseHistoryChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumCommunicationChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumGuideChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRequirementChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRoleInCaseChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRuleAlarmsChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRuleRestrictionsChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumStageCaseRoleChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabAlarmTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabCurrencyChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabDebitOrCreditTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabDecisionTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabDegreeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabDiscountOrExtraPremiumChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabEntryTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabExclusionPeriodTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabExclusionTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabGenderChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabGuideStatusChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabGuideTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabIllnessTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabLocationCaseChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabManualOrAutomaticTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabPayableByTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabProcessTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabQuestionsFromRequirementChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabRejectionReasonChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabRequirementStatusTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabRequirementTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabRequirementTypeByRoleChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabRestrictionTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabRiskClassTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabRoleTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabStageCaseChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabUnderwritingAreaTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabUnderwritingCaseSTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabUnderwritingCaseTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabUnderwritingRuleChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTabUnderwritingRuleSTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransAlarmTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransCurrencyChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransDebitOrCreditTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransDecisionTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransDegreeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransDiscountOrExtraPremiumChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransEntryTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransExclusionPeriodTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransExclusionTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransGenderChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransGuideStatusChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransGuideTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransIllnessTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransLocationCaseChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransManualOrAutomaticTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransPayableByTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransProcessTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransQuestionsFromRequirementChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransRejectionReasonChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransRequirementStatusTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransRequirementTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransRestrictionTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransRiskClassTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransRoleTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransStageCaseChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransUnderwritingAreaTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransUnderwritingCaseSTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransUnderwritingCaseTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransUnderwritingRuleChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumTransUnderwritingRuleSTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingCaseChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingCaseGuideChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingCaseLockedChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingCaseRiskChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingRuleChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumAlarmType">
 <summary>
 Este enum guarda los tipos de alarma, en orden de prioridad en que deben ser aplicadas.
 </summary>
 <remarks>Si se van a agregar o modificar tipos de alarma, debe tenerse en cuenta el orden de prioridad de aplicación.</remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumAlarmType.None">
 <summary>
 Sin alarma
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumAlarmType.NoAlarm">
 <summary>
 Sin alarma
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumAlarmType.Decline">
 <summary>
 Declinar automáticamente
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumAlarmType.GoToCommittee">
 <summary>
 Delegar suscripción en comité
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumAlarmType.GoToManualUnderwriting">
 <summary>
 Delegar suscripción en un ser humano
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumAlarmType.AddFlatExtraPremium">
 <summary>
 Agregar flat extra premium
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumAlarmType.AddExclusion">
 <summary>
 Agregar exclusion
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumAlarmType.AddText">
 <summary>
 Agregar texto a hoja de suscripción
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumAlarmType.InsuredAmountLimit">
 <summary>
 Límite de suma asegurada
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumDebitOrCredit.None">
 <summary>
 Ni débito ni crédito
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumDebitOrCredit.Debit">
 <summary>
 El objeto es un débito (aumenta probabilidades de muerte)
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumDebitOrCredit.Credit">
 <summary>
 El objeto es un crédito (disminuye probabilidades de muerte)
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumDecision.Pending">
 <summary>
 Decisión aún pendiente
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumDecision.Declined">
 <summary>
 Rechazado
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumDecision.Approved">
 <summary>
 Aprobado sin cambios
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumDecision.ApprovedWithChanges">
 <summary>
 Aprobado con cambios
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumDecision.RequiresManualEvaluation">
 <summary>
 Requiere revisión manual
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.None">
 <summary>
 Ninguno
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.CaseCreated">
 <summary>
 Creación del caso
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.ApplicationReceived">
 <summary>
 Solicitud recibida
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.RequirementRequested">
 <summary>
 Requerimiento solicitado
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.RequirementReceived">
 <summary>
 Requerimiento recibido
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.ManualRevision">
 <summary>
 Revisión manual
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.CaseVoided">
 <summary>
 Caso anulado
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.CaseClosed">
 <summary>
 Caso cerrado
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.TextAdded">
 <summary>
 Texto agregado para mostrar al suscriptor
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.EditionCase">
 <summary>
 Edición del caso
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.EditingCanceled">
 <summary>
 Edición cancelada
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.RequirementChangeStatus">
 <summary>
 Cambio de estado del requerimiento
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.RiskInformationModified">
 <summary>
 Información del riesgo modificada
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.CaseAccepted">
 <summary>
 Caso aceptado
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.CaseDeclined">
 <summary>
 Caso rechazado
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.CaseReopen">
 <summary>
 Caso reabierto
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.UpdatedStage">
 <summary>
 Etapa Actualizada
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.UpdatedRiskClassification">
 <summary>
 Caso reabierto
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.ApplyRule">
 <summary>
 Regla Manual añadida/Actualizada
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumEntryType.DeletedApplyRule">
 <summary>
 Regla Manual eliminada
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumManualOrAutomatic.Automatic">
 <summary>
 La regla fue aplicada automáticamente
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumManualOrAutomatic.Manual">
 <summary>
 La regla fue aplicada manualmente
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Enumerations.EnumPayableBy">
 <summary>
 Posibles valores de quien debe pagar un requerimiento.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumPayableBy.Client">
 <summary>
 El requerimiento será pagado por el cliente
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumPayableBy.Carrier">
 <summary>
 El requerimiento será pagado por la compañía de seguros
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumPayableBy.Producer">
 <summary>
 El requerimiento será pagado por el productor
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumProcessType.None">
 <summary>
 No hay tipo de proceso
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumProcessType.Automatic">
 <summary>
 The requirement will be processed by an automatic workflow
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumProcessType.Manual">
 <summary>
 The requirement will be processed by a human being
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumProcessType.Hybrid">
 <summary>
 The requirement will be first processed by a workflow then by a human being
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRequirementStatus.Needed">
 <summary>
 Se necesita, pero no se ha pedido aún
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRequirementStatus.Requested">
 <summary>
 Pedido al responsable
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRequirementStatus.Received">
 <summary>
 Recibido, no procesado aún
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRequirementStatus.Processed">
 <summary>
 Procesado
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRequirementStatus.Void">
 <summary>
 Anulado.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRequirementStatus.Rejected">
 <summary>
 Rechazado, debe ser solicitado de nuevo
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRequirementStatus.Review">
 <summary>
 Requiere revisión
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRequirementStatus.PendingAcceptance">
 <summary>
 Requiere revisión
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRequirementStatus.Accepted">
 <summary>
 Aceptado.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRequirementStatus.Returned">
 <summary>
 Retornado.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRequirementStatus.Scheduled">
 <summary>
 Programado.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRequirementStatus.Unrealized">
 <summary>
 No realizado.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRestrictionType.Exclusion">
 <summary>
 Enfermedad excluida
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRestrictionType.FlatExtraPremium">
 <summary>
 Flat extra premium
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumRestrictionType.MaximumSumInsured">
 <summary>
 Máxima suma asegurada
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingArea.Medical">
 <summary>
 Área de suscripción médica (salud)
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingArea.Financial">
 <summary>
 Área de suscripción financiera
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingArea.PersonalRisks">
 <summary>
 Área de suscripción de riesgos personales (hobbies, trabajos peligrosos)
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingArea.Mixed">
 <summary>
 Varias áreas combinadas
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingArea.Other">
 <summary>
 Otras áreas de suscripción
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingCaseStatus.MissingRequirements">
 <summary>
 En proceso de recibir requerimientos
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingCaseStatus.Decided">
 <summary>
 Decisión tomada
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingCaseStatus.DelegatedUnderwriter">
 <summary>
 Decisión delegada en un ser humano
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingCaseStatus.Void">
 <summary>
 Caso anulado
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingCaseStatus.AllRequirementsReceived">
 <summary>
 Todos los requerimientos han sido recibidos, se puede evaluar el caso.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingCaseStatus.DelegatedCommittee">
 <summary>
 Decisión delegada en un comité
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingCaseStatus.EnteredThroughInterface">
 <summary>
 Entro a través de la interfaz
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingCaseStatus.Consultation">
 <summary>
 Sólo Consulta
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingRuleStatus.Valid">
 <summary>
 La regla es válida
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingRuleStatus.Void">
 <summary>
 La regla ha sido anulada
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumUnderwritingRuleStatus.Overridden">
 <summary>
 La regla ha sido sustituida
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumWorkFlowStatus.InProgress">
 <summary>
 Se encuentra en ejecución.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Enumerations.EnumWorkFlowStatus.Completed">
 <summary>
 Se culmino el flujo de trabajo.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Attachment">
 <summary>
 Underwriting case attachments.
 </summary>
<remarks>Data-source is 'Attachment'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.CreateNewAttachment">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._UnderwritingCaseID">
<summary>
Identification of the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._RequirementID">
<summary>
Identification requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._AttachmentId">
<summary>
Identification attachmen.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._FileName">
<summary>
Original file name.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._FileDescription">
<summary>
File description.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._UploadedDate">
<summary>
File upload date.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Attachment._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.UnderwritingCaseID">
<summary>
Identification of the subscription case..
</summary>
<remarks>Data-source is 'Attachment.UnderwritingCaseID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.RequirementID">
<summary>
Identification requirement..
</summary>
<remarks>Data-source is 'Attachment.RequirementID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.AttachmentId">
<summary>
Identification attachmen..
</summary>
<remarks>Data-source is 'Attachment.AttachmentId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.FileName">
<summary>
Original file name..
</summary>
<remarks>Data-source is 'Attachment.FileName'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.FileDescription">
<summary>
File description..
</summary>
<remarks>Data-source is 'Attachment.FileDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.UploadedDate">
<summary>
File upload date..
</summary>
<remarks>Data-source is 'Attachment.UploadedDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'Attachment.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'Attachment.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'Attachment.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Attachment.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'Attachment.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.Compare(InMotionGIT.Underwriting.Contracts.Attachment,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="AttachmentItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Attachment.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.AttachmentCollection">
 <summary>
 Collection for Attachment class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.AttachmentCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.AttachmentCollection.AddAttachment">
 <summary>
 Add an instance of class 'Attachment' in the AttachmentCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.AttachmentCollection.Compare(InMotionGIT.Underwriting.Contracts.AttachmentCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.AttachmentCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.AttachmentCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.AttachmentCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.CaseHistory">
 <summary>
 Underwriting case history.
 </summary>
<remarks>Data-source is 'CaseHistory'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.CreateNewCaseHistory">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._UnderwritingCaseID">
<summary>
Identification of the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._CaseHistoryId">
<summary>
Gets or sets the primary Case History id.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._EntryType">
<summary>
Subscription type of activity.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._EntryDate">
<summary>
Date of subscription activity.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._AlarmType">
<summary>
Alarm type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._ManualOrAutomatic">
<summary>
Indicator of whether the activity is manual or automatic.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._Remarks">
<summary>
Remarks
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._RequirementType">
<summary>
Type of Requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._StatusAfter">
<summary>
Status of the case after activity.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._Underwriter">
<summary>
Subscriber code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._RequirementID">
<summary>
Identification requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._Stage">
<summary>
Stage of the case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.CaseHistory._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.UnderwritingCaseID">
<summary>
Identification of the subscription case..
</summary>
<remarks>Data-source is 'CaseHistory.UnderwritingCaseID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.CaseHistoryId">
<summary>
Gets or sets the primary Case History id..
</summary>
<remarks>Data-source is 'CaseHistory.CaseHistoryId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.EntryType">
<summary>
Subscription type of activity..
</summary>
<remarks>Data-source is 'CaseHistory.EntryType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.EntryTypeEnum">
<summary>
Subscription type of activity.
</summary>
<remarks>This property use a enumeration based on property 'EntryType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.EntryTypeEnumText">
<summary>
Subscription type of activity.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.EntryDate">
<summary>
Date of subscription activity..
</summary>
<remarks>Data-source is 'CaseHistory.EntryDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.AlarmType">
<summary>
Alarm type..
</summary>
<remarks>Data-source is 'CaseHistory.AlarmType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.AlarmTypeEnum">
<summary>
Alarm type.
</summary>
<remarks>This property use a enumeration based on property 'AlarmType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.AlarmTypeEnumText">
<summary>
Alarm type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.ManualOrAutomatic">
<summary>
Indicator of whether the activity is manual or automatic..
</summary>
<remarks>Data-source is 'CaseHistory.ManualOrAutomatic'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.ManualOrAutomaticEnum">
<summary>
Indicator of whether the activity is manual or automatic.
</summary>
<remarks>This property use a enumeration based on property 'ManualOrAutomatic'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.ManualOrAutomaticEnumText">
<summary>
Indicator of whether the activity is manual or automatic.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.Remarks">
<summary>
Remarks.
</summary>
<remarks>Data-source is 'CaseHistory.Remarks'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.RequirementType">
<summary>
Type of Requirement..
</summary>
<remarks>Data-source is 'CaseHistory.RequirementType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.RequirementTypeEnum">
<summary>
Type of Requirement.
</summary>
<remarks>This property use a enumeration based on property 'RequirementType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.RequirementTypeEnumText">
<summary>
Type of Requirement.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.StatusAfter">
<summary>
Status of the case after activity..
</summary>
<remarks>Data-source is 'CaseHistory.StatusAfter'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.StatusAfterEnum">
<summary>
Status of the case after activity.
</summary>
<remarks>This property use a enumeration based on property 'StatusAfter'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.StatusAfterEnumText">
<summary>
Status of the case after activity.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.Underwriter">
<summary>
Subscriber code..
</summary>
<remarks>Data-source is 'CaseHistory.Underwriter'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.RequirementID">
<summary>
Identification requirement..
</summary>
<remarks>Data-source is 'CaseHistory.RequirementID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.Stage">
<summary>
Stage of the case..
</summary>
<remarks>Data-source is 'CaseHistory.Stage'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'CaseHistory.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'CaseHistory.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'CaseHistory.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'CaseHistory.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.Compare(InMotionGIT.Underwriting.Contracts.CaseHistory,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="CaseHistoryItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistory.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.EntryTypeDescription">
 <summary>
 Subscription type of activity.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabEntryType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.AlarmTypeDescription">
 <summary>
 Alarm type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabAlarmType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.ManualOrAutomaticDescription">
 <summary>
 Indicator of whether the activity is manual or automatic.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabManualOrAutomaticType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.RequirementTypeDescription">
 <summary>
 Type of Requirement.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRequirementType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.StageDescription">
 <summary>
 Stage of the case.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabStageCase'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.EntryTypeByLanguage">
 <summary>Entry Type Description.</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.RequirementTypeByLanguage">
 <summary>Requirement Type Description.</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.ManualOrAutomaticByLanguage">
 <summary>Manual Or Automatic Description.</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.AlarmTypeByLanguage">
 <summary>Alarm Type Description.</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.StatusTypeByLanguage">
 <summary>Status Type Description.</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.StageTypeByLanguage">
 <summary>Stage Type Description.</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistory.UnderwriterName">
 <summary>
 Subscriber name.
 </summary>
 <returns></returns>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.CaseHistoryCollection">
 <summary>
 Collection for CaseHistory class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistoryCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistoryCollection.AddCaseHistory">
 <summary>
 Add an instance of class 'CaseHistory' in the CaseHistoryCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistoryCollection.Compare(InMotionGIT.Underwriting.Contracts.CaseHistoryCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CaseHistoryCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistoryCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CaseHistoryCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Communication">
 <summary>
 Underwriting case communications.
 </summary>
<remarks>Data-source is 'Communication'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.CreateNewCommunication">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._UnderwritingCaseID">
<summary>
Identification of the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._EntryId">
<summary>
Entry Id.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._RequirementID">
<summary>
Identification requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._EntryType">
<summary>
Entry Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._EntryDate">
<summary>
Entry Date.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._Role">
<summary>
Role of the client in the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._ClientId">
<summary>
Code of the client.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._PhysicalMail">
<summary>
Physical mail
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._JobId">
<summary>
Job Id.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._Description">
<summary>
Description.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Communication._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.UnderwritingCaseID">
<summary>
Identification of the subscription case..
</summary>
<remarks>Data-source is 'Communication.UnderwritingCaseID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.EntryId">
<summary>
Entry Id..
</summary>
<remarks>Data-source is 'Communication.EntryId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.RequirementID">
<summary>
Identification requirement..
</summary>
<remarks>Data-source is 'Communication.RequirementID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.EntryType">
<summary>
Entry Type..
</summary>
<remarks>Data-source is 'Communication.EntryType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.EntryTypeEnum">
<summary>
Entry Type.
</summary>
<remarks>This property use a enumeration based on property 'EntryType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.EntryTypeEnumText">
<summary>
Entry Type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.EntryDate">
<summary>
Entry Date..
</summary>
<remarks>Data-source is 'Communication.EntryDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.Role">
<summary>
Role of the client in the subscription case..
</summary>
<remarks>Data-source is 'Communication.Role'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.RoleEnum">
<summary>
Role of the client in the subscription case.
</summary>
<remarks>This property use a enumeration based on property 'Role'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.RoleEnumText">
<summary>
Role of the client in the subscription case.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.ClientId">
<summary>
Code of the client..
</summary>
<remarks>Data-source is 'Communication.ClientId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.PhysicalMail">
<summary>
Physical mail.
</summary>
<remarks>Data-source is 'Communication.PhysicalMail'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.JobId">
<summary>
Job Id..
</summary>
<remarks>Data-source is 'Communication.JobId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.Description">
<summary>
Description..
</summary>
<remarks>Data-source is 'Communication.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'Communication.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'Communication.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'Communication.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'Communication.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.Compare(InMotionGIT.Underwriting.Contracts.Communication,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="CommunicationItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Communication.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.EntryTypeDescription">
 <summary>
 Entry Type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabEntryType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Communication.RoleDescription">
 <summary>
 Role of the client in the subscription case.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRoleType'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.CommunicationCollection">
 <summary>
 Collection for Communication class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CommunicationCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CommunicationCollection.AddCommunication">
 <summary>
 Add an instance of class 'Communication' in the CommunicationCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CommunicationCollection.Compare(InMotionGIT.Underwriting.Contracts.CommunicationCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.CommunicationCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CommunicationCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.CommunicationCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Guide">
 <summary>
 Document delivery guides.
 </summary>
<remarks>Data-source is 'Guide'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.CreateNewGuide">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._GuideId">
<summary>
Guide Id
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._Codeofguidetype">
<summary>
Code of guide type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._Guidestatuscode">
<summary>
Guide status code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._CurrencyCode">
<summary>
Code of the cuerrency.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._FaceAmount">
<summary>
Face Amount of the guide.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._Premium">
<summary>
Premium Amount of the guide.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._GuideReceptionDate">
<summary>
Guide Reception Date.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._GuideReceptionUsercode">
<summary>
Guide Reception Usercode.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Guide._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.GuideId">
<summary>
Guide Id.
</summary>
<remarks>Data-source is 'Guide.GuideId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.Codeofguidetype">
<summary>
Code of guide type. (GuideType)..
</summary>
<remarks>Data-source is 'Guide.GuideType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.Guidestatuscode">
<summary>
Guide status code. (GuideStatus)..
</summary>
<remarks>Data-source is 'Guide.GuideStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.CurrencyCode">
<summary>
Code of the cuerrency..
</summary>
<remarks>Data-source is 'Guide.CurrencyCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.FaceAmount">
<summary>
Face Amount of the guide..
</summary>
<remarks>Data-source is 'Guide.FaceAmount'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.Premium">
<summary>
Premium Amount of the guide..
</summary>
<remarks>Data-source is 'Guide.Premium'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.GuideReceptionDate">
<summary>
Guide Reception Date..
</summary>
<remarks>Data-source is 'Guide.GuideReceptionDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.GuideReceptionUsercode">
<summary>
Guide Reception Usercode..
</summary>
<remarks>Data-source is 'Guide.GuideReceptionUsercode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'Guide.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'Guide.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'Guide.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'Guide.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.Compare(InMotionGIT.Underwriting.Contracts.Guide,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="GuideItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Guide.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.CodeofguidetypeDescription">
 <summary>
 Code of guide type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabGuideType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.GuidestatuscodeDescription">
 <summary>
 Guide status code.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabGuideStatus'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Guide.CurrencyCodeDescription">
 <summary>
 Code of the cuerrency.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabCurrency'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.GuideCollection">
 <summary>
 Collection for Guide class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.GuideCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.GuideCollection.AddGuide">
 <summary>
 Add an instance of class 'Guide' in the GuideCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.GuideCollection.Compare(InMotionGIT.Underwriting.Contracts.GuideCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.GuideCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.GuideCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.GuideCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Requirement">
 <summary>
 Underwriting case requirements.
 </summary>
<remarks>Data-source is 'Requirement'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.CreateNewRequirement">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._UnderwritingCaseID">
<summary>
Identification of the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._RequirementID">
<summary>
Identification requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._RequirementDate">
<summary>
Date of application.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._RequirementType">
<summary>
Type of Requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._Description">
<summary>
Description of requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._ReceptionDate">
<summary>
Date Received.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._TotalDebits">
<summary>
Total amount of debts associated with the requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._TotalCredits">
<summary>
Total amount of credits associated with the requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._Balance">
<summary>
Result of total total debts minus total debts
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._AcordRequirementCode">
<summary>
Code requirement according Acord.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._AlarmType">
<summary>
Alarm type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._ClientId">
<summary>
Code of the client.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._Commentary">
<summary>
Commentary.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._Link">
<summary>
URL of the related form with the requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._ManualPoints">
<summary>
Indicates the number of defined points manually.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._ProcessType">
<summary>
Process type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._ProviderId">
<summary>
Provider.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._RequestedTo">
<summary>
Person or entity responsible for delivering this requirement. It must be registered as a role related to the case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._UnderwritingArea">
<summary>
Subscription area (medical, financial, etc.).
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._ManualOrAutomatic">
<summary>
Indicator of whether the source of the information is manually or automatically.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._Cost">
<summary>
Cost requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._CostDueAmount">
<summary>
Amount outstanding of the request.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._Payer">
<summary>
It indicates who should pay the cost of the requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._PaymentDate">
<summary>
Date of payment of the cost.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._WorkflowId">
<summary>
Identification workflow that created the requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._Status">
<summary>
State of the requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._Attachments">
<summary>
Underwriting case attachments.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.Requirement._UnderwritingRules">
<summary>
Underwriting case rules.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.UnderwritingCaseID">
<summary>
Identification of the subscription case..
</summary>
<remarks>Data-source is 'Requirement.UnderwritingCaseID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.RequirementID">
<summary>
Identification requirement..
</summary>
<remarks>Data-source is 'Requirement.RequirementID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.RequirementDate">
<summary>
Date of application..
</summary>
<remarks>Data-source is 'Requirement.RequirementDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.RequirementType">
<summary>
Type of Requirement..
</summary>
<remarks>Data-source is 'Requirement.RequirementType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.RequirementTypeEnum">
<summary>
Type of Requirement.
</summary>
<remarks>This property use a enumeration based on property 'RequirementType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.RequirementTypeEnumText">
<summary>
Type of Requirement.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.Description">
<summary>
Description of requirement..
</summary>
<remarks>Data-source is 'Requirement.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.ReceptionDate">
<summary>
Date Received..
</summary>
<remarks>Data-source is 'Requirement.ReceptionDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.TotalDebits">
<summary>
Total amount of debts associated with the requirement..
</summary>
<remarks>Data-source is 'Requirement.TotalDebits'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.TotalCredits">
<summary>
Total amount of credits associated with the requirement..
</summary>
<remarks>Data-source is 'Requirement.TotalCredits'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.Balance">
<summary>
Result of total total debts minus total debts.
</summary>
<remarks>Data-source is 'Requirement.Balance'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.AcordRequirementCode">
<summary>
Code requirement according Acord..
</summary>
<remarks>Data-source is 'Requirement.AcordRequirementCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.AlarmType">
<summary>
Alarm type..
</summary>
<remarks>Data-source is 'Requirement.AlarmType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.AlarmTypeEnum">
<summary>
Alarm type.
</summary>
<remarks>This property use a enumeration based on property 'AlarmType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.AlarmTypeEnumText">
<summary>
Alarm type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.ClientId">
<summary>
Code of the client..
</summary>
<remarks>Data-source is 'Requirement.ClientId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.Commentary">
<summary>
Commentary..
</summary>
<remarks>Data-source is 'Requirement.Commentary'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.Link">
<summary>
URL of the related form with the requirement..
</summary>
<remarks>Data-source is 'Requirement.Link'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.ManualPoints">
<summary>
Indicates the number of defined points manually..
</summary>
<remarks>Data-source is 'Requirement.ManualPoints'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.ProcessType">
<summary>
Process type..
</summary>
<remarks>Data-source is 'Requirement.ProcessType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.ProcessTypeEnum">
<summary>
Process type.
</summary>
<remarks>This property use a enumeration based on property 'ProcessType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.ProcessTypeEnumText">
<summary>
Process type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.ProviderId">
<summary>
Provider..
</summary>
<remarks>Data-source is 'Requirement.ProviderId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.RequestedTo">
<summary>
Person or entity responsible for delivering this requirement. It must be registered as a role related to the case..
</summary>
<remarks>Data-source is 'Requirement.RequestedTo'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.RequestedToEnum">
<summary>
Person or entity responsible for delivering this requirement. It must be registered as a role related to the case.
</summary>
<remarks>This property use a enumeration based on property 'RequestedTo'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.RequestedToEnumText">
<summary>
Person or entity responsible for delivering this requirement. It must be registered as a role related to the case.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.UnderwritingArea">
<summary>
Subscription area (medical, financial, etc.)..
</summary>
<remarks>Data-source is 'Requirement.UnderwritingArea'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.UnderwritingAreaEnum">
<summary>
Subscription area (medical, financial, etc.).
</summary>
<remarks>This property use a enumeration based on property 'UnderwritingArea'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.UnderwritingAreaEnumText">
<summary>
Subscription area (medical, financial, etc.).
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.ManualOrAutomatic">
<summary>
Indicator of whether the source of the information is manually or automatically..
</summary>
<remarks>Data-source is 'Requirement.ManualOrAutomatic'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.ManualOrAutomaticEnum">
<summary>
Indicator of whether the source of the information is manually or automatically.
</summary>
<remarks>This property use a enumeration based on property 'ManualOrAutomatic'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.ManualOrAutomaticEnumText">
<summary>
Indicator of whether the source of the information is manually or automatically.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.Cost">
<summary>
Cost requirement..
</summary>
<remarks>Data-source is 'Requirement.Cost'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.CostDueAmount">
<summary>
Amount outstanding of the request..
</summary>
<remarks>Data-source is 'Requirement.CostDueAmount'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.Payer">
<summary>
It indicates who should pay the cost of the requirement..
</summary>
<remarks>Data-source is 'Requirement.Payer'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.PayerEnum">
<summary>
It indicates who should pay the cost of the requirement.
</summary>
<remarks>This property use a enumeration based on property 'Payer'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.PayerEnumText">
<summary>
It indicates who should pay the cost of the requirement.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.PaymentDate">
<summary>
Date of payment of the cost..
</summary>
<remarks>Data-source is 'Requirement.PaymentDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.WorkflowId">
<summary>
Identification workflow that created the requirement..
</summary>
<remarks>Data-source is 'Requirement.WorkflowId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.Status">
<summary>
State of the requirement..
</summary>
<remarks>Data-source is 'Requirement.Status'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'Requirement.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'Requirement.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'Requirement.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'Requirement.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.NewAttachmentsInstance">
<summary>
Initializes the 'Attachments' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.NewAttachmentItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Attachments', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'Attachment' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.Attachments">
<summary>
Underwriting case attachments. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.NewUnderwritingRulesInstance">
<summary>
Initializes the 'UnderwritingRules' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.NewUnderwritingRuleItem(System.Boolean)">
<summary>
Add a new item to the collection of 'UnderwritingRules', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'UnderwritingRule' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.UnderwritingRules">
<summary>
Underwriting case rules. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.Compare(InMotionGIT.Underwriting.Contracts.Requirement,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="RequirementItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.Requirement.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.RequirementTypeDescription">
 <summary>
 Type of Requirement.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRequirementType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.AlarmTypeDescription">
 <summary>
 Alarm type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabAlarmType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.ProcessTypeDescription">
 <summary>
 Process type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabProcessType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.UnderwritingAreaDescription">
 <summary>
 Subscription area (medical, financial, etc.).
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingAreaType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.ManualOrAutomaticDescription">
 <summary>
 Indicator of whether the source of the information is manually or automatically.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabManualOrAutomaticType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Requirement.StatusDescription">
 <summary>
 State of the requirement.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRequirementStatusType'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.RequirementCollection">
 <summary>
 Collection for Requirement class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RequirementCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RequirementCollection.AddRequirement">
 <summary>
 Add an instance of class 'Requirement' in the RequirementCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RequirementCollection.Compare(InMotionGIT.Underwriting.Contracts.RequirementCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RequirementCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RequirementCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RequirementCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.RoleInCase">
 <summary>
 Persons or companies related to underwriting case.
 </summary>
<remarks>Data-source is 'RoleInCase'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.CreateNewRoleInCase">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._UnderwritingCaseID">
<summary>
Identification of the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._Role">
<summary>
Role of the client in the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._ClientID">
<summary>
Code of the client.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._ClientName">
<summary>
Complete name of the client.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._CompleteAddress">
<summary>
Complete Address.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._PhoneNumber">
<summary>
Telephone number.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._BirthDate">
<summary>
Date of birth of the client.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._Gender">
<summary>
Gender of the client.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._Height">
<summary>
Height of the client.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._Weight">
<summary>
Weight of the client.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._SmokerIndicator">
<summary>
Smoker client indicator.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._Emailaddress">
<summary>
Email address.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._ManualOrAutomatic">
<summary>
Manual Or Automatic
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._CalculationDate">
<summary>
Calculation Date
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._AddressID">
<summary>
Access Key of The Address Record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._PhoneID">
<summary>
Unique key that identifies the phone.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._ExclusionDate">
<summary>
Role exclusion date
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RoleInCase._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.UnderwritingCaseID">
<summary>
Identification of the subscription case..
</summary>
<remarks>Data-source is 'RoleInCase.UnderwritingCaseID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.Role">
<summary>
Role of the client in the subscription case..
</summary>
<remarks>Data-source is 'RoleInCase.Role'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.RoleEnum">
<summary>
Role of the client in the subscription case.
</summary>
<remarks>This property use a enumeration based on property 'Role'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.RoleEnumText">
<summary>
Role of the client in the subscription case.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.ClientID">
<summary>
Code of the client..
</summary>
<remarks>Data-source is 'RoleInCase.ClientID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.ClientName">
<summary>
Complete name of the client..
</summary>
<remarks>Data-source is 'RoleInCase.ClientName'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.CompleteAddress">
<summary>
Complete Address..
</summary>
<remarks>Data-source is 'RoleInCase.CompleteAddress'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.PhoneNumber">
<summary>
Telephone number..
</summary>
<remarks>Data-source is 'RoleInCase.PhoneNumber'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.BirthDate">
<summary>
Date of birth of the client..
</summary>
<remarks>Data-source is 'RoleInCase.BirthDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.Gender">
<summary>
Gender of the client..
</summary>
<remarks>Data-source is 'RoleInCase.Gender'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.GenderEnum">
<summary>
Gender of the client.
</summary>
<remarks>This property use a enumeration based on property 'Gender'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.GenderEnumText">
<summary>
Gender of the client.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.Height">
<summary>
Height of the client..
</summary>
<remarks>Data-source is 'RoleInCase.Height'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.Weight">
<summary>
Weight of the client..
</summary>
<remarks>Data-source is 'RoleInCase.Weight'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.SmokerIndicator">
<summary>
Smoker client indicator..
</summary>
<remarks>Data-source is 'RoleInCase.SmokerIndicator'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.Emailaddress">
<summary>
Email address..
</summary>
<remarks>Data-source is 'RoleInCase.eMailAddress'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.ManualOrAutomatic">
<summary>
Manual Or Automatic.
</summary>
<remarks>Data-source is 'RoleInCase.ManualOrAutomatic'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.ManualOrAutomaticEnum">
<summary>
Manual Or Automatic
</summary>
<remarks>This property use a enumeration based on property 'ManualOrAutomatic'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.ManualOrAutomaticEnumText">
<summary>
Manual Or Automatic
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.CalculationDate">
<summary>
Calculation Date.
</summary>
<remarks>Data-source is 'RoleInCase.CalculationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.AddressID">
<summary>
Access Key of The Address Record..
</summary>
<remarks>Data-source is 'RoleInCase.AddressID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.PhoneID">
<summary>
Unique key that identifies the phone..
</summary>
<remarks>Data-source is 'RoleInCase.PhoneID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.ExclusionDate">
<summary>
Role exclusion date.
</summary>
<remarks>Data-source is 'RoleInCase.ExclusionDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'RoleInCase.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'RoleInCase.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'RoleInCase.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'RoleInCase.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.Compare(InMotionGIT.Underwriting.Contracts.RoleInCase,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="RoleInCaseItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.RoleDescription">
 <summary>
 Role of the client in the subscription case.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRoleType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.GenderDescription">
 <summary>
 Gender of the client.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabGender'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.ManualOrAutomaticDescription">
 <summary>
 Manual Or Automatic
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabManualOrAutomaticType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.Client">
 <summary>
 Clients information.
 </summary>
<remarks>Esta propiedad permite establecer la información del role desde el punto de vista del módulo de cliente</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.ActuarialAge">
<summary>
Age of the insured.
</summary>
<remarks>Datasource is 'Life.nAge'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.RequirePendingLinks">
 <summary>
 Lista de requerimiento pendiente para el rol del caso en forma de enlaces del tipo HTML.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCase.RequireTranslateLink">
 <summary>
 Lista de requerimientos pendiente para el rol del caso en forma de enlaces del tipo HTML, con descripcion en idioma español.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCase.GetActuarialAge(System.DateTime,System.DateTime)">
 <summary>
 Gets the client actuarial age
 </summary>
 <param name="birthDate">Sets the birth date</param>
 <param name="calculationDate">Sets the calculation date</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.RoleInCaseCollection">
 <summary>
 Collection for RoleInCase class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCaseCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCaseCollection.AddRoleInCase">
 <summary>
 Add an instance of class 'RoleInCase' in the RoleInCaseCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCaseCollection.Compare(InMotionGIT.Underwriting.Contracts.RoleInCaseCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RoleInCaseCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCaseCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RoleInCaseCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.RuleAlarms">
 <summary>
 RuleAlarms
 </summary>
<remarks>Data-source is 'RuleAlarms'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.CreateNewRuleAlarms">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._UnderwritingRuleId">
<summary>
Underwriting Rule Id.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._EffectiveDate">
<summary>
Date which from the record is valid.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._Product">
<summary>
Product
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._AlarmType">
<summary>
Alarm type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._CancellationDate">
<summary>
Date when the record is canceled.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._Decision">
<summary>
Code of the decision.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._DecisionComplement">
<summary>
Decision Complement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._Stage">
<summary>
Stage of the case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._Status">
<summary>
Code of the status
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._dEffecdateOld">
<summary>
pending
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleAlarms._RuleRestrictions">
<summary>
Rule restrictions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.UnderwritingRuleId">
<summary>
Underwriting Rule Id..
</summary>
<remarks>Data-source is 'RuleAlarms.UnderwritingRuleId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.EffectiveDate">
<summary>
Date which from the record is valid..
</summary>
<remarks>Data-source is 'RuleAlarms.EffectiveDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.LineOfBusiness">
<summary>
Code of the line of business..
</summary>
<remarks>Data-source is 'RuleAlarms.LineOfBusiness'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.Product">
<summary>
Product.
</summary>
<remarks>Data-source is 'RuleAlarms.Product'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.AlarmType">
<summary>
Alarm type..
</summary>
<remarks>Data-source is 'RuleAlarms.AlarmType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.CancellationDate">
<summary>
Date when the record is canceled..
</summary>
<remarks>Data-source is 'RuleAlarms.CancellationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.Decision">
<summary>
Code of the decision..
</summary>
<remarks>Data-source is 'RuleAlarms.Decision'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.DecisionComplement">
<summary>
Decision Complement..
</summary>
<remarks>Data-source is 'RuleAlarms.DecisionComplement'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.Stage">
<summary>
Stage of the case..
</summary>
<remarks>Data-source is 'RuleAlarms.Stage'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'RuleAlarms.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'RuleAlarms.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'RuleAlarms.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'RuleAlarms.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.Status">
<summary>
Code of the status.
</summary>
<remarks>Data-source is 'RuleAlarms.Status'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.NewRuleRestrictionsInstance">
<summary>
Initializes the 'RuleRestrictions' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.NewRuleRestrictionsItem(System.Boolean)">
<summary>
Add a new item to the collection of 'RuleRestrictions', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'RuleRestrictions' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.RuleRestrictions">
<summary>
Rule restrictions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.Compare(InMotionGIT.Underwriting.Contracts.RuleAlarms,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="RuleAlarmsItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarms.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.EffectiveDateDescription">
 <summary>
 Date which from the record is valid.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingRule'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.AlarmTypeDescription">
 <summary>
 Alarm type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabAlarmType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.DecisionDescription">
 <summary>
 Code of the decision.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabDecisionType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.StageDescription">
 <summary>
 Stage of the case.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabStageCase'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.StatusDescription">
 <summary>
 Code of the status
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingCaseSType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.ProductDescription">
<summary>
Product
</summary>
<remarks>Data source is 'BackOffice.ProductMaster.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarms.UpdateOnlyAssociatedRisk">
<summary>
Indicates if the rule only modify the associated risk..
</summary>
<remarks>Data-source is 'UnderwritingRule.UpdateOnlyAssociatedRisk'.</remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.RuleAlarmsCollection">
 <summary>
 Collection for RuleAlarms class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarmsCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarmsCollection.AddRuleAlarms">
 <summary>
 Add an instance of class 'RuleAlarms' in the RuleAlarmsCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarmsCollection.Compare(InMotionGIT.Underwriting.Contracts.RuleAlarmsCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleAlarmsCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarmsCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleAlarmsCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.RuleRestrictions">
 <summary>
 Rule restrictions.
 </summary>
<remarks>Data-source is 'RuleRestrictions'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.CreateNewRuleRestrictions">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._UnderwritingRuleId">
<summary>
Underwriting Rule Id.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._RecordEffectiveDate">
<summary>
Date which from the record is valid.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._Product">
<summary>
Product.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._AlarmType">
<summary>
Alarm type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._RestrictionId">
<summary>
Restriction Id.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._CancellationDate">
<summary>
Date when the record is canceled.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._RestrictionType">
<summary>
Restriction Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._ExclusionPeriodType">
<summary>
Exclusion Period Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._ExclusionType">
<summary>
Exclusion Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._ImpairmentCode">
<summary>
Code of the illness.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._ProductModule">
<summary>
Product Module
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._RoleCode">
<summary>
Code of the role.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._CurrencyCode">
<summary>
Code of the cuerrency.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._CoverageCode">
<summary>
Coverage Code
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._DOfFlatExtraPremiumDays">
<summary>
DO fF lat Extra Premium Days
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._DOfFlatExtraPremiumMonths">
<summary>
DO fF lat Extra Premium Months
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._DOfFlatExtraPremiumYears">
<summary>
DO fF lat Extra Premium Years
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._WaitingPeriodDays">
<summary>
Waiting period days.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._WaitingPeriodMonths">
<summary>
Waiting period months.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._WaitingPeriodYears">
<summary>
Waiting period years.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._MaximumInsuredAmount">
<summary>
Maximum Insured Amount
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._FlatExtraPremium">
<summary>
Flat Extra Premium
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._DiscountorExtraPremiumType">
<summary>
Discount or Extra Premium Type
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._Discountorextrapremiumcode">
<summary>
Discount or extra premium code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._RatingTable">
<summary>
Rating Table
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._ExtraPremiumPercentage">
<summary>
Extra Premium Percentage
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._InsuredAmountbyPolicy">
<summary>
Insured Amount by Policy
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._Cause">
<summary>
Cause or reason for exclusion of the illness.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._ExclusionClientID">
<summary>
Client ID excluded from the policy
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._XPremiumDiscountOnlyInsured">
<summary>
Indicates if the surcharge/discount applies for the insured
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._TypeofUnit">
<summary>
Indicates if the
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.RuleRestrictions._dEffecdateOld">
<summary>
pending
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.UnderwritingRuleId">
<summary>
Underwriting Rule Id..
</summary>
<remarks>Data-source is 'RuleRestrictions.UnderwritingRuleId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.RecordEffectiveDate">
<summary>
Date which from the record is valid. (EffectiveDate)..
</summary>
<remarks>Data-source is 'RuleRestrictions.EffectiveDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.LineOfBusiness">
<summary>
Code of the line of business..
</summary>
<remarks>Data-source is 'RuleRestrictions.LineOfBusiness'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.Product">
<summary>
Product..
</summary>
<remarks>Data-source is 'RuleRestrictions.Product'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.AlarmType">
<summary>
Alarm type..
</summary>
<remarks>Data-source is 'RuleRestrictions.AlarmType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.RestrictionId">
<summary>
Restriction Id..
</summary>
<remarks>Data-source is 'RuleRestrictions.RestrictionId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.CancellationDate">
<summary>
Date when the record is canceled..
</summary>
<remarks>Data-source is 'RuleRestrictions.CancellationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.RestrictionType">
<summary>
Restriction Type..
</summary>
<remarks>Data-source is 'RuleRestrictions.RestrictionType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.ExclusionPeriodType">
<summary>
Exclusion Period Type..
</summary>
<remarks>Data-source is 'RuleRestrictions.ExclusionPeriodType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.ExclusionType">
<summary>
Exclusion Type..
</summary>
<remarks>Data-source is 'RuleRestrictions.ExclusionType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.ImpairmentCode">
<summary>
Code of the illness..
</summary>
<remarks>Data-source is 'RuleRestrictions.ImpairmentCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.ProductModule">
<summary>
Product Module.
</summary>
<remarks>Data-source is 'RuleRestrictions.ProductModule'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.RoleCode">
<summary>
Code of the role..
</summary>
<remarks>Data-source is 'RuleRestrictions.RoleCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.CurrencyCode">
<summary>
Code of the cuerrency..
</summary>
<remarks>Data-source is 'RuleRestrictions.CurrencyCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.CoverageCode">
<summary>
Coverage Code.
</summary>
<remarks>Data-source is 'RuleRestrictions.CoverageCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.DOfFlatExtraPremiumDays">
<summary>
DO fF lat Extra Premium Days.
</summary>
<remarks>Data-source is 'RuleRestrictions.DOfFlatExtraPremiumDays'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.DOfFlatExtraPremiumMonths">
<summary>
DO fF lat Extra Premium Months.
</summary>
<remarks>Data-source is 'RuleRestrictions.DOfFlatExtraPremiumMonths'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.DOfFlatExtraPremiumYears">
<summary>
DO fF lat Extra Premium Years.
</summary>
<remarks>Data-source is 'RuleRestrictions.DOfFlatExtraPremiumYears'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.WaitingPeriodDays">
<summary>
Waiting period days..
</summary>
<remarks>Data-source is 'RuleRestrictions.WaitingPeriodDays'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.WaitingPeriodMonths">
<summary>
Waiting period months..
</summary>
<remarks>Data-source is 'RuleRestrictions.WaitingPeriodMonths'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.WaitingPeriodYears">
<summary>
Waiting period years..
</summary>
<remarks>Data-source is 'RuleRestrictions.WaitingPeriodYears'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.MaximumInsuredAmount">
<summary>
Maximum Insured Amount.
</summary>
<remarks>Data-source is 'RuleRestrictions.MaximumInsuredAmount'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.FlatExtraPremium">
<summary>
Flat Extra Premium.
</summary>
<remarks>Data-source is 'RuleRestrictions.FlatExtraPremium'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.DiscountorExtraPremiumType">
<summary>
Discount or Extra Premium Type.
</summary>
<remarks>Data-source is 'RuleRestrictions.DiscountOrExtraPremiumType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.Discountorextrapremiumcode">
<summary>
Discount or extra premium code..
</summary>
<remarks>Data-source is 'RuleRestrictions.DiscountOrExtraPremiumCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.RatingTable">
<summary>
Rating Table.
</summary>
<remarks>Data-source is 'RuleRestrictions.RatingTable'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.ExtraPremiumPercentage">
<summary>
Extra Premium Percentage.
</summary>
<remarks>Data-source is 'RuleRestrictions.ExtraPremiumPercentage'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.InsuredAmountbyPolicy">
<summary>
Insured Amount by Policy.
</summary>
<remarks>Data-source is 'RuleRestrictions.InsuredAmountByPolicy'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.Cause">
<summary>
Cause or reason for exclusion of the illness. (ExclusionCause)..
</summary>
<remarks>Data-source is 'RuleRestrictions.ExclusionCause'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.ExclusionClientID">
<summary>
Client ID excluded from the policy.
</summary>
<remarks>Data-source is 'RuleRestrictions.ExclusionClientID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'RuleRestrictions.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'RuleRestrictions.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'RuleRestrictions.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'RuleRestrictions.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.XPremiumDiscountOnlyInsured">
<summary>
Indicates if the surcharge/discount applies for the insured.
</summary>
<remarks>Data-source is 'RuleRestrictions.XPremiumDiscountOnlyInsured'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.TypeofUnit">
<summary>
Indicates if the.
</summary>
<remarks>Data-source is 'RuleRestrictions.TypeOfUnit'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.Compare(InMotionGIT.Underwriting.Contracts.RuleRestrictions,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="RuleRestrictionsItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictions.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.RestrictionTypeDescription">
 <summary>
 Restriction Type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRestrictionType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.ExclusionPeriodTypeDescription">
 <summary>
 Exclusion Period Type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabExclusionPeriodType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.ExclusionTypeDescription">
 <summary>
 Exclusion Type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabExclusionType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.ImpairmentCodeDescription">
 <summary>
 Code of the illness.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabIllnessType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.RoleCodeDescription">
 <summary>
 Code of the role.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRoleType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.CurrencyCodeDescription">
 <summary>
 Code of the cuerrency.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabCurrency'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.DiscountorExtraPremiumTypeDescription">
 <summary>
 Discount or Extra Premium Type
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabDiscountOrExtraPremium'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.CauseDescription">
<summary>
Cause or reason for exclusion of the illness. (ExclusionCause).
</summary>
<remarks>Data source is 'BackOffice..'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.DiscountOrExtraPremiumDescription">
<summary>
Discount or extra premium code.
</summary>
<remarks>Data source is 'BackOffice..'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.ProductDescription">
<summary>
Product
</summary>
<remarks>Data source is 'BackOffice.ProductMaster.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.ProductModuleDescription">
<summary>
Product Module
</summary>
<remarks>Data source is 'BackOffice.ProductModule.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.CoverageDescription">
<summary>
Coverage Code
</summary>
<remarks>Data source is 'BackOffice.LifeGenericCoverage.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.RatingTableDescription">
<summary>
Rating Table Description
</summary>
<remarks>Rating Table Description.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.ExclusionClientName">
<summary>
Exclude Client Name
</summary>
<remarks>Rating Table Description.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.RequirementId">
 <summary>
 Gets the Extra Premium Description in a given language
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictions.RequirementType">
 <summary>
 Gets the Extra Premium Description in a given language
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.RuleRestrictionsCollection">
 <summary>
 Collection for RuleRestrictions class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictionsCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictionsCollection.AddRuleRestrictions">
 <summary>
 Add an instance of class 'RuleRestrictions' in the RuleRestrictionsCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictionsCollection.Compare(InMotionGIT.Underwriting.Contracts.RuleRestrictionsCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.RuleRestrictionsCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictionsCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.RuleRestrictionsCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.StageCaseRole">
 <summary>
 Table containing the relationship of the stages to the roles
 </summary>
<remarks>Data-source is 'StageCaseRole'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.CreateNewStageCaseRole">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.StageCaseRole._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.StageCaseRole._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.StageCaseRole._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.StageCaseRole._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.StageCaseRole._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.StageCaseRole._Stage">
<summary>
Stage of the Case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.StageCaseRole._RoleCode">
<summary>
Code of the role.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.StageCaseRole._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.StageCaseRole._CreatorUserCode">
<summary>
User code that creates the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.StageCaseRole._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.StageCaseRole._UpdateUserCode">
<summary>
User code that creates or updates the record.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.StageCaseRole.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.StageCaseRole.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.StageCaseRole.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.StageCaseRole.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.StageCaseRole.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.StageCaseRole.Stage">
<summary>
Stage of the Case..
</summary>
<remarks>Data-source is 'StageCaseRole.Stage'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.StageCaseRole.RoleCode">
<summary>
Code of the role..
</summary>
<remarks>Data-source is 'StageCaseRole.RoleCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.StageCaseRole.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'StageCaseRole.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.StageCaseRole.CreatorUserCode">
<summary>
User code that creates the record..
</summary>
<remarks>Data-source is 'StageCaseRole.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.StageCaseRole.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'StageCaseRole.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.StageCaseRole.UpdateUserCode">
<summary>
User code that creates or updates the record..
</summary>
<remarks>Data-source is 'StageCaseRole.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.Compare(InMotionGIT.Underwriting.Contracts.StageCaseRole,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="StageCaseRoleItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRole.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.StageCaseRole.StageDescription">
 <summary>
 Stage of the Case.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabStageCase'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.StageCaseRoleCollection">
 <summary>
 Collection for StageCaseRole class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRoleCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRoleCollection.AddStageCaseRole">
 <summary>
 Add an instance of class 'StageCaseRole' in the StageCaseRoleCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRoleCollection.Compare(InMotionGIT.Underwriting.Contracts.StageCaseRoleCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.StageCaseRoleCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRoleCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.StageCaseRoleCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabAlarmType">
 <summary>
 Alarm types.
 </summary>
<remarks>Data-source is 'TabAlarmType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.CreateNewTabAlarmType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabAlarmType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabAlarmType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabAlarmType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabAlarmType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabAlarmType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabAlarmType._AlarmType">
<summary>
Alarm type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabAlarmType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabAlarmType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabAlarmType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabAlarmType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabAlarmType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabAlarmType._TRANSALARMTYPEs">
<summary>
Alarm type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.AlarmType">
<summary>
Alarm type..
</summary>
<remarks>Data-source is 'TabAlarmType.AlarmType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.AlarmTypeEnum">
<summary>
Alarm type.
</summary>
<remarks>This property use a enumeration based on property 'AlarmType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.AlarmTypeEnumText">
<summary>
Alarm type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabAlarmType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabAlarmType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabAlarmType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabAlarmType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabAlarmType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.NewTRANSALARMTYPEsInstance">
<summary>
Initializes the 'TRANSALARMTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.NewTransAlarmTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSALARMTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransAlarmType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.TRANSALARMTYPEs">
<summary>
Alarm type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.Compare(InMotionGIT.Underwriting.Contracts.TabAlarmType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabAlarmTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabAlarmTypeCollection">
 <summary>
 Collection for TabAlarmType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmTypeCollection.AddTabAlarmType">
 <summary>
 Add an instance of class 'TabAlarmType' in the TabAlarmTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabAlarmTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabAlarmTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabAlarmTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabCurrency">
 <summary>
 Currency.
 </summary>
<remarks>Data-source is 'TabCurrency'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.CreateNewTabCurrency">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabCurrency._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabCurrency._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabCurrency._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabCurrency._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabCurrency._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabCurrency._CurrencyCode">
<summary>
Code of the cuerrency.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabCurrency._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabCurrency._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabCurrency._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabCurrency._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabCurrency._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabCurrency._TransCurrencies">
<summary>
Currency descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrency.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrency.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrency.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrency.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrency.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrency.CurrencyCode">
<summary>
Code of the cuerrency..
</summary>
<remarks>Data-source is 'TabCurrency.CurrencyCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrency.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabCurrency.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrency.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabCurrency.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrency.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabCurrency.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrency.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabCurrency.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrency.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabCurrency.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.NewTransCurrenciesInstance">
<summary>
Initializes the 'TransCurrencies' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.NewTransCurrencyItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransCurrencies', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransCurrency' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrency.TransCurrencies">
<summary>
Currency descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.Compare(InMotionGIT.Underwriting.Contracts.TabCurrency,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabCurrencyItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrency.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrency.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabCurrencyCollection">
 <summary>
 Collection for TabCurrency class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrencyCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrencyCollection.AddTabCurrency">
 <summary>
 Add an instance of class 'TabCurrency' in the TabCurrencyCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrencyCollection.Compare(InMotionGIT.Underwriting.Contracts.TabCurrencyCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabCurrencyCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrencyCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabCurrencyCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType">
 <summary>
 Debit or credit indicator.
 </summary>
<remarks>Data-source is 'TabDebitOrCreditType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.CreateNewTabDebitOrCreditType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType._DebitOrCredit">
<summary>
Code of the debit or credit.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType._TRANSDEBITORCREDITTYPEs">
<summary>
Debit or credit descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.DebitOrCredit">
<summary>
Code of the debit or credit..
</summary>
<remarks>Data-source is 'TabDebitOrCreditType.DebitOrCredit'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.DebitOrCreditEnum">
<summary>
Code of the debit or credit.
</summary>
<remarks>This property use a enumeration based on property 'DebitOrCredit'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.DebitOrCreditEnumText">
<summary>
Code of the debit or credit.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabDebitOrCreditType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabDebitOrCreditType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabDebitOrCreditType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabDebitOrCreditType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabDebitOrCreditType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.NewTRANSDEBITORCREDITTYPEsInstance">
<summary>
Initializes the 'TRANSDEBITORCREDITTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.NewTransDebitOrCreditTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSDEBITORCREDITTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransDebitOrCreditType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.TRANSDEBITORCREDITTYPEs">
<summary>
Debit or credit descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.Compare(InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabDebitOrCreditTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditTypeCollection">
 <summary>
 Collection for TabDebitOrCreditType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditTypeCollection.AddTabDebitOrCreditType">
 <summary>
 Add an instance of class 'TabDebitOrCreditType' in the TabDebitOrCreditTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabDebitOrCreditTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDebitOrCreditTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabDecisionType">
 <summary>
 Types of decision.
 </summary>
<remarks>Data-source is 'TabDecisionType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.CreateNewTabDecisionType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDecisionType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDecisionType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDecisionType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDecisionType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDecisionType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDecisionType._Decision">
<summary>
Code of the decision.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDecisionType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDecisionType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDecisionType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDecisionType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDecisionType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDecisionType._TRANSDECISIONTYPEs">
<summary>
Decision type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.Decision">
<summary>
Code of the decision..
</summary>
<remarks>Data-source is 'TabDecisionType.Decision'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.DecisionEnum">
<summary>
Code of the decision.
</summary>
<remarks>This property use a enumeration based on property 'Decision'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.DecisionEnumText">
<summary>
Code of the decision.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabDecisionType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabDecisionType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabDecisionType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabDecisionType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabDecisionType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.NewTRANSDECISIONTYPEsInstance">
<summary>
Initializes the 'TRANSDECISIONTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.NewTransDecisionTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSDECISIONTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransDecisionType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.TRANSDECISIONTYPEs">
<summary>
Decision type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.Compare(InMotionGIT.Underwriting.Contracts.TabDecisionType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabDecisionTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabDecisionTypeCollection">
 <summary>
 Collection for TabDecisionType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionTypeCollection.AddTabDecisionType">
 <summary>
 Add an instance of class 'TabDecisionType' in the TabDecisionTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabDecisionTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDecisionTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDecisionTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabDegree">
 <summary>
 Illness level.
 </summary>
<remarks>Data-source is 'TabDegree'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.CreateNewTabDegree">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDegree._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDegree._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDegree._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDegree._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDegree._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDegree._DegreeId">
<summary>
Degree.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDegree._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDegree._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDegree._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDegree._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDegree._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDegree._TRANSDEGREEs">
<summary>
Degree descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegree.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegree.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegree.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegree.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegree.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegree.DegreeId">
<summary>
Degree..
</summary>
<remarks>Data-source is 'TabDegree.DegreeId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegree.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabDegree.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegree.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabDegree.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegree.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabDegree.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegree.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabDegree.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegree.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabDegree.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.NewTRANSDEGREEsInstance">
<summary>
Initializes the 'TRANSDEGREEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.NewTransDegreeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSDEGREEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransDegree' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegree.TRANSDEGREEs">
<summary>
Degree descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.Compare(InMotionGIT.Underwriting.Contracts.TabDegree,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabDegreeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegree.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegree.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabDegreeCollection">
 <summary>
 Collection for TabDegree class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegreeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegreeCollection.AddTabDegree">
 <summary>
 Add an instance of class 'TabDegree' in the TabDegreeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegreeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabDegreeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDegreeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegreeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDegreeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium">
 <summary>
 Discount or extra premium type
 </summary>
<remarks>Data-source is 'TabDiscountOrExtraPremium'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.CreateNewTabDiscountOrExtraPremium">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium._DiscountOrExtraPremiumType">
<summary>
Type of element of Extra-premium, discount or tax
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium._TabDiscountOrExtraPremium">
<summary>
Discount or extra premium type
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium._TransDiscountOrExtraPremiums">
<summary>
DiscountOrExtraPremiumType
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.DiscountOrExtraPremiumType">
<summary>
Type of element of Extra-premium, discount or tax.
</summary>
<remarks>Data-source is 'TabDiscountOrExtraPremium.DiscountOrExtraPremiumType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabDiscountOrExtraPremium.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabDiscountOrExtraPremium.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabDiscountOrExtraPremium.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabDiscountOrExtraPremium.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabDiscountOrExtraPremium.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.NewTabDiscountOrExtraPremiumInstance">
<summary>
Initializes the 'TabDiscountOrExtraPremium' instance.
</summary>
 <returns>The 'TabDiscountOrExtraPremium' class instance.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.TabDiscountOrExtraPremium">
<summary>
Discount or extra premium type collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.NewTransDiscountOrExtraPremiumsInstance">
<summary>
Initializes the 'TransDiscountOrExtraPremiums' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.NewTransDiscountOrExtraPremiumItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransDiscountOrExtraPremiums', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransDiscountOrExtraPremium' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.TransDiscountOrExtraPremiums">
<summary>
DiscountOrExtraPremiumType collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.Compare(InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabDiscountOrExtraPremiumItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremium.DiscountOrExtraPremiumTypeDescription">
 <summary>
 Type of element of Extra-premium, discount or tax
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabDiscountOrExtraPremium'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremiumCollection">
 <summary>
 Collection for TabDiscountOrExtraPremium class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremiumCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremiumCollection.AddTabDiscountOrExtraPremium">
 <summary>
 Add an instance of class 'TabDiscountOrExtraPremium' in the TabDiscountOrExtraPremiumCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremiumCollection.Compare(InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremiumCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremiumCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremiumCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabDiscountOrExtraPremiumCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabEntryType">
 <summary>
 Entry type.
 </summary>
<remarks>Data-source is 'TabEntryType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.CreateNewTabEntryType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabEntryType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabEntryType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabEntryType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabEntryType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabEntryType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabEntryType._EntryType">
<summary>
Entry Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabEntryType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabEntryType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabEntryType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabEntryType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabEntryType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabEntryType._TRANSENTRYTYPEs">
<summary>
Entry type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.EntryType">
<summary>
Entry Type..
</summary>
<remarks>Data-source is 'TabEntryType.EntryType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.EntryTypeEnum">
<summary>
Entry Type.
</summary>
<remarks>This property use a enumeration based on property 'EntryType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.EntryTypeEnumText">
<summary>
Entry Type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabEntryType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabEntryType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabEntryType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabEntryType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabEntryType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.NewTRANSENTRYTYPEsInstance">
<summary>
Initializes the 'TRANSENTRYTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.NewTransEntryTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSENTRYTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransEntryType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.TRANSENTRYTYPEs">
<summary>
Entry type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.Compare(InMotionGIT.Underwriting.Contracts.TabEntryType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabEntryTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabEntryTypeCollection">
 <summary>
 Collection for TabEntryType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryTypeCollection.AddTabEntryType">
 <summary>
 Add an instance of class 'TabEntryType' in the TabEntryTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabEntryTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabEntryTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabEntryTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType">
 <summary>
 Exclusion periods.
 </summary>
<remarks>Data-source is 'TabExclusionPeriodType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.CreateNewTabExclusionPeriodType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType._ExclusionPeriodType">
<summary>
Exclusion Period Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType._TRANSEXCLUSIONPERIODTYPEs">
<summary>
Exclusion period type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.ExclusionPeriodType">
<summary>
Exclusion Period Type..
</summary>
<remarks>Data-source is 'TabExclusionPeriodType.ExclusionPeriodType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.ExclusionPeriodTypeEnum">
<summary>
Exclusion Period Type.
</summary>
<remarks>This property use a enumeration based on property 'ExclusionPeriodType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.ExclusionPeriodTypeEnumText">
<summary>
Exclusion Period Type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabExclusionPeriodType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabExclusionPeriodType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabExclusionPeriodType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabExclusionPeriodType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabExclusionPeriodType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.NewTRANSEXCLUSIONPERIODTYPEsInstance">
<summary>
Initializes the 'TRANSEXCLUSIONPERIODTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.NewTransExclusionPeriodTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSEXCLUSIONPERIODTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransExclusionPeriodType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.TRANSEXCLUSIONPERIODTYPEs">
<summary>
Exclusion period type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.Compare(InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabExclusionPeriodTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodTypeCollection">
 <summary>
 Collection for TabExclusionPeriodType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodTypeCollection.AddTabExclusionPeriodType">
 <summary>
 Add an instance of class 'TabExclusionPeriodType' in the TabExclusionPeriodTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabExclusionPeriodTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionPeriodTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabExclusionType">
 <summary>
 Types of exclusion.
 </summary>
<remarks>Data-source is 'TabExclusionType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.CreateNewTabExclusionType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionType._ExclusionType">
<summary>
Exclusion Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabExclusionType._TRANSEXCLUSIONTYPEs">
<summary>
Exclusion type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.ExclusionType">
<summary>
Exclusion Type..
</summary>
<remarks>Data-source is 'TabExclusionType.ExclusionType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.ExclusionTypeEnum">
<summary>
Exclusion Type.
</summary>
<remarks>This property use a enumeration based on property 'ExclusionType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.ExclusionTypeEnumText">
<summary>
Exclusion Type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabExclusionType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabExclusionType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabExclusionType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabExclusionType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabExclusionType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.NewTRANSEXCLUSIONTYPEsInstance">
<summary>
Initializes the 'TRANSEXCLUSIONTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.NewTransExclusionTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSEXCLUSIONTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransExclusionType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.TRANSEXCLUSIONTYPEs">
<summary>
Exclusion type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.Compare(InMotionGIT.Underwriting.Contracts.TabExclusionType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabExclusionTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabExclusionTypeCollection">
 <summary>
 Collection for TabExclusionType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionTypeCollection.AddTabExclusionType">
 <summary>
 Add an instance of class 'TabExclusionType' in the TabExclusionTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabExclusionTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabExclusionTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabExclusionTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabGender">
 <summary>
 Gender of the Client.
 </summary>
<remarks>Data-source is 'TabGender'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.CreateNewTabGender">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGender._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGender._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGender._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGender._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGender._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGender._Gender">
<summary>
Code of gender.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGender._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGender._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGender._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGender._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGender._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGender._TransGenders">
<summary>
Gender descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGender.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGender.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGender.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGender.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGender.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGender.Gender">
<summary>
Code of gender..
</summary>
<remarks>Data-source is 'TabGender.Gender'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGender.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabGender.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGender.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabGender.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGender.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabGender.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGender.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabGender.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGender.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabGender.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.NewTransGendersInstance">
<summary>
Initializes the 'TransGenders' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.NewTransGenderItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransGenders', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransGender' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGender.TransGenders">
<summary>
Gender descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.Compare(InMotionGIT.Underwriting.Contracts.TabGender,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabGenderItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGender.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGender.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabGenderCollection">
 <summary>
 Collection for TabGender class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGenderCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGenderCollection.AddTabGender">
 <summary>
 Add an instance of class 'TabGender' in the TabGenderCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGenderCollection.Compare(InMotionGIT.Underwriting.Contracts.TabGenderCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGenderCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGenderCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGenderCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabGuideStatus">
 <summary>
 Guide Status
 </summary>
<remarks>Data-source is 'TabGuideStatus'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.CreateNewTabGuideStatus">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideStatus._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideStatus._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideStatus._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideStatus._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideStatus._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideStatus._Guidestatuscode">
<summary>
Guide status code
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideStatus._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideStatus._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideStatus._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideStatus._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideStatus._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideStatus._Table2s">
<summary>
Description of states of a guide
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatus.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatus.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatus.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatus.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatus.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatus.Guidestatuscode">
<summary>
Guide status code (GuideStatus)..
</summary>
<remarks>Data-source is 'TabGuideStatus.GuideStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatus.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabGuideStatus.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatus.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabGuideStatus.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatus.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabGuideStatus.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatus.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabGuideStatus.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatus.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabGuideStatus.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.NewTable2sInstance">
<summary>
Initializes the 'Table2s' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.NewTransGuideStatusItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Table2s', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransGuideStatus' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatus.Table2s">
<summary>
Description of states of a guide collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.Compare(InMotionGIT.Underwriting.Contracts.TabGuideStatus,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabGuideStatusItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatus.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatus.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabGuideStatusCollection">
 <summary>
 Collection for TabGuideStatus class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatusCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatusCollection.AddTabGuideStatus">
 <summary>
 Add an instance of class 'TabGuideStatus' in the TabGuideStatusCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatusCollection.Compare(InMotionGIT.Underwriting.Contracts.TabGuideStatusCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideStatusCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatusCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideStatusCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabGuideType">
 <summary>
 Guide types
 </summary>
<remarks>Data-source is 'TabGuideType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.CreateNewTabGuideType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideType._Codeofguidetype">
<summary>
Code of guide type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabGuideType._Table3s">
<summary>
Type of guides description
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideType.Codeofguidetype">
<summary>
Code of guide type. (GuideType)..
</summary>
<remarks>Data-source is 'TabGuideType.GuideType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabGuideType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabGuideType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabGuideType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabGuideType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabGuideType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.NewTable3sInstance">
<summary>
Initializes the 'Table3s' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.NewTransGuideTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Table3s', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransGuideType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideType.Table3s">
<summary>
Type of guides description collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.Compare(InMotionGIT.Underwriting.Contracts.TabGuideType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabGuideTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabGuideTypeCollection">
 <summary>
 Collection for TabGuideType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideTypeCollection.AddTabGuideType">
 <summary>
 Add an instance of class 'TabGuideType' in the TabGuideTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabGuideTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabGuideTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabGuideTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabIllnessType">
 <summary>
 Types of illness.
 </summary>
<remarks>Data-source is 'TabIllnessType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.CreateNewTabIllnessType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabIllnessType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabIllnessType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabIllnessType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabIllnessType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabIllnessType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabIllnessType._ImpairmentCode">
<summary>
Code of the illness.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabIllnessType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabIllnessType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabIllnessType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabIllnessType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabIllnessType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabIllnessType._TransIllnessTypes">
<summary>
Illness descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessType.ImpairmentCode">
<summary>
Code of the illness..
</summary>
<remarks>Data-source is 'TabIllnessType.ImpairmentCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabIllnessType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabIllnessType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabIllnessType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabIllnessType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabIllnessType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.NewTransIllnessTypesInstance">
<summary>
Initializes the 'TransIllnessTypes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.NewTransIllnessTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransIllnessTypes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransIllnessType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessType.TransIllnessTypes">
<summary>
Illness descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.Compare(InMotionGIT.Underwriting.Contracts.TabIllnessType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabIllnessTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabIllnessTypeCollection">
 <summary>
 Collection for TabIllnessType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessTypeCollection.AddTabIllnessType">
 <summary>
 Add an instance of class 'TabIllnessType' in the TabIllnessTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabIllnessTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabIllnessTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabIllnessTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabLocationCase">
 <summary>
 Case location codes
 </summary>
<remarks>Data-source is 'TabLocationCase'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.CreateNewTabLocationCase">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabLocationCase._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabLocationCase._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabLocationCase._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabLocationCase._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabLocationCase._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabLocationCase._Location">
<summary>
Location of the case
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabLocationCase._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabLocationCase._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabLocationCase._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabLocationCase._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabLocationCase._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabLocationCase._Table0s">
<summary>
Descriptions of the physical location of the case.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCase.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCase.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCase.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCase.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCase.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCase.Location">
<summary>
Location of the case (LocationCase)..
</summary>
<remarks>Data-source is 'TabLocationCase.LocationCase'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCase.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabLocationCase.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCase.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabLocationCase.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCase.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabLocationCase.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCase.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabLocationCase.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCase.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabLocationCase.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.NewTable0sInstance">
<summary>
Initializes the 'Table0s' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.NewTransLocationCaseItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Table0s', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransLocationCase' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCase.Table0s">
<summary>
Descriptions of the physical location of the case. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.Compare(InMotionGIT.Underwriting.Contracts.TabLocationCase,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabLocationCaseItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCase.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCase.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabLocationCaseCollection">
 <summary>
 Collection for TabLocationCase class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCaseCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCaseCollection.AddTabLocationCase">
 <summary>
 Add an instance of class 'TabLocationCase' in the TabLocationCaseCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCaseCollection.Compare(InMotionGIT.Underwriting.Contracts.TabLocationCaseCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabLocationCaseCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCaseCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabLocationCaseCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType">
 <summary>
 Source of the information.
 </summary>
<remarks>Data-source is 'TabManualOrAutomaticType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.CreateNewTabManualOrAutomaticType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType._ManualOrAutomatic">
<summary>
Manual Or Automatic.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType._TRANSMANUALORAUTOMATICTYPEs">
<summary>
Manual or automatic type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.ManualOrAutomatic">
<summary>
Manual Or Automatic..
</summary>
<remarks>Data-source is 'TabManualOrAutomaticType.ManualOrAutomatic'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.ManualOrAutomaticEnum">
<summary>
Manual Or Automatic.
</summary>
<remarks>This property use a enumeration based on property 'ManualOrAutomatic'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.ManualOrAutomaticEnumText">
<summary>
Manual Or Automatic.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabManualOrAutomaticType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabManualOrAutomaticType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabManualOrAutomaticType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabManualOrAutomaticType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabManualOrAutomaticType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.NewTRANSMANUALORAUTOMATICTYPEsInstance">
<summary>
Initializes the 'TRANSMANUALORAUTOMATICTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.NewTransManualOrAutomaticTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSMANUALORAUTOMATICTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransManualOrAutomaticType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.TRANSMANUALORAUTOMATICTYPEs">
<summary>
Manual or automatic type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.Compare(InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabManualOrAutomaticTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticTypeCollection">
 <summary>
 Collection for TabManualOrAutomaticType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticTypeCollection.AddTabManualOrAutomaticType">
 <summary>
 Add an instance of class 'TabManualOrAutomaticType' in the TabManualOrAutomaticTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabManualOrAutomaticTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabPayableByType">
 <summary>
 Payer requirement.
 </summary>
<remarks>Data-source is 'TabPayableByType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.CreateNewTabPayableByType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabPayableByType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabPayableByType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabPayableByType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabPayableByType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabPayableByType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabPayableByType._Payer">
<summary>
Payer.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabPayableByType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabPayableByType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabPayableByType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabPayableByType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabPayableByType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabPayableByType._TRANSPAYABLEBYTYPEs">
<summary>
Payable by type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.Payer">
<summary>
Payer..
</summary>
<remarks>Data-source is 'TabPayableByType.Payer'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.PayerEnum">
<summary>
Payer.
</summary>
<remarks>This property use a enumeration based on property 'Payer'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.PayerEnumText">
<summary>
Payer.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabPayableByType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabPayableByType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabPayableByType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabPayableByType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabPayableByType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.NewTRANSPAYABLEBYTYPEsInstance">
<summary>
Initializes the 'TRANSPAYABLEBYTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.NewTransPayableByTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSPAYABLEBYTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransPayableByType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.TRANSPAYABLEBYTYPEs">
<summary>
Payable by type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.Compare(InMotionGIT.Underwriting.Contracts.TabPayableByType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabPayableByTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabPayableByTypeCollection">
 <summary>
 Collection for TabPayableByType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByTypeCollection.AddTabPayableByType">
 <summary>
 Add an instance of class 'TabPayableByType' in the TabPayableByTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabPayableByTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabPayableByTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabPayableByTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabProcessType">
 <summary>
 Process type.
 </summary>
<remarks>Data-source is 'TabProcessType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.CreateNewTabProcessType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabProcessType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabProcessType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabProcessType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabProcessType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabProcessType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabProcessType._ProcessType">
<summary>
Process Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabProcessType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabProcessType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabProcessType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabProcessType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabProcessType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabProcessType._TRANSPROCESSTYPEs">
<summary>
Process type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.ProcessType">
<summary>
Process Type..
</summary>
<remarks>Data-source is 'TabProcessType.ProcessType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.ProcessTypeEnum">
<summary>
Process Type.
</summary>
<remarks>This property use a enumeration based on property 'ProcessType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.ProcessTypeEnumText">
<summary>
Process Type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabProcessType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabProcessType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabProcessType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabProcessType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabProcessType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.NewTRANSPROCESSTYPEsInstance">
<summary>
Initializes the 'TRANSPROCESSTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.NewTransProcessTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSPROCESSTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransProcessType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.TRANSPROCESSTYPEs">
<summary>
Process type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.Compare(InMotionGIT.Underwriting.Contracts.TabProcessType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabProcessTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabProcessTypeCollection">
 <summary>
 Collection for TabProcessType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessTypeCollection.AddTabProcessType">
 <summary>
 Add an instance of class 'TabProcessType' in the TabProcessTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabProcessTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabProcessTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabProcessTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement">
 <summary>
 Questions in the questionnaires.
 </summary>
<remarks>Data-source is 'TabQuestionsFromRequirement'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.CreateNewTabQuestionsFromRequirement">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement._QuestionId">
<summary>
Question Id.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement._RequirementType">
<summary>
Requirement Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement._TRANSQUESTIONSFROMREQUIREMENTs">
<summary>
Questions from requirement descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.QuestionId">
<summary>
Question Id..
</summary>
<remarks>Data-source is 'TabQuestionsFromRequirement.QuestionId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.RequirementType">
<summary>
Requirement Type..
</summary>
<remarks>Data-source is 'TabQuestionsFromRequirement.RequirementType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.RequirementTypeEnum">
<summary>
Requirement Type.
</summary>
<remarks>This property use a enumeration based on property 'RequirementType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.RequirementTypeEnumText">
<summary>
Requirement Type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabQuestionsFromRequirement.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabQuestionsFromRequirement.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabQuestionsFromRequirement.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabQuestionsFromRequirement.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabQuestionsFromRequirement.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.NewTRANSQUESTIONSFROMREQUIREMENTsInstance">
<summary>
Initializes the 'TRANSQUESTIONSFROMREQUIREMENTs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.NewTransQuestionsFromRequirementItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSQUESTIONSFROMREQUIREMENTs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransQuestionsFromRequirement' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.TRANSQUESTIONSFROMREQUIREMENTs">
<summary>
Questions from requirement descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.Compare(InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabQuestionsFromRequirementItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.RequirementTypeDescription">
 <summary>
 Requirement Type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRequirementType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirement.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirementCollection">
 <summary>
 Collection for TabQuestionsFromRequirement class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirementCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirementCollection.AddTabQuestionsFromRequirement">
 <summary>
 Add an instance of class 'TabQuestionsFromRequirement' in the TabQuestionsFromRequirementCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirementCollection.Compare(InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirementCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirementCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirementCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabQuestionsFromRequirementCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRejectionReason">
 <summary>
 Reasons for rejection of the case: decision of the insured, risk is not covered by the company, etc.
 </summary>
<remarks>Data-source is 'TabRejectionReason'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.CreateNewTabRejectionReason">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRejectionReason._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRejectionReason._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRejectionReason._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRejectionReason._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRejectionReason._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRejectionReason._Reason">
<summary>
Reason of rejection of the underwriting case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRejectionReason._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRejectionReason._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRejectionReason._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRejectionReason._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRejectionReason._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRejectionReason._Table1s">
<summary>
Reasons of rejection descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRejectionReason.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRejectionReason.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRejectionReason.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRejectionReason.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRejectionReason.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRejectionReason.Reason">
<summary>
Reason of rejection of the underwriting case. (ReasonOfRejection)..
</summary>
<remarks>Data-source is 'TabRejectionReason.ReasonOfRejection'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRejectionReason.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabRejectionReason.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRejectionReason.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabRejectionReason.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRejectionReason.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabRejectionReason.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRejectionReason.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabRejectionReason.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRejectionReason.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabRejectionReason.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.NewTable1sInstance">
<summary>
Initializes the 'Table1s' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.NewTransRejectionReasonItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Table1s', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransRejectionReason' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRejectionReason.Table1s">
<summary>
Reasons of rejection descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.Compare(InMotionGIT.Underwriting.Contracts.TabRejectionReason,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabRejectionReasonItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReason.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRejectionReasonCollection">
 <summary>
 Collection for TabRejectionReason class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReasonCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReasonCollection.AddTabRejectionReason">
 <summary>
 Add an instance of class 'TabRejectionReason' in the TabRejectionReasonCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReasonCollection.Compare(InMotionGIT.Underwriting.Contracts.TabRejectionReasonCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRejectionReasonCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReasonCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRejectionReasonCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType">
 <summary>
 Requirement status.
 </summary>
<remarks>Data-source is 'TabRequirementStatusType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.CreateNewTabRequirementStatusType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType._RequirementStatus">
<summary>
Requirement Status.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType._TRANSREQUIREMENTSTATUSTYPEs">
<summary>
Requirement status descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.RequirementStatus">
<summary>
Requirement Status..
</summary>
<remarks>Data-source is 'TabRequirementStatusType.RequirementStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabRequirementStatusType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabRequirementStatusType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabRequirementStatusType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabRequirementStatusType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabRequirementStatusType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.NewTRANSREQUIREMENTSTATUSTYPEsInstance">
<summary>
Initializes the 'TRANSREQUIREMENTSTATUSTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.NewTransRequirementStatusTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSREQUIREMENTSTATUSTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransRequirementStatusType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.TRANSREQUIREMENTSTATUSTYPEs">
<summary>
Requirement status descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.Compare(InMotionGIT.Underwriting.Contracts.TabRequirementStatusType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabRequirementStatusTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRequirementStatusTypeCollection">
 <summary>
 Collection for TabRequirementStatusType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusTypeCollection.AddTabRequirementStatusType">
 <summary>
 Add an instance of class 'TabRequirementStatusType' in the TabRequirementStatusTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabRequirementStatusTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementStatusTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementStatusTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRequirementType">
 <summary>
 Types of the requirement.
 </summary>
<remarks>Data-source is 'TabRequirementType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.CreateNewTabRequirementType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._RequirementType">
<summary>
Requirement Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._ProcessType">
<summary>
Process Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._UnderwritingArea">
<summary>
Underwriting Area.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._Payer">
<summary>
Payer.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._Cost">
<summary>
Cost.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._Link">
<summary>
Link.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._AcordRequirementCode">
<summary>
Acord Requirement Code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._Product">
<summary>
Code of the product.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._AllowViewRequirement">
<summary>
Indica si se debe mostrar el botón para mostrar un documento.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._AllowLoadRequirement">
<summary>
Indica si se debe mostrar el botón para cargar un documento.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._TABREQUIREMENTTYPEBYROLEs">
<summary>
Requirement types by role.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementType._TRANSREQUIREMENTTYPEs">
<summary>
Requirement type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.RequirementType">
<summary>
Requirement Type..
</summary>
<remarks>Data-source is 'TabRequirementType.RequirementType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.RequirementTypeEnum">
<summary>
Requirement Type.
</summary>
<remarks>This property use a enumeration based on property 'RequirementType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.RequirementTypeEnumText">
<summary>
Requirement Type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.ProcessType">
<summary>
Process Type..
</summary>
<remarks>Data-source is 'TabRequirementType.ProcessType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.ProcessTypeEnum">
<summary>
Process Type.
</summary>
<remarks>This property use a enumeration based on property 'ProcessType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.ProcessTypeEnumText">
<summary>
Process Type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.UnderwritingArea">
<summary>
Underwriting Area..
</summary>
<remarks>Data-source is 'TabRequirementType.UnderwritingArea'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.UnderwritingAreaEnum">
<summary>
Underwriting Area.
</summary>
<remarks>This property use a enumeration based on property 'UnderwritingArea'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.UnderwritingAreaEnumText">
<summary>
Underwriting Area.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.Payer">
<summary>
Payer..
</summary>
<remarks>Data-source is 'TabRequirementType.Payer'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.PayerEnum">
<summary>
Payer.
</summary>
<remarks>This property use a enumeration based on property 'Payer'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.PayerEnumText">
<summary>
Payer.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.Cost">
<summary>
Cost..
</summary>
<remarks>Data-source is 'TabRequirementType.Cost'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.Link">
<summary>
Link..
</summary>
<remarks>Data-source is 'TabRequirementType.Link'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.AcordRequirementCode">
<summary>
Acord Requirement Code..
</summary>
<remarks>Data-source is 'TabRequirementType.AcordRequirementCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.LineOfBusiness">
<summary>
Code of the line of business..
</summary>
<remarks>Data-source is 'TabRequirementType.LineOfBusiness'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.Product">
<summary>
Code of the product..
</summary>
<remarks>Data-source is 'TabRequirementType.Product'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabRequirementType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabRequirementType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabRequirementType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabRequirementType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabRequirementType.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.AllowViewRequirement">
<summary>
Indica si se debe mostrar el botón para mostrar un documento..
</summary>
<remarks>Data-source is 'TabRequirementType.AllowViewRequirement'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.AllowLoadRequirement">
<summary>
Indica si se debe mostrar el botón para cargar un documento..
</summary>
<remarks>Data-source is 'TabRequirementType.AllowLoadRequirement'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.NewTABREQUIREMENTTYPEBYROLEsInstance">
<summary>
Initializes the 'TABREQUIREMENTTYPEBYROLEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.NewTabRequirementTypeByRoleItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TABREQUIREMENTTYPEBYROLEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TabRequirementTypeByRole' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.TABREQUIREMENTTYPEBYROLEs">
<summary>
Requirement types by role. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.NewTRANSREQUIREMENTTYPEsInstance">
<summary>
Initializes the 'TRANSREQUIREMENTTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.NewTransRequirementTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSREQUIREMENTTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransRequirementType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.TRANSREQUIREMENTTYPEs">
<summary>
Requirement type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.Compare(InMotionGIT.Underwriting.Contracts.TabRequirementType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabRequirementTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.ProcessTypeDescription">
 <summary>
 Process Type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabProcessType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.UnderwritingAreaDescription">
 <summary>
 Underwriting Area.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingAreaType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.PayerDescription">
 <summary>
 Payer.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabPayableByType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRequirementTypeCollection">
 <summary>
 Collection for TabRequirementType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeCollection.AddTabRequirementType">
 <summary>
 Add an instance of class 'TabRequirementType' in the TabRequirementTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabRequirementTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole">
 <summary>
 Requirement types by role.
 </summary>
<remarks>Data-source is 'TabRequirementTypeByRole'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.CreateNewTabRequirementTypeByRole">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole._RequirementType">
<summary>
Requirement Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole._RoleCode">
<summary>
Code of the role.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole._CreatorUserCode">
<summary>
User code that creates the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole._UpdateUserCode">
<summary>
User code that creates or updates the record.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.RequirementType">
<summary>
Requirement Type..
</summary>
<remarks>Data-source is 'TabRequirementTypeByRole.RequirementType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.RoleCode">
<summary>
Code of the role..
</summary>
<remarks>Data-source is 'TabRequirementTypeByRole.RoleCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabRequirementTypeByRole.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.CreatorUserCode">
<summary>
User code that creates the record..
</summary>
<remarks>Data-source is 'TabRequirementTypeByRole.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabRequirementTypeByRole.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.UpdateUserCode">
<summary>
User code that creates or updates the record..
</summary>
<remarks>Data-source is 'TabRequirementTypeByRole.UpdateUserCode'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.Compare(InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabRequirementTypeByRoleItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.RequirementTypeDescription">
 <summary>
 Requirement Type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRequirementType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRole.RoleCodeDescription">
 <summary>
 Code of the role.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRoleType'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRoleCollection">
 <summary>
 Collection for TabRequirementTypeByRole class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRoleCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRoleCollection.AddTabRequirementTypeByRole">
 <summary>
 Add an instance of class 'TabRequirementTypeByRole' in the TabRequirementTypeByRoleCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRoleCollection.Compare(InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRoleCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRoleCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRoleCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRequirementTypeByRoleCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRestrictionType">
 <summary>
 Types of the restriction.
 </summary>
<remarks>Data-source is 'TabRestrictionType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.CreateNewTabRestrictionType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRestrictionType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRestrictionType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRestrictionType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRestrictionType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRestrictionType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRestrictionType._RestrictionType">
<summary>
Restriction Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRestrictionType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRestrictionType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRestrictionType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRestrictionType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRestrictionType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRestrictionType._TRANSRESTRICTIONTYPEs">
<summary>
Restriction type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.RestrictionType">
<summary>
Restriction Type..
</summary>
<remarks>Data-source is 'TabRestrictionType.RestrictionType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.RestrictionTypeEnum">
<summary>
Restriction Type.
</summary>
<remarks>This property use a enumeration based on property 'RestrictionType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.RestrictionTypeEnumText">
<summary>
Restriction Type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabRestrictionType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabRestrictionType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabRestrictionType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabRestrictionType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabRestrictionType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.NewTRANSRESTRICTIONTYPEsInstance">
<summary>
Initializes the 'TRANSRESTRICTIONTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.NewTransRestrictionTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSRESTRICTIONTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransRestrictionType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.TRANSRESTRICTIONTYPEs">
<summary>
Restriction type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.Compare(InMotionGIT.Underwriting.Contracts.TabRestrictionType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabRestrictionTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRestrictionTypeCollection">
 <summary>
 Collection for TabRestrictionType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionTypeCollection.AddTabRestrictionType">
 <summary>
 Add an instance of class 'TabRestrictionType' in the TabRestrictionTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabRestrictionTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRestrictionTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRestrictionTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRiskClassType">
 <summary>
 Risk category.
 </summary>
<remarks>Data-source is 'TabRiskClassType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.CreateNewTabRiskClassType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRiskClassType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRiskClassType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRiskClassType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRiskClassType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRiskClassType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRiskClassType._RiskClassification">
<summary>
Risk Classification.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRiskClassType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRiskClassType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRiskClassType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRiskClassType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRiskClassType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRiskClassType._TRANSRISKCLASSTYPEs">
<summary>
Risk classification type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassType.RiskClassification">
<summary>
Risk Classification. (RiskClass)..
</summary>
<remarks>Data-source is 'TabRiskClassType.RiskClass'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabRiskClassType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabRiskClassType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabRiskClassType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabRiskClassType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabRiskClassType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.NewTRANSRISKCLASSTYPEsInstance">
<summary>
Initializes the 'TRANSRISKCLASSTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.NewTransRiskClassTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSRISKCLASSTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransRiskClassType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassType.TRANSRISKCLASSTYPEs">
<summary>
Risk classification type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.Compare(InMotionGIT.Underwriting.Contracts.TabRiskClassType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabRiskClassTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRiskClassTypeCollection">
 <summary>
 Collection for TabRiskClassType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassTypeCollection.AddTabRiskClassType">
 <summary>
 Add an instance of class 'TabRiskClassType' in the TabRiskClassTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabRiskClassTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRiskClassTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRiskClassTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRoleType">
 <summary>
 Role types.
 </summary>
<remarks>Data-source is 'TabRoleType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.CreateNewTabRoleType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRoleType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRoleType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRoleType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRoleType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRoleType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRoleType._RoleCode">
<summary>
Code of teh role.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRoleType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRoleType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRoleType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRoleType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRoleType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabRoleType._TransRoleTypes">
<summary>
Role type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleType.RoleCode">
<summary>
Code of teh role..
</summary>
<remarks>Data-source is 'TabRoleType.RoleCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabRoleType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabRoleType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabRoleType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabRoleType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabRoleType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.NewTransRoleTypesInstance">
<summary>
Initializes the 'TransRoleTypes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.NewTransRoleTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransRoleTypes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransRoleType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleType.TransRoleTypes">
<summary>
Role type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.Compare(InMotionGIT.Underwriting.Contracts.TabRoleType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabRoleTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabRoleTypeCollection">
 <summary>
 Collection for TabRoleType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleTypeCollection.AddTabRoleType">
 <summary>
 Add an instance of class 'TabRoleType' in the TabRoleTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabRoleTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabRoleTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabRoleTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabStageCase">
 <summary>
 Case Stage
 </summary>
<remarks>Data-source is 'TabStageCase'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.CreateNewTabStageCase">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._Stage">
<summary>
Stage of the case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._Product">
<summary>
Code of the product.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._UnderwritingCaseType">
<summary>
Underwriting Case Type
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._Table0s">
<summary>
Table containing the relationship of the stages to the roles
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabStageCase._TransStageCases">
<summary>
Description of the stages of a case.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.Stage">
<summary>
Stage of the case..
</summary>
<remarks>Data-source is 'TabStageCase.Stage'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.LineOfBusiness">
<summary>
Code of the line of business..
</summary>
<remarks>Data-source is 'TabStageCase.LineOfBusiness'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.Product">
<summary>
Code of the product..
</summary>
<remarks>Data-source is 'TabStageCase.Product'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.UnderwritingCaseType">
<summary>
Underwriting Case Type.
</summary>
<remarks>Data-source is 'TabStageCase.UnderwritingCaseType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabStageCase.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabStageCase.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabStageCase.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabStageCase.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabStageCase.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.NewTable0sInstance">
<summary>
Initializes the 'Table0s' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.NewStageCaseRoleItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Table0s', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'StageCaseRole' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.Table0s">
<summary>
Table containing the relationship of the stages to the roles collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.NewTransStageCasesInstance">
<summary>
Initializes the 'TransStageCases' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.NewTransStageCaseItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransStageCases', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransStageCase' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.TransStageCases">
<summary>
Description of the stages of a case. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.Compare(InMotionGIT.Underwriting.Contracts.TabStageCase,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabStageCaseItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCase.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.UnderwritingCaseTypeDescription">
 <summary>
 Underwriting Case Type
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingCaseType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCase.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabStageCaseCollection">
 <summary>
 Collection for TabStageCase class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCaseCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCaseCollection.AddTabStageCase">
 <summary>
 Add an instance of class 'TabStageCase' in the TabStageCaseCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCaseCollection.Compare(InMotionGIT.Underwriting.Contracts.TabStageCaseCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabStageCaseCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCaseCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabStageCaseCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType">
 <summary>
 Underwriting areas.
 </summary>
<remarks>Data-source is 'TabUnderwritingAreaType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.CreateNewTabUnderwritingAreaType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType._UnderwritingArea">
<summary>
Underwriting Area.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType._TRANSUNDERWRITINGAREATYPEs">
<summary>
Undewriting area type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.UnderwritingArea">
<summary>
Underwriting Area..
</summary>
<remarks>Data-source is 'TabUnderwritingAreaType.UnderwritingArea'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.UnderwritingAreaEnum">
<summary>
Underwriting Area.
</summary>
<remarks>This property use a enumeration based on property 'UnderwritingArea'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.UnderwritingAreaEnumText">
<summary>
Underwriting Area.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabUnderwritingAreaType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabUnderwritingAreaType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabUnderwritingAreaType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabUnderwritingAreaType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabUnderwritingAreaType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.NewTRANSUNDERWRITINGAREATYPEsInstance">
<summary>
Initializes the 'TRANSUNDERWRITINGAREATYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.NewTransUnderwritingAreaTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSUNDERWRITINGAREATYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransUnderwritingAreaType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.TRANSUNDERWRITINGAREATYPEs">
<summary>
Undewriting area type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.Compare(InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabUnderwritingAreaTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaTypeCollection">
 <summary>
 Collection for TabUnderwritingAreaType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaTypeCollection.AddTabUnderwritingAreaType">
 <summary>
 Add an instance of class 'TabUnderwritingAreaType' in the TabUnderwritingAreaTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingAreaTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType">
 <summary>
 Types of status of a case.
 </summary>
<remarks>Data-source is 'TabUnderwritingCaseSType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.CreateNewTabUnderwritingCaseSType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType._UnderwritingCaseStatus">
<summary>
Underwriting Case Status.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType._TRANSUNDERWRITINGCASESTYPEs">
<summary>
Underwriting case status descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.UnderwritingCaseStatus">
<summary>
Underwriting Case Status..
</summary>
<remarks>Data-source is 'TabUnderwritingCaseSType.UnderwritingCaseStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabUnderwritingCaseSType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabUnderwritingCaseSType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabUnderwritingCaseSType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabUnderwritingCaseSType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabUnderwritingCaseSType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.NewTRANSUNDERWRITINGCASESTYPEsInstance">
<summary>
Initializes the 'TRANSUNDERWRITINGCASESTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.NewTransUnderwritingCaseSTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSUNDERWRITINGCASESTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransUnderwritingCaseSType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.TRANSUNDERWRITINGCASESTYPEs">
<summary>
Underwriting case status descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.Compare(InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabUnderwritingCaseSTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSTypeCollection">
 <summary>
 Collection for TabUnderwritingCaseSType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSTypeCollection.AddTabUnderwritingCaseSType">
 <summary>
 Add an instance of class 'TabUnderwritingCaseSType' in the TabUnderwritingCaseSTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseSTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType">
 <summary>
 Types of underwriting case.
 </summary>
<remarks>Data-source is 'TabUnderwritingCaseType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.CreateNewTabUnderwritingCaseType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType._UnderwritingCaseType">
<summary>
Underwriting Case Type
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType._TransUnderwritingCaseTypes">
<summary>
Underwriting case type descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.UnderwritingCaseType">
<summary>
Underwriting Case Type.
</summary>
<remarks>Data-source is 'TabUnderwritingCaseType.UnderwritingCaseType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabUnderwritingCaseType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabUnderwritingCaseType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabUnderwritingCaseType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabUnderwritingCaseType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabUnderwritingCaseType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.NewTransUnderwritingCaseTypesInstance">
<summary>
Initializes the 'TransUnderwritingCaseTypes' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.NewTransUnderwritingCaseTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransUnderwritingCaseTypes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransUnderwritingCaseType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.TransUnderwritingCaseTypes">
<summary>
Underwriting case type descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.Compare(InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabUnderwritingCaseTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseTypeCollection">
 <summary>
 Collection for TabUnderwritingCaseType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseTypeCollection.AddTabUnderwritingCaseType">
 <summary>
 Add an instance of class 'TabUnderwritingCaseType' in the TabUnderwritingCaseTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingCaseTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule">
 <summary>
 Application of Underwriting rules.
 </summary>
<remarks>Data-source is 'TabUnderwritingRule'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.CreateNewTabUnderwritingRule">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._UnderwritingRuleId">
<summary>
Underwriting Rule Id.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._EffectiveDate">
<summary>
Date which from the record is valid.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._CancellationDate">
<summary>
Date when the record is canceled.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._DegreeId">
<summary>
Degree Id.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._MortalityDebits">
<summary>
Mortality Debits.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._ImpairmentCode">
<summary>
Impairment Code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._UnderwritingArea">
<summary>
Underwriting Area.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._RequirementType">
<summary>
Requirement Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._QuestionId">
<summary>
Question Id.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._RequirementStatus">
<summary>
Requirement Status.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._UnderwritingRuleStatus">
<summary>
Underwriting Rule Status.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._UnderwritingCaseType">
<summary>
Underwriting Case Type
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._Answer">
<summary>
Answer question of the questionnaire
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._RuleGuid">
<summary>
Unique global identifier of the rule
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._dEffecdateOld">
<summary>
pending
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._RuleAlarms">
<summary>
RuleAlarms
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule._TRANSUNDERWRITINGRULEs">
<summary>
Underwriting rule descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.UnderwritingRuleId">
<summary>
Underwriting Rule Id..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.UnderwritingRuleId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.EffectiveDate">
<summary>
Date which from the record is valid..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.EffectiveDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.CancellationDate">
<summary>
Date when the record is canceled..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.CancellationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.DegreeId">
<summary>
Degree Id..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.DegreeId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.LineOfBusiness">
<summary>
Code of the line of business..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.LineOfBusiness'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.MortalityDebits">
<summary>
Mortality Debits..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.MortalityDebits'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.ImpairmentCode">
<summary>
Impairment Code..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.ImpairmentCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.UnderwritingArea">
<summary>
Underwriting Area..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.UnderwritingArea'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.RequirementType">
<summary>
Requirement Type..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.RequirementType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.QuestionId">
<summary>
Question Id..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.QuestionId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.RequirementStatus">
<summary>
Requirement Status..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.RequirementStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.UnderwritingRuleStatus">
<summary>
Underwriting Rule Status..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.UnderwritingRuleStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.UnderwritingCaseType">
<summary>
Underwriting Case Type.
</summary>
<remarks>Data-source is 'TabUnderwritingRule.UnderwritingCaseType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabUnderwritingRule.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.Answer">
<summary>
Answer question of the questionnaire.
</summary>
<remarks>Data-source is 'TabUnderwritingRule.Answer'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.RuleGuid">
<summary>
Unique global identifier of the rule.
</summary>
<remarks>Data-source is 'TabUnderwritingRule.RuleGuid'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.NewRuleAlarmsInstance">
<summary>
Initializes the 'RuleAlarms' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.NewRuleAlarmsItem(System.Boolean)">
<summary>
Add a new item to the collection of 'RuleAlarms', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'RuleAlarms' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.RuleAlarms">
<summary>
RuleAlarms collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.NewTRANSUNDERWRITINGRULEsInstance">
<summary>
Initializes the 'TRANSUNDERWRITINGRULEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.NewTransUnderwritingRuleItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSUNDERWRITINGRULEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransUnderwritingRule' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.TRANSUNDERWRITINGRULEs">
<summary>
Underwriting rule descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.Compare(InMotionGIT.Underwriting.Contracts.TabUnderwritingRule,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabUnderwritingRuleItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.DegreeIdDescription">
 <summary>
 Degree Id.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabDegree'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.ImpairmentCodeDescription">
 <summary>
 Impairment Code.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabIllnessType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.UnderwritingAreaDescription">
 <summary>
 Underwriting Area.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingAreaType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.RequirementTypeDescription">
 <summary>
 Requirement Type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRequirementType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.QuestionIdDescription">
 <summary>
 Question Id.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabQuestionsFromRequirement'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.RequirementStatusDescription">
 <summary>
 Requirement Status.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRequirementStatusType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.UnderwritingRuleStatusDescription">
 <summary>
 Underwriting Rule Status.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingRuleSType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.UnderwritingCaseTypeDescription">
 <summary>
 Underwriting Case Type
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingCaseType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.AutomaticPoints">
<summary>
Automatic Points
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.CreatorUserDescription">
<summary>
Creator User Description
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.IsManualRule">
<summary>
Automatic Points
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.ClientID">
<summary>
Client ID of the underwriting rule..
Indicates if the rule only modify the associated risk..
</summary>
<remarks>Data-source is 'UnderwritingRule.ClientID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.UpdateOnlyAssociatedRisk">
<summary>
Indicates if the rule only modify the associated risk..
</summary>
<remarks>Data-source is 'UnderwritingRule.UpdateOnlyAssociatedRisk'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.TokenToDNE">
<summary>
Automatic Points
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.ConsequenceId">
<summary>
Automatic Points
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRule.EffectiveDateString">
<summary>
Automatic Points
</summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleCollection">
 <summary>
 Collection for TabUnderwritingRule class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleCollection.AddTabUnderwritingRule">
 <summary>
 Add an instance of class 'TabUnderwritingRule' in the TabUnderwritingRuleCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleCollection.Compare(InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType">
 <summary>
 States of a Underwriting rule.
 </summary>
<remarks>Data-source is 'TabUnderwritingRuleSType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.CreateNewTabUnderwritingRuleSType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType._UnderwritingRuleStatus">
<summary>
Underwriting Rule Status.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType._TRANSUNDERWRITINGRULESTYPEs">
<summary>
Underwriting rule status descriptions.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.UnderwritingRuleStatus">
<summary>
Underwriting Rule Status..
</summary>
<remarks>Data-source is 'TabUnderwritingRuleSType.UnderwritingRuleStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data-source is 'TabUnderwritingRuleSType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TabUnderwritingRuleSType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TabUnderwritingRuleSType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TabUnderwritingRuleSType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TabUnderwritingRuleSType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.NewTRANSUNDERWRITINGRULESTYPEsInstance">
<summary>
Initializes the 'TRANSUNDERWRITINGRULESTYPEs' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.NewTransUnderwritingRuleSTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TRANSUNDERWRITINGRULESTYPEs', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransUnderwritingRuleSType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.TRANSUNDERWRITINGRULESTYPEs">
<summary>
Underwriting rule status descriptions. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.Compare(InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabUnderwritingRuleSTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSType.RecordStatusDescription">
 <summary>
 Status of the record.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSTypeCollection">
 <summary>
 Collection for TabUnderwritingRuleSType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSTypeCollection.AddTabUnderwritingRuleSType">
 <summary>
 Add an instance of class 'TabUnderwritingRuleSType' in the TabUnderwritingRuleSTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TabUnderwritingRuleSTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransAlarmType">
 <summary>
 Alarm type descriptions.
 </summary>
<remarks>Data-source is 'TransAlarmType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.CreateNewTransAlarmType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransAlarmType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransAlarmType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransAlarmType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransAlarmType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransAlarmType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransAlarmType._AlarmType">
<summary>
Alarm type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransAlarmType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransAlarmType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransAlarmType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransAlarmType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransAlarmType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransAlarmType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransAlarmType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.AlarmType">
<summary>
Alarm type..
</summary>
<remarks>Data-source is 'TransAlarmType.AlarmType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.AlarmTypeEnum">
<summary>
Alarm type.
</summary>
<remarks>This property use a enumeration based on property 'AlarmType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.AlarmTypeEnumText">
<summary>
Alarm type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransAlarmType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransAlarmType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransAlarmType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransAlarmType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransAlarmType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransAlarmType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransAlarmType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.Compare(InMotionGIT.Underwriting.Contracts.TransAlarmType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransAlarmTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransAlarmTypeCollection">
 <summary>
 Collection for TransAlarmType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmTypeCollection.AddTransAlarmType">
 <summary>
 Add an instance of class 'TransAlarmType' in the TransAlarmTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransAlarmTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransAlarmTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransAlarmTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransCurrency">
 <summary>
 Currency descriptions.
 </summary>
<remarks>Data-source is 'TransCurrency'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.CreateNewTransCurrency">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransCurrency._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransCurrency._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransCurrency._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransCurrency._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransCurrency._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransCurrency._CurrencyCode">
<summary>
Code of the currency.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransCurrency._LanguageId">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransCurrency._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransCurrency._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransCurrency._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransCurrency._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransCurrency._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransCurrency._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.CurrencyCode">
<summary>
Code of the currency..
</summary>
<remarks>Data-source is 'TransCurrency.CurrencyCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.LanguageId">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data-source is 'TransCurrency.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransCurrency.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransCurrency.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransCurrency.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransCurrency.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransCurrency.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransCurrency.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.Compare(InMotionGIT.Underwriting.Contracts.TransCurrency,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransCurrencyItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrency.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrency.LanguageIdDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransCurrencyCollection">
 <summary>
 Collection for TransCurrency class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrencyCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrencyCollection.AddTransCurrency">
 <summary>
 Add an instance of class 'TransCurrency' in the TransCurrencyCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrencyCollection.Compare(InMotionGIT.Underwriting.Contracts.TransCurrencyCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransCurrencyCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrencyCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransCurrencyCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType">
 <summary>
 Debit or credit descriptions.
 </summary>
<remarks>Data-source is 'TransDebitOrCreditType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.CreateNewTransDebitOrCreditType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType._DebitOrCredit">
<summary>
Code of the debit or credit.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.DebitOrCredit">
<summary>
Code of the debit or credit..
</summary>
<remarks>Data-source is 'TransDebitOrCreditType.DebitOrCredit'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.DebitOrCreditEnum">
<summary>
Code of the debit or credit.
</summary>
<remarks>This property use a enumeration based on property 'DebitOrCredit'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.DebitOrCreditEnumText">
<summary>
Code of the debit or credit.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransDebitOrCreditType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransDebitOrCreditType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransDebitOrCreditType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransDebitOrCreditType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransDebitOrCreditType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransDebitOrCreditType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransDebitOrCreditType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.Compare(InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransDebitOrCreditTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditTypeCollection">
 <summary>
 Collection for TransDebitOrCreditType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditTypeCollection.AddTransDebitOrCreditType">
 <summary>
 Add an instance of class 'TransDebitOrCreditType' in the TransDebitOrCreditTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransDebitOrCreditTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDebitOrCreditTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransDecisionType">
 <summary>
 Decision type descriptions.
 </summary>
<remarks>Data-source is 'TransDecisionType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.CreateNewTransDecisionType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDecisionType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDecisionType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDecisionType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDecisionType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDecisionType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDecisionType._Decision">
<summary>
Code of the decision.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDecisionType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDecisionType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDecisionType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDecisionType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDecisionType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDecisionType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDecisionType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.Decision">
<summary>
Code of the decision..
</summary>
<remarks>Data-source is 'TransDecisionType.Decision'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.DecisionEnum">
<summary>
Code of the decision.
</summary>
<remarks>This property use a enumeration based on property 'Decision'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.DecisionEnumText">
<summary>
Code of the decision.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransDecisionType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransDecisionType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransDecisionType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransDecisionType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransDecisionType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransDecisionType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransDecisionType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.Compare(InMotionGIT.Underwriting.Contracts.TransDecisionType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransDecisionTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransDecisionTypeCollection">
 <summary>
 Collection for TransDecisionType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionTypeCollection.AddTransDecisionType">
 <summary>
 Add an instance of class 'TransDecisionType' in the TransDecisionTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransDecisionTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDecisionTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDecisionTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransDegree">
 <summary>
 Degree descriptions.
 </summary>
<remarks>Data-source is 'TransDegree'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.CreateNewTransDegree">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDegree._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDegree._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDegree._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDegree._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDegree._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDegree._DegreeId">
<summary>
Degree Code
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDegree._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDegree._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDegree._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDegree._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDegree._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDegree._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDegree._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.DegreeId">
<summary>
Degree Code.
</summary>
<remarks>Data-source is 'TransDegree.DegreeId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransDegree.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransDegree.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransDegree.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransDegree.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransDegree.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransDegree.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransDegree.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.Compare(InMotionGIT.Underwriting.Contracts.TransDegree,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransDegreeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegree.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegree.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransDegreeCollection">
 <summary>
 Collection for TransDegree class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegreeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegreeCollection.AddTransDegree">
 <summary>
 Add an instance of class 'TransDegree' in the TransDegreeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegreeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransDegreeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDegreeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegreeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDegreeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium">
 <summary>
 DiscountOrExtraPremiumType
 </summary>
<remarks>Data-source is 'TransDiscountOrExtraPremium'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.CreateNewTransDiscountOrExtraPremium">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium._DiscountOrExtraPremiumType">
<summary>
Type of element of Extra-premium, discount or tax
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium._LanguageId">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.DiscountOrExtraPremiumType">
<summary>
Type of element of Extra-premium, discount or tax.
</summary>
<remarks>Data-source is 'TransDiscountOrExtraPremium.DiscountOrExtraPremiumType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.LanguageId">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data-source is 'TransDiscountOrExtraPremium.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransDiscountOrExtraPremium.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransDiscountOrExtraPremium.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransDiscountOrExtraPremium.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransDiscountOrExtraPremium.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransDiscountOrExtraPremium.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransDiscountOrExtraPremium.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.Compare(InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransDiscountOrExtraPremiumItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremium.LanguageIdDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremiumCollection">
 <summary>
 Collection for TransDiscountOrExtraPremium class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremiumCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremiumCollection.AddTransDiscountOrExtraPremium">
 <summary>
 Add an instance of class 'TransDiscountOrExtraPremium' in the TransDiscountOrExtraPremiumCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremiumCollection.Compare(InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremiumCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremiumCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremiumCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransDiscountOrExtraPremiumCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransEntryType">
 <summary>
 Entry type descriptions.
 </summary>
<remarks>Data-source is 'TransEntryType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.CreateNewTransEntryType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransEntryType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransEntryType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransEntryType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransEntryType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransEntryType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransEntryType._EntryType">
<summary>
Entry Type
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransEntryType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransEntryType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransEntryType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransEntryType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransEntryType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransEntryType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransEntryType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.EntryType">
<summary>
Entry Type.
</summary>
<remarks>Data-source is 'TransEntryType.EntryType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.EntryTypeEnum">
<summary>
Entry Type
</summary>
<remarks>This property use a enumeration based on property 'EntryType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.EntryTypeEnumText">
<summary>
Entry Type
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransEntryType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransEntryType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransEntryType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransEntryType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransEntryType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransEntryType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransEntryType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.Compare(InMotionGIT.Underwriting.Contracts.TransEntryType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransEntryTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransEntryTypeCollection">
 <summary>
 Collection for TransEntryType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryTypeCollection.AddTransEntryType">
 <summary>
 Add an instance of class 'TransEntryType' in the TransEntryTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransEntryTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransEntryTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransEntryTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType">
 <summary>
 Exclusion period type descriptions.
 </summary>
<remarks>Data-source is 'TransExclusionPeriodType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.CreateNewTransExclusionPeriodType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType._ExclusionPeriodType">
<summary>
Exclusion Period Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.ExclusionPeriodType">
<summary>
Exclusion Period Type..
</summary>
<remarks>Data-source is 'TransExclusionPeriodType.ExclusionPeriodType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.ExclusionPeriodTypeEnum">
<summary>
Exclusion Period Type.
</summary>
<remarks>This property use a enumeration based on property 'ExclusionPeriodType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.ExclusionPeriodTypeEnumText">
<summary>
Exclusion Period Type.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransExclusionPeriodType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransExclusionPeriodType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransExclusionPeriodType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransExclusionPeriodType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransExclusionPeriodType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransExclusionPeriodType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransExclusionPeriodType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.Compare(InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransExclusionPeriodTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodTypeCollection">
 <summary>
 Collection for TransExclusionPeriodType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodTypeCollection.AddTransExclusionPeriodType">
 <summary>
 Add an instance of class 'TransExclusionPeriodType' in the TransExclusionPeriodTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransExclusionPeriodTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionPeriodTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransExclusionType">
 <summary>
 Exclusion type descriptions.
 </summary>
<remarks>Data-source is 'TransExclusionType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.CreateNewTransExclusionType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionType._ExclusionType">
<summary>
Exclusion Type
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransExclusionType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.ExclusionType">
<summary>
Exclusion Type.
</summary>
<remarks>Data-source is 'TransExclusionType.ExclusionType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.ExclusionTypeEnum">
<summary>
Exclusion Type
</summary>
<remarks>This property use a enumeration based on property 'ExclusionType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.ExclusionTypeEnumText">
<summary>
Exclusion Type
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransExclusionType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransExclusionType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransExclusionType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransExclusionType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransExclusionType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransExclusionType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransExclusionType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.Compare(InMotionGIT.Underwriting.Contracts.TransExclusionType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransExclusionTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransExclusionTypeCollection">
 <summary>
 Collection for TransExclusionType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionTypeCollection.AddTransExclusionType">
 <summary>
 Add an instance of class 'TransExclusionType' in the TransExclusionTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransExclusionTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransExclusionTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransExclusionTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransGender">
 <summary>
 Gender descriptions.
 </summary>
<remarks>Data-source is 'TransGender'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.CreateNewTransGender">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGender._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGender._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGender._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGender._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGender._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGender._Gender">
<summary>
Code of the gender.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGender._LanguageId">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGender._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGender._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGender._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGender._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGender._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGender._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.Gender">
<summary>
Code of the gender..
</summary>
<remarks>Data-source is 'TransGender.Gender'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.LanguageId">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data-source is 'TransGender.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransGender.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransGender.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransGender.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransGender.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransGender.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransGender.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.Compare(InMotionGIT.Underwriting.Contracts.TransGender,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransGenderItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGender.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGender.LanguageIdDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransGenderCollection">
 <summary>
 Collection for TransGender class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGenderCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGenderCollection.AddTransGender">
 <summary>
 Add an instance of class 'TransGender' in the TransGenderCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGenderCollection.Compare(InMotionGIT.Underwriting.Contracts.TransGenderCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGenderCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGenderCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGenderCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransGuideStatus">
 <summary>
 Description of states of a guide
 </summary>
<remarks>Data-source is 'TransGuideStatus'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.CreateNewTransGuideStatus">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideStatus._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideStatus._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideStatus._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideStatus._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideStatus._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideStatus._Guidestatuscode">
<summary>
Guide status code
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideStatus._LanguageId">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideStatus._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideStatus._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideStatus._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideStatus._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideStatus._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideStatus._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.Guidestatuscode">
<summary>
Guide status code (GuideStatus)..
</summary>
<remarks>Data-source is 'TransGuideStatus.GuideStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.LanguageId">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data-source is 'TransGuideStatus.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransGuideStatus.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransGuideStatus.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransGuideStatus.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransGuideStatus.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransGuideStatus.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransGuideStatus.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.Compare(InMotionGIT.Underwriting.Contracts.TransGuideStatus,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransGuideStatusItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatus.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatus.LanguageIdDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransGuideStatusCollection">
 <summary>
 Collection for TransGuideStatus class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatusCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatusCollection.AddTransGuideStatus">
 <summary>
 Add an instance of class 'TransGuideStatus' in the TransGuideStatusCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatusCollection.Compare(InMotionGIT.Underwriting.Contracts.TransGuideStatusCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideStatusCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatusCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideStatusCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransGuideType">
 <summary>
 Type of guides description
 </summary>
<remarks>Data-source is 'TransGuideType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.CreateNewTransGuideType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideType._Codeofguidetype">
<summary>
Code of guide type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideType._LanguageId">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransGuideType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.Codeofguidetype">
<summary>
Code of guide type. (GuideType)..
</summary>
<remarks>Data-source is 'TransGuideType.GuideType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.LanguageId">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data-source is 'TransGuideType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransGuideType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransGuideType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransGuideType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransGuideType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransGuideType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransGuideType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.Compare(InMotionGIT.Underwriting.Contracts.TransGuideType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransGuideTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideType.LanguageIdDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransGuideTypeCollection">
 <summary>
 Collection for TransGuideType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideTypeCollection.AddTransGuideType">
 <summary>
 Add an instance of class 'TransGuideType' in the TransGuideTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransGuideTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransGuideTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransGuideTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransIllnessType">
 <summary>
 Illness descriptions.
 </summary>
<remarks>Data-source is 'TransIllnessType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.CreateNewTransIllnessType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransIllnessType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransIllnessType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransIllnessType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransIllnessType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransIllnessType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransIllnessType._ImpairmentCode">
<summary>
Code of the illness.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransIllnessType._LanguageId">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransIllnessType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransIllnessType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransIllnessType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransIllnessType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransIllnessType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransIllnessType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.ImpairmentCode">
<summary>
Code of the illness..
</summary>
<remarks>Data-source is 'TransIllnessType.ImpairmentCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.LanguageId">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data-source is 'TransIllnessType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransIllnessType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransIllnessType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransIllnessType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransIllnessType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransIllnessType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransIllnessType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.Compare(InMotionGIT.Underwriting.Contracts.TransIllnessType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransIllnessTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessType.LanguageIdDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransIllnessTypeCollection">
 <summary>
 Collection for TransIllnessType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessTypeCollection.AddTransIllnessType">
 <summary>
 Add an instance of class 'TransIllnessType' in the TransIllnessTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransIllnessTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransIllnessTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransIllnessTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransLocationCase">
 <summary>
 Descriptions of the physical location of the case.
 </summary>
<remarks>Data-source is 'TransLocationCase'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.CreateNewTransLocationCase">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransLocationCase._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransLocationCase._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransLocationCase._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransLocationCase._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransLocationCase._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransLocationCase._Location">
<summary>
Location of the case
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransLocationCase._LanguageId">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransLocationCase._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransLocationCase._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransLocationCase._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransLocationCase._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransLocationCase._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransLocationCase._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.Location">
<summary>
Location of the case (LocationCase)..
</summary>
<remarks>Data-source is 'TransLocationCase.LocationCase'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.LanguageId">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data-source is 'TransLocationCase.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransLocationCase.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransLocationCase.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransLocationCase.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransLocationCase.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransLocationCase.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransLocationCase.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.Compare(InMotionGIT.Underwriting.Contracts.TransLocationCase,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransLocationCaseItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCase.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCase.LanguageIdDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransLocationCaseCollection">
 <summary>
 Collection for TransLocationCase class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCaseCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCaseCollection.AddTransLocationCase">
 <summary>
 Add an instance of class 'TransLocationCase' in the TransLocationCaseCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCaseCollection.Compare(InMotionGIT.Underwriting.Contracts.TransLocationCaseCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransLocationCaseCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCaseCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransLocationCaseCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType">
 <summary>
 Manual or automatic type descriptions.
 </summary>
<remarks>Data-source is 'TransManualOrAutomaticType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.CreateNewTransManualOrAutomaticType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType._ManualOrAutomatic">
<summary>
Manual Or Automatic.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.ManualOrAutomatic">
<summary>
Manual Or Automatic..
</summary>
<remarks>Data-source is 'TransManualOrAutomaticType.ManualOrAutomatic'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.ManualOrAutomaticEnum">
<summary>
Manual Or Automatic.
</summary>
<remarks>This property use a enumeration based on property 'ManualOrAutomatic'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.ManualOrAutomaticEnumText">
<summary>
Manual Or Automatic.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransManualOrAutomaticType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransManualOrAutomaticType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransManualOrAutomaticType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransManualOrAutomaticType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransManualOrAutomaticType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransManualOrAutomaticType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransManualOrAutomaticType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.Compare(InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransManualOrAutomaticTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticTypeCollection">
 <summary>
 Collection for TransManualOrAutomaticType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticTypeCollection.AddTransManualOrAutomaticType">
 <summary>
 Add an instance of class 'TransManualOrAutomaticType' in the TransManualOrAutomaticTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransManualOrAutomaticTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransPayableByType">
 <summary>
 Payable by type descriptions.
 </summary>
<remarks>Data-source is 'TransPayableByType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.CreateNewTransPayableByType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransPayableByType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransPayableByType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransPayableByType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransPayableByType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransPayableByType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransPayableByType._Payer">
<summary>
Payer.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransPayableByType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransPayableByType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransPayableByType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransPayableByType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransPayableByType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransPayableByType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransPayableByType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.Payer">
<summary>
Payer..
</summary>
<remarks>Data-source is 'TransPayableByType.Payer'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.PayerEnum">
<summary>
Payer.
</summary>
<remarks>This property use a enumeration based on property 'Payer'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.PayerEnumText">
<summary>
Payer.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransPayableByType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransPayableByType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransPayableByType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransPayableByType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransPayableByType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransPayableByType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransPayableByType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.Compare(InMotionGIT.Underwriting.Contracts.TransPayableByType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransPayableByTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransPayableByTypeCollection">
 <summary>
 Collection for TransPayableByType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByTypeCollection.AddTransPayableByType">
 <summary>
 Add an instance of class 'TransPayableByType' in the TransPayableByTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransPayableByTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransPayableByTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransPayableByTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransProcessType">
 <summary>
 Process type descriptions.
 </summary>
<remarks>Data-source is 'TransProcessType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.CreateNewTransProcessType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransProcessType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransProcessType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransProcessType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransProcessType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransProcessType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransProcessType._ProcessType">
<summary>
Process Type
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransProcessType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransProcessType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransProcessType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransProcessType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransProcessType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransProcessType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransProcessType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.ProcessType">
<summary>
Process Type.
</summary>
<remarks>Data-source is 'TransProcessType.ProcessType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.ProcessTypeEnum">
<summary>
Process Type
</summary>
<remarks>This property use a enumeration based on property 'ProcessType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.ProcessTypeEnumText">
<summary>
Process Type
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransProcessType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransProcessType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransProcessType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransProcessType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransProcessType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransProcessType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransProcessType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.Compare(InMotionGIT.Underwriting.Contracts.TransProcessType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransProcessTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransProcessTypeCollection">
 <summary>
 Collection for TransProcessType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessTypeCollection.AddTransProcessType">
 <summary>
 Add an instance of class 'TransProcessType' in the TransProcessTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransProcessTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransProcessTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransProcessTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement">
 <summary>
 Questions from requirement descriptions.
 </summary>
<remarks>Data-source is 'TransQuestionsFromRequirement'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.CreateNewTransQuestionsFromRequirement">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement._QuestionId">
<summary>
Question Id
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.QuestionId">
<summary>
Question Id.
</summary>
<remarks>Data-source is 'TransQuestionsFromRequirement.QuestionId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransQuestionsFromRequirement.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransQuestionsFromRequirement.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransQuestionsFromRequirement.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransQuestionsFromRequirement.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransQuestionsFromRequirement.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransQuestionsFromRequirement.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransQuestionsFromRequirement.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.Compare(InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransQuestionsFromRequirementItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirement.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirementCollection">
 <summary>
 Collection for TransQuestionsFromRequirement class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirementCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirementCollection.AddTransQuestionsFromRequirement">
 <summary>
 Add an instance of class 'TransQuestionsFromRequirement' in the TransQuestionsFromRequirementCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirementCollection.Compare(InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirementCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirementCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirementCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransQuestionsFromRequirementCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransRejectionReason">
 <summary>
 Reasons of rejection descriptions.
 </summary>
<remarks>Data-source is 'TransRejectionReason'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.CreateNewTransRejectionReason">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRejectionReason._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRejectionReason._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRejectionReason._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRejectionReason._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRejectionReason._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRejectionReason._Reason">
<summary>
Reason of rejection of the underwriting case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRejectionReason._LanguageId">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRejectionReason._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRejectionReason._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRejectionReason._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRejectionReason._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRejectionReason._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRejectionReason._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReason.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReason.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReason.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReason.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReason.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReason.Reason">
<summary>
Reason of rejection of the underwriting case. (ReasonOfRejection)..
</summary>
<remarks>Data-source is 'TransRejectionReason.ReasonOfRejection'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReason.LanguageId">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data-source is 'TransRejectionReason.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReason.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransRejectionReason.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReason.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransRejectionReason.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReason.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransRejectionReason.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReason.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransRejectionReason.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReason.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransRejectionReason.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReason.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransRejectionReason.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.Compare(InMotionGIT.Underwriting.Contracts.TransRejectionReason,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransRejectionReasonItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReason.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransRejectionReasonCollection">
 <summary>
 Collection for TransRejectionReason class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReasonCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReasonCollection.AddTransRejectionReason">
 <summary>
 Add an instance of class 'TransRejectionReason' in the TransRejectionReasonCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReasonCollection.Compare(InMotionGIT.Underwriting.Contracts.TransRejectionReasonCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRejectionReasonCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReasonCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRejectionReasonCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType">
 <summary>
 Requirement status descriptions.
 </summary>
<remarks>Data-source is 'TransRequirementStatusType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.CreateNewTransRequirementStatusType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType._RequirementStatus">
<summary>
Requirement Status.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.RequirementStatus">
<summary>
Requirement Status..
</summary>
<remarks>Data-source is 'TransRequirementStatusType.RequirementStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransRequirementStatusType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransRequirementStatusType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransRequirementStatusType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransRequirementStatusType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransRequirementStatusType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransRequirementStatusType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransRequirementStatusType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.Compare(InMotionGIT.Underwriting.Contracts.TransRequirementStatusType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransRequirementStatusTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransRequirementStatusTypeCollection">
 <summary>
 Collection for TransRequirementStatusType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusTypeCollection.AddTransRequirementStatusType">
 <summary>
 Add an instance of class 'TransRequirementStatusType' in the TransRequirementStatusTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransRequirementStatusTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementStatusTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementStatusTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransRequirementType">
 <summary>
 Requirement type descriptions.
 </summary>
<remarks>Data-source is 'TransRequirementType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.CreateNewTransRequirementType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementType._RequirementType">
<summary>
Requirement Type
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRequirementType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.RequirementType">
<summary>
Requirement Type.
</summary>
<remarks>Data-source is 'TransRequirementType.RequirementType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.RequirementTypeEnum">
<summary>
Requirement Type
</summary>
<remarks>This property use a enumeration based on property 'RequirementType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.RequirementTypeEnumText">
<summary>
Requirement Type
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransRequirementType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransRequirementType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransRequirementType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransRequirementType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransRequirementType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransRequirementType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransRequirementType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.Compare(InMotionGIT.Underwriting.Contracts.TransRequirementType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransRequirementTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransRequirementTypeCollection">
 <summary>
 Collection for TransRequirementType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementTypeCollection.AddTransRequirementType">
 <summary>
 Add an instance of class 'TransRequirementType' in the TransRequirementTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransRequirementTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRequirementTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRequirementTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransRestrictionType">
 <summary>
 Restriction type descriptions.
 </summary>
<remarks>Data-source is 'TransRestrictionType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.CreateNewTransRestrictionType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRestrictionType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRestrictionType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRestrictionType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRestrictionType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRestrictionType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRestrictionType._RestrictionType">
<summary>
Restriction Type
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRestrictionType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRestrictionType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRestrictionType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRestrictionType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRestrictionType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRestrictionType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRestrictionType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.RestrictionType">
<summary>
Restriction Type.
</summary>
<remarks>Data-source is 'TransRestrictionType.RestrictionType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.RestrictionTypeEnum">
<summary>
Restriction Type
</summary>
<remarks>This property use a enumeration based on property 'RestrictionType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.RestrictionTypeEnumText">
<summary>
Restriction Type
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransRestrictionType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransRestrictionType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransRestrictionType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransRestrictionType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransRestrictionType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransRestrictionType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransRestrictionType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.Compare(InMotionGIT.Underwriting.Contracts.TransRestrictionType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransRestrictionTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransRestrictionTypeCollection">
 <summary>
 Collection for TransRestrictionType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionTypeCollection.AddTransRestrictionType">
 <summary>
 Add an instance of class 'TransRestrictionType' in the TransRestrictionTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransRestrictionTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRestrictionTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRestrictionTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransRiskClassType">
 <summary>
 Risk classification type descriptions.
 </summary>
<remarks>Data-source is 'TransRiskClassType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.CreateNewTransRiskClassType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRiskClassType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRiskClassType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRiskClassType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRiskClassType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRiskClassType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRiskClassType._RiskClassification">
<summary>
Risk Classification
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRiskClassType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRiskClassType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRiskClassType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRiskClassType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRiskClassType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRiskClassType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRiskClassType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.RiskClassification">
<summary>
Risk Classification (RiskClass)..
</summary>
<remarks>Data-source is 'TransRiskClassType.RiskClass'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransRiskClassType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransRiskClassType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransRiskClassType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransRiskClassType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransRiskClassType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransRiskClassType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransRiskClassType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.Compare(InMotionGIT.Underwriting.Contracts.TransRiskClassType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransRiskClassTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransRiskClassTypeCollection">
 <summary>
 Collection for TransRiskClassType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassTypeCollection.AddTransRiskClassType">
 <summary>
 Add an instance of class 'TransRiskClassType' in the TransRiskClassTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransRiskClassTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRiskClassTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRiskClassTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransRoleType">
 <summary>
 Role type descriptions.
 </summary>
<remarks>Data-source is 'TransRoleType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.CreateNewTransRoleType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRoleType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRoleType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRoleType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRoleType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRoleType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRoleType._RoleCode">
<summary>
Code of the role.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRoleType._LanguageId">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRoleType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRoleType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRoleType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRoleType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRoleType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransRoleType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.RoleCode">
<summary>
Code of the role..
</summary>
<remarks>Data-source is 'TransRoleType.RoleCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.LanguageId">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data-source is 'TransRoleType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransRoleType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransRoleType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransRoleType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransRoleType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransRoleType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransRoleType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.Compare(InMotionGIT.Underwriting.Contracts.TransRoleType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransRoleTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleType.LanguageIdDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransRoleTypeCollection">
 <summary>
 Collection for TransRoleType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleTypeCollection.AddTransRoleType">
 <summary>
 Add an instance of class 'TransRoleType' in the TransRoleTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransRoleTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransRoleTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransRoleTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransStageCase">
 <summary>
 Description of the stages of a case.
 </summary>
<remarks>Data-source is 'TransStageCase'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.CreateNewTransStageCase">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransStageCase._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransStageCase._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransStageCase._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransStageCase._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransStageCase._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransStageCase._Stage">
<summary>
Stage of the case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransStageCase._LanguageId">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransStageCase._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransStageCase._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransStageCase._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransStageCase._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransStageCase._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransStageCase._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.Stage">
<summary>
Stage of the case..
</summary>
<remarks>Data-source is 'TransStageCase.Stage'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.LanguageId">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data-source is 'TransStageCase.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransStageCase.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransStageCase.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransStageCase.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransStageCase.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransStageCase.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransStageCase.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.Compare(InMotionGIT.Underwriting.Contracts.TransStageCase,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransStageCaseItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCase.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCase.LanguageIdDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransStageCaseCollection">
 <summary>
 Collection for TransStageCase class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCaseCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCaseCollection.AddTransStageCase">
 <summary>
 Add an instance of class 'TransStageCase' in the TransStageCaseCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCaseCollection.Compare(InMotionGIT.Underwriting.Contracts.TransStageCaseCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransStageCaseCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCaseCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransStageCaseCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType">
 <summary>
 Undewriting area type descriptions.
 </summary>
<remarks>Data-source is 'TransUnderwritingAreaType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.CreateNewTransUnderwritingAreaType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType._UnderwritingArea">
<summary>
Underwriting Area
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.UnderwritingArea">
<summary>
Underwriting Area.
</summary>
<remarks>Data-source is 'TransUnderwritingAreaType.UnderwritingArea'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.UnderwritingAreaEnum">
<summary>
Underwriting Area
</summary>
<remarks>This property use a enumeration based on property 'UnderwritingArea'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.UnderwritingAreaEnumText">
<summary>
Underwriting Area
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransUnderwritingAreaType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransUnderwritingAreaType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransUnderwritingAreaType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransUnderwritingAreaType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransUnderwritingAreaType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransUnderwritingAreaType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransUnderwritingAreaType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.Compare(InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransUnderwritingAreaTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaTypeCollection">
 <summary>
 Collection for TransUnderwritingAreaType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaTypeCollection.AddTransUnderwritingAreaType">
 <summary>
 Add an instance of class 'TransUnderwritingAreaType' in the TransUnderwritingAreaTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingAreaTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType">
 <summary>
 Underwriting case status descriptions.
 </summary>
<remarks>Data-source is 'TransUnderwritingCaseSType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.CreateNewTransUnderwritingCaseSType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType._UnderwritingCaseStatus">
<summary>
Underwriting Case Status.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.UnderwritingCaseStatus">
<summary>
Underwriting Case Status..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseSType.UnderwritingCaseStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseSType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseSType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseSType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseSType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseSType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseSType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseSType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.Compare(InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransUnderwritingCaseSTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSTypeCollection">
 <summary>
 Collection for TransUnderwritingCaseSType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSTypeCollection.AddTransUnderwritingCaseSType">
 <summary>
 Add an instance of class 'TransUnderwritingCaseSType' in the TransUnderwritingCaseSTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseSTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType">
 <summary>
 Underwriting case type descriptions.
 </summary>
<remarks>Data-source is 'TransUnderwritingCaseType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.CreateNewTransUnderwritingCaseType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType._UnderwritingCaseType">
<summary>
Code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType._LanguageId">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.UnderwritingCaseType">
<summary>
Code..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseType.UnderwritingCaseType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.LanguageId">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransUnderwritingCaseType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.Compare(InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransUnderwritingCaseTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseType.LanguageIdDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseTypeCollection">
 <summary>
 Collection for TransUnderwritingCaseType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseTypeCollection.AddTransUnderwritingCaseType">
 <summary>
 Add an instance of class 'TransUnderwritingCaseType' in the TransUnderwritingCaseTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingCaseTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule">
 <summary>
 Underwriting rule descriptions.
 </summary>
<remarks>Data-source is 'TransUnderwritingRule'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.CreateNewTransUnderwritingRule">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._UnderwritingRuleId">
<summary>
Underwriting rule Id.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._EffectiveDate">
<summary>
Date which from the record is valid.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._LanguageId">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._Explanation">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.UnderwritingRuleId">
<summary>
Underwriting rule Id..
</summary>
<remarks>Data-source is 'TransUnderwritingRule.UnderwritingRuleId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.EffectiveDate">
<summary>
Date which from the record is valid..
</summary>
<remarks>Data-source is 'TransUnderwritingRule.EffectiveDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.LanguageId">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data-source is 'TransUnderwritingRule.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransUnderwritingRule.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransUnderwritingRule.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.Explanation">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransUnderwritingRule.Explanation'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransUnderwritingRule.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransUnderwritingRule.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransUnderwritingRule.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransUnderwritingRule.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.Compare(InMotionGIT.Underwriting.Contracts.TransUnderwritingRule,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransUnderwritingRuleItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRule.LanguageIdDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleCollection">
 <summary>
 Collection for TransUnderwritingRule class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleCollection.AddTransUnderwritingRule">
 <summary>
 Add an instance of class 'TransUnderwritingRule' in the TransUnderwritingRuleCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleCollection.Compare(InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType">
 <summary>
 Underwriting rule status descriptions.
 </summary>
<remarks>Data-source is 'TransUnderwritingRuleSType'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.CreateNewTransUnderwritingRuleSType">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType._UnderwritingRuleStatus">
<summary>
Underwriting Rule Status
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType._LanguageId">
<summary>
Language information.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.UnderwritingRuleStatus">
<summary>
Underwriting Rule Status.
</summary>
<remarks>Data-source is 'TransUnderwritingRuleSType.UnderwritingRuleStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.LanguageId">
<summary>
Language information..
</summary>
<remarks>Data-source is 'TransUnderwritingRuleSType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data-source is 'TransUnderwritingRuleSType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data-source is 'TransUnderwritingRuleSType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'TransUnderwritingRuleSType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'TransUnderwritingRuleSType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'TransUnderwritingRuleSType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'TransUnderwritingRuleSType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.Compare(InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransUnderwritingRuleSTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSType.LanguageIdDescription">
 <summary>
 Language information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSTypeCollection">
 <summary>
 Collection for TransUnderwritingRuleSType class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSTypeCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSTypeCollection.AddTransUnderwritingRuleSType">
 <summary>
 Add an instance of class 'TransUnderwritingRuleSType' in the TransUnderwritingRuleSTypeCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSTypeCollection.Compare(InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSTypeCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSTypeCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSTypeCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.TransUnderwritingRuleSTypeCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.UnderwritingCase">
 <summary>
 Underwriting case.
 </summary>
<remarks>Data-source is 'UnderwritingCase'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.CreateNewUnderwritingCase">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._UnderwritingCaseID">
<summary>
Identification of the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._OpenDate">
<summary>
Date the subscription case was created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._CloseDate">
<summary>
Date the subscription case was closed.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._Status">
<summary>
State of the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._Decision">
<summary>
Decision after evaluating the case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._RiskClassification">
<summary>
Type of risk classification.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._Age">
<summary>
Age of the the principal insured.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._AgeRange">
<summary>
Age range.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._AlarmType">
<summary>
Alarm type associated with the underwirting case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._DOfFlatExtraPremiumDays">
<summary>
Duration of flat extra premium days.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._DOfFlatExtraPremiumMonths">
<summary>
Duration of flat extra premium months.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._DOfFlatExtraPremiumYears">
<summary>
Duration of flat extra premium years.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._FaceAmount">
<summary>
Insured amount of the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._Premium">
<summary>
Premium amount.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._FaceAmountRange">
<summary>
Range of insured amount.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._FlatExtraPremium">
<summary>
Flat extra premium factor.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._Gender">
<summary>
Gender of the client.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._HeightFeet">
<summary>
Height in feet.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._HeightInches">
<summary>
Height in inches.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._HeightMeters">
<summary>
Height in meters.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._WeightKilograms">
<summary>
Weight in kilograms.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._WeightPounds">
<summary>
Weight in pounds.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._TotalCredits">
<summary>
Total amount of credits associated with the underwirting case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._TotalDebits">
<summary>
Total amount of debts associated with the underwirting case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._Balance">
<summary>
Result of total total debts minus total debts.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._UnderwriterID">
<summary>
Subscriber code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._ProposalID">
<summary>
Number identifying the Proposal.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._ManualOrAutomatic">
<summary>
It indicates whether the case was resolved automatically or manually.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._RecordType">
<summary>
Type of Record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._Product">
<summary>
Code of the product.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._CertificateID">
<summary>
Number identifying the certificate.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._TypeOfLineOfBusiness">
<summary>
Code of the type of line of business.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._BatchNumber">
<summary>
Batch number of bulk load.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._Currency">
<summary>
Currency for Insured amount.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._UnderwritingCaseType">
<summary>
Type of subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._DNESequenceId">
<summary>
Sequence identifier for Unstructured Data.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._LastRelease">
<summary>
Last Release
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._LinkRiskInfoView">
<summary>
LinkRiskView
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._LinkRiskInfoEdit">
<summary>
LinkRiskEdit
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._Stage">
<summary>
Stage of the case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._Reason">
<summary>
Reason of rejection of the underwriting case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._LockedBy">
<summary>
Code of the user who locked the underwirting case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._LockedOn">
<summary>
Computer date when the record is locked.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._FullProposalId">
<summary>
Identificación de la solicitud(cotización)
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._AgreedPremium">
<summary>
Prima pactada/proyectada
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._WFInProgress">
<summary>
Determines whether a workflow associated to case is in progress.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._CaseHistory">
<summary>
Underwriting case history.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._Communications">
<summary>
Underwriting case communications.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._Requirements">
<summary>
Underwriting case requirements.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._RolesInCase">
<summary>
Persons or companies related to underwriting case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._UnderwritingCaseLocked">
<summary>
Underwriting case information locked for edit.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCase._UnderwritingCaseRisk">
<summary>
Underwriting case risk information.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.UnderwritingCaseID">
<summary>
Identification of the subscription case..
</summary>
<remarks>Data-source is 'UnderwritingCase.UnderwritingCaseID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.OpenDate">
<summary>
Date the subscription case was created..
</summary>
<remarks>Data-source is 'UnderwritingCase.OpenDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.CloseDate">
<summary>
Date the subscription case was closed..
</summary>
<remarks>Data-source is 'UnderwritingCase.CloseDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Status">
<summary>
State of the subscription case..
</summary>
<remarks>Data-source is 'UnderwritingCase.Status'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.StatusEnum">
<summary>
State of the subscription case.
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.StatusEnumText">
<summary>
State of the subscription case.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Decision">
<summary>
Decision after evaluating the case..
</summary>
<remarks>Data-source is 'UnderwritingCase.Decision'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.DecisionEnum">
<summary>
Decision after evaluating the case.
</summary>
<remarks>This property use a enumeration based on property 'Decision'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.DecisionEnumText">
<summary>
Decision after evaluating the case.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.RiskClassification">
<summary>
Type of risk classification..
</summary>
<remarks>Data-source is 'UnderwritingCase.RiskClassification'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.RiskClassificationEnum">
<summary>
Type of risk classification.
</summary>
<remarks>This property use a enumeration based on property 'RiskClassification'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.RiskClassificationEnumText">
<summary>
Type of risk classification.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Age">
<summary>
Age of the the principal insured..
</summary>
<remarks>Data-source is 'UnderwritingCase.Age'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.AgeRange">
<summary>
Age range..
</summary>
<remarks>Data-source is 'UnderwritingCase.AgeRange'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.AlarmType">
<summary>
Alarm type associated with the underwirting case..
</summary>
<remarks>Data-source is 'UnderwritingCase.AlarmType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.AlarmTypeEnum">
<summary>
Alarm type associated with the underwirting case.
</summary>
<remarks>This property use a enumeration based on property 'AlarmType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.AlarmTypeEnumText">
<summary>
Alarm type associated with the underwirting case.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.DOfFlatExtraPremiumDays">
<summary>
Duration of flat extra premium days..
</summary>
<remarks>Data-source is 'UnderwritingCase.DOfFlatExtraPremiumDays'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.DOfFlatExtraPremiumMonths">
<summary>
Duration of flat extra premium months..
</summary>
<remarks>Data-source is 'UnderwritingCase.DOfFlatExtraPremiumMonths'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.DOfFlatExtraPremiumYears">
<summary>
Duration of flat extra premium years..
</summary>
<remarks>Data-source is 'UnderwritingCase.DOfFlatExtraPremiumYears'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.FaceAmount">
<summary>
Insured amount of the subscription case..
</summary>
<remarks>Data-source is 'UnderwritingCase.FaceAmount'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Premium">
<summary>
Premium amount..
</summary>
<remarks>Data-source is 'UnderwritingCase.Premium'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.FaceAmountRange">
<summary>
Range of insured amount..
</summary>
<remarks>Data-source is 'UnderwritingCase.FaceAmountRange'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.FlatExtraPremium">
<summary>
Flat extra premium factor..
</summary>
<remarks>Data-source is 'UnderwritingCase.FlatExtraPremium'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Gender">
<summary>
Gender of the client..
</summary>
<remarks>Data-source is 'UnderwritingCase.Gender'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.GenderEnum">
<summary>
Gender of the client.
</summary>
<remarks>This property use a enumeration based on property 'Gender'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.GenderEnumText">
<summary>
Gender of the client.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.HeightFeet">
<summary>
Height in feet..
</summary>
<remarks>Data-source is 'UnderwritingCase.HeightFeet'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.HeightInches">
<summary>
Height in inches..
</summary>
<remarks>Data-source is 'UnderwritingCase.HeightInches'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.HeightMeters">
<summary>
Height in meters..
</summary>
<remarks>Data-source is 'UnderwritingCase.HeightMeters'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.WeightKilograms">
<summary>
Weight in kilograms..
</summary>
<remarks>Data-source is 'UnderwritingCase.WeightKilograms'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.WeightPounds">
<summary>
Weight in pounds..
</summary>
<remarks>Data-source is 'UnderwritingCase.WeightPounds'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.TotalCredits">
<summary>
Total amount of credits associated with the underwirting case..
</summary>
<remarks>Data-source is 'UnderwritingCase.TotalCredits'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.TotalDebits">
<summary>
Total amount of debts associated with the underwirting case..
</summary>
<remarks>Data-source is 'UnderwritingCase.TotalDebits'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Balance">
<summary>
Result of total total debts minus total debts..
</summary>
<remarks>Data-source is 'UnderwritingCase.Balance'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.UnderwriterID">
<summary>
Subscriber code..
</summary>
<remarks>Data-source is 'UnderwritingCase.UnderwriterID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.ProposalID">
<summary>
Number identifying the Proposal..
</summary>
<remarks>Data-source is 'UnderwritingCase.ProposalID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.ManualOrAutomatic">
<summary>
It indicates whether the case was resolved automatically or manually..
</summary>
<remarks>Data-source is 'UnderwritingCase.ManualOrAutomatic'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.ManualOrAutomaticEnum">
<summary>
It indicates whether the case was resolved automatically or manually.
</summary>
<remarks>This property use a enumeration based on property 'ManualOrAutomatic'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.ManualOrAutomaticEnumText">
<summary>
It indicates whether the case was resolved automatically or manually.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.RecordType">
<summary>
Type of Record..
</summary>
<remarks>Data-source is 'UnderwritingCase.RecordType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.RecordTypeEnum">
<summary>
Type of Record.
</summary>
<remarks>This property use a enumeration based on property 'RecordType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.RecordTypeEnumText">
<summary>
Type of Record.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.LineOfBusiness">
<summary>
Code of the line of business..
</summary>
<remarks>Data-source is 'UnderwritingCase.LineOfBusiness'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Product">
<summary>
Code of the product..
</summary>
<remarks>Data-source is 'UnderwritingCase.Product'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application..
</summary>
<remarks>Data-source is 'UnderwritingCase.PolicyID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.CertificateID">
<summary>
Number identifying the certificate..
</summary>
<remarks>Data-source is 'UnderwritingCase.CertificateID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.TypeOfLineOfBusiness">
<summary>
Code of the type of line of business..
</summary>
<remarks>Data-source is 'UnderwritingCase.TypeOfLineOfBusiness'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.BatchNumber">
<summary>
Batch number of bulk load..
</summary>
<remarks>Data-source is 'UnderwritingCase.BatchNumber'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Currency">
<summary>
Currency for Insured amount..
</summary>
<remarks>Data-source is 'UnderwritingCase.Currency'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.UnderwritingCaseType">
<summary>
Type of subscription case..
</summary>
<remarks>Data-source is 'UnderwritingCase.UnderwritingCaseType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.DNESequenceId">
<summary>
Sequence identifier for Unstructured Data..
</summary>
<remarks>Data-source is 'UnderwritingCase.DNESequenceId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.LastRelease">
<summary>
Last Release.
</summary>
<remarks>Data-source is 'UnderwritingCase.LastRelease'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.LinkRiskInfoView">
<summary>
LinkRiskView.
</summary>
<remarks>Data-source is 'UnderwritingCase.LinkRiskInfoView'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.LinkRiskInfoEdit">
<summary>
LinkRiskEdit.
</summary>
<remarks>Data-source is 'UnderwritingCase.LinkRiskInfoEdit'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Stage">
<summary>
Stage of the case..
</summary>
<remarks>Data-source is 'UnderwritingCase.Stage'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Reason">
<summary>
Reason of rejection of the underwriting case. (ReasonOfRejection)..
</summary>
<remarks>Data-source is 'UnderwritingCase.ReasonOfRejection'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.LockedBy">
<summary>
Code of the user who locked the underwirting case..
</summary>
<remarks>Data-source is 'UnderwritingCase.LockedBy'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.LockedOn">
<summary>
Computer date when the record is locked..
</summary>
<remarks>Data-source is 'UnderwritingCase.LockedOn'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'UnderwritingCase.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'UnderwritingCase.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'UnderwritingCase.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'UnderwritingCase.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.FullProposalId">
<summary>
Identificación de la solicitud(cotización).
</summary>
<remarks>Data-source is 'UnderwritingCase.FullProposalId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.AgreedPremium">
<summary>
Prima pactada/proyectada.
</summary>
<remarks>Data-source is 'UnderwritingCase.AgreedPremium'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.WFInProgress">
<summary>
Determines whether a workflow associated to case is in progress..
</summary>
<remarks>Data-source is 'UnderwritingCase.WFInProgress'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.NewCaseHistoryInstance">
<summary>
Initializes the 'CaseHistory' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.NewCaseHistoryItem(System.Boolean)">
<summary>
Add a new item to the collection of 'CaseHistory', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'CaseHistory' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.CaseHistory">
<summary>
Underwriting case history. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.NewCommunicationsInstance">
<summary>
Initializes the 'Communications' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.NewCommunicationItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Communications', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'Communication' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Communications">
<summary>
Underwriting case communications. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.NewRequirementsInstance">
<summary>
Initializes the 'Requirements' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.NewRequirementItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Requirements', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'Requirement' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Requirements">
<summary>
Underwriting case requirements. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.NewRolesInCaseInstance">
<summary>
Initializes the 'RolesInCase' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.NewRoleInCaseItem(System.Boolean)">
<summary>
Add a new item to the collection of 'RolesInCase', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'RoleInCase' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.RolesInCase">
<summary>
Persons or companies related to underwriting case. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.NewUnderwritingCaseLockedInstance">
<summary>
Initializes the 'UnderwritingCaseLocked' instance.
</summary>
 <returns>The 'UnderwritingCaseLocked' class instance.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.UnderwritingCaseLocked">
<summary>
Underwriting case information locked for edit. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.NewUnderwritingCaseRiskInstance">
<summary>
Initializes the 'UnderwritingCaseRisk' collection.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.NewUnderwritingCaseRiskItem(System.Boolean)">
<summary>
Add a new item to the collection of 'UnderwritingCaseRisk', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'UnderwritingCaseRisk' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.UnderwritingCaseRisk">
<summary>
Underwriting case risk information. collection.
</summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Compare(InMotionGIT.Underwriting.Contracts.UnderwritingCase,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="UnderwritingCaseItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCase.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.StatusDescription">
 <summary>
 State of the subscription case.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingCaseSType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.DecisionDescription">
 <summary>
 Decision after evaluating the case.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabDecisionType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.RiskClassificationDescription">
 <summary>
 Type of risk classification.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRiskClassType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.AlarmTypeDescription">
 <summary>
 Alarm type associated with the underwirting case.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabAlarmType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.GenderDescription">
 <summary>
 Gender of the client.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabGender'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.ManualOrAutomaticDescription">
 <summary>
 It indicates whether the case was resolved automatically or manually.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabManualOrAutomaticType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.CurrencyDescription">
 <summary>
 Currency for Insured amount.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabCurrency'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.UnderwritingCaseTypeDescription">
 <summary>
 Type of subscription case.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingCaseType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.StageDescription">
 <summary>
 Stage of the case.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabStageCase'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.ReasonDescription">
 <summary>
 Reason of rejection of the underwriting case.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRejectionReason'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.CurrentRequirementID">
 <summary>
 Gets or sets the current requirement id selected
 </summary>
 <remarks>
 This property will help to get the current selected requirement information
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.Restrictions">
 <summary>
 Genera un colección basado en todas las restricciones que aplicada por las reglas a los requerimientos.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.RequirementPendingLinks">
 <summary>
 Lista de requerimiento pendiente para el caso en forma de enlaces del tipo HTML.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.RequirementTranslatedLinks">
 <summary>
 Lista de requerimiento pendiente para el rol del caso en forma de enlaces del tipo HTML, con descripcion en idioma español.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.NewVersionOfRiskInformation">
 <summary>
 Permite indicar si se debe crear una nueva version el objecto riskinformation.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.NewVersionDescription">
 <summary>
 Descripción usada en al creación de la una nueva version el objecto riskinformation.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.HistoryType">
 <summary>
 Permite indicar si el movimiento en la historia al guardar el caso es manual o automático.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCase.CaseEdited">
 <summary>
 Permite saber si el caso ha sido editado en alguna oportunidad.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection">
 <summary>
 Collection for UnderwritingCase class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection.AddUnderwritingCase">
 <summary>
 Add an instance of class 'UnderwritingCase' in the UnderwritingCaseCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection.Compare(InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide">
 <summary>
 Underwriting cases (documents ) of a guide.
 </summary>
<remarks>Data-source is 'UnderwritingCaseGuide'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.CreateNewUnderwritingCaseGuide">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._UnderwritingCaseID">
<summary>
Identification of the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._GuideId">
<summary>
Guide Id
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._Codeofguidetype">
<summary>
Code of guide type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._ID">
<summary>
Consecutive
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._Location">
<summary>
Location of the case
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._LocationDate">
<summary>
Location date of the case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.UnderwritingCaseID">
<summary>
Identification of the subscription case..
</summary>
<remarks>Data-source is 'UnderwritingCaseGuide.UnderwritingCaseID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.GuideId">
<summary>
Guide Id.
</summary>
<remarks>Data-source is 'UnderwritingCaseGuide.GuideId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.Codeofguidetype">
<summary>
Code of guide type. (GuideType)..
</summary>
<remarks>Data-source is 'UnderwritingCaseGuide.GuideType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.ID">
<summary>
Consecutive.
</summary>
<remarks>Data-source is 'UnderwritingCaseGuide.ID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.Location">
<summary>
Location of the case (LocationCase)..
</summary>
<remarks>Data-source is 'UnderwritingCaseGuide.LocationCase'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.LocationDate">
<summary>
Location date of the case..
</summary>
<remarks>Data-source is 'UnderwritingCaseGuide.LocationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'UnderwritingCaseGuide.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'UnderwritingCaseGuide.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'UnderwritingCaseGuide.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'UnderwritingCaseGuide.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.Compare(InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="UnderwritingCaseGuideItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuide.LocationDescription">
 <summary>
 Location of the case
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLocationCase'.
 </remarks>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuideCollection">
 <summary>
 Collection for UnderwritingCaseGuide class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuideCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuideCollection.AddUnderwritingCaseGuide">
 <summary>
 Add an instance of class 'UnderwritingCaseGuide' in the UnderwritingCaseGuideCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuideCollection.Compare(InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuideCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuideCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuideCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseGuideCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked">
 <summary>
 Underwriting case information locked for edit.
 </summary>
<remarks>Data-source is 'UnderwritingCaseLocked'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.CreateNewUnderwritingCaseLocked">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked._UnderwritingCaseID">
<summary>
Identification of the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked._LockedRecord">
<summary>
Full information on the subscription case during the editing process.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.UnderwritingCaseID">
<summary>
Identification of the subscription case..
</summary>
<remarks>Data-source is 'UnderwritingCaseLocked.UnderwritingCaseID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.LockedRecord">
<summary>
Full information on the subscription case during the editing process..
</summary>
<remarks>Data-source is 'UnderwritingCaseLocked.LockedRecord'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.Compare(InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="UnderwritingCaseLockedItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLocked.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLockedCollection">
 <summary>
 Collection for UnderwritingCaseLocked class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLockedCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLockedCollection.AddUnderwritingCaseLocked">
 <summary>
 Add an instance of class 'UnderwritingCaseLocked' in the UnderwritingCaseLockedCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLockedCollection.Compare(InMotionGIT.Underwriting.Contracts.UnderwritingCaseLockedCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLockedCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLockedCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseLockedCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk">
 <summary>
 Underwriting case risk information.
 </summary>
<remarks>Data-source is 'UnderwritingCaseRisk'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.CreateNewUnderwritingCaseRisk">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._UnderwritingCaseID">
<summary>
Identification of the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._Release">
<summary>
Release
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._ReleaseDate">
<summary>
ReleaseDate
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._RequirementId">
<summary>
RequirementId
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._Description">
<summary>
Description associated with the relase.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._RiskInformationData">
<summary>
Full policy information used during the subscription process.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._RiskInformationDataBinary">
<summary>
Full policy information in binary used during the subscription process.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk._RiskInformationDataBinaryPath">
<summary>
This property defines the path of the file that I want to load the byte vector of 'Full policy information in binary used during the subscription process.'
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.UnderwritingCaseID">
<summary>
Identification of the subscription case..
</summary>
<remarks>Data-source is 'UnderwritingCaseRisk.UnderwritingCaseID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.Release">
<summary>
Release.
</summary>
<remarks>Data-source is 'UnderwritingCaseRisk.Release'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.ReleaseDate">
<summary>
ReleaseDate.
</summary>
<remarks>Data-source is 'UnderwritingCaseRisk.ReleaseDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.RequirementId">
<summary>
RequirementId.
</summary>
<remarks>Data-source is 'UnderwritingCaseRisk.RequirementId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.Description">
<summary>
Description associated with the relase..
</summary>
<remarks>Data-source is 'UnderwritingCaseRisk.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.RiskInformationData">
<summary>
Full policy information used during the subscription process..
</summary>
<remarks>Data-source is 'UnderwritingCaseRisk.RiskInformationData'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'UnderwritingCaseRisk.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'UnderwritingCaseRisk.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'UnderwritingCaseRisk.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'UnderwritingCaseRisk.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.RiskInformationDataBinary">
<summary>
Full policy information in binary used during the subscription process..
</summary>
<remarks>Data-source is 'UnderwritingCaseRisk.RiskInformationDataBinary'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.RiskInformationDataBinaryPath">
<summary>
This property defines the path of the file that I want to load the byte vector of 'RiskInformationDataBinary'
</summary>
<remarks>Data-source is 'UnderwritingCaseRisk.RiskInformationDataBinary'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.Compare(InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="UnderwritingCaseRiskItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRisk.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRiskCollection">
 <summary>
 Collection for UnderwritingCaseRisk class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRiskCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRiskCollection.AddUnderwritingCaseRisk">
 <summary>
 Add an instance of class 'UnderwritingCaseRisk' in the UnderwritingCaseRiskCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRiskCollection.Compare(InMotionGIT.Underwriting.Contracts.UnderwritingCaseRiskCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRiskCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRiskCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingCaseRiskCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.UnderwritingRule">
 <summary>
 Underwriting case rules.
 </summary>
<remarks>Data-source is 'UnderwritingRule'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.CreateNewUnderwritingRule">
 <summary>
 It will initialize an instance of the current object and set the object´s state for Insert operation
 </summary>
 <returns>An instance of the object.</returns>
 <remarks> </remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._UnderwritingCaseID">
<summary>
Identification of the subscription case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._RequirementID">
<summary>
Identification requirement.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._UnderRuleId">
<summary>
Under Rule Id
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._AlarmType">
<summary>
Alarm type associated with the rule.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._AutomaticPoints">
<summary>
Automatic Points
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._Commentary">
<summary>
Commentary.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._Coverage">
<summary>
Code of the coverage.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._DebitOrCredit">
<summary>
Debit Or Credit
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._DurationOfFlatExtraPremiumDays">
<summary>
Duration of flat extra premium days.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._DurationOfFlatExtraPremiumMonths">
<summary>
Duration of flat extra premium months.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._DurationOfFlatExtraPremiumYears">
<summary>
Duration of flat extra premium years.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._ExclusionType">
<summary>
Exclusion Type
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._Explanation">
<summary>
Explanation.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._FinalPoints">
<summary>
Final Points
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._FlatExtraPremium">
<summary>
Flat Extra Premium
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._ImpairmentCode">
<summary>
Impairment Code
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._ManualOrAutomatic">
<summary>
Indicator of whether the source of the information is manually or automatically.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._ManualPoints">
<summary>
Manual Points
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._RuleDescription">
<summary>
Rule Description
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._TimeStamp">
<summary>
Time Stamp
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._UnderwritingRuleId">
<summary>
Underwriting Rule Id
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._WaitingPeriodDays">
<summary>
Waiting period days.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._WaitingPeriodMonths">
<summary>
Waiting period months.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._WaitingPeriodYears">
<summary>
Waiting period years.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._ExclusionPeriodType">
<summary>
Exclusion Period Type
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._QuestionId">
<summary>
Question Id
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._UnderwritingArea">
<summary>
Subscription area (medical, financial, etc.).
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._MaximumInsuredAmount">
<summary>
Maximum Insured Amount
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._DegreeId">
<summary>
Degree Id
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._Decision">
<summary>
Decision after evaluating the case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._LineOfBusiness">
<summary>
Code of the line of business.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._Product">
<summary>
Code of the product.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._ProductModule">
<summary>
Product Module
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._Discountorextrapremiumcode">
<summary>
Discount or extra premium code.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._ExtraPremiumPercentage">
<summary>
Extra Premium Percentage
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._RatingTable">
<summary>
Rating Table
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._CurrencyCode">
<summary>
Code of the cuerrency.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._DiscountOrExtraPremiumType">
<summary>
Type of element of Extra-premium, discount or tax
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._RestrictionType">
<summary>
Restriction Type.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._RoleCode">
<summary>
Code of teh role.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._Stage">
<summary>
Stage of the case.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._CreatedBy">
<summary>
User o app
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._Status">
<summary>
State of the rule.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._Cause">
<summary>
Cause or reason for exclusion of the illness.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._ExcludedIllness">
<summary>
Excluded Ilness
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._ClientID">
<summary>
Client ID of the underwriting rule.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._Answer">
<summary>
Answer Rule.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._ExclusionClientID">
<summary>
Client ID excluded from the policy
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._XPremiumDiscountOnlyInsured">
<summary>
Indicates if the surcharge/discount applies for the insured
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._UpdateOnlyAssociatedRisk">
<summary>
Indicates if the rule only modify the associated risk.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._StatusCase">
<summary>
Status of the case after applying the rule.
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._TypeofUnit">
<summary>
Type of Unit
</summary>
</member>
<member name="F:InMotionGIT.Underwriting.Contracts.UnderwritingRule._ConsequenceId">
<summary>
Consequence Id DNE
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.UnderwritingCaseID">
<summary>
Identification of the subscription case..
</summary>
<remarks>Data-source is 'UnderwritingRule.UnderwritingCaseID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.RequirementID">
<summary>
Identification requirement..
</summary>
<remarks>Data-source is 'UnderwritingRule.RequirementID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.UnderRuleId">
<summary>
Under Rule Id.
</summary>
<remarks>Data-source is 'UnderwritingRule.UnderRuleId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.AlarmType">
<summary>
Alarm type associated with the rule..
</summary>
<remarks>Data-source is 'UnderwritingRule.AlarmType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.AlarmTypeEnum">
<summary>
Alarm type associated with the rule.
</summary>
<remarks>This property use a enumeration based on property 'AlarmType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.AlarmTypeEnumText">
<summary>
Alarm type associated with the rule.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.AutomaticPoints">
<summary>
Automatic Points.
</summary>
<remarks>Data-source is 'UnderwritingRule.AutomaticPoints'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.Commentary">
<summary>
Commentary..
</summary>
<remarks>Data-source is 'UnderwritingRule.Commentary'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.Coverage">
<summary>
Code of the coverage..
</summary>
<remarks>Data-source is 'UnderwritingRule.Coverage'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DebitOrCredit">
<summary>
Debit Or Credit.
</summary>
<remarks>Data-source is 'UnderwritingRule.DebitOrCredit'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DebitOrCreditEnum">
<summary>
Debit Or Credit
</summary>
<remarks>This property use a enumeration based on property 'DebitOrCredit'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DebitOrCreditEnumText">
<summary>
Debit Or Credit
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DurationOfFlatExtraPremiumDays">
<summary>
Duration of flat extra premium days. (DOfFlatExtraPremiumDays)..
</summary>
<remarks>Data-source is 'UnderwritingRule.DOfFlatExtraPremiumDays'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DurationOfFlatExtraPremiumMonths">
<summary>
Duration of flat extra premium months. (DOfFlatExtraPremiumMonths)..
</summary>
<remarks>Data-source is 'UnderwritingRule.DOfFlatExtraPremiumMonths'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DurationOfFlatExtraPremiumYears">
<summary>
Duration of flat extra premium years. (DOfFlatExtraPremiumYears)..
</summary>
<remarks>Data-source is 'UnderwritingRule.DOfFlatExtraPremiumYears'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ExclusionType">
<summary>
Exclusion Type.
</summary>
<remarks>Data-source is 'UnderwritingRule.ExclusionType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ExclusionTypeEnum">
<summary>
Exclusion Type
</summary>
<remarks>This property use a enumeration based on property 'ExclusionType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ExclusionTypeEnumText">
<summary>
Exclusion Type
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.Explanation">
<summary>
Explanation..
</summary>
<remarks>Data-source is 'UnderwritingRule.Explanation'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.FinalPoints">
<summary>
Final Points.
</summary>
<remarks>Data-source is 'UnderwritingRule.FinalPoints'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.FlatExtraPremium">
<summary>
Flat Extra Premium.
</summary>
<remarks>Data-source is 'UnderwritingRule.FlatExtraPremium'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ImpairmentCode">
<summary>
Impairment Code.
</summary>
<remarks>Data-source is 'UnderwritingRule.ImpairmentCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ManualOrAutomatic">
<summary>
Indicator of whether the source of the information is manually or automatically..
</summary>
<remarks>Data-source is 'UnderwritingRule.ManualOrAutomatic'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ManualOrAutomaticEnum">
<summary>
Indicator of whether the source of the information is manually or automatically.
</summary>
<remarks>This property use a enumeration based on property 'ManualOrAutomatic'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ManualOrAutomaticEnumText">
<summary>
Indicator of whether the source of the information is manually or automatically.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ManualPoints">
<summary>
Manual Points.
</summary>
<remarks>Data-source is 'UnderwritingRule.ManualPoints'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.RuleDescription">
<summary>
Rule Description.
</summary>
<remarks>Data-source is 'UnderwritingRule.RuleDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.TimeStamp">
<summary>
Time Stamp.
</summary>
<remarks>Data-source is 'UnderwritingRule.TimeStamp'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.UnderwritingRuleId">
<summary>
Underwriting Rule Id.
</summary>
<remarks>Data-source is 'UnderwritingRule.UnderwritingRuleId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.WaitingPeriodDays">
<summary>
Waiting period days..
</summary>
<remarks>Data-source is 'UnderwritingRule.WaitingPeriodDays'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.WaitingPeriodMonths">
<summary>
Waiting period months..
</summary>
<remarks>Data-source is 'UnderwritingRule.WaitingPeriodMonths'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.WaitingPeriodYears">
<summary>
Waiting period years..
</summary>
<remarks>Data-source is 'UnderwritingRule.WaitingPeriodYears'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ExclusionPeriodType">
<summary>
Exclusion Period Type.
</summary>
<remarks>Data-source is 'UnderwritingRule.ExclusionPeriodType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ExclusionPeriodTypeEnum">
<summary>
Exclusion Period Type
</summary>
<remarks>This property use a enumeration based on property 'ExclusionPeriodType'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ExclusionPeriodTypeEnumText">
<summary>
Exclusion Period Type
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.QuestionId">
<summary>
Question Id.
</summary>
<remarks>Data-source is 'UnderwritingRule.QuestionId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.UnderwritingArea">
<summary>
Subscription area (medical, financial, etc.)..
</summary>
<remarks>Data-source is 'UnderwritingRule.UnderwritingArea'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.UnderwritingAreaEnum">
<summary>
Subscription area (medical, financial, etc.).
</summary>
<remarks>This property use a enumeration based on property 'UnderwritingArea'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.UnderwritingAreaEnumText">
<summary>
Subscription area (medical, financial, etc.).
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.MaximumInsuredAmount">
<summary>
Maximum Insured Amount.
</summary>
<remarks>Data-source is 'UnderwritingRule.MaximumInsuredAmount'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DegreeId">
<summary>
Degree Id.
</summary>
<remarks>Data-source is 'UnderwritingRule.DegreeId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.Decision">
<summary>
Decision after evaluating the case..
</summary>
<remarks>Data-source is 'UnderwritingRule.Decision'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DecisionEnum">
<summary>
Decision after evaluating the case.
</summary>
<remarks>This property use a enumeration based on property 'Decision'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DecisionEnumText">
<summary>
Decision after evaluating the case.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.LineOfBusiness">
<summary>
Code of the line of business..
</summary>
<remarks>Data-source is 'UnderwritingRule.LineOfBusiness'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.Product">
<summary>
Code of the product..
</summary>
<remarks>Data-source is 'UnderwritingRule.Product'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ProductModule">
<summary>
Product Module.
</summary>
<remarks>Data-source is 'UnderwritingRule.ProductModule'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.Discountorextrapremiumcode">
<summary>
Discount or extra premium code..
</summary>
<remarks>Data-source is 'UnderwritingRule.DiscountOrExtraPremiumCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ExtraPremiumPercentage">
<summary>
Extra Premium Percentage.
</summary>
<remarks>Data-source is 'UnderwritingRule.ExtraPremiumPercentage'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.RatingTable">
<summary>
Rating Table.
</summary>
<remarks>Data-source is 'UnderwritingRule.RatingTable'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.CurrencyCode">
<summary>
Code of the cuerrency..
</summary>
<remarks>Data-source is 'UnderwritingRule.CurrencyCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DiscountOrExtraPremiumType">
<summary>
Type of element of Extra-premium, discount or tax.
</summary>
<remarks>Data-source is 'UnderwritingRule.DiscountOrExtraPremiumType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.RestrictionType">
<summary>
Restriction Type..
</summary>
<remarks>Data-source is 'UnderwritingRule.RestrictionType'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.RoleCode">
<summary>
Code of teh role..
</summary>
<remarks>Data-source is 'UnderwritingRule.RoleCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.Stage">
<summary>
Stage of the case..
</summary>
<remarks>Data-source is 'UnderwritingRule.Stage'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.CreatedBy">
<summary>
User o app.
</summary>
<remarks>Data-source is 'UnderwritingRule.CreatedBy'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.Status">
<summary>
State of the rule..
</summary>
<remarks>Data-source is 'UnderwritingRule.Status'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.StatusEnum">
<summary>
State of the rule.
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.StatusEnumText">
<summary>
State of the rule.
</summary>
<remarks>This helper property is used in decision table on Workflows</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.Cause">
<summary>
Cause or reason for exclusion of the illness. (ExclusionCause)..
</summary>
<remarks>Data-source is 'UnderwritingRule.ExclusionCause'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ExcludedIllness">
<summary>
Excluded Ilness.
</summary>
<remarks>Data-source is 'UnderwritingRule.ExcludedIllness'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ClientID">
<summary>
Client ID of the underwriting rule..
</summary>
<remarks>Data-source is 'UnderwritingRule.ClientID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.Answer">
<summary>
Answer Rule..
</summary>
<remarks>Data-source is 'UnderwritingRule.Answer'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ExclusionClientID">
<summary>
Client ID excluded from the policy.
</summary>
<remarks>Data-source is 'UnderwritingRule.ExclusionClientID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data-source is 'UnderwritingRule.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data-source is 'UnderwritingRule.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data-source is 'UnderwritingRule.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data-source is 'UnderwritingRule.UpdateDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.XPremiumDiscountOnlyInsured">
<summary>
Indicates if the surcharge/discount applies for the insured.
</summary>
<remarks>Data-source is 'UnderwritingRule.XPremiumDiscountOnlyInsured'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.UpdateOnlyAssociatedRisk">
<summary>
Indicates if the rule only modify the associated risk..
</summary>
<remarks>Data-source is 'UnderwritingRule.UpdateOnlyAssociatedRisk'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.StatusCase">
<summary>
Status of the case after applying the rule..
</summary>
<remarks>Data-source is 'UnderwritingRule.StatusCase'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.TypeofUnit">
<summary>
Type of Unit.
</summary>
<remarks>Data-source is 'UnderwritingRule.TypeOfUnit'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ConsequenceId">
<summary>
Consequence Id DNE.
</summary>
<remarks>Data-source is 'UnderwritingRule.ConsequenceId'.</remarks>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.Compare(InMotionGIT.Underwriting.Contracts.UnderwritingRule,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="UnderwritingRuleItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRule.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.AlarmTypeDescription">
 <summary>
 Alarm type associated with the rule.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabAlarmType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DebitOrCreditDescription">
 <summary>
 Debit Or Credit
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabDebitOrCreditType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ExclusionTypeDescription">
 <summary>
 Exclusion Type
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabExclusionType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ImpairmentCodeDescription">
 <summary>
 Impairment Code
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabIllnessType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ManualOrAutomaticDescription">
 <summary>
 Indicator of whether the source of the information is manually or automatically.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabManualOrAutomaticType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.UnderwritingRuleIdDescription">
 <summary>
 Underwriting Rule Id
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingRule'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ExclusionPeriodTypeDescription">
 <summary>
 Exclusion Period Type
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabExclusionPeriodType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.QuestionIdDescription">
 <summary>
 Question Id
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabQuestionsFromRequirement'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.UnderwritingAreaDescription">
 <summary>
 Subscription area (medical, financial, etc.).
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingAreaType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DegreeIdDescription">
 <summary>
 Degree Id
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabDegree'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DecisionDescription">
 <summary>
 Decision after evaluating the case.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabDecisionType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.CurrencyCodeDescription">
 <summary>
 Code of the cuerrency.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabCurrency'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DiscountOrExtraPremiumTypeDescription">
 <summary>
 Type of element of Extra-premium, discount or tax
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabDiscountOrExtraPremium'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.RestrictionTypeDescription">
 <summary>
 Restriction Type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRestrictionType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.RoleCodeDescription">
 <summary>
 Code of teh role.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRoleType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.StageDescription">
 <summary>
 Stage of the case.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabStageCase'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.StatusDescription">
 <summary>
 State of the rule.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingRuleSType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.StatusCaseDescription">
 <summary>
 Status of the case after applying the rule.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabUnderwritingCaseSType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.RequirementType">
<summary>
Requirement Type
</summary>
<remarks>Datasource is 'Requirement.RequirementType' from 'C:\InMotionGITServices\Underwriting Services\Database Model\Underwriting.erwin' version.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.IsManualRule">
 <summary>
 Validates if it is a manual rule
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.TemporalRuleDescription">
 <summary>
 Gets or sets the temporal rule description (For internal use only.)
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.RequirementTypeByLanguage">
 <summary>
 Gets the requirement type in a given language
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ExclusionTypeByLanguage">
 <summary>
 Gets the Exclusion type in a given language
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ModuleByLanguage">
 <summary>
 Gets the Module in a given language
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.CoverageByLanguage">
 <summary>
 Gets the Coverage in a given language
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.CauseByLanguage">
 <summary>
 Gets the Cause in a given language
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.RateByLanguage">
 <summary>
 Gets the Rating in a given language
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.DiscountOrExtraPremiumDescription">
 <summary>
 Gets the Extra Premium Description in a given language
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.EncodedExplanation">
 <summary>
 Gets or sets Encoded Explanation (For internal use only.)
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.ExcludedIllnessDescription">
 <summary>
 Gets the ExclusionIllness type in a given language
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRule.TokenToDNE">
<summary>
Automatic Points
</summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.UnderwritingRuleCollection">
 <summary>
 Collection for UnderwritingRule class
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRuleCollection.Clone">
 <summary>
 Creates a new collection that is a copy of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRuleCollection.AddUnderwritingRule">
 <summary>
 Add an instance of class 'UnderwritingRule' in the UnderwritingRuleCollection.
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRuleCollection.Compare(InMotionGIT.Underwriting.Contracts.UnderwritingRuleCollection,System.Boolean,System.Boolean)">
 <summary>
 Compare a collection, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="items">Collection to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.UnderwritingRuleCollection.IsDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <value>true if the object is modified; otherwise, false.</value>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRuleCollection.SaveIntance">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
</member>
<member name="M:InMotionGIT.Underwriting.Contracts.UnderwritingRuleCollection.RestoreIntance">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
</member>
<member name="T:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase">
 <summary>
 General information on cases of existing subscription.
 </summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.UnderwritingCaseID">
<summary>
Identification of the subscription case.
</summary>
<remarks>Datasource is 'UnderwritingCase.UnderwritingCaseID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.OpenDate">
<summary>
Fecha en que fue creado el caso.
</summary>
<remarks>Datasource is 'UnderwritingCase.OpenDate'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.UnderwriterID">
<summary>
.
</summary>
<remarks>Datasource is 'UnderwritingCase.UnderwriterID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.ClientID">
<summary>
Code of the client.
</summary>
<remarks>Datasource is 'RoleInCase.ClientID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.ClientName">
<summary>
Complete name of the client.
</summary>
<remarks>Datasource is 'RoleInCase.ClientName'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.Decision">
<summary>
Decisión tomada despues de evaluar 
</summary>
<remarks>Datasource is 'UnderwritingCase.Decision'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.LineOfBusiness">
<summary>
Code of the line of business.
</summary>
<remarks>Datasource is 'UnderwritingCase.LineOfBusiness'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.Product">
<summary>
Code of the product.
</summary>
<remarks>Datasource is 'UnderwritingCase.Product'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.ProposalID">
<summary>
.
</summary>
<remarks>Datasource is 'UnderwritingCase.ProposalID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.FullProposalId">
<summary>
.
</summary>
<remarks>Datasource is 'UnderwritingCase.FullProposalId'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.PolicyID">
<summary>
Number identifying the Policy/Quotation/Application.
</summary>
<remarks>Datasource is 'UnderwritingCase.PolicyID'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.FaceAmount">
<summary>
Insured amount of the subscription case.
</summary>
<remarks>Datasource is 'UnderwritingCase.FaceAmount'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.LockedBy">
<summary>
.
</summary>
<remarks>Datasource is 'UnderwritingCase.LockedBy'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.TypeOfLineOfBusiness">
<summary>
Code of the type of line of business.
</summary>
<remarks>Datasource is 'UnderwritingCase.TypeOfLineOfBusiness'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.ManualOrAutomatic">
<summary>
.
</summary>
<remarks>Datasource is 'UnderwritingCase.ManualOrAutomatic'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.Status">
<summary>
Estado del ca
</summary>
<remarks>Datasource is 'UnderwritingCase.Status'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.IsLocked">
<summary>
.
</summary>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.Role">
<summary>
Role of the client in the subscription case.
</summary>
<remarks>Datasource is 'RoleInCase.Role'.</remarks>
</member>
<member name="P:InMotionGIT.Underwriting.Contracts.Lookups.UnderwritingCase.BatchNumber">
<summary>
.
</summary>
<remarks>Datasource is 'UnderwritingCase.Batch Number'.</remarks>
</member>
</members>
</doc>
