<?xml version="1.0"?>
<doc>
<assembly>
<name>
InMotionGIT.Agenda.Contracts
</name>
</assembly>
<members>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumMailBoxChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumMailBoxTransChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTabEntryTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTabOriginTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTabRecordTypesChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTabRepeatFrequencyChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTabTaskPriorityChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTabTaskStatusChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTaskChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTaskByOwnerViewChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTaskElementChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTaskHistoryChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTaskOwnerChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTaskStatusViewChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTransEntryTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTransOriginTypeChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTransRecordTypesChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTransRepeatFrequencyChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTransTaskPriorityChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Enumerations.EnumTransTaskStatusChild">
 <summary>
 Define classes hierarchically.
 </summary>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.MailBox">
 <summary>
 .
 </summary>
<remarks>Data source is 'MailBox'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.CreateNewMailBox">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._Id">
<summary>
.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._ParentId">
<summary>
.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._OwnerId">
<summary>
.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._DisplayOrder">
<summary>
.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._SourceType">
<summary>
Tipo de fuentes:
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._Condition">
<summary>
.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBox._Table1s">
<summary>
.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.Id">
<summary>
..
</summary>
<remarks>Data source is 'MailBox.Id'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.ParentId">
<summary>
..
</summary>
<remarks>Data source is 'MailBox.ParentId'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.OwnerId">
<summary>
..
</summary>
<remarks>Data source is 'MailBox.OwnerId'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.DisplayOrder">
<summary>
..
</summary>
<remarks>Data source is 'MailBox.DisplayOrder'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.SourceType">
<summary>
Tipo de fuentes:.
</summary>
<remarks>Data source is 'MailBox.SourceType'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.Condition">
<summary>
..
</summary>
<remarks>Data source is 'MailBox.Condition'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data source is 'MailBox.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data source is 'MailBox.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data source is 'MailBox.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data source is 'MailBox.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data source is 'MailBox.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.NewTable1sInstance">
<summary>
Initializes the 'Table1s' list.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.NewMailBoxTransItem(System.Boolean)">
<summary>
Add a new item to the collection of 'Table1s', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'MailBoxTrans' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.Table1s">
<summary>
. collection.
</summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.Compare(InMotionGIT.Agenda.Contracts.MailBox,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="MailBoxItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBox.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.MailBox},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.MailBox},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.MailBox})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBox.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.MailBox})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.MailBoxTrans">
 <summary>
 .
 </summary>
<remarks>Data source is 'MailBoxTrans'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.CreateNewMailBoxTrans">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBoxTrans._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBoxTrans._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBoxTrans._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBoxTrans._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBoxTrans._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBoxTrans._Id">
<summary>
.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBoxTrans._Language">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBoxTrans._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBoxTrans._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBoxTrans._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBoxTrans._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.MailBoxTrans._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBoxTrans.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBoxTrans.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBoxTrans.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBoxTrans.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBoxTrans.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBoxTrans.Id">
<summary>
..
</summary>
<remarks>Data source is 'MailBoxTrans.Id'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBoxTrans.Language">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data source is 'MailBoxTrans.Language'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBoxTrans.Description">
<summary>
Description associated with the code. (Title).
</summary>
<remarks>Data source is 'MailBoxTrans.Title'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBoxTrans.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data source is 'MailBoxTrans.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBoxTrans.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data source is 'MailBoxTrans.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBoxTrans.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data source is 'MailBoxTrans.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBoxTrans.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data source is 'MailBoxTrans.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.Compare(InMotionGIT.Agenda.Contracts.MailBoxTrans,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="MailBoxTransItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.MailBoxTrans.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.MailBoxTrans},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.MailBoxTrans},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.MailBoxTrans})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.MailBoxTrans.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.MailBoxTrans})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TabEntryType">
 <summary>
 TabEntryType
 </summary>
<remarks>Data source is 'TabEntryType'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.CreateNewTabEntryType">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabEntryType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabEntryType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabEntryType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabEntryType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabEntryType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabEntryType._EntryType">
<summary>
Code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabEntryType._RecordStatus">
<summary>
Status of the record.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabEntryType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabEntryType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabEntryType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabEntryType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabEntryType._TransEntryTypes">
<summary>
TransEntryType
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabEntryType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabEntryType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabEntryType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabEntryType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabEntryType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabEntryType.EntryType">
<summary>
Code..
</summary>
<remarks>Data source is 'TabEntryType.EntryType'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabEntryType.RecordStatus">
<summary>
Status of the record..
</summary>
<remarks>Data source is 'TabEntryType.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabEntryType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data source is 'TabEntryType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabEntryType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data source is 'TabEntryType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabEntryType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data source is 'TabEntryType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabEntryType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data source is 'TabEntryType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.NewTransEntryTypesInstance">
<summary>
Initializes the 'TransEntryTypes' list.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.NewTransEntryTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransEntryTypes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransEntryType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabEntryType.TransEntryTypes">
<summary>
TransEntryType collection.
</summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.Compare(InMotionGIT.Agenda.Contracts.TabEntryType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabEntryTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabEntryType.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabEntryType},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabEntryType},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabEntryType})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabEntryType.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabEntryType})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TabOriginType">
 <summary>
 Table of origin types that an activity or event can have. For example: manual, portfolio surveillance, business rule, WF, etc It is useful to know how an activity or event was created.
 </summary>
<remarks>Data source is 'TabOriginType'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.CreateNewTabOriginType">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabOriginType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabOriginType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabOriginType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabOriginType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabOriginType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabOriginType._OriginType">
<summary>
Type of program or person that originated the event or task.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabOriginType._RecordStatus">
<summary>
Status of the record. It allows to restrict the use of the information in the system.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabOriginType._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabOriginType._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabOriginType._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabOriginType._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabOriginType._TransOriginTypes">
<summary>
Table of translation of the origin type that can have an activity or event.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.OriginType">
<summary>
Type of program or person that originated the event or task..
</summary>
<remarks>Data source is 'TabOriginType.OriginType'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.RecordStatus">
<summary>
Status of the record. It allows to restrict the use of the information in the system..
</summary>
<remarks>Data source is 'TabOriginType.RecordStatus'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabOriginType.RecordStatusDescript">
<summary>
Description for property 'RecordStatus'. Description of the record status..
</summary>
<remarks>Data source is 'ETranRecordStatus.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'TabOriginType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'TabOriginType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'TabOriginType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'TabOriginType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.NewTransOriginTypesInstance">
<summary>
Initializes the 'TransOriginTypes' list.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.NewTransOriginTypeItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransOriginTypes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransOriginType' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.TransOriginTypes">
<summary>
Table of translation of the origin type that can have an activity or event. collection.
</summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.Compare(InMotionGIT.Agenda.Contracts.TabOriginType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabOriginTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabOriginType.RecordStatusDescription">
 <summary>
 Status of the record. It allows to restrict the use of the information in the system.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabOriginType},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabOriginType},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabOriginType})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabOriginType.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabOriginType})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TabRecordTypes">
 <summary>
 Table of task types.
 </summary>
<remarks>Data source is 'TabRecordTypes'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.CreateNewTabRecordTypes">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes._RecordType">
<summary>
Type of record of this entry.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes._ReservedValue">
<summary>
Reserved Value.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes._RecordStatus">
<summary>
Status of the record. It allows to restrict the use of the information in the system.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes._TransRecordTypes">
<summary>
Table of translation of task types.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.RecordType">
<summary>
Type of record of this entry..
</summary>
<remarks>Data source is 'TabRecordTypes.RecordType'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.ReservedValue">
<summary>
Reserved Value..
</summary>
<remarks>Data source is 'TabRecordTypes.ReservedValue'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.RecordStatus">
<summary>
Status of the record. It allows to restrict the use of the information in the system..
</summary>
<remarks>Data source is 'TabRecordTypes.RecordStatus'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRecordTypes.RecordStatusDescript">
<summary>
Description for property 'RecordStatus'. Description of the record status..
</summary>
<remarks>Data source is 'ETranRecordStatus.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'TabRecordTypes.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'TabRecordTypes.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'TabRecordTypes.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'TabRecordTypes.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.NewTransRecordTypesInstance">
<summary>
Initializes the 'TransRecordTypes' list.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.NewTransRecordTypesItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransRecordTypes', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransRecordTypes' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.TransRecordTypes">
<summary>
Table of translation of task types. collection.
</summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.Compare(InMotionGIT.Agenda.Contracts.TabRecordTypes,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabRecordTypesItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRecordTypes.RecordStatusDescription">
 <summary>
 Status of the record. It allows to restrict the use of the information in the system.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabRecordTypes},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabRecordTypes},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabRecordTypes})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRecordTypes.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabRecordTypes})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TabRepeatFrequency">
 <summary>
 Table of repeat frequencies that can be assigned to an event.
 </summary>
<remarks>Data source is 'TabRepeatFrequency'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.CreateNewTabRepeatFrequency">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRepeatFrequency._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRepeatFrequency._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRepeatFrequency._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRepeatFrequency._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRepeatFrequency._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRepeatFrequency._RepeatFrequency">
<summary>
For repetitive events, this is the frequency of repeat.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRepeatFrequency._RecordStatus">
<summary>
Status of the record. It allows to restrict the use of the information in the system.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRepeatFrequency._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRepeatFrequency._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRepeatFrequency._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRepeatFrequency._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRepeatFrequency._TransRepeatFrequencies">
<summary>
Table of translation of repeat frequencies for repeatable events.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.RepeatFrequency">
<summary>
For repetitive events, this is the frequency of repeat..
</summary>
<remarks>Data source is 'TabRepeatFrequency.RepeatFrequency'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.RecordStatus">
<summary>
Status of the record. It allows to restrict the use of the information in the system..
</summary>
<remarks>Data source is 'TabRepeatFrequency.RecordStatus'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.RecordStatusDescript">
<summary>
Description for property 'RecordStatus'. Description of the record status..
</summary>
<remarks>Data source is 'ETranRecordStatus.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'TabRepeatFrequency.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'TabRepeatFrequency.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'TabRepeatFrequency.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'TabRepeatFrequency.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.NewTransRepeatFrequenciesInstance">
<summary>
Initializes the 'TransRepeatFrequencies' list.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.NewTransRepeatFrequencyItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransRepeatFrequencies', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransRepeatFrequency' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.TransRepeatFrequencies">
<summary>
Table of translation of repeat frequencies for repeatable events. collection.
</summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.Compare(InMotionGIT.Agenda.Contracts.TabRepeatFrequency,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabRepeatFrequencyItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.RecordStatusDescription">
 <summary>
 Status of the record. It allows to restrict the use of the information in the system.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabRepeatFrequency},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabRepeatFrequency},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabRepeatFrequency})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabRepeatFrequency.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabRepeatFrequency})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TabTaskPriority">
 <summary>
 Table of priority codes.
 </summary>
<remarks>Data source is 'TabTaskPriority'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.CreateNewTabTaskPriority">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority._Priority">
<summary>
Priority assigned to the task. It is useful to determine the order to do the tasks.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority._ReservedValue">
<summary>
Reserved Value
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority._RecordStatus">
<summary>
Status of the record. It allows to restrict the use of the information in the system.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority._TransTaskPriorities">
<summary>
Table of translation of priorities of tasks or events.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.Priority">
<summary>
Priority assigned to the task. It is useful to determine the order to do the tasks..
</summary>
<remarks>Data source is 'TabTaskPriority.Priority'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.ReservedValue">
<summary>
Reserved Value.
</summary>
<remarks>Data source is 'TabTaskPriority.ReservedValue'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.RecordStatus">
<summary>
Status of the record. It allows to restrict the use of the information in the system..
</summary>
<remarks>Data source is 'TabTaskPriority.RecordStatus'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskPriority.RecordStatusDescript">
<summary>
Description for property 'RecordStatus'. Description of the record status..
</summary>
<remarks>Data source is 'ETranRecordStatus.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'TabTaskPriority.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'TabTaskPriority.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'TabTaskPriority.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'TabTaskPriority.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.NewTransTaskPrioritiesInstance">
<summary>
Initializes the 'TransTaskPriorities' list.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.NewTransTaskPriorityItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransTaskPriorities', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransTaskPriority' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.TransTaskPriorities">
<summary>
Table of translation of priorities of tasks or events. collection.
</summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.Compare(InMotionGIT.Agenda.Contracts.TabTaskPriority,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabTaskPriorityItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskPriority.RecordStatusDescription">
 <summary>
 Status of the record. It allows to restrict the use of the information in the system.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabTaskPriority},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabTaskPriority},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabTaskPriority})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskPriority.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabTaskPriority})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TabTaskStatus">
 <summary>
 Status of the record. It allows to restrict the use of the information in the system.
 </summary>
<remarks>Data source is 'TabTaskStatus'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.CreateNewTabTaskStatus">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskStatus._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskStatus._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskStatus._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskStatus._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskStatus._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskStatus._Status">
<summary>
Status of the activity or event (completed, outstanding, etc.).
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskStatus._RecordStatus">
<summary>
Status of the record. It allows to restrict the use of the information in the system.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskStatus._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskStatus._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskStatus._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskStatus._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskStatus._TransTaskStatus">
<summary>
Table of translation of status of tasks or events.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.Status">
<summary>
Status of the activity or event (completed, outstanding, etc.)..
</summary>
<remarks>Data source is 'TabTaskStatus.Status'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.RecordStatus">
<summary>
Status of the record. It allows to restrict the use of the information in the system..
</summary>
<remarks>Data source is 'TabTaskStatus.RecordStatus'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TabTaskStatus.RecordStatusDescript">
<summary>
Description for property 'RecordStatus'. Description of the record status..
</summary>
<remarks>Data source is 'ETranRecordStatus.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'TabTaskStatus.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'TabTaskStatus.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'TabTaskStatus.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'TabTaskStatus.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.NewTransTaskStatusInstance">
<summary>
Initializes the 'TransTaskStatus' list.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.NewTransTaskStatusItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TransTaskStatus', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TransTaskStatus' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.TransTaskStatus">
<summary>
Table of translation of status of tasks or events. collection.
</summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.Compare(InMotionGIT.Agenda.Contracts.TabTaskStatus,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TabTaskStatusItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TabTaskStatus.RecordStatusDescription">
 <summary>
 Status of the record. It allows to restrict the use of the information in the system.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabTaskStatus},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabTaskStatus},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabTaskStatus})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TabTaskStatus.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TabTaskStatus})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.Task">
 <summary>
 Table of tasks or events. It contains all the tasks and events planned for the users of the system. Basically there are two types of records: events (tasks that have a date scheduled) and tasks (non scheduled, like a todo list).
 </summary>
<remarks>Data source is 'Task'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.CreateNewTask">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._TaskID">
<summary>
ID of the task or event. It is a unique code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._RecordType">
<summary>
Record Type.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._OriginType">
<summary>
Type of program or person that originated the event or task.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._OriginatedBy">
<summary>
ID of who originated the task or event. For example, if the task was originated by a business rule, this field will contain the ID of the business rule.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._StartingDateTime">
<summary>
Date and time when the event will start. For example, if the event is a meeting, this field will contain the date and time when it starts.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._EndingDateTime">
<summary>
Date and time when the event will end. For example, if the event is a meeting, this field will contain the date and time when it ends.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._Priority">
<summary>
Priority.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._AllDayActivity">
<summary>
Indicates that the activity will take the full day. When selected, the starting and ending time are not needed.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._IndividualTaskIndicator">
<summary>
Indicates that the task or activity is to be done by one person only. It is useful for tasks or activities assigned to a group of users. In that case, if it is selected, it means that the first user of the group that takes the activity will be able to mark it completed. If it is not selected, each member of the group will have to do it.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._PercentageCompleted">
<summary>
Percentage that has been completed of the activity or task. It is useful to follow up complex activities.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._TaskShortDescription">
<summary>
Short description of the activity. It is the text shown when the user inquiries the agenda or todo list.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._TaskLongDescription">
<summary>
Detailed description of the activity. It is used only if the short description is not enough.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._VisualTIMETransaction">
<summary>
Code of the VisualTIME transaction that allows to perform the activity using the system.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._CompletedAction">
<summary>
Action to take when the task is to be done.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._AlarmActive">
<summary>
Indicates that there is an alarm set for this activity or task.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._AlarmDateTime">
<summary>
Date and time when the alarm is scheduled for this activity or task.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._ReminderInfo">
<summary>
Reminder Info.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._RepeatActive">
<summary>
Indicates that this activity or task is recurrence.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._RepeatFrequency">
<summary>
For repetitive events, this is the frequency of repeat.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._RepeatStartingDate">
<summary>
For repetitive events, this is the starting date of repeat.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._RepeatEndingDate">
<summary>
For repetitive events, this is the ending date of repeat.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._RepeatTimes">
<summary>
For repetitive events, this is the number of times that the event will repeat.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._RecurrenceInfo">
<summary>
Recurrence Info.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._WarningWhenCompleted">
<summary>
To send a message to the user when the task changes to completed state.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._Label">
<summary>
Label.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._ShowTimeAs">
<summary>
Show Time As.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._ResourceInfo">
<summary>
Resource Info.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._LineofBusiness">
<summary>
.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._Status">
<summary>
Status of the activity or event.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._RecordStatus">
<summary>
Status of the record. It allows to restrict the use of the information in the system.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._Location">
<summary>
Localtion
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._TaskElements">
<summary>
This table is an important complement for the table of tasks and events, because it associates the task or event to a document that is stored in the VisualTIME DB, like a policy, claim, application, etc.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._TaskHistories">
<summary>
This table maintains history information about an activity or event. Its only purpose is to support undo actions after any modification.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task._TaskOwners">
<summary>
Table of tasks owners. Task owners can be either specific users or groups of users.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.TaskID">
<summary>
ID of the task or event. It is a unique code..
</summary>
<remarks>Data source is 'Task.TaskID'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RecordType">
<summary>
Record Type..
</summary>
<remarks>Data source is 'Task.RecordType'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task.RecordTypeDescript">
<summary>
Description for property 'RecordType'. Description associated with the code..
</summary>
<remarks>Data source is 'TransRecordTypes.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RecordTypeEnum">
<summary>
Enumeration for property 'RecordType'. Record Type.
</summary>
<remarks>This property use a enumeration based on property 'RecordType'</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.OriginType">
<summary>
Type of program or person that originated the event or task..
</summary>
<remarks>Data source is 'Task.OriginType'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task.OriginTypeDescript">
<summary>
Description for property 'OriginType'. Description associated with the code..
</summary>
<remarks>Data source is 'TransOriginType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.OriginTypeEnum">
<summary>
Enumeration for property 'OriginType'. Type of program or person that originated the event or task.
</summary>
<remarks>This property use a enumeration based on property 'OriginType'</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.OriginatedBy">
<summary>
ID of who originated the task or event. For example, if the task was originated by a business rule, this field will contain the ID of the business rule..
</summary>
<remarks>Data source is 'Task.OriginatedBy'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.StartingDateTime">
<summary>
Date and time when the event will start. For example, if the event is a meeting, this field will contain the date and time when it starts..
</summary>
<remarks>Data source is 'Task.StartingDateTime'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.EndingDateTime">
<summary>
Date and time when the event will end. For example, if the event is a meeting, this field will contain the date and time when it ends..
</summary>
<remarks>Data source is 'Task.EndingDateTime'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.Priority">
<summary>
Priority..
</summary>
<remarks>Data source is 'Task.Priority'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task.PriorityDescript">
<summary>
Description for property 'Priority'. Description associated with the code..
</summary>
<remarks>Data source is 'TransTaskPriority.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.PriorityEnum">
<summary>
Enumeration for property 'Priority'. Priority.
</summary>
<remarks>This property use a enumeration based on property 'Priority'</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.AllDayActivity">
<summary>
Indicates that the activity will take the full day. When selected, the starting and ending time are not needed..
</summary>
<remarks>Data source is 'Task.AllDayActivity'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.IndividualTaskIndicator">
<summary>
Indicates that the task or activity is to be done by one person only. It is useful for tasks or activities assigned to a group of users. In that case, if it is selected, it means that the first user of the group that takes the activity will be able to mark it completed. If it is not selected, each member of the group will have to do it..
</summary>
<remarks>Data source is 'Task.IndividualTaskIndicator'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.PercentageCompleted">
<summary>
Percentage that has been completed of the activity or task. It is useful to follow up complex activities..
</summary>
<remarks>Data source is 'Task.PercentageCompleted'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.TaskShortDescription">
<summary>
Short description of the activity. It is the text shown when the user inquiries the agenda or todo list..
</summary>
<remarks>Data source is 'Task.TaskShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.TaskLongDescription">
<summary>
Detailed description of the activity. It is used only if the short description is not enough..
</summary>
<remarks>Data source is 'Task.TaskLongDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.VisualTIMETransaction">
<summary>
Code of the VisualTIME transaction that allows to perform the activity using the system..
</summary>
<remarks>Data source is 'Task.VisualTimeTransaction'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.CompletedAction">
<summary>
Action to take when the task is to be done..
</summary>
<remarks>Data source is 'Task.CompletedAction'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.CompletedActionEnum">
<summary>
Enumeration for property 'CompletedAction'. Action to take when the task is to be done.
</summary>
<remarks>This property use a enumeration based on property 'CompletedAction'</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.AlarmActive">
<summary>
Indicates that there is an alarm set for this activity or task..
</summary>
<remarks>Data source is 'Task.AlarmActive'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.AlarmDateTime">
<summary>
Date and time when the alarm is scheduled for this activity or task..
</summary>
<remarks>Data source is 'Task.AlarmDateTime'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.ReminderInfo">
<summary>
Reminder Info..
</summary>
<remarks>Data source is 'Task.ReminderInfo'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RepeatActive">
<summary>
Indicates that this activity or task is recurrence..
</summary>
<remarks>Data source is 'Task.RepeatActive'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RepeatFrequency">
<summary>
For repetitive events, this is the frequency of repeat..
</summary>
<remarks>Data source is 'Task.RepeatFrequency'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task.RepeatFrequencyDescript">
<summary>
Description for property 'RepeatFrequency'. Description associated with the code..
</summary>
<remarks>Data source is 'TransRepeatFrequency.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RepeatFrequencyEnum">
<summary>
Enumeration for property 'RepeatFrequency'. For repetitive events, this is the frequency of repeat.
</summary>
<remarks>This property use a enumeration based on property 'RepeatFrequency'</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RepeatStartingDate">
<summary>
For repetitive events, this is the starting date of repeat..
</summary>
<remarks>Data source is 'Task.RepeatStartingDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RepeatEndingDate">
<summary>
For repetitive events, this is the ending date of repeat..
</summary>
<remarks>Data source is 'Task.RepeatEndingDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RepeatTimes">
<summary>
For repetitive events, this is the number of times that the event will repeat..
</summary>
<remarks>Data source is 'Task.RepeatTimes'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RecurrenceInfo">
<summary>
Recurrence Info..
</summary>
<remarks>Data source is 'Task.RecurrenceInfo'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.WarningWhenCompleted">
<summary>
To send a message to the user when the task changes to completed state..
</summary>
<remarks>Data source is 'Task.WarningWhenCompleted'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.Label">
<summary>
Label..
</summary>
<remarks>Data source is 'Task.Label'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.ShowTimeAs">
<summary>
Show Time As..
</summary>
<remarks>Data source is 'Task.ShowTimeAs'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.ResourceInfo">
<summary>
Resource Info..
</summary>
<remarks>Data source is 'Task.ResourceInfo'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.LineofBusiness">
<summary>
..
</summary>
<remarks>Data source is 'Task.LineOfBusiness'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.Status">
<summary>
Status of the activity or event..
</summary>
<remarks>Data source is 'Task.Status'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task.StatusDescript">
<summary>
Description for property 'Status'. Description associated with the code..
</summary>
<remarks>Data source is 'TransTaskStatus.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.StatusEnum">
<summary>
Enumeration for property 'Status'. Status of the activity or event.
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RecordStatus">
<summary>
Status of the record. It allows to restrict the use of the information in the system..
</summary>
<remarks>Data source is 'Task.RecordStatus'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.Task.RecordStatusDescript">
<summary>
Description for property 'RecordStatus'. Description of the record status..
</summary>
<remarks>Data source is 'ETranRecordStatus.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RecordStatusEnum">
<summary>
Enumeration for property 'RecordStatus'. Status of the record. It allows to restrict the use of the information in the system.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.Location">
<summary>
Localtion.
</summary>
<remarks>Data source is 'Task.Location'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'Task.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'Task.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'Task.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'Task.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.NewTaskElementsInstance">
<summary>
Initializes the 'TaskElements' list.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.NewTaskElementItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TaskElements', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TaskElement' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.TaskElements">
<summary>
This table is an important complement for the table of tasks and events, because it associates the task or event to a document that is stored in the VisualTIME DB, like a policy, claim, application, etc. collection.
</summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.NewTaskHistoriesInstance">
<summary>
Initializes the 'TaskHistories' list.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.NewTaskHistoryItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TaskHistories', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TaskHistory' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.TaskHistories">
<summary>
This table maintains history information about an activity or event. Its only purpose is to support undo actions after any modification. collection.
</summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.NewTaskOwnersInstance">
<summary>
Initializes the 'TaskOwners' list.
</summary>
 <returns>The collection initialized.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.NewTaskOwnerItem(System.Boolean)">
<summary>
Add a new item to the collection of 'TaskOwners', allowing or not, that this collection is already initialized.
</summary>
 <param name="clear">Indicates that you must first initialize the collection.</param>
 <returns>Instance of the 'TaskOwner' class, previously added to the collection.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.TaskOwners">
<summary>
Table of tasks owners. Task owners can be either specific users or groups of users. collection.
</summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.Compare(InMotionGIT.Agenda.Contracts.Task,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TaskItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RecordTypeDescription">
 <summary>
 Record Type.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRecordTypes'.
 </remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.OriginTypeDescription">
 <summary>
 Type of program or person that originated the event or task.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabOriginType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.PriorityDescription">
 <summary>
 Priority.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabTaskPriority'.
 </remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RepeatFrequencyDescription">
 <summary>
 For repetitive events, this is the frequency of repeat.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabRepeatFrequency'.
 </remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.StatusDescription">
 <summary>
 Status of the activity or event.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabTaskStatus'.
 </remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.Task.RecordStatusDescription">
 <summary>
 Status of the record. It allows to restrict the use of the information in the system.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.Task},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.Task},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.Task})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.Task.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.Task})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TaskByOwnerView">
 <summary>
 TaskByOwnerView
 </summary>
<remarks>Data source is 'TaskByOwnerView'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.CreateNewTaskByOwnerView">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._TaskId">
<summary>
TaskId
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._AlarmActive">
<summary>
AlarmActive
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._AlarmSateTime">
<summary>
AlarmSateTime
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._AllDayActivity">
<summary>
AllDayActivity
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._CompletedAction">
<summary>
CompletedAction
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._EndingDateTime">
<summary>
EndingDateTime
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._GroupId">
<summary>
GroupId
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._IndividualTaskIndicator">
<summary>
IndividualTaskIndicator
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._Label">
<summary>
Label
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._LanguageId">
<summary>
LanguageId
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._Location">
<summary>
Location
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._OriginatedBy">
<summary>
OriginatedBy
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._OriginType">
<summary>
OriginType
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._OriginTypeDescript">
<summary>
OriginTypeDescript
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._PercentageCompleted">
<summary>
PercentageCompleted
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._Priority">
<summary>
Priority
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._PriorityDescript">
<summary>
PriorityDescript
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._RecordStatus">
<summary>
RecordStatus
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._RecordStatusDescript">
<summary>
RecordStatusDescript
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._RecordType">
<summary>
RecordType
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._RecurrenceInfo">
<summary>
RecurrenceInfo
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._ReminderInfo">
<summary>
ReminderInfo
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._RepeatActive">
<summary>
RepeatActive
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._RepeatEndingDate">
<summary>
RepeatEndingDate
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._RepeatFrequency">
<summary>
RepeatFrequency
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._RepeatFrequencyDescript">
<summary>
RepeatFrequencyDescript
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._RepeatStartingDate">
<summary>
RepeatStartingDate
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._RepeatTimes">
<summary>
RepeatTimes
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._ResourceInfo">
<summary>
ResourceInfo
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._ShowTimeAs">
<summary>
ShowTimeas
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._StartingDateTime">
<summary>
StartingDateTime
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._Status">
<summary>
Status
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._StatusDescript">
<summary>
StatusDescript
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._TaskLongDescription">
<summary>
TaskLongDescription
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._TaskShortDescription">
<summary>
TaskShortDescription
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._VisualTimeTransaction">
<summary>
VisualTimeTransaction
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskByOwnerView._WarningWhenCompleted">
<summary>
WarningWhenCompleted
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.TaskId">
<summary>
TaskId.
</summary>
<remarks>Data source is 'TaskByOwnerView.TaskId'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.AlarmActive">
<summary>
AlarmActive.
</summary>
<remarks>Data source is 'TaskByOwnerView.AlarmActive'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.AlarmSateTime">
<summary>
AlarmSateTime.
</summary>
<remarks>Data source is 'TaskByOwnerView.AlarmSateTime'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.AllDayActivity">
<summary>
AllDayActivity.
</summary>
<remarks>Data source is 'TaskByOwnerView.AllDayActivity'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.CompletedAction">
<summary>
CompletedAction.
</summary>
<remarks>Data source is 'TaskByOwnerView.CompletedAction'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.EndingDateTime">
<summary>
EndingDateTime.
</summary>
<remarks>Data source is 'TaskByOwnerView.EndingDateTime'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.GroupId">
<summary>
GroupId.
</summary>
<remarks>Data source is 'TaskByOwnerView.GroupId'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.IndividualTaskIndicator">
<summary>
IndividualTaskIndicator.
</summary>
<remarks>Data source is 'TaskByOwnerView.IndividualTaskIndicator'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.Label">
<summary>
Label.
</summary>
<remarks>Data source is 'TaskByOwnerView.Label'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.LanguageId">
<summary>
LanguageId.
</summary>
<remarks>Data source is 'TaskByOwnerView.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.Location">
<summary>
Location.
</summary>
<remarks>Data source is 'TaskByOwnerView.Location'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.OriginatedBy">
<summary>
OriginatedBy.
</summary>
<remarks>Data source is 'TaskByOwnerView.OriginatedBy'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.OriginType">
<summary>
OriginType.
</summary>
<remarks>Data source is 'TaskByOwnerView.OriginType'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.OriginTypeDescript">
<summary>
OriginTypeDescript.
</summary>
<remarks>Data source is 'TaskByOwnerView.OriginTypeDescript'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.PercentageCompleted">
<summary>
PercentageCompleted.
</summary>
<remarks>Data source is 'TaskByOwnerView.PercentageCompleted'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.Priority">
<summary>
Priority.
</summary>
<remarks>Data source is 'TaskByOwnerView.Priority'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.PriorityDescript">
<summary>
PriorityDescript.
</summary>
<remarks>Data source is 'TaskByOwnerView.PriorityDescript'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.RecordStatus">
<summary>
RecordStatus.
</summary>
<remarks>Data source is 'TaskByOwnerView.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.RecordStatusDescript">
<summary>
RecordStatusDescript.
</summary>
<remarks>Data source is 'TaskByOwnerView.RecordStatusDescript'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.RecordType">
<summary>
RecordType.
</summary>
<remarks>Data source is 'TaskByOwnerView.RecordType'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.RecurrenceInfo">
<summary>
RecurrenceInfo.
</summary>
<remarks>Data source is 'TaskByOwnerView.RecurrenceInfo'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.ReminderInfo">
<summary>
ReminderInfo.
</summary>
<remarks>Data source is 'TaskByOwnerView.ReminderInfo'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.RepeatActive">
<summary>
RepeatActive.
</summary>
<remarks>Data source is 'TaskByOwnerView.RepeatActive'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.RepeatEndingDate">
<summary>
RepeatEndingDate.
</summary>
<remarks>Data source is 'TaskByOwnerView.RepeatEndingDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.RepeatFrequency">
<summary>
RepeatFrequency.
</summary>
<remarks>Data source is 'TaskByOwnerView.RepeatFrequency'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.RepeatFrequencyDescript">
<summary>
RepeatFrequencyDescript.
</summary>
<remarks>Data source is 'TaskByOwnerView.RepeatFrequencyDescript'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.RepeatStartingDate">
<summary>
RepeatStartingDate.
</summary>
<remarks>Data source is 'TaskByOwnerView.RepeatStartingDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.RepeatTimes">
<summary>
RepeatTimes.
</summary>
<remarks>Data source is 'TaskByOwnerView.RepeatTimes'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.ResourceInfo">
<summary>
ResourceInfo.
</summary>
<remarks>Data source is 'TaskByOwnerView.ResourceInfo'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.ShowTimeAs">
<summary>
ShowTimeas.
</summary>
<remarks>Data source is 'TaskByOwnerView.ShowTimeAs'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.StartingDateTime">
<summary>
StartingDateTime.
</summary>
<remarks>Data source is 'TaskByOwnerView.StartingDateTime'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.Status">
<summary>
Status.
</summary>
<remarks>Data source is 'TaskByOwnerView.Status'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.StatusDescript">
<summary>
StatusDescript.
</summary>
<remarks>Data source is 'TaskByOwnerView.StatusDescript'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.TaskLongDescription">
<summary>
TaskLongDescription.
</summary>
<remarks>Data source is 'TaskByOwnerView.TaskLongDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.TaskShortDescription">
<summary>
TaskShortDescription.
</summary>
<remarks>Data source is 'TaskByOwnerView.TaskShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.VisualTimeTransaction">
<summary>
VisualTimeTransaction.
</summary>
<remarks>Data source is 'TaskByOwnerView.VisualTimeTransaction'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.WarningWhenCompleted">
<summary>
WarningWhenCompleted.
</summary>
<remarks>Data source is 'TaskByOwnerView.WarningWhenCompleted'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.Compare(InMotionGIT.Agenda.Contracts.TaskByOwnerView,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TaskByOwnerViewItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerView.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskByOwnerView},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskByOwnerView},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskByOwnerView})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskByOwnerView.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskByOwnerView})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TaskElement">
 <summary>
 This table is an important complement for the table of tasks and events, because it associates the task or event to a document that is stored in the VisualTIME DB, like a policy, claim, application, etc.
 </summary>
<remarks>Data source is 'TaskElement'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.CreateNewTaskElement">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskElement._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskElement._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskElement._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskElement._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskElement._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskElement._TaskID">
<summary>
ID of the task or event. It is a unique code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskElement._ElementName">
<summary>
Identifier of the element (or document) associated to a task or event.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskElement._ElementValue">
<summary>
Element Value.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskElement._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskElement._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskElement._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskElement._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskElement.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskElement.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskElement.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskElement.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskElement.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskElement.TaskID">
<summary>
ID of the task or event. It is a unique code..
</summary>
<remarks>Data source is 'TaskElement.TaskID'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskElement.ElementName">
<summary>
Identifier of the element (or document) associated to a task or event..
</summary>
<remarks>Data source is 'TaskElement.ElementName'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskElement.ElementValue">
<summary>
Element Value..
</summary>
<remarks>Data source is 'TaskElement.ElementValue'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskElement.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'TaskElement.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskElement.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'TaskElement.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskElement.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'TaskElement.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskElement.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'TaskElement.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.Compare(InMotionGIT.Agenda.Contracts.TaskElement,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TaskElementItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskElement.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskElement},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskElement},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskElement})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskElement.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskElement})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TaskHistory">
 <summary>
 This table maintains history information about an activity or event. Its only purpose is to support undo actions after any modification.
 </summary>
<remarks>Data source is 'TaskHistory'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.CreateNewTaskHistory">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._TaskID">
<summary>
ID of the task or event. It is a unique code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._EntryTime">
<summary>
Date and time of the entry, when the history event ocurred.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._EntryType">
<summary>
Entry Type
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._StartingDateTime">
<summary>
Date and time when the event will start. For example, if the event is a meeting, this field will contain the date and time when it starts.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._EndingDateTime">
<summary>
Date and time when the event will end. For example, if the event is a meeting, this field will contain the date and time when it ends.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._TaskShortDescription">
<summary>
Short description of the activity. It is the text shown when the user inquiries the agenda or todo list.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._Priority">
<summary>
Priority assigned to the task. It is useful to determine the order to do the tasks.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._AlarmActive">
<summary>
Indicates that there is an alarm set for this activity or task.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._AlarmDateTime">
<summary>
Date and time when the alarm is scheduled for this activity or task.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._Status">
<summary>
Status of the activity or event.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._PercentageCompleted">
<summary>
Percentage that has been completed of the activity or task. It is useful to follow up complex activities.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._UserID">
<summary>
User ID
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.TaskID">
<summary>
ID of the task or event. It is a unique code..
</summary>
<remarks>Data source is 'TaskHistory.TaskID'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.EntryTime">
<summary>
Date and time of the entry, when the history event ocurred..
</summary>
<remarks>Data source is 'TaskHistory.EntryTime'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.EntryType">
<summary>
Entry Type.
</summary>
<remarks>Data source is 'TaskHistory.EntryType'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory.EntryTypeDescript">
<summary>
Description for property 'EntryType'. Description associated with the code..
</summary>
<remarks>Data source is 'TransEntryType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.EntryTypeEnum">
<summary>
Enumeration for property 'EntryType'. Entry Type
</summary>
<remarks>This property use a enumeration based on property 'EntryType'</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.StartingDateTime">
<summary>
Date and time when the event will start. For example, if the event is a meeting, this field will contain the date and time when it starts..
</summary>
<remarks>Data source is 'TaskHistory.StartingDateTime'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.EndingDateTime">
<summary>
Date and time when the event will end. For example, if the event is a meeting, this field will contain the date and time when it ends..
</summary>
<remarks>Data source is 'TaskHistory.EndingDateTime'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.TaskShortDescription">
<summary>
Short description of the activity. It is the text shown when the user inquiries the agenda or todo list..
</summary>
<remarks>Data source is 'TaskHistory.TaskShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.Priority">
<summary>
Priority assigned to the task. It is useful to determine the order to do the tasks..
</summary>
<remarks>Data source is 'TaskHistory.Priority'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory.PriorityDescript">
<summary>
Description for property 'Priority'. Description associated with the code..
</summary>
<remarks>Data source is 'TransTaskPriority.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.PriorityEnum">
<summary>
Enumeration for property 'Priority'. Priority assigned to the task. It is useful to determine the order to do the tasks.
</summary>
<remarks>This property use a enumeration based on property 'Priority'</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.AlarmActive">
<summary>
Indicates that there is an alarm set for this activity or task..
</summary>
<remarks>Data source is 'TaskHistory.AlarmActive'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.AlarmDateTime">
<summary>
Date and time when the alarm is scheduled for this activity or task..
</summary>
<remarks>Data source is 'TaskHistory.AlarmDateTime'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.Status">
<summary>
Status of the activity or event..
</summary>
<remarks>Data source is 'TaskHistory.Status'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskHistory.StatusDescript">
<summary>
Description for property 'Status'. Description associated with the code..
</summary>
<remarks>Data source is 'TransTaskStatus.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.StatusEnum">
<summary>
Enumeration for property 'Status'. Status of the activity or event.
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.PercentageCompleted">
<summary>
Percentage that has been completed of the activity or task. It is useful to follow up complex activities..
</summary>
<remarks>Data source is 'TaskHistory.PercentageCompleted'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.UserID">
<summary>
User ID.
</summary>
<remarks>Data source is 'TaskHistory.UserID'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'TaskHistory.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'TaskHistory.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'TaskHistory.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'TaskHistory.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.Compare(InMotionGIT.Agenda.Contracts.TaskHistory,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TaskHistoryItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.EntryTypeDescription">
 <summary>
 Entry Type
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabEntryType'.
 </remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.PriorityDescription">
 <summary>
 Priority assigned to the task. It is useful to determine the order to do the tasks.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabTaskPriority'.
 </remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskHistory.StatusDescription">
 <summary>
 Status of the activity or event.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabTaskStatus'.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskHistory},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskHistory},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskHistory})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskHistory.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskHistory})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TaskOwner">
 <summary>
 Table of tasks owners. Task owners can be either specific users or groups of users.
 </summary>
<remarks>Data source is 'TaskOwner'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.CreateNewTaskOwner">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._TaskID">
<summary>
ID of the task or event. It is a unique code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._UserId">
<summary>
Code of the user associated to the activity.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._UserIndicator">
<summary>
User Indicator.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._OwnerIndicator">
<summary>
Owner Indicator
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._AssignedDatetime">
<summary>
Assigned Datetime.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._CompleteDatetime">
<summary>
Completed Datetime.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._PercentageCompleted">
<summary>
Percentage Completed.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._Status">
<summary>
Status.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._RecordStatus">
<summary>
Record Status.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.TaskID">
<summary>
ID of the task or event. It is a unique code..
</summary>
<remarks>Data source is 'TaskOwner.TaskID'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.UserId">
<summary>
Code of the user associated to the activity..
</summary>
<remarks>Data source is 'TaskOwner.UserId'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.UserIndicator">
<summary>
User Indicator..
</summary>
<remarks>Data source is 'TaskOwner.UserIndicator'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.OwnerIndicator">
<summary>
Owner Indicator.
</summary>
<remarks>Data source is 'TaskOwner.OwnerIndicator'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.AssignedDatetime">
<summary>
Assigned Datetime..
</summary>
<remarks>Data source is 'TaskOwner.AssignedDatetime'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.CompleteDatetime">
<summary>
Completed Datetime..
</summary>
<remarks>Data source is 'TaskOwner.CompleteDatetime'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.PercentageCompleted">
<summary>
Percentage Completed..
</summary>
<remarks>Data source is 'TaskOwner.PercentageCompleted'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.Status">
<summary>
Status..
</summary>
<remarks>Data source is 'TaskOwner.Status'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.StatusEnum">
<summary>
Enumeration for property 'Status'. Status.
</summary>
<remarks>This property use a enumeration based on property 'Status'</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.RecordStatus">
<summary>
Record Status..
</summary>
<remarks>Data source is 'TaskOwner.RecordStatus'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskOwner.RecordStatusDescript">
<summary>
Description for property 'RecordStatus'. Description of the record status..
</summary>
<remarks>Data source is 'ETranRecordStatus.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.RecordStatusEnum">
<summary>
Enumeration for property 'RecordStatus'. Record Status.
</summary>
<remarks>This property use a enumeration based on property 'RecordStatus'</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'TaskOwner.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'TaskOwner.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'TaskOwner.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'TaskOwner.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.Compare(InMotionGIT.Agenda.Contracts.TaskOwner,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TaskOwnerItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.RecordStatusDescription">
 <summary>
 Record Status.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'EnumRecordStatus'.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskOwner},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskOwner},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskOwner})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskOwner.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskOwner})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskOwner.UserCode">
<summary>
Code of the user associated to the activity.
</summary>
<remarks>Data source is 'TaskOwner.UserId'.</remarks>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TaskStatusView">
 <summary>
 TaskStatusView
 </summary>
<remarks>Data source is 'TaskStatusView'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.CreateNewTaskStatusView">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskStatusView._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskStatusView._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskStatusView._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskStatusView._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskStatusView._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskStatusView._LanguageId">
<summary>
LanguageId
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskStatusView._Description">
<summary>
Description
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskStatusView._RecordStatus">
<summary>
RecordStatus
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskStatusView._ShortDescription">
<summary>
ShortDescription
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TaskStatusView._Status">
<summary>
Status
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskStatusView.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskStatusView.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskStatusView.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskStatusView.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskStatusView.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskStatusView.LanguageId">
<summary>
LanguageId.
</summary>
<remarks>Data source is 'TaskStatusView.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskStatusView.Description">
<summary>
Description.
</summary>
<remarks>Data source is 'TaskStatusView.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskStatusView.RecordStatus">
<summary>
RecordStatus.
</summary>
<remarks>Data source is 'TaskStatusView.RecordStatus'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskStatusView.ShortDescription">
<summary>
ShortDescription.
</summary>
<remarks>Data source is 'TaskStatusView.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskStatusView.Status">
<summary>
Status.
</summary>
<remarks>Data source is 'TaskStatusView.Status'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.Compare(InMotionGIT.Agenda.Contracts.TaskStatusView,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TaskStatusViewItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskStatusView.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskStatusView},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskStatusView},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskStatusView})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TaskStatusView.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TaskStatusView})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TransEntryType">
 <summary>
 TransEntryType
 </summary>
<remarks>Data source is 'TransEntryType'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.CreateNewTransEntryType">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransEntryType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransEntryType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransEntryType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransEntryType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransEntryType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransEntryType._EntryType">
<summary>
Code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransEntryType._LanguageId">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransEntryType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransEntryType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransEntryType._CreatorUserCode">
<summary>
Code of the user creating the record.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransEntryType._CreationDate">
<summary>
Computer date when the record is created.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransEntryType._UpdateUserCode">
<summary>
Code of the user creating or updating the record.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransEntryType._UpdateDate">
<summary>
Computer date when the record is updated or created.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.EntryType">
<summary>
Code..
</summary>
<remarks>Data source is 'TransEntryType.EntryType'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.LanguageId">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data source is 'TransEntryType.LanguageId'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data source is 'TransEntryType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data source is 'TransEntryType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.CreatorUserCode">
<summary>
Code of the user creating the record..
</summary>
<remarks>Data source is 'TransEntryType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.CreationDate">
<summary>
Computer date when the record is created..
</summary>
<remarks>Data source is 'TransEntryType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.UpdateUserCode">
<summary>
Code of the user creating or updating the record..
</summary>
<remarks>Data source is 'TransEntryType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.UpdateDate">
<summary>
Computer date when the record is updated or created..
</summary>
<remarks>Data source is 'TransEntryType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.Compare(InMotionGIT.Agenda.Contracts.TransEntryType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransEntryTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransEntryType.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransEntryType},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransEntryType},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransEntryType})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransEntryType.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransEntryType})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TransOriginType">
 <summary>
 Table of translation of the origin type that can have an activity or event.
 </summary>
<remarks>Data source is 'TransOriginType'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.CreateNewTransOriginType">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType._OriginType">
<summary>
Type of program or person that originated the event or task.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType._LanguageID">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.OriginType">
<summary>
Type of program or person that originated the event or task..
</summary>
<remarks>Data source is 'TransOriginType.OriginType'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.LanguageID">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data source is 'TransOriginType.LanguageID'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransOriginType.LanguageIDDescript">
<summary>
Description for property 'LanguageID'. Description of the record status..
</summary>
<remarks>Data source is 'TransLanguage.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data source is 'TransOriginType.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data source is 'TransOriginType.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'TransOriginType.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'TransOriginType.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'TransOriginType.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'TransOriginType.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.Compare(InMotionGIT.Agenda.Contracts.TransOriginType,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransOriginTypeItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransOriginType.LanguageIDDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransOriginType},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransOriginType},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransOriginType})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransOriginType.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransOriginType})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TransRecordTypes">
 <summary>
 Table of translation of task types.
 </summary>
<remarks>Data source is 'TransRecordTypes'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.CreateNewTransRecordTypes">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes._RecordType">
<summary>
Type of record of this entry.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes._LanguageID">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.RecordType">
<summary>
Type of record of this entry..
</summary>
<remarks>Data source is 'TransRecordTypes.RecordType'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.LanguageID">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data source is 'TransRecordTypes.LanguageID'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRecordTypes.LanguageIDDescript">
<summary>
Description for property 'LanguageID'. Description of the record status..
</summary>
<remarks>Data source is 'TransLanguage.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data source is 'TransRecordTypes.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data source is 'TransRecordTypes.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'TransRecordTypes.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'TransRecordTypes.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'TransRecordTypes.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'TransRecordTypes.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.Compare(InMotionGIT.Agenda.Contracts.TransRecordTypes,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransRecordTypesItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRecordTypes.LanguageIDDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransRecordTypes},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransRecordTypes},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransRecordTypes})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRecordTypes.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransRecordTypes})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TransRepeatFrequency">
 <summary>
 Table of translation of repeat frequencies for repeatable events.
 </summary>
<remarks>Data source is 'TransRepeatFrequency'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.CreateNewTransRepeatFrequency">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency._RepeatFrequency">
<summary>
Repeat Frequency.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency._LanguageID">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.RepeatFrequency">
<summary>
Repeat Frequency..
</summary>
<remarks>Data source is 'TransRepeatFrequency.RepeatFrequency'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.LanguageID">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data source is 'TransRepeatFrequency.LanguageID'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.LanguageIDDescript">
<summary>
Description for property 'LanguageID'. Description of the record status..
</summary>
<remarks>Data source is 'TransLanguage.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data source is 'TransRepeatFrequency.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data source is 'TransRepeatFrequency.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'TransRepeatFrequency.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'TransRepeatFrequency.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'TransRepeatFrequency.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'TransRepeatFrequency.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.Compare(InMotionGIT.Agenda.Contracts.TransRepeatFrequency,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransRepeatFrequencyItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.LanguageIDDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransRepeatFrequency},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransRepeatFrequency},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransRepeatFrequency})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransRepeatFrequency.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransRepeatFrequency})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TransTaskPriority">
 <summary>
 Table of translation of priorities of tasks or events.
 </summary>
<remarks>Data source is 'TransTaskPriority'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.CreateNewTransTaskPriority">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority._Priority">
<summary>
Priority
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority._LanguageID">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority._ShortDescription">
<summary>
&#60;summary Language&#61;&#34;sp&#34; comment&#61;&#34;Descripción corta del valor.&#34; friendlyname&#61;&#34;Descripción Corta&#34; /&#62; &#60;summary Language&#61;&#34;en&#34; comment&#61;&#34;Short description of the value.&#34; friendlyname&#61;&#34;Short Description&#34; /&#62;.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.Priority">
<summary>
Priority.
</summary>
<remarks>Data source is 'TransTaskPriority.Priority'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.LanguageID">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data source is 'TransTaskPriority.LanguageID'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskPriority.LanguageIDDescript">
<summary>
Description for property 'LanguageID'. Description of the record status..
</summary>
<remarks>Data source is 'TransLanguage.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data source is 'TransTaskPriority.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.ShortDescription">
<summary>
&#60;summary Language&#61;&#34;sp&#34; comment&#61;&#34;Descripción corta del valor.&#34; friendlyname&#61;&#34;Descripción Corta&#34; /&#62; &#60;summary Language&#61;&#34;en&#34; comment&#61;&#34;Short description of the value.&#34; friendlyname&#61;&#34;Short Description&#34; /&#62;..
</summary>
<remarks>Data source is 'TransTaskPriority.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'TransTaskPriority.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'TransTaskPriority.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'TransTaskPriority.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'TransTaskPriority.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.Compare(InMotionGIT.Agenda.Contracts.TransTaskPriority,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransTaskPriorityItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskPriority.LanguageIDDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransTaskPriority},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransTaskPriority},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransTaskPriority})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskPriority.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransTaskPriority})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="T:InMotionGIT.Agenda.Contracts.TransTaskStatus">
 <summary>
 Table of translation of status of tasks or events.
 </summary>
<remarks>Data source is 'TransTaskStatus'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.CreateNewTransTaskStatus">
 <summary>
 This is the public class class factory method.
 </summary>
 <returns>class instance.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.Clone">
 <summary>
 Creates a new object that is a copy of the current instance.
 </summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus._stateInstance">
 <summary>
 Gets or sets the instancia state.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus._isNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus._isDirty">
 <summary>
 Gets or sets if the object state is modified or not.
 </summary>
 <remarks></remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus._isDeletedMark">
 <summary>
 Gets or sets if the object state is pending for delete or not.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus._tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus._Status">
<summary>
Status of the activity or event (completed, outstanding, etc.).
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus._LanguageID">
<summary>
Language in which the system shows the information.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus._Description">
<summary>
Description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus._ShortDescription">
<summary>
Brief description associated with the code.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus._CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus._CreationDate">
<summary>
Date and time when the information was created. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus._UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit.
</summary>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus._UpdateDate">
<summary>
Date and time when the information was updated. Information for audit.
</summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.StateInstance">
 <summary>
 Gets or sets the instance state.
 </summary>
 <value>The state of the internal properties of the instance in an array of bytes.</value>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.IsNew">
 <summary>
 Gets or sets the object state is loaded from the database or not.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically insert the record into the database.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.IsDirty">
 <summary>
 Gets or sets the object´s state for Update operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically update the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.IsDeletedMark">
 <summary>
 Gets or sets the object´s state for Delete operation.
 </summary>
 <value>A boolean value based on the property state</value>
 <remarks>If the property value is true, it will phisically delete the record into the database. The typical "VisualTIME's historical" operation won't be handled</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.Tag">
 <summary>
 Gets or sets the object that contains data about the object.
 </summary>
 <value>An Object that contains data about the object. The default is null reference (Nothing in Visual Basic).</value>
 <returns>System.Object</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.Status">
<summary>
Status of the activity or event (completed, outstanding, etc.)..
</summary>
<remarks>Data source is 'TransTaskStatus.Status'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.LanguageID">
<summary>
Language in which the system shows the information..
</summary>
<remarks>Data source is 'TransTaskStatus.LanguageID'.</remarks>
</member>
<member name="F:InMotionGIT.Agenda.Contracts.TransTaskStatus.LanguageIDDescript">
<summary>
Description for property 'LanguageID'. Description of the record status..
</summary>
<remarks>Data source is 'TransLanguage.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.Description">
<summary>
Description associated with the code..
</summary>
<remarks>Data source is 'TransTaskStatus.Description'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.ShortDescription">
<summary>
Brief description associated with the code..
</summary>
<remarks>Data source is 'TransTaskStatus.ShortDescription'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.CreatorUserCode">
<summary>
Code of the user who creates the information. Information for audit..
</summary>
<remarks>Data source is 'TransTaskStatus.CreatorUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.CreationDate">
<summary>
Date and time when the information was created. Information for audit..
</summary>
<remarks>Data source is 'TransTaskStatus.CreationDate'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.UpdateUserCode">
<summary>
Code of the user who updates the information. Information for audit..
</summary>
<remarks>Data source is 'TransTaskStatus.UpdateUserCode'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.UpdateDate">
<summary>
Date and time when the information was updated. Information for audit..
</summary>
<remarks>Data source is 'TransTaskStatus.UpdateDate'.</remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.InitPropertyChanged">
 <summary>
 Initializes the trace level changes properties.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.SetPropertyChanged(System.Boolean)">
 <summary>
 It sets all the properties that were changed or not.
 </summary>
 <param name="changed">Indicator if the property should be given changed or not</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.IsPropertyChanged(System.String)">
 <summary>
 It lets you know if any property of the class has been changed.
 </summary>
 <param name="propertyName"></param>
 <returns>true if the property is modified; otherwise, false.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.GetEntityPropertyValue(System.String,System.String)">
 <summary>
 It allows you to get the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">Property name</param>
 <returns>The value contained by the property if present</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.SetEntityPropertyValue(System.String,System.String,System.Object)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.SetEntityPropertyValue(System.String,System.String,System.Object,System.Int32)">
 <summary>
 It allows you to set the value of a generic property, within the current class or some of the child class.
 </summary>
 <param name="entityName">Entity name</param>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <param name="index">Indicates the index for instance if the entity is a collection</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.GetPropertyValue(System.String)">
 <summary>
 It lets get the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <returns>Property value.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.SetPropertyValue(System.String,System.Object)">
 <summary>
 It sets the value of a property generically.
 </summary>
 <param name="propertyName">property name.</param>
 <param name="value">Property value.</param>
 <returns>True if the property exists, false otherwise.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.Compare(InMotionGIT.Agenda.Contracts.TransTaskStatus,System.Boolean,System.Boolean)">
 <summary>
 Compare a class, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="TransTaskStatusItem">Instance to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance.</param>
 <param name="excludeAuditProperties">It indicates whether the properties audit included in the comparison.</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.ExtensionData">
 <summary>
 Stores data from a versioned data contract that has been extended by adding new members.
 </summary>
 <remarks>
 The ExtensionData field holds data from future versions of the type. This enables this type to be compatible with future versions.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.SaveIntance">
 <summary>
 Method that allows a guardian of the state of the current instance.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.SaveIntanceChildren">
 <summary>
 Method that allows a guardian of the state of the current instance so their children.
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.RestoreIntance">
 <summary>
 Method that allows a restoration of the state of the current instance
 </summary>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.RestoreIntanceChildren">
 <summary>
 Method that allows a restoration of the state of the current instance so their children.
 </summary>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TransTaskStatus.LanguageIDDescription">
 <summary>
 Language in which the system shows the information.
 </summary>
 <remarks>
 This property is associated with the field 'Description' on the table 'TabLanguage'.
 </remarks>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.ListCompare(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransTaskStatus},System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransTaskStatus},System.Boolean,System.Boolean)">
 <summary>
 Compare a list, regarding the current, generating a summary of the properties changed.
 </summary>
 <param name="current">List to compare.</param>
 <param name="items">List to compare.</param>
 <param name="applyChange">It indicates that the detected changes are applied to the current instance..</param>
 <returns>Summary of the properties changed.</returns>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.SaveIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransTaskStatus})">
 <summary>
 Method that allows you to save the state of the collection
 </summary>
 <param name="items">List to save.</param>
</member>
<member name="M:InMotionGIT.Agenda.Contracts.TransTaskStatus.RestoreIntance(System.Collections.Generic.List{InMotionGIT.Agenda.Contracts.TransTaskStatus})">
 <summary>
 Method that allows a restoration of the status of the collection
 </summary>
 <param name="items">List to restore.</param>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerViewTask.UserId">
<summary>
Code of the user associated to the activity.
</summary>
<remarks>Data source is 'TaskOwner.UserId'.</remarks>
</member>
<member name="P:InMotionGIT.Agenda.Contracts.TaskByOwnerViewTask.GroupId">
<summary>
Code of the group associated to the activity.
</summary>
<remarks>Data source is 'TaskOwner.UserId'.</remarks>
</member>
</members>
</doc>
